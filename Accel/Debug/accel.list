
accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000344c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003610  08003610  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003610  08003610  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003610  08003610  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007cd4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001688  00000000  00000000  00027d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000728  00000000  00000000  000293e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000056b  00000000  00000000  00029b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e876  00000000  00000000  0002a073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a099  00000000  00000000  000488e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b84cf  00000000  00000000  00052982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001c20  00000000  00000000  0010ae54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0010ca74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080035c8 	.word	0x080035c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080035c8 	.word	0x080035c8

080001d4 <i2c_read>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// TODO - Read through this function to see how to read a byte via I2C
void i2c_read(uint8_t dev_addr, uint8_t mem_addr, uint8_t* buf, uint16_t size) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af04      	add	r7, sp, #16
 80001da:	603a      	str	r2, [r7, #0]
 80001dc:	461a      	mov	r2, r3
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	460b      	mov	r3, r1
 80001e4:	71bb      	strb	r3, [r7, #6]
 80001e6:	4613      	mov	r3, r2
 80001e8:	80bb      	strh	r3, [r7, #4]
	I2C_HandleTypeDef *i2c = &hi2c3;
 80001ea:	4b12      	ldr	r3, [pc, #72]	; (8000234 <i2c_read+0x60>)
 80001ec:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(i2c, dev_addr << 1, mem_addr, 1, buf, size, 100);
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	b299      	uxth	r1, r3
 80001f6:	79bb      	ldrb	r3, [r7, #6]
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	2364      	movs	r3, #100	; 0x64
 80001fc:	9302      	str	r3, [sp, #8]
 80001fe:	88bb      	ldrh	r3, [r7, #4]
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2301      	movs	r3, #1
 8000208:	68f8      	ldr	r0, [r7, #12]
 800020a:	f001 f97b 	bl	8001504 <HAL_I2C_Mem_Read>
 800020e:	4603      	mov	r3, r0
 8000210:	72fb      	strb	r3, [r7, #11]

	if (status != HAL_OK)
 8000212:	7afb      	ldrb	r3, [r7, #11]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d008      	beq.n	800022a <i2c_read+0x56>
	{
		HAL_I2C_DeInit(i2c);
 8000218:	68f8      	ldr	r0, [r7, #12]
 800021a:	f001 f830 	bl	800127e <HAL_I2C_DeInit>
		HAL_Delay(5);
 800021e:	2005      	movs	r0, #5
 8000220:	f000 fc06 	bl	8000a30 <HAL_Delay>
		HAL_I2C_Init(i2c);
 8000224:	68f8      	ldr	r0, [r7, #12]
 8000226:	f000 ff9b 	bl	8001160 <HAL_I2C_Init>
	}
}
 800022a:	bf00      	nop
 800022c:	3710      	adds	r7, #16
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000074 	.word	0x20000074

08000238 <i2c_write>:

// TODO - Read through this function to see how to read a byte via I2C
void i2c_write(uint8_t dev_addr, uint8_t mem_addr, uint8_t* buf, uint16_t size) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b088      	sub	sp, #32
 800023c:	af04      	add	r7, sp, #16
 800023e:	603a      	str	r2, [r7, #0]
 8000240:	461a      	mov	r2, r3
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
 8000246:	460b      	mov	r3, r1
 8000248:	71bb      	strb	r3, [r7, #6]
 800024a:	4613      	mov	r3, r2
 800024c:	80bb      	strh	r3, [r7, #4]
	I2C_HandleTypeDef *i2c = &hi2c3;
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <i2c_write+0x60>)
 8000250:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(i2c, dev_addr << 1, mem_addr, 1, buf, size, 100);
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	b29b      	uxth	r3, r3
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	b299      	uxth	r1, r3
 800025a:	79bb      	ldrb	r3, [r7, #6]
 800025c:	b29a      	uxth	r2, r3
 800025e:	2364      	movs	r3, #100	; 0x64
 8000260:	9302      	str	r3, [sp, #8]
 8000262:	88bb      	ldrh	r3, [r7, #4]
 8000264:	9301      	str	r3, [sp, #4]
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	2301      	movs	r3, #1
 800026c:	68f8      	ldr	r0, [r7, #12]
 800026e:	f001 f835 	bl	80012dc <HAL_I2C_Mem_Write>
 8000272:	4603      	mov	r3, r0
 8000274:	72fb      	strb	r3, [r7, #11]

	if (status != HAL_OK)
 8000276:	7afb      	ldrb	r3, [r7, #11]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d008      	beq.n	800028e <i2c_write+0x56>
	{
		HAL_I2C_DeInit(i2c);
 800027c:	68f8      	ldr	r0, [r7, #12]
 800027e:	f000 fffe 	bl	800127e <HAL_I2C_DeInit>
		HAL_Delay(5);
 8000282:	2005      	movs	r0, #5
 8000284:	f000 fbd4 	bl	8000a30 <HAL_Delay>
		HAL_I2C_Init(i2c);
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f000 ff69 	bl	8001160 <HAL_I2C_Init>
	}
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000074 	.word	0x20000074

0800029c <get_decimal>:

// TODO - implement this function
float get_decimal(uint8_t addr, uint8_t lsb_reg, uint8_t msb_reg) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
 80002a6:	460b      	mov	r3, r1
 80002a8:	71bb      	strb	r3, [r7, #6]
 80002aa:	4613      	mov	r3, r2
 80002ac:	717b      	strb	r3, [r7, #5]
	const int mg_to_ms2 = 101.971621;
 80002ae:	2365      	movs	r3, #101	; 0x65
 80002b0:	61fb      	str	r3, [r7, #28]

	// Read from the lsb register and msb register
	uint8_t accel_buf[2];
	i2c_read(addr, lsb_reg, accel_buf, 2);
 80002b2:	f107 0208 	add.w	r2, r7, #8
 80002b6:	79b9      	ldrb	r1, [r7, #6]
 80002b8:	79f8      	ldrb	r0, [r7, #7]
 80002ba:	2302      	movs	r3, #2
 80002bc:	f7ff ff8a 	bl	80001d4 <i2c_read>
	uint8_t lsb_val = accel_buf[0];
 80002c0:	7a3b      	ldrb	r3, [r7, #8]
 80002c2:	76fb      	strb	r3, [r7, #27]
	uint8_t msb_val = accel_buf[1];
 80002c4:	7a7b      	ldrb	r3, [r7, #9]
 80002c6:	76bb      	strb	r3, [r7, #26]

	// Combine the lsb and msb val by doing the following:
	// TODO - 1) shift the most significant byte value 8 bits to the left and
	uint16_t shifted_msb = msb_val << 8;
 80002c8:	7ebb      	ldrb	r3, [r7, #26]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	021b      	lsls	r3, r3, #8
 80002ce:	833b      	strh	r3, [r7, #24]
	// TODO - 2) OR'ing it with the lsb val
	uint16_t combined_val = shifted_msb | lsb_val;
 80002d0:	7efb      	ldrb	r3, [r7, #27]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	8b3b      	ldrh	r3, [r7, #24]
 80002d6:	4313      	orrs	r3, r2
 80002d8:	82fb      	strh	r3, [r7, #22]

	// Scale data based on values in the accelerometer library.
	// TODO - Find the scale factor (can be found in the data sheet under Data Format Register section).
	float scale = 1;
 80002da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80002de:	613b      	str	r3, [r7, #16]
	float scaled_data = combined_val * scale;
 80002e0:	8afb      	ldrh	r3, [r7, #22]
 80002e2:	ee07 3a90 	vmov	s15, r3
 80002e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80002ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002f2:	edc7 7a03 	vstr	s15, [r7, #12]

	return scaled_data;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	ee07 3a90 	vmov	s15, r3
}
 80002fc:	eeb0 0a67 	vmov.f32	s0, s15
 8000300:	3720      	adds	r7, #32
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000306:	b580      	push	{r7, lr}
 8000308:	b088      	sub	sp, #32
 800030a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800030c:	f000 fb2a 	bl	8000964 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000310:	f000 f84e 	bl	80003b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000314:	f000 f92e 	bl	8000574 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000318:	f000 f8ac 	bl	8000474 <MX_I2C1_Init>
	MX_I2C3_Init();
 800031c:	f000 f8ea 	bl	80004f4 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */

	// TODO - Find the i2c dev address in the data sheet
	// const int i2c_dev_address = <insert address val here>;
	const uint8_t i2c_dev_address = 0x53;
 8000320:	2353      	movs	r3, #83	; 0x53
 8000322:	77fb      	strb	r3, [r7, #31]

	// TODO - Read through this section for the registers.
	const uint8_t x_lsb_reg = 0x32;
 8000324:	2332      	movs	r3, #50	; 0x32
 8000326:	77bb      	strb	r3, [r7, #30]
	const uint8_t x_msb_reg = 0x33;
 8000328:	2333      	movs	r3, #51	; 0x33
 800032a:	777b      	strb	r3, [r7, #29]
	const uint8_t y_lsb_reg = 0x34;
 800032c:	2334      	movs	r3, #52	; 0x34
 800032e:	773b      	strb	r3, [r7, #28]
	const uint8_t y_msb_reg = 0x35;
 8000330:	2335      	movs	r3, #53	; 0x35
 8000332:	76fb      	strb	r3, [r7, #27]
	const uint8_t z_lsb_reg = 0x36;
 8000334:	2336      	movs	r3, #54	; 0x36
 8000336:	76bb      	strb	r3, [r7, #26]
	const uint8_t z_msb_reg = 0x37;
 8000338:	2337      	movs	r3, #55	; 0x37
 800033a:	767b      	strb	r3, [r7, #25]

	const uint8_t power_ctrl_reg = 0x2D;
 800033c:	232d      	movs	r3, #45	; 0x2d
 800033e:	763b      	strb	r3, [r7, #24]
	const uint8_t data_format_reg = 0x31;
 8000340:	2331      	movs	r3, #49	; 0x31
 8000342:	75fb      	strb	r3, [r7, #23]

	// Formats output data - Must be done before waking device
	// TODO - Format data so that the output range is full resolution +/- 16g
	const uint8_t data_format_val = 0b00011011;
 8000344:	231b      	movs	r3, #27
 8000346:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[1] = {data_format_val};
 8000348:	7dbb      	ldrb	r3, [r7, #22]
 800034a:	713b      	strb	r3, [r7, #4]
	i2c_write(i2c_dev_address, data_format_reg, buf, 1);
 800034c:	1d3a      	adds	r2, r7, #4
 800034e:	7df9      	ldrb	r1, [r7, #23]
 8000350:	7ff8      	ldrb	r0, [r7, #31]
 8000352:	2301      	movs	r3, #1
 8000354:	f7ff ff70 	bl	8000238 <i2c_write>

	// Clear the link bit from power ctrl reg before waking up
	buf[0] = 0b00000000;
 8000358:	2300      	movs	r3, #0
 800035a:	713b      	strb	r3, [r7, #4]
	i2c_write(i2c_dev_address, power_ctrl_reg, buf, 1);
 800035c:	1d3a      	adds	r2, r7, #4
 800035e:	7e39      	ldrb	r1, [r7, #24]
 8000360:	7ff8      	ldrb	r0, [r7, #31]
 8000362:	2301      	movs	r3, #1
 8000364:	f7ff ff68 	bl	8000238 <i2c_write>

	// Wakes the accelerometer from sleep mode.
	// TODO - Write the values to wake the accelerometer from sleep mode
	const uint8_t power_ctrl_val = 0b00001000;
 8000368:	2308      	movs	r3, #8
 800036a:	757b      	strb	r3, [r7, #21]
	buf[0] = power_ctrl_val;
 800036c:	7d7b      	ldrb	r3, [r7, #21]
 800036e:	713b      	strb	r3, [r7, #4]
	i2c_write(i2c_dev_address, power_ctrl_reg, buf, 1);
 8000370:	1d3a      	adds	r2, r7, #4
 8000372:	7e39      	ldrb	r1, [r7, #24]
 8000374:	7ff8      	ldrb	r0, [r7, #31]
 8000376:	2301      	movs	r3, #1
 8000378:	f7ff ff5e 	bl	8000238 <i2c_write>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// TODO - See the following code.
		// TODO - Add breakpoints to see the values change when you run the program in debug.
		float x_val = get_decimal(i2c_dev_address, x_lsb_reg, x_msb_reg);
 800037c:	7f7a      	ldrb	r2, [r7, #29]
 800037e:	7fb9      	ldrb	r1, [r7, #30]
 8000380:	7ffb      	ldrb	r3, [r7, #31]
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff8a 	bl	800029c <get_decimal>
 8000388:	ed87 0a04 	vstr	s0, [r7, #16]
		float y_val = get_decimal(i2c_dev_address, y_lsb_reg, y_msb_reg);
 800038c:	7efa      	ldrb	r2, [r7, #27]
 800038e:	7f39      	ldrb	r1, [r7, #28]
 8000390:	7ffb      	ldrb	r3, [r7, #31]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff82 	bl	800029c <get_decimal>
 8000398:	ed87 0a03 	vstr	s0, [r7, #12]
		float z_val = get_decimal(i2c_dev_address, z_lsb_reg, z_msb_reg);
 800039c:	7e7a      	ldrb	r2, [r7, #25]
 800039e:	7eb9      	ldrb	r1, [r7, #26]
 80003a0:	7ffb      	ldrb	r3, [r7, #31]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff7a 	bl	800029c <get_decimal>
 80003a8:	ed87 0a02 	vstr	s0, [r7, #8]
	{
 80003ac:	e7e6      	b.n	800037c <main+0x76>
	...

080003b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b0a6      	sub	sp, #152	; 0x98
 80003b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ba:	2228      	movs	r2, #40	; 0x28
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f003 f8d6 	bl	8003570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2258      	movs	r2, #88	; 0x58
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 f8c8 	bl	8003570 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e0:	2302      	movs	r3, #2
 80003e2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e4:	2301      	movs	r3, #1
 80003e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e8:	2310      	movs	r3, #16
 80003ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ee:	2302      	movs	r3, #2
 80003f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000400:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fc56 	bl	8001cc0 <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800041a:	f000 f923 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	230f      	movs	r3, #15
 8000420:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000422:	2302      	movs	r3, #2
 8000424:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800042a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000434:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000438:	2102      	movs	r1, #2
 800043a:	4618      	mov	r0, r3
 800043c:	f002 fc94 	bl	8002d68 <HAL_RCC_ClockConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000446:	f000 f90d 	bl	8000664 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3;
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <SystemClock_Config+0xc0>)
 800044c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800044e:	2300      	movs	r3, #0
 8000450:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8000452:	2300      	movs	r3, #0
 8000454:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4618      	mov	r0, r3
 800045a:	f002 fe6b 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000464:	f000 f8fe 	bl	8000664 <Error_Handler>
  }
}
 8000468:	bf00      	nop
 800046a:	3798      	adds	r7, #152	; 0x98
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	00040020 	.word	0x00040020

08000474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_I2C1_Init+0x74>)
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <MX_I2C1_Init+0x78>)
 800047c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <MX_I2C1_Init+0x74>)
 8000480:	4a1b      	ldr	r2, [pc, #108]	; (80004f0 <MX_I2C1_Init+0x7c>)
 8000482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <MX_I2C1_Init+0x74>)
 800048c:	2201      	movs	r2, #1
 800048e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <MX_I2C1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000496:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <MX_I2C1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <MX_I2C1_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a2:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_I2C1_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_I2C1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ae:	480e      	ldr	r0, [pc, #56]	; (80004e8 <MX_I2C1_Init+0x74>)
 80004b0:	f000 fe56 	bl	8001160 <HAL_I2C_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004ba:	f000 f8d3 	bl	8000664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004be:	2100      	movs	r1, #0
 80004c0:	4809      	ldr	r0, [pc, #36]	; (80004e8 <MX_I2C1_Init+0x74>)
 80004c2:	f001 fb65 	bl	8001b90 <HAL_I2CEx_ConfigAnalogFilter>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004cc:	f000 f8ca 	bl	8000664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004d0:	2100      	movs	r1, #0
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_I2C1_Init+0x74>)
 80004d4:	f001 fba7 	bl	8001c26 <HAL_I2CEx_ConfigDigitalFilter>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004de:	f000 f8c1 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000028 	.word	0x20000028
 80004ec:	40005400 	.word	0x40005400
 80004f0:	2000090e 	.word	0x2000090e

080004f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_I2C3_Init+0x74>)
 80004fa:	4a1c      	ldr	r2, [pc, #112]	; (800056c <MX_I2C3_Init+0x78>)
 80004fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_I2C3_Init+0x74>)
 8000500:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <MX_I2C3_Init+0x7c>)
 8000502:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_I2C3_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <MX_I2C3_Init+0x74>)
 800050c:	2201      	movs	r2, #1
 800050e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_I2C3_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_I2C3_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_I2C3_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_I2C3_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_I2C3_Init+0x74>)
 800052a:	2200      	movs	r2, #0
 800052c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800052e:	480e      	ldr	r0, [pc, #56]	; (8000568 <MX_I2C3_Init+0x74>)
 8000530:	f000 fe16 	bl	8001160 <HAL_I2C_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800053a:	f000 f893 	bl	8000664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800053e:	2100      	movs	r1, #0
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <MX_I2C3_Init+0x74>)
 8000542:	f001 fb25 	bl	8001b90 <HAL_I2CEx_ConfigAnalogFilter>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800054c:	f000 f88a 	bl	8000664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000550:	2100      	movs	r1, #0
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_I2C3_Init+0x74>)
 8000554:	f001 fb67 	bl	8001c26 <HAL_I2CEx_ConfigDigitalFilter>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800055e:	f000 f881 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000074 	.word	0x20000074
 800056c:	40007800 	.word	0x40007800
 8000570:	2000090e 	.word	0x2000090e

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b34      	ldr	r3, [pc, #208]	; (800065c <MX_GPIO_Init+0xe8>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a33      	ldr	r2, [pc, #204]	; (800065c <MX_GPIO_Init+0xe8>)
 8000590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b31      	ldr	r3, [pc, #196]	; (800065c <MX_GPIO_Init+0xe8>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <MX_GPIO_Init+0xe8>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a2d      	ldr	r2, [pc, #180]	; (800065c <MX_GPIO_Init+0xe8>)
 80005a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <MX_GPIO_Init+0xe8>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b28      	ldr	r3, [pc, #160]	; (800065c <MX_GPIO_Init+0xe8>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a27      	ldr	r2, [pc, #156]	; (800065c <MX_GPIO_Init+0xe8>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b25      	ldr	r3, [pc, #148]	; (800065c <MX_GPIO_Init+0xe8>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b22      	ldr	r3, [pc, #136]	; (800065c <MX_GPIO_Init+0xe8>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a21      	ldr	r2, [pc, #132]	; (800065c <MX_GPIO_Init+0xe8>)
 80005d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <MX_GPIO_Init+0xe8>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f000 fd9d 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4814      	ldr	r0, [pc, #80]	; (8000660 <MX_GPIO_Init+0xec>)
 800060e:	f000 fb19 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000612:	230c      	movs	r3, #12
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000622:	2307      	movs	r3, #7
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f000 fb08 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000634:	2320      	movs	r3, #32
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f000 faf9 	bl	8000c44 <HAL_GPIO_Init>

}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	48000800 	.word	0x48000800

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	e7fe      	b.n	800066c <Error_Handler+0x8>
	...

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_MspInit+0x44>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <HAL_MspInit+0x44>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6193      	str	r3, [r2, #24]
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_MspInit+0x44>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_MspInit+0x44>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <HAL_MspInit+0x44>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_MspInit+0x44>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006a6:	2007      	movs	r0, #7
 80006a8:	f000 fa98 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08e      	sub	sp, #56	; 0x38
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a4c      	ldr	r2, [pc, #304]	; (8000808 <HAL_I2C_MspInit+0x150>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d146      	bne.n	8000768 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b4c      	ldr	r3, [pc, #304]	; (800080c <HAL_I2C_MspInit+0x154>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a4b      	ldr	r2, [pc, #300]	; (800080c <HAL_I2C_MspInit+0x154>)
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b49      	ldr	r3, [pc, #292]	; (800080c <HAL_I2C_MspInit+0x154>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ee:	623b      	str	r3, [r7, #32]
 80006f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b46      	ldr	r3, [pc, #280]	; (800080c <HAL_I2C_MspInit+0x154>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a45      	ldr	r2, [pc, #276]	; (800080c <HAL_I2C_MspInit+0x154>)
 80006f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b43      	ldr	r3, [pc, #268]	; (800080c <HAL_I2C_MspInit+0x154>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000706:	61fb      	str	r3, [r7, #28]
 8000708:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800070a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000710:	2312      	movs	r3, #18
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800071c:	2304      	movs	r3, #4
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fa8b 	bl	8000c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000732:	2312      	movs	r3, #18
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073e:	2304      	movs	r3, #4
 8000740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	4619      	mov	r1, r3
 8000748:	4831      	ldr	r0, [pc, #196]	; (8000810 <HAL_I2C_MspInit+0x158>)
 800074a:	f000 fa7b 	bl	8000c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074e:	4b2f      	ldr	r3, [pc, #188]	; (800080c <HAL_I2C_MspInit+0x154>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a2e      	ldr	r2, [pc, #184]	; (800080c <HAL_I2C_MspInit+0x154>)
 8000754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <HAL_I2C_MspInit+0x154>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000766:	e04b      	b.n	8000800 <HAL_I2C_MspInit+0x148>
  else if(hi2c->Instance==I2C3)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a29      	ldr	r2, [pc, #164]	; (8000814 <HAL_I2C_MspInit+0x15c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d146      	bne.n	8000800 <HAL_I2C_MspInit+0x148>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <HAL_I2C_MspInit+0x154>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a25      	ldr	r2, [pc, #148]	; (800080c <HAL_I2C_MspInit+0x154>)
 8000778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <HAL_I2C_MspInit+0x154>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <HAL_I2C_MspInit+0x154>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a1f      	ldr	r2, [pc, #124]	; (800080c <HAL_I2C_MspInit+0x154>)
 8000790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <HAL_I2C_MspInit+0x154>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a8:	2312      	movs	r3, #18
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80007b4:	2303      	movs	r3, #3
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007bc:	4619      	mov	r1, r3
 80007be:	4816      	ldr	r0, [pc, #88]	; (8000818 <HAL_I2C_MspInit+0x160>)
 80007c0:	f000 fa40 	bl	8000c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ca:	2312      	movs	r3, #18
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80007d6:	2303      	movs	r3, #3
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	4619      	mov	r1, r3
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f000 fa2e 	bl	8000c44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_I2C_MspInit+0x154>)
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_I2C_MspInit+0x154>)
 80007ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80007f2:	61d3      	str	r3, [r2, #28]
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_I2C_MspInit+0x154>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	bf00      	nop
 8000802:	3738      	adds	r7, #56	; 0x38
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40005400 	.word	0x40005400
 800080c:	40021000 	.word	0x40021000
 8000810:	48000400 	.word	0x48000400
 8000814:	40007800 	.word	0x40007800
 8000818:	48000800 	.word	0x48000800

0800081c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a16      	ldr	r2, [pc, #88]	; (8000884 <HAL_I2C_MspDeInit+0x68>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d110      	bne.n	8000850 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <HAL_I2C_MspDeInit+0x6c>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <HAL_I2C_MspDeInit+0x6c>)
 8000834:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000838:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 800083a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f000 fb89 	bl	8000f58 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000846:	2180      	movs	r1, #128	; 0x80
 8000848:	4810      	ldr	r0, [pc, #64]	; (800088c <HAL_I2C_MspDeInit+0x70>)
 800084a:	f000 fb85 	bl	8000f58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800084e:	e015      	b.n	800087c <HAL_I2C_MspDeInit+0x60>
  else if(hi2c->Instance==I2C3)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_I2C_MspDeInit+0x74>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d110      	bne.n	800087c <HAL_I2C_MspDeInit+0x60>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_I2C_MspDeInit+0x6c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_I2C_MspDeInit+0x6c>)
 8000860:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000864:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8000866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086a:	480a      	ldr	r0, [pc, #40]	; (8000894 <HAL_I2C_MspDeInit+0x78>)
 800086c:	f000 fb74 	bl	8000f58 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8000870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fb6e 	bl	8000f58 <HAL_GPIO_DeInit>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40005400 	.word	0x40005400
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400
 8000890:	40007800 	.word	0x40007800
 8000894:	48000800 	.word	0x48000800

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f884 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <SystemInit+0x20>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <SystemInit+0x20>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000948 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopForever+0x6>)
  ldr r1, =_edata
 8000916:	490e      	ldr	r1, [pc, #56]	; (8000950 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <LoopForever+0xe>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <LoopForever+0x12>)
  ldr r4, =_ebss
 800092c:	4c0b      	ldr	r4, [pc, #44]	; (800095c <LoopForever+0x16>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800093a:	f7ff ffd7 	bl	80008ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093e:	f002 fe1f 	bl	8003580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000942:	f7ff fce0 	bl	8000306 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000948:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000954:	08003618 	.word	0x08003618
  ldr r2, =_sbss
 8000958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800095c:	200000c4 	.word	0x200000c4

08000960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_2_IRQHandler>
	...

08000964 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_Init+0x28>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_Init+0x28>)
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f931 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f808 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000980:	f7ff fe76 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40022000 	.word	0x40022000

08000990 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x54>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x58>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f93b 	bl	8000c2a <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00e      	b.n	80009dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d80a      	bhi.n	80009da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f000 f911 	bl	8000bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <HAL_InitTick+0x5c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	200000c0 	.word	0x200000c0

08000a18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000c0 	.word	0x200000c0

08000a30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a38:	f7ff ffee 	bl	8000a18 <HAL_GetTick>
 8000a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a48:	d005      	beq.n	8000a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_Delay+0x44>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a56:	bf00      	nop
 8000a58:	f7ff ffde 	bl	8000a18 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d8f7      	bhi.n	8000a58 <HAL_Delay+0x28>
  {
  }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba8:	d301      	bcc.n	8000bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00f      	b.n	8000bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <SysTick_Config+0x40>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f7ff ff8e 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc8:	2207      	movs	r2, #7
 8000bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff47 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c04:	f7ff ff5c 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff ff8e 	bl	8000b30 <NVIC_EncodePriority>
 8000c14:	4602      	mov	r2, r0
 8000c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5d 	bl	8000adc <__NVIC_SetPriority>
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ffb0 	bl	8000b98 <SysTick_Config>
 8000c38:	4603      	mov	r3, r0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e160      	b.n	8000f16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	2101      	movs	r1, #1
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 8152 	beq.w	8000f10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d005      	beq.n	8000c84 <HAL_GPIO_Init+0x40>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d130      	bne.n	8000ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cba:	2201      	movs	r2, #1
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	091b      	lsrs	r3, r3, #4
 8000cd0:	f003 0201 	and.w	r2, r3, #1
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d017      	beq.n	8000d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d123      	bne.n	8000d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	08da      	lsrs	r2, r3, #3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3208      	adds	r2, #8
 8000d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	220f      	movs	r2, #15
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	691a      	ldr	r2, [r3, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	08da      	lsrs	r2, r3, #3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3208      	adds	r2, #8
 8000d70:	6939      	ldr	r1, [r7, #16]
 8000d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0203 	and.w	r2, r3, #3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 80ac 	beq.w	8000f10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db8:	4b5e      	ldr	r3, [pc, #376]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a5d      	ldr	r2, [pc, #372]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b5b      	ldr	r3, [pc, #364]	; (8000f34 <HAL_GPIO_Init+0x2f0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd0:	4a59      	ldr	r2, [pc, #356]	; (8000f38 <HAL_GPIO_Init+0x2f4>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dfa:	d025      	beq.n	8000e48 <HAL_GPIO_Init+0x204>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a4f      	ldr	r2, [pc, #316]	; (8000f3c <HAL_GPIO_Init+0x2f8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d01f      	beq.n	8000e44 <HAL_GPIO_Init+0x200>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a4e      	ldr	r2, [pc, #312]	; (8000f40 <HAL_GPIO_Init+0x2fc>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d019      	beq.n	8000e40 <HAL_GPIO_Init+0x1fc>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a4d      	ldr	r2, [pc, #308]	; (8000f44 <HAL_GPIO_Init+0x300>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d013      	beq.n	8000e3c <HAL_GPIO_Init+0x1f8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a4c      	ldr	r2, [pc, #304]	; (8000f48 <HAL_GPIO_Init+0x304>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d00d      	beq.n	8000e38 <HAL_GPIO_Init+0x1f4>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a4b      	ldr	r2, [pc, #300]	; (8000f4c <HAL_GPIO_Init+0x308>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d007      	beq.n	8000e34 <HAL_GPIO_Init+0x1f0>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a4a      	ldr	r2, [pc, #296]	; (8000f50 <HAL_GPIO_Init+0x30c>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d101      	bne.n	8000e30 <HAL_GPIO_Init+0x1ec>
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	e00c      	b.n	8000e4a <HAL_GPIO_Init+0x206>
 8000e30:	2307      	movs	r3, #7
 8000e32:	e00a      	b.n	8000e4a <HAL_GPIO_Init+0x206>
 8000e34:	2305      	movs	r3, #5
 8000e36:	e008      	b.n	8000e4a <HAL_GPIO_Init+0x206>
 8000e38:	2304      	movs	r3, #4
 8000e3a:	e006      	b.n	8000e4a <HAL_GPIO_Init+0x206>
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e004      	b.n	8000e4a <HAL_GPIO_Init+0x206>
 8000e40:	2302      	movs	r3, #2
 8000e42:	e002      	b.n	8000e4a <HAL_GPIO_Init+0x206>
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <HAL_GPIO_Init+0x206>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	f002 0203 	and.w	r2, r2, #3
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	4093      	lsls	r3, r2
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e5a:	4937      	ldr	r1, [pc, #220]	; (8000f38 <HAL_GPIO_Init+0x2f4>)
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e68:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e8c:	4a31      	ldr	r2, [pc, #196]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e92:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eb6:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebc:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3301      	adds	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f47f ae97 	bne.w	8000c54 <HAL_GPIO_Init+0x10>
  }
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	371c      	adds	r7, #28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	48000800 	.word	0x48000800
 8000f44:	48000c00 	.word	0x48000c00
 8000f48:	48001000 	.word	0x48001000
 8000f4c:	48001400 	.word	0x48001400
 8000f50:	48001800 	.word	0x48001800
 8000f54:	40010400 	.word	0x40010400

08000f58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000f66:	e0c4      	b.n	80010f2 <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80b7 	beq.w	80010ec <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000f7e:	4a64      	ldr	r2, [pc, #400]	; (8001110 <HAL_GPIO_DeInit+0x1b8>)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fa6:	d025      	beq.n	8000ff4 <HAL_GPIO_DeInit+0x9c>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a5a      	ldr	r2, [pc, #360]	; (8001114 <HAL_GPIO_DeInit+0x1bc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d01f      	beq.n	8000ff0 <HAL_GPIO_DeInit+0x98>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a59      	ldr	r2, [pc, #356]	; (8001118 <HAL_GPIO_DeInit+0x1c0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d019      	beq.n	8000fec <HAL_GPIO_DeInit+0x94>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a58      	ldr	r2, [pc, #352]	; (800111c <HAL_GPIO_DeInit+0x1c4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d013      	beq.n	8000fe8 <HAL_GPIO_DeInit+0x90>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a57      	ldr	r2, [pc, #348]	; (8001120 <HAL_GPIO_DeInit+0x1c8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d00d      	beq.n	8000fe4 <HAL_GPIO_DeInit+0x8c>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a56      	ldr	r2, [pc, #344]	; (8001124 <HAL_GPIO_DeInit+0x1cc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d007      	beq.n	8000fe0 <HAL_GPIO_DeInit+0x88>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a55      	ldr	r2, [pc, #340]	; (8001128 <HAL_GPIO_DeInit+0x1d0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d101      	bne.n	8000fdc <HAL_GPIO_DeInit+0x84>
 8000fd8:	2306      	movs	r3, #6
 8000fda:	e00c      	b.n	8000ff6 <HAL_GPIO_DeInit+0x9e>
 8000fdc:	2307      	movs	r3, #7
 8000fde:	e00a      	b.n	8000ff6 <HAL_GPIO_DeInit+0x9e>
 8000fe0:	2305      	movs	r3, #5
 8000fe2:	e008      	b.n	8000ff6 <HAL_GPIO_DeInit+0x9e>
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	e006      	b.n	8000ff6 <HAL_GPIO_DeInit+0x9e>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e004      	b.n	8000ff6 <HAL_GPIO_DeInit+0x9e>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_DeInit+0x9e>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <HAL_GPIO_DeInit+0x9e>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	f002 0203 	and.w	r2, r2, #3
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	4093      	lsls	r3, r2
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	429a      	cmp	r2, r3
 8001004:	d132      	bne.n	800106c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001006:	4b49      	ldr	r3, [pc, #292]	; (800112c <HAL_GPIO_DeInit+0x1d4>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	4947      	ldr	r1, [pc, #284]	; (800112c <HAL_GPIO_DeInit+0x1d4>)
 8001010:	4013      	ands	r3, r2
 8001012:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001014:	4b45      	ldr	r3, [pc, #276]	; (800112c <HAL_GPIO_DeInit+0x1d4>)
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	4943      	ldr	r1, [pc, #268]	; (800112c <HAL_GPIO_DeInit+0x1d4>)
 800101e:	4013      	ands	r3, r2
 8001020:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001022:	4b42      	ldr	r3, [pc, #264]	; (800112c <HAL_GPIO_DeInit+0x1d4>)
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	4940      	ldr	r1, [pc, #256]	; (800112c <HAL_GPIO_DeInit+0x1d4>)
 800102c:	4013      	ands	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001030:	4b3e      	ldr	r3, [pc, #248]	; (800112c <HAL_GPIO_DeInit+0x1d4>)
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	493c      	ldr	r1, [pc, #240]	; (800112c <HAL_GPIO_DeInit+0x1d4>)
 800103a:	4013      	ands	r3, r2
 800103c:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800104e:	4a30      	ldr	r2, [pc, #192]	; (8001110 <HAL_GPIO_DeInit+0x1b8>)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43da      	mvns	r2, r3
 800105e:	482c      	ldr	r0, [pc, #176]	; (8001110 <HAL_GPIO_DeInit+0x1b8>)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	400a      	ands	r2, r1
 8001066:	3302      	adds	r3, #2
 8001068:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2103      	movs	r1, #3
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	401a      	ands	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	08d2      	lsrs	r2, r2, #3
 80010a2:	4019      	ands	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2103      	movs	r1, #3
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	401a      	ands	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	2101      	movs	r1, #1
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	401a      	ands	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2103      	movs	r1, #3
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]
    }

    position++;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa22 f303 	lsr.w	r3, r2, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f47f af34 	bne.w	8000f68 <HAL_GPIO_DeInit+0x10>
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40010000 	.word	0x40010000
 8001114:	48000400 	.word	0x48000400
 8001118:	48000800 	.word	0x48000800
 800111c:	48000c00 	.word	0x48000c00
 8001120:	48001000 	.word	0x48001000
 8001124:	48001400 	.word	0x48001400
 8001128:	48001800 	.word	0x48001800
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800114c:	e002      	b.n	8001154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e081      	b.n	8001276 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d106      	bne.n	800118c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fa96 	bl	80006b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2224      	movs	r2, #36	; 0x24
 8001190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d107      	bne.n	80011da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	e006      	b.n	80011e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d104      	bne.n	80011fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800120c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800121c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69d9      	ldr	r1, [r3, #28]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1a      	ldr	r2, [r3, #32]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2220      	movs	r2, #32
 8001262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e021      	b.n	80012d4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2224      	movs	r2, #36	; 0x24
 8001294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0201 	bic.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fab7 	bl	800081c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	4608      	mov	r0, r1
 80012e6:	4611      	mov	r1, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	817b      	strh	r3, [r7, #10]
 80012ee:	460b      	mov	r3, r1
 80012f0:	813b      	strh	r3, [r7, #8]
 80012f2:	4613      	mov	r3, r2
 80012f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b20      	cmp	r3, #32
 8001300:	f040 80f9 	bne.w	80014f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <HAL_I2C_Mem_Write+0x34>
 800130a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800130c:	2b00      	cmp	r3, #0
 800130e:	d105      	bne.n	800131c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001316:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e0ed      	b.n	80014f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001322:	2b01      	cmp	r3, #1
 8001324:	d101      	bne.n	800132a <HAL_I2C_Mem_Write+0x4e>
 8001326:	2302      	movs	r3, #2
 8001328:	e0e6      	b.n	80014f8 <HAL_I2C_Mem_Write+0x21c>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001332:	f7ff fb71 	bl	8000a18 <HAL_GetTick>
 8001336:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2319      	movs	r3, #25
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f000 fac3 	bl	80018d0 <I2C_WaitOnFlagUntilTimeout>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0d1      	b.n	80014f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2221      	movs	r2, #33	; 0x21
 8001358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2240      	movs	r2, #64	; 0x40
 8001360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a3a      	ldr	r2, [r7, #32]
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001374:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800137c:	88f8      	ldrh	r0, [r7, #6]
 800137e:	893a      	ldrh	r2, [r7, #8]
 8001380:	8979      	ldrh	r1, [r7, #10]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4603      	mov	r3, r0
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 f9d3 	bl	8001738 <I2C_RequestMemoryWrite>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0a9      	b.n	80014f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	2bff      	cmp	r3, #255	; 0xff
 80013ac:	d90e      	bls.n	80013cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	22ff      	movs	r2, #255	; 0xff
 80013b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	8979      	ldrh	r1, [r7, #10]
 80013bc:	2300      	movs	r3, #0
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f000 fbb5 	bl	8001b34 <I2C_TransferConfig>
 80013ca:	e00f      	b.n	80013ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	8979      	ldrh	r1, [r7, #10]
 80013de:	2300      	movs	r3, #0
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 fba4 	bl	8001b34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 faad 	bl	8001950 <I2C_WaitOnTXISFlagUntilTimeout>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e07b      	b.n	80014f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141a:	b29b      	uxth	r3, r3
 800141c:	3b01      	subs	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001428:	3b01      	subs	r3, #1
 800142a:	b29a      	uxth	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001434:	b29b      	uxth	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d034      	beq.n	80014a4 <HAL_I2C_Mem_Write+0x1c8>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143e:	2b00      	cmp	r3, #0
 8001440:	d130      	bne.n	80014a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001448:	2200      	movs	r2, #0
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 fa3f 	bl	80018d0 <I2C_WaitOnFlagUntilTimeout>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e04d      	b.n	80014f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001460:	b29b      	uxth	r3, r3
 8001462:	2bff      	cmp	r3, #255	; 0xff
 8001464:	d90e      	bls.n	8001484 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	22ff      	movs	r2, #255	; 0xff
 800146a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001470:	b2da      	uxtb	r2, r3
 8001472:	8979      	ldrh	r1, [r7, #10]
 8001474:	2300      	movs	r3, #0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 fb59 	bl	8001b34 <I2C_TransferConfig>
 8001482:	e00f      	b.n	80014a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001488:	b29a      	uxth	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001492:	b2da      	uxtb	r2, r3
 8001494:	8979      	ldrh	r1, [r7, #10]
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 fb48 	bl	8001b34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d19e      	bne.n	80013ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 fa8c 	bl	80019d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e01a      	b.n	80014f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2220      	movs	r2, #32
 80014c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_I2C_Mem_Write+0x224>)
 80014d6:	400b      	ands	r3, r1
 80014d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2220      	movs	r2, #32
 80014de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80014f6:	2302      	movs	r3, #2
  }
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	fe00e800 	.word	0xfe00e800

08001504 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af02      	add	r7, sp, #8
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	4608      	mov	r0, r1
 800150e:	4611      	mov	r1, r2
 8001510:	461a      	mov	r2, r3
 8001512:	4603      	mov	r3, r0
 8001514:	817b      	strh	r3, [r7, #10]
 8001516:	460b      	mov	r3, r1
 8001518:	813b      	strh	r3, [r7, #8]
 800151a:	4613      	mov	r3, r2
 800151c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b20      	cmp	r3, #32
 8001528:	f040 80fd 	bne.w	8001726 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <HAL_I2C_Mem_Read+0x34>
 8001532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0f1      	b.n	8001728 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_I2C_Mem_Read+0x4e>
 800154e:	2302      	movs	r3, #2
 8001550:	e0ea      	b.n	8001728 <HAL_I2C_Mem_Read+0x224>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800155a:	f7ff fa5d 	bl	8000a18 <HAL_GetTick>
 800155e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2319      	movs	r3, #25
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f9af 	bl	80018d0 <I2C_WaitOnFlagUntilTimeout>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0d5      	b.n	8001728 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2222      	movs	r2, #34	; 0x22
 8001580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2240      	movs	r2, #64	; 0x40
 8001588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a3a      	ldr	r2, [r7, #32]
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800159c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015a4:	88f8      	ldrh	r0, [r7, #6]
 80015a6:	893a      	ldrh	r2, [r7, #8]
 80015a8:	8979      	ldrh	r1, [r7, #10]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	4603      	mov	r3, r0
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 f913 	bl	80017e0 <I2C_RequestMemoryRead>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0ad      	b.n	8001728 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2bff      	cmp	r3, #255	; 0xff
 80015d4:	d90e      	bls.n	80015f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	22ff      	movs	r2, #255	; 0xff
 80015da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	8979      	ldrh	r1, [r7, #10]
 80015e4:	4b52      	ldr	r3, [pc, #328]	; (8001730 <HAL_I2C_Mem_Read+0x22c>)
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 faa1 	bl	8001b34 <I2C_TransferConfig>
 80015f2:	e00f      	b.n	8001614 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001602:	b2da      	uxtb	r2, r3
 8001604:	8979      	ldrh	r1, [r7, #10]
 8001606:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <HAL_I2C_Mem_Read+0x22c>)
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 fa90 	bl	8001b34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	2200      	movs	r2, #0
 800161c:	2104      	movs	r1, #4
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f956 	bl	80018d0 <I2C_WaitOnFlagUntilTimeout>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e07c      	b.n	8001728 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	3b01      	subs	r3, #1
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001656:	b29b      	uxth	r3, r3
 8001658:	3b01      	subs	r3, #1
 800165a:	b29a      	uxth	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001664:	b29b      	uxth	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d034      	beq.n	80016d4 <HAL_I2C_Mem_Read+0x1d0>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166e:	2b00      	cmp	r3, #0
 8001670:	d130      	bne.n	80016d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001678:	2200      	movs	r2, #0
 800167a:	2180      	movs	r1, #128	; 0x80
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f927 	bl	80018d0 <I2C_WaitOnFlagUntilTimeout>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e04d      	b.n	8001728 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001690:	b29b      	uxth	r3, r3
 8001692:	2bff      	cmp	r3, #255	; 0xff
 8001694:	d90e      	bls.n	80016b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	22ff      	movs	r2, #255	; 0xff
 800169a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	8979      	ldrh	r1, [r7, #10]
 80016a4:	2300      	movs	r3, #0
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 fa41 	bl	8001b34 <I2C_TransferConfig>
 80016b2:	e00f      	b.n	80016d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	8979      	ldrh	r1, [r7, #10]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 fa30 	bl	8001b34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d19a      	bne.n	8001614 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f974 	bl	80019d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e01a      	b.n	8001728 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2220      	movs	r2, #32
 80016f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_I2C_Mem_Read+0x230>)
 8001706:	400b      	ands	r3, r1
 8001708:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2220      	movs	r2, #32
 800170e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001726:	2302      	movs	r3, #2
  }
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	80002400 	.word	0x80002400
 8001734:	fe00e800 	.word	0xfe00e800

08001738 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af02      	add	r7, sp, #8
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4603      	mov	r3, r0
 8001748:	817b      	strh	r3, [r7, #10]
 800174a:	460b      	mov	r3, r1
 800174c:	813b      	strh	r3, [r7, #8]
 800174e:	4613      	mov	r3, r2
 8001750:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	8979      	ldrh	r1, [r7, #10]
 8001758:	4b20      	ldr	r3, [pc, #128]	; (80017dc <I2C_RequestMemoryWrite+0xa4>)
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f9e7 	bl	8001b34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	69b9      	ldr	r1, [r7, #24]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f8f0 	bl	8001950 <I2C_WaitOnTXISFlagUntilTimeout>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e02c      	b.n	80017d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001780:	893b      	ldrh	r3, [r7, #8]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
 800178a:	e015      	b.n	80017b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800178c:	893b      	ldrh	r3, [r7, #8]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b29b      	uxth	r3, r3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	69b9      	ldr	r1, [r7, #24]
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f8d6 	bl	8001950 <I2C_WaitOnTXISFlagUntilTimeout>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e012      	b.n	80017d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017ae:	893b      	ldrh	r3, [r7, #8]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2200      	movs	r2, #0
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f884 	bl	80018d0 <I2C_WaitOnFlagUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	80002000 	.word	0x80002000

080017e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	817b      	strh	r3, [r7, #10]
 80017f2:	460b      	mov	r3, r1
 80017f4:	813b      	strh	r3, [r7, #8]
 80017f6:	4613      	mov	r3, r2
 80017f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	8979      	ldrh	r1, [r7, #10]
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <I2C_RequestMemoryRead+0xa4>)
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2300      	movs	r3, #0
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 f994 	bl	8001b34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	69b9      	ldr	r1, [r7, #24]
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f89d 	bl	8001950 <I2C_WaitOnTXISFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e02c      	b.n	800187a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d105      	bne.n	8001832 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001826:	893b      	ldrh	r3, [r7, #8]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
 8001830:	e015      	b.n	800185e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001832:	893b      	ldrh	r3, [r7, #8]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	b2da      	uxtb	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	69b9      	ldr	r1, [r7, #24]
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 f883 	bl	8001950 <I2C_WaitOnTXISFlagUntilTimeout>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e012      	b.n	800187a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001854:	893b      	ldrh	r3, [r7, #8]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2200      	movs	r2, #0
 8001866:	2140      	movs	r1, #64	; 0x40
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f831 	bl	80018d0 <I2C_WaitOnFlagUntilTimeout>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	80002000 	.word	0x80002000

08001888 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b02      	cmp	r3, #2
 800189c:	d103      	bne.n	80018a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2200      	movs	r2, #0
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d007      	beq.n	80018c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699a      	ldr	r2, [r3, #24]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	619a      	str	r2, [r3, #24]
  }
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	4613      	mov	r3, r2
 80018de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018e0:	e022      	b.n	8001928 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d01e      	beq.n	8001928 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ea:	f7ff f895 	bl	8000a18 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d302      	bcc.n	8001900 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d113      	bne.n	8001928 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001904:	f043 0220 	orr.w	r2, r3, #32
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e00f      	b.n	8001948 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4013      	ands	r3, r2
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	429a      	cmp	r2, r3
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	429a      	cmp	r2, r3
 8001944:	d0cd      	beq.n	80018e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800195c:	e02c      	b.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f870 	bl	8001a48 <I2C_IsAcknowledgeFailed>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e02a      	b.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001978:	d01e      	beq.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800197a:	f7ff f84d 	bl	8000a18 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	429a      	cmp	r2, r3
 8001988:	d302      	bcc.n	8001990 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d113      	bne.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	f043 0220 	orr.w	r2, r3, #32
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e007      	b.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d1cb      	bne.n	800195e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019dc:	e028      	b.n	8001a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f830 	bl	8001a48 <I2C_IsAcknowledgeFailed>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e026      	b.n	8001a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f2:	f7ff f811 	bl	8000a18 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d302      	bcc.n	8001a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d113      	bne.n	8001a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0c:	f043 0220 	orr.w	r2, r3, #32
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e007      	b.n	8001a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d1cf      	bne.n	80019de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b10      	cmp	r3, #16
 8001a60:	d161      	bne.n	8001b26 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a70:	d02b      	beq.n	8001aca <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a80:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a82:	e022      	b.n	8001aca <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8a:	d01e      	beq.n	8001aca <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8c:	f7fe ffc4 	bl	8000a18 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d302      	bcc.n	8001aa2 <I2C_IsAcknowledgeFailed+0x5a>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d113      	bne.n	8001aca <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f043 0220 	orr.w	r2, r3, #32
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e02e      	b.n	8001b28 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d1d5      	bne.n	8001a84 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2210      	movs	r2, #16
 8001ade:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff fecd 	bl	8001888 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <I2C_IsAcknowledgeFailed+0xe8>)
 8001afa:	400b      	ands	r3, r1
 8001afc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f043 0204 	orr.w	r2, r3, #4
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	fe00e800 	.word	0xfe00e800

08001b34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	817b      	strh	r3, [r7, #10]
 8001b42:	4613      	mov	r3, r2
 8001b44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	0d5b      	lsrs	r3, r3, #21
 8001b50:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b54:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <I2C_TransferConfig+0x58>)
 8001b56:	430b      	orrs	r3, r1
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	ea02 0103 	and.w	r1, r2, r3
 8001b5e:	897b      	ldrh	r3, [r7, #10]
 8001b60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b64:	7a7b      	ldrb	r3, [r7, #9]
 8001b66:	041b      	lsls	r3, r3, #16
 8001b68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	03ff63ff 	.word	0x03ff63ff

08001b90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d138      	bne.n	8001c18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e032      	b.n	8001c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2224      	movs	r2, #36	; 0x24
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001be2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2220      	movs	r2, #32
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e000      	b.n	8001c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c18:	2302      	movs	r3, #2
  }
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	d139      	bne.n	8001cb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e033      	b.n	8001cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2224      	movs	r2, #36	; 0x24
 8001c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0201 	bic.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e000      	b.n	8001cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cb0:	2302      	movs	r3, #2
  }
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f001 b83a 	b.w	8002d5a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 816f 	beq.w	8001fda <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cfc:	4bb5      	ldr	r3, [pc, #724]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d00c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d08:	4bb2      	ldr	r3, [pc, #712]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d15c      	bne.n	8001dce <HAL_RCC_OscConfig+0x10e>
 8001d14:	4baf      	ldr	r3, [pc, #700]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d20:	d155      	bne.n	8001dce <HAL_RCC_OscConfig+0x10e>
 8001d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	095b      	lsrs	r3, r3, #5
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d102      	bne.n	8001d54 <HAL_RCC_OscConfig+0x94>
 8001d4e:	4ba1      	ldr	r3, [pc, #644]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	e015      	b.n	8001d80 <HAL_RCC_OscConfig+0xc0>
 8001d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d58:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d70:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d7c:	4b95      	ldr	r3, [pc, #596]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d84:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001d88:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001d8c:	fa92 f2a2 	rbit	r2, r2
 8001d90:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001d94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d98:	fab2 f282 	clz	r2, r2
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f042 0220 	orr.w	r2, r2, #32
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f002 021f 	and.w	r2, r2, #31
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 8111 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x318>
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 8108 	bne.w	8001fd8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f000 bfc6 	b.w	8002d5a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x12e>
 8001de0:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a7b      	ldr	r2, [pc, #492]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e036      	b.n	8001e5c <HAL_RCC_OscConfig+0x19c>
 8001dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x158>
 8001dfe:	4b75      	ldr	r3, [pc, #468]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a74      	ldr	r2, [pc, #464]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	4b72      	ldr	r3, [pc, #456]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a71      	ldr	r2, [pc, #452]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e021      	b.n	8001e5c <HAL_RCC_OscConfig+0x19c>
 8001e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x184>
 8001e2a:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a69      	ldr	r2, [pc, #420]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a66      	ldr	r2, [pc, #408]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0x19c>
 8001e44:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a62      	ldr	r2, [pc, #392]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a5f      	ldr	r2, [pc, #380]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d059      	beq.n	8001f20 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7fe fdd4 	bl	8000a18 <HAL_GetTick>
 8001e70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e76:	f7fe fdcf 	bl	8000a18 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d902      	bls.n	8001e8c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	f000 bf67 	b.w	8002d5a <HAL_RCC_OscConfig+0x109a>
 8001e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e90:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001ea0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d102      	bne.n	8001ebe <HAL_RCC_OscConfig+0x1fe>
 8001eb8:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	e015      	b.n	8001eea <HAL_RCC_OscConfig+0x22a>
 8001ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001eda:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eee:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001ef2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001ef6:	fa92 f2a2 	rbit	r2, r2
 8001efa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001efe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f02:	fab2 f282 	clz	r2, r2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f042 0220 	orr.w	r2, r2, #32
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f002 021f 	and.w	r2, r2, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f202 	lsl.w	r2, r1, r2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0ab      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1b6>
 8001f1e:	e05c      	b.n	8001fda <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe fd7a 	bl	8000a18 <HAL_GetTick>
 8001f24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f2a:	f7fe fd75 	bl	8000a18 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d902      	bls.n	8001f40 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	f000 bf0d 	b.w	8002d5a <HAL_RCC_OscConfig+0x109a>
 8001f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f44:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001f54:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d102      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2b2>
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	e015      	b.n	8001f9e <HAL_RCC_OscConfig+0x2de>
 8001f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f76:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_RCC_OscConfig+0x314>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fa2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001fa6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001faa:	fa92 f2a2 	rbit	r2, r2
 8001fae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001fb2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fb6:	fab2 f282 	clz	r2, r2
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f042 0220 	orr.w	r2, r2, #32
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	f002 021f 	and.w	r2, r2, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ab      	bne.n	8001f2a <HAL_RCC_OscConfig+0x26a>
 8001fd2:	e002      	b.n	8001fda <HAL_RCC_OscConfig+0x31a>
 8001fd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 817f 	beq.w	80022ee <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ff0:	4ba7      	ldr	r3, [pc, #668]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ffc:	4ba4      	ldr	r3, [pc, #656]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d173      	bne.n	80020f0 <HAL_RCC_OscConfig+0x430>
 8002008:	4ba1      	ldr	r3, [pc, #644]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002014:	d16c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x430>
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002028:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d102      	bne.n	8002046 <HAL_RCC_OscConfig+0x386>
 8002040:	4b93      	ldr	r3, [pc, #588]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	e013      	b.n	800206e <HAL_RCC_OscConfig+0x3ae>
 8002046:	2302      	movs	r3, #2
 8002048:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002058:	2302      	movs	r3, #2
 800205a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800205e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800206a:	4b89      	ldr	r3, [pc, #548]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	2202      	movs	r2, #2
 8002070:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002074:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002078:	fa92 f2a2 	rbit	r2, r2
 800207c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002080:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	f042 0220 	orr.w	r2, r2, #32
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f002 021f 	and.w	r2, r2, #31
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCC_OscConfig+0x3f6>
 80020a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d002      	beq.n	80020b6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f000 be52 	b.w	8002d5a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	21f8      	movs	r1, #248	; 0xf8
 80020cc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80020d4:	fa91 f1a1 	rbit	r1, r1
 80020d8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80020dc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80020e0:	fab1 f181 	clz	r1, r1
 80020e4:	b2c9      	uxtb	r1, r1
 80020e6:	408b      	lsls	r3, r1
 80020e8:	4969      	ldr	r1, [pc, #420]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	e0fe      	b.n	80022ee <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8088 	beq.w	8002212 <HAL_RCC_OscConfig+0x552>
 8002102:	2301      	movs	r3, #1
 8002104:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002114:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002122:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	461a      	mov	r2, r3
 800212a:	2301      	movs	r3, #1
 800212c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe fc73 	bl	8000a18 <HAL_GetTick>
 8002132:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	e00a      	b.n	800214e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002138:	f7fe fc6e 	bl	8000a18 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d902      	bls.n	800214e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	f000 be06 	b.w	8002d5a <HAL_RCC_OscConfig+0x109a>
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002160:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d102      	bne.n	800217e <HAL_RCC_OscConfig+0x4be>
 8002178:	4b45      	ldr	r3, [pc, #276]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	e013      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e6>
 800217e:	2302      	movs	r3, #2
 8002180:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002190:	2302      	movs	r3, #2
 8002192:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002196:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	2202      	movs	r2, #2
 80021a8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80021ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80021b0:	fa92 f2a2 	rbit	r2, r2
 80021b4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80021b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021bc:	fab2 f282 	clz	r2, r2
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f042 0220 	orr.w	r2, r2, #32
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	f002 021f 	and.w	r2, r2, #31
 80021cc:	2101      	movs	r1, #1
 80021ce:	fa01 f202 	lsl.w	r2, r1, r2
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0af      	beq.n	8002138 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	21f8      	movs	r1, #248	; 0xf8
 80021ee:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80021f6:	fa91 f1a1 	rbit	r1, r1
 80021fa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80021fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002202:	fab1 f181 	clz	r1, r1
 8002206:	b2c9      	uxtb	r1, r1
 8002208:	408b      	lsls	r3, r1
 800220a:	4921      	ldr	r1, [pc, #132]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
 8002210:	e06d      	b.n	80022ee <HAL_RCC_OscConfig+0x62e>
 8002212:	2301      	movs	r3, #1
 8002214:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002224:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002232:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	461a      	mov	r2, r3
 800223a:	2300      	movs	r3, #0
 800223c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7fe fbeb 	bl	8000a18 <HAL_GetTick>
 8002242:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	e00a      	b.n	800225e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002248:	f7fe fbe6 	bl	8000a18 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d902      	bls.n	800225e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	f000 bd7e 	b.w	8002d5a <HAL_RCC_OscConfig+0x109a>
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002270:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x5d4>
 8002288:	4b01      	ldr	r3, [pc, #4]	; (8002290 <HAL_RCC_OscConfig+0x5d0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	e016      	b.n	80022bc <HAL_RCC_OscConfig+0x5fc>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022b8:	4bbf      	ldr	r3, [pc, #764]	; (80025b8 <HAL_RCC_OscConfig+0x8f8>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	2202      	movs	r2, #2
 80022be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80022c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80022c6:	fa92 f2a2 	rbit	r2, r2
 80022ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80022ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022d2:	fab2 f282 	clz	r2, r2
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f042 0220 	orr.w	r2, r2, #32
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f002 021f 	and.w	r2, r2, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f202 	lsl.w	r2, r1, r2
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1ac      	bne.n	8002248 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8113 	beq.w	800252a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002308:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d07c      	beq.n	800240e <HAL_RCC_OscConfig+0x74e>
 8002314:	2301      	movs	r3, #1
 8002316:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002326:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	4ba2      	ldr	r3, [pc, #648]	; (80025bc <HAL_RCC_OscConfig+0x8fc>)
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	461a      	mov	r2, r3
 800233a:	2301      	movs	r3, #1
 800233c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7fe fb6b 	bl	8000a18 <HAL_GetTick>
 8002342:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002346:	e00a      	b.n	800235e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002348:	f7fe fb66 	bl	8000a18 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d902      	bls.n	800235e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	f000 bcfe 	b.w	8002d5a <HAL_RCC_OscConfig+0x109a>
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002368:	fa93 f2a3 	rbit	r2, r3
 800236c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002370:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800237e:	2202      	movs	r2, #2
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	fa93 f2a3 	rbit	r2, r3
 8002390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023a2:	2202      	movs	r2, #2
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	4b7e      	ldr	r3, [pc, #504]	; (80025b8 <HAL_RCC_OscConfig+0x8f8>)
 80023c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023ca:	2102      	movs	r1, #2
 80023cc:	6019      	str	r1, [r3, #0]
 80023ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	fa93 f1a3 	rbit	r1, r3
 80023dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023e4:	6019      	str	r1, [r3, #0]
  return result;
 80023e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	2101      	movs	r1, #1
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d09d      	beq.n	8002348 <HAL_RCC_OscConfig+0x688>
 800240c:	e08d      	b.n	800252a <HAL_RCC_OscConfig+0x86a>
 800240e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002412:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	fa93 f2a3 	rbit	r2, r3
 8002428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002430:	601a      	str	r2, [r3, #0]
  return result;
 8002432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002436:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800243a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	4b5d      	ldr	r3, [pc, #372]	; (80025bc <HAL_RCC_OscConfig+0x8fc>)
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	461a      	mov	r2, r3
 800244c:	2300      	movs	r3, #0
 800244e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7fe fae2 	bl	8000a18 <HAL_GetTick>
 8002454:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245a:	f7fe fadd 	bl	8000a18 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d902      	bls.n	8002470 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	f000 bc75 	b.w	8002d5a <HAL_RCC_OscConfig+0x109a>
 8002470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002474:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002478:	2202      	movs	r2, #2
 800247a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002480:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800249c:	2202      	movs	r2, #2
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fa93 f2a3 	rbit	r2, r3
 80024ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024c0:	2202      	movs	r2, #2
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	fa93 f2a3 	rbit	r2, r3
 80024d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80024da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_RCC_OscConfig+0x8f8>)
 80024de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80024e8:	2102      	movs	r1, #2
 80024ea:	6019      	str	r1, [r3, #0]
 80024ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f1a3 	rbit	r1, r3
 80024fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024fe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002502:	6019      	str	r1, [r3, #0]
  return result;
 8002504:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002508:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d197      	bne.n	800245a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 81a5 	beq.w	800288a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_RCC_OscConfig+0x8f8>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_OscConfig+0x8f8>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <HAL_RCC_OscConfig+0x8f8>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	61d3      	str	r3, [r2, #28]
 800255e:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <HAL_RCC_OscConfig+0x8f8>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002574:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002578:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_RCC_OscConfig+0x900>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d121      	bne.n	80025d0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_RCC_OscConfig+0x900>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x900>)
 8002592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002596:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002598:	f7fe fa3e 	bl	8000a18 <HAL_GetTick>
 800259c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	e010      	b.n	80025c4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a2:	f7fe fa39 	bl	8000a18 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d908      	bls.n	80025c4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e3d1      	b.n	8002d5a <HAL_RCC_OscConfig+0x109a>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	10908120 	.word	0x10908120
 80025c0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	4b8d      	ldr	r3, [pc, #564]	; (80027fc <HAL_RCC_OscConfig+0xb3c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0e8      	beq.n	80025a2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d106      	bne.n	80025ee <HAL_RCC_OscConfig+0x92e>
 80025e0:	4b87      	ldr	r3, [pc, #540]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a86      	ldr	r2, [pc, #536]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6213      	str	r3, [r2, #32]
 80025ec:	e035      	b.n	800265a <HAL_RCC_OscConfig+0x99a>
 80025ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x958>
 80025fe:	4b80      	ldr	r3, [pc, #512]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a7f      	ldr	r2, [pc, #508]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	4b7d      	ldr	r3, [pc, #500]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4a7c      	ldr	r2, [pc, #496]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	6213      	str	r3, [r2, #32]
 8002616:	e020      	b.n	800265a <HAL_RCC_OscConfig+0x99a>
 8002618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800261c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b05      	cmp	r3, #5
 8002626:	d10c      	bne.n	8002642 <HAL_RCC_OscConfig+0x982>
 8002628:	4b75      	ldr	r3, [pc, #468]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	4a74      	ldr	r2, [pc, #464]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 800262e:	f043 0304 	orr.w	r3, r3, #4
 8002632:	6213      	str	r3, [r2, #32]
 8002634:	4b72      	ldr	r3, [pc, #456]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4a71      	ldr	r2, [pc, #452]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6213      	str	r3, [r2, #32]
 8002640:	e00b      	b.n	800265a <HAL_RCC_OscConfig+0x99a>
 8002642:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6213      	str	r3, [r2, #32]
 800264e:	4b6c      	ldr	r3, [pc, #432]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a6b      	ldr	r2, [pc, #428]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 8002654:	f023 0304 	bic.w	r3, r3, #4
 8002658:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800265a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8081 	beq.w	800276e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266c:	f7fe f9d4 	bl	8000a18 <HAL_GetTick>
 8002670:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	e00b      	b.n	800268e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fe f9cf 	bl	8000a18 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e365      	b.n	8002d5a <HAL_RCC_OscConfig+0x109a>
 800268e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002692:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002696:	2202      	movs	r2, #2
 8002698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	fa93 f2a3 	rbit	r2, r3
 80026a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026ba:	2202      	movs	r2, #2
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80026d4:	601a      	str	r2, [r3, #0]
  return result;
 80026d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026da:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80026de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d102      	bne.n	80026fa <HAL_RCC_OscConfig+0xa3a>
 80026f4:	4b42      	ldr	r3, [pc, #264]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	e013      	b.n	8002722 <HAL_RCC_OscConfig+0xa62>
 80026fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002702:	2202      	movs	r2, #2
 8002704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800270a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	fa93 f2a3 	rbit	r2, r3
 8002714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002718:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002726:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800272a:	2102      	movs	r1, #2
 800272c:	6011      	str	r1, [r2, #0]
 800272e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002732:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	fa92 f1a2 	rbit	r1, r2
 800273c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002740:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002744:	6011      	str	r1, [r2, #0]
  return result;
 8002746:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800274a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	fab2 f282 	clz	r2, r2
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f002 021f 	and.w	r2, r2, #31
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f202 	lsl.w	r2, r1, r2
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d084      	beq.n	8002676 <HAL_RCC_OscConfig+0x9b6>
 800276c:	e083      	b.n	8002876 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276e:	f7fe f953 	bl	8000a18 <HAL_GetTick>
 8002772:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7fe f94e 	bl	8000a18 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e2e4      	b.n	8002d5a <HAL_RCC_OscConfig+0x109a>
 8002790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002794:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002798:	2202      	movs	r2, #2
 800279a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fa93 f2a3 	rbit	r2, r3
 80027aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027bc:	2202      	movs	r2, #2
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	fa93 f2a3 	rbit	r2, r3
 80027ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80027d6:	601a      	str	r2, [r3, #0]
  return result;
 80027d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027dc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80027e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d106      	bne.n	8002804 <HAL_RCC_OscConfig+0xb44>
 80027f6:	4b02      	ldr	r3, [pc, #8]	; (8002800 <HAL_RCC_OscConfig+0xb40>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	e017      	b.n	800282c <HAL_RCC_OscConfig+0xb6c>
 80027fc:	40007000 	.word	0x40007000
 8002800:	40021000 	.word	0x40021000
 8002804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002808:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800280c:	2202      	movs	r2, #2
 800280e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002814:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002822:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	4bb3      	ldr	r3, [pc, #716]	; (8002af8 <HAL_RCC_OscConfig+0xe38>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002830:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002834:	2102      	movs	r1, #2
 8002836:	6011      	str	r1, [r2, #0]
 8002838:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800283c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	fa92 f1a2 	rbit	r1, r2
 8002846:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800284a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800284e:	6011      	str	r1, [r2, #0]
  return result;
 8002850:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002854:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	fab2 f282 	clz	r2, r2
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	f002 021f 	and.w	r2, r2, #31
 800286a:	2101      	movs	r1, #1
 800286c:	fa01 f202 	lsl.w	r2, r1, r2
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d180      	bne.n	8002778 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002876:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	4b9e      	ldr	r3, [pc, #632]	; (8002af8 <HAL_RCC_OscConfig+0xe38>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a9d      	ldr	r2, [pc, #628]	; (8002af8 <HAL_RCC_OscConfig+0xe38>)
 8002884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 825e 	beq.w	8002d58 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289c:	4b96      	ldr	r3, [pc, #600]	; (8002af8 <HAL_RCC_OscConfig+0xe38>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	f000 821f 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	f040 8170 	bne.w	8002b9c <HAL_RCC_OscConfig+0xedc>
 80028bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028e0:	601a      	str	r2, [r3, #0]
  return result;
 80028e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028ea:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	461a      	mov	r2, r3
 80028fe:	2300      	movs	r3, #0
 8002900:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe f889 	bl	8000a18 <HAL_GetTick>
 8002906:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290a:	e009      	b.n	8002920 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe f884 	bl	8000a18 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e21c      	b.n	8002d5a <HAL_RCC_OscConfig+0x109a>
 8002920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002924:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002932:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	fa93 f2a3 	rbit	r2, r3
 800293c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002940:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002944:	601a      	str	r2, [r3, #0]
  return result;
 8002946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800294e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d102      	bne.n	800296a <HAL_RCC_OscConfig+0xcaa>
 8002964:	4b64      	ldr	r3, [pc, #400]	; (8002af8 <HAL_RCC_OscConfig+0xe38>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	e027      	b.n	80029ba <HAL_RCC_OscConfig+0xcfa>
 800296a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800297c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	fa93 f2a3 	rbit	r2, r3
 8002986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800298a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002994:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002998:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f2a3 	rbit	r2, r3
 80029ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <HAL_RCC_OscConfig+0xe38>)
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029be:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029c6:	6011      	str	r1, [r2, #0]
 80029c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029cc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	fa92 f1a2 	rbit	r1, r2
 80029d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029da:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80029de:	6011      	str	r1, [r2, #0]
  return result;
 80029e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029e4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	fab2 f282 	clz	r2, r2
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f042 0220 	orr.w	r2, r2, #32
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f002 021f 	and.w	r2, r2, #31
 80029fa:	2101      	movs	r1, #1
 80029fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d182      	bne.n	800290c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a06:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <HAL_RCC_OscConfig+0xe38>)
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	f023 020f 	bic.w	r2, r3, #15
 8002a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	4937      	ldr	r1, [pc, #220]	; (8002af8 <HAL_RCC_OscConfig+0xe38>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002a20:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <HAL_RCC_OscConfig+0xe38>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a19      	ldr	r1, [r3, #32]
 8002a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	492d      	ldr	r1, [pc, #180]	; (8002af8 <HAL_RCC_OscConfig+0xe38>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
 8002a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a4c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fa93 f2a3 	rbit	r2, r3
 8002a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a68:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a6c:	601a      	str	r2, [r3, #0]
  return result;
 8002a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a76:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7fd ffc3 	bl	8000a18 <HAL_GetTick>
 8002a92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a96:	e009      	b.n	8002aac <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a98:	f7fd ffbe 	bl	8000a18 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e156      	b.n	8002d5a <HAL_RCC_OscConfig+0x109a>
 8002aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002abe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f2a3 	rbit	r2, r3
 8002ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002acc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ad0:	601a      	str	r2, [r3, #0]
  return result;
 8002ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ada:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_OscConfig+0xe3c>
 8002af0:	4b01      	ldr	r3, [pc, #4]	; (8002af8 <HAL_RCC_OscConfig+0xe38>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	e02a      	b.n	8002b4c <HAL_RCC_OscConfig+0xe8c>
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b34:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b42:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	4b86      	ldr	r3, [pc, #536]	; (8002d64 <HAL_RCC_OscConfig+0x10a4>)
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b50:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b58:	6011      	str	r1, [r2, #0]
 8002b5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b5e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	fa92 f1a2 	rbit	r1, r2
 8002b68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b6c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002b70:	6011      	str	r1, [r2, #0]
  return result;
 8002b72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b76:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	fab2 f282 	clz	r2, r2
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f042 0220 	orr.w	r2, r2, #32
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f002 021f 	and.w	r2, r2, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f43f af7f 	beq.w	8002a98 <HAL_RCC_OscConfig+0xdd8>
 8002b9a:	e0dd      	b.n	8002d58 <HAL_RCC_OscConfig+0x1098>
 8002b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ba4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fa93 f2a3 	rbit	r2, r3
 8002bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bbc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002bc0:	601a      	str	r2, [r3, #0]
  return result;
 8002bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002bca:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2300      	movs	r3, #0
 8002be0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fd ff19 	bl	8000a18 <HAL_GetTick>
 8002be6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bea:	e009      	b.n	8002c00 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fd ff14 	bl	8000a18 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0ac      	b.n	8002d5a <HAL_RCC_OscConfig+0x109a>
 8002c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c04:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	fa93 f2a3 	rbit	r2, r3
 8002c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c20:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c24:	601a      	str	r2, [r3, #0]
  return result;
 8002c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d102      	bne.n	8002c4a <HAL_RCC_OscConfig+0xf8a>
 8002c44:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCC_OscConfig+0x10a4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	e027      	b.n	8002c9a <HAL_RCC_OscConfig+0xfda>
 8002c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c4e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c5c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fa93 f2a3 	rbit	r2, r3
 8002c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c74:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c90:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <HAL_RCC_OscConfig+0x10a4>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c9e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ca2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ca6:	6011      	str	r1, [r2, #0]
 8002ca8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	fa92 f1a2 	rbit	r1, r2
 8002cb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cba:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002cbe:	6011      	str	r1, [r2, #0]
  return result;
 8002cc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cc4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	fab2 f282 	clz	r2, r2
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	f042 0220 	orr.w	r2, r2, #32
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f002 021f 	and.w	r2, r2, #31
 8002cda:	2101      	movs	r1, #1
 8002cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d182      	bne.n	8002bec <HAL_RCC_OscConfig+0xf2c>
 8002ce6:	e037      	b.n	8002d58 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e02e      	b.n	8002d5a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_RCC_OscConfig+0x10a4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002d04:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <HAL_RCC_OscConfig+0x10a4>)
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d10:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d117      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d28:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d10b      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d40:	f003 020f 	and.w	r2, r3, #15
 8002d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000

08002d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b09e      	sub	sp, #120	; 0x78
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e162      	b.n	8003046 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d80:	4b90      	ldr	r3, [pc, #576]	; (8002fc4 <HAL_RCC_ClockConfig+0x25c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d910      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b8d      	ldr	r3, [pc, #564]	; (8002fc4 <HAL_RCC_ClockConfig+0x25c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 0207 	bic.w	r2, r3, #7
 8002d96:	498b      	ldr	r1, [pc, #556]	; (8002fc4 <HAL_RCC_ClockConfig+0x25c>)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9e:	4b89      	ldr	r3, [pc, #548]	; (8002fc4 <HAL_RCC_ClockConfig+0x25c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e14a      	b.n	8003046 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <HAL_RCC_ClockConfig+0x260>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	497f      	ldr	r1, [pc, #508]	; (8002fc8 <HAL_RCC_ClockConfig+0x260>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80dc 	beq.w	8002f94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d13c      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xf6>
 8002de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df4:	fab3 f383 	clz	r3, r3
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d102      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xa6>
 8002e08:	4b6f      	ldr	r3, [pc, #444]	; (8002fc8 <HAL_RCC_ClockConfig+0x260>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	e00f      	b.n	8002e2e <HAL_RCC_ClockConfig+0xc6>
 8002e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e20:	663b      	str	r3, [r7, #96]	; 0x60
 8002e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e2a:	4b67      	ldr	r3, [pc, #412]	; (8002fc8 <HAL_RCC_ClockConfig+0x260>)
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e32:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e36:	fa92 f2a2 	rbit	r2, r2
 8002e3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e3e:	fab2 f282 	clz	r2, r2
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f042 0220 	orr.w	r2, r2, #32
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f002 021f 	and.w	r2, r2, #31
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f202 	lsl.w	r2, r1, r2
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d17b      	bne.n	8002f52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0f3      	b.n	8003046 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d13c      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x178>
 8002e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d102      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x128>
 8002e8a:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <HAL_RCC_ClockConfig+0x260>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	e00f      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
 8002e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eac:	4b46      	ldr	r3, [pc, #280]	; (8002fc8 <HAL_RCC_ClockConfig+0x260>)
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb8:	fa92 f2a2 	rbit	r2, r2
 8002ebc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec0:	fab2 f282 	clz	r2, r2
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	f042 0220 	orr.w	r2, r2, #32
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	f002 021f 	and.w	r2, r2, #31
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d13a      	bne.n	8002f52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0b2      	b.n	8003046 <HAL_RCC_ClockConfig+0x2de>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d102      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x1a0>
 8002f02:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_RCC_ClockConfig+0x260>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	e00d      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1bc>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
 8002f14:	2302      	movs	r3, #2
 8002f16:	623b      	str	r3, [r7, #32]
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <HAL_RCC_ClockConfig+0x260>)
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	2202      	movs	r2, #2
 8002f26:	61ba      	str	r2, [r7, #24]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	fa92 f2a2 	rbit	r2, r2
 8002f2e:	617a      	str	r2, [r7, #20]
  return result;
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	fab2 f282 	clz	r2, r2
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f042 0220 	orr.w	r2, r2, #32
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	f002 021f 	and.w	r2, r2, #31
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f202 	lsl.w	r2, r1, r2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e079      	b.n	8003046 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_RCC_ClockConfig+0x260>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f023 0203 	bic.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	491a      	ldr	r1, [pc, #104]	; (8002fc8 <HAL_RCC_ClockConfig+0x260>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f64:	f7fd fd58 	bl	8000a18 <HAL_GetTick>
 8002f68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6c:	f7fd fd54 	bl	8000a18 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e061      	b.n	8003046 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <HAL_RCC_ClockConfig+0x260>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 020c 	and.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d1eb      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_RCC_ClockConfig+0x25c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d214      	bcs.n	8002fcc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_RCC_ClockConfig+0x25c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 0207 	bic.w	r2, r3, #7
 8002faa:	4906      	ldr	r1, [pc, #24]	; (8002fc4 <HAL_RCC_ClockConfig+0x25c>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <HAL_RCC_ClockConfig+0x25c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e040      	b.n	8003046 <HAL_RCC_ClockConfig+0x2de>
 8002fc4:	40022000 	.word	0x40022000
 8002fc8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_RCC_ClockConfig+0x2e8>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	491a      	ldr	r1, [pc, #104]	; (8003050 <HAL_RCC_ClockConfig+0x2e8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HAL_RCC_ClockConfig+0x2e8>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4912      	ldr	r1, [pc, #72]	; (8003050 <HAL_RCC_ClockConfig+0x2e8>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800300a:	f000 f829 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 800300e:	4601      	mov	r1, r0
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_RCC_ClockConfig+0x2e8>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003018:	22f0      	movs	r2, #240	; 0xf0
 800301a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	fa92 f2a2 	rbit	r2, r2
 8003022:	60fa      	str	r2, [r7, #12]
  return result;
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	fab2 f282 	clz	r2, r2
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	40d3      	lsrs	r3, r2
 800302e:	4a09      	ldr	r2, [pc, #36]	; (8003054 <HAL_RCC_ClockConfig+0x2ec>)
 8003030:	5cd3      	ldrb	r3, [r2, r3]
 8003032:	fa21 f303 	lsr.w	r3, r1, r3
 8003036:	4a08      	ldr	r2, [pc, #32]	; (8003058 <HAL_RCC_ClockConfig+0x2f0>)
 8003038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <HAL_RCC_ClockConfig+0x2f4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fca6 	bl	8000990 <HAL_InitTick>
  
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3778      	adds	r7, #120	; 0x78
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	080035e0 	.word	0x080035e0
 8003058:	20000000 	.word	0x20000000
 800305c:	20000004 	.word	0x20000004

08003060 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	b480      	push	{r7}
 8003062:	b08b      	sub	sp, #44	; 0x2c
 8003064:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800307a:	4b2a      	ldr	r3, [pc, #168]	; (8003124 <HAL_RCC_GetSysClockFreq+0xc4>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b04      	cmp	r3, #4
 8003088:	d002      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x30>
 800308a:	2b08      	cmp	r3, #8
 800308c:	d003      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0x36>
 800308e:	e03f      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003090:	4b25      	ldr	r3, [pc, #148]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003092:	623b      	str	r3, [r7, #32]
      break;
 8003094:	e03f      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800309c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	fa92 f2a2 	rbit	r2, r2
 80030a8:	607a      	str	r2, [r7, #4]
  return result;
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	fab2 f282 	clz	r2, r2
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	40d3      	lsrs	r3, r2
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_RCC_GetSysClockFreq+0xcc>)
 80030b6:	5cd3      	ldrb	r3, [r2, r3]
 80030b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80030ba:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	220f      	movs	r2, #15
 80030c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	fa92 f2a2 	rbit	r2, r2
 80030cc:	60fa      	str	r2, [r7, #12]
  return result;
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	fab2 f282 	clz	r2, r2
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	40d3      	lsrs	r3, r2
 80030d8:	4a15      	ldr	r2, [pc, #84]	; (8003130 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030e8:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	e007      	b.n	800310a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030fa:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	fb02 f303 	mul.w	r3, r2, r3
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	623b      	str	r3, [r7, #32]
      break;
 800310e:	e002      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003112:	623b      	str	r3, [r7, #32]
      break;
 8003114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003116:	6a3b      	ldr	r3, [r7, #32]
}
 8003118:	4618      	mov	r0, r3
 800311a:	372c      	adds	r7, #44	; 0x2c
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	40021000 	.word	0x40021000
 8003128:	007a1200 	.word	0x007a1200
 800312c:	080035f0 	.word	0x080035f0
 8003130:	08003600 	.word	0x08003600

08003134 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b092      	sub	sp, #72	; 0x48
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80d4 	beq.w	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003158:	4b4e      	ldr	r3, [pc, #312]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10e      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003164:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	4a4a      	ldr	r2, [pc, #296]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316e:	61d3      	str	r3, [r2, #28]
 8003170:	4b48      	ldr	r3, [pc, #288]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003182:	4b45      	ldr	r3, [pc, #276]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d118      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800318e:	4b42      	ldr	r3, [pc, #264]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a41      	ldr	r2, [pc, #260]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003198:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319a:	f7fd fc3d 	bl	8000a18 <HAL_GetTick>
 800319e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	e008      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a2:	f7fd fc39 	bl	8000a18 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b64      	cmp	r3, #100	; 0x64
 80031ae:	d901      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e1d6      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	4b38      	ldr	r3, [pc, #224]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031c0:	4b34      	ldr	r3, [pc, #208]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8084 	beq.w	80032da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031dc:	429a      	cmp	r2, r3
 80031de:	d07c      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031e0:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	461a      	mov	r2, r3
 800320a:	2301      	movs	r3, #1
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	461a      	mov	r2, r3
 800322e:	2300      	movs	r3, #0
 8003230:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003236:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d04b      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fd fbe9 	bl	8000a18 <HAL_GetTick>
 8003246:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	e00a      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fd fbe5 	bl	8000a18 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e180      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003260:	2302      	movs	r3, #2
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	2302      	movs	r3, #2
 800326e:	623b      	str	r3, [r7, #32]
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	61fb      	str	r3, [r7, #28]
  return result;
 8003278:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d108      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800328e:	4b01      	ldr	r3, [pc, #4]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	e00d      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	10908100 	.word	0x10908100
 80032a0:	2302      	movs	r3, #2
 80032a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	4b9a      	ldr	r3, [pc, #616]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2202      	movs	r2, #2
 80032b2:	613a      	str	r2, [r7, #16]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	fa92 f2a2 	rbit	r2, r2
 80032ba:	60fa      	str	r2, [r7, #12]
  return result;
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	fab2 f282 	clz	r2, r2
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	f002 021f 	and.w	r2, r2, #31
 80032ce:	2101      	movs	r1, #1
 80032d0:	fa01 f202 	lsl.w	r2, r1, r2
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0b7      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032da:	4b8f      	ldr	r3, [pc, #572]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	498c      	ldr	r1, [pc, #560]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f4:	4b88      	ldr	r3, [pc, #544]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	4a87      	ldr	r2, [pc, #540]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800330c:	4b82      	ldr	r3, [pc, #520]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	f023 0203 	bic.w	r2, r3, #3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	497f      	ldr	r1, [pc, #508]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800332a:	4b7b      	ldr	r3, [pc, #492]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	4978      	ldr	r1, [pc, #480]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003338:	4313      	orrs	r3, r2
 800333a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003348:	4b73      	ldr	r3, [pc, #460]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	4970      	ldr	r1, [pc, #448]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003366:	4b6c      	ldr	r3, [pc, #432]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f023 0210 	bic.w	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4969      	ldr	r1, [pc, #420]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003374:	4313      	orrs	r3, r2
 8003376:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003384:	4b64      	ldr	r3, [pc, #400]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003390:	4961      	ldr	r1, [pc, #388]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003392:	4313      	orrs	r3, r2
 8003394:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033a2:	4b5d      	ldr	r3, [pc, #372]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f023 0220 	bic.w	r2, r3, #32
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	495a      	ldr	r1, [pc, #360]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c0:	4b55      	ldr	r3, [pc, #340]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	4952      	ldr	r1, [pc, #328]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033de:	4b4e      	ldr	r3, [pc, #312]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	494b      	ldr	r1, [pc, #300]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033fc:	4b46      	ldr	r3, [pc, #280]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	4943      	ldr	r1, [pc, #268]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	493c      	ldr	r1, [pc, #240]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003438:	4b37      	ldr	r3, [pc, #220]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	4934      	ldr	r1, [pc, #208]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003456:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	492d      	ldr	r1, [pc, #180]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	4925      	ldr	r1, [pc, #148]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003482:	4313      	orrs	r3, r2
 8003484:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003492:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	491e      	ldr	r1, [pc, #120]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	4916      	ldr	r1, [pc, #88]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	490f      	ldr	r1, [pc, #60]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	4907      	ldr	r1, [pc, #28]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00c      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800350a:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	e002      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351e:	4913      	ldr	r1, [pc, #76]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003520:	4313      	orrs	r3, r2
 8003522:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353c:	490b      	ldr	r1, [pc, #44]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800353e:	4313      	orrs	r3, r2
 8003540:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	4904      	ldr	r1, [pc, #16]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800355c:	4313      	orrs	r3, r2
 800355e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3748      	adds	r7, #72	; 0x48
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000

08003570 <memset>:
 8003570:	4402      	add	r2, r0
 8003572:	4603      	mov	r3, r0
 8003574:	4293      	cmp	r3, r2
 8003576:	d100      	bne.n	800357a <memset+0xa>
 8003578:	4770      	bx	lr
 800357a:	f803 1b01 	strb.w	r1, [r3], #1
 800357e:	e7f9      	b.n	8003574 <memset+0x4>

08003580 <__libc_init_array>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	4d0d      	ldr	r5, [pc, #52]	; (80035b8 <__libc_init_array+0x38>)
 8003584:	4c0d      	ldr	r4, [pc, #52]	; (80035bc <__libc_init_array+0x3c>)
 8003586:	1b64      	subs	r4, r4, r5
 8003588:	10a4      	asrs	r4, r4, #2
 800358a:	2600      	movs	r6, #0
 800358c:	42a6      	cmp	r6, r4
 800358e:	d109      	bne.n	80035a4 <__libc_init_array+0x24>
 8003590:	4d0b      	ldr	r5, [pc, #44]	; (80035c0 <__libc_init_array+0x40>)
 8003592:	4c0c      	ldr	r4, [pc, #48]	; (80035c4 <__libc_init_array+0x44>)
 8003594:	f000 f818 	bl	80035c8 <_init>
 8003598:	1b64      	subs	r4, r4, r5
 800359a:	10a4      	asrs	r4, r4, #2
 800359c:	2600      	movs	r6, #0
 800359e:	42a6      	cmp	r6, r4
 80035a0:	d105      	bne.n	80035ae <__libc_init_array+0x2e>
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a8:	4798      	blx	r3
 80035aa:	3601      	adds	r6, #1
 80035ac:	e7ee      	b.n	800358c <__libc_init_array+0xc>
 80035ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b2:	4798      	blx	r3
 80035b4:	3601      	adds	r6, #1
 80035b6:	e7f2      	b.n	800359e <__libc_init_array+0x1e>
 80035b8:	08003610 	.word	0x08003610
 80035bc:	08003610 	.word	0x08003610
 80035c0:	08003610 	.word	0x08003610
 80035c4:	08003614 	.word	0x08003614

080035c8 <_init>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	bf00      	nop
 80035cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ce:	bc08      	pop	{r3}
 80035d0:	469e      	mov	lr, r3
 80035d2:	4770      	bx	lr

080035d4 <_fini>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	bf00      	nop
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr
