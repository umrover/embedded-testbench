
G0_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f630  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800f6f0  0800f6f0  0001f6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fedc  0800fedc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fedc  0800fedc  0001fedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fee4  0800fee4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fee4  0800fee4  0001fee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fee8  0800fee8  0001fee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800feec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cec  200001e0  080100cc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ecc  080100cc  00021ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028bbe  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052ec  00000000  00000000  00048dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fa0  00000000  00000000  0004e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d68  00000000  00000000  00050058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f2f  00000000  00000000  00051dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e1b  00000000  00000000  00074cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d56f7  00000000  00000000  0009cb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008718  00000000  00000000  00172254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f6d8 	.word	0x0800f6d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800f6d8 	.word	0x0800f6d8

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fefd 	bl	8002250 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fe4d 	bl	8002100 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 feef 	bl	8002250 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fee5 	bl	8002250 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe75 	bl	8002184 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fe6b 	bl	8002184 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fc41 	bl	8000d4c <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fbcd 	bl	8000c74 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc33 	bl	8000d4c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc29 	bl	8000d4c <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fbd9 	bl	8000cc0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fbcf 	bl	8000cc0 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_uldivmod>:
 8000530:	2b00      	cmp	r3, #0
 8000532:	d111      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d10f      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000538:	2900      	cmp	r1, #0
 800053a:	d100      	bne.n	800053e <__aeabi_uldivmod+0xe>
 800053c:	2800      	cmp	r0, #0
 800053e:	d002      	beq.n	8000546 <__aeabi_uldivmod+0x16>
 8000540:	2100      	movs	r1, #0
 8000542:	43c9      	mvns	r1, r1
 8000544:	0008      	movs	r0, r1
 8000546:	b407      	push	{r0, r1, r2}
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <__aeabi_uldivmod+0x24>)
 800054a:	a102      	add	r1, pc, #8	; (adr r1, 8000554 <__aeabi_uldivmod+0x24>)
 800054c:	1840      	adds	r0, r0, r1
 800054e:	9002      	str	r0, [sp, #8]
 8000550:	bd03      	pop	{r0, r1, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	fffffee9 	.word	0xfffffee9
 8000558:	b403      	push	{r0, r1}
 800055a:	4668      	mov	r0, sp
 800055c:	b501      	push	{r0, lr}
 800055e:	9802      	ldr	r0, [sp, #8]
 8000560:	f000 f806 	bl	8000570 <__udivmoddi4>
 8000564:	9b01      	ldr	r3, [sp, #4]
 8000566:	469e      	mov	lr, r3
 8000568:	b002      	add	sp, #8
 800056a:	bc0c      	pop	{r2, r3}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			; (mov r8, r8)

08000570 <__udivmoddi4>:
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	4657      	mov	r7, sl
 8000574:	464e      	mov	r6, r9
 8000576:	4645      	mov	r5, r8
 8000578:	46de      	mov	lr, fp
 800057a:	b5e0      	push	{r5, r6, r7, lr}
 800057c:	0004      	movs	r4, r0
 800057e:	000d      	movs	r5, r1
 8000580:	4692      	mov	sl, r2
 8000582:	4699      	mov	r9, r3
 8000584:	b083      	sub	sp, #12
 8000586:	428b      	cmp	r3, r1
 8000588:	d830      	bhi.n	80005ec <__udivmoddi4+0x7c>
 800058a:	d02d      	beq.n	80005e8 <__udivmoddi4+0x78>
 800058c:	4649      	mov	r1, r9
 800058e:	4650      	mov	r0, sl
 8000590:	f002 fe58 	bl	8003244 <__clzdi2>
 8000594:	0029      	movs	r1, r5
 8000596:	0006      	movs	r6, r0
 8000598:	0020      	movs	r0, r4
 800059a:	f002 fe53 	bl	8003244 <__clzdi2>
 800059e:	1a33      	subs	r3, r6, r0
 80005a0:	4698      	mov	r8, r3
 80005a2:	3b20      	subs	r3, #32
 80005a4:	469b      	mov	fp, r3
 80005a6:	d433      	bmi.n	8000610 <__udivmoddi4+0xa0>
 80005a8:	465a      	mov	r2, fp
 80005aa:	4653      	mov	r3, sl
 80005ac:	4093      	lsls	r3, r2
 80005ae:	4642      	mov	r2, r8
 80005b0:	001f      	movs	r7, r3
 80005b2:	4653      	mov	r3, sl
 80005b4:	4093      	lsls	r3, r2
 80005b6:	001e      	movs	r6, r3
 80005b8:	42af      	cmp	r7, r5
 80005ba:	d83a      	bhi.n	8000632 <__udivmoddi4+0xc2>
 80005bc:	42af      	cmp	r7, r5
 80005be:	d100      	bne.n	80005c2 <__udivmoddi4+0x52>
 80005c0:	e078      	b.n	80006b4 <__udivmoddi4+0x144>
 80005c2:	465b      	mov	r3, fp
 80005c4:	1ba4      	subs	r4, r4, r6
 80005c6:	41bd      	sbcs	r5, r7
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	da00      	bge.n	80005ce <__udivmoddi4+0x5e>
 80005cc:	e075      	b.n	80006ba <__udivmoddi4+0x14a>
 80005ce:	2200      	movs	r2, #0
 80005d0:	2300      	movs	r3, #0
 80005d2:	9200      	str	r2, [sp, #0]
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2301      	movs	r3, #1
 80005d8:	465a      	mov	r2, fp
 80005da:	4093      	lsls	r3, r2
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2301      	movs	r3, #1
 80005e0:	4642      	mov	r2, r8
 80005e2:	4093      	lsls	r3, r2
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	e028      	b.n	800063a <__udivmoddi4+0xca>
 80005e8:	4282      	cmp	r2, r0
 80005ea:	d9cf      	bls.n	800058c <__udivmoddi4+0x1c>
 80005ec:	2200      	movs	r2, #0
 80005ee:	2300      	movs	r3, #0
 80005f0:	9200      	str	r2, [sp, #0]
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <__udivmoddi4+0x8e>
 80005fa:	601c      	str	r4, [r3, #0]
 80005fc:	605d      	str	r5, [r3, #4]
 80005fe:	9800      	ldr	r0, [sp, #0]
 8000600:	9901      	ldr	r1, [sp, #4]
 8000602:	b003      	add	sp, #12
 8000604:	bcf0      	pop	{r4, r5, r6, r7}
 8000606:	46bb      	mov	fp, r7
 8000608:	46b2      	mov	sl, r6
 800060a:	46a9      	mov	r9, r5
 800060c:	46a0      	mov	r8, r4
 800060e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000610:	4642      	mov	r2, r8
 8000612:	2320      	movs	r3, #32
 8000614:	1a9b      	subs	r3, r3, r2
 8000616:	4652      	mov	r2, sl
 8000618:	40da      	lsrs	r2, r3
 800061a:	4641      	mov	r1, r8
 800061c:	0013      	movs	r3, r2
 800061e:	464a      	mov	r2, r9
 8000620:	408a      	lsls	r2, r1
 8000622:	0017      	movs	r7, r2
 8000624:	4642      	mov	r2, r8
 8000626:	431f      	orrs	r7, r3
 8000628:	4653      	mov	r3, sl
 800062a:	4093      	lsls	r3, r2
 800062c:	001e      	movs	r6, r3
 800062e:	42af      	cmp	r7, r5
 8000630:	d9c4      	bls.n	80005bc <__udivmoddi4+0x4c>
 8000632:	2200      	movs	r2, #0
 8000634:	2300      	movs	r3, #0
 8000636:	9200      	str	r2, [sp, #0]
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	4643      	mov	r3, r8
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0d9      	beq.n	80005f4 <__udivmoddi4+0x84>
 8000640:	07fb      	lsls	r3, r7, #31
 8000642:	0872      	lsrs	r2, r6, #1
 8000644:	431a      	orrs	r2, r3
 8000646:	4646      	mov	r6, r8
 8000648:	087b      	lsrs	r3, r7, #1
 800064a:	e00e      	b.n	800066a <__udivmoddi4+0xfa>
 800064c:	42ab      	cmp	r3, r5
 800064e:	d101      	bne.n	8000654 <__udivmoddi4+0xe4>
 8000650:	42a2      	cmp	r2, r4
 8000652:	d80c      	bhi.n	800066e <__udivmoddi4+0xfe>
 8000654:	1aa4      	subs	r4, r4, r2
 8000656:	419d      	sbcs	r5, r3
 8000658:	2001      	movs	r0, #1
 800065a:	1924      	adds	r4, r4, r4
 800065c:	416d      	adcs	r5, r5
 800065e:	2100      	movs	r1, #0
 8000660:	3e01      	subs	r6, #1
 8000662:	1824      	adds	r4, r4, r0
 8000664:	414d      	adcs	r5, r1
 8000666:	2e00      	cmp	r6, #0
 8000668:	d006      	beq.n	8000678 <__udivmoddi4+0x108>
 800066a:	42ab      	cmp	r3, r5
 800066c:	d9ee      	bls.n	800064c <__udivmoddi4+0xdc>
 800066e:	3e01      	subs	r6, #1
 8000670:	1924      	adds	r4, r4, r4
 8000672:	416d      	adcs	r5, r5
 8000674:	2e00      	cmp	r6, #0
 8000676:	d1f8      	bne.n	800066a <__udivmoddi4+0xfa>
 8000678:	9800      	ldr	r0, [sp, #0]
 800067a:	9901      	ldr	r1, [sp, #4]
 800067c:	465b      	mov	r3, fp
 800067e:	1900      	adds	r0, r0, r4
 8000680:	4169      	adcs	r1, r5
 8000682:	2b00      	cmp	r3, #0
 8000684:	db24      	blt.n	80006d0 <__udivmoddi4+0x160>
 8000686:	002b      	movs	r3, r5
 8000688:	465a      	mov	r2, fp
 800068a:	4644      	mov	r4, r8
 800068c:	40d3      	lsrs	r3, r2
 800068e:	002a      	movs	r2, r5
 8000690:	40e2      	lsrs	r2, r4
 8000692:	001c      	movs	r4, r3
 8000694:	465b      	mov	r3, fp
 8000696:	0015      	movs	r5, r2
 8000698:	2b00      	cmp	r3, #0
 800069a:	db2a      	blt.n	80006f2 <__udivmoddi4+0x182>
 800069c:	0026      	movs	r6, r4
 800069e:	409e      	lsls	r6, r3
 80006a0:	0033      	movs	r3, r6
 80006a2:	0026      	movs	r6, r4
 80006a4:	4647      	mov	r7, r8
 80006a6:	40be      	lsls	r6, r7
 80006a8:	0032      	movs	r2, r6
 80006aa:	1a80      	subs	r0, r0, r2
 80006ac:	4199      	sbcs	r1, r3
 80006ae:	9000      	str	r0, [sp, #0]
 80006b0:	9101      	str	r1, [sp, #4]
 80006b2:	e79f      	b.n	80005f4 <__udivmoddi4+0x84>
 80006b4:	42a3      	cmp	r3, r4
 80006b6:	d8bc      	bhi.n	8000632 <__udivmoddi4+0xc2>
 80006b8:	e783      	b.n	80005c2 <__udivmoddi4+0x52>
 80006ba:	4642      	mov	r2, r8
 80006bc:	2320      	movs	r3, #32
 80006be:	2100      	movs	r1, #0
 80006c0:	1a9b      	subs	r3, r3, r2
 80006c2:	2200      	movs	r2, #0
 80006c4:	9100      	str	r1, [sp, #0]
 80006c6:	9201      	str	r2, [sp, #4]
 80006c8:	2201      	movs	r2, #1
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	9201      	str	r2, [sp, #4]
 80006ce:	e786      	b.n	80005de <__udivmoddi4+0x6e>
 80006d0:	4642      	mov	r2, r8
 80006d2:	2320      	movs	r3, #32
 80006d4:	1a9b      	subs	r3, r3, r2
 80006d6:	002a      	movs	r2, r5
 80006d8:	4646      	mov	r6, r8
 80006da:	409a      	lsls	r2, r3
 80006dc:	0023      	movs	r3, r4
 80006de:	40f3      	lsrs	r3, r6
 80006e0:	4644      	mov	r4, r8
 80006e2:	4313      	orrs	r3, r2
 80006e4:	002a      	movs	r2, r5
 80006e6:	40e2      	lsrs	r2, r4
 80006e8:	001c      	movs	r4, r3
 80006ea:	465b      	mov	r3, fp
 80006ec:	0015      	movs	r5, r2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	dad4      	bge.n	800069c <__udivmoddi4+0x12c>
 80006f2:	4642      	mov	r2, r8
 80006f4:	002f      	movs	r7, r5
 80006f6:	2320      	movs	r3, #32
 80006f8:	0026      	movs	r6, r4
 80006fa:	4097      	lsls	r7, r2
 80006fc:	1a9b      	subs	r3, r3, r2
 80006fe:	40de      	lsrs	r6, r3
 8000700:	003b      	movs	r3, r7
 8000702:	4333      	orrs	r3, r6
 8000704:	e7cd      	b.n	80006a2 <__udivmoddi4+0x132>
 8000706:	46c0      	nop			; (mov r8, r8)

08000708 <__aeabi_fadd>:
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	46c6      	mov	lr, r8
 800070c:	0243      	lsls	r3, r0, #9
 800070e:	0a5b      	lsrs	r3, r3, #9
 8000710:	024e      	lsls	r6, r1, #9
 8000712:	0045      	lsls	r5, r0, #1
 8000714:	004f      	lsls	r7, r1, #1
 8000716:	00da      	lsls	r2, r3, #3
 8000718:	0fc4      	lsrs	r4, r0, #31
 800071a:	469c      	mov	ip, r3
 800071c:	0a70      	lsrs	r0, r6, #9
 800071e:	4690      	mov	r8, r2
 8000720:	b500      	push	{lr}
 8000722:	0e2d      	lsrs	r5, r5, #24
 8000724:	0e3f      	lsrs	r7, r7, #24
 8000726:	0fc9      	lsrs	r1, r1, #31
 8000728:	09b6      	lsrs	r6, r6, #6
 800072a:	428c      	cmp	r4, r1
 800072c:	d04b      	beq.n	80007c6 <__aeabi_fadd+0xbe>
 800072e:	1bea      	subs	r2, r5, r7
 8000730:	2a00      	cmp	r2, #0
 8000732:	dd36      	ble.n	80007a2 <__aeabi_fadd+0x9a>
 8000734:	2f00      	cmp	r7, #0
 8000736:	d061      	beq.n	80007fc <__aeabi_fadd+0xf4>
 8000738:	2dff      	cmp	r5, #255	; 0xff
 800073a:	d100      	bne.n	800073e <__aeabi_fadd+0x36>
 800073c:	e0ad      	b.n	800089a <__aeabi_fadd+0x192>
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	04db      	lsls	r3, r3, #19
 8000742:	431e      	orrs	r6, r3
 8000744:	2a1b      	cmp	r2, #27
 8000746:	dc00      	bgt.n	800074a <__aeabi_fadd+0x42>
 8000748:	e0d3      	b.n	80008f2 <__aeabi_fadd+0x1ea>
 800074a:	2001      	movs	r0, #1
 800074c:	4643      	mov	r3, r8
 800074e:	1a18      	subs	r0, r3, r0
 8000750:	0143      	lsls	r3, r0, #5
 8000752:	d400      	bmi.n	8000756 <__aeabi_fadd+0x4e>
 8000754:	e08c      	b.n	8000870 <__aeabi_fadd+0x168>
 8000756:	0180      	lsls	r0, r0, #6
 8000758:	0987      	lsrs	r7, r0, #6
 800075a:	0038      	movs	r0, r7
 800075c:	f002 fd54 	bl	8003208 <__clzsi2>
 8000760:	3805      	subs	r0, #5
 8000762:	4087      	lsls	r7, r0
 8000764:	4285      	cmp	r5, r0
 8000766:	dc00      	bgt.n	800076a <__aeabi_fadd+0x62>
 8000768:	e0b6      	b.n	80008d8 <__aeabi_fadd+0x1d0>
 800076a:	1a2d      	subs	r5, r5, r0
 800076c:	48b3      	ldr	r0, [pc, #716]	; (8000a3c <__aeabi_fadd+0x334>)
 800076e:	4038      	ands	r0, r7
 8000770:	0743      	lsls	r3, r0, #29
 8000772:	d004      	beq.n	800077e <__aeabi_fadd+0x76>
 8000774:	230f      	movs	r3, #15
 8000776:	4003      	ands	r3, r0
 8000778:	2b04      	cmp	r3, #4
 800077a:	d000      	beq.n	800077e <__aeabi_fadd+0x76>
 800077c:	3004      	adds	r0, #4
 800077e:	0143      	lsls	r3, r0, #5
 8000780:	d400      	bmi.n	8000784 <__aeabi_fadd+0x7c>
 8000782:	e078      	b.n	8000876 <__aeabi_fadd+0x16e>
 8000784:	1c6a      	adds	r2, r5, #1
 8000786:	2dfe      	cmp	r5, #254	; 0xfe
 8000788:	d065      	beq.n	8000856 <__aeabi_fadd+0x14e>
 800078a:	0180      	lsls	r0, r0, #6
 800078c:	0a43      	lsrs	r3, r0, #9
 800078e:	469c      	mov	ip, r3
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	4663      	mov	r3, ip
 8000794:	05d0      	lsls	r0, r2, #23
 8000796:	4318      	orrs	r0, r3
 8000798:	07e4      	lsls	r4, r4, #31
 800079a:	4320      	orrs	r0, r4
 800079c:	bc80      	pop	{r7}
 800079e:	46b8      	mov	r8, r7
 80007a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a2:	2a00      	cmp	r2, #0
 80007a4:	d035      	beq.n	8000812 <__aeabi_fadd+0x10a>
 80007a6:	1b7a      	subs	r2, r7, r5
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0xa6>
 80007ac:	e0af      	b.n	800090e <__aeabi_fadd+0x206>
 80007ae:	4643      	mov	r3, r8
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fadd+0xae>
 80007b4:	e0a7      	b.n	8000906 <__aeabi_fadd+0x1fe>
 80007b6:	1e53      	subs	r3, r2, #1
 80007b8:	2a01      	cmp	r2, #1
 80007ba:	d100      	bne.n	80007be <__aeabi_fadd+0xb6>
 80007bc:	e12f      	b.n	8000a1e <__aeabi_fadd+0x316>
 80007be:	2aff      	cmp	r2, #255	; 0xff
 80007c0:	d069      	beq.n	8000896 <__aeabi_fadd+0x18e>
 80007c2:	001a      	movs	r2, r3
 80007c4:	e0aa      	b.n	800091c <__aeabi_fadd+0x214>
 80007c6:	1be9      	subs	r1, r5, r7
 80007c8:	2900      	cmp	r1, #0
 80007ca:	dd70      	ble.n	80008ae <__aeabi_fadd+0x1a6>
 80007cc:	2f00      	cmp	r7, #0
 80007ce:	d037      	beq.n	8000840 <__aeabi_fadd+0x138>
 80007d0:	2dff      	cmp	r5, #255	; 0xff
 80007d2:	d062      	beq.n	800089a <__aeabi_fadd+0x192>
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	04db      	lsls	r3, r3, #19
 80007d8:	431e      	orrs	r6, r3
 80007da:	291b      	cmp	r1, #27
 80007dc:	dc00      	bgt.n	80007e0 <__aeabi_fadd+0xd8>
 80007de:	e0b0      	b.n	8000942 <__aeabi_fadd+0x23a>
 80007e0:	2001      	movs	r0, #1
 80007e2:	4440      	add	r0, r8
 80007e4:	0143      	lsls	r3, r0, #5
 80007e6:	d543      	bpl.n	8000870 <__aeabi_fadd+0x168>
 80007e8:	3501      	adds	r5, #1
 80007ea:	2dff      	cmp	r5, #255	; 0xff
 80007ec:	d033      	beq.n	8000856 <__aeabi_fadd+0x14e>
 80007ee:	2301      	movs	r3, #1
 80007f0:	4a93      	ldr	r2, [pc, #588]	; (8000a40 <__aeabi_fadd+0x338>)
 80007f2:	4003      	ands	r3, r0
 80007f4:	0840      	lsrs	r0, r0, #1
 80007f6:	4010      	ands	r0, r2
 80007f8:	4318      	orrs	r0, r3
 80007fa:	e7b9      	b.n	8000770 <__aeabi_fadd+0x68>
 80007fc:	2e00      	cmp	r6, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0xfa>
 8000800:	e083      	b.n	800090a <__aeabi_fadd+0x202>
 8000802:	1e51      	subs	r1, r2, #1
 8000804:	2a01      	cmp	r2, #1
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x102>
 8000808:	e0d8      	b.n	80009bc <__aeabi_fadd+0x2b4>
 800080a:	2aff      	cmp	r2, #255	; 0xff
 800080c:	d045      	beq.n	800089a <__aeabi_fadd+0x192>
 800080e:	000a      	movs	r2, r1
 8000810:	e798      	b.n	8000744 <__aeabi_fadd+0x3c>
 8000812:	27fe      	movs	r7, #254	; 0xfe
 8000814:	1c6a      	adds	r2, r5, #1
 8000816:	4217      	tst	r7, r2
 8000818:	d000      	beq.n	800081c <__aeabi_fadd+0x114>
 800081a:	e086      	b.n	800092a <__aeabi_fadd+0x222>
 800081c:	2d00      	cmp	r5, #0
 800081e:	d000      	beq.n	8000822 <__aeabi_fadd+0x11a>
 8000820:	e0b7      	b.n	8000992 <__aeabi_fadd+0x28a>
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d100      	bne.n	800082a <__aeabi_fadd+0x122>
 8000828:	e0f3      	b.n	8000a12 <__aeabi_fadd+0x30a>
 800082a:	2200      	movs	r2, #0
 800082c:	2e00      	cmp	r6, #0
 800082e:	d0b0      	beq.n	8000792 <__aeabi_fadd+0x8a>
 8000830:	1b98      	subs	r0, r3, r6
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fadd+0x130>
 8000836:	e0fa      	b.n	8000a2e <__aeabi_fadd+0x326>
 8000838:	4643      	mov	r3, r8
 800083a:	000c      	movs	r4, r1
 800083c:	1af0      	subs	r0, r6, r3
 800083e:	e797      	b.n	8000770 <__aeabi_fadd+0x68>
 8000840:	2e00      	cmp	r6, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0x13e>
 8000844:	e0c8      	b.n	80009d8 <__aeabi_fadd+0x2d0>
 8000846:	1e4a      	subs	r2, r1, #1
 8000848:	2901      	cmp	r1, #1
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0x146>
 800084c:	e0ae      	b.n	80009ac <__aeabi_fadd+0x2a4>
 800084e:	29ff      	cmp	r1, #255	; 0xff
 8000850:	d023      	beq.n	800089a <__aeabi_fadd+0x192>
 8000852:	0011      	movs	r1, r2
 8000854:	e7c1      	b.n	80007da <__aeabi_fadd+0xd2>
 8000856:	2300      	movs	r3, #0
 8000858:	22ff      	movs	r2, #255	; 0xff
 800085a:	469c      	mov	ip, r3
 800085c:	e799      	b.n	8000792 <__aeabi_fadd+0x8a>
 800085e:	21fe      	movs	r1, #254	; 0xfe
 8000860:	1c6a      	adds	r2, r5, #1
 8000862:	4211      	tst	r1, r2
 8000864:	d077      	beq.n	8000956 <__aeabi_fadd+0x24e>
 8000866:	2aff      	cmp	r2, #255	; 0xff
 8000868:	d0f5      	beq.n	8000856 <__aeabi_fadd+0x14e>
 800086a:	0015      	movs	r5, r2
 800086c:	4446      	add	r6, r8
 800086e:	0870      	lsrs	r0, r6, #1
 8000870:	0743      	lsls	r3, r0, #29
 8000872:	d000      	beq.n	8000876 <__aeabi_fadd+0x16e>
 8000874:	e77e      	b.n	8000774 <__aeabi_fadd+0x6c>
 8000876:	08c3      	lsrs	r3, r0, #3
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d00e      	beq.n	800089a <__aeabi_fadd+0x192>
 800087c:	025b      	lsls	r3, r3, #9
 800087e:	0a5b      	lsrs	r3, r3, #9
 8000880:	469c      	mov	ip, r3
 8000882:	b2ea      	uxtb	r2, r5
 8000884:	e785      	b.n	8000792 <__aeabi_fadd+0x8a>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d007      	beq.n	800089a <__aeabi_fadd+0x192>
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	03d2      	lsls	r2, r2, #15
 800088e:	4213      	tst	r3, r2
 8000890:	d003      	beq.n	800089a <__aeabi_fadd+0x192>
 8000892:	4210      	tst	r0, r2
 8000894:	d101      	bne.n	800089a <__aeabi_fadd+0x192>
 8000896:	000c      	movs	r4, r1
 8000898:	0003      	movs	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0db      	beq.n	8000856 <__aeabi_fadd+0x14e>
 800089e:	2080      	movs	r0, #128	; 0x80
 80008a0:	03c0      	lsls	r0, r0, #15
 80008a2:	4318      	orrs	r0, r3
 80008a4:	0240      	lsls	r0, r0, #9
 80008a6:	0a43      	lsrs	r3, r0, #9
 80008a8:	469c      	mov	ip, r3
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	e771      	b.n	8000792 <__aeabi_fadd+0x8a>
 80008ae:	2900      	cmp	r1, #0
 80008b0:	d0d5      	beq.n	800085e <__aeabi_fadd+0x156>
 80008b2:	1b7a      	subs	r2, r7, r5
 80008b4:	2d00      	cmp	r5, #0
 80008b6:	d160      	bne.n	800097a <__aeabi_fadd+0x272>
 80008b8:	4643      	mov	r3, r8
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d024      	beq.n	8000908 <__aeabi_fadd+0x200>
 80008be:	1e53      	subs	r3, r2, #1
 80008c0:	2a01      	cmp	r2, #1
 80008c2:	d073      	beq.n	80009ac <__aeabi_fadd+0x2a4>
 80008c4:	2aff      	cmp	r2, #255	; 0xff
 80008c6:	d0e7      	beq.n	8000898 <__aeabi_fadd+0x190>
 80008c8:	001a      	movs	r2, r3
 80008ca:	2a1b      	cmp	r2, #27
 80008cc:	dc00      	bgt.n	80008d0 <__aeabi_fadd+0x1c8>
 80008ce:	e085      	b.n	80009dc <__aeabi_fadd+0x2d4>
 80008d0:	2001      	movs	r0, #1
 80008d2:	003d      	movs	r5, r7
 80008d4:	1980      	adds	r0, r0, r6
 80008d6:	e785      	b.n	80007e4 <__aeabi_fadd+0xdc>
 80008d8:	2320      	movs	r3, #32
 80008da:	003a      	movs	r2, r7
 80008dc:	1b45      	subs	r5, r0, r5
 80008de:	0038      	movs	r0, r7
 80008e0:	3501      	adds	r5, #1
 80008e2:	40ea      	lsrs	r2, r5
 80008e4:	1b5d      	subs	r5, r3, r5
 80008e6:	40a8      	lsls	r0, r5
 80008e8:	1e43      	subs	r3, r0, #1
 80008ea:	4198      	sbcs	r0, r3
 80008ec:	2500      	movs	r5, #0
 80008ee:	4310      	orrs	r0, r2
 80008f0:	e73e      	b.n	8000770 <__aeabi_fadd+0x68>
 80008f2:	2320      	movs	r3, #32
 80008f4:	0030      	movs	r0, r6
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	0031      	movs	r1, r6
 80008fa:	4098      	lsls	r0, r3
 80008fc:	40d1      	lsrs	r1, r2
 80008fe:	1e43      	subs	r3, r0, #1
 8000900:	4198      	sbcs	r0, r3
 8000902:	4308      	orrs	r0, r1
 8000904:	e722      	b.n	800074c <__aeabi_fadd+0x44>
 8000906:	000c      	movs	r4, r1
 8000908:	0003      	movs	r3, r0
 800090a:	0015      	movs	r5, r2
 800090c:	e7b4      	b.n	8000878 <__aeabi_fadd+0x170>
 800090e:	2fff      	cmp	r7, #255	; 0xff
 8000910:	d0c1      	beq.n	8000896 <__aeabi_fadd+0x18e>
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	4640      	mov	r0, r8
 8000916:	04db      	lsls	r3, r3, #19
 8000918:	4318      	orrs	r0, r3
 800091a:	4680      	mov	r8, r0
 800091c:	2a1b      	cmp	r2, #27
 800091e:	dd51      	ble.n	80009c4 <__aeabi_fadd+0x2bc>
 8000920:	2001      	movs	r0, #1
 8000922:	000c      	movs	r4, r1
 8000924:	003d      	movs	r5, r7
 8000926:	1a30      	subs	r0, r6, r0
 8000928:	e712      	b.n	8000750 <__aeabi_fadd+0x48>
 800092a:	4643      	mov	r3, r8
 800092c:	1b9f      	subs	r7, r3, r6
 800092e:	017b      	lsls	r3, r7, #5
 8000930:	d42b      	bmi.n	800098a <__aeabi_fadd+0x282>
 8000932:	2f00      	cmp	r7, #0
 8000934:	d000      	beq.n	8000938 <__aeabi_fadd+0x230>
 8000936:	e710      	b.n	800075a <__aeabi_fadd+0x52>
 8000938:	2300      	movs	r3, #0
 800093a:	2400      	movs	r4, #0
 800093c:	2200      	movs	r2, #0
 800093e:	469c      	mov	ip, r3
 8000940:	e727      	b.n	8000792 <__aeabi_fadd+0x8a>
 8000942:	2320      	movs	r3, #32
 8000944:	0032      	movs	r2, r6
 8000946:	0030      	movs	r0, r6
 8000948:	40ca      	lsrs	r2, r1
 800094a:	1a59      	subs	r1, r3, r1
 800094c:	4088      	lsls	r0, r1
 800094e:	1e43      	subs	r3, r0, #1
 8000950:	4198      	sbcs	r0, r3
 8000952:	4310      	orrs	r0, r2
 8000954:	e745      	b.n	80007e2 <__aeabi_fadd+0xda>
 8000956:	2d00      	cmp	r5, #0
 8000958:	d14a      	bne.n	80009f0 <__aeabi_fadd+0x2e8>
 800095a:	4643      	mov	r3, r8
 800095c:	2b00      	cmp	r3, #0
 800095e:	d063      	beq.n	8000a28 <__aeabi_fadd+0x320>
 8000960:	2200      	movs	r2, #0
 8000962:	2e00      	cmp	r6, #0
 8000964:	d100      	bne.n	8000968 <__aeabi_fadd+0x260>
 8000966:	e714      	b.n	8000792 <__aeabi_fadd+0x8a>
 8000968:	0030      	movs	r0, r6
 800096a:	4440      	add	r0, r8
 800096c:	0143      	lsls	r3, r0, #5
 800096e:	d400      	bmi.n	8000972 <__aeabi_fadd+0x26a>
 8000970:	e77e      	b.n	8000870 <__aeabi_fadd+0x168>
 8000972:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <__aeabi_fadd+0x334>)
 8000974:	3501      	adds	r5, #1
 8000976:	4018      	ands	r0, r3
 8000978:	e77a      	b.n	8000870 <__aeabi_fadd+0x168>
 800097a:	2fff      	cmp	r7, #255	; 0xff
 800097c:	d08c      	beq.n	8000898 <__aeabi_fadd+0x190>
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	4641      	mov	r1, r8
 8000982:	04db      	lsls	r3, r3, #19
 8000984:	4319      	orrs	r1, r3
 8000986:	4688      	mov	r8, r1
 8000988:	e79f      	b.n	80008ca <__aeabi_fadd+0x1c2>
 800098a:	4643      	mov	r3, r8
 800098c:	000c      	movs	r4, r1
 800098e:	1af7      	subs	r7, r6, r3
 8000990:	e6e3      	b.n	800075a <__aeabi_fadd+0x52>
 8000992:	4642      	mov	r2, r8
 8000994:	2a00      	cmp	r2, #0
 8000996:	d000      	beq.n	800099a <__aeabi_fadd+0x292>
 8000998:	e775      	b.n	8000886 <__aeabi_fadd+0x17e>
 800099a:	2e00      	cmp	r6, #0
 800099c:	d000      	beq.n	80009a0 <__aeabi_fadd+0x298>
 800099e:	e77a      	b.n	8000896 <__aeabi_fadd+0x18e>
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	03db      	lsls	r3, r3, #15
 80009a4:	2400      	movs	r4, #0
 80009a6:	469c      	mov	ip, r3
 80009a8:	22ff      	movs	r2, #255	; 0xff
 80009aa:	e6f2      	b.n	8000792 <__aeabi_fadd+0x8a>
 80009ac:	0030      	movs	r0, r6
 80009ae:	4440      	add	r0, r8
 80009b0:	2501      	movs	r5, #1
 80009b2:	0143      	lsls	r3, r0, #5
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_fadd+0x2b0>
 80009b6:	e75b      	b.n	8000870 <__aeabi_fadd+0x168>
 80009b8:	2502      	movs	r5, #2
 80009ba:	e718      	b.n	80007ee <__aeabi_fadd+0xe6>
 80009bc:	4643      	mov	r3, r8
 80009be:	2501      	movs	r5, #1
 80009c0:	1b98      	subs	r0, r3, r6
 80009c2:	e6c5      	b.n	8000750 <__aeabi_fadd+0x48>
 80009c4:	2320      	movs	r3, #32
 80009c6:	4644      	mov	r4, r8
 80009c8:	4640      	mov	r0, r8
 80009ca:	40d4      	lsrs	r4, r2
 80009cc:	1a9a      	subs	r2, r3, r2
 80009ce:	4090      	lsls	r0, r2
 80009d0:	1e43      	subs	r3, r0, #1
 80009d2:	4198      	sbcs	r0, r3
 80009d4:	4320      	orrs	r0, r4
 80009d6:	e7a4      	b.n	8000922 <__aeabi_fadd+0x21a>
 80009d8:	000d      	movs	r5, r1
 80009da:	e74d      	b.n	8000878 <__aeabi_fadd+0x170>
 80009dc:	2320      	movs	r3, #32
 80009de:	4641      	mov	r1, r8
 80009e0:	4640      	mov	r0, r8
 80009e2:	40d1      	lsrs	r1, r2
 80009e4:	1a9a      	subs	r2, r3, r2
 80009e6:	4090      	lsls	r0, r2
 80009e8:	1e43      	subs	r3, r0, #1
 80009ea:	4198      	sbcs	r0, r3
 80009ec:	4308      	orrs	r0, r1
 80009ee:	e770      	b.n	80008d2 <__aeabi_fadd+0x1ca>
 80009f0:	4642      	mov	r2, r8
 80009f2:	2a00      	cmp	r2, #0
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x2f0>
 80009f6:	e74f      	b.n	8000898 <__aeabi_fadd+0x190>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_fadd+0x2f6>
 80009fc:	e74d      	b.n	800089a <__aeabi_fadd+0x192>
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	03d2      	lsls	r2, r2, #15
 8000a02:	4213      	tst	r3, r2
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fadd+0x300>
 8000a06:	e748      	b.n	800089a <__aeabi_fadd+0x192>
 8000a08:	4210      	tst	r0, r2
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_fadd+0x306>
 8000a0c:	e745      	b.n	800089a <__aeabi_fadd+0x192>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	e743      	b.n	800089a <__aeabi_fadd+0x192>
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d090      	beq.n	8000938 <__aeabi_fadd+0x230>
 8000a16:	000c      	movs	r4, r1
 8000a18:	4684      	mov	ip, r0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	e6b9      	b.n	8000792 <__aeabi_fadd+0x8a>
 8000a1e:	4643      	mov	r3, r8
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af0      	subs	r0, r6, r3
 8000a24:	3501      	adds	r5, #1
 8000a26:	e693      	b.n	8000750 <__aeabi_fadd+0x48>
 8000a28:	4684      	mov	ip, r0
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	e6b1      	b.n	8000792 <__aeabi_fadd+0x8a>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d000      	beq.n	8000a34 <__aeabi_fadd+0x32c>
 8000a32:	e71d      	b.n	8000870 <__aeabi_fadd+0x168>
 8000a34:	2300      	movs	r3, #0
 8000a36:	2400      	movs	r4, #0
 8000a38:	469c      	mov	ip, r3
 8000a3a:	e6aa      	b.n	8000792 <__aeabi_fadd+0x8a>
 8000a3c:	fbffffff 	.word	0xfbffffff
 8000a40:	7dffffff 	.word	0x7dffffff

08000a44 <__aeabi_fdiv>:
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a46:	464f      	mov	r7, r9
 8000a48:	4646      	mov	r6, r8
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	0245      	lsls	r5, r0, #9
 8000a4e:	b5c0      	push	{r6, r7, lr}
 8000a50:	0047      	lsls	r7, r0, #1
 8000a52:	1c0c      	adds	r4, r1, #0
 8000a54:	0a6d      	lsrs	r5, r5, #9
 8000a56:	0e3f      	lsrs	r7, r7, #24
 8000a58:	0fc6      	lsrs	r6, r0, #31
 8000a5a:	2f00      	cmp	r7, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fdiv+0x1c>
 8000a5e:	e070      	b.n	8000b42 <__aeabi_fdiv+0xfe>
 8000a60:	2fff      	cmp	r7, #255	; 0xff
 8000a62:	d100      	bne.n	8000a66 <__aeabi_fdiv+0x22>
 8000a64:	e075      	b.n	8000b52 <__aeabi_fdiv+0x10e>
 8000a66:	00eb      	lsls	r3, r5, #3
 8000a68:	2580      	movs	r5, #128	; 0x80
 8000a6a:	04ed      	lsls	r5, r5, #19
 8000a6c:	431d      	orrs	r5, r3
 8000a6e:	2300      	movs	r3, #0
 8000a70:	4699      	mov	r9, r3
 8000a72:	469a      	mov	sl, r3
 8000a74:	3f7f      	subs	r7, #127	; 0x7f
 8000a76:	0260      	lsls	r0, r4, #9
 8000a78:	0a43      	lsrs	r3, r0, #9
 8000a7a:	4698      	mov	r8, r3
 8000a7c:	0063      	lsls	r3, r4, #1
 8000a7e:	0e1b      	lsrs	r3, r3, #24
 8000a80:	0fe4      	lsrs	r4, r4, #31
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d04e      	beq.n	8000b24 <__aeabi_fdiv+0xe0>
 8000a86:	2bff      	cmp	r3, #255	; 0xff
 8000a88:	d046      	beq.n	8000b18 <__aeabi_fdiv+0xd4>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	00d0      	lsls	r0, r2, #3
 8000a8e:	2280      	movs	r2, #128	; 0x80
 8000a90:	04d2      	lsls	r2, r2, #19
 8000a92:	4302      	orrs	r2, r0
 8000a94:	4690      	mov	r8, r2
 8000a96:	2200      	movs	r2, #0
 8000a98:	3b7f      	subs	r3, #127	; 0x7f
 8000a9a:	0031      	movs	r1, r6
 8000a9c:	1aff      	subs	r7, r7, r3
 8000a9e:	464b      	mov	r3, r9
 8000aa0:	4061      	eors	r1, r4
 8000aa2:	b2c9      	uxtb	r1, r1
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d900      	bls.n	8000aac <__aeabi_fdiv+0x68>
 8000aaa:	e0b5      	b.n	8000c18 <__aeabi_fdiv+0x1d4>
 8000aac:	486e      	ldr	r0, [pc, #440]	; (8000c68 <__aeabi_fdiv+0x224>)
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	58c3      	ldr	r3, [r0, r3]
 8000ab2:	469f      	mov	pc, r3
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4698      	mov	r8, r3
 8000ab8:	0026      	movs	r6, r4
 8000aba:	4645      	mov	r5, r8
 8000abc:	4692      	mov	sl, r2
 8000abe:	4653      	mov	r3, sl
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fdiv+0x82>
 8000ac4:	e089      	b.n	8000bda <__aeabi_fdiv+0x196>
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fdiv+0x88>
 8000aca:	e09e      	b.n	8000c0a <__aeabi_fdiv+0x1c6>
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d018      	beq.n	8000b02 <__aeabi_fdiv+0xbe>
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	337f      	adds	r3, #127	; 0x7f
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	dd69      	ble.n	8000bac <__aeabi_fdiv+0x168>
 8000ad8:	076a      	lsls	r2, r5, #29
 8000ada:	d004      	beq.n	8000ae6 <__aeabi_fdiv+0xa2>
 8000adc:	220f      	movs	r2, #15
 8000ade:	402a      	ands	r2, r5
 8000ae0:	2a04      	cmp	r2, #4
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_fdiv+0xa2>
 8000ae4:	3504      	adds	r5, #4
 8000ae6:	012a      	lsls	r2, r5, #4
 8000ae8:	d503      	bpl.n	8000af2 <__aeabi_fdiv+0xae>
 8000aea:	4b60      	ldr	r3, [pc, #384]	; (8000c6c <__aeabi_fdiv+0x228>)
 8000aec:	401d      	ands	r5, r3
 8000aee:	003b      	movs	r3, r7
 8000af0:	3380      	adds	r3, #128	; 0x80
 8000af2:	2bfe      	cmp	r3, #254	; 0xfe
 8000af4:	dd00      	ble.n	8000af8 <__aeabi_fdiv+0xb4>
 8000af6:	e070      	b.n	8000bda <__aeabi_fdiv+0x196>
 8000af8:	01ad      	lsls	r5, r5, #6
 8000afa:	0a6d      	lsrs	r5, r5, #9
 8000afc:	b2d8      	uxtb	r0, r3
 8000afe:	e002      	b.n	8000b06 <__aeabi_fdiv+0xc2>
 8000b00:	000e      	movs	r6, r1
 8000b02:	2000      	movs	r0, #0
 8000b04:	2500      	movs	r5, #0
 8000b06:	05c0      	lsls	r0, r0, #23
 8000b08:	4328      	orrs	r0, r5
 8000b0a:	07f6      	lsls	r6, r6, #31
 8000b0c:	4330      	orrs	r0, r6
 8000b0e:	bce0      	pop	{r5, r6, r7}
 8000b10:	46ba      	mov	sl, r7
 8000b12:	46b1      	mov	r9, r6
 8000b14:	46a8      	mov	r8, r5
 8000b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b18:	4643      	mov	r3, r8
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d13f      	bne.n	8000b9e <__aeabi_fdiv+0x15a>
 8000b1e:	2202      	movs	r2, #2
 8000b20:	3fff      	subs	r7, #255	; 0xff
 8000b22:	e003      	b.n	8000b2c <__aeabi_fdiv+0xe8>
 8000b24:	4643      	mov	r3, r8
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d12d      	bne.n	8000b86 <__aeabi_fdiv+0x142>
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	0031      	movs	r1, r6
 8000b2e:	464b      	mov	r3, r9
 8000b30:	4061      	eors	r1, r4
 8000b32:	b2c9      	uxtb	r1, r1
 8000b34:	4313      	orrs	r3, r2
 8000b36:	2b0f      	cmp	r3, #15
 8000b38:	d834      	bhi.n	8000ba4 <__aeabi_fdiv+0x160>
 8000b3a:	484d      	ldr	r0, [pc, #308]	; (8000c70 <__aeabi_fdiv+0x22c>)
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	58c3      	ldr	r3, [r0, r3]
 8000b40:	469f      	mov	pc, r3
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d113      	bne.n	8000b6e <__aeabi_fdiv+0x12a>
 8000b46:	2304      	movs	r3, #4
 8000b48:	4699      	mov	r9, r3
 8000b4a:	3b03      	subs	r3, #3
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	469a      	mov	sl, r3
 8000b50:	e791      	b.n	8000a76 <__aeabi_fdiv+0x32>
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d105      	bne.n	8000b62 <__aeabi_fdiv+0x11e>
 8000b56:	2308      	movs	r3, #8
 8000b58:	4699      	mov	r9, r3
 8000b5a:	3b06      	subs	r3, #6
 8000b5c:	27ff      	movs	r7, #255	; 0xff
 8000b5e:	469a      	mov	sl, r3
 8000b60:	e789      	b.n	8000a76 <__aeabi_fdiv+0x32>
 8000b62:	230c      	movs	r3, #12
 8000b64:	4699      	mov	r9, r3
 8000b66:	3b09      	subs	r3, #9
 8000b68:	27ff      	movs	r7, #255	; 0xff
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	e783      	b.n	8000a76 <__aeabi_fdiv+0x32>
 8000b6e:	0028      	movs	r0, r5
 8000b70:	f002 fb4a 	bl	8003208 <__clzsi2>
 8000b74:	2776      	movs	r7, #118	; 0x76
 8000b76:	1f43      	subs	r3, r0, #5
 8000b78:	409d      	lsls	r5, r3
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	427f      	negs	r7, r7
 8000b7e:	4699      	mov	r9, r3
 8000b80:	469a      	mov	sl, r3
 8000b82:	1a3f      	subs	r7, r7, r0
 8000b84:	e777      	b.n	8000a76 <__aeabi_fdiv+0x32>
 8000b86:	4640      	mov	r0, r8
 8000b88:	f002 fb3e 	bl	8003208 <__clzsi2>
 8000b8c:	4642      	mov	r2, r8
 8000b8e:	1f43      	subs	r3, r0, #5
 8000b90:	409a      	lsls	r2, r3
 8000b92:	2376      	movs	r3, #118	; 0x76
 8000b94:	425b      	negs	r3, r3
 8000b96:	4690      	mov	r8, r2
 8000b98:	1a1b      	subs	r3, r3, r0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	e77d      	b.n	8000a9a <__aeabi_fdiv+0x56>
 8000b9e:	23ff      	movs	r3, #255	; 0xff
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	e77a      	b.n	8000a9a <__aeabi_fdiv+0x56>
 8000ba4:	000e      	movs	r6, r1
 8000ba6:	20ff      	movs	r0, #255	; 0xff
 8000ba8:	2500      	movs	r5, #0
 8000baa:	e7ac      	b.n	8000b06 <__aeabi_fdiv+0xc2>
 8000bac:	2001      	movs	r0, #1
 8000bae:	1ac0      	subs	r0, r0, r3
 8000bb0:	281b      	cmp	r0, #27
 8000bb2:	dca6      	bgt.n	8000b02 <__aeabi_fdiv+0xbe>
 8000bb4:	379e      	adds	r7, #158	; 0x9e
 8000bb6:	002a      	movs	r2, r5
 8000bb8:	40bd      	lsls	r5, r7
 8000bba:	40c2      	lsrs	r2, r0
 8000bbc:	1e6b      	subs	r3, r5, #1
 8000bbe:	419d      	sbcs	r5, r3
 8000bc0:	4315      	orrs	r5, r2
 8000bc2:	076b      	lsls	r3, r5, #29
 8000bc4:	d004      	beq.n	8000bd0 <__aeabi_fdiv+0x18c>
 8000bc6:	230f      	movs	r3, #15
 8000bc8:	402b      	ands	r3, r5
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	d000      	beq.n	8000bd0 <__aeabi_fdiv+0x18c>
 8000bce:	3504      	adds	r5, #4
 8000bd0:	016b      	lsls	r3, r5, #5
 8000bd2:	d544      	bpl.n	8000c5e <__aeabi_fdiv+0x21a>
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	2500      	movs	r5, #0
 8000bd8:	e795      	b.n	8000b06 <__aeabi_fdiv+0xc2>
 8000bda:	20ff      	movs	r0, #255	; 0xff
 8000bdc:	2500      	movs	r5, #0
 8000bde:	e792      	b.n	8000b06 <__aeabi_fdiv+0xc2>
 8000be0:	2580      	movs	r5, #128	; 0x80
 8000be2:	2600      	movs	r6, #0
 8000be4:	20ff      	movs	r0, #255	; 0xff
 8000be6:	03ed      	lsls	r5, r5, #15
 8000be8:	e78d      	b.n	8000b06 <__aeabi_fdiv+0xc2>
 8000bea:	2300      	movs	r3, #0
 8000bec:	4698      	mov	r8, r3
 8000bee:	2080      	movs	r0, #128	; 0x80
 8000bf0:	03c0      	lsls	r0, r0, #15
 8000bf2:	4205      	tst	r5, r0
 8000bf4:	d009      	beq.n	8000c0a <__aeabi_fdiv+0x1c6>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	4203      	tst	r3, r0
 8000bfa:	d106      	bne.n	8000c0a <__aeabi_fdiv+0x1c6>
 8000bfc:	4645      	mov	r5, r8
 8000bfe:	4305      	orrs	r5, r0
 8000c00:	026d      	lsls	r5, r5, #9
 8000c02:	0026      	movs	r6, r4
 8000c04:	20ff      	movs	r0, #255	; 0xff
 8000c06:	0a6d      	lsrs	r5, r5, #9
 8000c08:	e77d      	b.n	8000b06 <__aeabi_fdiv+0xc2>
 8000c0a:	2080      	movs	r0, #128	; 0x80
 8000c0c:	03c0      	lsls	r0, r0, #15
 8000c0e:	4305      	orrs	r5, r0
 8000c10:	026d      	lsls	r5, r5, #9
 8000c12:	20ff      	movs	r0, #255	; 0xff
 8000c14:	0a6d      	lsrs	r5, r5, #9
 8000c16:	e776      	b.n	8000b06 <__aeabi_fdiv+0xc2>
 8000c18:	4642      	mov	r2, r8
 8000c1a:	016b      	lsls	r3, r5, #5
 8000c1c:	0150      	lsls	r0, r2, #5
 8000c1e:	4283      	cmp	r3, r0
 8000c20:	d219      	bcs.n	8000c56 <__aeabi_fdiv+0x212>
 8000c22:	221b      	movs	r2, #27
 8000c24:	2500      	movs	r5, #0
 8000c26:	3f01      	subs	r7, #1
 8000c28:	2601      	movs	r6, #1
 8000c2a:	001c      	movs	r4, r3
 8000c2c:	006d      	lsls	r5, r5, #1
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	db01      	blt.n	8000c38 <__aeabi_fdiv+0x1f4>
 8000c34:	4298      	cmp	r0, r3
 8000c36:	d801      	bhi.n	8000c3c <__aeabi_fdiv+0x1f8>
 8000c38:	1a1b      	subs	r3, r3, r0
 8000c3a:	4335      	orrs	r5, r6
 8000c3c:	3a01      	subs	r2, #1
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d1f3      	bne.n	8000c2a <__aeabi_fdiv+0x1e6>
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	4193      	sbcs	r3, r2
 8000c46:	431d      	orrs	r5, r3
 8000c48:	003b      	movs	r3, r7
 8000c4a:	337f      	adds	r3, #127	; 0x7f
 8000c4c:	000e      	movs	r6, r1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	dd00      	ble.n	8000c54 <__aeabi_fdiv+0x210>
 8000c52:	e741      	b.n	8000ad8 <__aeabi_fdiv+0x94>
 8000c54:	e7aa      	b.n	8000bac <__aeabi_fdiv+0x168>
 8000c56:	221a      	movs	r2, #26
 8000c58:	2501      	movs	r5, #1
 8000c5a:	1a1b      	subs	r3, r3, r0
 8000c5c:	e7e4      	b.n	8000c28 <__aeabi_fdiv+0x1e4>
 8000c5e:	01ad      	lsls	r5, r5, #6
 8000c60:	2000      	movs	r0, #0
 8000c62:	0a6d      	lsrs	r5, r5, #9
 8000c64:	e74f      	b.n	8000b06 <__aeabi_fdiv+0xc2>
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	0800f7d4 	.word	0x0800f7d4
 8000c6c:	f7ffffff 	.word	0xf7ffffff
 8000c70:	0800f814 	.word	0x0800f814

08000c74 <__eqsf2>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	0042      	lsls	r2, r0, #1
 8000c78:	0245      	lsls	r5, r0, #9
 8000c7a:	024e      	lsls	r6, r1, #9
 8000c7c:	004c      	lsls	r4, r1, #1
 8000c7e:	0fc3      	lsrs	r3, r0, #31
 8000c80:	0a6d      	lsrs	r5, r5, #9
 8000c82:	2001      	movs	r0, #1
 8000c84:	0e12      	lsrs	r2, r2, #24
 8000c86:	0a76      	lsrs	r6, r6, #9
 8000c88:	0e24      	lsrs	r4, r4, #24
 8000c8a:	0fc9      	lsrs	r1, r1, #31
 8000c8c:	2aff      	cmp	r2, #255	; 0xff
 8000c8e:	d006      	beq.n	8000c9e <__eqsf2+0x2a>
 8000c90:	2cff      	cmp	r4, #255	; 0xff
 8000c92:	d003      	beq.n	8000c9c <__eqsf2+0x28>
 8000c94:	42a2      	cmp	r2, r4
 8000c96:	d101      	bne.n	8000c9c <__eqsf2+0x28>
 8000c98:	42b5      	cmp	r5, r6
 8000c9a:	d006      	beq.n	8000caa <__eqsf2+0x36>
 8000c9c:	bd70      	pop	{r4, r5, r6, pc}
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d1fc      	bne.n	8000c9c <__eqsf2+0x28>
 8000ca2:	2cff      	cmp	r4, #255	; 0xff
 8000ca4:	d1fa      	bne.n	8000c9c <__eqsf2+0x28>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d1f8      	bne.n	8000c9c <__eqsf2+0x28>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d006      	beq.n	8000cbc <__eqsf2+0x48>
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	d1f3      	bne.n	8000c9c <__eqsf2+0x28>
 8000cb4:	0028      	movs	r0, r5
 8000cb6:	1e43      	subs	r3, r0, #1
 8000cb8:	4198      	sbcs	r0, r3
 8000cba:	e7ef      	b.n	8000c9c <__eqsf2+0x28>
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	e7ed      	b.n	8000c9c <__eqsf2+0x28>

08000cc0 <__gesf2>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	0042      	lsls	r2, r0, #1
 8000cc4:	0245      	lsls	r5, r0, #9
 8000cc6:	024e      	lsls	r6, r1, #9
 8000cc8:	004c      	lsls	r4, r1, #1
 8000cca:	0fc3      	lsrs	r3, r0, #31
 8000ccc:	0a6d      	lsrs	r5, r5, #9
 8000cce:	0e12      	lsrs	r2, r2, #24
 8000cd0:	0a76      	lsrs	r6, r6, #9
 8000cd2:	0e24      	lsrs	r4, r4, #24
 8000cd4:	0fc8      	lsrs	r0, r1, #31
 8000cd6:	2aff      	cmp	r2, #255	; 0xff
 8000cd8:	d01b      	beq.n	8000d12 <__gesf2+0x52>
 8000cda:	2cff      	cmp	r4, #255	; 0xff
 8000cdc:	d00e      	beq.n	8000cfc <__gesf2+0x3c>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	d11b      	bne.n	8000d1a <__gesf2+0x5a>
 8000ce2:	2c00      	cmp	r4, #0
 8000ce4:	d101      	bne.n	8000cea <__gesf2+0x2a>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d01c      	beq.n	8000d24 <__gesf2+0x64>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d00c      	beq.n	8000d08 <__gesf2+0x48>
 8000cee:	4283      	cmp	r3, r0
 8000cf0:	d01c      	beq.n	8000d2c <__gesf2+0x6c>
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	1e58      	subs	r0, r3, #1
 8000cf6:	4008      	ands	r0, r1
 8000cf8:	3801      	subs	r0, #1
 8000cfa:	bd70      	pop	{r4, r5, r6, pc}
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d122      	bne.n	8000d46 <__gesf2+0x86>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	d1f4      	bne.n	8000cee <__gesf2+0x2e>
 8000d04:	2d00      	cmp	r5, #0
 8000d06:	d1f2      	bne.n	8000cee <__gesf2+0x2e>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d1f6      	bne.n	8000cfa <__gesf2+0x3a>
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4240      	negs	r0, r0
 8000d10:	e7f3      	b.n	8000cfa <__gesf2+0x3a>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d117      	bne.n	8000d46 <__gesf2+0x86>
 8000d16:	2cff      	cmp	r4, #255	; 0xff
 8000d18:	d0f0      	beq.n	8000cfc <__gesf2+0x3c>
 8000d1a:	2c00      	cmp	r4, #0
 8000d1c:	d1e7      	bne.n	8000cee <__gesf2+0x2e>
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d1e5      	bne.n	8000cee <__gesf2+0x2e>
 8000d22:	e7e6      	b.n	8000cf2 <__gesf2+0x32>
 8000d24:	2000      	movs	r0, #0
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e7      	beq.n	8000cfa <__gesf2+0x3a>
 8000d2a:	e7e2      	b.n	8000cf2 <__gesf2+0x32>
 8000d2c:	42a2      	cmp	r2, r4
 8000d2e:	dc05      	bgt.n	8000d3c <__gesf2+0x7c>
 8000d30:	dbea      	blt.n	8000d08 <__gesf2+0x48>
 8000d32:	42b5      	cmp	r5, r6
 8000d34:	d802      	bhi.n	8000d3c <__gesf2+0x7c>
 8000d36:	d3e7      	bcc.n	8000d08 <__gesf2+0x48>
 8000d38:	2000      	movs	r0, #0
 8000d3a:	e7de      	b.n	8000cfa <__gesf2+0x3a>
 8000d3c:	4243      	negs	r3, r0
 8000d3e:	4158      	adcs	r0, r3
 8000d40:	0040      	lsls	r0, r0, #1
 8000d42:	3801      	subs	r0, #1
 8000d44:	e7d9      	b.n	8000cfa <__gesf2+0x3a>
 8000d46:	2002      	movs	r0, #2
 8000d48:	4240      	negs	r0, r0
 8000d4a:	e7d6      	b.n	8000cfa <__gesf2+0x3a>

08000d4c <__lesf2>:
 8000d4c:	b570      	push	{r4, r5, r6, lr}
 8000d4e:	0042      	lsls	r2, r0, #1
 8000d50:	0245      	lsls	r5, r0, #9
 8000d52:	024e      	lsls	r6, r1, #9
 8000d54:	004c      	lsls	r4, r1, #1
 8000d56:	0fc3      	lsrs	r3, r0, #31
 8000d58:	0a6d      	lsrs	r5, r5, #9
 8000d5a:	0e12      	lsrs	r2, r2, #24
 8000d5c:	0a76      	lsrs	r6, r6, #9
 8000d5e:	0e24      	lsrs	r4, r4, #24
 8000d60:	0fc8      	lsrs	r0, r1, #31
 8000d62:	2aff      	cmp	r2, #255	; 0xff
 8000d64:	d00b      	beq.n	8000d7e <__lesf2+0x32>
 8000d66:	2cff      	cmp	r4, #255	; 0xff
 8000d68:	d00d      	beq.n	8000d86 <__lesf2+0x3a>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d11f      	bne.n	8000dae <__lesf2+0x62>
 8000d6e:	2c00      	cmp	r4, #0
 8000d70:	d116      	bne.n	8000da0 <__lesf2+0x54>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d114      	bne.n	8000da0 <__lesf2+0x54>
 8000d76:	2000      	movs	r0, #0
 8000d78:	2d00      	cmp	r5, #0
 8000d7a:	d010      	beq.n	8000d9e <__lesf2+0x52>
 8000d7c:	e009      	b.n	8000d92 <__lesf2+0x46>
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d10c      	bne.n	8000d9c <__lesf2+0x50>
 8000d82:	2cff      	cmp	r4, #255	; 0xff
 8000d84:	d113      	bne.n	8000dae <__lesf2+0x62>
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	d108      	bne.n	8000d9c <__lesf2+0x50>
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	d008      	beq.n	8000da0 <__lesf2+0x54>
 8000d8e:	4283      	cmp	r3, r0
 8000d90:	d012      	beq.n	8000db8 <__lesf2+0x6c>
 8000d92:	2102      	movs	r1, #2
 8000d94:	1e58      	subs	r0, r3, #1
 8000d96:	4008      	ands	r0, r1
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e000      	b.n	8000d9e <__lesf2+0x52>
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	bd70      	pop	{r4, r5, r6, pc}
 8000da0:	2d00      	cmp	r5, #0
 8000da2:	d1f4      	bne.n	8000d8e <__lesf2+0x42>
 8000da4:	2800      	cmp	r0, #0
 8000da6:	d1fa      	bne.n	8000d9e <__lesf2+0x52>
 8000da8:	2001      	movs	r0, #1
 8000daa:	4240      	negs	r0, r0
 8000dac:	e7f7      	b.n	8000d9e <__lesf2+0x52>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d1ed      	bne.n	8000d8e <__lesf2+0x42>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d1eb      	bne.n	8000d8e <__lesf2+0x42>
 8000db6:	e7ec      	b.n	8000d92 <__lesf2+0x46>
 8000db8:	42a2      	cmp	r2, r4
 8000dba:	dc05      	bgt.n	8000dc8 <__lesf2+0x7c>
 8000dbc:	dbf2      	blt.n	8000da4 <__lesf2+0x58>
 8000dbe:	42b5      	cmp	r5, r6
 8000dc0:	d802      	bhi.n	8000dc8 <__lesf2+0x7c>
 8000dc2:	d3ef      	bcc.n	8000da4 <__lesf2+0x58>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	e7ea      	b.n	8000d9e <__lesf2+0x52>
 8000dc8:	4243      	negs	r3, r0
 8000dca:	4158      	adcs	r0, r3
 8000dcc:	0040      	lsls	r0, r0, #1
 8000dce:	3801      	subs	r0, #1
 8000dd0:	e7e5      	b.n	8000d9e <__lesf2+0x52>
 8000dd2:	46c0      	nop			; (mov r8, r8)

08000dd4 <__aeabi_fmul>:
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	464f      	mov	r7, r9
 8000dd8:	4646      	mov	r6, r8
 8000dda:	46d6      	mov	lr, sl
 8000ddc:	0244      	lsls	r4, r0, #9
 8000dde:	0045      	lsls	r5, r0, #1
 8000de0:	b5c0      	push	{r6, r7, lr}
 8000de2:	0a64      	lsrs	r4, r4, #9
 8000de4:	1c0f      	adds	r7, r1, #0
 8000de6:	0e2d      	lsrs	r5, r5, #24
 8000de8:	0fc6      	lsrs	r6, r0, #31
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_fmul+0x1c>
 8000dee:	e08d      	b.n	8000f0c <__aeabi_fmul+0x138>
 8000df0:	2dff      	cmp	r5, #255	; 0xff
 8000df2:	d100      	bne.n	8000df6 <__aeabi_fmul+0x22>
 8000df4:	e092      	b.n	8000f1c <__aeabi_fmul+0x148>
 8000df6:	2300      	movs	r3, #0
 8000df8:	2080      	movs	r0, #128	; 0x80
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	469a      	mov	sl, r3
 8000dfe:	00e4      	lsls	r4, r4, #3
 8000e00:	04c0      	lsls	r0, r0, #19
 8000e02:	4304      	orrs	r4, r0
 8000e04:	3d7f      	subs	r5, #127	; 0x7f
 8000e06:	0278      	lsls	r0, r7, #9
 8000e08:	0a43      	lsrs	r3, r0, #9
 8000e0a:	4698      	mov	r8, r3
 8000e0c:	007b      	lsls	r3, r7, #1
 8000e0e:	0e1b      	lsrs	r3, r3, #24
 8000e10:	0fff      	lsrs	r7, r7, #31
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d100      	bne.n	8000e18 <__aeabi_fmul+0x44>
 8000e16:	e070      	b.n	8000efa <__aeabi_fmul+0x126>
 8000e18:	2bff      	cmp	r3, #255	; 0xff
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fmul+0x4a>
 8000e1c:	e086      	b.n	8000f2c <__aeabi_fmul+0x158>
 8000e1e:	4642      	mov	r2, r8
 8000e20:	00d0      	lsls	r0, r2, #3
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	3b7f      	subs	r3, #127	; 0x7f
 8000e26:	18ed      	adds	r5, r5, r3
 8000e28:	2300      	movs	r3, #0
 8000e2a:	04d2      	lsls	r2, r2, #19
 8000e2c:	4302      	orrs	r2, r0
 8000e2e:	4690      	mov	r8, r2
 8000e30:	469c      	mov	ip, r3
 8000e32:	0031      	movs	r1, r6
 8000e34:	464b      	mov	r3, r9
 8000e36:	4079      	eors	r1, r7
 8000e38:	1c68      	adds	r0, r5, #1
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	d81c      	bhi.n	8000e78 <__aeabi_fmul+0xa4>
 8000e3e:	4a76      	ldr	r2, [pc, #472]	; (8001018 <__aeabi_fmul+0x244>)
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	58d3      	ldr	r3, [r2, r3]
 8000e44:	469f      	mov	pc, r3
 8000e46:	0039      	movs	r1, r7
 8000e48:	4644      	mov	r4, r8
 8000e4a:	46e2      	mov	sl, ip
 8000e4c:	4653      	mov	r3, sl
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d00f      	beq.n	8000e72 <__aeabi_fmul+0x9e>
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fmul+0x84>
 8000e56:	e0d7      	b.n	8001008 <__aeabi_fmul+0x234>
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d137      	bne.n	8000ecc <__aeabi_fmul+0xf8>
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	2400      	movs	r4, #0
 8000e60:	05c0      	lsls	r0, r0, #23
 8000e62:	4320      	orrs	r0, r4
 8000e64:	07c9      	lsls	r1, r1, #31
 8000e66:	4308      	orrs	r0, r1
 8000e68:	bce0      	pop	{r5, r6, r7}
 8000e6a:	46ba      	mov	sl, r7
 8000e6c:	46b1      	mov	r9, r6
 8000e6e:	46a8      	mov	r8, r5
 8000e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e72:	20ff      	movs	r0, #255	; 0xff
 8000e74:	2400      	movs	r4, #0
 8000e76:	e7f3      	b.n	8000e60 <__aeabi_fmul+0x8c>
 8000e78:	0c26      	lsrs	r6, r4, #16
 8000e7a:	0424      	lsls	r4, r4, #16
 8000e7c:	0c22      	lsrs	r2, r4, #16
 8000e7e:	4644      	mov	r4, r8
 8000e80:	0424      	lsls	r4, r4, #16
 8000e82:	0c24      	lsrs	r4, r4, #16
 8000e84:	4643      	mov	r3, r8
 8000e86:	0027      	movs	r7, r4
 8000e88:	0c1b      	lsrs	r3, r3, #16
 8000e8a:	4357      	muls	r7, r2
 8000e8c:	4374      	muls	r4, r6
 8000e8e:	435a      	muls	r2, r3
 8000e90:	435e      	muls	r6, r3
 8000e92:	1912      	adds	r2, r2, r4
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	189b      	adds	r3, r3, r2
 8000e98:	429c      	cmp	r4, r3
 8000e9a:	d903      	bls.n	8000ea4 <__aeabi_fmul+0xd0>
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0252      	lsls	r2, r2, #9
 8000ea0:	4694      	mov	ip, r2
 8000ea2:	4466      	add	r6, ip
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	041a      	lsls	r2, r3, #16
 8000ea8:	0c3f      	lsrs	r7, r7, #16
 8000eaa:	19d2      	adds	r2, r2, r7
 8000eac:	0194      	lsls	r4, r2, #6
 8000eae:	1e67      	subs	r7, r4, #1
 8000eb0:	41bc      	sbcs	r4, r7
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	0e92      	lsrs	r2, r2, #26
 8000eb6:	199b      	adds	r3, r3, r6
 8000eb8:	4314      	orrs	r4, r2
 8000eba:	019b      	lsls	r3, r3, #6
 8000ebc:	431c      	orrs	r4, r3
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	d400      	bmi.n	8000ec4 <__aeabi_fmul+0xf0>
 8000ec2:	e09b      	b.n	8000ffc <__aeabi_fmul+0x228>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	0862      	lsrs	r2, r4, #1
 8000ec8:	401c      	ands	r4, r3
 8000eca:	4314      	orrs	r4, r2
 8000ecc:	0002      	movs	r2, r0
 8000ece:	327f      	adds	r2, #127	; 0x7f
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	dd64      	ble.n	8000f9e <__aeabi_fmul+0x1ca>
 8000ed4:	0763      	lsls	r3, r4, #29
 8000ed6:	d004      	beq.n	8000ee2 <__aeabi_fmul+0x10e>
 8000ed8:	230f      	movs	r3, #15
 8000eda:	4023      	ands	r3, r4
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d000      	beq.n	8000ee2 <__aeabi_fmul+0x10e>
 8000ee0:	3404      	adds	r4, #4
 8000ee2:	0123      	lsls	r3, r4, #4
 8000ee4:	d503      	bpl.n	8000eee <__aeabi_fmul+0x11a>
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	4b4c      	ldr	r3, [pc, #304]	; (800101c <__aeabi_fmul+0x248>)
 8000eea:	3280      	adds	r2, #128	; 0x80
 8000eec:	401c      	ands	r4, r3
 8000eee:	2afe      	cmp	r2, #254	; 0xfe
 8000ef0:	dcbf      	bgt.n	8000e72 <__aeabi_fmul+0x9e>
 8000ef2:	01a4      	lsls	r4, r4, #6
 8000ef4:	0a64      	lsrs	r4, r4, #9
 8000ef6:	b2d0      	uxtb	r0, r2
 8000ef8:	e7b2      	b.n	8000e60 <__aeabi_fmul+0x8c>
 8000efa:	4643      	mov	r3, r8
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d13d      	bne.n	8000f7c <__aeabi_fmul+0x1a8>
 8000f00:	464a      	mov	r2, r9
 8000f02:	3301      	adds	r3, #1
 8000f04:	431a      	orrs	r2, r3
 8000f06:	4691      	mov	r9, r2
 8000f08:	469c      	mov	ip, r3
 8000f0a:	e792      	b.n	8000e32 <__aeabi_fmul+0x5e>
 8000f0c:	2c00      	cmp	r4, #0
 8000f0e:	d129      	bne.n	8000f64 <__aeabi_fmul+0x190>
 8000f10:	2304      	movs	r3, #4
 8000f12:	4699      	mov	r9, r3
 8000f14:	3b03      	subs	r3, #3
 8000f16:	2500      	movs	r5, #0
 8000f18:	469a      	mov	sl, r3
 8000f1a:	e774      	b.n	8000e06 <__aeabi_fmul+0x32>
 8000f1c:	2c00      	cmp	r4, #0
 8000f1e:	d11b      	bne.n	8000f58 <__aeabi_fmul+0x184>
 8000f20:	2308      	movs	r3, #8
 8000f22:	4699      	mov	r9, r3
 8000f24:	3b06      	subs	r3, #6
 8000f26:	25ff      	movs	r5, #255	; 0xff
 8000f28:	469a      	mov	sl, r3
 8000f2a:	e76c      	b.n	8000e06 <__aeabi_fmul+0x32>
 8000f2c:	4643      	mov	r3, r8
 8000f2e:	35ff      	adds	r5, #255	; 0xff
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10b      	bne.n	8000f4c <__aeabi_fmul+0x178>
 8000f34:	2302      	movs	r3, #2
 8000f36:	464a      	mov	r2, r9
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	4691      	mov	r9, r2
 8000f3c:	469c      	mov	ip, r3
 8000f3e:	e778      	b.n	8000e32 <__aeabi_fmul+0x5e>
 8000f40:	4653      	mov	r3, sl
 8000f42:	0031      	movs	r1, r6
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d000      	beq.n	8000f4a <__aeabi_fmul+0x176>
 8000f48:	e783      	b.n	8000e52 <__aeabi_fmul+0x7e>
 8000f4a:	e792      	b.n	8000e72 <__aeabi_fmul+0x9e>
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	464a      	mov	r2, r9
 8000f50:	431a      	orrs	r2, r3
 8000f52:	4691      	mov	r9, r2
 8000f54:	469c      	mov	ip, r3
 8000f56:	e76c      	b.n	8000e32 <__aeabi_fmul+0x5e>
 8000f58:	230c      	movs	r3, #12
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	3b09      	subs	r3, #9
 8000f5e:	25ff      	movs	r5, #255	; 0xff
 8000f60:	469a      	mov	sl, r3
 8000f62:	e750      	b.n	8000e06 <__aeabi_fmul+0x32>
 8000f64:	0020      	movs	r0, r4
 8000f66:	f002 f94f 	bl	8003208 <__clzsi2>
 8000f6a:	2576      	movs	r5, #118	; 0x76
 8000f6c:	1f43      	subs	r3, r0, #5
 8000f6e:	409c      	lsls	r4, r3
 8000f70:	2300      	movs	r3, #0
 8000f72:	426d      	negs	r5, r5
 8000f74:	4699      	mov	r9, r3
 8000f76:	469a      	mov	sl, r3
 8000f78:	1a2d      	subs	r5, r5, r0
 8000f7a:	e744      	b.n	8000e06 <__aeabi_fmul+0x32>
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	f002 f943 	bl	8003208 <__clzsi2>
 8000f82:	4642      	mov	r2, r8
 8000f84:	1f43      	subs	r3, r0, #5
 8000f86:	409a      	lsls	r2, r3
 8000f88:	2300      	movs	r3, #0
 8000f8a:	1a2d      	subs	r5, r5, r0
 8000f8c:	4690      	mov	r8, r2
 8000f8e:	469c      	mov	ip, r3
 8000f90:	3d76      	subs	r5, #118	; 0x76
 8000f92:	e74e      	b.n	8000e32 <__aeabi_fmul+0x5e>
 8000f94:	2480      	movs	r4, #128	; 0x80
 8000f96:	2100      	movs	r1, #0
 8000f98:	20ff      	movs	r0, #255	; 0xff
 8000f9a:	03e4      	lsls	r4, r4, #15
 8000f9c:	e760      	b.n	8000e60 <__aeabi_fmul+0x8c>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	1a9b      	subs	r3, r3, r2
 8000fa2:	2b1b      	cmp	r3, #27
 8000fa4:	dd00      	ble.n	8000fa8 <__aeabi_fmul+0x1d4>
 8000fa6:	e759      	b.n	8000e5c <__aeabi_fmul+0x88>
 8000fa8:	0022      	movs	r2, r4
 8000faa:	309e      	adds	r0, #158	; 0x9e
 8000fac:	40da      	lsrs	r2, r3
 8000fae:	4084      	lsls	r4, r0
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	1e62      	subs	r2, r4, #1
 8000fb4:	4194      	sbcs	r4, r2
 8000fb6:	431c      	orrs	r4, r3
 8000fb8:	0763      	lsls	r3, r4, #29
 8000fba:	d004      	beq.n	8000fc6 <__aeabi_fmul+0x1f2>
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	4023      	ands	r3, r4
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fmul+0x1f2>
 8000fc4:	3404      	adds	r4, #4
 8000fc6:	0163      	lsls	r3, r4, #5
 8000fc8:	d51a      	bpl.n	8001000 <__aeabi_fmul+0x22c>
 8000fca:	2001      	movs	r0, #1
 8000fcc:	2400      	movs	r4, #0
 8000fce:	e747      	b.n	8000e60 <__aeabi_fmul+0x8c>
 8000fd0:	2080      	movs	r0, #128	; 0x80
 8000fd2:	03c0      	lsls	r0, r0, #15
 8000fd4:	4204      	tst	r4, r0
 8000fd6:	d009      	beq.n	8000fec <__aeabi_fmul+0x218>
 8000fd8:	4643      	mov	r3, r8
 8000fda:	4203      	tst	r3, r0
 8000fdc:	d106      	bne.n	8000fec <__aeabi_fmul+0x218>
 8000fde:	4644      	mov	r4, r8
 8000fe0:	4304      	orrs	r4, r0
 8000fe2:	0264      	lsls	r4, r4, #9
 8000fe4:	0039      	movs	r1, r7
 8000fe6:	20ff      	movs	r0, #255	; 0xff
 8000fe8:	0a64      	lsrs	r4, r4, #9
 8000fea:	e739      	b.n	8000e60 <__aeabi_fmul+0x8c>
 8000fec:	2080      	movs	r0, #128	; 0x80
 8000fee:	03c0      	lsls	r0, r0, #15
 8000ff0:	4304      	orrs	r4, r0
 8000ff2:	0264      	lsls	r4, r4, #9
 8000ff4:	0031      	movs	r1, r6
 8000ff6:	20ff      	movs	r0, #255	; 0xff
 8000ff8:	0a64      	lsrs	r4, r4, #9
 8000ffa:	e731      	b.n	8000e60 <__aeabi_fmul+0x8c>
 8000ffc:	0028      	movs	r0, r5
 8000ffe:	e765      	b.n	8000ecc <__aeabi_fmul+0xf8>
 8001000:	01a4      	lsls	r4, r4, #6
 8001002:	2000      	movs	r0, #0
 8001004:	0a64      	lsrs	r4, r4, #9
 8001006:	e72b      	b.n	8000e60 <__aeabi_fmul+0x8c>
 8001008:	2080      	movs	r0, #128	; 0x80
 800100a:	03c0      	lsls	r0, r0, #15
 800100c:	4304      	orrs	r4, r0
 800100e:	0264      	lsls	r4, r4, #9
 8001010:	20ff      	movs	r0, #255	; 0xff
 8001012:	0a64      	lsrs	r4, r4, #9
 8001014:	e724      	b.n	8000e60 <__aeabi_fmul+0x8c>
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	0800f854 	.word	0x0800f854
 800101c:	f7ffffff 	.word	0xf7ffffff

08001020 <__aeabi_fsub>:
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001022:	46ce      	mov	lr, r9
 8001024:	4647      	mov	r7, r8
 8001026:	0243      	lsls	r3, r0, #9
 8001028:	0a5b      	lsrs	r3, r3, #9
 800102a:	024e      	lsls	r6, r1, #9
 800102c:	00da      	lsls	r2, r3, #3
 800102e:	4694      	mov	ip, r2
 8001030:	0a72      	lsrs	r2, r6, #9
 8001032:	4691      	mov	r9, r2
 8001034:	0045      	lsls	r5, r0, #1
 8001036:	004a      	lsls	r2, r1, #1
 8001038:	b580      	push	{r7, lr}
 800103a:	0e2d      	lsrs	r5, r5, #24
 800103c:	001f      	movs	r7, r3
 800103e:	0fc4      	lsrs	r4, r0, #31
 8001040:	0e12      	lsrs	r2, r2, #24
 8001042:	0fc9      	lsrs	r1, r1, #31
 8001044:	09b6      	lsrs	r6, r6, #6
 8001046:	2aff      	cmp	r2, #255	; 0xff
 8001048:	d05b      	beq.n	8001102 <__aeabi_fsub+0xe2>
 800104a:	2001      	movs	r0, #1
 800104c:	4041      	eors	r1, r0
 800104e:	428c      	cmp	r4, r1
 8001050:	d039      	beq.n	80010c6 <__aeabi_fsub+0xa6>
 8001052:	1aa8      	subs	r0, r5, r2
 8001054:	2800      	cmp	r0, #0
 8001056:	dd5a      	ble.n	800110e <__aeabi_fsub+0xee>
 8001058:	2a00      	cmp	r2, #0
 800105a:	d06a      	beq.n	8001132 <__aeabi_fsub+0x112>
 800105c:	2dff      	cmp	r5, #255	; 0xff
 800105e:	d100      	bne.n	8001062 <__aeabi_fsub+0x42>
 8001060:	e0d9      	b.n	8001216 <__aeabi_fsub+0x1f6>
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	04d2      	lsls	r2, r2, #19
 8001066:	4316      	orrs	r6, r2
 8001068:	281b      	cmp	r0, #27
 800106a:	dc00      	bgt.n	800106e <__aeabi_fsub+0x4e>
 800106c:	e0e9      	b.n	8001242 <__aeabi_fsub+0x222>
 800106e:	2001      	movs	r0, #1
 8001070:	4663      	mov	r3, ip
 8001072:	1a18      	subs	r0, r3, r0
 8001074:	0143      	lsls	r3, r0, #5
 8001076:	d400      	bmi.n	800107a <__aeabi_fsub+0x5a>
 8001078:	e0b4      	b.n	80011e4 <__aeabi_fsub+0x1c4>
 800107a:	0180      	lsls	r0, r0, #6
 800107c:	0987      	lsrs	r7, r0, #6
 800107e:	0038      	movs	r0, r7
 8001080:	f002 f8c2 	bl	8003208 <__clzsi2>
 8001084:	3805      	subs	r0, #5
 8001086:	4087      	lsls	r7, r0
 8001088:	4285      	cmp	r5, r0
 800108a:	dc00      	bgt.n	800108e <__aeabi_fsub+0x6e>
 800108c:	e0cc      	b.n	8001228 <__aeabi_fsub+0x208>
 800108e:	1a2d      	subs	r5, r5, r0
 8001090:	48b5      	ldr	r0, [pc, #724]	; (8001368 <__aeabi_fsub+0x348>)
 8001092:	4038      	ands	r0, r7
 8001094:	0743      	lsls	r3, r0, #29
 8001096:	d004      	beq.n	80010a2 <__aeabi_fsub+0x82>
 8001098:	230f      	movs	r3, #15
 800109a:	4003      	ands	r3, r0
 800109c:	2b04      	cmp	r3, #4
 800109e:	d000      	beq.n	80010a2 <__aeabi_fsub+0x82>
 80010a0:	3004      	adds	r0, #4
 80010a2:	0143      	lsls	r3, r0, #5
 80010a4:	d400      	bmi.n	80010a8 <__aeabi_fsub+0x88>
 80010a6:	e0a0      	b.n	80011ea <__aeabi_fsub+0x1ca>
 80010a8:	1c6a      	adds	r2, r5, #1
 80010aa:	2dfe      	cmp	r5, #254	; 0xfe
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0x90>
 80010ae:	e08d      	b.n	80011cc <__aeabi_fsub+0x1ac>
 80010b0:	0180      	lsls	r0, r0, #6
 80010b2:	0a47      	lsrs	r7, r0, #9
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	05d0      	lsls	r0, r2, #23
 80010b8:	4338      	orrs	r0, r7
 80010ba:	07e4      	lsls	r4, r4, #31
 80010bc:	4320      	orrs	r0, r4
 80010be:	bcc0      	pop	{r6, r7}
 80010c0:	46b9      	mov	r9, r7
 80010c2:	46b0      	mov	r8, r6
 80010c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010c6:	1aa8      	subs	r0, r5, r2
 80010c8:	4680      	mov	r8, r0
 80010ca:	2800      	cmp	r0, #0
 80010cc:	dd45      	ble.n	800115a <__aeabi_fsub+0x13a>
 80010ce:	2a00      	cmp	r2, #0
 80010d0:	d070      	beq.n	80011b4 <__aeabi_fsub+0x194>
 80010d2:	2dff      	cmp	r5, #255	; 0xff
 80010d4:	d100      	bne.n	80010d8 <__aeabi_fsub+0xb8>
 80010d6:	e09e      	b.n	8001216 <__aeabi_fsub+0x1f6>
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	04db      	lsls	r3, r3, #19
 80010dc:	431e      	orrs	r6, r3
 80010de:	4643      	mov	r3, r8
 80010e0:	2b1b      	cmp	r3, #27
 80010e2:	dc00      	bgt.n	80010e6 <__aeabi_fsub+0xc6>
 80010e4:	e0d2      	b.n	800128c <__aeabi_fsub+0x26c>
 80010e6:	2001      	movs	r0, #1
 80010e8:	4460      	add	r0, ip
 80010ea:	0143      	lsls	r3, r0, #5
 80010ec:	d57a      	bpl.n	80011e4 <__aeabi_fsub+0x1c4>
 80010ee:	3501      	adds	r5, #1
 80010f0:	2dff      	cmp	r5, #255	; 0xff
 80010f2:	d06b      	beq.n	80011cc <__aeabi_fsub+0x1ac>
 80010f4:	2301      	movs	r3, #1
 80010f6:	4a9d      	ldr	r2, [pc, #628]	; (800136c <__aeabi_fsub+0x34c>)
 80010f8:	4003      	ands	r3, r0
 80010fa:	0840      	lsrs	r0, r0, #1
 80010fc:	4010      	ands	r0, r2
 80010fe:	4318      	orrs	r0, r3
 8001100:	e7c8      	b.n	8001094 <__aeabi_fsub+0x74>
 8001102:	2e00      	cmp	r6, #0
 8001104:	d020      	beq.n	8001148 <__aeabi_fsub+0x128>
 8001106:	428c      	cmp	r4, r1
 8001108:	d023      	beq.n	8001152 <__aeabi_fsub+0x132>
 800110a:	0028      	movs	r0, r5
 800110c:	38ff      	subs	r0, #255	; 0xff
 800110e:	2800      	cmp	r0, #0
 8001110:	d039      	beq.n	8001186 <__aeabi_fsub+0x166>
 8001112:	1b57      	subs	r7, r2, r5
 8001114:	2d00      	cmp	r5, #0
 8001116:	d000      	beq.n	800111a <__aeabi_fsub+0xfa>
 8001118:	e09d      	b.n	8001256 <__aeabi_fsub+0x236>
 800111a:	4663      	mov	r3, ip
 800111c:	2b00      	cmp	r3, #0
 800111e:	d100      	bne.n	8001122 <__aeabi_fsub+0x102>
 8001120:	e0db      	b.n	80012da <__aeabi_fsub+0x2ba>
 8001122:	1e7b      	subs	r3, r7, #1
 8001124:	2f01      	cmp	r7, #1
 8001126:	d100      	bne.n	800112a <__aeabi_fsub+0x10a>
 8001128:	e10d      	b.n	8001346 <__aeabi_fsub+0x326>
 800112a:	2fff      	cmp	r7, #255	; 0xff
 800112c:	d071      	beq.n	8001212 <__aeabi_fsub+0x1f2>
 800112e:	001f      	movs	r7, r3
 8001130:	e098      	b.n	8001264 <__aeabi_fsub+0x244>
 8001132:	2e00      	cmp	r6, #0
 8001134:	d100      	bne.n	8001138 <__aeabi_fsub+0x118>
 8001136:	e0a7      	b.n	8001288 <__aeabi_fsub+0x268>
 8001138:	1e42      	subs	r2, r0, #1
 800113a:	2801      	cmp	r0, #1
 800113c:	d100      	bne.n	8001140 <__aeabi_fsub+0x120>
 800113e:	e0e6      	b.n	800130e <__aeabi_fsub+0x2ee>
 8001140:	28ff      	cmp	r0, #255	; 0xff
 8001142:	d068      	beq.n	8001216 <__aeabi_fsub+0x1f6>
 8001144:	0010      	movs	r0, r2
 8001146:	e78f      	b.n	8001068 <__aeabi_fsub+0x48>
 8001148:	2001      	movs	r0, #1
 800114a:	4041      	eors	r1, r0
 800114c:	42a1      	cmp	r1, r4
 800114e:	d000      	beq.n	8001152 <__aeabi_fsub+0x132>
 8001150:	e77f      	b.n	8001052 <__aeabi_fsub+0x32>
 8001152:	20ff      	movs	r0, #255	; 0xff
 8001154:	4240      	negs	r0, r0
 8001156:	4680      	mov	r8, r0
 8001158:	44a8      	add	r8, r5
 800115a:	4640      	mov	r0, r8
 800115c:	2800      	cmp	r0, #0
 800115e:	d038      	beq.n	80011d2 <__aeabi_fsub+0x1b2>
 8001160:	1b51      	subs	r1, r2, r5
 8001162:	2d00      	cmp	r5, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_fsub+0x148>
 8001166:	e0ae      	b.n	80012c6 <__aeabi_fsub+0x2a6>
 8001168:	2aff      	cmp	r2, #255	; 0xff
 800116a:	d100      	bne.n	800116e <__aeabi_fsub+0x14e>
 800116c:	e0df      	b.n	800132e <__aeabi_fsub+0x30e>
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	4660      	mov	r0, ip
 8001172:	04db      	lsls	r3, r3, #19
 8001174:	4318      	orrs	r0, r3
 8001176:	4684      	mov	ip, r0
 8001178:	291b      	cmp	r1, #27
 800117a:	dc00      	bgt.n	800117e <__aeabi_fsub+0x15e>
 800117c:	e0d9      	b.n	8001332 <__aeabi_fsub+0x312>
 800117e:	2001      	movs	r0, #1
 8001180:	0015      	movs	r5, r2
 8001182:	1980      	adds	r0, r0, r6
 8001184:	e7b1      	b.n	80010ea <__aeabi_fsub+0xca>
 8001186:	20fe      	movs	r0, #254	; 0xfe
 8001188:	1c6a      	adds	r2, r5, #1
 800118a:	4210      	tst	r0, r2
 800118c:	d171      	bne.n	8001272 <__aeabi_fsub+0x252>
 800118e:	2d00      	cmp	r5, #0
 8001190:	d000      	beq.n	8001194 <__aeabi_fsub+0x174>
 8001192:	e0a6      	b.n	80012e2 <__aeabi_fsub+0x2c2>
 8001194:	4663      	mov	r3, ip
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <__aeabi_fsub+0x17c>
 800119a:	e0d9      	b.n	8001350 <__aeabi_fsub+0x330>
 800119c:	2200      	movs	r2, #0
 800119e:	2e00      	cmp	r6, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x184>
 80011a2:	e788      	b.n	80010b6 <__aeabi_fsub+0x96>
 80011a4:	1b98      	subs	r0, r3, r6
 80011a6:	0143      	lsls	r3, r0, #5
 80011a8:	d400      	bmi.n	80011ac <__aeabi_fsub+0x18c>
 80011aa:	e0e1      	b.n	8001370 <__aeabi_fsub+0x350>
 80011ac:	4663      	mov	r3, ip
 80011ae:	000c      	movs	r4, r1
 80011b0:	1af0      	subs	r0, r6, r3
 80011b2:	e76f      	b.n	8001094 <__aeabi_fsub+0x74>
 80011b4:	2e00      	cmp	r6, #0
 80011b6:	d100      	bne.n	80011ba <__aeabi_fsub+0x19a>
 80011b8:	e0b7      	b.n	800132a <__aeabi_fsub+0x30a>
 80011ba:	0002      	movs	r2, r0
 80011bc:	3a01      	subs	r2, #1
 80011be:	2801      	cmp	r0, #1
 80011c0:	d100      	bne.n	80011c4 <__aeabi_fsub+0x1a4>
 80011c2:	e09c      	b.n	80012fe <__aeabi_fsub+0x2de>
 80011c4:	28ff      	cmp	r0, #255	; 0xff
 80011c6:	d026      	beq.n	8001216 <__aeabi_fsub+0x1f6>
 80011c8:	4690      	mov	r8, r2
 80011ca:	e788      	b.n	80010de <__aeabi_fsub+0xbe>
 80011cc:	22ff      	movs	r2, #255	; 0xff
 80011ce:	2700      	movs	r7, #0
 80011d0:	e771      	b.n	80010b6 <__aeabi_fsub+0x96>
 80011d2:	20fe      	movs	r0, #254	; 0xfe
 80011d4:	1c6a      	adds	r2, r5, #1
 80011d6:	4210      	tst	r0, r2
 80011d8:	d064      	beq.n	80012a4 <__aeabi_fsub+0x284>
 80011da:	2aff      	cmp	r2, #255	; 0xff
 80011dc:	d0f6      	beq.n	80011cc <__aeabi_fsub+0x1ac>
 80011de:	0015      	movs	r5, r2
 80011e0:	4466      	add	r6, ip
 80011e2:	0870      	lsrs	r0, r6, #1
 80011e4:	0743      	lsls	r3, r0, #29
 80011e6:	d000      	beq.n	80011ea <__aeabi_fsub+0x1ca>
 80011e8:	e756      	b.n	8001098 <__aeabi_fsub+0x78>
 80011ea:	08c3      	lsrs	r3, r0, #3
 80011ec:	2dff      	cmp	r5, #255	; 0xff
 80011ee:	d012      	beq.n	8001216 <__aeabi_fsub+0x1f6>
 80011f0:	025b      	lsls	r3, r3, #9
 80011f2:	0a5f      	lsrs	r7, r3, #9
 80011f4:	b2ea      	uxtb	r2, r5
 80011f6:	e75e      	b.n	80010b6 <__aeabi_fsub+0x96>
 80011f8:	4662      	mov	r2, ip
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d100      	bne.n	8001200 <__aeabi_fsub+0x1e0>
 80011fe:	e096      	b.n	800132e <__aeabi_fsub+0x30e>
 8001200:	2e00      	cmp	r6, #0
 8001202:	d008      	beq.n	8001216 <__aeabi_fsub+0x1f6>
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	03d2      	lsls	r2, r2, #15
 8001208:	4213      	tst	r3, r2
 800120a:	d004      	beq.n	8001216 <__aeabi_fsub+0x1f6>
 800120c:	4648      	mov	r0, r9
 800120e:	4210      	tst	r0, r2
 8001210:	d101      	bne.n	8001216 <__aeabi_fsub+0x1f6>
 8001212:	000c      	movs	r4, r1
 8001214:	464b      	mov	r3, r9
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0d8      	beq.n	80011cc <__aeabi_fsub+0x1ac>
 800121a:	2780      	movs	r7, #128	; 0x80
 800121c:	03ff      	lsls	r7, r7, #15
 800121e:	431f      	orrs	r7, r3
 8001220:	027f      	lsls	r7, r7, #9
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	0a7f      	lsrs	r7, r7, #9
 8001226:	e746      	b.n	80010b6 <__aeabi_fsub+0x96>
 8001228:	2320      	movs	r3, #32
 800122a:	003a      	movs	r2, r7
 800122c:	1b45      	subs	r5, r0, r5
 800122e:	0038      	movs	r0, r7
 8001230:	3501      	adds	r5, #1
 8001232:	40ea      	lsrs	r2, r5
 8001234:	1b5d      	subs	r5, r3, r5
 8001236:	40a8      	lsls	r0, r5
 8001238:	1e43      	subs	r3, r0, #1
 800123a:	4198      	sbcs	r0, r3
 800123c:	2500      	movs	r5, #0
 800123e:	4310      	orrs	r0, r2
 8001240:	e728      	b.n	8001094 <__aeabi_fsub+0x74>
 8001242:	2320      	movs	r3, #32
 8001244:	1a1b      	subs	r3, r3, r0
 8001246:	0032      	movs	r2, r6
 8001248:	409e      	lsls	r6, r3
 800124a:	40c2      	lsrs	r2, r0
 800124c:	0030      	movs	r0, r6
 800124e:	1e43      	subs	r3, r0, #1
 8001250:	4198      	sbcs	r0, r3
 8001252:	4310      	orrs	r0, r2
 8001254:	e70c      	b.n	8001070 <__aeabi_fsub+0x50>
 8001256:	2aff      	cmp	r2, #255	; 0xff
 8001258:	d0db      	beq.n	8001212 <__aeabi_fsub+0x1f2>
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	4660      	mov	r0, ip
 800125e:	04db      	lsls	r3, r3, #19
 8001260:	4318      	orrs	r0, r3
 8001262:	4684      	mov	ip, r0
 8001264:	2f1b      	cmp	r7, #27
 8001266:	dd56      	ble.n	8001316 <__aeabi_fsub+0x2f6>
 8001268:	2001      	movs	r0, #1
 800126a:	000c      	movs	r4, r1
 800126c:	0015      	movs	r5, r2
 800126e:	1a30      	subs	r0, r6, r0
 8001270:	e700      	b.n	8001074 <__aeabi_fsub+0x54>
 8001272:	4663      	mov	r3, ip
 8001274:	1b9f      	subs	r7, r3, r6
 8001276:	017b      	lsls	r3, r7, #5
 8001278:	d43d      	bmi.n	80012f6 <__aeabi_fsub+0x2d6>
 800127a:	2f00      	cmp	r7, #0
 800127c:	d000      	beq.n	8001280 <__aeabi_fsub+0x260>
 800127e:	e6fe      	b.n	800107e <__aeabi_fsub+0x5e>
 8001280:	2400      	movs	r4, #0
 8001282:	2200      	movs	r2, #0
 8001284:	2700      	movs	r7, #0
 8001286:	e716      	b.n	80010b6 <__aeabi_fsub+0x96>
 8001288:	0005      	movs	r5, r0
 800128a:	e7af      	b.n	80011ec <__aeabi_fsub+0x1cc>
 800128c:	0032      	movs	r2, r6
 800128e:	4643      	mov	r3, r8
 8001290:	4641      	mov	r1, r8
 8001292:	40da      	lsrs	r2, r3
 8001294:	2320      	movs	r3, #32
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	409e      	lsls	r6, r3
 800129a:	0030      	movs	r0, r6
 800129c:	1e43      	subs	r3, r0, #1
 800129e:	4198      	sbcs	r0, r3
 80012a0:	4310      	orrs	r0, r2
 80012a2:	e721      	b.n	80010e8 <__aeabi_fsub+0xc8>
 80012a4:	2d00      	cmp	r5, #0
 80012a6:	d1a7      	bne.n	80011f8 <__aeabi_fsub+0x1d8>
 80012a8:	4663      	mov	r3, ip
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d059      	beq.n	8001362 <__aeabi_fsub+0x342>
 80012ae:	2200      	movs	r2, #0
 80012b0:	2e00      	cmp	r6, #0
 80012b2:	d100      	bne.n	80012b6 <__aeabi_fsub+0x296>
 80012b4:	e6ff      	b.n	80010b6 <__aeabi_fsub+0x96>
 80012b6:	0030      	movs	r0, r6
 80012b8:	4460      	add	r0, ip
 80012ba:	0143      	lsls	r3, r0, #5
 80012bc:	d592      	bpl.n	80011e4 <__aeabi_fsub+0x1c4>
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <__aeabi_fsub+0x348>)
 80012c0:	3501      	adds	r5, #1
 80012c2:	4018      	ands	r0, r3
 80012c4:	e78e      	b.n	80011e4 <__aeabi_fsub+0x1c4>
 80012c6:	4663      	mov	r3, ip
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d047      	beq.n	800135c <__aeabi_fsub+0x33c>
 80012cc:	1e4b      	subs	r3, r1, #1
 80012ce:	2901      	cmp	r1, #1
 80012d0:	d015      	beq.n	80012fe <__aeabi_fsub+0x2de>
 80012d2:	29ff      	cmp	r1, #255	; 0xff
 80012d4:	d02b      	beq.n	800132e <__aeabi_fsub+0x30e>
 80012d6:	0019      	movs	r1, r3
 80012d8:	e74e      	b.n	8001178 <__aeabi_fsub+0x158>
 80012da:	000c      	movs	r4, r1
 80012dc:	464b      	mov	r3, r9
 80012de:	003d      	movs	r5, r7
 80012e0:	e784      	b.n	80011ec <__aeabi_fsub+0x1cc>
 80012e2:	4662      	mov	r2, ip
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d18b      	bne.n	8001200 <__aeabi_fsub+0x1e0>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d192      	bne.n	8001212 <__aeabi_fsub+0x1f2>
 80012ec:	2780      	movs	r7, #128	; 0x80
 80012ee:	2400      	movs	r4, #0
 80012f0:	22ff      	movs	r2, #255	; 0xff
 80012f2:	03ff      	lsls	r7, r7, #15
 80012f4:	e6df      	b.n	80010b6 <__aeabi_fsub+0x96>
 80012f6:	4663      	mov	r3, ip
 80012f8:	000c      	movs	r4, r1
 80012fa:	1af7      	subs	r7, r6, r3
 80012fc:	e6bf      	b.n	800107e <__aeabi_fsub+0x5e>
 80012fe:	0030      	movs	r0, r6
 8001300:	4460      	add	r0, ip
 8001302:	2501      	movs	r5, #1
 8001304:	0143      	lsls	r3, r0, #5
 8001306:	d400      	bmi.n	800130a <__aeabi_fsub+0x2ea>
 8001308:	e76c      	b.n	80011e4 <__aeabi_fsub+0x1c4>
 800130a:	2502      	movs	r5, #2
 800130c:	e6f2      	b.n	80010f4 <__aeabi_fsub+0xd4>
 800130e:	4663      	mov	r3, ip
 8001310:	2501      	movs	r5, #1
 8001312:	1b98      	subs	r0, r3, r6
 8001314:	e6ae      	b.n	8001074 <__aeabi_fsub+0x54>
 8001316:	2320      	movs	r3, #32
 8001318:	4664      	mov	r4, ip
 800131a:	4660      	mov	r0, ip
 800131c:	40fc      	lsrs	r4, r7
 800131e:	1bdf      	subs	r7, r3, r7
 8001320:	40b8      	lsls	r0, r7
 8001322:	1e43      	subs	r3, r0, #1
 8001324:	4198      	sbcs	r0, r3
 8001326:	4320      	orrs	r0, r4
 8001328:	e79f      	b.n	800126a <__aeabi_fsub+0x24a>
 800132a:	0005      	movs	r5, r0
 800132c:	e75e      	b.n	80011ec <__aeabi_fsub+0x1cc>
 800132e:	464b      	mov	r3, r9
 8001330:	e771      	b.n	8001216 <__aeabi_fsub+0x1f6>
 8001332:	2320      	movs	r3, #32
 8001334:	4665      	mov	r5, ip
 8001336:	4660      	mov	r0, ip
 8001338:	40cd      	lsrs	r5, r1
 800133a:	1a59      	subs	r1, r3, r1
 800133c:	4088      	lsls	r0, r1
 800133e:	1e43      	subs	r3, r0, #1
 8001340:	4198      	sbcs	r0, r3
 8001342:	4328      	orrs	r0, r5
 8001344:	e71c      	b.n	8001180 <__aeabi_fsub+0x160>
 8001346:	4663      	mov	r3, ip
 8001348:	000c      	movs	r4, r1
 800134a:	2501      	movs	r5, #1
 800134c:	1af0      	subs	r0, r6, r3
 800134e:	e691      	b.n	8001074 <__aeabi_fsub+0x54>
 8001350:	2e00      	cmp	r6, #0
 8001352:	d095      	beq.n	8001280 <__aeabi_fsub+0x260>
 8001354:	000c      	movs	r4, r1
 8001356:	464f      	mov	r7, r9
 8001358:	2200      	movs	r2, #0
 800135a:	e6ac      	b.n	80010b6 <__aeabi_fsub+0x96>
 800135c:	464b      	mov	r3, r9
 800135e:	000d      	movs	r5, r1
 8001360:	e744      	b.n	80011ec <__aeabi_fsub+0x1cc>
 8001362:	464f      	mov	r7, r9
 8001364:	2200      	movs	r2, #0
 8001366:	e6a6      	b.n	80010b6 <__aeabi_fsub+0x96>
 8001368:	fbffffff 	.word	0xfbffffff
 800136c:	7dffffff 	.word	0x7dffffff
 8001370:	2800      	cmp	r0, #0
 8001372:	d000      	beq.n	8001376 <__aeabi_fsub+0x356>
 8001374:	e736      	b.n	80011e4 <__aeabi_fsub+0x1c4>
 8001376:	2400      	movs	r4, #0
 8001378:	2700      	movs	r7, #0
 800137a:	e69c      	b.n	80010b6 <__aeabi_fsub+0x96>

0800137c <__aeabi_i2f>:
 800137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137e:	2800      	cmp	r0, #0
 8001380:	d013      	beq.n	80013aa <__aeabi_i2f+0x2e>
 8001382:	17c3      	asrs	r3, r0, #31
 8001384:	18c6      	adds	r6, r0, r3
 8001386:	405e      	eors	r6, r3
 8001388:	0fc4      	lsrs	r4, r0, #31
 800138a:	0030      	movs	r0, r6
 800138c:	f001 ff3c 	bl	8003208 <__clzsi2>
 8001390:	239e      	movs	r3, #158	; 0x9e
 8001392:	0005      	movs	r5, r0
 8001394:	1a1b      	subs	r3, r3, r0
 8001396:	2b96      	cmp	r3, #150	; 0x96
 8001398:	dc0f      	bgt.n	80013ba <__aeabi_i2f+0x3e>
 800139a:	2808      	cmp	r0, #8
 800139c:	dd01      	ble.n	80013a2 <__aeabi_i2f+0x26>
 800139e:	3d08      	subs	r5, #8
 80013a0:	40ae      	lsls	r6, r5
 80013a2:	0276      	lsls	r6, r6, #9
 80013a4:	0a76      	lsrs	r6, r6, #9
 80013a6:	b2d8      	uxtb	r0, r3
 80013a8:	e002      	b.n	80013b0 <__aeabi_i2f+0x34>
 80013aa:	2400      	movs	r4, #0
 80013ac:	2000      	movs	r0, #0
 80013ae:	2600      	movs	r6, #0
 80013b0:	05c0      	lsls	r0, r0, #23
 80013b2:	4330      	orrs	r0, r6
 80013b4:	07e4      	lsls	r4, r4, #31
 80013b6:	4320      	orrs	r0, r4
 80013b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013ba:	2b99      	cmp	r3, #153	; 0x99
 80013bc:	dd0c      	ble.n	80013d8 <__aeabi_i2f+0x5c>
 80013be:	2205      	movs	r2, #5
 80013c0:	0031      	movs	r1, r6
 80013c2:	1a12      	subs	r2, r2, r0
 80013c4:	40d1      	lsrs	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	0001      	movs	r1, r0
 80013ca:	0030      	movs	r0, r6
 80013cc:	311b      	adds	r1, #27
 80013ce:	4088      	lsls	r0, r1
 80013d0:	1e41      	subs	r1, r0, #1
 80013d2:	4188      	sbcs	r0, r1
 80013d4:	4302      	orrs	r2, r0
 80013d6:	0016      	movs	r6, r2
 80013d8:	2d05      	cmp	r5, #5
 80013da:	dc12      	bgt.n	8001402 <__aeabi_i2f+0x86>
 80013dc:	0031      	movs	r1, r6
 80013de:	4f0d      	ldr	r7, [pc, #52]	; (8001414 <__aeabi_i2f+0x98>)
 80013e0:	4039      	ands	r1, r7
 80013e2:	0772      	lsls	r2, r6, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_i2f+0x7e>
 80013e6:	200f      	movs	r0, #15
 80013e8:	4030      	ands	r0, r6
 80013ea:	2804      	cmp	r0, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_i2f+0x7e>
 80013ee:	3104      	adds	r1, #4
 80013f0:	014a      	lsls	r2, r1, #5
 80013f2:	d502      	bpl.n	80013fa <__aeabi_i2f+0x7e>
 80013f4:	239f      	movs	r3, #159	; 0x9f
 80013f6:	4039      	ands	r1, r7
 80013f8:	1b5b      	subs	r3, r3, r5
 80013fa:	0189      	lsls	r1, r1, #6
 80013fc:	0a4e      	lsrs	r6, r1, #9
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	e7d6      	b.n	80013b0 <__aeabi_i2f+0x34>
 8001402:	1f6a      	subs	r2, r5, #5
 8001404:	4096      	lsls	r6, r2
 8001406:	0031      	movs	r1, r6
 8001408:	4f02      	ldr	r7, [pc, #8]	; (8001414 <__aeabi_i2f+0x98>)
 800140a:	4039      	ands	r1, r7
 800140c:	0772      	lsls	r2, r6, #29
 800140e:	d0f4      	beq.n	80013fa <__aeabi_i2f+0x7e>
 8001410:	e7e9      	b.n	80013e6 <__aeabi_i2f+0x6a>
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	fbffffff 	.word	0xfbffffff

08001418 <__aeabi_ui2f>:
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	1e05      	subs	r5, r0, #0
 800141c:	d00e      	beq.n	800143c <__aeabi_ui2f+0x24>
 800141e:	f001 fef3 	bl	8003208 <__clzsi2>
 8001422:	239e      	movs	r3, #158	; 0x9e
 8001424:	0004      	movs	r4, r0
 8001426:	1a1b      	subs	r3, r3, r0
 8001428:	2b96      	cmp	r3, #150	; 0x96
 800142a:	dc0c      	bgt.n	8001446 <__aeabi_ui2f+0x2e>
 800142c:	2808      	cmp	r0, #8
 800142e:	dd01      	ble.n	8001434 <__aeabi_ui2f+0x1c>
 8001430:	3c08      	subs	r4, #8
 8001432:	40a5      	lsls	r5, r4
 8001434:	026d      	lsls	r5, r5, #9
 8001436:	0a6d      	lsrs	r5, r5, #9
 8001438:	b2d8      	uxtb	r0, r3
 800143a:	e001      	b.n	8001440 <__aeabi_ui2f+0x28>
 800143c:	2000      	movs	r0, #0
 800143e:	2500      	movs	r5, #0
 8001440:	05c0      	lsls	r0, r0, #23
 8001442:	4328      	orrs	r0, r5
 8001444:	bd70      	pop	{r4, r5, r6, pc}
 8001446:	2b99      	cmp	r3, #153	; 0x99
 8001448:	dd09      	ble.n	800145e <__aeabi_ui2f+0x46>
 800144a:	0002      	movs	r2, r0
 800144c:	0029      	movs	r1, r5
 800144e:	321b      	adds	r2, #27
 8001450:	4091      	lsls	r1, r2
 8001452:	1e4a      	subs	r2, r1, #1
 8001454:	4191      	sbcs	r1, r2
 8001456:	2205      	movs	r2, #5
 8001458:	1a12      	subs	r2, r2, r0
 800145a:	40d5      	lsrs	r5, r2
 800145c:	430d      	orrs	r5, r1
 800145e:	2c05      	cmp	r4, #5
 8001460:	dc12      	bgt.n	8001488 <__aeabi_ui2f+0x70>
 8001462:	0029      	movs	r1, r5
 8001464:	4e0c      	ldr	r6, [pc, #48]	; (8001498 <__aeabi_ui2f+0x80>)
 8001466:	4031      	ands	r1, r6
 8001468:	076a      	lsls	r2, r5, #29
 800146a:	d009      	beq.n	8001480 <__aeabi_ui2f+0x68>
 800146c:	200f      	movs	r0, #15
 800146e:	4028      	ands	r0, r5
 8001470:	2804      	cmp	r0, #4
 8001472:	d005      	beq.n	8001480 <__aeabi_ui2f+0x68>
 8001474:	3104      	adds	r1, #4
 8001476:	014a      	lsls	r2, r1, #5
 8001478:	d502      	bpl.n	8001480 <__aeabi_ui2f+0x68>
 800147a:	239f      	movs	r3, #159	; 0x9f
 800147c:	4031      	ands	r1, r6
 800147e:	1b1b      	subs	r3, r3, r4
 8001480:	0189      	lsls	r1, r1, #6
 8001482:	0a4d      	lsrs	r5, r1, #9
 8001484:	b2d8      	uxtb	r0, r3
 8001486:	e7db      	b.n	8001440 <__aeabi_ui2f+0x28>
 8001488:	1f62      	subs	r2, r4, #5
 800148a:	4095      	lsls	r5, r2
 800148c:	0029      	movs	r1, r5
 800148e:	4e02      	ldr	r6, [pc, #8]	; (8001498 <__aeabi_ui2f+0x80>)
 8001490:	4031      	ands	r1, r6
 8001492:	076a      	lsls	r2, r5, #29
 8001494:	d0f4      	beq.n	8001480 <__aeabi_ui2f+0x68>
 8001496:	e7e9      	b.n	800146c <__aeabi_ui2f+0x54>
 8001498:	fbffffff 	.word	0xfbffffff

0800149c <__aeabi_dadd>:
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	464f      	mov	r7, r9
 80014a0:	4646      	mov	r6, r8
 80014a2:	46d6      	mov	lr, sl
 80014a4:	000d      	movs	r5, r1
 80014a6:	0004      	movs	r4, r0
 80014a8:	b5c0      	push	{r6, r7, lr}
 80014aa:	001f      	movs	r7, r3
 80014ac:	0011      	movs	r1, r2
 80014ae:	0328      	lsls	r0, r5, #12
 80014b0:	0f62      	lsrs	r2, r4, #29
 80014b2:	0a40      	lsrs	r0, r0, #9
 80014b4:	4310      	orrs	r0, r2
 80014b6:	007a      	lsls	r2, r7, #1
 80014b8:	0d52      	lsrs	r2, r2, #21
 80014ba:	00e3      	lsls	r3, r4, #3
 80014bc:	033c      	lsls	r4, r7, #12
 80014be:	4691      	mov	r9, r2
 80014c0:	0a64      	lsrs	r4, r4, #9
 80014c2:	0ffa      	lsrs	r2, r7, #31
 80014c4:	0f4f      	lsrs	r7, r1, #29
 80014c6:	006e      	lsls	r6, r5, #1
 80014c8:	4327      	orrs	r7, r4
 80014ca:	4692      	mov	sl, r2
 80014cc:	46b8      	mov	r8, r7
 80014ce:	0d76      	lsrs	r6, r6, #21
 80014d0:	0fed      	lsrs	r5, r5, #31
 80014d2:	00c9      	lsls	r1, r1, #3
 80014d4:	4295      	cmp	r5, r2
 80014d6:	d100      	bne.n	80014da <__aeabi_dadd+0x3e>
 80014d8:	e099      	b.n	800160e <__aeabi_dadd+0x172>
 80014da:	464c      	mov	r4, r9
 80014dc:	1b34      	subs	r4, r6, r4
 80014de:	46a4      	mov	ip, r4
 80014e0:	2c00      	cmp	r4, #0
 80014e2:	dc00      	bgt.n	80014e6 <__aeabi_dadd+0x4a>
 80014e4:	e07c      	b.n	80015e0 <__aeabi_dadd+0x144>
 80014e6:	464a      	mov	r2, r9
 80014e8:	2a00      	cmp	r2, #0
 80014ea:	d100      	bne.n	80014ee <__aeabi_dadd+0x52>
 80014ec:	e0b8      	b.n	8001660 <__aeabi_dadd+0x1c4>
 80014ee:	4ac5      	ldr	r2, [pc, #788]	; (8001804 <__aeabi_dadd+0x368>)
 80014f0:	4296      	cmp	r6, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x5a>
 80014f4:	e11c      	b.n	8001730 <__aeabi_dadd+0x294>
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	003c      	movs	r4, r7
 80014fa:	0412      	lsls	r2, r2, #16
 80014fc:	4314      	orrs	r4, r2
 80014fe:	46a0      	mov	r8, r4
 8001500:	4662      	mov	r2, ip
 8001502:	2a38      	cmp	r2, #56	; 0x38
 8001504:	dd00      	ble.n	8001508 <__aeabi_dadd+0x6c>
 8001506:	e161      	b.n	80017cc <__aeabi_dadd+0x330>
 8001508:	2a1f      	cmp	r2, #31
 800150a:	dd00      	ble.n	800150e <__aeabi_dadd+0x72>
 800150c:	e1cc      	b.n	80018a8 <__aeabi_dadd+0x40c>
 800150e:	4664      	mov	r4, ip
 8001510:	2220      	movs	r2, #32
 8001512:	1b12      	subs	r2, r2, r4
 8001514:	4644      	mov	r4, r8
 8001516:	4094      	lsls	r4, r2
 8001518:	000f      	movs	r7, r1
 800151a:	46a1      	mov	r9, r4
 800151c:	4664      	mov	r4, ip
 800151e:	4091      	lsls	r1, r2
 8001520:	40e7      	lsrs	r7, r4
 8001522:	464c      	mov	r4, r9
 8001524:	1e4a      	subs	r2, r1, #1
 8001526:	4191      	sbcs	r1, r2
 8001528:	433c      	orrs	r4, r7
 800152a:	4642      	mov	r2, r8
 800152c:	4321      	orrs	r1, r4
 800152e:	4664      	mov	r4, ip
 8001530:	40e2      	lsrs	r2, r4
 8001532:	1a80      	subs	r0, r0, r2
 8001534:	1a5c      	subs	r4, r3, r1
 8001536:	42a3      	cmp	r3, r4
 8001538:	419b      	sbcs	r3, r3
 800153a:	425f      	negs	r7, r3
 800153c:	1bc7      	subs	r7, r0, r7
 800153e:	023b      	lsls	r3, r7, #8
 8001540:	d400      	bmi.n	8001544 <__aeabi_dadd+0xa8>
 8001542:	e0d0      	b.n	80016e6 <__aeabi_dadd+0x24a>
 8001544:	027f      	lsls	r7, r7, #9
 8001546:	0a7f      	lsrs	r7, r7, #9
 8001548:	2f00      	cmp	r7, #0
 800154a:	d100      	bne.n	800154e <__aeabi_dadd+0xb2>
 800154c:	e0ff      	b.n	800174e <__aeabi_dadd+0x2b2>
 800154e:	0038      	movs	r0, r7
 8001550:	f001 fe5a 	bl	8003208 <__clzsi2>
 8001554:	0001      	movs	r1, r0
 8001556:	3908      	subs	r1, #8
 8001558:	2320      	movs	r3, #32
 800155a:	0022      	movs	r2, r4
 800155c:	1a5b      	subs	r3, r3, r1
 800155e:	408f      	lsls	r7, r1
 8001560:	40da      	lsrs	r2, r3
 8001562:	408c      	lsls	r4, r1
 8001564:	4317      	orrs	r7, r2
 8001566:	42b1      	cmp	r1, r6
 8001568:	da00      	bge.n	800156c <__aeabi_dadd+0xd0>
 800156a:	e0ff      	b.n	800176c <__aeabi_dadd+0x2d0>
 800156c:	1b89      	subs	r1, r1, r6
 800156e:	1c4b      	adds	r3, r1, #1
 8001570:	2b1f      	cmp	r3, #31
 8001572:	dd00      	ble.n	8001576 <__aeabi_dadd+0xda>
 8001574:	e0a8      	b.n	80016c8 <__aeabi_dadd+0x22c>
 8001576:	2220      	movs	r2, #32
 8001578:	0039      	movs	r1, r7
 800157a:	1ad2      	subs	r2, r2, r3
 800157c:	0020      	movs	r0, r4
 800157e:	4094      	lsls	r4, r2
 8001580:	4091      	lsls	r1, r2
 8001582:	40d8      	lsrs	r0, r3
 8001584:	1e62      	subs	r2, r4, #1
 8001586:	4194      	sbcs	r4, r2
 8001588:	40df      	lsrs	r7, r3
 800158a:	2600      	movs	r6, #0
 800158c:	4301      	orrs	r1, r0
 800158e:	430c      	orrs	r4, r1
 8001590:	0763      	lsls	r3, r4, #29
 8001592:	d009      	beq.n	80015a8 <__aeabi_dadd+0x10c>
 8001594:	230f      	movs	r3, #15
 8001596:	4023      	ands	r3, r4
 8001598:	2b04      	cmp	r3, #4
 800159a:	d005      	beq.n	80015a8 <__aeabi_dadd+0x10c>
 800159c:	1d23      	adds	r3, r4, #4
 800159e:	42a3      	cmp	r3, r4
 80015a0:	41a4      	sbcs	r4, r4
 80015a2:	4264      	negs	r4, r4
 80015a4:	193f      	adds	r7, r7, r4
 80015a6:	001c      	movs	r4, r3
 80015a8:	023b      	lsls	r3, r7, #8
 80015aa:	d400      	bmi.n	80015ae <__aeabi_dadd+0x112>
 80015ac:	e09e      	b.n	80016ec <__aeabi_dadd+0x250>
 80015ae:	4b95      	ldr	r3, [pc, #596]	; (8001804 <__aeabi_dadd+0x368>)
 80015b0:	3601      	adds	r6, #1
 80015b2:	429e      	cmp	r6, r3
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dadd+0x11c>
 80015b6:	e0b7      	b.n	8001728 <__aeabi_dadd+0x28c>
 80015b8:	4a93      	ldr	r2, [pc, #588]	; (8001808 <__aeabi_dadd+0x36c>)
 80015ba:	08e4      	lsrs	r4, r4, #3
 80015bc:	4017      	ands	r7, r2
 80015be:	077b      	lsls	r3, r7, #29
 80015c0:	0571      	lsls	r1, r6, #21
 80015c2:	027f      	lsls	r7, r7, #9
 80015c4:	4323      	orrs	r3, r4
 80015c6:	0b3f      	lsrs	r7, r7, #12
 80015c8:	0d4a      	lsrs	r2, r1, #21
 80015ca:	0512      	lsls	r2, r2, #20
 80015cc:	433a      	orrs	r2, r7
 80015ce:	07ed      	lsls	r5, r5, #31
 80015d0:	432a      	orrs	r2, r5
 80015d2:	0018      	movs	r0, r3
 80015d4:	0011      	movs	r1, r2
 80015d6:	bce0      	pop	{r5, r6, r7}
 80015d8:	46ba      	mov	sl, r7
 80015da:	46b1      	mov	r9, r6
 80015dc:	46a8      	mov	r8, r5
 80015de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e0:	2c00      	cmp	r4, #0
 80015e2:	d04b      	beq.n	800167c <__aeabi_dadd+0x1e0>
 80015e4:	464c      	mov	r4, r9
 80015e6:	1ba4      	subs	r4, r4, r6
 80015e8:	46a4      	mov	ip, r4
 80015ea:	2e00      	cmp	r6, #0
 80015ec:	d000      	beq.n	80015f0 <__aeabi_dadd+0x154>
 80015ee:	e123      	b.n	8001838 <__aeabi_dadd+0x39c>
 80015f0:	0004      	movs	r4, r0
 80015f2:	431c      	orrs	r4, r3
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0x15c>
 80015f6:	e1af      	b.n	8001958 <__aeabi_dadd+0x4bc>
 80015f8:	4662      	mov	r2, ip
 80015fa:	1e54      	subs	r4, r2, #1
 80015fc:	2a01      	cmp	r2, #1
 80015fe:	d100      	bne.n	8001602 <__aeabi_dadd+0x166>
 8001600:	e215      	b.n	8001a2e <__aeabi_dadd+0x592>
 8001602:	4d80      	ldr	r5, [pc, #512]	; (8001804 <__aeabi_dadd+0x368>)
 8001604:	45ac      	cmp	ip, r5
 8001606:	d100      	bne.n	800160a <__aeabi_dadd+0x16e>
 8001608:	e1c8      	b.n	800199c <__aeabi_dadd+0x500>
 800160a:	46a4      	mov	ip, r4
 800160c:	e11b      	b.n	8001846 <__aeabi_dadd+0x3aa>
 800160e:	464a      	mov	r2, r9
 8001610:	1ab2      	subs	r2, r6, r2
 8001612:	4694      	mov	ip, r2
 8001614:	2a00      	cmp	r2, #0
 8001616:	dc00      	bgt.n	800161a <__aeabi_dadd+0x17e>
 8001618:	e0ac      	b.n	8001774 <__aeabi_dadd+0x2d8>
 800161a:	464a      	mov	r2, r9
 800161c:	2a00      	cmp	r2, #0
 800161e:	d043      	beq.n	80016a8 <__aeabi_dadd+0x20c>
 8001620:	4a78      	ldr	r2, [pc, #480]	; (8001804 <__aeabi_dadd+0x368>)
 8001622:	4296      	cmp	r6, r2
 8001624:	d100      	bne.n	8001628 <__aeabi_dadd+0x18c>
 8001626:	e1af      	b.n	8001988 <__aeabi_dadd+0x4ec>
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	003c      	movs	r4, r7
 800162c:	0412      	lsls	r2, r2, #16
 800162e:	4314      	orrs	r4, r2
 8001630:	46a0      	mov	r8, r4
 8001632:	4662      	mov	r2, ip
 8001634:	2a38      	cmp	r2, #56	; 0x38
 8001636:	dc67      	bgt.n	8001708 <__aeabi_dadd+0x26c>
 8001638:	2a1f      	cmp	r2, #31
 800163a:	dc00      	bgt.n	800163e <__aeabi_dadd+0x1a2>
 800163c:	e15f      	b.n	80018fe <__aeabi_dadd+0x462>
 800163e:	4647      	mov	r7, r8
 8001640:	3a20      	subs	r2, #32
 8001642:	40d7      	lsrs	r7, r2
 8001644:	4662      	mov	r2, ip
 8001646:	2a20      	cmp	r2, #32
 8001648:	d005      	beq.n	8001656 <__aeabi_dadd+0x1ba>
 800164a:	4664      	mov	r4, ip
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	1b12      	subs	r2, r2, r4
 8001650:	4644      	mov	r4, r8
 8001652:	4094      	lsls	r4, r2
 8001654:	4321      	orrs	r1, r4
 8001656:	1e4a      	subs	r2, r1, #1
 8001658:	4191      	sbcs	r1, r2
 800165a:	000c      	movs	r4, r1
 800165c:	433c      	orrs	r4, r7
 800165e:	e057      	b.n	8001710 <__aeabi_dadd+0x274>
 8001660:	003a      	movs	r2, r7
 8001662:	430a      	orrs	r2, r1
 8001664:	d100      	bne.n	8001668 <__aeabi_dadd+0x1cc>
 8001666:	e105      	b.n	8001874 <__aeabi_dadd+0x3d8>
 8001668:	0022      	movs	r2, r4
 800166a:	3a01      	subs	r2, #1
 800166c:	2c01      	cmp	r4, #1
 800166e:	d100      	bne.n	8001672 <__aeabi_dadd+0x1d6>
 8001670:	e182      	b.n	8001978 <__aeabi_dadd+0x4dc>
 8001672:	4c64      	ldr	r4, [pc, #400]	; (8001804 <__aeabi_dadd+0x368>)
 8001674:	45a4      	cmp	ip, r4
 8001676:	d05b      	beq.n	8001730 <__aeabi_dadd+0x294>
 8001678:	4694      	mov	ip, r2
 800167a:	e741      	b.n	8001500 <__aeabi_dadd+0x64>
 800167c:	4c63      	ldr	r4, [pc, #396]	; (800180c <__aeabi_dadd+0x370>)
 800167e:	1c77      	adds	r7, r6, #1
 8001680:	4227      	tst	r7, r4
 8001682:	d000      	beq.n	8001686 <__aeabi_dadd+0x1ea>
 8001684:	e0c4      	b.n	8001810 <__aeabi_dadd+0x374>
 8001686:	0004      	movs	r4, r0
 8001688:	431c      	orrs	r4, r3
 800168a:	2e00      	cmp	r6, #0
 800168c:	d000      	beq.n	8001690 <__aeabi_dadd+0x1f4>
 800168e:	e169      	b.n	8001964 <__aeabi_dadd+0x4c8>
 8001690:	2c00      	cmp	r4, #0
 8001692:	d100      	bne.n	8001696 <__aeabi_dadd+0x1fa>
 8001694:	e1bf      	b.n	8001a16 <__aeabi_dadd+0x57a>
 8001696:	4644      	mov	r4, r8
 8001698:	430c      	orrs	r4, r1
 800169a:	d000      	beq.n	800169e <__aeabi_dadd+0x202>
 800169c:	e1d0      	b.n	8001a40 <__aeabi_dadd+0x5a4>
 800169e:	0742      	lsls	r2, r0, #29
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	08c0      	lsrs	r0, r0, #3
 80016a6:	e029      	b.n	80016fc <__aeabi_dadd+0x260>
 80016a8:	003a      	movs	r2, r7
 80016aa:	430a      	orrs	r2, r1
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dadd+0x214>
 80016ae:	e170      	b.n	8001992 <__aeabi_dadd+0x4f6>
 80016b0:	4662      	mov	r2, ip
 80016b2:	4664      	mov	r4, ip
 80016b4:	3a01      	subs	r2, #1
 80016b6:	2c01      	cmp	r4, #1
 80016b8:	d100      	bne.n	80016bc <__aeabi_dadd+0x220>
 80016ba:	e0e0      	b.n	800187e <__aeabi_dadd+0x3e2>
 80016bc:	4c51      	ldr	r4, [pc, #324]	; (8001804 <__aeabi_dadd+0x368>)
 80016be:	45a4      	cmp	ip, r4
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dadd+0x228>
 80016c2:	e161      	b.n	8001988 <__aeabi_dadd+0x4ec>
 80016c4:	4694      	mov	ip, r2
 80016c6:	e7b4      	b.n	8001632 <__aeabi_dadd+0x196>
 80016c8:	003a      	movs	r2, r7
 80016ca:	391f      	subs	r1, #31
 80016cc:	40ca      	lsrs	r2, r1
 80016ce:	0011      	movs	r1, r2
 80016d0:	2b20      	cmp	r3, #32
 80016d2:	d003      	beq.n	80016dc <__aeabi_dadd+0x240>
 80016d4:	2240      	movs	r2, #64	; 0x40
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	409f      	lsls	r7, r3
 80016da:	433c      	orrs	r4, r7
 80016dc:	1e63      	subs	r3, r4, #1
 80016de:	419c      	sbcs	r4, r3
 80016e0:	2700      	movs	r7, #0
 80016e2:	2600      	movs	r6, #0
 80016e4:	430c      	orrs	r4, r1
 80016e6:	0763      	lsls	r3, r4, #29
 80016e8:	d000      	beq.n	80016ec <__aeabi_dadd+0x250>
 80016ea:	e753      	b.n	8001594 <__aeabi_dadd+0xf8>
 80016ec:	46b4      	mov	ip, r6
 80016ee:	08e4      	lsrs	r4, r4, #3
 80016f0:	077b      	lsls	r3, r7, #29
 80016f2:	4323      	orrs	r3, r4
 80016f4:	08f8      	lsrs	r0, r7, #3
 80016f6:	4a43      	ldr	r2, [pc, #268]	; (8001804 <__aeabi_dadd+0x368>)
 80016f8:	4594      	cmp	ip, r2
 80016fa:	d01d      	beq.n	8001738 <__aeabi_dadd+0x29c>
 80016fc:	4662      	mov	r2, ip
 80016fe:	0307      	lsls	r7, r0, #12
 8001700:	0552      	lsls	r2, r2, #21
 8001702:	0b3f      	lsrs	r7, r7, #12
 8001704:	0d52      	lsrs	r2, r2, #21
 8001706:	e760      	b.n	80015ca <__aeabi_dadd+0x12e>
 8001708:	4644      	mov	r4, r8
 800170a:	430c      	orrs	r4, r1
 800170c:	1e62      	subs	r2, r4, #1
 800170e:	4194      	sbcs	r4, r2
 8001710:	18e4      	adds	r4, r4, r3
 8001712:	429c      	cmp	r4, r3
 8001714:	419b      	sbcs	r3, r3
 8001716:	425f      	negs	r7, r3
 8001718:	183f      	adds	r7, r7, r0
 800171a:	023b      	lsls	r3, r7, #8
 800171c:	d5e3      	bpl.n	80016e6 <__aeabi_dadd+0x24a>
 800171e:	4b39      	ldr	r3, [pc, #228]	; (8001804 <__aeabi_dadd+0x368>)
 8001720:	3601      	adds	r6, #1
 8001722:	429e      	cmp	r6, r3
 8001724:	d000      	beq.n	8001728 <__aeabi_dadd+0x28c>
 8001726:	e0b5      	b.n	8001894 <__aeabi_dadd+0x3f8>
 8001728:	0032      	movs	r2, r6
 800172a:	2700      	movs	r7, #0
 800172c:	2300      	movs	r3, #0
 800172e:	e74c      	b.n	80015ca <__aeabi_dadd+0x12e>
 8001730:	0742      	lsls	r2, r0, #29
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	4313      	orrs	r3, r2
 8001736:	08c0      	lsrs	r0, r0, #3
 8001738:	001a      	movs	r2, r3
 800173a:	4302      	orrs	r2, r0
 800173c:	d100      	bne.n	8001740 <__aeabi_dadd+0x2a4>
 800173e:	e1e1      	b.n	8001b04 <__aeabi_dadd+0x668>
 8001740:	2780      	movs	r7, #128	; 0x80
 8001742:	033f      	lsls	r7, r7, #12
 8001744:	4307      	orrs	r7, r0
 8001746:	033f      	lsls	r7, r7, #12
 8001748:	4a2e      	ldr	r2, [pc, #184]	; (8001804 <__aeabi_dadd+0x368>)
 800174a:	0b3f      	lsrs	r7, r7, #12
 800174c:	e73d      	b.n	80015ca <__aeabi_dadd+0x12e>
 800174e:	0020      	movs	r0, r4
 8001750:	f001 fd5a 	bl	8003208 <__clzsi2>
 8001754:	0001      	movs	r1, r0
 8001756:	3118      	adds	r1, #24
 8001758:	291f      	cmp	r1, #31
 800175a:	dc00      	bgt.n	800175e <__aeabi_dadd+0x2c2>
 800175c:	e6fc      	b.n	8001558 <__aeabi_dadd+0xbc>
 800175e:	3808      	subs	r0, #8
 8001760:	4084      	lsls	r4, r0
 8001762:	0027      	movs	r7, r4
 8001764:	2400      	movs	r4, #0
 8001766:	42b1      	cmp	r1, r6
 8001768:	db00      	blt.n	800176c <__aeabi_dadd+0x2d0>
 800176a:	e6ff      	b.n	800156c <__aeabi_dadd+0xd0>
 800176c:	4a26      	ldr	r2, [pc, #152]	; (8001808 <__aeabi_dadd+0x36c>)
 800176e:	1a76      	subs	r6, r6, r1
 8001770:	4017      	ands	r7, r2
 8001772:	e70d      	b.n	8001590 <__aeabi_dadd+0xf4>
 8001774:	2a00      	cmp	r2, #0
 8001776:	d02f      	beq.n	80017d8 <__aeabi_dadd+0x33c>
 8001778:	464a      	mov	r2, r9
 800177a:	1b92      	subs	r2, r2, r6
 800177c:	4694      	mov	ip, r2
 800177e:	2e00      	cmp	r6, #0
 8001780:	d100      	bne.n	8001784 <__aeabi_dadd+0x2e8>
 8001782:	e0ad      	b.n	80018e0 <__aeabi_dadd+0x444>
 8001784:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <__aeabi_dadd+0x368>)
 8001786:	4591      	cmp	r9, r2
 8001788:	d100      	bne.n	800178c <__aeabi_dadd+0x2f0>
 800178a:	e10f      	b.n	80019ac <__aeabi_dadd+0x510>
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	0412      	lsls	r2, r2, #16
 8001790:	4310      	orrs	r0, r2
 8001792:	4662      	mov	r2, ip
 8001794:	2a38      	cmp	r2, #56	; 0x38
 8001796:	dd00      	ble.n	800179a <__aeabi_dadd+0x2fe>
 8001798:	e10f      	b.n	80019ba <__aeabi_dadd+0x51e>
 800179a:	2a1f      	cmp	r2, #31
 800179c:	dd00      	ble.n	80017a0 <__aeabi_dadd+0x304>
 800179e:	e180      	b.n	8001aa2 <__aeabi_dadd+0x606>
 80017a0:	4664      	mov	r4, ip
 80017a2:	2220      	movs	r2, #32
 80017a4:	001e      	movs	r6, r3
 80017a6:	1b12      	subs	r2, r2, r4
 80017a8:	4667      	mov	r7, ip
 80017aa:	0004      	movs	r4, r0
 80017ac:	4093      	lsls	r3, r2
 80017ae:	4094      	lsls	r4, r2
 80017b0:	40fe      	lsrs	r6, r7
 80017b2:	1e5a      	subs	r2, r3, #1
 80017b4:	4193      	sbcs	r3, r2
 80017b6:	40f8      	lsrs	r0, r7
 80017b8:	4334      	orrs	r4, r6
 80017ba:	431c      	orrs	r4, r3
 80017bc:	4480      	add	r8, r0
 80017be:	1864      	adds	r4, r4, r1
 80017c0:	428c      	cmp	r4, r1
 80017c2:	41bf      	sbcs	r7, r7
 80017c4:	427f      	negs	r7, r7
 80017c6:	464e      	mov	r6, r9
 80017c8:	4447      	add	r7, r8
 80017ca:	e7a6      	b.n	800171a <__aeabi_dadd+0x27e>
 80017cc:	4642      	mov	r2, r8
 80017ce:	430a      	orrs	r2, r1
 80017d0:	0011      	movs	r1, r2
 80017d2:	1e4a      	subs	r2, r1, #1
 80017d4:	4191      	sbcs	r1, r2
 80017d6:	e6ad      	b.n	8001534 <__aeabi_dadd+0x98>
 80017d8:	4c0c      	ldr	r4, [pc, #48]	; (800180c <__aeabi_dadd+0x370>)
 80017da:	1c72      	adds	r2, r6, #1
 80017dc:	4222      	tst	r2, r4
 80017de:	d000      	beq.n	80017e2 <__aeabi_dadd+0x346>
 80017e0:	e0a1      	b.n	8001926 <__aeabi_dadd+0x48a>
 80017e2:	0002      	movs	r2, r0
 80017e4:	431a      	orrs	r2, r3
 80017e6:	2e00      	cmp	r6, #0
 80017e8:	d000      	beq.n	80017ec <__aeabi_dadd+0x350>
 80017ea:	e0fa      	b.n	80019e2 <__aeabi_dadd+0x546>
 80017ec:	2a00      	cmp	r2, #0
 80017ee:	d100      	bne.n	80017f2 <__aeabi_dadd+0x356>
 80017f0:	e145      	b.n	8001a7e <__aeabi_dadd+0x5e2>
 80017f2:	003a      	movs	r2, r7
 80017f4:	430a      	orrs	r2, r1
 80017f6:	d000      	beq.n	80017fa <__aeabi_dadd+0x35e>
 80017f8:	e146      	b.n	8001a88 <__aeabi_dadd+0x5ec>
 80017fa:	0742      	lsls	r2, r0, #29
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	4313      	orrs	r3, r2
 8001800:	08c0      	lsrs	r0, r0, #3
 8001802:	e77b      	b.n	80016fc <__aeabi_dadd+0x260>
 8001804:	000007ff 	.word	0x000007ff
 8001808:	ff7fffff 	.word	0xff7fffff
 800180c:	000007fe 	.word	0x000007fe
 8001810:	4647      	mov	r7, r8
 8001812:	1a5c      	subs	r4, r3, r1
 8001814:	1bc2      	subs	r2, r0, r7
 8001816:	42a3      	cmp	r3, r4
 8001818:	41bf      	sbcs	r7, r7
 800181a:	427f      	negs	r7, r7
 800181c:	46b9      	mov	r9, r7
 800181e:	0017      	movs	r7, r2
 8001820:	464a      	mov	r2, r9
 8001822:	1abf      	subs	r7, r7, r2
 8001824:	023a      	lsls	r2, r7, #8
 8001826:	d500      	bpl.n	800182a <__aeabi_dadd+0x38e>
 8001828:	e08d      	b.n	8001946 <__aeabi_dadd+0x4aa>
 800182a:	0023      	movs	r3, r4
 800182c:	433b      	orrs	r3, r7
 800182e:	d000      	beq.n	8001832 <__aeabi_dadd+0x396>
 8001830:	e68a      	b.n	8001548 <__aeabi_dadd+0xac>
 8001832:	2000      	movs	r0, #0
 8001834:	2500      	movs	r5, #0
 8001836:	e761      	b.n	80016fc <__aeabi_dadd+0x260>
 8001838:	4cb4      	ldr	r4, [pc, #720]	; (8001b0c <__aeabi_dadd+0x670>)
 800183a:	45a1      	cmp	r9, r4
 800183c:	d100      	bne.n	8001840 <__aeabi_dadd+0x3a4>
 800183e:	e0ad      	b.n	800199c <__aeabi_dadd+0x500>
 8001840:	2480      	movs	r4, #128	; 0x80
 8001842:	0424      	lsls	r4, r4, #16
 8001844:	4320      	orrs	r0, r4
 8001846:	4664      	mov	r4, ip
 8001848:	2c38      	cmp	r4, #56	; 0x38
 800184a:	dc3d      	bgt.n	80018c8 <__aeabi_dadd+0x42c>
 800184c:	4662      	mov	r2, ip
 800184e:	2c1f      	cmp	r4, #31
 8001850:	dd00      	ble.n	8001854 <__aeabi_dadd+0x3b8>
 8001852:	e0b7      	b.n	80019c4 <__aeabi_dadd+0x528>
 8001854:	2520      	movs	r5, #32
 8001856:	001e      	movs	r6, r3
 8001858:	1b2d      	subs	r5, r5, r4
 800185a:	0004      	movs	r4, r0
 800185c:	40ab      	lsls	r3, r5
 800185e:	40ac      	lsls	r4, r5
 8001860:	40d6      	lsrs	r6, r2
 8001862:	40d0      	lsrs	r0, r2
 8001864:	4642      	mov	r2, r8
 8001866:	1e5d      	subs	r5, r3, #1
 8001868:	41ab      	sbcs	r3, r5
 800186a:	4334      	orrs	r4, r6
 800186c:	1a12      	subs	r2, r2, r0
 800186e:	4690      	mov	r8, r2
 8001870:	4323      	orrs	r3, r4
 8001872:	e02c      	b.n	80018ce <__aeabi_dadd+0x432>
 8001874:	0742      	lsls	r2, r0, #29
 8001876:	08db      	lsrs	r3, r3, #3
 8001878:	4313      	orrs	r3, r2
 800187a:	08c0      	lsrs	r0, r0, #3
 800187c:	e73b      	b.n	80016f6 <__aeabi_dadd+0x25a>
 800187e:	185c      	adds	r4, r3, r1
 8001880:	429c      	cmp	r4, r3
 8001882:	419b      	sbcs	r3, r3
 8001884:	4440      	add	r0, r8
 8001886:	425b      	negs	r3, r3
 8001888:	18c7      	adds	r7, r0, r3
 800188a:	2601      	movs	r6, #1
 800188c:	023b      	lsls	r3, r7, #8
 800188e:	d400      	bmi.n	8001892 <__aeabi_dadd+0x3f6>
 8001890:	e729      	b.n	80016e6 <__aeabi_dadd+0x24a>
 8001892:	2602      	movs	r6, #2
 8001894:	4a9e      	ldr	r2, [pc, #632]	; (8001b10 <__aeabi_dadd+0x674>)
 8001896:	0863      	lsrs	r3, r4, #1
 8001898:	4017      	ands	r7, r2
 800189a:	2201      	movs	r2, #1
 800189c:	4014      	ands	r4, r2
 800189e:	431c      	orrs	r4, r3
 80018a0:	07fb      	lsls	r3, r7, #31
 80018a2:	431c      	orrs	r4, r3
 80018a4:	087f      	lsrs	r7, r7, #1
 80018a6:	e673      	b.n	8001590 <__aeabi_dadd+0xf4>
 80018a8:	4644      	mov	r4, r8
 80018aa:	3a20      	subs	r2, #32
 80018ac:	40d4      	lsrs	r4, r2
 80018ae:	4662      	mov	r2, ip
 80018b0:	2a20      	cmp	r2, #32
 80018b2:	d005      	beq.n	80018c0 <__aeabi_dadd+0x424>
 80018b4:	4667      	mov	r7, ip
 80018b6:	2240      	movs	r2, #64	; 0x40
 80018b8:	1bd2      	subs	r2, r2, r7
 80018ba:	4647      	mov	r7, r8
 80018bc:	4097      	lsls	r7, r2
 80018be:	4339      	orrs	r1, r7
 80018c0:	1e4a      	subs	r2, r1, #1
 80018c2:	4191      	sbcs	r1, r2
 80018c4:	4321      	orrs	r1, r4
 80018c6:	e635      	b.n	8001534 <__aeabi_dadd+0x98>
 80018c8:	4303      	orrs	r3, r0
 80018ca:	1e58      	subs	r0, r3, #1
 80018cc:	4183      	sbcs	r3, r0
 80018ce:	1acc      	subs	r4, r1, r3
 80018d0:	42a1      	cmp	r1, r4
 80018d2:	41bf      	sbcs	r7, r7
 80018d4:	4643      	mov	r3, r8
 80018d6:	427f      	negs	r7, r7
 80018d8:	4655      	mov	r5, sl
 80018da:	464e      	mov	r6, r9
 80018dc:	1bdf      	subs	r7, r3, r7
 80018de:	e62e      	b.n	800153e <__aeabi_dadd+0xa2>
 80018e0:	0002      	movs	r2, r0
 80018e2:	431a      	orrs	r2, r3
 80018e4:	d100      	bne.n	80018e8 <__aeabi_dadd+0x44c>
 80018e6:	e0bd      	b.n	8001a64 <__aeabi_dadd+0x5c8>
 80018e8:	4662      	mov	r2, ip
 80018ea:	4664      	mov	r4, ip
 80018ec:	3a01      	subs	r2, #1
 80018ee:	2c01      	cmp	r4, #1
 80018f0:	d100      	bne.n	80018f4 <__aeabi_dadd+0x458>
 80018f2:	e0e5      	b.n	8001ac0 <__aeabi_dadd+0x624>
 80018f4:	4c85      	ldr	r4, [pc, #532]	; (8001b0c <__aeabi_dadd+0x670>)
 80018f6:	45a4      	cmp	ip, r4
 80018f8:	d058      	beq.n	80019ac <__aeabi_dadd+0x510>
 80018fa:	4694      	mov	ip, r2
 80018fc:	e749      	b.n	8001792 <__aeabi_dadd+0x2f6>
 80018fe:	4664      	mov	r4, ip
 8001900:	2220      	movs	r2, #32
 8001902:	1b12      	subs	r2, r2, r4
 8001904:	4644      	mov	r4, r8
 8001906:	4094      	lsls	r4, r2
 8001908:	000f      	movs	r7, r1
 800190a:	46a1      	mov	r9, r4
 800190c:	4664      	mov	r4, ip
 800190e:	4091      	lsls	r1, r2
 8001910:	40e7      	lsrs	r7, r4
 8001912:	464c      	mov	r4, r9
 8001914:	1e4a      	subs	r2, r1, #1
 8001916:	4191      	sbcs	r1, r2
 8001918:	433c      	orrs	r4, r7
 800191a:	4642      	mov	r2, r8
 800191c:	430c      	orrs	r4, r1
 800191e:	4661      	mov	r1, ip
 8001920:	40ca      	lsrs	r2, r1
 8001922:	1880      	adds	r0, r0, r2
 8001924:	e6f4      	b.n	8001710 <__aeabi_dadd+0x274>
 8001926:	4c79      	ldr	r4, [pc, #484]	; (8001b0c <__aeabi_dadd+0x670>)
 8001928:	42a2      	cmp	r2, r4
 800192a:	d100      	bne.n	800192e <__aeabi_dadd+0x492>
 800192c:	e6fd      	b.n	800172a <__aeabi_dadd+0x28e>
 800192e:	1859      	adds	r1, r3, r1
 8001930:	4299      	cmp	r1, r3
 8001932:	419b      	sbcs	r3, r3
 8001934:	4440      	add	r0, r8
 8001936:	425f      	negs	r7, r3
 8001938:	19c7      	adds	r7, r0, r7
 800193a:	07fc      	lsls	r4, r7, #31
 800193c:	0849      	lsrs	r1, r1, #1
 800193e:	0016      	movs	r6, r2
 8001940:	430c      	orrs	r4, r1
 8001942:	087f      	lsrs	r7, r7, #1
 8001944:	e6cf      	b.n	80016e6 <__aeabi_dadd+0x24a>
 8001946:	1acc      	subs	r4, r1, r3
 8001948:	42a1      	cmp	r1, r4
 800194a:	41bf      	sbcs	r7, r7
 800194c:	4643      	mov	r3, r8
 800194e:	427f      	negs	r7, r7
 8001950:	1a18      	subs	r0, r3, r0
 8001952:	4655      	mov	r5, sl
 8001954:	1bc7      	subs	r7, r0, r7
 8001956:	e5f7      	b.n	8001548 <__aeabi_dadd+0xac>
 8001958:	08c9      	lsrs	r1, r1, #3
 800195a:	077b      	lsls	r3, r7, #29
 800195c:	4655      	mov	r5, sl
 800195e:	430b      	orrs	r3, r1
 8001960:	08f8      	lsrs	r0, r7, #3
 8001962:	e6c8      	b.n	80016f6 <__aeabi_dadd+0x25a>
 8001964:	2c00      	cmp	r4, #0
 8001966:	d000      	beq.n	800196a <__aeabi_dadd+0x4ce>
 8001968:	e081      	b.n	8001a6e <__aeabi_dadd+0x5d2>
 800196a:	4643      	mov	r3, r8
 800196c:	430b      	orrs	r3, r1
 800196e:	d115      	bne.n	800199c <__aeabi_dadd+0x500>
 8001970:	2080      	movs	r0, #128	; 0x80
 8001972:	2500      	movs	r5, #0
 8001974:	0300      	lsls	r0, r0, #12
 8001976:	e6e3      	b.n	8001740 <__aeabi_dadd+0x2a4>
 8001978:	1a5c      	subs	r4, r3, r1
 800197a:	42a3      	cmp	r3, r4
 800197c:	419b      	sbcs	r3, r3
 800197e:	1bc7      	subs	r7, r0, r7
 8001980:	425b      	negs	r3, r3
 8001982:	2601      	movs	r6, #1
 8001984:	1aff      	subs	r7, r7, r3
 8001986:	e5da      	b.n	800153e <__aeabi_dadd+0xa2>
 8001988:	0742      	lsls	r2, r0, #29
 800198a:	08db      	lsrs	r3, r3, #3
 800198c:	4313      	orrs	r3, r2
 800198e:	08c0      	lsrs	r0, r0, #3
 8001990:	e6d2      	b.n	8001738 <__aeabi_dadd+0x29c>
 8001992:	0742      	lsls	r2, r0, #29
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	4313      	orrs	r3, r2
 8001998:	08c0      	lsrs	r0, r0, #3
 800199a:	e6ac      	b.n	80016f6 <__aeabi_dadd+0x25a>
 800199c:	4643      	mov	r3, r8
 800199e:	4642      	mov	r2, r8
 80019a0:	08c9      	lsrs	r1, r1, #3
 80019a2:	075b      	lsls	r3, r3, #29
 80019a4:	4655      	mov	r5, sl
 80019a6:	430b      	orrs	r3, r1
 80019a8:	08d0      	lsrs	r0, r2, #3
 80019aa:	e6c5      	b.n	8001738 <__aeabi_dadd+0x29c>
 80019ac:	4643      	mov	r3, r8
 80019ae:	4642      	mov	r2, r8
 80019b0:	075b      	lsls	r3, r3, #29
 80019b2:	08c9      	lsrs	r1, r1, #3
 80019b4:	430b      	orrs	r3, r1
 80019b6:	08d0      	lsrs	r0, r2, #3
 80019b8:	e6be      	b.n	8001738 <__aeabi_dadd+0x29c>
 80019ba:	4303      	orrs	r3, r0
 80019bc:	001c      	movs	r4, r3
 80019be:	1e63      	subs	r3, r4, #1
 80019c0:	419c      	sbcs	r4, r3
 80019c2:	e6fc      	b.n	80017be <__aeabi_dadd+0x322>
 80019c4:	0002      	movs	r2, r0
 80019c6:	3c20      	subs	r4, #32
 80019c8:	40e2      	lsrs	r2, r4
 80019ca:	0014      	movs	r4, r2
 80019cc:	4662      	mov	r2, ip
 80019ce:	2a20      	cmp	r2, #32
 80019d0:	d003      	beq.n	80019da <__aeabi_dadd+0x53e>
 80019d2:	2540      	movs	r5, #64	; 0x40
 80019d4:	1aad      	subs	r5, r5, r2
 80019d6:	40a8      	lsls	r0, r5
 80019d8:	4303      	orrs	r3, r0
 80019da:	1e58      	subs	r0, r3, #1
 80019dc:	4183      	sbcs	r3, r0
 80019de:	4323      	orrs	r3, r4
 80019e0:	e775      	b.n	80018ce <__aeabi_dadd+0x432>
 80019e2:	2a00      	cmp	r2, #0
 80019e4:	d0e2      	beq.n	80019ac <__aeabi_dadd+0x510>
 80019e6:	003a      	movs	r2, r7
 80019e8:	430a      	orrs	r2, r1
 80019ea:	d0cd      	beq.n	8001988 <__aeabi_dadd+0x4ec>
 80019ec:	0742      	lsls	r2, r0, #29
 80019ee:	08db      	lsrs	r3, r3, #3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	08c0      	lsrs	r0, r0, #3
 80019f6:	0312      	lsls	r2, r2, #12
 80019f8:	4210      	tst	r0, r2
 80019fa:	d006      	beq.n	8001a0a <__aeabi_dadd+0x56e>
 80019fc:	08fc      	lsrs	r4, r7, #3
 80019fe:	4214      	tst	r4, r2
 8001a00:	d103      	bne.n	8001a0a <__aeabi_dadd+0x56e>
 8001a02:	0020      	movs	r0, r4
 8001a04:	08cb      	lsrs	r3, r1, #3
 8001a06:	077a      	lsls	r2, r7, #29
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	0f5a      	lsrs	r2, r3, #29
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	0752      	lsls	r2, r2, #29
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	4313      	orrs	r3, r2
 8001a14:	e690      	b.n	8001738 <__aeabi_dadd+0x29c>
 8001a16:	4643      	mov	r3, r8
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dadd+0x582>
 8001a1c:	e709      	b.n	8001832 <__aeabi_dadd+0x396>
 8001a1e:	4643      	mov	r3, r8
 8001a20:	4642      	mov	r2, r8
 8001a22:	08c9      	lsrs	r1, r1, #3
 8001a24:	075b      	lsls	r3, r3, #29
 8001a26:	4655      	mov	r5, sl
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	08d0      	lsrs	r0, r2, #3
 8001a2c:	e666      	b.n	80016fc <__aeabi_dadd+0x260>
 8001a2e:	1acc      	subs	r4, r1, r3
 8001a30:	42a1      	cmp	r1, r4
 8001a32:	4189      	sbcs	r1, r1
 8001a34:	1a3f      	subs	r7, r7, r0
 8001a36:	4249      	negs	r1, r1
 8001a38:	4655      	mov	r5, sl
 8001a3a:	2601      	movs	r6, #1
 8001a3c:	1a7f      	subs	r7, r7, r1
 8001a3e:	e57e      	b.n	800153e <__aeabi_dadd+0xa2>
 8001a40:	4642      	mov	r2, r8
 8001a42:	1a5c      	subs	r4, r3, r1
 8001a44:	1a87      	subs	r7, r0, r2
 8001a46:	42a3      	cmp	r3, r4
 8001a48:	4192      	sbcs	r2, r2
 8001a4a:	4252      	negs	r2, r2
 8001a4c:	1abf      	subs	r7, r7, r2
 8001a4e:	023a      	lsls	r2, r7, #8
 8001a50:	d53d      	bpl.n	8001ace <__aeabi_dadd+0x632>
 8001a52:	1acc      	subs	r4, r1, r3
 8001a54:	42a1      	cmp	r1, r4
 8001a56:	4189      	sbcs	r1, r1
 8001a58:	4643      	mov	r3, r8
 8001a5a:	4249      	negs	r1, r1
 8001a5c:	1a1f      	subs	r7, r3, r0
 8001a5e:	4655      	mov	r5, sl
 8001a60:	1a7f      	subs	r7, r7, r1
 8001a62:	e595      	b.n	8001590 <__aeabi_dadd+0xf4>
 8001a64:	077b      	lsls	r3, r7, #29
 8001a66:	08c9      	lsrs	r1, r1, #3
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	08f8      	lsrs	r0, r7, #3
 8001a6c:	e643      	b.n	80016f6 <__aeabi_dadd+0x25a>
 8001a6e:	4644      	mov	r4, r8
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	430c      	orrs	r4, r1
 8001a74:	d130      	bne.n	8001ad8 <__aeabi_dadd+0x63c>
 8001a76:	0742      	lsls	r2, r0, #29
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	08c0      	lsrs	r0, r0, #3
 8001a7c:	e65c      	b.n	8001738 <__aeabi_dadd+0x29c>
 8001a7e:	077b      	lsls	r3, r7, #29
 8001a80:	08c9      	lsrs	r1, r1, #3
 8001a82:	430b      	orrs	r3, r1
 8001a84:	08f8      	lsrs	r0, r7, #3
 8001a86:	e639      	b.n	80016fc <__aeabi_dadd+0x260>
 8001a88:	185c      	adds	r4, r3, r1
 8001a8a:	429c      	cmp	r4, r3
 8001a8c:	419b      	sbcs	r3, r3
 8001a8e:	4440      	add	r0, r8
 8001a90:	425b      	negs	r3, r3
 8001a92:	18c7      	adds	r7, r0, r3
 8001a94:	023b      	lsls	r3, r7, #8
 8001a96:	d400      	bmi.n	8001a9a <__aeabi_dadd+0x5fe>
 8001a98:	e625      	b.n	80016e6 <__aeabi_dadd+0x24a>
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <__aeabi_dadd+0x674>)
 8001a9c:	2601      	movs	r6, #1
 8001a9e:	401f      	ands	r7, r3
 8001aa0:	e621      	b.n	80016e6 <__aeabi_dadd+0x24a>
 8001aa2:	0004      	movs	r4, r0
 8001aa4:	3a20      	subs	r2, #32
 8001aa6:	40d4      	lsrs	r4, r2
 8001aa8:	4662      	mov	r2, ip
 8001aaa:	2a20      	cmp	r2, #32
 8001aac:	d004      	beq.n	8001ab8 <__aeabi_dadd+0x61c>
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	4666      	mov	r6, ip
 8001ab2:	1b92      	subs	r2, r2, r6
 8001ab4:	4090      	lsls	r0, r2
 8001ab6:	4303      	orrs	r3, r0
 8001ab8:	1e5a      	subs	r2, r3, #1
 8001aba:	4193      	sbcs	r3, r2
 8001abc:	431c      	orrs	r4, r3
 8001abe:	e67e      	b.n	80017be <__aeabi_dadd+0x322>
 8001ac0:	185c      	adds	r4, r3, r1
 8001ac2:	428c      	cmp	r4, r1
 8001ac4:	4189      	sbcs	r1, r1
 8001ac6:	4440      	add	r0, r8
 8001ac8:	4249      	negs	r1, r1
 8001aca:	1847      	adds	r7, r0, r1
 8001acc:	e6dd      	b.n	800188a <__aeabi_dadd+0x3ee>
 8001ace:	0023      	movs	r3, r4
 8001ad0:	433b      	orrs	r3, r7
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dadd+0x63a>
 8001ad4:	e6ad      	b.n	8001832 <__aeabi_dadd+0x396>
 8001ad6:	e606      	b.n	80016e6 <__aeabi_dadd+0x24a>
 8001ad8:	0744      	lsls	r4, r0, #29
 8001ada:	4323      	orrs	r3, r4
 8001adc:	2480      	movs	r4, #128	; 0x80
 8001ade:	08c0      	lsrs	r0, r0, #3
 8001ae0:	0324      	lsls	r4, r4, #12
 8001ae2:	4220      	tst	r0, r4
 8001ae4:	d008      	beq.n	8001af8 <__aeabi_dadd+0x65c>
 8001ae6:	4642      	mov	r2, r8
 8001ae8:	08d6      	lsrs	r6, r2, #3
 8001aea:	4226      	tst	r6, r4
 8001aec:	d104      	bne.n	8001af8 <__aeabi_dadd+0x65c>
 8001aee:	4655      	mov	r5, sl
 8001af0:	0030      	movs	r0, r6
 8001af2:	08cb      	lsrs	r3, r1, #3
 8001af4:	0751      	lsls	r1, r2, #29
 8001af6:	430b      	orrs	r3, r1
 8001af8:	0f5a      	lsrs	r2, r3, #29
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	0752      	lsls	r2, r2, #29
 8001b00:	4313      	orrs	r3, r2
 8001b02:	e619      	b.n	8001738 <__aeabi_dadd+0x29c>
 8001b04:	2300      	movs	r3, #0
 8001b06:	4a01      	ldr	r2, [pc, #4]	; (8001b0c <__aeabi_dadd+0x670>)
 8001b08:	001f      	movs	r7, r3
 8001b0a:	e55e      	b.n	80015ca <__aeabi_dadd+0x12e>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff

08001b14 <__aeabi_ddiv>:
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	4657      	mov	r7, sl
 8001b18:	464e      	mov	r6, r9
 8001b1a:	4645      	mov	r5, r8
 8001b1c:	46de      	mov	lr, fp
 8001b1e:	b5e0      	push	{r5, r6, r7, lr}
 8001b20:	4681      	mov	r9, r0
 8001b22:	0005      	movs	r5, r0
 8001b24:	030c      	lsls	r4, r1, #12
 8001b26:	0048      	lsls	r0, r1, #1
 8001b28:	4692      	mov	sl, r2
 8001b2a:	001f      	movs	r7, r3
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	0b24      	lsrs	r4, r4, #12
 8001b30:	0d40      	lsrs	r0, r0, #21
 8001b32:	0fce      	lsrs	r6, r1, #31
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d100      	bne.n	8001b3a <__aeabi_ddiv+0x26>
 8001b38:	e156      	b.n	8001de8 <__aeabi_ddiv+0x2d4>
 8001b3a:	4bd4      	ldr	r3, [pc, #848]	; (8001e8c <__aeabi_ddiv+0x378>)
 8001b3c:	4298      	cmp	r0, r3
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_ddiv+0x2e>
 8001b40:	e172      	b.n	8001e28 <__aeabi_ddiv+0x314>
 8001b42:	0f6b      	lsrs	r3, r5, #29
 8001b44:	00e4      	lsls	r4, r4, #3
 8001b46:	431c      	orrs	r4, r3
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	041b      	lsls	r3, r3, #16
 8001b4c:	4323      	orrs	r3, r4
 8001b4e:	4698      	mov	r8, r3
 8001b50:	4bcf      	ldr	r3, [pc, #828]	; (8001e90 <__aeabi_ddiv+0x37c>)
 8001b52:	00ed      	lsls	r5, r5, #3
 8001b54:	469b      	mov	fp, r3
 8001b56:	2300      	movs	r3, #0
 8001b58:	4699      	mov	r9, r3
 8001b5a:	4483      	add	fp, r0
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	033c      	lsls	r4, r7, #12
 8001b60:	007b      	lsls	r3, r7, #1
 8001b62:	4650      	mov	r0, sl
 8001b64:	0b24      	lsrs	r4, r4, #12
 8001b66:	0d5b      	lsrs	r3, r3, #21
 8001b68:	0fff      	lsrs	r7, r7, #31
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_ddiv+0x5c>
 8001b6e:	e11f      	b.n	8001db0 <__aeabi_ddiv+0x29c>
 8001b70:	4ac6      	ldr	r2, [pc, #792]	; (8001e8c <__aeabi_ddiv+0x378>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d100      	bne.n	8001b78 <__aeabi_ddiv+0x64>
 8001b76:	e162      	b.n	8001e3e <__aeabi_ddiv+0x32a>
 8001b78:	49c5      	ldr	r1, [pc, #788]	; (8001e90 <__aeabi_ddiv+0x37c>)
 8001b7a:	0f42      	lsrs	r2, r0, #29
 8001b7c:	468c      	mov	ip, r1
 8001b7e:	00e4      	lsls	r4, r4, #3
 8001b80:	4659      	mov	r1, fp
 8001b82:	4314      	orrs	r4, r2
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	4463      	add	r3, ip
 8001b88:	0412      	lsls	r2, r2, #16
 8001b8a:	1acb      	subs	r3, r1, r3
 8001b8c:	4314      	orrs	r4, r2
 8001b8e:	469b      	mov	fp, r3
 8001b90:	00c2      	lsls	r2, r0, #3
 8001b92:	2000      	movs	r0, #0
 8001b94:	0033      	movs	r3, r6
 8001b96:	407b      	eors	r3, r7
 8001b98:	469a      	mov	sl, r3
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d827      	bhi.n	8001bf0 <__aeabi_ddiv+0xdc>
 8001ba0:	49bc      	ldr	r1, [pc, #752]	; (8001e94 <__aeabi_ddiv+0x380>)
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	58cb      	ldr	r3, [r1, r3]
 8001ba6:	469f      	mov	pc, r3
 8001ba8:	46b2      	mov	sl, r6
 8001baa:	9b00      	ldr	r3, [sp, #0]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d016      	beq.n	8001bde <__aeabi_ddiv+0xca>
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_ddiv+0xa2>
 8001bb4:	e28e      	b.n	80020d4 <__aeabi_ddiv+0x5c0>
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_ddiv+0xa8>
 8001bba:	e0d9      	b.n	8001d70 <__aeabi_ddiv+0x25c>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	4652      	mov	r2, sl
 8001bc4:	051b      	lsls	r3, r3, #20
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	07d2      	lsls	r2, r2, #31
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	0028      	movs	r0, r5
 8001bce:	0019      	movs	r1, r3
 8001bd0:	b005      	add	sp, #20
 8001bd2:	bcf0      	pop	{r4, r5, r6, r7}
 8001bd4:	46bb      	mov	fp, r7
 8001bd6:	46b2      	mov	sl, r6
 8001bd8:	46a9      	mov	r9, r5
 8001bda:	46a0      	mov	r8, r4
 8001bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bde:	2400      	movs	r4, #0
 8001be0:	2500      	movs	r5, #0
 8001be2:	4baa      	ldr	r3, [pc, #680]	; (8001e8c <__aeabi_ddiv+0x378>)
 8001be4:	e7ed      	b.n	8001bc2 <__aeabi_ddiv+0xae>
 8001be6:	46ba      	mov	sl, r7
 8001be8:	46a0      	mov	r8, r4
 8001bea:	0015      	movs	r5, r2
 8001bec:	9000      	str	r0, [sp, #0]
 8001bee:	e7dc      	b.n	8001baa <__aeabi_ddiv+0x96>
 8001bf0:	4544      	cmp	r4, r8
 8001bf2:	d200      	bcs.n	8001bf6 <__aeabi_ddiv+0xe2>
 8001bf4:	e1c7      	b.n	8001f86 <__aeabi_ddiv+0x472>
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_ddiv+0xe6>
 8001bf8:	e1c2      	b.n	8001f80 <__aeabi_ddiv+0x46c>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	469c      	mov	ip, r3
 8001c00:	002e      	movs	r6, r5
 8001c02:	4640      	mov	r0, r8
 8001c04:	2500      	movs	r5, #0
 8001c06:	44e3      	add	fp, ip
 8001c08:	0223      	lsls	r3, r4, #8
 8001c0a:	0e14      	lsrs	r4, r2, #24
 8001c0c:	431c      	orrs	r4, r3
 8001c0e:	0c1b      	lsrs	r3, r3, #16
 8001c10:	4699      	mov	r9, r3
 8001c12:	0423      	lsls	r3, r4, #16
 8001c14:	0c1f      	lsrs	r7, r3, #16
 8001c16:	0212      	lsls	r2, r2, #8
 8001c18:	4649      	mov	r1, r9
 8001c1a:	9200      	str	r2, [sp, #0]
 8001c1c:	9701      	str	r7, [sp, #4]
 8001c1e:	f7fe fb1f 	bl	8000260 <__aeabi_uidivmod>
 8001c22:	0002      	movs	r2, r0
 8001c24:	437a      	muls	r2, r7
 8001c26:	040b      	lsls	r3, r1, #16
 8001c28:	0c31      	lsrs	r1, r6, #16
 8001c2a:	4680      	mov	r8, r0
 8001c2c:	4319      	orrs	r1, r3
 8001c2e:	428a      	cmp	r2, r1
 8001c30:	d907      	bls.n	8001c42 <__aeabi_ddiv+0x12e>
 8001c32:	2301      	movs	r3, #1
 8001c34:	425b      	negs	r3, r3
 8001c36:	469c      	mov	ip, r3
 8001c38:	1909      	adds	r1, r1, r4
 8001c3a:	44e0      	add	r8, ip
 8001c3c:	428c      	cmp	r4, r1
 8001c3e:	d800      	bhi.n	8001c42 <__aeabi_ddiv+0x12e>
 8001c40:	e207      	b.n	8002052 <__aeabi_ddiv+0x53e>
 8001c42:	1a88      	subs	r0, r1, r2
 8001c44:	4649      	mov	r1, r9
 8001c46:	f7fe fb0b 	bl	8000260 <__aeabi_uidivmod>
 8001c4a:	0409      	lsls	r1, r1, #16
 8001c4c:	468c      	mov	ip, r1
 8001c4e:	0431      	lsls	r1, r6, #16
 8001c50:	4666      	mov	r6, ip
 8001c52:	9a01      	ldr	r2, [sp, #4]
 8001c54:	0c09      	lsrs	r1, r1, #16
 8001c56:	4342      	muls	r2, r0
 8001c58:	0003      	movs	r3, r0
 8001c5a:	4331      	orrs	r1, r6
 8001c5c:	428a      	cmp	r2, r1
 8001c5e:	d904      	bls.n	8001c6a <__aeabi_ddiv+0x156>
 8001c60:	1909      	adds	r1, r1, r4
 8001c62:	3b01      	subs	r3, #1
 8001c64:	428c      	cmp	r4, r1
 8001c66:	d800      	bhi.n	8001c6a <__aeabi_ddiv+0x156>
 8001c68:	e1ed      	b.n	8002046 <__aeabi_ddiv+0x532>
 8001c6a:	1a88      	subs	r0, r1, r2
 8001c6c:	4642      	mov	r2, r8
 8001c6e:	0412      	lsls	r2, r2, #16
 8001c70:	431a      	orrs	r2, r3
 8001c72:	4690      	mov	r8, r2
 8001c74:	4641      	mov	r1, r8
 8001c76:	9b00      	ldr	r3, [sp, #0]
 8001c78:	040e      	lsls	r6, r1, #16
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	001f      	movs	r7, r3
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	9b00      	ldr	r3, [sp, #0]
 8001c82:	0c36      	lsrs	r6, r6, #16
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	0c19      	lsrs	r1, r3, #16
 8001c88:	000b      	movs	r3, r1
 8001c8a:	4373      	muls	r3, r6
 8001c8c:	0c12      	lsrs	r2, r2, #16
 8001c8e:	437e      	muls	r6, r7
 8001c90:	9103      	str	r1, [sp, #12]
 8001c92:	4351      	muls	r1, r2
 8001c94:	437a      	muls	r2, r7
 8001c96:	0c1f      	lsrs	r7, r3, #16
 8001c98:	46bc      	mov	ip, r7
 8001c9a:	1876      	adds	r6, r6, r1
 8001c9c:	4466      	add	r6, ip
 8001c9e:	42b1      	cmp	r1, r6
 8001ca0:	d903      	bls.n	8001caa <__aeabi_ddiv+0x196>
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	0249      	lsls	r1, r1, #9
 8001ca6:	468c      	mov	ip, r1
 8001ca8:	4462      	add	r2, ip
 8001caa:	0c31      	lsrs	r1, r6, #16
 8001cac:	188a      	adds	r2, r1, r2
 8001cae:	0431      	lsls	r1, r6, #16
 8001cb0:	041e      	lsls	r6, r3, #16
 8001cb2:	0c36      	lsrs	r6, r6, #16
 8001cb4:	198e      	adds	r6, r1, r6
 8001cb6:	4290      	cmp	r0, r2
 8001cb8:	d302      	bcc.n	8001cc0 <__aeabi_ddiv+0x1ac>
 8001cba:	d112      	bne.n	8001ce2 <__aeabi_ddiv+0x1ce>
 8001cbc:	42b5      	cmp	r5, r6
 8001cbe:	d210      	bcs.n	8001ce2 <__aeabi_ddiv+0x1ce>
 8001cc0:	4643      	mov	r3, r8
 8001cc2:	1e59      	subs	r1, r3, #1
 8001cc4:	9b00      	ldr	r3, [sp, #0]
 8001cc6:	469c      	mov	ip, r3
 8001cc8:	4465      	add	r5, ip
 8001cca:	001f      	movs	r7, r3
 8001ccc:	429d      	cmp	r5, r3
 8001cce:	419b      	sbcs	r3, r3
 8001cd0:	425b      	negs	r3, r3
 8001cd2:	191b      	adds	r3, r3, r4
 8001cd4:	18c0      	adds	r0, r0, r3
 8001cd6:	4284      	cmp	r4, r0
 8001cd8:	d200      	bcs.n	8001cdc <__aeabi_ddiv+0x1c8>
 8001cda:	e1a0      	b.n	800201e <__aeabi_ddiv+0x50a>
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x1cc>
 8001cde:	e19b      	b.n	8002018 <__aeabi_ddiv+0x504>
 8001ce0:	4688      	mov	r8, r1
 8001ce2:	1bae      	subs	r6, r5, r6
 8001ce4:	42b5      	cmp	r5, r6
 8001ce6:	41ad      	sbcs	r5, r5
 8001ce8:	1a80      	subs	r0, r0, r2
 8001cea:	426d      	negs	r5, r5
 8001cec:	1b40      	subs	r0, r0, r5
 8001cee:	4284      	cmp	r4, r0
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_ddiv+0x1e0>
 8001cf2:	e1d5      	b.n	80020a0 <__aeabi_ddiv+0x58c>
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	f7fe fab3 	bl	8000260 <__aeabi_uidivmod>
 8001cfa:	9a01      	ldr	r2, [sp, #4]
 8001cfc:	040b      	lsls	r3, r1, #16
 8001cfe:	4342      	muls	r2, r0
 8001d00:	0c31      	lsrs	r1, r6, #16
 8001d02:	0005      	movs	r5, r0
 8001d04:	4319      	orrs	r1, r3
 8001d06:	428a      	cmp	r2, r1
 8001d08:	d900      	bls.n	8001d0c <__aeabi_ddiv+0x1f8>
 8001d0a:	e16c      	b.n	8001fe6 <__aeabi_ddiv+0x4d2>
 8001d0c:	1a88      	subs	r0, r1, r2
 8001d0e:	4649      	mov	r1, r9
 8001d10:	f7fe faa6 	bl	8000260 <__aeabi_uidivmod>
 8001d14:	9a01      	ldr	r2, [sp, #4]
 8001d16:	0436      	lsls	r6, r6, #16
 8001d18:	4342      	muls	r2, r0
 8001d1a:	0409      	lsls	r1, r1, #16
 8001d1c:	0c36      	lsrs	r6, r6, #16
 8001d1e:	0003      	movs	r3, r0
 8001d20:	430e      	orrs	r6, r1
 8001d22:	42b2      	cmp	r2, r6
 8001d24:	d900      	bls.n	8001d28 <__aeabi_ddiv+0x214>
 8001d26:	e153      	b.n	8001fd0 <__aeabi_ddiv+0x4bc>
 8001d28:	9803      	ldr	r0, [sp, #12]
 8001d2a:	1ab6      	subs	r6, r6, r2
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	042d      	lsls	r5, r5, #16
 8001d30:	431d      	orrs	r5, r3
 8001d32:	9f02      	ldr	r7, [sp, #8]
 8001d34:	042b      	lsls	r3, r5, #16
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	435a      	muls	r2, r3
 8001d3a:	437b      	muls	r3, r7
 8001d3c:	469c      	mov	ip, r3
 8001d3e:	0c29      	lsrs	r1, r5, #16
 8001d40:	4348      	muls	r0, r1
 8001d42:	0c13      	lsrs	r3, r2, #16
 8001d44:	4484      	add	ip, r0
 8001d46:	4463      	add	r3, ip
 8001d48:	4379      	muls	r1, r7
 8001d4a:	4298      	cmp	r0, r3
 8001d4c:	d903      	bls.n	8001d56 <__aeabi_ddiv+0x242>
 8001d4e:	2080      	movs	r0, #128	; 0x80
 8001d50:	0240      	lsls	r0, r0, #9
 8001d52:	4684      	mov	ip, r0
 8001d54:	4461      	add	r1, ip
 8001d56:	0c18      	lsrs	r0, r3, #16
 8001d58:	0412      	lsls	r2, r2, #16
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	0c12      	lsrs	r2, r2, #16
 8001d5e:	1841      	adds	r1, r0, r1
 8001d60:	189b      	adds	r3, r3, r2
 8001d62:	428e      	cmp	r6, r1
 8001d64:	d200      	bcs.n	8001d68 <__aeabi_ddiv+0x254>
 8001d66:	e0ff      	b.n	8001f68 <__aeabi_ddiv+0x454>
 8001d68:	d100      	bne.n	8001d6c <__aeabi_ddiv+0x258>
 8001d6a:	e0fa      	b.n	8001f62 <__aeabi_ddiv+0x44e>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	431d      	orrs	r5, r3
 8001d70:	4a49      	ldr	r2, [pc, #292]	; (8001e98 <__aeabi_ddiv+0x384>)
 8001d72:	445a      	add	r2, fp
 8001d74:	2a00      	cmp	r2, #0
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_ddiv+0x266>
 8001d78:	e0aa      	b.n	8001ed0 <__aeabi_ddiv+0x3bc>
 8001d7a:	076b      	lsls	r3, r5, #29
 8001d7c:	d000      	beq.n	8001d80 <__aeabi_ddiv+0x26c>
 8001d7e:	e13d      	b.n	8001ffc <__aeabi_ddiv+0x4e8>
 8001d80:	08ed      	lsrs	r5, r5, #3
 8001d82:	4643      	mov	r3, r8
 8001d84:	01db      	lsls	r3, r3, #7
 8001d86:	d506      	bpl.n	8001d96 <__aeabi_ddiv+0x282>
 8001d88:	4642      	mov	r2, r8
 8001d8a:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <__aeabi_ddiv+0x388>)
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	4690      	mov	r8, r2
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	00d2      	lsls	r2, r2, #3
 8001d94:	445a      	add	r2, fp
 8001d96:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <__aeabi_ddiv+0x38c>)
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dd00      	ble.n	8001d9e <__aeabi_ddiv+0x28a>
 8001d9c:	e71f      	b.n	8001bde <__aeabi_ddiv+0xca>
 8001d9e:	4643      	mov	r3, r8
 8001da0:	075b      	lsls	r3, r3, #29
 8001da2:	431d      	orrs	r5, r3
 8001da4:	4643      	mov	r3, r8
 8001da6:	0552      	lsls	r2, r2, #21
 8001da8:	025c      	lsls	r4, r3, #9
 8001daa:	0b24      	lsrs	r4, r4, #12
 8001dac:	0d53      	lsrs	r3, r2, #21
 8001dae:	e708      	b.n	8001bc2 <__aeabi_ddiv+0xae>
 8001db0:	4652      	mov	r2, sl
 8001db2:	4322      	orrs	r2, r4
 8001db4:	d100      	bne.n	8001db8 <__aeabi_ddiv+0x2a4>
 8001db6:	e07b      	b.n	8001eb0 <__aeabi_ddiv+0x39c>
 8001db8:	2c00      	cmp	r4, #0
 8001dba:	d100      	bne.n	8001dbe <__aeabi_ddiv+0x2aa>
 8001dbc:	e0fa      	b.n	8001fb4 <__aeabi_ddiv+0x4a0>
 8001dbe:	0020      	movs	r0, r4
 8001dc0:	f001 fa22 	bl	8003208 <__clzsi2>
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	3a0b      	subs	r2, #11
 8001dc8:	231d      	movs	r3, #29
 8001dca:	0001      	movs	r1, r0
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	4652      	mov	r2, sl
 8001dd0:	3908      	subs	r1, #8
 8001dd2:	40da      	lsrs	r2, r3
 8001dd4:	408c      	lsls	r4, r1
 8001dd6:	4314      	orrs	r4, r2
 8001dd8:	4652      	mov	r2, sl
 8001dda:	408a      	lsls	r2, r1
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <__aeabi_ddiv+0x390>)
 8001dde:	4458      	add	r0, fp
 8001de0:	469b      	mov	fp, r3
 8001de2:	4483      	add	fp, r0
 8001de4:	2000      	movs	r0, #0
 8001de6:	e6d5      	b.n	8001b94 <__aeabi_ddiv+0x80>
 8001de8:	464b      	mov	r3, r9
 8001dea:	4323      	orrs	r3, r4
 8001dec:	4698      	mov	r8, r3
 8001dee:	d044      	beq.n	8001e7a <__aeabi_ddiv+0x366>
 8001df0:	2c00      	cmp	r4, #0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_ddiv+0x2e2>
 8001df4:	e0ce      	b.n	8001f94 <__aeabi_ddiv+0x480>
 8001df6:	0020      	movs	r0, r4
 8001df8:	f001 fa06 	bl	8003208 <__clzsi2>
 8001dfc:	0001      	movs	r1, r0
 8001dfe:	0002      	movs	r2, r0
 8001e00:	390b      	subs	r1, #11
 8001e02:	231d      	movs	r3, #29
 8001e04:	1a5b      	subs	r3, r3, r1
 8001e06:	4649      	mov	r1, r9
 8001e08:	0010      	movs	r0, r2
 8001e0a:	40d9      	lsrs	r1, r3
 8001e0c:	3808      	subs	r0, #8
 8001e0e:	4084      	lsls	r4, r0
 8001e10:	000b      	movs	r3, r1
 8001e12:	464d      	mov	r5, r9
 8001e14:	4323      	orrs	r3, r4
 8001e16:	4698      	mov	r8, r3
 8001e18:	4085      	lsls	r5, r0
 8001e1a:	4823      	ldr	r0, [pc, #140]	; (8001ea8 <__aeabi_ddiv+0x394>)
 8001e1c:	1a83      	subs	r3, r0, r2
 8001e1e:	469b      	mov	fp, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	4699      	mov	r9, r3
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	e69a      	b.n	8001b5e <__aeabi_ddiv+0x4a>
 8001e28:	464b      	mov	r3, r9
 8001e2a:	4323      	orrs	r3, r4
 8001e2c:	4698      	mov	r8, r3
 8001e2e:	d11d      	bne.n	8001e6c <__aeabi_ddiv+0x358>
 8001e30:	2308      	movs	r3, #8
 8001e32:	4699      	mov	r9, r3
 8001e34:	3b06      	subs	r3, #6
 8001e36:	2500      	movs	r5, #0
 8001e38:	4683      	mov	fp, r0
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e68f      	b.n	8001b5e <__aeabi_ddiv+0x4a>
 8001e3e:	4652      	mov	r2, sl
 8001e40:	4322      	orrs	r2, r4
 8001e42:	d109      	bne.n	8001e58 <__aeabi_ddiv+0x344>
 8001e44:	2302      	movs	r3, #2
 8001e46:	4649      	mov	r1, r9
 8001e48:	4319      	orrs	r1, r3
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <__aeabi_ddiv+0x398>)
 8001e4c:	4689      	mov	r9, r1
 8001e4e:	469c      	mov	ip, r3
 8001e50:	2400      	movs	r4, #0
 8001e52:	2002      	movs	r0, #2
 8001e54:	44e3      	add	fp, ip
 8001e56:	e69d      	b.n	8001b94 <__aeabi_ddiv+0x80>
 8001e58:	2303      	movs	r3, #3
 8001e5a:	464a      	mov	r2, r9
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <__aeabi_ddiv+0x398>)
 8001e60:	4691      	mov	r9, r2
 8001e62:	469c      	mov	ip, r3
 8001e64:	4652      	mov	r2, sl
 8001e66:	2003      	movs	r0, #3
 8001e68:	44e3      	add	fp, ip
 8001e6a:	e693      	b.n	8001b94 <__aeabi_ddiv+0x80>
 8001e6c:	230c      	movs	r3, #12
 8001e6e:	4699      	mov	r9, r3
 8001e70:	3b09      	subs	r3, #9
 8001e72:	46a0      	mov	r8, r4
 8001e74:	4683      	mov	fp, r0
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	e671      	b.n	8001b5e <__aeabi_ddiv+0x4a>
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	4699      	mov	r9, r3
 8001e7e:	2300      	movs	r3, #0
 8001e80:	469b      	mov	fp, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	2500      	movs	r5, #0
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	e669      	b.n	8001b5e <__aeabi_ddiv+0x4a>
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	000007ff 	.word	0x000007ff
 8001e90:	fffffc01 	.word	0xfffffc01
 8001e94:	0800f894 	.word	0x0800f894
 8001e98:	000003ff 	.word	0x000003ff
 8001e9c:	feffffff 	.word	0xfeffffff
 8001ea0:	000007fe 	.word	0x000007fe
 8001ea4:	000003f3 	.word	0x000003f3
 8001ea8:	fffffc0d 	.word	0xfffffc0d
 8001eac:	fffff801 	.word	0xfffff801
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	4319      	orrs	r1, r3
 8001eb6:	4689      	mov	r9, r1
 8001eb8:	2400      	movs	r4, #0
 8001eba:	2001      	movs	r0, #1
 8001ebc:	e66a      	b.n	8001b94 <__aeabi_ddiv+0x80>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2480      	movs	r4, #128	; 0x80
 8001ec2:	469a      	mov	sl, r3
 8001ec4:	2500      	movs	r5, #0
 8001ec6:	4b8a      	ldr	r3, [pc, #552]	; (80020f0 <__aeabi_ddiv+0x5dc>)
 8001ec8:	0324      	lsls	r4, r4, #12
 8001eca:	e67a      	b.n	8001bc2 <__aeabi_ddiv+0xae>
 8001ecc:	2501      	movs	r5, #1
 8001ece:	426d      	negs	r5, r5
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	2b38      	cmp	r3, #56	; 0x38
 8001ed6:	dd00      	ble.n	8001eda <__aeabi_ddiv+0x3c6>
 8001ed8:	e670      	b.n	8001bbc <__aeabi_ddiv+0xa8>
 8001eda:	2b1f      	cmp	r3, #31
 8001edc:	dc00      	bgt.n	8001ee0 <__aeabi_ddiv+0x3cc>
 8001ede:	e0bf      	b.n	8002060 <__aeabi_ddiv+0x54c>
 8001ee0:	211f      	movs	r1, #31
 8001ee2:	4249      	negs	r1, r1
 8001ee4:	1a8a      	subs	r2, r1, r2
 8001ee6:	4641      	mov	r1, r8
 8001ee8:	40d1      	lsrs	r1, r2
 8001eea:	000a      	movs	r2, r1
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d004      	beq.n	8001efa <__aeabi_ddiv+0x3e6>
 8001ef0:	4641      	mov	r1, r8
 8001ef2:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <__aeabi_ddiv+0x5e0>)
 8001ef4:	445b      	add	r3, fp
 8001ef6:	4099      	lsls	r1, r3
 8001ef8:	430d      	orrs	r5, r1
 8001efa:	1e6b      	subs	r3, r5, #1
 8001efc:	419d      	sbcs	r5, r3
 8001efe:	2307      	movs	r3, #7
 8001f00:	432a      	orrs	r2, r5
 8001f02:	001d      	movs	r5, r3
 8001f04:	2400      	movs	r4, #0
 8001f06:	4015      	ands	r5, r2
 8001f08:	4213      	tst	r3, r2
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_ddiv+0x3fa>
 8001f0c:	e0d4      	b.n	80020b8 <__aeabi_ddiv+0x5a4>
 8001f0e:	210f      	movs	r1, #15
 8001f10:	2300      	movs	r3, #0
 8001f12:	4011      	ands	r1, r2
 8001f14:	2904      	cmp	r1, #4
 8001f16:	d100      	bne.n	8001f1a <__aeabi_ddiv+0x406>
 8001f18:	e0cb      	b.n	80020b2 <__aeabi_ddiv+0x59e>
 8001f1a:	1d11      	adds	r1, r2, #4
 8001f1c:	4291      	cmp	r1, r2
 8001f1e:	4192      	sbcs	r2, r2
 8001f20:	4252      	negs	r2, r2
 8001f22:	189b      	adds	r3, r3, r2
 8001f24:	000a      	movs	r2, r1
 8001f26:	0219      	lsls	r1, r3, #8
 8001f28:	d400      	bmi.n	8001f2c <__aeabi_ddiv+0x418>
 8001f2a:	e0c2      	b.n	80020b2 <__aeabi_ddiv+0x59e>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	2400      	movs	r4, #0
 8001f30:	2500      	movs	r5, #0
 8001f32:	e646      	b.n	8001bc2 <__aeabi_ddiv+0xae>
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	4641      	mov	r1, r8
 8001f38:	031b      	lsls	r3, r3, #12
 8001f3a:	4219      	tst	r1, r3
 8001f3c:	d008      	beq.n	8001f50 <__aeabi_ddiv+0x43c>
 8001f3e:	421c      	tst	r4, r3
 8001f40:	d106      	bne.n	8001f50 <__aeabi_ddiv+0x43c>
 8001f42:	431c      	orrs	r4, r3
 8001f44:	0324      	lsls	r4, r4, #12
 8001f46:	46ba      	mov	sl, r7
 8001f48:	0015      	movs	r5, r2
 8001f4a:	4b69      	ldr	r3, [pc, #420]	; (80020f0 <__aeabi_ddiv+0x5dc>)
 8001f4c:	0b24      	lsrs	r4, r4, #12
 8001f4e:	e638      	b.n	8001bc2 <__aeabi_ddiv+0xae>
 8001f50:	2480      	movs	r4, #128	; 0x80
 8001f52:	4643      	mov	r3, r8
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	431c      	orrs	r4, r3
 8001f58:	0324      	lsls	r4, r4, #12
 8001f5a:	46b2      	mov	sl, r6
 8001f5c:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <__aeabi_ddiv+0x5dc>)
 8001f5e:	0b24      	lsrs	r4, r4, #12
 8001f60:	e62f      	b.n	8001bc2 <__aeabi_ddiv+0xae>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d100      	bne.n	8001f68 <__aeabi_ddiv+0x454>
 8001f66:	e703      	b.n	8001d70 <__aeabi_ddiv+0x25c>
 8001f68:	19a6      	adds	r6, r4, r6
 8001f6a:	1e68      	subs	r0, r5, #1
 8001f6c:	42a6      	cmp	r6, r4
 8001f6e:	d200      	bcs.n	8001f72 <__aeabi_ddiv+0x45e>
 8001f70:	e08d      	b.n	800208e <__aeabi_ddiv+0x57a>
 8001f72:	428e      	cmp	r6, r1
 8001f74:	d200      	bcs.n	8001f78 <__aeabi_ddiv+0x464>
 8001f76:	e0a3      	b.n	80020c0 <__aeabi_ddiv+0x5ac>
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x468>
 8001f7a:	e0b3      	b.n	80020e4 <__aeabi_ddiv+0x5d0>
 8001f7c:	0005      	movs	r5, r0
 8001f7e:	e6f5      	b.n	8001d6c <__aeabi_ddiv+0x258>
 8001f80:	42aa      	cmp	r2, r5
 8001f82:	d900      	bls.n	8001f86 <__aeabi_ddiv+0x472>
 8001f84:	e639      	b.n	8001bfa <__aeabi_ddiv+0xe6>
 8001f86:	4643      	mov	r3, r8
 8001f88:	07de      	lsls	r6, r3, #31
 8001f8a:	0858      	lsrs	r0, r3, #1
 8001f8c:	086b      	lsrs	r3, r5, #1
 8001f8e:	431e      	orrs	r6, r3
 8001f90:	07ed      	lsls	r5, r5, #31
 8001f92:	e639      	b.n	8001c08 <__aeabi_ddiv+0xf4>
 8001f94:	4648      	mov	r0, r9
 8001f96:	f001 f937 	bl	8003208 <__clzsi2>
 8001f9a:	0001      	movs	r1, r0
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	3115      	adds	r1, #21
 8001fa0:	3220      	adds	r2, #32
 8001fa2:	291c      	cmp	r1, #28
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_ddiv+0x494>
 8001fa6:	e72c      	b.n	8001e02 <__aeabi_ddiv+0x2ee>
 8001fa8:	464b      	mov	r3, r9
 8001faa:	3808      	subs	r0, #8
 8001fac:	4083      	lsls	r3, r0
 8001fae:	2500      	movs	r5, #0
 8001fb0:	4698      	mov	r8, r3
 8001fb2:	e732      	b.n	8001e1a <__aeabi_ddiv+0x306>
 8001fb4:	f001 f928 	bl	8003208 <__clzsi2>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	001a      	movs	r2, r3
 8001fbc:	3215      	adds	r2, #21
 8001fbe:	3020      	adds	r0, #32
 8001fc0:	2a1c      	cmp	r2, #28
 8001fc2:	dc00      	bgt.n	8001fc6 <__aeabi_ddiv+0x4b2>
 8001fc4:	e700      	b.n	8001dc8 <__aeabi_ddiv+0x2b4>
 8001fc6:	4654      	mov	r4, sl
 8001fc8:	3b08      	subs	r3, #8
 8001fca:	2200      	movs	r2, #0
 8001fcc:	409c      	lsls	r4, r3
 8001fce:	e705      	b.n	8001ddc <__aeabi_ddiv+0x2c8>
 8001fd0:	1936      	adds	r6, r6, r4
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	42b4      	cmp	r4, r6
 8001fd6:	d900      	bls.n	8001fda <__aeabi_ddiv+0x4c6>
 8001fd8:	e6a6      	b.n	8001d28 <__aeabi_ddiv+0x214>
 8001fda:	42b2      	cmp	r2, r6
 8001fdc:	d800      	bhi.n	8001fe0 <__aeabi_ddiv+0x4cc>
 8001fde:	e6a3      	b.n	8001d28 <__aeabi_ddiv+0x214>
 8001fe0:	1e83      	subs	r3, r0, #2
 8001fe2:	1936      	adds	r6, r6, r4
 8001fe4:	e6a0      	b.n	8001d28 <__aeabi_ddiv+0x214>
 8001fe6:	1909      	adds	r1, r1, r4
 8001fe8:	3d01      	subs	r5, #1
 8001fea:	428c      	cmp	r4, r1
 8001fec:	d900      	bls.n	8001ff0 <__aeabi_ddiv+0x4dc>
 8001fee:	e68d      	b.n	8001d0c <__aeabi_ddiv+0x1f8>
 8001ff0:	428a      	cmp	r2, r1
 8001ff2:	d800      	bhi.n	8001ff6 <__aeabi_ddiv+0x4e2>
 8001ff4:	e68a      	b.n	8001d0c <__aeabi_ddiv+0x1f8>
 8001ff6:	1e85      	subs	r5, r0, #2
 8001ff8:	1909      	adds	r1, r1, r4
 8001ffa:	e687      	b.n	8001d0c <__aeabi_ddiv+0x1f8>
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	402b      	ands	r3, r5
 8002000:	2b04      	cmp	r3, #4
 8002002:	d100      	bne.n	8002006 <__aeabi_ddiv+0x4f2>
 8002004:	e6bc      	b.n	8001d80 <__aeabi_ddiv+0x26c>
 8002006:	2305      	movs	r3, #5
 8002008:	425b      	negs	r3, r3
 800200a:	42ab      	cmp	r3, r5
 800200c:	419b      	sbcs	r3, r3
 800200e:	3504      	adds	r5, #4
 8002010:	425b      	negs	r3, r3
 8002012:	08ed      	lsrs	r5, r5, #3
 8002014:	4498      	add	r8, r3
 8002016:	e6b4      	b.n	8001d82 <__aeabi_ddiv+0x26e>
 8002018:	42af      	cmp	r7, r5
 800201a:	d900      	bls.n	800201e <__aeabi_ddiv+0x50a>
 800201c:	e660      	b.n	8001ce0 <__aeabi_ddiv+0x1cc>
 800201e:	4282      	cmp	r2, r0
 8002020:	d804      	bhi.n	800202c <__aeabi_ddiv+0x518>
 8002022:	d000      	beq.n	8002026 <__aeabi_ddiv+0x512>
 8002024:	e65c      	b.n	8001ce0 <__aeabi_ddiv+0x1cc>
 8002026:	42ae      	cmp	r6, r5
 8002028:	d800      	bhi.n	800202c <__aeabi_ddiv+0x518>
 800202a:	e659      	b.n	8001ce0 <__aeabi_ddiv+0x1cc>
 800202c:	2302      	movs	r3, #2
 800202e:	425b      	negs	r3, r3
 8002030:	469c      	mov	ip, r3
 8002032:	9b00      	ldr	r3, [sp, #0]
 8002034:	44e0      	add	r8, ip
 8002036:	469c      	mov	ip, r3
 8002038:	4465      	add	r5, ip
 800203a:	429d      	cmp	r5, r3
 800203c:	419b      	sbcs	r3, r3
 800203e:	425b      	negs	r3, r3
 8002040:	191b      	adds	r3, r3, r4
 8002042:	18c0      	adds	r0, r0, r3
 8002044:	e64d      	b.n	8001ce2 <__aeabi_ddiv+0x1ce>
 8002046:	428a      	cmp	r2, r1
 8002048:	d800      	bhi.n	800204c <__aeabi_ddiv+0x538>
 800204a:	e60e      	b.n	8001c6a <__aeabi_ddiv+0x156>
 800204c:	1e83      	subs	r3, r0, #2
 800204e:	1909      	adds	r1, r1, r4
 8002050:	e60b      	b.n	8001c6a <__aeabi_ddiv+0x156>
 8002052:	428a      	cmp	r2, r1
 8002054:	d800      	bhi.n	8002058 <__aeabi_ddiv+0x544>
 8002056:	e5f4      	b.n	8001c42 <__aeabi_ddiv+0x12e>
 8002058:	1e83      	subs	r3, r0, #2
 800205a:	4698      	mov	r8, r3
 800205c:	1909      	adds	r1, r1, r4
 800205e:	e5f0      	b.n	8001c42 <__aeabi_ddiv+0x12e>
 8002060:	4925      	ldr	r1, [pc, #148]	; (80020f8 <__aeabi_ddiv+0x5e4>)
 8002062:	0028      	movs	r0, r5
 8002064:	4459      	add	r1, fp
 8002066:	408d      	lsls	r5, r1
 8002068:	4642      	mov	r2, r8
 800206a:	408a      	lsls	r2, r1
 800206c:	1e69      	subs	r1, r5, #1
 800206e:	418d      	sbcs	r5, r1
 8002070:	4641      	mov	r1, r8
 8002072:	40d8      	lsrs	r0, r3
 8002074:	40d9      	lsrs	r1, r3
 8002076:	4302      	orrs	r2, r0
 8002078:	432a      	orrs	r2, r5
 800207a:	000b      	movs	r3, r1
 800207c:	0751      	lsls	r1, r2, #29
 800207e:	d100      	bne.n	8002082 <__aeabi_ddiv+0x56e>
 8002080:	e751      	b.n	8001f26 <__aeabi_ddiv+0x412>
 8002082:	210f      	movs	r1, #15
 8002084:	4011      	ands	r1, r2
 8002086:	2904      	cmp	r1, #4
 8002088:	d000      	beq.n	800208c <__aeabi_ddiv+0x578>
 800208a:	e746      	b.n	8001f1a <__aeabi_ddiv+0x406>
 800208c:	e74b      	b.n	8001f26 <__aeabi_ddiv+0x412>
 800208e:	0005      	movs	r5, r0
 8002090:	428e      	cmp	r6, r1
 8002092:	d000      	beq.n	8002096 <__aeabi_ddiv+0x582>
 8002094:	e66a      	b.n	8001d6c <__aeabi_ddiv+0x258>
 8002096:	9a00      	ldr	r2, [sp, #0]
 8002098:	4293      	cmp	r3, r2
 800209a:	d000      	beq.n	800209e <__aeabi_ddiv+0x58a>
 800209c:	e666      	b.n	8001d6c <__aeabi_ddiv+0x258>
 800209e:	e667      	b.n	8001d70 <__aeabi_ddiv+0x25c>
 80020a0:	4a16      	ldr	r2, [pc, #88]	; (80020fc <__aeabi_ddiv+0x5e8>)
 80020a2:	445a      	add	r2, fp
 80020a4:	2a00      	cmp	r2, #0
 80020a6:	dc00      	bgt.n	80020aa <__aeabi_ddiv+0x596>
 80020a8:	e710      	b.n	8001ecc <__aeabi_ddiv+0x3b8>
 80020aa:	2301      	movs	r3, #1
 80020ac:	2500      	movs	r5, #0
 80020ae:	4498      	add	r8, r3
 80020b0:	e667      	b.n	8001d82 <__aeabi_ddiv+0x26e>
 80020b2:	075d      	lsls	r5, r3, #29
 80020b4:	025b      	lsls	r3, r3, #9
 80020b6:	0b1c      	lsrs	r4, r3, #12
 80020b8:	08d2      	lsrs	r2, r2, #3
 80020ba:	2300      	movs	r3, #0
 80020bc:	4315      	orrs	r5, r2
 80020be:	e580      	b.n	8001bc2 <__aeabi_ddiv+0xae>
 80020c0:	9800      	ldr	r0, [sp, #0]
 80020c2:	3d02      	subs	r5, #2
 80020c4:	0042      	lsls	r2, r0, #1
 80020c6:	4282      	cmp	r2, r0
 80020c8:	41bf      	sbcs	r7, r7
 80020ca:	427f      	negs	r7, r7
 80020cc:	193c      	adds	r4, r7, r4
 80020ce:	1936      	adds	r6, r6, r4
 80020d0:	9200      	str	r2, [sp, #0]
 80020d2:	e7dd      	b.n	8002090 <__aeabi_ddiv+0x57c>
 80020d4:	2480      	movs	r4, #128	; 0x80
 80020d6:	4643      	mov	r3, r8
 80020d8:	0324      	lsls	r4, r4, #12
 80020da:	431c      	orrs	r4, r3
 80020dc:	0324      	lsls	r4, r4, #12
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__aeabi_ddiv+0x5dc>)
 80020e0:	0b24      	lsrs	r4, r4, #12
 80020e2:	e56e      	b.n	8001bc2 <__aeabi_ddiv+0xae>
 80020e4:	9a00      	ldr	r2, [sp, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d3ea      	bcc.n	80020c0 <__aeabi_ddiv+0x5ac>
 80020ea:	0005      	movs	r5, r0
 80020ec:	e7d3      	b.n	8002096 <__aeabi_ddiv+0x582>
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	000007ff 	.word	0x000007ff
 80020f4:	0000043e 	.word	0x0000043e
 80020f8:	0000041e 	.word	0x0000041e
 80020fc:	000003ff 	.word	0x000003ff

08002100 <__eqdf2>:
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	464e      	mov	r6, r9
 8002104:	4645      	mov	r5, r8
 8002106:	46de      	mov	lr, fp
 8002108:	4657      	mov	r7, sl
 800210a:	4690      	mov	r8, r2
 800210c:	b5e0      	push	{r5, r6, r7, lr}
 800210e:	0017      	movs	r7, r2
 8002110:	031a      	lsls	r2, r3, #12
 8002112:	0b12      	lsrs	r2, r2, #12
 8002114:	0005      	movs	r5, r0
 8002116:	4684      	mov	ip, r0
 8002118:	4819      	ldr	r0, [pc, #100]	; (8002180 <__eqdf2+0x80>)
 800211a:	030e      	lsls	r6, r1, #12
 800211c:	004c      	lsls	r4, r1, #1
 800211e:	4691      	mov	r9, r2
 8002120:	005a      	lsls	r2, r3, #1
 8002122:	0fdb      	lsrs	r3, r3, #31
 8002124:	469b      	mov	fp, r3
 8002126:	0b36      	lsrs	r6, r6, #12
 8002128:	0d64      	lsrs	r4, r4, #21
 800212a:	0fc9      	lsrs	r1, r1, #31
 800212c:	0d52      	lsrs	r2, r2, #21
 800212e:	4284      	cmp	r4, r0
 8002130:	d019      	beq.n	8002166 <__eqdf2+0x66>
 8002132:	4282      	cmp	r2, r0
 8002134:	d010      	beq.n	8002158 <__eqdf2+0x58>
 8002136:	2001      	movs	r0, #1
 8002138:	4294      	cmp	r4, r2
 800213a:	d10e      	bne.n	800215a <__eqdf2+0x5a>
 800213c:	454e      	cmp	r6, r9
 800213e:	d10c      	bne.n	800215a <__eqdf2+0x5a>
 8002140:	2001      	movs	r0, #1
 8002142:	45c4      	cmp	ip, r8
 8002144:	d109      	bne.n	800215a <__eqdf2+0x5a>
 8002146:	4559      	cmp	r1, fp
 8002148:	d017      	beq.n	800217a <__eqdf2+0x7a>
 800214a:	2c00      	cmp	r4, #0
 800214c:	d105      	bne.n	800215a <__eqdf2+0x5a>
 800214e:	0030      	movs	r0, r6
 8002150:	4328      	orrs	r0, r5
 8002152:	1e43      	subs	r3, r0, #1
 8002154:	4198      	sbcs	r0, r3
 8002156:	e000      	b.n	800215a <__eqdf2+0x5a>
 8002158:	2001      	movs	r0, #1
 800215a:	bcf0      	pop	{r4, r5, r6, r7}
 800215c:	46bb      	mov	fp, r7
 800215e:	46b2      	mov	sl, r6
 8002160:	46a9      	mov	r9, r5
 8002162:	46a0      	mov	r8, r4
 8002164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002166:	0033      	movs	r3, r6
 8002168:	2001      	movs	r0, #1
 800216a:	432b      	orrs	r3, r5
 800216c:	d1f5      	bne.n	800215a <__eqdf2+0x5a>
 800216e:	42a2      	cmp	r2, r4
 8002170:	d1f3      	bne.n	800215a <__eqdf2+0x5a>
 8002172:	464b      	mov	r3, r9
 8002174:	433b      	orrs	r3, r7
 8002176:	d1f0      	bne.n	800215a <__eqdf2+0x5a>
 8002178:	e7e2      	b.n	8002140 <__eqdf2+0x40>
 800217a:	2000      	movs	r0, #0
 800217c:	e7ed      	b.n	800215a <__eqdf2+0x5a>
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	000007ff 	.word	0x000007ff

08002184 <__gedf2>:
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	4647      	mov	r7, r8
 8002188:	46ce      	mov	lr, r9
 800218a:	0004      	movs	r4, r0
 800218c:	0018      	movs	r0, r3
 800218e:	0016      	movs	r6, r2
 8002190:	031b      	lsls	r3, r3, #12
 8002192:	0b1b      	lsrs	r3, r3, #12
 8002194:	4d2d      	ldr	r5, [pc, #180]	; (800224c <__gedf2+0xc8>)
 8002196:	004a      	lsls	r2, r1, #1
 8002198:	4699      	mov	r9, r3
 800219a:	b580      	push	{r7, lr}
 800219c:	0043      	lsls	r3, r0, #1
 800219e:	030f      	lsls	r7, r1, #12
 80021a0:	46a4      	mov	ip, r4
 80021a2:	46b0      	mov	r8, r6
 80021a4:	0b3f      	lsrs	r7, r7, #12
 80021a6:	0d52      	lsrs	r2, r2, #21
 80021a8:	0fc9      	lsrs	r1, r1, #31
 80021aa:	0d5b      	lsrs	r3, r3, #21
 80021ac:	0fc0      	lsrs	r0, r0, #31
 80021ae:	42aa      	cmp	r2, r5
 80021b0:	d021      	beq.n	80021f6 <__gedf2+0x72>
 80021b2:	42ab      	cmp	r3, r5
 80021b4:	d013      	beq.n	80021de <__gedf2+0x5a>
 80021b6:	2a00      	cmp	r2, #0
 80021b8:	d122      	bne.n	8002200 <__gedf2+0x7c>
 80021ba:	433c      	orrs	r4, r7
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <__gedf2+0x42>
 80021c0:	464d      	mov	r5, r9
 80021c2:	432e      	orrs	r6, r5
 80021c4:	d022      	beq.n	800220c <__gedf2+0x88>
 80021c6:	2c00      	cmp	r4, #0
 80021c8:	d010      	beq.n	80021ec <__gedf2+0x68>
 80021ca:	4281      	cmp	r1, r0
 80021cc:	d022      	beq.n	8002214 <__gedf2+0x90>
 80021ce:	2002      	movs	r0, #2
 80021d0:	3901      	subs	r1, #1
 80021d2:	4008      	ands	r0, r1
 80021d4:	3801      	subs	r0, #1
 80021d6:	bcc0      	pop	{r6, r7}
 80021d8:	46b9      	mov	r9, r7
 80021da:	46b0      	mov	r8, r6
 80021dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021de:	464d      	mov	r5, r9
 80021e0:	432e      	orrs	r6, r5
 80021e2:	d129      	bne.n	8002238 <__gedf2+0xb4>
 80021e4:	2a00      	cmp	r2, #0
 80021e6:	d1f0      	bne.n	80021ca <__gedf2+0x46>
 80021e8:	433c      	orrs	r4, r7
 80021ea:	d1ee      	bne.n	80021ca <__gedf2+0x46>
 80021ec:	2800      	cmp	r0, #0
 80021ee:	d1f2      	bne.n	80021d6 <__gedf2+0x52>
 80021f0:	2001      	movs	r0, #1
 80021f2:	4240      	negs	r0, r0
 80021f4:	e7ef      	b.n	80021d6 <__gedf2+0x52>
 80021f6:	003d      	movs	r5, r7
 80021f8:	4325      	orrs	r5, r4
 80021fa:	d11d      	bne.n	8002238 <__gedf2+0xb4>
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d0ee      	beq.n	80021de <__gedf2+0x5a>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1e2      	bne.n	80021ca <__gedf2+0x46>
 8002204:	464c      	mov	r4, r9
 8002206:	4326      	orrs	r6, r4
 8002208:	d1df      	bne.n	80021ca <__gedf2+0x46>
 800220a:	e7e0      	b.n	80021ce <__gedf2+0x4a>
 800220c:	2000      	movs	r0, #0
 800220e:	2c00      	cmp	r4, #0
 8002210:	d0e1      	beq.n	80021d6 <__gedf2+0x52>
 8002212:	e7dc      	b.n	80021ce <__gedf2+0x4a>
 8002214:	429a      	cmp	r2, r3
 8002216:	dc0a      	bgt.n	800222e <__gedf2+0xaa>
 8002218:	dbe8      	blt.n	80021ec <__gedf2+0x68>
 800221a:	454f      	cmp	r7, r9
 800221c:	d8d7      	bhi.n	80021ce <__gedf2+0x4a>
 800221e:	d00e      	beq.n	800223e <__gedf2+0xba>
 8002220:	2000      	movs	r0, #0
 8002222:	454f      	cmp	r7, r9
 8002224:	d2d7      	bcs.n	80021d6 <__gedf2+0x52>
 8002226:	2900      	cmp	r1, #0
 8002228:	d0e2      	beq.n	80021f0 <__gedf2+0x6c>
 800222a:	0008      	movs	r0, r1
 800222c:	e7d3      	b.n	80021d6 <__gedf2+0x52>
 800222e:	4243      	negs	r3, r0
 8002230:	4158      	adcs	r0, r3
 8002232:	0040      	lsls	r0, r0, #1
 8002234:	3801      	subs	r0, #1
 8002236:	e7ce      	b.n	80021d6 <__gedf2+0x52>
 8002238:	2002      	movs	r0, #2
 800223a:	4240      	negs	r0, r0
 800223c:	e7cb      	b.n	80021d6 <__gedf2+0x52>
 800223e:	45c4      	cmp	ip, r8
 8002240:	d8c5      	bhi.n	80021ce <__gedf2+0x4a>
 8002242:	2000      	movs	r0, #0
 8002244:	45c4      	cmp	ip, r8
 8002246:	d2c6      	bcs.n	80021d6 <__gedf2+0x52>
 8002248:	e7ed      	b.n	8002226 <__gedf2+0xa2>
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	000007ff 	.word	0x000007ff

08002250 <__ledf2>:
 8002250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002252:	4647      	mov	r7, r8
 8002254:	46ce      	mov	lr, r9
 8002256:	0004      	movs	r4, r0
 8002258:	0018      	movs	r0, r3
 800225a:	0016      	movs	r6, r2
 800225c:	031b      	lsls	r3, r3, #12
 800225e:	0b1b      	lsrs	r3, r3, #12
 8002260:	4d2c      	ldr	r5, [pc, #176]	; (8002314 <__ledf2+0xc4>)
 8002262:	004a      	lsls	r2, r1, #1
 8002264:	4699      	mov	r9, r3
 8002266:	b580      	push	{r7, lr}
 8002268:	0043      	lsls	r3, r0, #1
 800226a:	030f      	lsls	r7, r1, #12
 800226c:	46a4      	mov	ip, r4
 800226e:	46b0      	mov	r8, r6
 8002270:	0b3f      	lsrs	r7, r7, #12
 8002272:	0d52      	lsrs	r2, r2, #21
 8002274:	0fc9      	lsrs	r1, r1, #31
 8002276:	0d5b      	lsrs	r3, r3, #21
 8002278:	0fc0      	lsrs	r0, r0, #31
 800227a:	42aa      	cmp	r2, r5
 800227c:	d00d      	beq.n	800229a <__ledf2+0x4a>
 800227e:	42ab      	cmp	r3, r5
 8002280:	d010      	beq.n	80022a4 <__ledf2+0x54>
 8002282:	2a00      	cmp	r2, #0
 8002284:	d127      	bne.n	80022d6 <__ledf2+0x86>
 8002286:	433c      	orrs	r4, r7
 8002288:	2b00      	cmp	r3, #0
 800228a:	d111      	bne.n	80022b0 <__ledf2+0x60>
 800228c:	464d      	mov	r5, r9
 800228e:	432e      	orrs	r6, r5
 8002290:	d10e      	bne.n	80022b0 <__ledf2+0x60>
 8002292:	2000      	movs	r0, #0
 8002294:	2c00      	cmp	r4, #0
 8002296:	d015      	beq.n	80022c4 <__ledf2+0x74>
 8002298:	e00e      	b.n	80022b8 <__ledf2+0x68>
 800229a:	003d      	movs	r5, r7
 800229c:	4325      	orrs	r5, r4
 800229e:	d110      	bne.n	80022c2 <__ledf2+0x72>
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d118      	bne.n	80022d6 <__ledf2+0x86>
 80022a4:	464d      	mov	r5, r9
 80022a6:	432e      	orrs	r6, r5
 80022a8:	d10b      	bne.n	80022c2 <__ledf2+0x72>
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	d102      	bne.n	80022b4 <__ledf2+0x64>
 80022ae:	433c      	orrs	r4, r7
 80022b0:	2c00      	cmp	r4, #0
 80022b2:	d00b      	beq.n	80022cc <__ledf2+0x7c>
 80022b4:	4281      	cmp	r1, r0
 80022b6:	d014      	beq.n	80022e2 <__ledf2+0x92>
 80022b8:	2002      	movs	r0, #2
 80022ba:	3901      	subs	r1, #1
 80022bc:	4008      	ands	r0, r1
 80022be:	3801      	subs	r0, #1
 80022c0:	e000      	b.n	80022c4 <__ledf2+0x74>
 80022c2:	2002      	movs	r0, #2
 80022c4:	bcc0      	pop	{r6, r7}
 80022c6:	46b9      	mov	r9, r7
 80022c8:	46b0      	mov	r8, r6
 80022ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d1f9      	bne.n	80022c4 <__ledf2+0x74>
 80022d0:	2001      	movs	r0, #1
 80022d2:	4240      	negs	r0, r0
 80022d4:	e7f6      	b.n	80022c4 <__ledf2+0x74>
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1ec      	bne.n	80022b4 <__ledf2+0x64>
 80022da:	464c      	mov	r4, r9
 80022dc:	4326      	orrs	r6, r4
 80022de:	d1e9      	bne.n	80022b4 <__ledf2+0x64>
 80022e0:	e7ea      	b.n	80022b8 <__ledf2+0x68>
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dd04      	ble.n	80022f0 <__ledf2+0xa0>
 80022e6:	4243      	negs	r3, r0
 80022e8:	4158      	adcs	r0, r3
 80022ea:	0040      	lsls	r0, r0, #1
 80022ec:	3801      	subs	r0, #1
 80022ee:	e7e9      	b.n	80022c4 <__ledf2+0x74>
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dbeb      	blt.n	80022cc <__ledf2+0x7c>
 80022f4:	454f      	cmp	r7, r9
 80022f6:	d8df      	bhi.n	80022b8 <__ledf2+0x68>
 80022f8:	d006      	beq.n	8002308 <__ledf2+0xb8>
 80022fa:	2000      	movs	r0, #0
 80022fc:	454f      	cmp	r7, r9
 80022fe:	d2e1      	bcs.n	80022c4 <__ledf2+0x74>
 8002300:	2900      	cmp	r1, #0
 8002302:	d0e5      	beq.n	80022d0 <__ledf2+0x80>
 8002304:	0008      	movs	r0, r1
 8002306:	e7dd      	b.n	80022c4 <__ledf2+0x74>
 8002308:	45c4      	cmp	ip, r8
 800230a:	d8d5      	bhi.n	80022b8 <__ledf2+0x68>
 800230c:	2000      	movs	r0, #0
 800230e:	45c4      	cmp	ip, r8
 8002310:	d2d8      	bcs.n	80022c4 <__ledf2+0x74>
 8002312:	e7f5      	b.n	8002300 <__ledf2+0xb0>
 8002314:	000007ff 	.word	0x000007ff

08002318 <__aeabi_dmul>:
 8002318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	b5e0      	push	{r5, r6, r7, lr}
 8002324:	4698      	mov	r8, r3
 8002326:	030c      	lsls	r4, r1, #12
 8002328:	004b      	lsls	r3, r1, #1
 800232a:	0006      	movs	r6, r0
 800232c:	4692      	mov	sl, r2
 800232e:	b087      	sub	sp, #28
 8002330:	0b24      	lsrs	r4, r4, #12
 8002332:	0d5b      	lsrs	r3, r3, #21
 8002334:	0fcf      	lsrs	r7, r1, #31
 8002336:	2b00      	cmp	r3, #0
 8002338:	d100      	bne.n	800233c <__aeabi_dmul+0x24>
 800233a:	e15c      	b.n	80025f6 <__aeabi_dmul+0x2de>
 800233c:	4ad9      	ldr	r2, [pc, #868]	; (80026a4 <__aeabi_dmul+0x38c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d100      	bne.n	8002344 <__aeabi_dmul+0x2c>
 8002342:	e175      	b.n	8002630 <__aeabi_dmul+0x318>
 8002344:	0f42      	lsrs	r2, r0, #29
 8002346:	00e4      	lsls	r4, r4, #3
 8002348:	4314      	orrs	r4, r2
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	0412      	lsls	r2, r2, #16
 800234e:	4314      	orrs	r4, r2
 8002350:	4ad5      	ldr	r2, [pc, #852]	; (80026a8 <__aeabi_dmul+0x390>)
 8002352:	00c5      	lsls	r5, r0, #3
 8002354:	4694      	mov	ip, r2
 8002356:	4463      	add	r3, ip
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2300      	movs	r3, #0
 800235c:	4699      	mov	r9, r3
 800235e:	469b      	mov	fp, r3
 8002360:	4643      	mov	r3, r8
 8002362:	4642      	mov	r2, r8
 8002364:	031e      	lsls	r6, r3, #12
 8002366:	0fd2      	lsrs	r2, r2, #31
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4650      	mov	r0, sl
 800236c:	4690      	mov	r8, r2
 800236e:	0b36      	lsrs	r6, r6, #12
 8002370:	0d5b      	lsrs	r3, r3, #21
 8002372:	d100      	bne.n	8002376 <__aeabi_dmul+0x5e>
 8002374:	e120      	b.n	80025b8 <__aeabi_dmul+0x2a0>
 8002376:	4acb      	ldr	r2, [pc, #812]	; (80026a4 <__aeabi_dmul+0x38c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d100      	bne.n	800237e <__aeabi_dmul+0x66>
 800237c:	e162      	b.n	8002644 <__aeabi_dmul+0x32c>
 800237e:	49ca      	ldr	r1, [pc, #808]	; (80026a8 <__aeabi_dmul+0x390>)
 8002380:	0f42      	lsrs	r2, r0, #29
 8002382:	468c      	mov	ip, r1
 8002384:	9900      	ldr	r1, [sp, #0]
 8002386:	4463      	add	r3, ip
 8002388:	00f6      	lsls	r6, r6, #3
 800238a:	468c      	mov	ip, r1
 800238c:	4316      	orrs	r6, r2
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	449c      	add	ip, r3
 8002392:	0412      	lsls	r2, r2, #16
 8002394:	4663      	mov	r3, ip
 8002396:	4316      	orrs	r6, r2
 8002398:	00c2      	lsls	r2, r0, #3
 800239a:	2000      	movs	r0, #0
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	9900      	ldr	r1, [sp, #0]
 80023a0:	4643      	mov	r3, r8
 80023a2:	3101      	adds	r1, #1
 80023a4:	468c      	mov	ip, r1
 80023a6:	4649      	mov	r1, r9
 80023a8:	407b      	eors	r3, r7
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	290f      	cmp	r1, #15
 80023ae:	d826      	bhi.n	80023fe <__aeabi_dmul+0xe6>
 80023b0:	4bbe      	ldr	r3, [pc, #760]	; (80026ac <__aeabi_dmul+0x394>)
 80023b2:	0089      	lsls	r1, r1, #2
 80023b4:	5859      	ldr	r1, [r3, r1]
 80023b6:	468f      	mov	pc, r1
 80023b8:	4643      	mov	r3, r8
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	0034      	movs	r4, r6
 80023be:	0015      	movs	r5, r2
 80023c0:	4683      	mov	fp, r0
 80023c2:	465b      	mov	r3, fp
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d016      	beq.n	80023f6 <__aeabi_dmul+0xde>
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d100      	bne.n	80023ce <__aeabi_dmul+0xb6>
 80023cc:	e203      	b.n	80027d6 <__aeabi_dmul+0x4be>
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d000      	beq.n	80023d4 <__aeabi_dmul+0xbc>
 80023d2:	e0cd      	b.n	8002570 <__aeabi_dmul+0x258>
 80023d4:	2200      	movs	r2, #0
 80023d6:	2400      	movs	r4, #0
 80023d8:	2500      	movs	r5, #0
 80023da:	9b01      	ldr	r3, [sp, #4]
 80023dc:	0512      	lsls	r2, r2, #20
 80023de:	4322      	orrs	r2, r4
 80023e0:	07db      	lsls	r3, r3, #31
 80023e2:	431a      	orrs	r2, r3
 80023e4:	0028      	movs	r0, r5
 80023e6:	0011      	movs	r1, r2
 80023e8:	b007      	add	sp, #28
 80023ea:	bcf0      	pop	{r4, r5, r6, r7}
 80023ec:	46bb      	mov	fp, r7
 80023ee:	46b2      	mov	sl, r6
 80023f0:	46a9      	mov	r9, r5
 80023f2:	46a0      	mov	r8, r4
 80023f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023f6:	2400      	movs	r4, #0
 80023f8:	2500      	movs	r5, #0
 80023fa:	4aaa      	ldr	r2, [pc, #680]	; (80026a4 <__aeabi_dmul+0x38c>)
 80023fc:	e7ed      	b.n	80023da <__aeabi_dmul+0xc2>
 80023fe:	0c28      	lsrs	r0, r5, #16
 8002400:	042d      	lsls	r5, r5, #16
 8002402:	0c2d      	lsrs	r5, r5, #16
 8002404:	002b      	movs	r3, r5
 8002406:	0c11      	lsrs	r1, r2, #16
 8002408:	0412      	lsls	r2, r2, #16
 800240a:	0c12      	lsrs	r2, r2, #16
 800240c:	4353      	muls	r3, r2
 800240e:	4698      	mov	r8, r3
 8002410:	0013      	movs	r3, r2
 8002412:	002f      	movs	r7, r5
 8002414:	4343      	muls	r3, r0
 8002416:	4699      	mov	r9, r3
 8002418:	434f      	muls	r7, r1
 800241a:	444f      	add	r7, r9
 800241c:	46bb      	mov	fp, r7
 800241e:	4647      	mov	r7, r8
 8002420:	000b      	movs	r3, r1
 8002422:	0c3f      	lsrs	r7, r7, #16
 8002424:	46ba      	mov	sl, r7
 8002426:	4343      	muls	r3, r0
 8002428:	44da      	add	sl, fp
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	45d1      	cmp	r9, sl
 800242e:	d904      	bls.n	800243a <__aeabi_dmul+0x122>
 8002430:	2780      	movs	r7, #128	; 0x80
 8002432:	027f      	lsls	r7, r7, #9
 8002434:	46b9      	mov	r9, r7
 8002436:	444b      	add	r3, r9
 8002438:	9302      	str	r3, [sp, #8]
 800243a:	4653      	mov	r3, sl
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	469b      	mov	fp, r3
 8002440:	4653      	mov	r3, sl
 8002442:	041f      	lsls	r7, r3, #16
 8002444:	4643      	mov	r3, r8
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	4698      	mov	r8, r3
 800244c:	003b      	movs	r3, r7
 800244e:	4443      	add	r3, r8
 8002450:	9304      	str	r3, [sp, #16]
 8002452:	0c33      	lsrs	r3, r6, #16
 8002454:	0436      	lsls	r6, r6, #16
 8002456:	0c36      	lsrs	r6, r6, #16
 8002458:	4698      	mov	r8, r3
 800245a:	0033      	movs	r3, r6
 800245c:	4343      	muls	r3, r0
 800245e:	4699      	mov	r9, r3
 8002460:	4643      	mov	r3, r8
 8002462:	4343      	muls	r3, r0
 8002464:	002f      	movs	r7, r5
 8002466:	469a      	mov	sl, r3
 8002468:	4643      	mov	r3, r8
 800246a:	4377      	muls	r7, r6
 800246c:	435d      	muls	r5, r3
 800246e:	0c38      	lsrs	r0, r7, #16
 8002470:	444d      	add	r5, r9
 8002472:	1945      	adds	r5, r0, r5
 8002474:	45a9      	cmp	r9, r5
 8002476:	d903      	bls.n	8002480 <__aeabi_dmul+0x168>
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	025b      	lsls	r3, r3, #9
 800247c:	4699      	mov	r9, r3
 800247e:	44ca      	add	sl, r9
 8002480:	043f      	lsls	r7, r7, #16
 8002482:	0c28      	lsrs	r0, r5, #16
 8002484:	0c3f      	lsrs	r7, r7, #16
 8002486:	042d      	lsls	r5, r5, #16
 8002488:	19ed      	adds	r5, r5, r7
 800248a:	0c27      	lsrs	r7, r4, #16
 800248c:	0424      	lsls	r4, r4, #16
 800248e:	0c24      	lsrs	r4, r4, #16
 8002490:	0003      	movs	r3, r0
 8002492:	0020      	movs	r0, r4
 8002494:	4350      	muls	r0, r2
 8002496:	437a      	muls	r2, r7
 8002498:	4691      	mov	r9, r2
 800249a:	003a      	movs	r2, r7
 800249c:	4453      	add	r3, sl
 800249e:	9305      	str	r3, [sp, #20]
 80024a0:	0c03      	lsrs	r3, r0, #16
 80024a2:	469a      	mov	sl, r3
 80024a4:	434a      	muls	r2, r1
 80024a6:	4361      	muls	r1, r4
 80024a8:	4449      	add	r1, r9
 80024aa:	4451      	add	r1, sl
 80024ac:	44ab      	add	fp, r5
 80024ae:	4589      	cmp	r9, r1
 80024b0:	d903      	bls.n	80024ba <__aeabi_dmul+0x1a2>
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	025b      	lsls	r3, r3, #9
 80024b6:	4699      	mov	r9, r3
 80024b8:	444a      	add	r2, r9
 80024ba:	0400      	lsls	r0, r0, #16
 80024bc:	0c0b      	lsrs	r3, r1, #16
 80024be:	0c00      	lsrs	r0, r0, #16
 80024c0:	0409      	lsls	r1, r1, #16
 80024c2:	1809      	adds	r1, r1, r0
 80024c4:	0020      	movs	r0, r4
 80024c6:	4699      	mov	r9, r3
 80024c8:	4643      	mov	r3, r8
 80024ca:	4370      	muls	r0, r6
 80024cc:	435c      	muls	r4, r3
 80024ce:	437e      	muls	r6, r7
 80024d0:	435f      	muls	r7, r3
 80024d2:	0c03      	lsrs	r3, r0, #16
 80024d4:	4698      	mov	r8, r3
 80024d6:	19a4      	adds	r4, r4, r6
 80024d8:	4444      	add	r4, r8
 80024da:	444a      	add	r2, r9
 80024dc:	9703      	str	r7, [sp, #12]
 80024de:	42a6      	cmp	r6, r4
 80024e0:	d904      	bls.n	80024ec <__aeabi_dmul+0x1d4>
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	025b      	lsls	r3, r3, #9
 80024e6:	4698      	mov	r8, r3
 80024e8:	4447      	add	r7, r8
 80024ea:	9703      	str	r7, [sp, #12]
 80024ec:	0423      	lsls	r3, r4, #16
 80024ee:	9e02      	ldr	r6, [sp, #8]
 80024f0:	469a      	mov	sl, r3
 80024f2:	9b05      	ldr	r3, [sp, #20]
 80024f4:	445e      	add	r6, fp
 80024f6:	4698      	mov	r8, r3
 80024f8:	42ae      	cmp	r6, r5
 80024fa:	41ad      	sbcs	r5, r5
 80024fc:	1876      	adds	r6, r6, r1
 80024fe:	428e      	cmp	r6, r1
 8002500:	4189      	sbcs	r1, r1
 8002502:	0400      	lsls	r0, r0, #16
 8002504:	0c00      	lsrs	r0, r0, #16
 8002506:	4450      	add	r0, sl
 8002508:	4440      	add	r0, r8
 800250a:	426d      	negs	r5, r5
 800250c:	1947      	adds	r7, r0, r5
 800250e:	46b8      	mov	r8, r7
 8002510:	4693      	mov	fp, r2
 8002512:	4249      	negs	r1, r1
 8002514:	4689      	mov	r9, r1
 8002516:	44c3      	add	fp, r8
 8002518:	44d9      	add	r9, fp
 800251a:	4298      	cmp	r0, r3
 800251c:	4180      	sbcs	r0, r0
 800251e:	45a8      	cmp	r8, r5
 8002520:	41ad      	sbcs	r5, r5
 8002522:	4593      	cmp	fp, r2
 8002524:	4192      	sbcs	r2, r2
 8002526:	4589      	cmp	r9, r1
 8002528:	4189      	sbcs	r1, r1
 800252a:	426d      	negs	r5, r5
 800252c:	4240      	negs	r0, r0
 800252e:	4328      	orrs	r0, r5
 8002530:	0c24      	lsrs	r4, r4, #16
 8002532:	4252      	negs	r2, r2
 8002534:	4249      	negs	r1, r1
 8002536:	430a      	orrs	r2, r1
 8002538:	9b03      	ldr	r3, [sp, #12]
 800253a:	1900      	adds	r0, r0, r4
 800253c:	1880      	adds	r0, r0, r2
 800253e:	18c7      	adds	r7, r0, r3
 8002540:	464b      	mov	r3, r9
 8002542:	0ddc      	lsrs	r4, r3, #23
 8002544:	9b04      	ldr	r3, [sp, #16]
 8002546:	0275      	lsls	r5, r6, #9
 8002548:	431d      	orrs	r5, r3
 800254a:	1e6a      	subs	r2, r5, #1
 800254c:	4195      	sbcs	r5, r2
 800254e:	464b      	mov	r3, r9
 8002550:	0df6      	lsrs	r6, r6, #23
 8002552:	027f      	lsls	r7, r7, #9
 8002554:	4335      	orrs	r5, r6
 8002556:	025a      	lsls	r2, r3, #9
 8002558:	433c      	orrs	r4, r7
 800255a:	4315      	orrs	r5, r2
 800255c:	01fb      	lsls	r3, r7, #7
 800255e:	d400      	bmi.n	8002562 <__aeabi_dmul+0x24a>
 8002560:	e11c      	b.n	800279c <__aeabi_dmul+0x484>
 8002562:	2101      	movs	r1, #1
 8002564:	086a      	lsrs	r2, r5, #1
 8002566:	400d      	ands	r5, r1
 8002568:	4315      	orrs	r5, r2
 800256a:	07e2      	lsls	r2, r4, #31
 800256c:	4315      	orrs	r5, r2
 800256e:	0864      	lsrs	r4, r4, #1
 8002570:	494f      	ldr	r1, [pc, #316]	; (80026b0 <__aeabi_dmul+0x398>)
 8002572:	4461      	add	r1, ip
 8002574:	2900      	cmp	r1, #0
 8002576:	dc00      	bgt.n	800257a <__aeabi_dmul+0x262>
 8002578:	e0b0      	b.n	80026dc <__aeabi_dmul+0x3c4>
 800257a:	076b      	lsls	r3, r5, #29
 800257c:	d009      	beq.n	8002592 <__aeabi_dmul+0x27a>
 800257e:	220f      	movs	r2, #15
 8002580:	402a      	ands	r2, r5
 8002582:	2a04      	cmp	r2, #4
 8002584:	d005      	beq.n	8002592 <__aeabi_dmul+0x27a>
 8002586:	1d2a      	adds	r2, r5, #4
 8002588:	42aa      	cmp	r2, r5
 800258a:	41ad      	sbcs	r5, r5
 800258c:	426d      	negs	r5, r5
 800258e:	1964      	adds	r4, r4, r5
 8002590:	0015      	movs	r5, r2
 8002592:	01e3      	lsls	r3, r4, #7
 8002594:	d504      	bpl.n	80025a0 <__aeabi_dmul+0x288>
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	4a46      	ldr	r2, [pc, #280]	; (80026b4 <__aeabi_dmul+0x39c>)
 800259a:	00c9      	lsls	r1, r1, #3
 800259c:	4014      	ands	r4, r2
 800259e:	4461      	add	r1, ip
 80025a0:	4a45      	ldr	r2, [pc, #276]	; (80026b8 <__aeabi_dmul+0x3a0>)
 80025a2:	4291      	cmp	r1, r2
 80025a4:	dd00      	ble.n	80025a8 <__aeabi_dmul+0x290>
 80025a6:	e726      	b.n	80023f6 <__aeabi_dmul+0xde>
 80025a8:	0762      	lsls	r2, r4, #29
 80025aa:	08ed      	lsrs	r5, r5, #3
 80025ac:	0264      	lsls	r4, r4, #9
 80025ae:	0549      	lsls	r1, r1, #21
 80025b0:	4315      	orrs	r5, r2
 80025b2:	0b24      	lsrs	r4, r4, #12
 80025b4:	0d4a      	lsrs	r2, r1, #21
 80025b6:	e710      	b.n	80023da <__aeabi_dmul+0xc2>
 80025b8:	4652      	mov	r2, sl
 80025ba:	4332      	orrs	r2, r6
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dmul+0x2a8>
 80025be:	e07f      	b.n	80026c0 <__aeabi_dmul+0x3a8>
 80025c0:	2e00      	cmp	r6, #0
 80025c2:	d100      	bne.n	80025c6 <__aeabi_dmul+0x2ae>
 80025c4:	e0dc      	b.n	8002780 <__aeabi_dmul+0x468>
 80025c6:	0030      	movs	r0, r6
 80025c8:	f000 fe1e 	bl	8003208 <__clzsi2>
 80025cc:	0002      	movs	r2, r0
 80025ce:	3a0b      	subs	r2, #11
 80025d0:	231d      	movs	r3, #29
 80025d2:	0001      	movs	r1, r0
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	4652      	mov	r2, sl
 80025d8:	3908      	subs	r1, #8
 80025da:	40da      	lsrs	r2, r3
 80025dc:	408e      	lsls	r6, r1
 80025de:	4316      	orrs	r6, r2
 80025e0:	4652      	mov	r2, sl
 80025e2:	408a      	lsls	r2, r1
 80025e4:	9b00      	ldr	r3, [sp, #0]
 80025e6:	4935      	ldr	r1, [pc, #212]	; (80026bc <__aeabi_dmul+0x3a4>)
 80025e8:	1a18      	subs	r0, r3, r0
 80025ea:	0003      	movs	r3, r0
 80025ec:	468c      	mov	ip, r1
 80025ee:	4463      	add	r3, ip
 80025f0:	2000      	movs	r0, #0
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	e6d3      	b.n	800239e <__aeabi_dmul+0x86>
 80025f6:	0025      	movs	r5, r4
 80025f8:	4305      	orrs	r5, r0
 80025fa:	d04a      	beq.n	8002692 <__aeabi_dmul+0x37a>
 80025fc:	2c00      	cmp	r4, #0
 80025fe:	d100      	bne.n	8002602 <__aeabi_dmul+0x2ea>
 8002600:	e0b0      	b.n	8002764 <__aeabi_dmul+0x44c>
 8002602:	0020      	movs	r0, r4
 8002604:	f000 fe00 	bl	8003208 <__clzsi2>
 8002608:	0001      	movs	r1, r0
 800260a:	0002      	movs	r2, r0
 800260c:	390b      	subs	r1, #11
 800260e:	231d      	movs	r3, #29
 8002610:	0010      	movs	r0, r2
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	0031      	movs	r1, r6
 8002616:	0035      	movs	r5, r6
 8002618:	3808      	subs	r0, #8
 800261a:	4084      	lsls	r4, r0
 800261c:	40d9      	lsrs	r1, r3
 800261e:	4085      	lsls	r5, r0
 8002620:	430c      	orrs	r4, r1
 8002622:	4826      	ldr	r0, [pc, #152]	; (80026bc <__aeabi_dmul+0x3a4>)
 8002624:	1a83      	subs	r3, r0, r2
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2300      	movs	r3, #0
 800262a:	4699      	mov	r9, r3
 800262c:	469b      	mov	fp, r3
 800262e:	e697      	b.n	8002360 <__aeabi_dmul+0x48>
 8002630:	0005      	movs	r5, r0
 8002632:	4325      	orrs	r5, r4
 8002634:	d126      	bne.n	8002684 <__aeabi_dmul+0x36c>
 8002636:	2208      	movs	r2, #8
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2302      	movs	r3, #2
 800263c:	2400      	movs	r4, #0
 800263e:	4691      	mov	r9, r2
 8002640:	469b      	mov	fp, r3
 8002642:	e68d      	b.n	8002360 <__aeabi_dmul+0x48>
 8002644:	4652      	mov	r2, sl
 8002646:	9b00      	ldr	r3, [sp, #0]
 8002648:	4332      	orrs	r2, r6
 800264a:	d110      	bne.n	800266e <__aeabi_dmul+0x356>
 800264c:	4915      	ldr	r1, [pc, #84]	; (80026a4 <__aeabi_dmul+0x38c>)
 800264e:	2600      	movs	r6, #0
 8002650:	468c      	mov	ip, r1
 8002652:	4463      	add	r3, ip
 8002654:	4649      	mov	r1, r9
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	2302      	movs	r3, #2
 800265a:	4319      	orrs	r1, r3
 800265c:	4689      	mov	r9, r1
 800265e:	2002      	movs	r0, #2
 8002660:	e69d      	b.n	800239e <__aeabi_dmul+0x86>
 8002662:	465b      	mov	r3, fp
 8002664:	9701      	str	r7, [sp, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d000      	beq.n	800266c <__aeabi_dmul+0x354>
 800266a:	e6ad      	b.n	80023c8 <__aeabi_dmul+0xb0>
 800266c:	e6c3      	b.n	80023f6 <__aeabi_dmul+0xde>
 800266e:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <__aeabi_dmul+0x38c>)
 8002670:	2003      	movs	r0, #3
 8002672:	4694      	mov	ip, r2
 8002674:	4463      	add	r3, ip
 8002676:	464a      	mov	r2, r9
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2303      	movs	r3, #3
 800267c:	431a      	orrs	r2, r3
 800267e:	4691      	mov	r9, r2
 8002680:	4652      	mov	r2, sl
 8002682:	e68c      	b.n	800239e <__aeabi_dmul+0x86>
 8002684:	220c      	movs	r2, #12
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2303      	movs	r3, #3
 800268a:	0005      	movs	r5, r0
 800268c:	4691      	mov	r9, r2
 800268e:	469b      	mov	fp, r3
 8002690:	e666      	b.n	8002360 <__aeabi_dmul+0x48>
 8002692:	2304      	movs	r3, #4
 8002694:	4699      	mov	r9, r3
 8002696:	2300      	movs	r3, #0
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	2400      	movs	r4, #0
 800269e:	469b      	mov	fp, r3
 80026a0:	e65e      	b.n	8002360 <__aeabi_dmul+0x48>
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	000007ff 	.word	0x000007ff
 80026a8:	fffffc01 	.word	0xfffffc01
 80026ac:	0800f8d4 	.word	0x0800f8d4
 80026b0:	000003ff 	.word	0x000003ff
 80026b4:	feffffff 	.word	0xfeffffff
 80026b8:	000007fe 	.word	0x000007fe
 80026bc:	fffffc0d 	.word	0xfffffc0d
 80026c0:	4649      	mov	r1, r9
 80026c2:	2301      	movs	r3, #1
 80026c4:	4319      	orrs	r1, r3
 80026c6:	4689      	mov	r9, r1
 80026c8:	2600      	movs	r6, #0
 80026ca:	2001      	movs	r0, #1
 80026cc:	e667      	b.n	800239e <__aeabi_dmul+0x86>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2480      	movs	r4, #128	; 0x80
 80026d2:	2500      	movs	r5, #0
 80026d4:	4a43      	ldr	r2, [pc, #268]	; (80027e4 <__aeabi_dmul+0x4cc>)
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	0324      	lsls	r4, r4, #12
 80026da:	e67e      	b.n	80023da <__aeabi_dmul+0xc2>
 80026dc:	2001      	movs	r0, #1
 80026de:	1a40      	subs	r0, r0, r1
 80026e0:	2838      	cmp	r0, #56	; 0x38
 80026e2:	dd00      	ble.n	80026e6 <__aeabi_dmul+0x3ce>
 80026e4:	e676      	b.n	80023d4 <__aeabi_dmul+0xbc>
 80026e6:	281f      	cmp	r0, #31
 80026e8:	dd5b      	ble.n	80027a2 <__aeabi_dmul+0x48a>
 80026ea:	221f      	movs	r2, #31
 80026ec:	0023      	movs	r3, r4
 80026ee:	4252      	negs	r2, r2
 80026f0:	1a51      	subs	r1, r2, r1
 80026f2:	40cb      	lsrs	r3, r1
 80026f4:	0019      	movs	r1, r3
 80026f6:	2820      	cmp	r0, #32
 80026f8:	d003      	beq.n	8002702 <__aeabi_dmul+0x3ea>
 80026fa:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <__aeabi_dmul+0x4d0>)
 80026fc:	4462      	add	r2, ip
 80026fe:	4094      	lsls	r4, r2
 8002700:	4325      	orrs	r5, r4
 8002702:	1e6a      	subs	r2, r5, #1
 8002704:	4195      	sbcs	r5, r2
 8002706:	002a      	movs	r2, r5
 8002708:	430a      	orrs	r2, r1
 800270a:	2107      	movs	r1, #7
 800270c:	000d      	movs	r5, r1
 800270e:	2400      	movs	r4, #0
 8002710:	4015      	ands	r5, r2
 8002712:	4211      	tst	r1, r2
 8002714:	d05b      	beq.n	80027ce <__aeabi_dmul+0x4b6>
 8002716:	210f      	movs	r1, #15
 8002718:	2400      	movs	r4, #0
 800271a:	4011      	ands	r1, r2
 800271c:	2904      	cmp	r1, #4
 800271e:	d053      	beq.n	80027c8 <__aeabi_dmul+0x4b0>
 8002720:	1d11      	adds	r1, r2, #4
 8002722:	4291      	cmp	r1, r2
 8002724:	4192      	sbcs	r2, r2
 8002726:	4252      	negs	r2, r2
 8002728:	18a4      	adds	r4, r4, r2
 800272a:	000a      	movs	r2, r1
 800272c:	0223      	lsls	r3, r4, #8
 800272e:	d54b      	bpl.n	80027c8 <__aeabi_dmul+0x4b0>
 8002730:	2201      	movs	r2, #1
 8002732:	2400      	movs	r4, #0
 8002734:	2500      	movs	r5, #0
 8002736:	e650      	b.n	80023da <__aeabi_dmul+0xc2>
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	031b      	lsls	r3, r3, #12
 800273c:	421c      	tst	r4, r3
 800273e:	d009      	beq.n	8002754 <__aeabi_dmul+0x43c>
 8002740:	421e      	tst	r6, r3
 8002742:	d107      	bne.n	8002754 <__aeabi_dmul+0x43c>
 8002744:	4333      	orrs	r3, r6
 8002746:	031c      	lsls	r4, r3, #12
 8002748:	4643      	mov	r3, r8
 800274a:	0015      	movs	r5, r2
 800274c:	0b24      	lsrs	r4, r4, #12
 800274e:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <__aeabi_dmul+0x4cc>)
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	e642      	b.n	80023da <__aeabi_dmul+0xc2>
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	0312      	lsls	r2, r2, #12
 8002758:	4314      	orrs	r4, r2
 800275a:	0324      	lsls	r4, r4, #12
 800275c:	4a21      	ldr	r2, [pc, #132]	; (80027e4 <__aeabi_dmul+0x4cc>)
 800275e:	0b24      	lsrs	r4, r4, #12
 8002760:	9701      	str	r7, [sp, #4]
 8002762:	e63a      	b.n	80023da <__aeabi_dmul+0xc2>
 8002764:	f000 fd50 	bl	8003208 <__clzsi2>
 8002768:	0001      	movs	r1, r0
 800276a:	0002      	movs	r2, r0
 800276c:	3115      	adds	r1, #21
 800276e:	3220      	adds	r2, #32
 8002770:	291c      	cmp	r1, #28
 8002772:	dc00      	bgt.n	8002776 <__aeabi_dmul+0x45e>
 8002774:	e74b      	b.n	800260e <__aeabi_dmul+0x2f6>
 8002776:	0034      	movs	r4, r6
 8002778:	3808      	subs	r0, #8
 800277a:	2500      	movs	r5, #0
 800277c:	4084      	lsls	r4, r0
 800277e:	e750      	b.n	8002622 <__aeabi_dmul+0x30a>
 8002780:	f000 fd42 	bl	8003208 <__clzsi2>
 8002784:	0003      	movs	r3, r0
 8002786:	001a      	movs	r2, r3
 8002788:	3215      	adds	r2, #21
 800278a:	3020      	adds	r0, #32
 800278c:	2a1c      	cmp	r2, #28
 800278e:	dc00      	bgt.n	8002792 <__aeabi_dmul+0x47a>
 8002790:	e71e      	b.n	80025d0 <__aeabi_dmul+0x2b8>
 8002792:	4656      	mov	r6, sl
 8002794:	3b08      	subs	r3, #8
 8002796:	2200      	movs	r2, #0
 8002798:	409e      	lsls	r6, r3
 800279a:	e723      	b.n	80025e4 <__aeabi_dmul+0x2cc>
 800279c:	9b00      	ldr	r3, [sp, #0]
 800279e:	469c      	mov	ip, r3
 80027a0:	e6e6      	b.n	8002570 <__aeabi_dmul+0x258>
 80027a2:	4912      	ldr	r1, [pc, #72]	; (80027ec <__aeabi_dmul+0x4d4>)
 80027a4:	0022      	movs	r2, r4
 80027a6:	4461      	add	r1, ip
 80027a8:	002e      	movs	r6, r5
 80027aa:	408d      	lsls	r5, r1
 80027ac:	408a      	lsls	r2, r1
 80027ae:	40c6      	lsrs	r6, r0
 80027b0:	1e69      	subs	r1, r5, #1
 80027b2:	418d      	sbcs	r5, r1
 80027b4:	4332      	orrs	r2, r6
 80027b6:	432a      	orrs	r2, r5
 80027b8:	40c4      	lsrs	r4, r0
 80027ba:	0753      	lsls	r3, r2, #29
 80027bc:	d0b6      	beq.n	800272c <__aeabi_dmul+0x414>
 80027be:	210f      	movs	r1, #15
 80027c0:	4011      	ands	r1, r2
 80027c2:	2904      	cmp	r1, #4
 80027c4:	d1ac      	bne.n	8002720 <__aeabi_dmul+0x408>
 80027c6:	e7b1      	b.n	800272c <__aeabi_dmul+0x414>
 80027c8:	0765      	lsls	r5, r4, #29
 80027ca:	0264      	lsls	r4, r4, #9
 80027cc:	0b24      	lsrs	r4, r4, #12
 80027ce:	08d2      	lsrs	r2, r2, #3
 80027d0:	4315      	orrs	r5, r2
 80027d2:	2200      	movs	r2, #0
 80027d4:	e601      	b.n	80023da <__aeabi_dmul+0xc2>
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	0312      	lsls	r2, r2, #12
 80027da:	4314      	orrs	r4, r2
 80027dc:	0324      	lsls	r4, r4, #12
 80027de:	4a01      	ldr	r2, [pc, #4]	; (80027e4 <__aeabi_dmul+0x4cc>)
 80027e0:	0b24      	lsrs	r4, r4, #12
 80027e2:	e5fa      	b.n	80023da <__aeabi_dmul+0xc2>
 80027e4:	000007ff 	.word	0x000007ff
 80027e8:	0000043e 	.word	0x0000043e
 80027ec:	0000041e 	.word	0x0000041e

080027f0 <__aeabi_dsub>:
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	4657      	mov	r7, sl
 80027f4:	464e      	mov	r6, r9
 80027f6:	4645      	mov	r5, r8
 80027f8:	46de      	mov	lr, fp
 80027fa:	b5e0      	push	{r5, r6, r7, lr}
 80027fc:	001e      	movs	r6, r3
 80027fe:	0017      	movs	r7, r2
 8002800:	004a      	lsls	r2, r1, #1
 8002802:	030b      	lsls	r3, r1, #12
 8002804:	0d52      	lsrs	r2, r2, #21
 8002806:	0a5b      	lsrs	r3, r3, #9
 8002808:	4690      	mov	r8, r2
 800280a:	0f42      	lsrs	r2, r0, #29
 800280c:	431a      	orrs	r2, r3
 800280e:	0fcd      	lsrs	r5, r1, #31
 8002810:	4ccd      	ldr	r4, [pc, #820]	; (8002b48 <__aeabi_dsub+0x358>)
 8002812:	0331      	lsls	r1, r6, #12
 8002814:	00c3      	lsls	r3, r0, #3
 8002816:	4694      	mov	ip, r2
 8002818:	0070      	lsls	r0, r6, #1
 800281a:	0f7a      	lsrs	r2, r7, #29
 800281c:	0a49      	lsrs	r1, r1, #9
 800281e:	00ff      	lsls	r7, r7, #3
 8002820:	469a      	mov	sl, r3
 8002822:	46b9      	mov	r9, r7
 8002824:	0d40      	lsrs	r0, r0, #21
 8002826:	0ff6      	lsrs	r6, r6, #31
 8002828:	4311      	orrs	r1, r2
 800282a:	42a0      	cmp	r0, r4
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x40>
 800282e:	e0b1      	b.n	8002994 <__aeabi_dsub+0x1a4>
 8002830:	2201      	movs	r2, #1
 8002832:	4056      	eors	r6, r2
 8002834:	46b3      	mov	fp, r6
 8002836:	42b5      	cmp	r5, r6
 8002838:	d100      	bne.n	800283c <__aeabi_dsub+0x4c>
 800283a:	e088      	b.n	800294e <__aeabi_dsub+0x15e>
 800283c:	4642      	mov	r2, r8
 800283e:	1a12      	subs	r2, r2, r0
 8002840:	2a00      	cmp	r2, #0
 8002842:	dc00      	bgt.n	8002846 <__aeabi_dsub+0x56>
 8002844:	e0ae      	b.n	80029a4 <__aeabi_dsub+0x1b4>
 8002846:	2800      	cmp	r0, #0
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x5c>
 800284a:	e0c1      	b.n	80029d0 <__aeabi_dsub+0x1e0>
 800284c:	48be      	ldr	r0, [pc, #760]	; (8002b48 <__aeabi_dsub+0x358>)
 800284e:	4580      	cmp	r8, r0
 8002850:	d100      	bne.n	8002854 <__aeabi_dsub+0x64>
 8002852:	e151      	b.n	8002af8 <__aeabi_dsub+0x308>
 8002854:	2080      	movs	r0, #128	; 0x80
 8002856:	0400      	lsls	r0, r0, #16
 8002858:	4301      	orrs	r1, r0
 800285a:	2a38      	cmp	r2, #56	; 0x38
 800285c:	dd00      	ble.n	8002860 <__aeabi_dsub+0x70>
 800285e:	e17b      	b.n	8002b58 <__aeabi_dsub+0x368>
 8002860:	2a1f      	cmp	r2, #31
 8002862:	dd00      	ble.n	8002866 <__aeabi_dsub+0x76>
 8002864:	e1ee      	b.n	8002c44 <__aeabi_dsub+0x454>
 8002866:	2020      	movs	r0, #32
 8002868:	003e      	movs	r6, r7
 800286a:	1a80      	subs	r0, r0, r2
 800286c:	000c      	movs	r4, r1
 800286e:	40d6      	lsrs	r6, r2
 8002870:	40d1      	lsrs	r1, r2
 8002872:	4087      	lsls	r7, r0
 8002874:	4662      	mov	r2, ip
 8002876:	4084      	lsls	r4, r0
 8002878:	1a52      	subs	r2, r2, r1
 800287a:	1e78      	subs	r0, r7, #1
 800287c:	4187      	sbcs	r7, r0
 800287e:	4694      	mov	ip, r2
 8002880:	4334      	orrs	r4, r6
 8002882:	4327      	orrs	r7, r4
 8002884:	1bdc      	subs	r4, r3, r7
 8002886:	42a3      	cmp	r3, r4
 8002888:	419b      	sbcs	r3, r3
 800288a:	4662      	mov	r2, ip
 800288c:	425b      	negs	r3, r3
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	4699      	mov	r9, r3
 8002892:	464b      	mov	r3, r9
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	d400      	bmi.n	800289a <__aeabi_dsub+0xaa>
 8002898:	e118      	b.n	8002acc <__aeabi_dsub+0x2dc>
 800289a:	464b      	mov	r3, r9
 800289c:	0258      	lsls	r0, r3, #9
 800289e:	0a43      	lsrs	r3, r0, #9
 80028a0:	4699      	mov	r9, r3
 80028a2:	464b      	mov	r3, r9
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0xba>
 80028a8:	e137      	b.n	8002b1a <__aeabi_dsub+0x32a>
 80028aa:	4648      	mov	r0, r9
 80028ac:	f000 fcac 	bl	8003208 <__clzsi2>
 80028b0:	0001      	movs	r1, r0
 80028b2:	3908      	subs	r1, #8
 80028b4:	2320      	movs	r3, #32
 80028b6:	0022      	movs	r2, r4
 80028b8:	4648      	mov	r0, r9
 80028ba:	1a5b      	subs	r3, r3, r1
 80028bc:	40da      	lsrs	r2, r3
 80028be:	4088      	lsls	r0, r1
 80028c0:	408c      	lsls	r4, r1
 80028c2:	4643      	mov	r3, r8
 80028c4:	4310      	orrs	r0, r2
 80028c6:	4588      	cmp	r8, r1
 80028c8:	dd00      	ble.n	80028cc <__aeabi_dsub+0xdc>
 80028ca:	e136      	b.n	8002b3a <__aeabi_dsub+0x34a>
 80028cc:	1ac9      	subs	r1, r1, r3
 80028ce:	1c4b      	adds	r3, r1, #1
 80028d0:	2b1f      	cmp	r3, #31
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0xe6>
 80028d4:	e0ea      	b.n	8002aac <__aeabi_dsub+0x2bc>
 80028d6:	2220      	movs	r2, #32
 80028d8:	0026      	movs	r6, r4
 80028da:	1ad2      	subs	r2, r2, r3
 80028dc:	0001      	movs	r1, r0
 80028de:	4094      	lsls	r4, r2
 80028e0:	40de      	lsrs	r6, r3
 80028e2:	40d8      	lsrs	r0, r3
 80028e4:	2300      	movs	r3, #0
 80028e6:	4091      	lsls	r1, r2
 80028e8:	1e62      	subs	r2, r4, #1
 80028ea:	4194      	sbcs	r4, r2
 80028ec:	4681      	mov	r9, r0
 80028ee:	4698      	mov	r8, r3
 80028f0:	4331      	orrs	r1, r6
 80028f2:	430c      	orrs	r4, r1
 80028f4:	0763      	lsls	r3, r4, #29
 80028f6:	d009      	beq.n	800290c <__aeabi_dsub+0x11c>
 80028f8:	230f      	movs	r3, #15
 80028fa:	4023      	ands	r3, r4
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d005      	beq.n	800290c <__aeabi_dsub+0x11c>
 8002900:	1d23      	adds	r3, r4, #4
 8002902:	42a3      	cmp	r3, r4
 8002904:	41a4      	sbcs	r4, r4
 8002906:	4264      	negs	r4, r4
 8002908:	44a1      	add	r9, r4
 800290a:	001c      	movs	r4, r3
 800290c:	464b      	mov	r3, r9
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	d400      	bmi.n	8002914 <__aeabi_dsub+0x124>
 8002912:	e0de      	b.n	8002ad2 <__aeabi_dsub+0x2e2>
 8002914:	4641      	mov	r1, r8
 8002916:	4b8c      	ldr	r3, [pc, #560]	; (8002b48 <__aeabi_dsub+0x358>)
 8002918:	3101      	adds	r1, #1
 800291a:	4299      	cmp	r1, r3
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x130>
 800291e:	e0e7      	b.n	8002af0 <__aeabi_dsub+0x300>
 8002920:	464b      	mov	r3, r9
 8002922:	488a      	ldr	r0, [pc, #552]	; (8002b4c <__aeabi_dsub+0x35c>)
 8002924:	08e4      	lsrs	r4, r4, #3
 8002926:	4003      	ands	r3, r0
 8002928:	0018      	movs	r0, r3
 800292a:	0549      	lsls	r1, r1, #21
 800292c:	075b      	lsls	r3, r3, #29
 800292e:	0240      	lsls	r0, r0, #9
 8002930:	4323      	orrs	r3, r4
 8002932:	0d4a      	lsrs	r2, r1, #21
 8002934:	0b04      	lsrs	r4, r0, #12
 8002936:	0512      	lsls	r2, r2, #20
 8002938:	07ed      	lsls	r5, r5, #31
 800293a:	4322      	orrs	r2, r4
 800293c:	432a      	orrs	r2, r5
 800293e:	0018      	movs	r0, r3
 8002940:	0011      	movs	r1, r2
 8002942:	bcf0      	pop	{r4, r5, r6, r7}
 8002944:	46bb      	mov	fp, r7
 8002946:	46b2      	mov	sl, r6
 8002948:	46a9      	mov	r9, r5
 800294a:	46a0      	mov	r8, r4
 800294c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800294e:	4642      	mov	r2, r8
 8002950:	1a12      	subs	r2, r2, r0
 8002952:	2a00      	cmp	r2, #0
 8002954:	dd52      	ble.n	80029fc <__aeabi_dsub+0x20c>
 8002956:	2800      	cmp	r0, #0
 8002958:	d100      	bne.n	800295c <__aeabi_dsub+0x16c>
 800295a:	e09c      	b.n	8002a96 <__aeabi_dsub+0x2a6>
 800295c:	45a0      	cmp	r8, r4
 800295e:	d100      	bne.n	8002962 <__aeabi_dsub+0x172>
 8002960:	e0ca      	b.n	8002af8 <__aeabi_dsub+0x308>
 8002962:	2080      	movs	r0, #128	; 0x80
 8002964:	0400      	lsls	r0, r0, #16
 8002966:	4301      	orrs	r1, r0
 8002968:	2a38      	cmp	r2, #56	; 0x38
 800296a:	dd00      	ble.n	800296e <__aeabi_dsub+0x17e>
 800296c:	e149      	b.n	8002c02 <__aeabi_dsub+0x412>
 800296e:	2a1f      	cmp	r2, #31
 8002970:	dc00      	bgt.n	8002974 <__aeabi_dsub+0x184>
 8002972:	e197      	b.n	8002ca4 <__aeabi_dsub+0x4b4>
 8002974:	0010      	movs	r0, r2
 8002976:	000e      	movs	r6, r1
 8002978:	3820      	subs	r0, #32
 800297a:	40c6      	lsrs	r6, r0
 800297c:	2a20      	cmp	r2, #32
 800297e:	d004      	beq.n	800298a <__aeabi_dsub+0x19a>
 8002980:	2040      	movs	r0, #64	; 0x40
 8002982:	1a82      	subs	r2, r0, r2
 8002984:	4091      	lsls	r1, r2
 8002986:	430f      	orrs	r7, r1
 8002988:	46b9      	mov	r9, r7
 800298a:	464c      	mov	r4, r9
 800298c:	1e62      	subs	r2, r4, #1
 800298e:	4194      	sbcs	r4, r2
 8002990:	4334      	orrs	r4, r6
 8002992:	e13a      	b.n	8002c0a <__aeabi_dsub+0x41a>
 8002994:	000a      	movs	r2, r1
 8002996:	433a      	orrs	r2, r7
 8002998:	d028      	beq.n	80029ec <__aeabi_dsub+0x1fc>
 800299a:	46b3      	mov	fp, r6
 800299c:	42b5      	cmp	r5, r6
 800299e:	d02b      	beq.n	80029f8 <__aeabi_dsub+0x208>
 80029a0:	4a6b      	ldr	r2, [pc, #428]	; (8002b50 <__aeabi_dsub+0x360>)
 80029a2:	4442      	add	r2, r8
 80029a4:	2a00      	cmp	r2, #0
 80029a6:	d05d      	beq.n	8002a64 <__aeabi_dsub+0x274>
 80029a8:	4642      	mov	r2, r8
 80029aa:	4644      	mov	r4, r8
 80029ac:	1a82      	subs	r2, r0, r2
 80029ae:	2c00      	cmp	r4, #0
 80029b0:	d000      	beq.n	80029b4 <__aeabi_dsub+0x1c4>
 80029b2:	e0f5      	b.n	8002ba0 <__aeabi_dsub+0x3b0>
 80029b4:	4665      	mov	r5, ip
 80029b6:	431d      	orrs	r5, r3
 80029b8:	d100      	bne.n	80029bc <__aeabi_dsub+0x1cc>
 80029ba:	e19c      	b.n	8002cf6 <__aeabi_dsub+0x506>
 80029bc:	1e55      	subs	r5, r2, #1
 80029be:	2a01      	cmp	r2, #1
 80029c0:	d100      	bne.n	80029c4 <__aeabi_dsub+0x1d4>
 80029c2:	e1fb      	b.n	8002dbc <__aeabi_dsub+0x5cc>
 80029c4:	4c60      	ldr	r4, [pc, #384]	; (8002b48 <__aeabi_dsub+0x358>)
 80029c6:	42a2      	cmp	r2, r4
 80029c8:	d100      	bne.n	80029cc <__aeabi_dsub+0x1dc>
 80029ca:	e1bd      	b.n	8002d48 <__aeabi_dsub+0x558>
 80029cc:	002a      	movs	r2, r5
 80029ce:	e0f0      	b.n	8002bb2 <__aeabi_dsub+0x3c2>
 80029d0:	0008      	movs	r0, r1
 80029d2:	4338      	orrs	r0, r7
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dsub+0x1e8>
 80029d6:	e0c3      	b.n	8002b60 <__aeabi_dsub+0x370>
 80029d8:	1e50      	subs	r0, r2, #1
 80029da:	2a01      	cmp	r2, #1
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x1f0>
 80029de:	e1a8      	b.n	8002d32 <__aeabi_dsub+0x542>
 80029e0:	4c59      	ldr	r4, [pc, #356]	; (8002b48 <__aeabi_dsub+0x358>)
 80029e2:	42a2      	cmp	r2, r4
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x1f8>
 80029e6:	e087      	b.n	8002af8 <__aeabi_dsub+0x308>
 80029e8:	0002      	movs	r2, r0
 80029ea:	e736      	b.n	800285a <__aeabi_dsub+0x6a>
 80029ec:	2201      	movs	r2, #1
 80029ee:	4056      	eors	r6, r2
 80029f0:	46b3      	mov	fp, r6
 80029f2:	42b5      	cmp	r5, r6
 80029f4:	d000      	beq.n	80029f8 <__aeabi_dsub+0x208>
 80029f6:	e721      	b.n	800283c <__aeabi_dsub+0x4c>
 80029f8:	4a55      	ldr	r2, [pc, #340]	; (8002b50 <__aeabi_dsub+0x360>)
 80029fa:	4442      	add	r2, r8
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	d100      	bne.n	8002a02 <__aeabi_dsub+0x212>
 8002a00:	e0b5      	b.n	8002b6e <__aeabi_dsub+0x37e>
 8002a02:	4642      	mov	r2, r8
 8002a04:	4644      	mov	r4, r8
 8002a06:	1a82      	subs	r2, r0, r2
 8002a08:	2c00      	cmp	r4, #0
 8002a0a:	d100      	bne.n	8002a0e <__aeabi_dsub+0x21e>
 8002a0c:	e138      	b.n	8002c80 <__aeabi_dsub+0x490>
 8002a0e:	4e4e      	ldr	r6, [pc, #312]	; (8002b48 <__aeabi_dsub+0x358>)
 8002a10:	42b0      	cmp	r0, r6
 8002a12:	d100      	bne.n	8002a16 <__aeabi_dsub+0x226>
 8002a14:	e1de      	b.n	8002dd4 <__aeabi_dsub+0x5e4>
 8002a16:	2680      	movs	r6, #128	; 0x80
 8002a18:	4664      	mov	r4, ip
 8002a1a:	0436      	lsls	r6, r6, #16
 8002a1c:	4334      	orrs	r4, r6
 8002a1e:	46a4      	mov	ip, r4
 8002a20:	2a38      	cmp	r2, #56	; 0x38
 8002a22:	dd00      	ble.n	8002a26 <__aeabi_dsub+0x236>
 8002a24:	e196      	b.n	8002d54 <__aeabi_dsub+0x564>
 8002a26:	2a1f      	cmp	r2, #31
 8002a28:	dd00      	ble.n	8002a2c <__aeabi_dsub+0x23c>
 8002a2a:	e224      	b.n	8002e76 <__aeabi_dsub+0x686>
 8002a2c:	2620      	movs	r6, #32
 8002a2e:	1ab4      	subs	r4, r6, r2
 8002a30:	46a2      	mov	sl, r4
 8002a32:	4664      	mov	r4, ip
 8002a34:	4656      	mov	r6, sl
 8002a36:	40b4      	lsls	r4, r6
 8002a38:	46a1      	mov	r9, r4
 8002a3a:	001c      	movs	r4, r3
 8002a3c:	464e      	mov	r6, r9
 8002a3e:	40d4      	lsrs	r4, r2
 8002a40:	4326      	orrs	r6, r4
 8002a42:	0034      	movs	r4, r6
 8002a44:	4656      	mov	r6, sl
 8002a46:	40b3      	lsls	r3, r6
 8002a48:	1e5e      	subs	r6, r3, #1
 8002a4a:	41b3      	sbcs	r3, r6
 8002a4c:	431c      	orrs	r4, r3
 8002a4e:	4663      	mov	r3, ip
 8002a50:	40d3      	lsrs	r3, r2
 8002a52:	18c9      	adds	r1, r1, r3
 8002a54:	19e4      	adds	r4, r4, r7
 8002a56:	42bc      	cmp	r4, r7
 8002a58:	41bf      	sbcs	r7, r7
 8002a5a:	427f      	negs	r7, r7
 8002a5c:	46b9      	mov	r9, r7
 8002a5e:	4680      	mov	r8, r0
 8002a60:	4489      	add	r9, r1
 8002a62:	e0d8      	b.n	8002c16 <__aeabi_dsub+0x426>
 8002a64:	4640      	mov	r0, r8
 8002a66:	4c3b      	ldr	r4, [pc, #236]	; (8002b54 <__aeabi_dsub+0x364>)
 8002a68:	3001      	adds	r0, #1
 8002a6a:	4220      	tst	r0, r4
 8002a6c:	d000      	beq.n	8002a70 <__aeabi_dsub+0x280>
 8002a6e:	e0b4      	b.n	8002bda <__aeabi_dsub+0x3ea>
 8002a70:	4640      	mov	r0, r8
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d000      	beq.n	8002a78 <__aeabi_dsub+0x288>
 8002a76:	e144      	b.n	8002d02 <__aeabi_dsub+0x512>
 8002a78:	4660      	mov	r0, ip
 8002a7a:	4318      	orrs	r0, r3
 8002a7c:	d100      	bne.n	8002a80 <__aeabi_dsub+0x290>
 8002a7e:	e190      	b.n	8002da2 <__aeabi_dsub+0x5b2>
 8002a80:	0008      	movs	r0, r1
 8002a82:	4338      	orrs	r0, r7
 8002a84:	d000      	beq.n	8002a88 <__aeabi_dsub+0x298>
 8002a86:	e1aa      	b.n	8002dde <__aeabi_dsub+0x5ee>
 8002a88:	4661      	mov	r1, ip
 8002a8a:	08db      	lsrs	r3, r3, #3
 8002a8c:	0749      	lsls	r1, r1, #29
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	4661      	mov	r1, ip
 8002a92:	08cc      	lsrs	r4, r1, #3
 8002a94:	e027      	b.n	8002ae6 <__aeabi_dsub+0x2f6>
 8002a96:	0008      	movs	r0, r1
 8002a98:	4338      	orrs	r0, r7
 8002a9a:	d061      	beq.n	8002b60 <__aeabi_dsub+0x370>
 8002a9c:	1e50      	subs	r0, r2, #1
 8002a9e:	2a01      	cmp	r2, #1
 8002aa0:	d100      	bne.n	8002aa4 <__aeabi_dsub+0x2b4>
 8002aa2:	e139      	b.n	8002d18 <__aeabi_dsub+0x528>
 8002aa4:	42a2      	cmp	r2, r4
 8002aa6:	d027      	beq.n	8002af8 <__aeabi_dsub+0x308>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	e75d      	b.n	8002968 <__aeabi_dsub+0x178>
 8002aac:	0002      	movs	r2, r0
 8002aae:	391f      	subs	r1, #31
 8002ab0:	40ca      	lsrs	r2, r1
 8002ab2:	0011      	movs	r1, r2
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d003      	beq.n	8002ac0 <__aeabi_dsub+0x2d0>
 8002ab8:	2240      	movs	r2, #64	; 0x40
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	4098      	lsls	r0, r3
 8002abe:	4304      	orrs	r4, r0
 8002ac0:	1e63      	subs	r3, r4, #1
 8002ac2:	419c      	sbcs	r4, r3
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	4699      	mov	r9, r3
 8002ac8:	4698      	mov	r8, r3
 8002aca:	430c      	orrs	r4, r1
 8002acc:	0763      	lsls	r3, r4, #29
 8002ace:	d000      	beq.n	8002ad2 <__aeabi_dsub+0x2e2>
 8002ad0:	e712      	b.n	80028f8 <__aeabi_dsub+0x108>
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	464a      	mov	r2, r9
 8002ad6:	08e4      	lsrs	r4, r4, #3
 8002ad8:	075b      	lsls	r3, r3, #29
 8002ada:	4323      	orrs	r3, r4
 8002adc:	08d4      	lsrs	r4, r2, #3
 8002ade:	4642      	mov	r2, r8
 8002ae0:	4919      	ldr	r1, [pc, #100]	; (8002b48 <__aeabi_dsub+0x358>)
 8002ae2:	428a      	cmp	r2, r1
 8002ae4:	d00e      	beq.n	8002b04 <__aeabi_dsub+0x314>
 8002ae6:	0324      	lsls	r4, r4, #12
 8002ae8:	0552      	lsls	r2, r2, #21
 8002aea:	0b24      	lsrs	r4, r4, #12
 8002aec:	0d52      	lsrs	r2, r2, #21
 8002aee:	e722      	b.n	8002936 <__aeabi_dsub+0x146>
 8002af0:	000a      	movs	r2, r1
 8002af2:	2400      	movs	r4, #0
 8002af4:	2300      	movs	r3, #0
 8002af6:	e71e      	b.n	8002936 <__aeabi_dsub+0x146>
 8002af8:	08db      	lsrs	r3, r3, #3
 8002afa:	4662      	mov	r2, ip
 8002afc:	0752      	lsls	r2, r2, #29
 8002afe:	4313      	orrs	r3, r2
 8002b00:	4662      	mov	r2, ip
 8002b02:	08d4      	lsrs	r4, r2, #3
 8002b04:	001a      	movs	r2, r3
 8002b06:	4322      	orrs	r2, r4
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x31c>
 8002b0a:	e1fc      	b.n	8002f06 <__aeabi_dsub+0x716>
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	0312      	lsls	r2, r2, #12
 8002b10:	4314      	orrs	r4, r2
 8002b12:	0324      	lsls	r4, r4, #12
 8002b14:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <__aeabi_dsub+0x358>)
 8002b16:	0b24      	lsrs	r4, r4, #12
 8002b18:	e70d      	b.n	8002936 <__aeabi_dsub+0x146>
 8002b1a:	0020      	movs	r0, r4
 8002b1c:	f000 fb74 	bl	8003208 <__clzsi2>
 8002b20:	0001      	movs	r1, r0
 8002b22:	3118      	adds	r1, #24
 8002b24:	291f      	cmp	r1, #31
 8002b26:	dc00      	bgt.n	8002b2a <__aeabi_dsub+0x33a>
 8002b28:	e6c4      	b.n	80028b4 <__aeabi_dsub+0xc4>
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4084      	lsls	r4, r0
 8002b2e:	4643      	mov	r3, r8
 8002b30:	0020      	movs	r0, r4
 8002b32:	2400      	movs	r4, #0
 8002b34:	4588      	cmp	r8, r1
 8002b36:	dc00      	bgt.n	8002b3a <__aeabi_dsub+0x34a>
 8002b38:	e6c8      	b.n	80028cc <__aeabi_dsub+0xdc>
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <__aeabi_dsub+0x35c>)
 8002b3c:	1a5b      	subs	r3, r3, r1
 8002b3e:	4010      	ands	r0, r2
 8002b40:	4698      	mov	r8, r3
 8002b42:	4681      	mov	r9, r0
 8002b44:	e6d6      	b.n	80028f4 <__aeabi_dsub+0x104>
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	000007ff 	.word	0x000007ff
 8002b4c:	ff7fffff 	.word	0xff7fffff
 8002b50:	fffff801 	.word	0xfffff801
 8002b54:	000007fe 	.word	0x000007fe
 8002b58:	430f      	orrs	r7, r1
 8002b5a:	1e7a      	subs	r2, r7, #1
 8002b5c:	4197      	sbcs	r7, r2
 8002b5e:	e691      	b.n	8002884 <__aeabi_dsub+0x94>
 8002b60:	4661      	mov	r1, ip
 8002b62:	08db      	lsrs	r3, r3, #3
 8002b64:	0749      	lsls	r1, r1, #29
 8002b66:	430b      	orrs	r3, r1
 8002b68:	4661      	mov	r1, ip
 8002b6a:	08cc      	lsrs	r4, r1, #3
 8002b6c:	e7b8      	b.n	8002ae0 <__aeabi_dsub+0x2f0>
 8002b6e:	4640      	mov	r0, r8
 8002b70:	4cd3      	ldr	r4, [pc, #844]	; (8002ec0 <__aeabi_dsub+0x6d0>)
 8002b72:	3001      	adds	r0, #1
 8002b74:	4220      	tst	r0, r4
 8002b76:	d000      	beq.n	8002b7a <__aeabi_dsub+0x38a>
 8002b78:	e0a2      	b.n	8002cc0 <__aeabi_dsub+0x4d0>
 8002b7a:	4640      	mov	r0, r8
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d000      	beq.n	8002b82 <__aeabi_dsub+0x392>
 8002b80:	e101      	b.n	8002d86 <__aeabi_dsub+0x596>
 8002b82:	4660      	mov	r0, ip
 8002b84:	4318      	orrs	r0, r3
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dsub+0x39a>
 8002b88:	e15e      	b.n	8002e48 <__aeabi_dsub+0x658>
 8002b8a:	0008      	movs	r0, r1
 8002b8c:	4338      	orrs	r0, r7
 8002b8e:	d000      	beq.n	8002b92 <__aeabi_dsub+0x3a2>
 8002b90:	e15f      	b.n	8002e52 <__aeabi_dsub+0x662>
 8002b92:	4661      	mov	r1, ip
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	0749      	lsls	r1, r1, #29
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	4661      	mov	r1, ip
 8002b9c:	08cc      	lsrs	r4, r1, #3
 8002b9e:	e7a2      	b.n	8002ae6 <__aeabi_dsub+0x2f6>
 8002ba0:	4dc8      	ldr	r5, [pc, #800]	; (8002ec4 <__aeabi_dsub+0x6d4>)
 8002ba2:	42a8      	cmp	r0, r5
 8002ba4:	d100      	bne.n	8002ba8 <__aeabi_dsub+0x3b8>
 8002ba6:	e0cf      	b.n	8002d48 <__aeabi_dsub+0x558>
 8002ba8:	2580      	movs	r5, #128	; 0x80
 8002baa:	4664      	mov	r4, ip
 8002bac:	042d      	lsls	r5, r5, #16
 8002bae:	432c      	orrs	r4, r5
 8002bb0:	46a4      	mov	ip, r4
 8002bb2:	2a38      	cmp	r2, #56	; 0x38
 8002bb4:	dc56      	bgt.n	8002c64 <__aeabi_dsub+0x474>
 8002bb6:	2a1f      	cmp	r2, #31
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0x3cc>
 8002bba:	e0d1      	b.n	8002d60 <__aeabi_dsub+0x570>
 8002bbc:	2520      	movs	r5, #32
 8002bbe:	001e      	movs	r6, r3
 8002bc0:	1aad      	subs	r5, r5, r2
 8002bc2:	4664      	mov	r4, ip
 8002bc4:	40ab      	lsls	r3, r5
 8002bc6:	40ac      	lsls	r4, r5
 8002bc8:	40d6      	lsrs	r6, r2
 8002bca:	1e5d      	subs	r5, r3, #1
 8002bcc:	41ab      	sbcs	r3, r5
 8002bce:	4334      	orrs	r4, r6
 8002bd0:	4323      	orrs	r3, r4
 8002bd2:	4664      	mov	r4, ip
 8002bd4:	40d4      	lsrs	r4, r2
 8002bd6:	1b09      	subs	r1, r1, r4
 8002bd8:	e049      	b.n	8002c6e <__aeabi_dsub+0x47e>
 8002bda:	4660      	mov	r0, ip
 8002bdc:	1bdc      	subs	r4, r3, r7
 8002bde:	1a46      	subs	r6, r0, r1
 8002be0:	42a3      	cmp	r3, r4
 8002be2:	4180      	sbcs	r0, r0
 8002be4:	4240      	negs	r0, r0
 8002be6:	4681      	mov	r9, r0
 8002be8:	0030      	movs	r0, r6
 8002bea:	464e      	mov	r6, r9
 8002bec:	1b80      	subs	r0, r0, r6
 8002bee:	4681      	mov	r9, r0
 8002bf0:	0200      	lsls	r0, r0, #8
 8002bf2:	d476      	bmi.n	8002ce2 <__aeabi_dsub+0x4f2>
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	4323      	orrs	r3, r4
 8002bf8:	d000      	beq.n	8002bfc <__aeabi_dsub+0x40c>
 8002bfa:	e652      	b.n	80028a2 <__aeabi_dsub+0xb2>
 8002bfc:	2400      	movs	r4, #0
 8002bfe:	2500      	movs	r5, #0
 8002c00:	e771      	b.n	8002ae6 <__aeabi_dsub+0x2f6>
 8002c02:	4339      	orrs	r1, r7
 8002c04:	000c      	movs	r4, r1
 8002c06:	1e62      	subs	r2, r4, #1
 8002c08:	4194      	sbcs	r4, r2
 8002c0a:	18e4      	adds	r4, r4, r3
 8002c0c:	429c      	cmp	r4, r3
 8002c0e:	419b      	sbcs	r3, r3
 8002c10:	425b      	negs	r3, r3
 8002c12:	4463      	add	r3, ip
 8002c14:	4699      	mov	r9, r3
 8002c16:	464b      	mov	r3, r9
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	d400      	bmi.n	8002c1e <__aeabi_dsub+0x42e>
 8002c1c:	e756      	b.n	8002acc <__aeabi_dsub+0x2dc>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	469c      	mov	ip, r3
 8002c22:	4ba8      	ldr	r3, [pc, #672]	; (8002ec4 <__aeabi_dsub+0x6d4>)
 8002c24:	44e0      	add	r8, ip
 8002c26:	4598      	cmp	r8, r3
 8002c28:	d038      	beq.n	8002c9c <__aeabi_dsub+0x4ac>
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	48a6      	ldr	r0, [pc, #664]	; (8002ec8 <__aeabi_dsub+0x6d8>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4003      	ands	r3, r0
 8002c32:	0018      	movs	r0, r3
 8002c34:	0863      	lsrs	r3, r4, #1
 8002c36:	4014      	ands	r4, r2
 8002c38:	431c      	orrs	r4, r3
 8002c3a:	07c3      	lsls	r3, r0, #31
 8002c3c:	431c      	orrs	r4, r3
 8002c3e:	0843      	lsrs	r3, r0, #1
 8002c40:	4699      	mov	r9, r3
 8002c42:	e657      	b.n	80028f4 <__aeabi_dsub+0x104>
 8002c44:	0010      	movs	r0, r2
 8002c46:	000e      	movs	r6, r1
 8002c48:	3820      	subs	r0, #32
 8002c4a:	40c6      	lsrs	r6, r0
 8002c4c:	2a20      	cmp	r2, #32
 8002c4e:	d004      	beq.n	8002c5a <__aeabi_dsub+0x46a>
 8002c50:	2040      	movs	r0, #64	; 0x40
 8002c52:	1a82      	subs	r2, r0, r2
 8002c54:	4091      	lsls	r1, r2
 8002c56:	430f      	orrs	r7, r1
 8002c58:	46b9      	mov	r9, r7
 8002c5a:	464f      	mov	r7, r9
 8002c5c:	1e7a      	subs	r2, r7, #1
 8002c5e:	4197      	sbcs	r7, r2
 8002c60:	4337      	orrs	r7, r6
 8002c62:	e60f      	b.n	8002884 <__aeabi_dsub+0x94>
 8002c64:	4662      	mov	r2, ip
 8002c66:	431a      	orrs	r2, r3
 8002c68:	0013      	movs	r3, r2
 8002c6a:	1e5a      	subs	r2, r3, #1
 8002c6c:	4193      	sbcs	r3, r2
 8002c6e:	1afc      	subs	r4, r7, r3
 8002c70:	42a7      	cmp	r7, r4
 8002c72:	41bf      	sbcs	r7, r7
 8002c74:	427f      	negs	r7, r7
 8002c76:	1bcb      	subs	r3, r1, r7
 8002c78:	4699      	mov	r9, r3
 8002c7a:	465d      	mov	r5, fp
 8002c7c:	4680      	mov	r8, r0
 8002c7e:	e608      	b.n	8002892 <__aeabi_dsub+0xa2>
 8002c80:	4666      	mov	r6, ip
 8002c82:	431e      	orrs	r6, r3
 8002c84:	d100      	bne.n	8002c88 <__aeabi_dsub+0x498>
 8002c86:	e0be      	b.n	8002e06 <__aeabi_dsub+0x616>
 8002c88:	1e56      	subs	r6, r2, #1
 8002c8a:	2a01      	cmp	r2, #1
 8002c8c:	d100      	bne.n	8002c90 <__aeabi_dsub+0x4a0>
 8002c8e:	e109      	b.n	8002ea4 <__aeabi_dsub+0x6b4>
 8002c90:	4c8c      	ldr	r4, [pc, #560]	; (8002ec4 <__aeabi_dsub+0x6d4>)
 8002c92:	42a2      	cmp	r2, r4
 8002c94:	d100      	bne.n	8002c98 <__aeabi_dsub+0x4a8>
 8002c96:	e119      	b.n	8002ecc <__aeabi_dsub+0x6dc>
 8002c98:	0032      	movs	r2, r6
 8002c9a:	e6c1      	b.n	8002a20 <__aeabi_dsub+0x230>
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	2400      	movs	r4, #0
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e648      	b.n	8002936 <__aeabi_dsub+0x146>
 8002ca4:	2020      	movs	r0, #32
 8002ca6:	000c      	movs	r4, r1
 8002ca8:	1a80      	subs	r0, r0, r2
 8002caa:	003e      	movs	r6, r7
 8002cac:	4087      	lsls	r7, r0
 8002cae:	4084      	lsls	r4, r0
 8002cb0:	40d6      	lsrs	r6, r2
 8002cb2:	1e78      	subs	r0, r7, #1
 8002cb4:	4187      	sbcs	r7, r0
 8002cb6:	40d1      	lsrs	r1, r2
 8002cb8:	4334      	orrs	r4, r6
 8002cba:	433c      	orrs	r4, r7
 8002cbc:	448c      	add	ip, r1
 8002cbe:	e7a4      	b.n	8002c0a <__aeabi_dsub+0x41a>
 8002cc0:	4a80      	ldr	r2, [pc, #512]	; (8002ec4 <__aeabi_dsub+0x6d4>)
 8002cc2:	4290      	cmp	r0, r2
 8002cc4:	d100      	bne.n	8002cc8 <__aeabi_dsub+0x4d8>
 8002cc6:	e0e9      	b.n	8002e9c <__aeabi_dsub+0x6ac>
 8002cc8:	19df      	adds	r7, r3, r7
 8002cca:	429f      	cmp	r7, r3
 8002ccc:	419b      	sbcs	r3, r3
 8002cce:	4461      	add	r1, ip
 8002cd0:	425b      	negs	r3, r3
 8002cd2:	18c9      	adds	r1, r1, r3
 8002cd4:	07cc      	lsls	r4, r1, #31
 8002cd6:	087f      	lsrs	r7, r7, #1
 8002cd8:	084b      	lsrs	r3, r1, #1
 8002cda:	4699      	mov	r9, r3
 8002cdc:	4680      	mov	r8, r0
 8002cde:	433c      	orrs	r4, r7
 8002ce0:	e6f4      	b.n	8002acc <__aeabi_dsub+0x2dc>
 8002ce2:	1afc      	subs	r4, r7, r3
 8002ce4:	42a7      	cmp	r7, r4
 8002ce6:	41bf      	sbcs	r7, r7
 8002ce8:	4663      	mov	r3, ip
 8002cea:	427f      	negs	r7, r7
 8002cec:	1ac9      	subs	r1, r1, r3
 8002cee:	1bcb      	subs	r3, r1, r7
 8002cf0:	4699      	mov	r9, r3
 8002cf2:	465d      	mov	r5, fp
 8002cf4:	e5d5      	b.n	80028a2 <__aeabi_dsub+0xb2>
 8002cf6:	08ff      	lsrs	r7, r7, #3
 8002cf8:	074b      	lsls	r3, r1, #29
 8002cfa:	465d      	mov	r5, fp
 8002cfc:	433b      	orrs	r3, r7
 8002cfe:	08cc      	lsrs	r4, r1, #3
 8002d00:	e6ee      	b.n	8002ae0 <__aeabi_dsub+0x2f0>
 8002d02:	4662      	mov	r2, ip
 8002d04:	431a      	orrs	r2, r3
 8002d06:	d000      	beq.n	8002d0a <__aeabi_dsub+0x51a>
 8002d08:	e082      	b.n	8002e10 <__aeabi_dsub+0x620>
 8002d0a:	000b      	movs	r3, r1
 8002d0c:	433b      	orrs	r3, r7
 8002d0e:	d11b      	bne.n	8002d48 <__aeabi_dsub+0x558>
 8002d10:	2480      	movs	r4, #128	; 0x80
 8002d12:	2500      	movs	r5, #0
 8002d14:	0324      	lsls	r4, r4, #12
 8002d16:	e6f9      	b.n	8002b0c <__aeabi_dsub+0x31c>
 8002d18:	19dc      	adds	r4, r3, r7
 8002d1a:	429c      	cmp	r4, r3
 8002d1c:	419b      	sbcs	r3, r3
 8002d1e:	4461      	add	r1, ip
 8002d20:	4689      	mov	r9, r1
 8002d22:	425b      	negs	r3, r3
 8002d24:	4499      	add	r9, r3
 8002d26:	464b      	mov	r3, r9
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	d444      	bmi.n	8002db6 <__aeabi_dsub+0x5c6>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	4698      	mov	r8, r3
 8002d30:	e6cc      	b.n	8002acc <__aeabi_dsub+0x2dc>
 8002d32:	1bdc      	subs	r4, r3, r7
 8002d34:	4662      	mov	r2, ip
 8002d36:	42a3      	cmp	r3, r4
 8002d38:	419b      	sbcs	r3, r3
 8002d3a:	1a51      	subs	r1, r2, r1
 8002d3c:	425b      	negs	r3, r3
 8002d3e:	1acb      	subs	r3, r1, r3
 8002d40:	4699      	mov	r9, r3
 8002d42:	2301      	movs	r3, #1
 8002d44:	4698      	mov	r8, r3
 8002d46:	e5a4      	b.n	8002892 <__aeabi_dsub+0xa2>
 8002d48:	08ff      	lsrs	r7, r7, #3
 8002d4a:	074b      	lsls	r3, r1, #29
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	433b      	orrs	r3, r7
 8002d50:	08cc      	lsrs	r4, r1, #3
 8002d52:	e6d7      	b.n	8002b04 <__aeabi_dsub+0x314>
 8002d54:	4662      	mov	r2, ip
 8002d56:	431a      	orrs	r2, r3
 8002d58:	0014      	movs	r4, r2
 8002d5a:	1e63      	subs	r3, r4, #1
 8002d5c:	419c      	sbcs	r4, r3
 8002d5e:	e679      	b.n	8002a54 <__aeabi_dsub+0x264>
 8002d60:	0015      	movs	r5, r2
 8002d62:	4664      	mov	r4, ip
 8002d64:	3d20      	subs	r5, #32
 8002d66:	40ec      	lsrs	r4, r5
 8002d68:	46a0      	mov	r8, r4
 8002d6a:	2a20      	cmp	r2, #32
 8002d6c:	d005      	beq.n	8002d7a <__aeabi_dsub+0x58a>
 8002d6e:	2540      	movs	r5, #64	; 0x40
 8002d70:	4664      	mov	r4, ip
 8002d72:	1aaa      	subs	r2, r5, r2
 8002d74:	4094      	lsls	r4, r2
 8002d76:	4323      	orrs	r3, r4
 8002d78:	469a      	mov	sl, r3
 8002d7a:	4654      	mov	r4, sl
 8002d7c:	1e63      	subs	r3, r4, #1
 8002d7e:	419c      	sbcs	r4, r3
 8002d80:	4643      	mov	r3, r8
 8002d82:	4323      	orrs	r3, r4
 8002d84:	e773      	b.n	8002c6e <__aeabi_dsub+0x47e>
 8002d86:	4662      	mov	r2, ip
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	d023      	beq.n	8002dd4 <__aeabi_dsub+0x5e4>
 8002d8c:	000a      	movs	r2, r1
 8002d8e:	433a      	orrs	r2, r7
 8002d90:	d000      	beq.n	8002d94 <__aeabi_dsub+0x5a4>
 8002d92:	e0a0      	b.n	8002ed6 <__aeabi_dsub+0x6e6>
 8002d94:	4662      	mov	r2, ip
 8002d96:	08db      	lsrs	r3, r3, #3
 8002d98:	0752      	lsls	r2, r2, #29
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	4662      	mov	r2, ip
 8002d9e:	08d4      	lsrs	r4, r2, #3
 8002da0:	e6b0      	b.n	8002b04 <__aeabi_dsub+0x314>
 8002da2:	000b      	movs	r3, r1
 8002da4:	433b      	orrs	r3, r7
 8002da6:	d100      	bne.n	8002daa <__aeabi_dsub+0x5ba>
 8002da8:	e728      	b.n	8002bfc <__aeabi_dsub+0x40c>
 8002daa:	08ff      	lsrs	r7, r7, #3
 8002dac:	074b      	lsls	r3, r1, #29
 8002dae:	465d      	mov	r5, fp
 8002db0:	433b      	orrs	r3, r7
 8002db2:	08cc      	lsrs	r4, r1, #3
 8002db4:	e697      	b.n	8002ae6 <__aeabi_dsub+0x2f6>
 8002db6:	2302      	movs	r3, #2
 8002db8:	4698      	mov	r8, r3
 8002dba:	e736      	b.n	8002c2a <__aeabi_dsub+0x43a>
 8002dbc:	1afc      	subs	r4, r7, r3
 8002dbe:	42a7      	cmp	r7, r4
 8002dc0:	41bf      	sbcs	r7, r7
 8002dc2:	4663      	mov	r3, ip
 8002dc4:	427f      	negs	r7, r7
 8002dc6:	1ac9      	subs	r1, r1, r3
 8002dc8:	1bcb      	subs	r3, r1, r7
 8002dca:	4699      	mov	r9, r3
 8002dcc:	2301      	movs	r3, #1
 8002dce:	465d      	mov	r5, fp
 8002dd0:	4698      	mov	r8, r3
 8002dd2:	e55e      	b.n	8002892 <__aeabi_dsub+0xa2>
 8002dd4:	074b      	lsls	r3, r1, #29
 8002dd6:	08ff      	lsrs	r7, r7, #3
 8002dd8:	433b      	orrs	r3, r7
 8002dda:	08cc      	lsrs	r4, r1, #3
 8002ddc:	e692      	b.n	8002b04 <__aeabi_dsub+0x314>
 8002dde:	1bdc      	subs	r4, r3, r7
 8002de0:	4660      	mov	r0, ip
 8002de2:	42a3      	cmp	r3, r4
 8002de4:	41b6      	sbcs	r6, r6
 8002de6:	1a40      	subs	r0, r0, r1
 8002de8:	4276      	negs	r6, r6
 8002dea:	1b80      	subs	r0, r0, r6
 8002dec:	4681      	mov	r9, r0
 8002dee:	0200      	lsls	r0, r0, #8
 8002df0:	d560      	bpl.n	8002eb4 <__aeabi_dsub+0x6c4>
 8002df2:	1afc      	subs	r4, r7, r3
 8002df4:	42a7      	cmp	r7, r4
 8002df6:	41bf      	sbcs	r7, r7
 8002df8:	4663      	mov	r3, ip
 8002dfa:	427f      	negs	r7, r7
 8002dfc:	1ac9      	subs	r1, r1, r3
 8002dfe:	1bcb      	subs	r3, r1, r7
 8002e00:	4699      	mov	r9, r3
 8002e02:	465d      	mov	r5, fp
 8002e04:	e576      	b.n	80028f4 <__aeabi_dsub+0x104>
 8002e06:	08ff      	lsrs	r7, r7, #3
 8002e08:	074b      	lsls	r3, r1, #29
 8002e0a:	433b      	orrs	r3, r7
 8002e0c:	08cc      	lsrs	r4, r1, #3
 8002e0e:	e667      	b.n	8002ae0 <__aeabi_dsub+0x2f0>
 8002e10:	000a      	movs	r2, r1
 8002e12:	08db      	lsrs	r3, r3, #3
 8002e14:	433a      	orrs	r2, r7
 8002e16:	d100      	bne.n	8002e1a <__aeabi_dsub+0x62a>
 8002e18:	e66f      	b.n	8002afa <__aeabi_dsub+0x30a>
 8002e1a:	4662      	mov	r2, ip
 8002e1c:	0752      	lsls	r2, r2, #29
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	4662      	mov	r2, ip
 8002e22:	08d4      	lsrs	r4, r2, #3
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	0312      	lsls	r2, r2, #12
 8002e28:	4214      	tst	r4, r2
 8002e2a:	d007      	beq.n	8002e3c <__aeabi_dsub+0x64c>
 8002e2c:	08c8      	lsrs	r0, r1, #3
 8002e2e:	4210      	tst	r0, r2
 8002e30:	d104      	bne.n	8002e3c <__aeabi_dsub+0x64c>
 8002e32:	465d      	mov	r5, fp
 8002e34:	0004      	movs	r4, r0
 8002e36:	08fb      	lsrs	r3, r7, #3
 8002e38:	0749      	lsls	r1, r1, #29
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	0f5a      	lsrs	r2, r3, #29
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	08db      	lsrs	r3, r3, #3
 8002e42:	0752      	lsls	r2, r2, #29
 8002e44:	4313      	orrs	r3, r2
 8002e46:	e65d      	b.n	8002b04 <__aeabi_dsub+0x314>
 8002e48:	074b      	lsls	r3, r1, #29
 8002e4a:	08ff      	lsrs	r7, r7, #3
 8002e4c:	433b      	orrs	r3, r7
 8002e4e:	08cc      	lsrs	r4, r1, #3
 8002e50:	e649      	b.n	8002ae6 <__aeabi_dsub+0x2f6>
 8002e52:	19dc      	adds	r4, r3, r7
 8002e54:	429c      	cmp	r4, r3
 8002e56:	419b      	sbcs	r3, r3
 8002e58:	4461      	add	r1, ip
 8002e5a:	4689      	mov	r9, r1
 8002e5c:	425b      	negs	r3, r3
 8002e5e:	4499      	add	r9, r3
 8002e60:	464b      	mov	r3, r9
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	d400      	bmi.n	8002e68 <__aeabi_dsub+0x678>
 8002e66:	e631      	b.n	8002acc <__aeabi_dsub+0x2dc>
 8002e68:	464a      	mov	r2, r9
 8002e6a:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <__aeabi_dsub+0x6d8>)
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	2301      	movs	r3, #1
 8002e70:	4691      	mov	r9, r2
 8002e72:	4698      	mov	r8, r3
 8002e74:	e62a      	b.n	8002acc <__aeabi_dsub+0x2dc>
 8002e76:	0016      	movs	r6, r2
 8002e78:	4664      	mov	r4, ip
 8002e7a:	3e20      	subs	r6, #32
 8002e7c:	40f4      	lsrs	r4, r6
 8002e7e:	46a0      	mov	r8, r4
 8002e80:	2a20      	cmp	r2, #32
 8002e82:	d005      	beq.n	8002e90 <__aeabi_dsub+0x6a0>
 8002e84:	2640      	movs	r6, #64	; 0x40
 8002e86:	4664      	mov	r4, ip
 8002e88:	1ab2      	subs	r2, r6, r2
 8002e8a:	4094      	lsls	r4, r2
 8002e8c:	4323      	orrs	r3, r4
 8002e8e:	469a      	mov	sl, r3
 8002e90:	4654      	mov	r4, sl
 8002e92:	1e63      	subs	r3, r4, #1
 8002e94:	419c      	sbcs	r4, r3
 8002e96:	4643      	mov	r3, r8
 8002e98:	431c      	orrs	r4, r3
 8002e9a:	e5db      	b.n	8002a54 <__aeabi_dsub+0x264>
 8002e9c:	0002      	movs	r2, r0
 8002e9e:	2400      	movs	r4, #0
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e548      	b.n	8002936 <__aeabi_dsub+0x146>
 8002ea4:	19dc      	adds	r4, r3, r7
 8002ea6:	42bc      	cmp	r4, r7
 8002ea8:	41bf      	sbcs	r7, r7
 8002eaa:	4461      	add	r1, ip
 8002eac:	4689      	mov	r9, r1
 8002eae:	427f      	negs	r7, r7
 8002eb0:	44b9      	add	r9, r7
 8002eb2:	e738      	b.n	8002d26 <__aeabi_dsub+0x536>
 8002eb4:	464b      	mov	r3, r9
 8002eb6:	4323      	orrs	r3, r4
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x6cc>
 8002eba:	e69f      	b.n	8002bfc <__aeabi_dsub+0x40c>
 8002ebc:	e606      	b.n	8002acc <__aeabi_dsub+0x2dc>
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	000007fe 	.word	0x000007fe
 8002ec4:	000007ff 	.word	0x000007ff
 8002ec8:	ff7fffff 	.word	0xff7fffff
 8002ecc:	08ff      	lsrs	r7, r7, #3
 8002ece:	074b      	lsls	r3, r1, #29
 8002ed0:	433b      	orrs	r3, r7
 8002ed2:	08cc      	lsrs	r4, r1, #3
 8002ed4:	e616      	b.n	8002b04 <__aeabi_dsub+0x314>
 8002ed6:	4662      	mov	r2, ip
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	0752      	lsls	r2, r2, #29
 8002edc:	4313      	orrs	r3, r2
 8002ede:	4662      	mov	r2, ip
 8002ee0:	08d4      	lsrs	r4, r2, #3
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	0312      	lsls	r2, r2, #12
 8002ee6:	4214      	tst	r4, r2
 8002ee8:	d007      	beq.n	8002efa <__aeabi_dsub+0x70a>
 8002eea:	08c8      	lsrs	r0, r1, #3
 8002eec:	4210      	tst	r0, r2
 8002eee:	d104      	bne.n	8002efa <__aeabi_dsub+0x70a>
 8002ef0:	465d      	mov	r5, fp
 8002ef2:	0004      	movs	r4, r0
 8002ef4:	08fb      	lsrs	r3, r7, #3
 8002ef6:	0749      	lsls	r1, r1, #29
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	0f5a      	lsrs	r2, r3, #29
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	0752      	lsls	r2, r2, #29
 8002f00:	08db      	lsrs	r3, r3, #3
 8002f02:	4313      	orrs	r3, r2
 8002f04:	e5fe      	b.n	8002b04 <__aeabi_dsub+0x314>
 8002f06:	2300      	movs	r3, #0
 8002f08:	4a01      	ldr	r2, [pc, #4]	; (8002f10 <__aeabi_dsub+0x720>)
 8002f0a:	001c      	movs	r4, r3
 8002f0c:	e513      	b.n	8002936 <__aeabi_dsub+0x146>
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	000007ff 	.word	0x000007ff

08002f14 <__aeabi_dcmpun>:
 8002f14:	b570      	push	{r4, r5, r6, lr}
 8002f16:	0005      	movs	r5, r0
 8002f18:	480c      	ldr	r0, [pc, #48]	; (8002f4c <__aeabi_dcmpun+0x38>)
 8002f1a:	031c      	lsls	r4, r3, #12
 8002f1c:	0016      	movs	r6, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	030a      	lsls	r2, r1, #12
 8002f22:	0049      	lsls	r1, r1, #1
 8002f24:	0b12      	lsrs	r2, r2, #12
 8002f26:	0d49      	lsrs	r1, r1, #21
 8002f28:	0b24      	lsrs	r4, r4, #12
 8002f2a:	0d5b      	lsrs	r3, r3, #21
 8002f2c:	4281      	cmp	r1, r0
 8002f2e:	d008      	beq.n	8002f42 <__aeabi_dcmpun+0x2e>
 8002f30:	4a06      	ldr	r2, [pc, #24]	; (8002f4c <__aeabi_dcmpun+0x38>)
 8002f32:	2000      	movs	r0, #0
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d103      	bne.n	8002f40 <__aeabi_dcmpun+0x2c>
 8002f38:	0020      	movs	r0, r4
 8002f3a:	4330      	orrs	r0, r6
 8002f3c:	1e43      	subs	r3, r0, #1
 8002f3e:	4198      	sbcs	r0, r3
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
 8002f42:	2001      	movs	r0, #1
 8002f44:	432a      	orrs	r2, r5
 8002f46:	d1fb      	bne.n	8002f40 <__aeabi_dcmpun+0x2c>
 8002f48:	e7f2      	b.n	8002f30 <__aeabi_dcmpun+0x1c>
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	000007ff 	.word	0x000007ff

08002f50 <__aeabi_d2iz>:
 8002f50:	000a      	movs	r2, r1
 8002f52:	b530      	push	{r4, r5, lr}
 8002f54:	4c13      	ldr	r4, [pc, #76]	; (8002fa4 <__aeabi_d2iz+0x54>)
 8002f56:	0053      	lsls	r3, r2, #1
 8002f58:	0309      	lsls	r1, r1, #12
 8002f5a:	0005      	movs	r5, r0
 8002f5c:	0b09      	lsrs	r1, r1, #12
 8002f5e:	2000      	movs	r0, #0
 8002f60:	0d5b      	lsrs	r3, r3, #21
 8002f62:	0fd2      	lsrs	r2, r2, #31
 8002f64:	42a3      	cmp	r3, r4
 8002f66:	dd04      	ble.n	8002f72 <__aeabi_d2iz+0x22>
 8002f68:	480f      	ldr	r0, [pc, #60]	; (8002fa8 <__aeabi_d2iz+0x58>)
 8002f6a:	4283      	cmp	r3, r0
 8002f6c:	dd02      	ble.n	8002f74 <__aeabi_d2iz+0x24>
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <__aeabi_d2iz+0x5c>)
 8002f70:	18d0      	adds	r0, r2, r3
 8002f72:	bd30      	pop	{r4, r5, pc}
 8002f74:	2080      	movs	r0, #128	; 0x80
 8002f76:	0340      	lsls	r0, r0, #13
 8002f78:	4301      	orrs	r1, r0
 8002f7a:	480d      	ldr	r0, [pc, #52]	; (8002fb0 <__aeabi_d2iz+0x60>)
 8002f7c:	1ac0      	subs	r0, r0, r3
 8002f7e:	281f      	cmp	r0, #31
 8002f80:	dd08      	ble.n	8002f94 <__aeabi_d2iz+0x44>
 8002f82:	480c      	ldr	r0, [pc, #48]	; (8002fb4 <__aeabi_d2iz+0x64>)
 8002f84:	1ac3      	subs	r3, r0, r3
 8002f86:	40d9      	lsrs	r1, r3
 8002f88:	000b      	movs	r3, r1
 8002f8a:	4258      	negs	r0, r3
 8002f8c:	2a00      	cmp	r2, #0
 8002f8e:	d1f0      	bne.n	8002f72 <__aeabi_d2iz+0x22>
 8002f90:	0018      	movs	r0, r3
 8002f92:	e7ee      	b.n	8002f72 <__aeabi_d2iz+0x22>
 8002f94:	4c08      	ldr	r4, [pc, #32]	; (8002fb8 <__aeabi_d2iz+0x68>)
 8002f96:	40c5      	lsrs	r5, r0
 8002f98:	46a4      	mov	ip, r4
 8002f9a:	4463      	add	r3, ip
 8002f9c:	4099      	lsls	r1, r3
 8002f9e:	000b      	movs	r3, r1
 8002fa0:	432b      	orrs	r3, r5
 8002fa2:	e7f2      	b.n	8002f8a <__aeabi_d2iz+0x3a>
 8002fa4:	000003fe 	.word	0x000003fe
 8002fa8:	0000041d 	.word	0x0000041d
 8002fac:	7fffffff 	.word	0x7fffffff
 8002fb0:	00000433 	.word	0x00000433
 8002fb4:	00000413 	.word	0x00000413
 8002fb8:	fffffbed 	.word	0xfffffbed

08002fbc <__aeabi_i2d>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	d016      	beq.n	8002ff0 <__aeabi_i2d+0x34>
 8002fc2:	17c3      	asrs	r3, r0, #31
 8002fc4:	18c5      	adds	r5, r0, r3
 8002fc6:	405d      	eors	r5, r3
 8002fc8:	0fc4      	lsrs	r4, r0, #31
 8002fca:	0028      	movs	r0, r5
 8002fcc:	f000 f91c 	bl	8003208 <__clzsi2>
 8002fd0:	4a11      	ldr	r2, [pc, #68]	; (8003018 <__aeabi_i2d+0x5c>)
 8002fd2:	1a12      	subs	r2, r2, r0
 8002fd4:	280a      	cmp	r0, #10
 8002fd6:	dc16      	bgt.n	8003006 <__aeabi_i2d+0x4a>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	002e      	movs	r6, r5
 8002fdc:	3315      	adds	r3, #21
 8002fde:	409e      	lsls	r6, r3
 8002fe0:	230b      	movs	r3, #11
 8002fe2:	1a18      	subs	r0, r3, r0
 8002fe4:	40c5      	lsrs	r5, r0
 8002fe6:	0552      	lsls	r2, r2, #21
 8002fe8:	032d      	lsls	r5, r5, #12
 8002fea:	0b2d      	lsrs	r5, r5, #12
 8002fec:	0d53      	lsrs	r3, r2, #21
 8002fee:	e003      	b.n	8002ff8 <__aeabi_i2d+0x3c>
 8002ff0:	2400      	movs	r4, #0
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2500      	movs	r5, #0
 8002ff6:	2600      	movs	r6, #0
 8002ff8:	051b      	lsls	r3, r3, #20
 8002ffa:	432b      	orrs	r3, r5
 8002ffc:	07e4      	lsls	r4, r4, #31
 8002ffe:	4323      	orrs	r3, r4
 8003000:	0030      	movs	r0, r6
 8003002:	0019      	movs	r1, r3
 8003004:	bd70      	pop	{r4, r5, r6, pc}
 8003006:	380b      	subs	r0, #11
 8003008:	4085      	lsls	r5, r0
 800300a:	0552      	lsls	r2, r2, #21
 800300c:	032d      	lsls	r5, r5, #12
 800300e:	2600      	movs	r6, #0
 8003010:	0b2d      	lsrs	r5, r5, #12
 8003012:	0d53      	lsrs	r3, r2, #21
 8003014:	e7f0      	b.n	8002ff8 <__aeabi_i2d+0x3c>
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	0000041e 	.word	0x0000041e

0800301c <__aeabi_ui2d>:
 800301c:	b510      	push	{r4, lr}
 800301e:	1e04      	subs	r4, r0, #0
 8003020:	d010      	beq.n	8003044 <__aeabi_ui2d+0x28>
 8003022:	f000 f8f1 	bl	8003208 <__clzsi2>
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <__aeabi_ui2d+0x48>)
 8003028:	1a1b      	subs	r3, r3, r0
 800302a:	280a      	cmp	r0, #10
 800302c:	dc11      	bgt.n	8003052 <__aeabi_ui2d+0x36>
 800302e:	220b      	movs	r2, #11
 8003030:	0021      	movs	r1, r4
 8003032:	1a12      	subs	r2, r2, r0
 8003034:	40d1      	lsrs	r1, r2
 8003036:	3015      	adds	r0, #21
 8003038:	030a      	lsls	r2, r1, #12
 800303a:	055b      	lsls	r3, r3, #21
 800303c:	4084      	lsls	r4, r0
 800303e:	0b12      	lsrs	r2, r2, #12
 8003040:	0d5b      	lsrs	r3, r3, #21
 8003042:	e001      	b.n	8003048 <__aeabi_ui2d+0x2c>
 8003044:	2300      	movs	r3, #0
 8003046:	2200      	movs	r2, #0
 8003048:	051b      	lsls	r3, r3, #20
 800304a:	4313      	orrs	r3, r2
 800304c:	0020      	movs	r0, r4
 800304e:	0019      	movs	r1, r3
 8003050:	bd10      	pop	{r4, pc}
 8003052:	0022      	movs	r2, r4
 8003054:	380b      	subs	r0, #11
 8003056:	4082      	lsls	r2, r0
 8003058:	055b      	lsls	r3, r3, #21
 800305a:	0312      	lsls	r2, r2, #12
 800305c:	2400      	movs	r4, #0
 800305e:	0b12      	lsrs	r2, r2, #12
 8003060:	0d5b      	lsrs	r3, r3, #21
 8003062:	e7f1      	b.n	8003048 <__aeabi_ui2d+0x2c>
 8003064:	0000041e 	.word	0x0000041e

08003068 <__aeabi_f2d>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	0043      	lsls	r3, r0, #1
 800306c:	0246      	lsls	r6, r0, #9
 800306e:	0fc4      	lsrs	r4, r0, #31
 8003070:	20fe      	movs	r0, #254	; 0xfe
 8003072:	0e1b      	lsrs	r3, r3, #24
 8003074:	1c59      	adds	r1, r3, #1
 8003076:	0a75      	lsrs	r5, r6, #9
 8003078:	4208      	tst	r0, r1
 800307a:	d00c      	beq.n	8003096 <__aeabi_f2d+0x2e>
 800307c:	22e0      	movs	r2, #224	; 0xe0
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4694      	mov	ip, r2
 8003082:	076d      	lsls	r5, r5, #29
 8003084:	0b36      	lsrs	r6, r6, #12
 8003086:	4463      	add	r3, ip
 8003088:	051b      	lsls	r3, r3, #20
 800308a:	4333      	orrs	r3, r6
 800308c:	07e4      	lsls	r4, r4, #31
 800308e:	4323      	orrs	r3, r4
 8003090:	0028      	movs	r0, r5
 8003092:	0019      	movs	r1, r3
 8003094:	bd70      	pop	{r4, r5, r6, pc}
 8003096:	2b00      	cmp	r3, #0
 8003098:	d114      	bne.n	80030c4 <__aeabi_f2d+0x5c>
 800309a:	2d00      	cmp	r5, #0
 800309c:	d01b      	beq.n	80030d6 <__aeabi_f2d+0x6e>
 800309e:	0028      	movs	r0, r5
 80030a0:	f000 f8b2 	bl	8003208 <__clzsi2>
 80030a4:	280a      	cmp	r0, #10
 80030a6:	dc1c      	bgt.n	80030e2 <__aeabi_f2d+0x7a>
 80030a8:	230b      	movs	r3, #11
 80030aa:	002e      	movs	r6, r5
 80030ac:	1a1b      	subs	r3, r3, r0
 80030ae:	40de      	lsrs	r6, r3
 80030b0:	0003      	movs	r3, r0
 80030b2:	3315      	adds	r3, #21
 80030b4:	409d      	lsls	r5, r3
 80030b6:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <__aeabi_f2d+0x88>)
 80030b8:	0336      	lsls	r6, r6, #12
 80030ba:	1a12      	subs	r2, r2, r0
 80030bc:	0552      	lsls	r2, r2, #21
 80030be:	0b36      	lsrs	r6, r6, #12
 80030c0:	0d53      	lsrs	r3, r2, #21
 80030c2:	e7e1      	b.n	8003088 <__aeabi_f2d+0x20>
 80030c4:	2d00      	cmp	r5, #0
 80030c6:	d009      	beq.n	80030dc <__aeabi_f2d+0x74>
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	0b36      	lsrs	r6, r6, #12
 80030cc:	0312      	lsls	r2, r2, #12
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <__aeabi_f2d+0x8c>)
 80030d0:	076d      	lsls	r5, r5, #29
 80030d2:	4316      	orrs	r6, r2
 80030d4:	e7d8      	b.n	8003088 <__aeabi_f2d+0x20>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2600      	movs	r6, #0
 80030da:	e7d5      	b.n	8003088 <__aeabi_f2d+0x20>
 80030dc:	2600      	movs	r6, #0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <__aeabi_f2d+0x8c>)
 80030e0:	e7d2      	b.n	8003088 <__aeabi_f2d+0x20>
 80030e2:	0003      	movs	r3, r0
 80030e4:	3b0b      	subs	r3, #11
 80030e6:	409d      	lsls	r5, r3
 80030e8:	002e      	movs	r6, r5
 80030ea:	2500      	movs	r5, #0
 80030ec:	e7e3      	b.n	80030b6 <__aeabi_f2d+0x4e>
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	00000389 	.word	0x00000389
 80030f4:	000007ff 	.word	0x000007ff

080030f8 <__aeabi_d2f>:
 80030f8:	0002      	movs	r2, r0
 80030fa:	004b      	lsls	r3, r1, #1
 80030fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fe:	0d5b      	lsrs	r3, r3, #21
 8003100:	030c      	lsls	r4, r1, #12
 8003102:	4e3d      	ldr	r6, [pc, #244]	; (80031f8 <__aeabi_d2f+0x100>)
 8003104:	0a64      	lsrs	r4, r4, #9
 8003106:	0f40      	lsrs	r0, r0, #29
 8003108:	1c5f      	adds	r7, r3, #1
 800310a:	0fc9      	lsrs	r1, r1, #31
 800310c:	4304      	orrs	r4, r0
 800310e:	00d5      	lsls	r5, r2, #3
 8003110:	4237      	tst	r7, r6
 8003112:	d00a      	beq.n	800312a <__aeabi_d2f+0x32>
 8003114:	4839      	ldr	r0, [pc, #228]	; (80031fc <__aeabi_d2f+0x104>)
 8003116:	181e      	adds	r6, r3, r0
 8003118:	2efe      	cmp	r6, #254	; 0xfe
 800311a:	dd16      	ble.n	800314a <__aeabi_d2f+0x52>
 800311c:	20ff      	movs	r0, #255	; 0xff
 800311e:	2400      	movs	r4, #0
 8003120:	05c0      	lsls	r0, r0, #23
 8003122:	4320      	orrs	r0, r4
 8003124:	07c9      	lsls	r1, r1, #31
 8003126:	4308      	orrs	r0, r1
 8003128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <__aeabi_d2f+0x44>
 800312e:	432c      	orrs	r4, r5
 8003130:	d026      	beq.n	8003180 <__aeabi_d2f+0x88>
 8003132:	2205      	movs	r2, #5
 8003134:	0192      	lsls	r2, r2, #6
 8003136:	0a54      	lsrs	r4, r2, #9
 8003138:	b2d8      	uxtb	r0, r3
 800313a:	e7f1      	b.n	8003120 <__aeabi_d2f+0x28>
 800313c:	4325      	orrs	r5, r4
 800313e:	d0ed      	beq.n	800311c <__aeabi_d2f+0x24>
 8003140:	2080      	movs	r0, #128	; 0x80
 8003142:	03c0      	lsls	r0, r0, #15
 8003144:	4304      	orrs	r4, r0
 8003146:	20ff      	movs	r0, #255	; 0xff
 8003148:	e7ea      	b.n	8003120 <__aeabi_d2f+0x28>
 800314a:	2e00      	cmp	r6, #0
 800314c:	dd1b      	ble.n	8003186 <__aeabi_d2f+0x8e>
 800314e:	0192      	lsls	r2, r2, #6
 8003150:	1e53      	subs	r3, r2, #1
 8003152:	419a      	sbcs	r2, r3
 8003154:	00e4      	lsls	r4, r4, #3
 8003156:	0f6d      	lsrs	r5, r5, #29
 8003158:	4322      	orrs	r2, r4
 800315a:	432a      	orrs	r2, r5
 800315c:	0753      	lsls	r3, r2, #29
 800315e:	d048      	beq.n	80031f2 <__aeabi_d2f+0xfa>
 8003160:	230f      	movs	r3, #15
 8003162:	4013      	ands	r3, r2
 8003164:	2b04      	cmp	r3, #4
 8003166:	d000      	beq.n	800316a <__aeabi_d2f+0x72>
 8003168:	3204      	adds	r2, #4
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	04db      	lsls	r3, r3, #19
 800316e:	4013      	ands	r3, r2
 8003170:	d03f      	beq.n	80031f2 <__aeabi_d2f+0xfa>
 8003172:	1c70      	adds	r0, r6, #1
 8003174:	2efe      	cmp	r6, #254	; 0xfe
 8003176:	d0d1      	beq.n	800311c <__aeabi_d2f+0x24>
 8003178:	0192      	lsls	r2, r2, #6
 800317a:	0a54      	lsrs	r4, r2, #9
 800317c:	b2c0      	uxtb	r0, r0
 800317e:	e7cf      	b.n	8003120 <__aeabi_d2f+0x28>
 8003180:	2000      	movs	r0, #0
 8003182:	2400      	movs	r4, #0
 8003184:	e7cc      	b.n	8003120 <__aeabi_d2f+0x28>
 8003186:	0032      	movs	r2, r6
 8003188:	3217      	adds	r2, #23
 800318a:	db22      	blt.n	80031d2 <__aeabi_d2f+0xda>
 800318c:	2080      	movs	r0, #128	; 0x80
 800318e:	0400      	lsls	r0, r0, #16
 8003190:	4320      	orrs	r0, r4
 8003192:	241e      	movs	r4, #30
 8003194:	1ba4      	subs	r4, r4, r6
 8003196:	2c1f      	cmp	r4, #31
 8003198:	dd1d      	ble.n	80031d6 <__aeabi_d2f+0xde>
 800319a:	2202      	movs	r2, #2
 800319c:	4252      	negs	r2, r2
 800319e:	1b96      	subs	r6, r2, r6
 80031a0:	0002      	movs	r2, r0
 80031a2:	40f2      	lsrs	r2, r6
 80031a4:	0016      	movs	r6, r2
 80031a6:	2c20      	cmp	r4, #32
 80031a8:	d004      	beq.n	80031b4 <__aeabi_d2f+0xbc>
 80031aa:	4a15      	ldr	r2, [pc, #84]	; (8003200 <__aeabi_d2f+0x108>)
 80031ac:	4694      	mov	ip, r2
 80031ae:	4463      	add	r3, ip
 80031b0:	4098      	lsls	r0, r3
 80031b2:	4305      	orrs	r5, r0
 80031b4:	002a      	movs	r2, r5
 80031b6:	1e53      	subs	r3, r2, #1
 80031b8:	419a      	sbcs	r2, r3
 80031ba:	4332      	orrs	r2, r6
 80031bc:	2600      	movs	r6, #0
 80031be:	0753      	lsls	r3, r2, #29
 80031c0:	d1ce      	bne.n	8003160 <__aeabi_d2f+0x68>
 80031c2:	2480      	movs	r4, #128	; 0x80
 80031c4:	0013      	movs	r3, r2
 80031c6:	04e4      	lsls	r4, r4, #19
 80031c8:	2001      	movs	r0, #1
 80031ca:	4023      	ands	r3, r4
 80031cc:	4222      	tst	r2, r4
 80031ce:	d1d3      	bne.n	8003178 <__aeabi_d2f+0x80>
 80031d0:	e7b0      	b.n	8003134 <__aeabi_d2f+0x3c>
 80031d2:	2300      	movs	r3, #0
 80031d4:	e7ad      	b.n	8003132 <__aeabi_d2f+0x3a>
 80031d6:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <__aeabi_d2f+0x10c>)
 80031d8:	4694      	mov	ip, r2
 80031da:	002a      	movs	r2, r5
 80031dc:	40e2      	lsrs	r2, r4
 80031de:	0014      	movs	r4, r2
 80031e0:	002a      	movs	r2, r5
 80031e2:	4463      	add	r3, ip
 80031e4:	409a      	lsls	r2, r3
 80031e6:	4098      	lsls	r0, r3
 80031e8:	1e55      	subs	r5, r2, #1
 80031ea:	41aa      	sbcs	r2, r5
 80031ec:	4302      	orrs	r2, r0
 80031ee:	4322      	orrs	r2, r4
 80031f0:	e7e4      	b.n	80031bc <__aeabi_d2f+0xc4>
 80031f2:	0033      	movs	r3, r6
 80031f4:	e79e      	b.n	8003134 <__aeabi_d2f+0x3c>
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	000007fe 	.word	0x000007fe
 80031fc:	fffffc80 	.word	0xfffffc80
 8003200:	fffffca2 	.word	0xfffffca2
 8003204:	fffffc82 	.word	0xfffffc82

08003208 <__clzsi2>:
 8003208:	211c      	movs	r1, #28
 800320a:	2301      	movs	r3, #1
 800320c:	041b      	lsls	r3, r3, #16
 800320e:	4298      	cmp	r0, r3
 8003210:	d301      	bcc.n	8003216 <__clzsi2+0xe>
 8003212:	0c00      	lsrs	r0, r0, #16
 8003214:	3910      	subs	r1, #16
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	4298      	cmp	r0, r3
 800321a:	d301      	bcc.n	8003220 <__clzsi2+0x18>
 800321c:	0a00      	lsrs	r0, r0, #8
 800321e:	3908      	subs	r1, #8
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	4298      	cmp	r0, r3
 8003224:	d301      	bcc.n	800322a <__clzsi2+0x22>
 8003226:	0900      	lsrs	r0, r0, #4
 8003228:	3904      	subs	r1, #4
 800322a:	a202      	add	r2, pc, #8	; (adr r2, 8003234 <__clzsi2+0x2c>)
 800322c:	5c10      	ldrb	r0, [r2, r0]
 800322e:	1840      	adds	r0, r0, r1
 8003230:	4770      	bx	lr
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	02020304 	.word	0x02020304
 8003238:	01010101 	.word	0x01010101
	...

08003244 <__clzdi2>:
 8003244:	b510      	push	{r4, lr}
 8003246:	2900      	cmp	r1, #0
 8003248:	d103      	bne.n	8003252 <__clzdi2+0xe>
 800324a:	f7ff ffdd 	bl	8003208 <__clzsi2>
 800324e:	3020      	adds	r0, #32
 8003250:	e002      	b.n	8003258 <__clzdi2+0x14>
 8003252:	0008      	movs	r0, r1
 8003254:	f7ff ffd8 	bl	8003208 <__clzsi2>
 8003258:	bd10      	pop	{r4, pc}
 800325a:	46c0      	nop			; (mov r8, r8)

0800325c <new_adc_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hadc is the adc and _total_channels are the total channels.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ADCSensor object
ADCSensor *new_adc_sensor(ADC_HandleTypeDef *hadc, uint8_t _total_channels) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	000a      	movs	r2, r1
 8003266:	1cfb      	adds	r3, r7, #3
 8003268:	701a      	strb	r2, [r3, #0]
    ADCSensor *adc_sensor = (ADCSensor*) malloc(sizeof(ADCSensor));
 800326a:	201c      	movs	r0, #28
 800326c:	f008 ff92 	bl	800c194 <malloc>
 8003270:	0003      	movs	r3, r0
 8003272:	60bb      	str	r3, [r7, #8]
    adc_sensor->adc = hadc;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	601a      	str	r2, [r3, #0]
    adc_sensor->total_channels = _total_channels;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1cfa      	adds	r2, r7, #3
 800327e:	7812      	ldrb	r2, [r2, #0]
 8003280:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < _total_channels; ++i) {
 8003282:	230f      	movs	r3, #15
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e00d      	b.n	80032a8 <new_adc_sensor+0x4c>
        adc_sensor->values[i] = 0;
 800328c:	210f      	movs	r1, #15
 800328e:	187b      	adds	r3, r7, r1
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	18d3      	adds	r3, r2, r3
 8003298:	3306      	adds	r3, #6
 800329a:	2200      	movs	r2, #0
 800329c:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < _total_channels; ++i) {
 800329e:	187b      	adds	r3, r7, r1
 80032a0:	187a      	adds	r2, r7, r1
 80032a2:	7812      	ldrb	r2, [r2, #0]
 80032a4:	3201      	adds	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	230f      	movs	r3, #15
 80032aa:	18fa      	adds	r2, r7, r3
 80032ac:	1cfb      	adds	r3, r7, #3
 80032ae:	7812      	ldrb	r2, [r2, #0]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d3ea      	bcc.n	800328c <new_adc_sensor+0x30>
    }
    return adc_sensor;
 80032b6:	68bb      	ldr	r3, [r7, #8]
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b004      	add	sp, #16
 80032be:	bd80      	pop	{r7, pc}

080032c0 <get_adc_sensor_value>:

// REQUIRES: adc_sensor is an ADCSensor object and channel is the index
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 4096.
uint16_t get_adc_sensor_value(ADCSensor *adc_sensor, uint8_t channel) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	000a      	movs	r2, r1
 80032ca:	1cfb      	adds	r3, r7, #3
 80032cc:	701a      	strb	r2, [r3, #0]
    return adc_sensor->values[channel];
 80032ce:	1cfb      	adds	r3, r7, #3
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	18d3      	adds	r3, r2, r3
 80032d8:	3306      	adds	r3, #6
 80032da:	881b      	ldrh	r3, [r3, #0]
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <update_adc_sensor_values>:

// REQUIRES: adc_sensor is an ADCSensor object
// MODIFIES: values
// EFFECTS: Updates the stored value of value.
void update_adc_sensor_values(ADCSensor *adc_sensor) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < adc_sensor->total_channels; ++i) {
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e00b      	b.n	800330a <update_adc_sensor_values+0x26>
		HAL_ADC_Start_DMA(adc_sensor->adc, adc_sensor->values, adc_sensor->total_channels);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	1d99      	adds	r1, r3, #6
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	791b      	ldrb	r3, [r3, #4]
 80032fe:	001a      	movs	r2, r3
 8003300:	f002 fada 	bl	80058b8 <HAL_ADC_Start_DMA>
	for (int i = 0; i < adc_sensor->total_channels; ++i) {
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3301      	adds	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	791b      	ldrb	r3, [r3, #4]
 800330e:	001a      	movs	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4293      	cmp	r3, r2
 8003314:	dbed      	blt.n	80032f2 <update_adc_sensor_values+0xe>
	}
}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b004      	add	sp, #16
 800331e:	bd80      	pop	{r7, pc}

08003320 <new_bridge>:

// REQUIRES: uart is the uart channel
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Bridge object
Bridge *new_bridge(UART_HandleTypeDef *_uart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
    Bridge *bridge = (Bridge *)malloc(sizeof(Bridge));
 8003328:	2024      	movs	r0, #36	; 0x24
 800332a:	f008 ff33 	bl	800c194 <malloc>
 800332e:	0003      	movs	r3, r0
 8003330:	60bb      	str	r3, [r7, #8]
    bridge->uart = _uart;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 30; ++i) {
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	e008      	b.n	8003350 <new_bridge+0x30>
		bridge->uart_buffer[i] = 0;
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	18d3      	adds	r3, r2, r3
 8003344:	3304      	adds	r3, #4
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 30; ++i) {
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3301      	adds	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b1d      	cmp	r3, #29
 8003354:	ddf3      	ble.n	800333e <new_bridge+0x1e>
	}
	HAL_UART_Receive_DMA(bridge->uart, (uint8_t *)bridge->uart_buffer, sizeof(bridge->uart_buffer));
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	3304      	adds	r3, #4
 800335e:	221e      	movs	r2, #30
 8003360:	0019      	movs	r1, r3
 8003362:	f005 fb05 	bl	8008970 <HAL_UART_Receive_DMA>

    return bridge;
 8003366:	68bb      	ldr	r3, [r7, #8]
}
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	b004      	add	sp, #16
 800336e:	bd80      	pop	{r7, pc}

08003370 <receive_bridge>:

// REQUIRES: bridge, heater, mosfet_device, and servo are objects
// MODIFIES: Nothing
// EFFECTS: Receives the message and processes it
void receive_bridge(Bridge *bridge, Heater *heaters[3], PinData *mosfet_pins[12], Servo *servos[3]) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
	HAL_UART_Receive_DMA(bridge->uart, (uint8_t *)bridge->uart_buffer, sizeof(bridge->uart_buffer));
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3304      	adds	r3, #4
 8003386:	221e      	movs	r2, #30
 8003388:	0019      	movs	r1, r3
 800338a:	f005 faf1 	bl	8008970 <HAL_UART_Receive_DMA>
	if (bridge->uart_buffer[0] == '$') {
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	791b      	ldrb	r3, [r3, #4]
 8003392:	2b24      	cmp	r3, #36	; 0x24
 8003394:	d12a      	bne.n	80033ec <receive_bridge+0x7c>
		// Expect it always to be a $ sign.
		if (bridge->uart_buffer[1] == 'M') {
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	795b      	ldrb	r3, [r3, #5]
 800339a:	2b4d      	cmp	r3, #77	; 0x4d
 800339c:	d106      	bne.n	80033ac <receive_bridge+0x3c>
			receive_bridge_mosfet_cmd(bridge, mosfet_pins);
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	0011      	movs	r1, r2
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 f825 	bl	80033f4 <receive_bridge_mosfet_cmd>
		}
		else if (bridge->uart_buffer[1] == 'H') {
			receive_bridge_heater_cmd(bridge, heaters);
		}
	}
}
 80033aa:	e01f      	b.n	80033ec <receive_bridge+0x7c>
		else if (bridge->uart_buffer[1] == 'S') {
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	795b      	ldrb	r3, [r3, #5]
 80033b0:	2b53      	cmp	r3, #83	; 0x53
 80033b2:	d106      	bne.n	80033c2 <receive_bridge+0x52>
			receive_bridge_servo_cmd(bridge, servos);
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	0011      	movs	r1, r2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f874 	bl	80034a8 <receive_bridge_servo_cmd>
}
 80033c0:	e014      	b.n	80033ec <receive_bridge+0x7c>
		else if (bridge->uart_buffer[1] == 'A') {
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	795b      	ldrb	r3, [r3, #5]
 80033c6:	2b41      	cmp	r3, #65	; 0x41
 80033c8:	d106      	bne.n	80033d8 <receive_bridge+0x68>
			receive_bridge_auto_shutoff_cmd(bridge, heaters);
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	0011      	movs	r1, r2
 80033d0:	0018      	movs	r0, r3
 80033d2:	f000 f8bd 	bl	8003550 <receive_bridge_auto_shutoff_cmd>
}
 80033d6:	e009      	b.n	80033ec <receive_bridge+0x7c>
		else if (bridge->uart_buffer[1] == 'H') {
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	795b      	ldrb	r3, [r3, #5]
 80033dc:	2b48      	cmp	r3, #72	; 0x48
 80033de:	d105      	bne.n	80033ec <receive_bridge+0x7c>
			receive_bridge_heater_cmd(bridge, heaters);
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	0011      	movs	r1, r2
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 f904 	bl	80035f4 <receive_bridge_heater_cmd>
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b004      	add	sp, #16
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <receive_bridge_mosfet_cmd>:

// REQUIRES: bridge and mosfet_device are objects
// MODIFIES: Nothing
// EFFECTS: Receives the message if it is a mosfet message in the format:
// "$MOSFET,<DEVICE>,<ENABLE>"
void receive_bridge_mosfet_cmd(Bridge *bridge , PinData *mosfet_pins[12]) {
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
	if (bridge->uart_buffer[0] != '$' || bridge->uart_buffer[1] != 'M') {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	791b      	ldrb	r3, [r3, #4]
 8003402:	2b24      	cmp	r3, #36	; 0x24
 8003404:	d147      	bne.n	8003496 <receive_bridge_mosfet_cmd+0xa2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	795b      	ldrb	r3, [r3, #5]
 800340a:	2b4d      	cmp	r3, #77	; 0x4d
 800340c:	d143      	bne.n	8003496 <receive_bridge_mosfet_cmd+0xa2>
		// This should be asserted.
		// The function should not have been called if it was not the correct message
		return;
	}

	char *identifier = strtok(bridge->uart_buffer, ",");
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
 8003412:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <receive_bridge_mosfet_cmd+0xac>)
 8003414:	0011      	movs	r1, r2
 8003416:	0018      	movs	r0, r3
 8003418:	f009 fc6e 	bl	800ccf8 <strtok>
 800341c:	0003      	movs	r3, r0
 800341e:	617b      	str	r3, [r7, #20]

	if (!strcmp(identifier,"$MOSFET")){
 8003420:	4a20      	ldr	r2, [pc, #128]	; (80034a4 <receive_bridge_mosfet_cmd+0xb0>)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	0011      	movs	r1, r2
 8003426:	0018      	movs	r0, r3
 8003428:	f7fc fe6e 	bl	8000108 <strcmp>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d133      	bne.n	8003498 <receive_bridge_mosfet_cmd+0xa4>
		int device = -1;
 8003430:	2301      	movs	r3, #1
 8003432:	425b      	negs	r3, r3
 8003434:	613b      	str	r3, [r7, #16]
		bool state = false;
 8003436:	240f      	movs	r4, #15
 8003438:	193b      	adds	r3, r7, r4
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]

		device = atoi(strtok(NULL, ","));
 800343e:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <receive_bridge_mosfet_cmd+0xac>)
 8003440:	0019      	movs	r1, r3
 8003442:	2000      	movs	r0, #0
 8003444:	f009 fc58 	bl	800ccf8 <strtok>
 8003448:	0003      	movs	r3, r0
 800344a:	0018      	movs	r0, r3
 800344c:	f008 fe72 	bl	800c134 <atoi>
 8003450:	0003      	movs	r3, r0
 8003452:	613b      	str	r3, [r7, #16]
		state = atoi(strtok(NULL, ","));
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <receive_bridge_mosfet_cmd+0xac>)
 8003456:	0019      	movs	r1, r3
 8003458:	2000      	movs	r0, #0
 800345a:	f009 fc4d 	bl	800ccf8 <strtok>
 800345e:	0003      	movs	r3, r0
 8003460:	0018      	movs	r0, r3
 8003462:	f008 fe67 	bl	800c134 <atoi>
 8003466:	0002      	movs	r2, r0
 8003468:	0020      	movs	r0, r4
 800346a:	183b      	adds	r3, r7, r0
 800346c:	1e51      	subs	r1, r2, #1
 800346e:	418a      	sbcs	r2, r1
 8003470:	701a      	strb	r2, [r3, #0]

		if (0 <= device && device < 12) {
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0f      	blt.n	8003498 <receive_bridge_mosfet_cmd+0xa4>
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b0b      	cmp	r3, #11
 800347c:	dc0c      	bgt.n	8003498 <receive_bridge_mosfet_cmd+0xa4>
			set_pin_value(mosfet_pins[device], state);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	18d3      	adds	r3, r2, r3
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	183b      	adds	r3, r7, r0
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	0019      	movs	r1, r3
 800348e:	0010      	movs	r0, r2
 8003490:	f001 f94c 	bl	800472c <set_pin_value>
 8003494:	e000      	b.n	8003498 <receive_bridge_mosfet_cmd+0xa4>
		return;
 8003496:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8003498:	46bd      	mov	sp, r7
 800349a:	b007      	add	sp, #28
 800349c:	bd90      	pop	{r4, r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	0800f6f0 	.word	0x0800f6f0
 80034a4:	0800f6f4 	.word	0x0800f6f4

080034a8 <receive_bridge_servo_cmd>:

// REQUIRES: bridge and servos are objects
// MODIFIES: Nothing
// EFFECTS: Receives the message if it is a servo message in the format:
// "$SERVO,<SERVO ID>,<ANGLE>"
void receive_bridge_servo_cmd(Bridge *bridge, Servo *servos[3]) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	if (bridge->uart_buffer[0] != '$' || bridge->uart_buffer[1] != 'S') {
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	791b      	ldrb	r3, [r3, #4]
 80034b6:	2b24      	cmp	r3, #36	; 0x24
 80034b8:	d141      	bne.n	800353e <receive_bridge_servo_cmd+0x96>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	795b      	ldrb	r3, [r3, #5]
 80034be:	2b53      	cmp	r3, #83	; 0x53
 80034c0:	d13d      	bne.n	800353e <receive_bridge_servo_cmd+0x96>
		// This should be asserted.
		// The function should not have been called if it was not the correct message
		return;
	}

	char *identifier = strtok(bridge->uart_buffer, ",");
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3304      	adds	r3, #4
 80034c6:	4a20      	ldr	r2, [pc, #128]	; (8003548 <receive_bridge_servo_cmd+0xa0>)
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f009 fc14 	bl	800ccf8 <strtok>
 80034d0:	0003      	movs	r3, r0
 80034d2:	617b      	str	r3, [r7, #20]

	if (!strcmp(identifier,"$SERVO")){
 80034d4:	4a1d      	ldr	r2, [pc, #116]	; (800354c <receive_bridge_servo_cmd+0xa4>)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	0011      	movs	r1, r2
 80034da:	0018      	movs	r0, r3
 80034dc:	f7fc fe14 	bl	8000108 <strcmp>
 80034e0:	1e03      	subs	r3, r0, #0
 80034e2:	d12d      	bne.n	8003540 <receive_bridge_servo_cmd+0x98>
		int device = -1;
 80034e4:	2301      	movs	r3, #1
 80034e6:	425b      	negs	r3, r3
 80034e8:	613b      	str	r3, [r7, #16]
		int angle = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]

		device = atoi(strtok(NULL, ","));
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <receive_bridge_servo_cmd+0xa0>)
 80034f0:	0019      	movs	r1, r3
 80034f2:	2000      	movs	r0, #0
 80034f4:	f009 fc00 	bl	800ccf8 <strtok>
 80034f8:	0003      	movs	r3, r0
 80034fa:	0018      	movs	r0, r3
 80034fc:	f008 fe1a 	bl	800c134 <atoi>
 8003500:	0003      	movs	r3, r0
 8003502:	613b      	str	r3, [r7, #16]
		angle = atoi(strtok(NULL, ","));
 8003504:	4b10      	ldr	r3, [pc, #64]	; (8003548 <receive_bridge_servo_cmd+0xa0>)
 8003506:	0019      	movs	r1, r3
 8003508:	2000      	movs	r0, #0
 800350a:	f009 fbf5 	bl	800ccf8 <strtok>
 800350e:	0003      	movs	r3, r0
 8003510:	0018      	movs	r0, r3
 8003512:	f008 fe0f 	bl	800c134 <atoi>
 8003516:	0003      	movs	r3, r0
 8003518:	60fb      	str	r3, [r7, #12]

		if (0 <= device && device < 3) {
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	db0f      	blt.n	8003540 <receive_bridge_servo_cmd+0x98>
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b02      	cmp	r3, #2
 8003524:	dc0c      	bgt.n	8003540 <receive_bridge_servo_cmd+0x98>
			set_servo_angle(servos[device], angle);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	18d3      	adds	r3, r2, r3
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	b212      	sxth	r2, r2
 8003534:	0011      	movs	r1, r2
 8003536:	0018      	movs	r0, r3
 8003538:	f001 f964 	bl	8004804 <set_servo_angle>
 800353c:	e000      	b.n	8003540 <receive_bridge_servo_cmd+0x98>
		return;
 800353e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8003540:	46bd      	mov	sp, r7
 8003542:	b006      	add	sp, #24
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	0800f6f0 	.word	0x0800f6f0
 800354c:	0800f6fc 	.word	0x0800f6fc

08003550 <receive_bridge_auto_shutoff_cmd>:

// REQUIRES: bridge and heaters are objects
// MODIFIES: Nothing
// EFFECTS: Receives the message if it is an auto shutoff message in the format:
// "$AUTO_SHUTOFF,<VAL>"
void receive_bridge_auto_shutoff_cmd(Bridge *bridge, Heater *heaters[3]) {
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
	if (bridge->uart_buffer[0] != '$' || bridge->uart_buffer[1] != 'A') {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	791b      	ldrb	r3, [r3, #4]
 800355e:	2b24      	cmp	r3, #36	; 0x24
 8003560:	d140      	bne.n	80035e4 <receive_bridge_auto_shutoff_cmd+0x94>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	795b      	ldrb	r3, [r3, #5]
 8003566:	2b41      	cmp	r3, #65	; 0x41
 8003568:	d13c      	bne.n	80035e4 <receive_bridge_auto_shutoff_cmd+0x94>
		// This should be asserted.
		// The function should not have been called if it was not the correct message
		return;
	}

	char *identifier = strtok(bridge->uart_buffer, ",");
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3304      	adds	r3, #4
 800356e:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <receive_bridge_auto_shutoff_cmd+0x9c>)
 8003570:	0011      	movs	r1, r2
 8003572:	0018      	movs	r0, r3
 8003574:	f009 fbc0 	bl	800ccf8 <strtok>
 8003578:	0003      	movs	r3, r0
 800357a:	613b      	str	r3, [r7, #16]

	if (!strcmp(identifier,"$AUTO_SHUTOFF")){
 800357c:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <receive_bridge_auto_shutoff_cmd+0xa0>)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	0011      	movs	r1, r2
 8003582:	0018      	movs	r0, r3
 8003584:	f7fc fdc0 	bl	8000108 <strcmp>
 8003588:	1e03      	subs	r3, r0, #0
 800358a:	d12c      	bne.n	80035e6 <receive_bridge_auto_shutoff_cmd+0x96>
		bool state = false;
 800358c:	240f      	movs	r4, #15
 800358e:	193b      	adds	r3, r7, r4
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]

		state = atoi(strtok(NULL, ","));
 8003594:	4b15      	ldr	r3, [pc, #84]	; (80035ec <receive_bridge_auto_shutoff_cmd+0x9c>)
 8003596:	0019      	movs	r1, r3
 8003598:	2000      	movs	r0, #0
 800359a:	f009 fbad 	bl	800ccf8 <strtok>
 800359e:	0003      	movs	r3, r0
 80035a0:	0018      	movs	r0, r3
 80035a2:	f008 fdc7 	bl	800c134 <atoi>
 80035a6:	0002      	movs	r2, r0
 80035a8:	193b      	adds	r3, r7, r4
 80035aa:	1e51      	subs	r1, r2, #1
 80035ac:	418a      	sbcs	r2, r1
 80035ae:	701a      	strb	r2, [r3, #0]

		for (size_t i = 0; i < 3; ++i) {
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e012      	b.n	80035dc <receive_bridge_auto_shutoff_cmd+0x8c>
			heaters[i]->auto_shutoff = state;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	18d3      	adds	r3, r2, r3
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	220f      	movs	r2, #15
 80035c2:	18ba      	adds	r2, r7, r2
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	721a      	strb	r2, [r3, #8]
			heaters[i]->send_auto_shutoff = true;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	18d3      	adds	r3, r2, r3
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2201      	movs	r2, #1
 80035d4:	729a      	strb	r2, [r3, #10]
		for (size_t i = 0; i < 3; ++i) {
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3301      	adds	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d9e9      	bls.n	80035b6 <receive_bridge_auto_shutoff_cmd+0x66>
 80035e2:	e000      	b.n	80035e6 <receive_bridge_auto_shutoff_cmd+0x96>
		return;
 80035e4:	46c0      	nop			; (mov r8, r8)
		}

	}
}
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b007      	add	sp, #28
 80035ea:	bd90      	pop	{r4, r7, pc}
 80035ec:	0800f6f0 	.word	0x0800f6f0
 80035f0:	0800f704 	.word	0x0800f704

080035f4 <receive_bridge_heater_cmd>:

// REQUIRES: bridge and heaters are objects
// MODIFIES: Nothing
// EFFECTS: Receives the message if it is a heater message in the format:
// "$HEATER_CMD,<DEVICE>,<ENABLE>"
void receive_bridge_heater_cmd(Bridge *bridge, Heater *heaters[3]) {
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
	if (bridge->uart_buffer[0] != '$' || bridge->uart_buffer[1] != 'H') {
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	791b      	ldrb	r3, [r3, #4]
 8003602:	2b24      	cmp	r3, #36	; 0x24
 8003604:	d14e      	bne.n	80036a4 <receive_bridge_heater_cmd+0xb0>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	795b      	ldrb	r3, [r3, #5]
 800360a:	2b48      	cmp	r3, #72	; 0x48
 800360c:	d14a      	bne.n	80036a4 <receive_bridge_heater_cmd+0xb0>
		// This should be asserted.
		// The function should not have been called if it was not the correct message
		return;
	}

	char *identifier = strtok(bridge->uart_buffer, ",");
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3304      	adds	r3, #4
 8003612:	4a26      	ldr	r2, [pc, #152]	; (80036ac <receive_bridge_heater_cmd+0xb8>)
 8003614:	0011      	movs	r1, r2
 8003616:	0018      	movs	r0, r3
 8003618:	f009 fb6e 	bl	800ccf8 <strtok>
 800361c:	0003      	movs	r3, r0
 800361e:	617b      	str	r3, [r7, #20]

	if (!strcmp(identifier,"$HEATER_CMD")){
 8003620:	4a23      	ldr	r2, [pc, #140]	; (80036b0 <receive_bridge_heater_cmd+0xbc>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	0011      	movs	r1, r2
 8003626:	0018      	movs	r0, r3
 8003628:	f7fc fd6e 	bl	8000108 <strcmp>
 800362c:	1e03      	subs	r3, r0, #0
 800362e:	d13a      	bne.n	80036a6 <receive_bridge_heater_cmd+0xb2>
		int device = -1;
 8003630:	2301      	movs	r3, #1
 8003632:	425b      	negs	r3, r3
 8003634:	613b      	str	r3, [r7, #16]
		bool state = false;
 8003636:	240f      	movs	r4, #15
 8003638:	193b      	adds	r3, r7, r4
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]

		device = atoi(strtok(NULL, ","));
 800363e:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <receive_bridge_heater_cmd+0xb8>)
 8003640:	0019      	movs	r1, r3
 8003642:	2000      	movs	r0, #0
 8003644:	f009 fb58 	bl	800ccf8 <strtok>
 8003648:	0003      	movs	r3, r0
 800364a:	0018      	movs	r0, r3
 800364c:	f008 fd72 	bl	800c134 <atoi>
 8003650:	0003      	movs	r3, r0
 8003652:	613b      	str	r3, [r7, #16]
		state = atoi(strtok(NULL, ","));
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <receive_bridge_heater_cmd+0xb8>)
 8003656:	0019      	movs	r1, r3
 8003658:	2000      	movs	r0, #0
 800365a:	f009 fb4d 	bl	800ccf8 <strtok>
 800365e:	0003      	movs	r3, r0
 8003660:	0018      	movs	r0, r3
 8003662:	f008 fd67 	bl	800c134 <atoi>
 8003666:	0002      	movs	r2, r0
 8003668:	0020      	movs	r0, r4
 800366a:	183b      	adds	r3, r7, r0
 800366c:	1e51      	subs	r1, r2, #1
 800366e:	418a      	sbcs	r2, r1
 8003670:	701a      	strb	r2, [r3, #0]

		if (0 <= device && device < 3) {
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db16      	blt.n	80036a6 <receive_bridge_heater_cmd+0xb2>
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b02      	cmp	r3, #2
 800367c:	dc13      	bgt.n	80036a6 <receive_bridge_heater_cmd+0xb2>
			change_heater_state(heaters[device], state);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	18d3      	adds	r3, r2, r3
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	183b      	adds	r3, r7, r0
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	0019      	movs	r1, r3
 800368e:	0010      	movs	r0, r2
 8003690:	f000 fa28 	bl	8003ae4 <change_heater_state>
			heaters[device]->send_on = true;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	18d3      	adds	r3, r2, r3
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2201      	movs	r2, #1
 80036a0:	72da      	strb	r2, [r3, #11]
 80036a2:	e000      	b.n	80036a6 <receive_bridge_heater_cmd+0xb2>
		return;
 80036a4:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b007      	add	sp, #28
 80036aa:	bd90      	pop	{r4, r7, pc}
 80036ac:	0800f6f0 	.word	0x0800f6f0
 80036b0:	0800f714 	.word	0x0800f714

080036b4 <bridge_send_diagnostic>:
// REQUIRES: nothing
// MODIFIES: nothing
// EFFECTS: Sends diagnostic current and thermistor data in format:
// $DIAG,,<TEMP_0>,<TEMP_1>,<TEMP_2>,<CURR_0>,<CURR_1>,<CURR_2>
void bridge_send_diagnostic(Bridge *bridge, float temps[3], float currs[3])
{
 80036b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b6:	b0b1      	sub	sp, #196	; 0xc4
 80036b8:	af0c      	add	r7, sp, #48	; 0x30
 80036ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 80036bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80036be:	627a      	str	r2, [r7, #36]	; 0x24
    char msg[90];

    snprintf(msg, sizeof(msg), "$DIAG,%f,%f,%f,%f,%f,%f,", temps[0], temps[1],
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	1c18      	adds	r0, r3, #0
 80036c6:	f7ff fccf 	bl	8003068 <__aeabi_f2d>
 80036ca:	0004      	movs	r4, r0
 80036cc:	000d      	movs	r5, r1
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	3304      	adds	r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1c18      	adds	r0, r3, #0
 80036d6:	f7ff fcc7 	bl	8003068 <__aeabi_f2d>
 80036da:	61b8      	str	r0, [r7, #24]
 80036dc:	61f9      	str	r1, [r7, #28]
    		temps[2], currs[0], currs[1], currs[2]);
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	3308      	adds	r3, #8
 80036e2:	681b      	ldr	r3, [r3, #0]
    snprintf(msg, sizeof(msg), "$DIAG,%f,%f,%f,%f,%f,%f,", temps[0], temps[1],
 80036e4:	1c18      	adds	r0, r3, #0
 80036e6:	f7ff fcbf 	bl	8003068 <__aeabi_f2d>
 80036ea:	6138      	str	r0, [r7, #16]
 80036ec:	6179      	str	r1, [r7, #20]
    		temps[2], currs[0], currs[1], currs[2]);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	681b      	ldr	r3, [r3, #0]
    snprintf(msg, sizeof(msg), "$DIAG,%f,%f,%f,%f,%f,%f,", temps[0], temps[1],
 80036f2:	1c18      	adds	r0, r3, #0
 80036f4:	f7ff fcb8 	bl	8003068 <__aeabi_f2d>
 80036f8:	60b8      	str	r0, [r7, #8]
 80036fa:	60f9      	str	r1, [r7, #12]
    		temps[2], currs[0], currs[1], currs[2]);
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	3304      	adds	r3, #4
 8003700:	681b      	ldr	r3, [r3, #0]
    snprintf(msg, sizeof(msg), "$DIAG,%f,%f,%f,%f,%f,%f,", temps[0], temps[1],
 8003702:	1c18      	adds	r0, r3, #0
 8003704:	f7ff fcb0 	bl	8003068 <__aeabi_f2d>
 8003708:	6038      	str	r0, [r7, #0]
 800370a:	6079      	str	r1, [r7, #4]
    		temps[2], currs[0], currs[1], currs[2]);
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	3308      	adds	r3, #8
 8003710:	681b      	ldr	r3, [r3, #0]
    snprintf(msg, sizeof(msg), "$DIAG,%f,%f,%f,%f,%f,%f,", temps[0], temps[1],
 8003712:	1c18      	adds	r0, r3, #0
 8003714:	f7ff fca8 	bl	8003068 <__aeabi_f2d>
 8003718:	0002      	movs	r2, r0
 800371a:	000b      	movs	r3, r1
 800371c:	4917      	ldr	r1, [pc, #92]	; (800377c <bridge_send_diagnostic+0xc8>)
 800371e:	2614      	movs	r6, #20
 8003720:	2020      	movs	r0, #32
 8003722:	1830      	adds	r0, r6, r0
 8003724:	19c0      	adds	r0, r0, r7
 8003726:	920a      	str	r2, [sp, #40]	; 0x28
 8003728:	930b      	str	r3, [sp, #44]	; 0x2c
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	9208      	str	r2, [sp, #32]
 8003730:	9309      	str	r3, [sp, #36]	; 0x24
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	9206      	str	r2, [sp, #24]
 8003738:	9307      	str	r3, [sp, #28]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	9204      	str	r2, [sp, #16]
 8003740:	9305      	str	r3, [sp, #20]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	9202      	str	r2, [sp, #8]
 8003748:	9303      	str	r3, [sp, #12]
 800374a:	9400      	str	r4, [sp, #0]
 800374c:	9501      	str	r5, [sp, #4]
 800374e:	000a      	movs	r2, r1
 8003750:	215a      	movs	r1, #90	; 0x5a
 8003752:	f009 fa9d 	bl	800cc90 <sniprintf>

    HAL_Delay(100);
 8003756:	2064      	movs	r0, #100	; 0x64
 8003758:	f001 fe0e 	bl	8005378 <HAL_Delay>
    HAL_UART_Transmit(bridge->uart, (uint8_t *)msg, 90, 200);
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	2320      	movs	r3, #32
 8003762:	18f3      	adds	r3, r6, r3
 8003764:	19d9      	adds	r1, r3, r7
 8003766:	23c8      	movs	r3, #200	; 0xc8
 8003768:	225a      	movs	r2, #90	; 0x5a
 800376a:	f005 f865 	bl	8008838 <HAL_UART_Transmit>
    HAL_Delay(100);
 800376e:	2064      	movs	r0, #100	; 0x64
 8003770:	f001 fe02 	bl	8005378 <HAL_Delay>
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b025      	add	sp, #148	; 0x94
 800377a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800377c:	0800f720 	.word	0x0800f720

08003780 <bridge_send_science_thermistors>:
// REQUIRES: nothing
// MODIFIES: nothing
// EFFECTS: Sends science temperatures in format:
// "$SCIENCE_TEMP,<TEMP_0>,<TEMP_1>,<TEMP_2>"
void bridge_send_science_thermistors(Bridge *bridge, float temps[3])
{
 8003780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003782:	b099      	sub	sp, #100	; 0x64
 8003784:	af06      	add	r7, sp, #24
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
    char msg[50];
    snprintf(msg, sizeof(msg), "$SCIENCE_TEMP,%f,%f,%f,", temps[0], temps[1], temps[2]);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	1c18      	adds	r0, r3, #0
 8003790:	f7ff fc6a 	bl	8003068 <__aeabi_f2d>
 8003794:	0004      	movs	r4, r0
 8003796:	000d      	movs	r5, r1
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	3304      	adds	r3, #4
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	1c18      	adds	r0, r3, #0
 80037a0:	f7ff fc62 	bl	8003068 <__aeabi_f2d>
 80037a4:	6038      	str	r0, [r7, #0]
 80037a6:	6079      	str	r1, [r7, #4]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	3308      	adds	r3, #8
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	1c18      	adds	r0, r3, #0
 80037b0:	f7ff fc5a 	bl	8003068 <__aeabi_f2d>
 80037b4:	0002      	movs	r2, r0
 80037b6:	000b      	movs	r3, r1
 80037b8:	4911      	ldr	r1, [pc, #68]	; (8003800 <bridge_send_science_thermistors+0x80>)
 80037ba:	260c      	movs	r6, #12
 80037bc:	2008      	movs	r0, #8
 80037be:	1830      	adds	r0, r6, r0
 80037c0:	19c0      	adds	r0, r0, r7
 80037c2:	9204      	str	r2, [sp, #16]
 80037c4:	9305      	str	r3, [sp, #20]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	9202      	str	r2, [sp, #8]
 80037cc:	9303      	str	r3, [sp, #12]
 80037ce:	9400      	str	r4, [sp, #0]
 80037d0:	9501      	str	r5, [sp, #4]
 80037d2:	000a      	movs	r2, r1
 80037d4:	2132      	movs	r1, #50	; 0x32
 80037d6:	f009 fa5b 	bl	800cc90 <sniprintf>
    HAL_Delay(100);
 80037da:	2064      	movs	r0, #100	; 0x64
 80037dc:	f001 fdcc 	bl	8005378 <HAL_Delay>
    HAL_UART_Transmit(bridge->uart, (uint8_t *)msg, 50, 200);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	2308      	movs	r3, #8
 80037e6:	18f3      	adds	r3, r6, r3
 80037e8:	19d9      	adds	r1, r3, r7
 80037ea:	23c8      	movs	r3, #200	; 0xc8
 80037ec:	2232      	movs	r2, #50	; 0x32
 80037ee:	f005 f823 	bl	8008838 <HAL_UART_Transmit>
    HAL_Delay(100);
 80037f2:	2064      	movs	r0, #100	; 0x64
 80037f4:	f001 fdc0 	bl	8005378 <HAL_Delay>
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b013      	add	sp, #76	; 0x4c
 80037fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003800:	0800f75c 	.word	0x0800f75c

08003804 <bridge_send_heater_auto_shutoff>:

// REQUIRES: nothing
// MODIFIES: nothing
// EFFECTS: Sends heater auto shutoff in format:
// "$AUTO_SHUTOFF,<VAL>"
void bridge_send_heater_auto_shutoff(Bridge *bridge, bool state) {
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	000a      	movs	r2, r1
 800380e:	1cfb      	adds	r3, r7, #3
 8003810:	701a      	strb	r2, [r3, #0]
	char msg[20];
	snprintf(msg, sizeof(msg), "$AUTO_SHUTOFF,%i,", state);
 8003812:	1cfb      	adds	r3, r7, #3
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	4a0b      	ldr	r2, [pc, #44]	; (8003844 <bridge_send_heater_auto_shutoff+0x40>)
 8003818:	240c      	movs	r4, #12
 800381a:	1938      	adds	r0, r7, r4
 800381c:	2114      	movs	r1, #20
 800381e:	f009 fa37 	bl	800cc90 <sniprintf>
	HAL_Delay(100);
 8003822:	2064      	movs	r0, #100	; 0x64
 8003824:	f001 fda8 	bl	8005378 <HAL_Delay>
	HAL_UART_Transmit(bridge->uart, (uint8_t *)msg, 20, 200);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	1939      	adds	r1, r7, r4
 800382e:	23c8      	movs	r3, #200	; 0xc8
 8003830:	2214      	movs	r2, #20
 8003832:	f005 f801 	bl	8008838 <HAL_UART_Transmit>
	HAL_Delay(100);
 8003836:	2064      	movs	r0, #100	; 0x64
 8003838:	f001 fd9e 	bl	8005378 <HAL_Delay>
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b009      	add	sp, #36	; 0x24
 8003842:	bd90      	pop	{r4, r7, pc}
 8003844:	0800f774 	.word	0x0800f774

08003848 <bridge_send_heater_state>:

// REQUIRES: nothing
// MODIFIES: nothing
// EFFECTS: Sends heater state in format:
// "$HEATER_DATA,<STATE_0>,<STATE_1>,<STATE_2>"
void bridge_send_heater_state(Bridge *bridge, bool states[3]) {
 8003848:	b5b0      	push	{r4, r5, r7, lr}
 800384a:	b08c      	sub	sp, #48	; 0x30
 800384c:	af02      	add	r7, sp, #8
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
	char msg[25];
	snprintf(msg, sizeof(msg), "$HEATER_DATA,%i,%i,%i,", states[0], states[1], states[2]);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	001c      	movs	r4, r3
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	3301      	adds	r3, #1
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	0019      	movs	r1, r3
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	3302      	adds	r3, #2
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	4a0d      	ldr	r2, [pc, #52]	; (800389c <bridge_send_heater_state+0x54>)
 8003868:	250c      	movs	r5, #12
 800386a:	1978      	adds	r0, r7, r5
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	9100      	str	r1, [sp, #0]
 8003870:	0023      	movs	r3, r4
 8003872:	2119      	movs	r1, #25
 8003874:	f009 fa0c 	bl	800cc90 <sniprintf>
	HAL_Delay(100);
 8003878:	2064      	movs	r0, #100	; 0x64
 800387a:	f001 fd7d 	bl	8005378 <HAL_Delay>
	HAL_UART_Transmit(bridge->uart, (uint8_t *)msg, 25, 200);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	1979      	adds	r1, r7, r5
 8003884:	23c8      	movs	r3, #200	; 0xc8
 8003886:	2219      	movs	r2, #25
 8003888:	f004 ffd6 	bl	8008838 <HAL_UART_Transmit>
	HAL_Delay(100);
 800388c:	2064      	movs	r0, #100	; 0x64
 800388e:	f001 fd73 	bl	8005378 <HAL_Delay>
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b00a      	add	sp, #40	; 0x28
 8003898:	bdb0      	pop	{r4, r5, r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	0800f788 	.word	0x0800f788

080038a0 <new_diag_current_sensor>:

// REQUIRES: _adc_channel is the corresponding ADC channel and
// _adc_sensor is a pointer to an ADCSensor object
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created current sensor object
DiagCurrentSensor* new_diag_current_sensor(ADCSensor* adc_sensor, uint8_t channel) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	000a      	movs	r2, r1
 80038aa:	1cfb      	adds	r3, r7, #3
 80038ac:	701a      	strb	r2, [r3, #0]
    DiagCurrentSensor* current_sensor = (DiagCurrentSensor*) malloc(sizeof(DiagCurrentSensor));
 80038ae:	200c      	movs	r0, #12
 80038b0:	f008 fc70 	bl	800c194 <malloc>
 80038b4:	0003      	movs	r3, r0
 80038b6:	60fb      	str	r3, [r7, #12]
    current_sensor->adc_sensor = adc_sensor;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	609a      	str	r2, [r3, #8]
    current_sensor->channel = channel;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1cfa      	adds	r2, r7, #3
 80038c2:	7812      	ldrb	r2, [r2, #0]
 80038c4:	701a      	strb	r2, [r3, #0]
    current_sensor->amps = 0;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	605a      	str	r2, [r3, #4]

    return current_sensor;
 80038cc:	68fb      	ldr	r3, [r7, #12]
}
 80038ce:	0018      	movs	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b004      	add	sp, #16
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <update_diag_current_sensor_val>:

// REQUIRES: valid current sensor
// MODIFIES: stored sensor value
// EFFECTS: updates the sensor value
void update_diag_current_sensor_val(DiagCurrentSensor* sensor) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
    // sensor returns volts (I think) so get to millivolts and solve the proportion for amps then add the offset. (vcc/2)
	float measured_volts = get_adc_sensor_value(sensor, sensor->channel);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	0011      	movs	r1, r2
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7ff fce9 	bl	80032c0 <get_adc_sensor_value>
 80038ee:	0003      	movs	r3, r0
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7fd fd91 	bl	8001418 <__aeabi_ui2f>
 80038f6:	1c03      	adds	r3, r0, #0
 80038f8:	60fb      	str	r3, [r7, #12]
    sensor->amps = (1000 * (measured_volts / DIAG_CURR_MV_PER_AMP)) - DIAG_CURR_VCC/2;
 80038fa:	490b      	ldr	r1, [pc, #44]	; (8003928 <update_diag_current_sensor_val+0x50>)
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7fd f8a1 	bl	8000a44 <__aeabi_fdiv>
 8003902:	1c03      	adds	r3, r0, #0
 8003904:	4909      	ldr	r1, [pc, #36]	; (800392c <update_diag_current_sensor_val+0x54>)
 8003906:	1c18      	adds	r0, r3, #0
 8003908:	f7fd fa64 	bl	8000dd4 <__aeabi_fmul>
 800390c:	1c03      	adds	r3, r0, #0
 800390e:	4908      	ldr	r1, [pc, #32]	; (8003930 <update_diag_current_sensor_val+0x58>)
 8003910:	1c18      	adds	r0, r3, #0
 8003912:	f7fd fb85 	bl	8001020 <__aeabi_fsub>
 8003916:	1c03      	adds	r3, r0, #0
 8003918:	1c1a      	adds	r2, r3, #0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	605a      	str	r2, [r3, #4]
}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	42f43333 	.word	0x42f43333
 800392c:	447a0000 	.word	0x447a0000
 8003930:	3fd33333 	.word	0x3fd33333

08003934 <get_diag_current_sensor_val>:

// REQUIRES: valid current sensor
// MODIFIES: nothing
// EFFECTS: returns the stored value for amps
float get_diag_current_sensor_val(DiagCurrentSensor* sensor) {
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
    return sensor->amps;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
}
 8003940:	1c18      	adds	r0, r3, #0
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}

08003948 <new_diag_temp_sensor>:

// REQUIRES: _adc_channel is the corresponding ADC channel and
// _adc_sensor is a pointer to an ADCSensor object
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created current sensor object
DiagTempSensor* new_diag_temp_sensor(ADCSensor* adc_sensor, int channel) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    DiagTempSensor* temp_sensor = (DiagTempSensor*) malloc(sizeof(DiagTempSensor));
 8003952:	200c      	movs	r0, #12
 8003954:	f008 fc1e 	bl	800c194 <malloc>
 8003958:	0003      	movs	r3, r0
 800395a:	60fb      	str	r3, [r7, #12]
    temp_sensor->adc_sensor = adc_sensor;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]
    temp_sensor->channel = channel;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	701a      	strb	r2, [r3, #0]
    temp_sensor->temp = 0;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	605a      	str	r2, [r3, #4]

    return temp_sensor;
 8003970:	68fb      	ldr	r3, [r7, #12]
}
 8003972:	0018      	movs	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	b004      	add	sp, #16
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <update_diag_temp_sensor_val>:

// REQUIRES: valid temp sensor
// MODIFIES: stored sensor value
// EFFECTS: updates the sensor value
void update_diag_temp_sensor_val(DiagTempSensor* sensor) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    // Vout = T(coefficient) * T(ambient) + V0 then solve for T(ambient)
	float measured_voltage = get_adc_sensor_value(sensor->adc_sensor, sensor->channel) * 3.3f / 4096.0f;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	0019      	movs	r1, r3
 800398e:	0010      	movs	r0, r2
 8003990:	f7ff fc96 	bl	80032c0 <get_adc_sensor_value>
 8003994:	0003      	movs	r3, r0
 8003996:	0018      	movs	r0, r3
 8003998:	f7fd fcf0 	bl	800137c <__aeabi_i2f>
 800399c:	1c03      	adds	r3, r0, #0
 800399e:	490e      	ldr	r1, [pc, #56]	; (80039d8 <update_diag_temp_sensor_val+0x5c>)
 80039a0:	1c18      	adds	r0, r3, #0
 80039a2:	f7fd fa17 	bl	8000dd4 <__aeabi_fmul>
 80039a6:	1c03      	adds	r3, r0, #0
 80039a8:	218b      	movs	r1, #139	; 0x8b
 80039aa:	05c9      	lsls	r1, r1, #23
 80039ac:	1c18      	adds	r0, r3, #0
 80039ae:	f7fd f849 	bl	8000a44 <__aeabi_fdiv>
 80039b2:	1c03      	adds	r3, r0, #0
 80039b4:	60fb      	str	r3, [r7, #12]
    sensor->temp = (measured_voltage - DIAG_TEMP_ZERO_DEGREE_OUTPUT) / DIAG_TEMP_COEFFICIENT;
 80039b6:	4909      	ldr	r1, [pc, #36]	; (80039dc <update_diag_temp_sensor_val+0x60>)
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7fd fb31 	bl	8001020 <__aeabi_fsub>
 80039be:	1c03      	adds	r3, r0, #0
 80039c0:	4907      	ldr	r1, [pc, #28]	; (80039e0 <update_diag_temp_sensor_val+0x64>)
 80039c2:	1c18      	adds	r0, r3, #0
 80039c4:	f7fd f83e 	bl	8000a44 <__aeabi_fdiv>
 80039c8:	1c03      	adds	r3, r0, #0
 80039ca:	1c1a      	adds	r2, r3, #0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	605a      	str	r2, [r3, #4]
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b004      	add	sp, #16
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40533333 	.word	0x40533333
 80039dc:	3ecccccd 	.word	0x3ecccccd
 80039e0:	3c9fbe77 	.word	0x3c9fbe77

080039e4 <get_diag_temp_sensor_val>:

// REQUIRES: valid temp sensor
// MODIFIES: nothing
// EFFECTS: returns the stored value for amps
float get_diag_temp_sensor_val(DiagTempSensor* sensor) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
    return sensor->temp;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
}
 80039f0:	1c18      	adds	r0, r3, #0
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <turn_heater_off>:

// REQUIRES: nothing
// MODIFIES: is_on
// EFFECTS:  Turns heater off
void turn_heater_off(Heater *heater)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	set_pin_value(heater->heater_pin, false);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2100      	movs	r1, #0
 8003a06:	0018      	movs	r0, r3
 8003a08:	f000 fe90 	bl	800472c <set_pin_value>
    heater->is_on = false;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	725a      	strb	r2, [r3, #9]
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b002      	add	sp, #8
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <turn_heater_on>:

// REQUIRES: nothing
// MODIFIES: is_on
// EFFECTS:  Turns heater on
void turn_heater_on(Heater *heater)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
	set_pin_value(heater->heater_pin, true);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2101      	movs	r1, #1
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f000 fe7f 	bl	800472c <set_pin_value>
    heater->is_on = true;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	725a      	strb	r2, [r3, #9]
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <new_heater>:
// REQUIRES: _heater_pin is a pointer to a PinData object and therm
// is a pointer to a Thermistor object
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Heater object
Heater *new_heater(PinData *_heater_pin, Thermistor *_thermistor)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
    Heater *heater = (Heater *)malloc(sizeof(Heater));
 8003a46:	200c      	movs	r0, #12
 8003a48:	f008 fba4 	bl	800c194 <malloc>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	60fb      	str	r3, [r7, #12]

    heater->heater_pin = _heater_pin;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	601a      	str	r2, [r3, #0]
    heater->thermistor = _thermistor;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
    heater->auto_shutoff = true;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	721a      	strb	r2, [r3, #8]
    heater->is_on = false;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	725a      	strb	r2, [r3, #9]
    heater->send_auto_shutoff = true;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	729a      	strb	r2, [r3, #10]
    heater->send_on = true;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	72da      	strb	r2, [r3, #11]
    return heater;
 8003a74:	68fb      	ldr	r3, [r7, #12]
}
 8003a76:	0018      	movs	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <update_heater_temperature>:

// REQUIRES: nothing
// MODIFIES: nothing
// EFFECTS: Updates temperature of heater thermistor
void update_heater_temperature(Heater *heater)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
    update_thermistor_temperature(heater->thermistor);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f001 faf8 	bl	8005080 <update_thermistor_temperature>
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <update_heater_state>:
// REQUIRES: nothing
// MODIFIES: is_on
// EFFECTS:  Turns heater off if it is on AND thermistor temperature exceeds
// permitted temperature AND auto_shutoff is enabled
void update_heater_state(Heater *heater)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
    if (heater->is_on && get_thermistor_temperature(heater->thermistor) >= MAX_HEATER_TEMP && heater->auto_shutoff)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	7a5b      	ldrb	r3, [r3, #9]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d017      	beq.n	8003ad8 <update_heater_state+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f001 fbf3 	bl	8005298 <get_thermistor_temperature>
 8003ab2:	1c03      	adds	r3, r0, #0
 8003ab4:	490a      	ldr	r1, [pc, #40]	; (8003ae0 <update_heater_state+0x48>)
 8003ab6:	1c18      	adds	r0, r3, #0
 8003ab8:	f7fc fd30 	bl	800051c <__aeabi_fcmpge>
 8003abc:	1e03      	subs	r3, r0, #0
 8003abe:	d100      	bne.n	8003ac2 <update_heater_state+0x2a>
    {
    	heater->send_on = true;
        turn_heater_off(heater);
    }
}
 8003ac0:	e00a      	b.n	8003ad8 <update_heater_state+0x40>
    if (heater->is_on && get_thermistor_temperature(heater->thermistor) >= MAX_HEATER_TEMP && heater->auto_shutoff)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7a1b      	ldrb	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d006      	beq.n	8003ad8 <update_heater_state+0x40>
    	heater->send_on = true;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	72da      	strb	r2, [r3, #11]
        turn_heater_off(heater);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f7ff ff90 	bl	80039f8 <turn_heater_off>
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b002      	add	sp, #8
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	42820000 	.word	0x42820000

08003ae4 <change_heater_state>:
// MODIFIES: is_on
// EFFECTS:  Turn heater off if state is false. Turn heater on if state is true
// AND either temperature is lower than permitted temperature OR auto_shutoff is
// disabled
void change_heater_state(Heater *heater, bool state)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	000a      	movs	r2, r1
 8003aee:	1cfb      	adds	r3, r7, #3
 8003af0:	701a      	strb	r2, [r3, #0]
    if (!state)
 8003af2:	1cfb      	adds	r3, r7, #3
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2201      	movs	r2, #1
 8003af8:	4053      	eors	r3, r2
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <change_heater_state+0x34>
    {
    	if (heater->is_on) {
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	7a5b      	ldrb	r3, [r3, #9]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d02c      	beq.n	8003b62 <change_heater_state+0x7e>
    		heater->send_on = true;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	72da      	strb	r2, [r3, #11]
    		turn_heater_off(heater);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7ff ff71 	bl	80039f8 <turn_heater_off>
    	if (!heater->is_on) {
    		heater->send_on = true;
			turn_heater_on(heater);
    	}
    }
}
 8003b16:	e024      	b.n	8003b62 <change_heater_state+0x7e>
    else if (state && (get_thermistor_temperature(heater->thermistor) < MAX_HEATER_TEMP || !heater->auto_shutoff))
 8003b18:	1cfb      	adds	r3, r7, #3
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d020      	beq.n	8003b62 <change_heater_state+0x7e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f001 fbb7 	bl	8005298 <get_thermistor_temperature>
 8003b2a:	1c03      	adds	r3, r0, #0
 8003b2c:	490f      	ldr	r1, [pc, #60]	; (8003b6c <change_heater_state+0x88>)
 8003b2e:	1c18      	adds	r0, r3, #0
 8003b30:	f7fc fcd6 	bl	80004e0 <__aeabi_fcmplt>
 8003b34:	1e03      	subs	r3, r0, #0
 8003b36:	d106      	bne.n	8003b46 <change_heater_state+0x62>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	7a1b      	ldrb	r3, [r3, #8]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	4053      	eors	r3, r2
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <change_heater_state+0x7e>
    	if (!heater->is_on) {
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	7a5b      	ldrb	r3, [r3, #9]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4053      	eors	r3, r2
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d006      	beq.n	8003b62 <change_heater_state+0x7e>
    		heater->send_on = true;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	72da      	strb	r2, [r3, #11]
			turn_heater_on(heater);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff ff5c 	bl	8003a1a <turn_heater_on>
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b002      	add	sp, #8
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	42820000 	.word	0x42820000

08003b70 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	receive_bridge(bridge, science_heaters, mosfet_pins, servos);
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_UART_RxCpltCallback+0x20>)
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_UART_RxCpltCallback+0x24>)
 8003b7e:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <HAL_UART_RxCpltCallback+0x28>)
 8003b80:	4906      	ldr	r1, [pc, #24]	; (8003b9c <HAL_UART_RxCpltCallback+0x2c>)
 8003b82:	f7ff fbf5 	bl	8003370 <receive_bridge>
}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b002      	add	sp, #8
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	20000460 	.word	0x20000460
 8003b94:	200004d4 	.word	0x200004d4
 8003b98:	200004a4 	.word	0x200004a4
 8003b9c:	2000047c 	.word	0x2000047c

08003ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	adc_sensor = new_adc_sensor(&hadc1, 9);
 8003ba4:	4bc1      	ldr	r3, [pc, #772]	; (8003eac <main+0x30c>)
 8003ba6:	2109      	movs	r1, #9
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f7ff fb57 	bl	800325c <new_adc_sensor>
 8003bae:	0002      	movs	r2, r0
 8003bb0:	4bbf      	ldr	r3, [pc, #764]	; (8003eb0 <main+0x310>)
 8003bb2:	601a      	str	r2, [r3, #0]

		bridge = new_bridge(&huart1);
 8003bb4:	4bbf      	ldr	r3, [pc, #764]	; (8003eb4 <main+0x314>)
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7ff fbb2 	bl	8003320 <new_bridge>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	4bbe      	ldr	r3, [pc, #760]	; (8003eb8 <main+0x318>)
 8003bc0:	601a      	str	r2, [r3, #0]

		diag_current_sensors[0] = new_diag_current_sensor(adc_sensor, 3);
 8003bc2:	4bbb      	ldr	r3, [pc, #748]	; (8003eb0 <main+0x310>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2103      	movs	r1, #3
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7ff fe69 	bl	80038a0 <new_diag_current_sensor>
 8003bce:	0002      	movs	r2, r0
 8003bd0:	4bba      	ldr	r3, [pc, #744]	; (8003ebc <main+0x31c>)
 8003bd2:	601a      	str	r2, [r3, #0]
		diag_current_sensors[1] = new_diag_current_sensor(adc_sensor, 4);
 8003bd4:	4bb6      	ldr	r3, [pc, #728]	; (8003eb0 <main+0x310>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2104      	movs	r1, #4
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7ff fe60 	bl	80038a0 <new_diag_current_sensor>
 8003be0:	0002      	movs	r2, r0
 8003be2:	4bb6      	ldr	r3, [pc, #728]	; (8003ebc <main+0x31c>)
 8003be4:	605a      	str	r2, [r3, #4]
		diag_current_sensors[2] = new_diag_current_sensor(adc_sensor, 5);
 8003be6:	4bb2      	ldr	r3, [pc, #712]	; (8003eb0 <main+0x310>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2105      	movs	r1, #5
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff fe57 	bl	80038a0 <new_diag_current_sensor>
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	4bb1      	ldr	r3, [pc, #708]	; (8003ebc <main+0x31c>)
 8003bf6:	609a      	str	r2, [r3, #8]

		diag_temp_sensors[0] = new_diag_temp_sensor(adc_sensor, 6);
 8003bf8:	4bad      	ldr	r3, [pc, #692]	; (8003eb0 <main+0x310>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2106      	movs	r1, #6
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f7ff fea2 	bl	8003948 <new_diag_temp_sensor>
 8003c04:	0002      	movs	r2, r0
 8003c06:	4bae      	ldr	r3, [pc, #696]	; (8003ec0 <main+0x320>)
 8003c08:	601a      	str	r2, [r3, #0]
		diag_temp_sensors[1] = new_diag_temp_sensor(adc_sensor, 7);
 8003c0a:	4ba9      	ldr	r3, [pc, #676]	; (8003eb0 <main+0x310>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2107      	movs	r1, #7
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7ff fe99 	bl	8003948 <new_diag_temp_sensor>
 8003c16:	0002      	movs	r2, r0
 8003c18:	4ba9      	ldr	r3, [pc, #676]	; (8003ec0 <main+0x320>)
 8003c1a:	605a      	str	r2, [r3, #4]
		diag_temp_sensors[2] = new_diag_temp_sensor(adc_sensor, 8);
 8003c1c:	4ba4      	ldr	r3, [pc, #656]	; (8003eb0 <main+0x310>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2108      	movs	r1, #8
 8003c22:	0018      	movs	r0, r3
 8003c24:	f7ff fe90 	bl	8003948 <new_diag_temp_sensor>
 8003c28:	0002      	movs	r2, r0
 8003c2a:	4ba5      	ldr	r3, [pc, #660]	; (8003ec0 <main+0x320>)
 8003c2c:	609a      	str	r2, [r3, #8]

		debug_leds[0] = new_pin_data(DEBUG_LED_0_GPIO_Port, DEBUG_LED_0_Pin, PIN_IS_OUTPUT);
 8003c2e:	4ba5      	ldr	r3, [pc, #660]	; (8003ec4 <main+0x324>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	2110      	movs	r1, #16
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 fd58 	bl	80046ea <new_pin_data>
 8003c3a:	0002      	movs	r2, r0
 8003c3c:	4ba2      	ldr	r3, [pc, #648]	; (8003ec8 <main+0x328>)
 8003c3e:	601a      	str	r2, [r3, #0]
		debug_leds[1] = new_pin_data(DEBUG_LED_1_GPIO_Port, DEBUG_LED_1_Pin, PIN_IS_OUTPUT);
 8003c40:	4ba0      	ldr	r3, [pc, #640]	; (8003ec4 <main+0x324>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	2108      	movs	r1, #8
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 fd4f 	bl	80046ea <new_pin_data>
 8003c4c:	0002      	movs	r2, r0
 8003c4e:	4b9e      	ldr	r3, [pc, #632]	; (8003ec8 <main+0x328>)
 8003c50:	605a      	str	r2, [r3, #4]
		debug_leds[2] = new_pin_data(DEBUG_LED_2_GPIO_Port, DEBUG_LED_2_Pin, PIN_IS_OUTPUT);
 8003c52:	4b9e      	ldr	r3, [pc, #632]	; (8003ecc <main+0x32c>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	2140      	movs	r1, #64	; 0x40
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f000 fd46 	bl	80046ea <new_pin_data>
 8003c5e:	0002      	movs	r2, r0
 8003c60:	4b99      	ldr	r3, [pc, #612]	; (8003ec8 <main+0x328>)
 8003c62:	609a      	str	r2, [r3, #8]
		debug_leds[3] = new_pin_data(DEBUG_LED_3_GPIO_Port, DEBUG_LED_3_Pin, PIN_IS_OUTPUT);
 8003c64:	4b99      	ldr	r3, [pc, #612]	; (8003ecc <main+0x32c>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	2120      	movs	r1, #32
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 fd3d 	bl	80046ea <new_pin_data>
 8003c70:	0002      	movs	r2, r0
 8003c72:	4b95      	ldr	r3, [pc, #596]	; (8003ec8 <main+0x328>)
 8003c74:	60da      	str	r2, [r3, #12]

		mosfet_pins[0] = new_pin_data(MOSFET_0_GPIO_Port, MOSFET_0_Pin, PIN_IS_OUTPUT);
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4892      	ldr	r0, [pc, #584]	; (8003ec4 <main+0x324>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	0019      	movs	r1, r3
 8003c80:	f000 fd33 	bl	80046ea <new_pin_data>
 8003c84:	0002      	movs	r2, r0
 8003c86:	4b92      	ldr	r3, [pc, #584]	; (8003ed0 <main+0x330>)
 8003c88:	601a      	str	r2, [r3, #0]
		mosfet_pins[1] = new_pin_data(MOSFET_1_GPIO_Port, MOSFET_1_Pin, PIN_IS_OUTPUT);
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	488d      	ldr	r0, [pc, #564]	; (8003ec4 <main+0x324>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	0019      	movs	r1, r3
 8003c94:	f000 fd29 	bl	80046ea <new_pin_data>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	4b8d      	ldr	r3, [pc, #564]	; (8003ed0 <main+0x330>)
 8003c9c:	605a      	str	r2, [r3, #4]
		mosfet_pins[2] = new_pin_data(MOSFET_2_GPIO_Port, MOSFET_2_Pin, PIN_IS_OUTPUT);
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	015b      	lsls	r3, r3, #5
 8003ca2:	4888      	ldr	r0, [pc, #544]	; (8003ec4 <main+0x324>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	f000 fd1f 	bl	80046ea <new_pin_data>
 8003cac:	0002      	movs	r2, r0
 8003cae:	4b88      	ldr	r3, [pc, #544]	; (8003ed0 <main+0x330>)
 8003cb0:	609a      	str	r2, [r3, #8]
		mosfet_pins[3] = new_pin_data(MOSFET_3_GPIO_Port, MOSFET_3_Pin, PIN_IS_OUTPUT);
 8003cb2:	2380      	movs	r3, #128	; 0x80
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	4883      	ldr	r0, [pc, #524]	; (8003ec4 <main+0x324>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	0019      	movs	r1, r3
 8003cbc:	f000 fd15 	bl	80046ea <new_pin_data>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	4b83      	ldr	r3, [pc, #524]	; (8003ed0 <main+0x330>)
 8003cc4:	60da      	str	r2, [r3, #12]
		mosfet_pins[4] = new_pin_data(MOSFET_4_GPIO_Port, MOSFET_4_Pin, PIN_IS_OUTPUT);
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	01db      	lsls	r3, r3, #7
 8003cca:	487e      	ldr	r0, [pc, #504]	; (8003ec4 <main+0x324>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	0019      	movs	r1, r3
 8003cd0:	f000 fd0b 	bl	80046ea <new_pin_data>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	4b7e      	ldr	r3, [pc, #504]	; (8003ed0 <main+0x330>)
 8003cd8:	611a      	str	r2, [r3, #16]
		mosfet_pins[5] = new_pin_data(MOSFET_5_GPIO_Port, MOSFET_5_Pin, PIN_IS_OUTPUT);
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	4879      	ldr	r0, [pc, #484]	; (8003ec4 <main+0x324>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	f000 fd01 	bl	80046ea <new_pin_data>
 8003ce8:	0002      	movs	r2, r0
 8003cea:	4b79      	ldr	r3, [pc, #484]	; (8003ed0 <main+0x330>)
 8003cec:	615a      	str	r2, [r3, #20]
		mosfet_pins[6] = new_pin_data(MOSFET_6_GPIO_Port, MOSFET_6_Pin, PIN_IS_OUTPUT);
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	0059      	lsls	r1, r3, #1
 8003cf2:	23a0      	movs	r3, #160	; 0xa0
 8003cf4:	05db      	lsls	r3, r3, #23
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f000 fcf6 	bl	80046ea <new_pin_data>
 8003cfe:	0002      	movs	r2, r0
 8003d00:	4b73      	ldr	r3, [pc, #460]	; (8003ed0 <main+0x330>)
 8003d02:	619a      	str	r2, [r3, #24]
		mosfet_pins[7] = new_pin_data(MOSFET_7_GPIO_Port, MOSFET_7_Pin, PIN_IS_OUTPUT);
 8003d04:	4b73      	ldr	r3, [pc, #460]	; (8003ed4 <main+0x334>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	2140      	movs	r1, #64	; 0x40
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f000 fced 	bl	80046ea <new_pin_data>
 8003d10:	0002      	movs	r2, r0
 8003d12:	4b6f      	ldr	r3, [pc, #444]	; (8003ed0 <main+0x330>)
 8003d14:	61da      	str	r2, [r3, #28]
		mosfet_pins[8] = new_pin_data(MOSFET_8_GPIO_Port, MOSFET_8_Pin, PIN_IS_OUTPUT);
 8003d16:	4b6f      	ldr	r3, [pc, #444]	; (8003ed4 <main+0x334>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f000 fce4 	bl	80046ea <new_pin_data>
 8003d22:	0002      	movs	r2, r0
 8003d24:	4b6a      	ldr	r3, [pc, #424]	; (8003ed0 <main+0x330>)
 8003d26:	621a      	str	r2, [r3, #32]
		mosfet_pins[9] = new_pin_data(MOSFET_9_GPIO_Port, MOSFET_9_Pin, PIN_IS_OUTPUT);
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4867      	ldr	r0, [pc, #412]	; (8003ecc <main+0x32c>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	0019      	movs	r1, r3
 8003d32:	f000 fcda 	bl	80046ea <new_pin_data>
 8003d36:	0002      	movs	r2, r0
 8003d38:	4b65      	ldr	r3, [pc, #404]	; (8003ed0 <main+0x330>)
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
		mosfet_pins[10] = new_pin_data(MOSFET_10_GPIO_Port, MOSFET_10_Pin, PIN_IS_OUTPUT);
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4862      	ldr	r0, [pc, #392]	; (8003ecc <main+0x32c>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	0019      	movs	r1, r3
 8003d46:	f000 fcd0 	bl	80046ea <new_pin_data>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	4b60      	ldr	r3, [pc, #384]	; (8003ed0 <main+0x330>)
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28
		mosfet_pins[11] = new_pin_data(MOSFET_11_GPIO_Port, MOSFET_11_Pin, PIN_IS_OUTPUT);
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	0119      	lsls	r1, r3, #4
 8003d54:	23a0      	movs	r3, #160	; 0xa0
 8003d56:	05db      	lsls	r3, r3, #23
 8003d58:	2201      	movs	r2, #1
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 fcc5 	bl	80046ea <new_pin_data>
 8003d60:	0002      	movs	r2, r0
 8003d62:	4b5b      	ldr	r3, [pc, #364]	; (8003ed0 <main+0x330>)
 8003d64:	62da      	str	r2, [r3, #44]	; 0x2c

		heater_pins[0] = mosfet_pins[HEATER_0_MOSFET_PIN];
 8003d66:	4b5a      	ldr	r3, [pc, #360]	; (8003ed0 <main+0x330>)
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	4b5b      	ldr	r3, [pc, #364]	; (8003ed8 <main+0x338>)
 8003d6c:	601a      	str	r2, [r3, #0]
		heater_pins[1] = mosfet_pins[HEATER_1_MOSFET_PIN];
 8003d6e:	4b58      	ldr	r3, [pc, #352]	; (8003ed0 <main+0x330>)
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	4b59      	ldr	r3, [pc, #356]	; (8003ed8 <main+0x338>)
 8003d74:	605a      	str	r2, [r3, #4]
		heater_pins[2] = mosfet_pins[HEATER_2_MOSFET_PIN];
 8003d76:	4b56      	ldr	r3, [pc, #344]	; (8003ed0 <main+0x330>)
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	4b57      	ldr	r3, [pc, #348]	; (8003ed8 <main+0x338>)
 8003d7c:	609a      	str	r2, [r3, #8]

		servos[0] = new_servo(&htim1, TIM_CHANNEL_1, &(TIM1->CCR1));
 8003d7e:	4a57      	ldr	r2, [pc, #348]	; (8003edc <main+0x33c>)
 8003d80:	4b57      	ldr	r3, [pc, #348]	; (8003ee0 <main+0x340>)
 8003d82:	2100      	movs	r1, #0
 8003d84:	0018      	movs	r0, r3
 8003d86:	f000 fd24 	bl	80047d2 <new_servo>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	4b55      	ldr	r3, [pc, #340]	; (8003ee4 <main+0x344>)
 8003d8e:	601a      	str	r2, [r3, #0]
		servos[1] = new_servo(&htim1, TIM_CHANNEL_2, &(TIM1->CCR2));
 8003d90:	4a55      	ldr	r2, [pc, #340]	; (8003ee8 <main+0x348>)
 8003d92:	4b53      	ldr	r3, [pc, #332]	; (8003ee0 <main+0x340>)
 8003d94:	2104      	movs	r1, #4
 8003d96:	0018      	movs	r0, r3
 8003d98:	f000 fd1b 	bl	80047d2 <new_servo>
 8003d9c:	0002      	movs	r2, r0
 8003d9e:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <main+0x344>)
 8003da0:	605a      	str	r2, [r3, #4]
		servos[2] = new_servo(&htim1, TIM_CHANNEL_3, &(TIM1->CCR3));
 8003da2:	4a52      	ldr	r2, [pc, #328]	; (8003eec <main+0x34c>)
 8003da4:	4b4e      	ldr	r3, [pc, #312]	; (8003ee0 <main+0x340>)
 8003da6:	2108      	movs	r1, #8
 8003da8:	0018      	movs	r0, r3
 8003daa:	f000 fd12 	bl	80047d2 <new_servo>
 8003dae:	0002      	movs	r2, r0
 8003db0:	4b4c      	ldr	r3, [pc, #304]	; (8003ee4 <main+0x344>)
 8003db2:	609a      	str	r2, [r3, #8]

		smbus = new_smbus(&hi2c1, NULL, false);
 8003db4:	4b4e      	ldr	r3, [pc, #312]	; (8003ef0 <main+0x350>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	2100      	movs	r1, #0
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 fd46 	bl	800484c <new_smbus>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	4b4c      	ldr	r3, [pc, #304]	; (8003ef4 <main+0x354>)
 8003dc4:	601a      	str	r2, [r3, #0]
		spectral = new_spectral(smbus);
 8003dc6:	4b4b      	ldr	r3, [pc, #300]	; (8003ef4 <main+0x354>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 fd64 	bl	8004898 <new_spectral>
 8003dd0:	0002      	movs	r2, r0
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <main+0x358>)
 8003dd4:	601a      	str	r2, [r3, #0]

		science_temp_sensors[0] = new_thermistor(adc_sensor, 0);
 8003dd6:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <main+0x310>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2100      	movs	r1, #0
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f001 f931 	bl	8005044 <new_thermistor>
 8003de2:	0002      	movs	r2, r0
 8003de4:	4b45      	ldr	r3, [pc, #276]	; (8003efc <main+0x35c>)
 8003de6:	601a      	str	r2, [r3, #0]
		science_temp_sensors[1] = new_thermistor(adc_sensor, 1);
 8003de8:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <main+0x310>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2101      	movs	r1, #1
 8003dee:	0018      	movs	r0, r3
 8003df0:	f001 f928 	bl	8005044 <new_thermistor>
 8003df4:	0002      	movs	r2, r0
 8003df6:	4b41      	ldr	r3, [pc, #260]	; (8003efc <main+0x35c>)
 8003df8:	605a      	str	r2, [r3, #4]
		science_temp_sensors[2] = new_thermistor(adc_sensor, 2);
 8003dfa:	4b2d      	ldr	r3, [pc, #180]	; (8003eb0 <main+0x310>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2102      	movs	r1, #2
 8003e00:	0018      	movs	r0, r3
 8003e02:	f001 f91f 	bl	8005044 <new_thermistor>
 8003e06:	0002      	movs	r2, r0
 8003e08:	4b3c      	ldr	r3, [pc, #240]	; (8003efc <main+0x35c>)
 8003e0a:	609a      	str	r2, [r3, #8]

		science_heaters[0] = new_heater(heater_pins[0], science_temp_sensors[0]);
 8003e0c:	4b32      	ldr	r3, [pc, #200]	; (8003ed8 <main+0x338>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b3a      	ldr	r3, [pc, #232]	; (8003efc <main+0x35c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0019      	movs	r1, r3
 8003e16:	0010      	movs	r0, r2
 8003e18:	f7ff fe10 	bl	8003a3c <new_heater>
 8003e1c:	0002      	movs	r2, r0
 8003e1e:	4b38      	ldr	r3, [pc, #224]	; (8003f00 <main+0x360>)
 8003e20:	601a      	str	r2, [r3, #0]
		science_heaters[1] = new_heater(heater_pins[1], science_temp_sensors[1]);
 8003e22:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <main+0x338>)
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	4b35      	ldr	r3, [pc, #212]	; (8003efc <main+0x35c>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	0010      	movs	r0, r2
 8003e2e:	f7ff fe05 	bl	8003a3c <new_heater>
 8003e32:	0002      	movs	r2, r0
 8003e34:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <main+0x360>)
 8003e36:	605a      	str	r2, [r3, #4]
		science_heaters[2] = new_heater(heater_pins[2], science_temp_sensors[2]);
 8003e38:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <main+0x338>)
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	4b2f      	ldr	r3, [pc, #188]	; (8003efc <main+0x35c>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	0019      	movs	r1, r3
 8003e42:	0010      	movs	r0, r2
 8003e44:	f7ff fdfa 	bl	8003a3c <new_heater>
 8003e48:	0002      	movs	r2, r0
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <main+0x360>)
 8003e4c:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e4e:	f001 fa57 	bl	8005300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e52:	f000 f863 	bl	8003f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e56:	f000 fa6d 	bl	8004334 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e5a:	f000 fa45 	bl	80042e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003e5e:	f000 f9f5 	bl	800424c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003e62:	f000 f8a3 	bl	8003fac <MX_ADC1_Init>
  MX_I2C1_Init();
 8003e66:	f000 f8ef 	bl	8004048 <MX_I2C1_Init>
  MX_TIM1_Init();
 8003e6a:	f000 f92d 	bl	80040c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  receive_bridge(bridge, science_heaters, mosfet_pins, servos);
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <main+0x318>)
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <main+0x344>)
 8003e74:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <main+0x330>)
 8003e76:	4922      	ldr	r1, [pc, #136]	; (8003f00 <main+0x360>)
 8003e78:	f7ff fa7a 	bl	8003370 <receive_bridge>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003e7c:	f005 ff06 	bl	8009c8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MiscTask */
  MiscTaskHandle = osThreadNew(StartMiscTask, NULL, &MiscTask_attributes);
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <main+0x364>)
 8003e82:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <main+0x368>)
 8003e84:	2100      	movs	r1, #0
 8003e86:	0018      	movs	r0, r3
 8003e88:	f005 ff48 	bl	8009d1c <osThreadNew>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	4b1f      	ldr	r3, [pc, #124]	; (8003f0c <main+0x36c>)
 8003e90:	601a      	str	r2, [r3, #0]

  /* creation of SpectralTask */
  SpectralTaskHandle = osThreadNew(StartSpectralTask, NULL, &SpectralTask_attributes);
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <main+0x370>)
 8003e94:	4b1f      	ldr	r3, [pc, #124]	; (8003f14 <main+0x374>)
 8003e96:	2100      	movs	r1, #0
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f005 ff3f 	bl	8009d1c <osThreadNew>
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <main+0x378>)
 8003ea2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003ea4:	f005 ff14 	bl	8009cd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ea8:	e7fe      	b.n	8003ea8 <main+0x308>
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	200001fc 	.word	0x200001fc
 8003eb0:	2000045c 	.word	0x2000045c
 8003eb4:	20000360 	.word	0x20000360
 8003eb8:	20000460 	.word	0x20000460
 8003ebc:	20000464 	.word	0x20000464
 8003ec0:	20000470 	.word	0x20000470
 8003ec4:	50000400 	.word	0x50000400
 8003ec8:	20000488 	.word	0x20000488
 8003ecc:	50000c00 	.word	0x50000c00
 8003ed0:	200004a4 	.word	0x200004a4
 8003ed4:	50000800 	.word	0x50000800
 8003ed8:	20000498 	.word	0x20000498
 8003edc:	40012c34 	.word	0x40012c34
 8003ee0:	20000314 	.word	0x20000314
 8003ee4:	200004d4 	.word	0x200004d4
 8003ee8:	40012c38 	.word	0x40012c38
 8003eec:	40012c3c 	.word	0x40012c3c
 8003ef0:	200002c0 	.word	0x200002c0
 8003ef4:	200004e0 	.word	0x200004e0
 8003ef8:	200004e4 	.word	0x200004e4
 8003efc:	200004e8 	.word	0x200004e8
 8003f00:	2000047c 	.word	0x2000047c
 8003f04:	0800f914 	.word	0x0800f914
 8003f08:	08004499 	.word	0x08004499
 8003f0c:	20000454 	.word	0x20000454
 8003f10:	0800f938 	.word	0x0800f938
 8003f14:	08004695 	.word	0x08004695
 8003f18:	20000458 	.word	0x20000458

08003f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b095      	sub	sp, #84	; 0x54
 8003f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f22:	2414      	movs	r4, #20
 8003f24:	193b      	adds	r3, r7, r4
 8003f26:	0018      	movs	r0, r3
 8003f28:	233c      	movs	r3, #60	; 0x3c
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	f008 f944 	bl	800c1ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	0018      	movs	r0, r3
 8003f36:	2310      	movs	r3, #16
 8003f38:	001a      	movs	r2, r3
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	f008 f93d 	bl	800c1ba <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	0018      	movs	r0, r3
 8003f46:	f002 fc77 	bl	8006838 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f4a:	193b      	adds	r3, r7, r4
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f50:	193b      	adds	r3, r7, r4
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	0052      	lsls	r2, r2, #1
 8003f56:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003f58:	193b      	adds	r3, r7, r4
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f5e:	193b      	adds	r3, r7, r4
 8003f60:	2240      	movs	r2, #64	; 0x40
 8003f62:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f64:	193b      	adds	r3, r7, r4
 8003f66:	2200      	movs	r2, #0
 8003f68:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f6a:	193b      	adds	r3, r7, r4
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f002 fcaf 	bl	80068d0 <HAL_RCC_OscConfig>
 8003f72:	1e03      	subs	r3, r0, #0
 8003f74:	d001      	beq.n	8003f7a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003f76:	f000 fbb3 	bl	80046e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	2207      	movs	r2, #7
 8003f7e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	2200      	movs	r2, #0
 8003f84:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	2100      	movs	r1, #0
 8003f96:	0018      	movs	r0, r3
 8003f98:	f002 fffa 	bl	8006f90 <HAL_RCC_ClockConfig>
 8003f9c:	1e03      	subs	r3, r0, #0
 8003f9e:	d001      	beq.n	8003fa4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003fa0:	f000 fb9e 	bl	80046e0 <Error_Handler>
  }
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b015      	add	sp, #84	; 0x54
 8003faa:	bd90      	pop	{r4, r7, pc}

08003fac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003fb0:	4b23      	ldr	r3, [pc, #140]	; (8004040 <MX_ADC1_Init+0x94>)
 8003fb2:	4a24      	ldr	r2, [pc, #144]	; (8004044 <MX_ADC1_Init+0x98>)
 8003fb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <MX_ADC1_Init+0x94>)
 8003fb8:	2280      	movs	r2, #128	; 0x80
 8003fba:	05d2      	lsls	r2, r2, #23
 8003fbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003fbe:	4b20      	ldr	r3, [pc, #128]	; (8004040 <MX_ADC1_Init+0x94>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fc4:	4b1e      	ldr	r3, [pc, #120]	; (8004040 <MX_ADC1_Init+0x94>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003fca:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <MX_ADC1_Init+0x94>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <MX_ADC1_Init+0x94>)
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <MX_ADC1_Init+0x94>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003fdc:	4b18      	ldr	r3, [pc, #96]	; (8004040 <MX_ADC1_Init+0x94>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003fe2:	4b17      	ldr	r3, [pc, #92]	; (8004040 <MX_ADC1_Init+0x94>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <MX_ADC1_Init+0x94>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003fee:	4b14      	ldr	r3, [pc, #80]	; (8004040 <MX_ADC1_Init+0x94>)
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ff6:	4b12      	ldr	r3, [pc, #72]	; (8004040 <MX_ADC1_Init+0x94>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ffc:	4b10      	ldr	r3, [pc, #64]	; (8004040 <MX_ADC1_Init+0x94>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004002:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <MX_ADC1_Init+0x94>)
 8004004:	222c      	movs	r2, #44	; 0x2c
 8004006:	2100      	movs	r1, #0
 8004008:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800400a:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <MX_ADC1_Init+0x94>)
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <MX_ADC1_Init+0x94>)
 8004012:	2200      	movs	r2, #0
 8004014:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <MX_ADC1_Init+0x94>)
 8004018:	2200      	movs	r2, #0
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800401c:	4b08      	ldr	r3, [pc, #32]	; (8004040 <MX_ADC1_Init+0x94>)
 800401e:	223c      	movs	r2, #60	; 0x3c
 8004020:	2100      	movs	r1, #0
 8004022:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <MX_ADC1_Init+0x94>)
 8004026:	2200      	movs	r2, #0
 8004028:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <MX_ADC1_Init+0x94>)
 800402c:	0018      	movs	r0, r3
 800402e:	f001 fa9b 	bl	8005568 <HAL_ADC_Init>
 8004032:	1e03      	subs	r3, r0, #0
 8004034:	d001      	beq.n	800403a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8004036:	f000 fb53 	bl	80046e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200001fc 	.word	0x200001fc
 8004044:	40012400 	.word	0x40012400

08004048 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <MX_I2C1_Init+0x74>)
 800404e:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <MX_I2C1_Init+0x78>)
 8004050:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8004052:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <MX_I2C1_Init+0x74>)
 8004054:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <MX_I2C1_Init+0x7c>)
 8004056:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004058:	4b18      	ldr	r3, [pc, #96]	; (80040bc <MX_I2C1_Init+0x74>)
 800405a:	2200      	movs	r2, #0
 800405c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800405e:	4b17      	ldr	r3, [pc, #92]	; (80040bc <MX_I2C1_Init+0x74>)
 8004060:	2201      	movs	r2, #1
 8004062:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004064:	4b15      	ldr	r3, [pc, #84]	; (80040bc <MX_I2C1_Init+0x74>)
 8004066:	2200      	movs	r2, #0
 8004068:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800406a:	4b14      	ldr	r3, [pc, #80]	; (80040bc <MX_I2C1_Init+0x74>)
 800406c:	2200      	movs	r2, #0
 800406e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <MX_I2C1_Init+0x74>)
 8004072:	2200      	movs	r2, #0
 8004074:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <MX_I2C1_Init+0x74>)
 8004078:	2200      	movs	r2, #0
 800407a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <MX_I2C1_Init+0x74>)
 800407e:	2200      	movs	r2, #0
 8004080:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <MX_I2C1_Init+0x74>)
 8004084:	0018      	movs	r0, r3
 8004086:	f002 faa9 	bl	80065dc <HAL_I2C_Init>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d001      	beq.n	8004092 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800408e:	f000 fb27 	bl	80046e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <MX_I2C1_Init+0x74>)
 8004094:	2100      	movs	r1, #0
 8004096:	0018      	movs	r0, r3
 8004098:	f002 fb36 	bl	8006708 <HAL_I2CEx_ConfigAnalogFilter>
 800409c:	1e03      	subs	r3, r0, #0
 800409e:	d001      	beq.n	80040a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80040a0:	f000 fb1e 	bl	80046e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <MX_I2C1_Init+0x74>)
 80040a6:	2100      	movs	r1, #0
 80040a8:	0018      	movs	r0, r3
 80040aa:	f002 fb79 	bl	80067a0 <HAL_I2CEx_ConfigDigitalFilter>
 80040ae:	1e03      	subs	r3, r0, #0
 80040b0:	d001      	beq.n	80040b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80040b2:	f000 fb15 	bl	80046e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	200002c0 	.word	0x200002c0
 80040c0:	40005400 	.word	0x40005400
 80040c4:	00303d5b 	.word	0x00303d5b

080040c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b098      	sub	sp, #96	; 0x60
 80040cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040ce:	2354      	movs	r3, #84	; 0x54
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	0018      	movs	r0, r3
 80040d4:	230c      	movs	r3, #12
 80040d6:	001a      	movs	r2, r3
 80040d8:	2100      	movs	r1, #0
 80040da:	f008 f86e 	bl	800c1ba <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040de:	2338      	movs	r3, #56	; 0x38
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	0018      	movs	r0, r3
 80040e4:	231c      	movs	r3, #28
 80040e6:	001a      	movs	r2, r3
 80040e8:	2100      	movs	r1, #0
 80040ea:	f008 f866 	bl	800c1ba <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040ee:	1d3b      	adds	r3, r7, #4
 80040f0:	0018      	movs	r0, r3
 80040f2:	2334      	movs	r3, #52	; 0x34
 80040f4:	001a      	movs	r2, r3
 80040f6:	2100      	movs	r1, #0
 80040f8:	f008 f85f 	bl	800c1ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040fc:	4b50      	ldr	r3, [pc, #320]	; (8004240 <MX_TIM1_Init+0x178>)
 80040fe:	4a51      	ldr	r2, [pc, #324]	; (8004244 <MX_TIM1_Init+0x17c>)
 8004100:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004102:	4b4f      	ldr	r3, [pc, #316]	; (8004240 <MX_TIM1_Init+0x178>)
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004108:	4b4d      	ldr	r3, [pc, #308]	; (8004240 <MX_TIM1_Init+0x178>)
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800410e:	4b4c      	ldr	r3, [pc, #304]	; (8004240 <MX_TIM1_Init+0x178>)
 8004110:	4a4d      	ldr	r2, [pc, #308]	; (8004248 <MX_TIM1_Init+0x180>)
 8004112:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004114:	4b4a      	ldr	r3, [pc, #296]	; (8004240 <MX_TIM1_Init+0x178>)
 8004116:	2200      	movs	r2, #0
 8004118:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800411a:	4b49      	ldr	r3, [pc, #292]	; (8004240 <MX_TIM1_Init+0x178>)
 800411c:	2200      	movs	r2, #0
 800411e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004120:	4b47      	ldr	r3, [pc, #284]	; (8004240 <MX_TIM1_Init+0x178>)
 8004122:	2200      	movs	r2, #0
 8004124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004126:	4b46      	ldr	r3, [pc, #280]	; (8004240 <MX_TIM1_Init+0x178>)
 8004128:	0018      	movs	r0, r3
 800412a:	f003 fc03 	bl	8007934 <HAL_TIM_PWM_Init>
 800412e:	1e03      	subs	r3, r0, #0
 8004130:	d001      	beq.n	8004136 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8004132:	f000 fad5 	bl	80046e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004136:	2154      	movs	r1, #84	; 0x54
 8004138:	187b      	adds	r3, r7, r1
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800413e:	187b      	adds	r3, r7, r1
 8004140:	2200      	movs	r2, #0
 8004142:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004144:	187b      	adds	r3, r7, r1
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800414a:	187a      	adds	r2, r7, r1
 800414c:	4b3c      	ldr	r3, [pc, #240]	; (8004240 <MX_TIM1_Init+0x178>)
 800414e:	0011      	movs	r1, r2
 8004150:	0018      	movs	r0, r3
 8004152:	f004 f9e7 	bl	8008524 <HAL_TIMEx_MasterConfigSynchronization>
 8004156:	1e03      	subs	r3, r0, #0
 8004158:	d001      	beq.n	800415e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800415a:	f000 fac1 	bl	80046e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800415e:	2138      	movs	r1, #56	; 0x38
 8004160:	187b      	adds	r3, r7, r1
 8004162:	2260      	movs	r2, #96	; 0x60
 8004164:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004166:	187b      	adds	r3, r7, r1
 8004168:	2200      	movs	r2, #0
 800416a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800416c:	187b      	adds	r3, r7, r1
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004172:	187b      	adds	r3, r7, r1
 8004174:	2200      	movs	r2, #0
 8004176:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004178:	187b      	adds	r3, r7, r1
 800417a:	2200      	movs	r2, #0
 800417c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800417e:	187b      	adds	r3, r7, r1
 8004180:	2200      	movs	r2, #0
 8004182:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004184:	187b      	adds	r3, r7, r1
 8004186:	2200      	movs	r2, #0
 8004188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800418a:	1879      	adds	r1, r7, r1
 800418c:	4b2c      	ldr	r3, [pc, #176]	; (8004240 <MX_TIM1_Init+0x178>)
 800418e:	2200      	movs	r2, #0
 8004190:	0018      	movs	r0, r3
 8004192:	f003 fd59 	bl	8007c48 <HAL_TIM_PWM_ConfigChannel>
 8004196:	1e03      	subs	r3, r0, #0
 8004198:	d001      	beq.n	800419e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800419a:	f000 faa1 	bl	80046e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800419e:	2338      	movs	r3, #56	; 0x38
 80041a0:	18f9      	adds	r1, r7, r3
 80041a2:	4b27      	ldr	r3, [pc, #156]	; (8004240 <MX_TIM1_Init+0x178>)
 80041a4:	2204      	movs	r2, #4
 80041a6:	0018      	movs	r0, r3
 80041a8:	f003 fd4e 	bl	8007c48 <HAL_TIM_PWM_ConfigChannel>
 80041ac:	1e03      	subs	r3, r0, #0
 80041ae:	d001      	beq.n	80041b4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80041b0:	f000 fa96 	bl	80046e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041b4:	2338      	movs	r3, #56	; 0x38
 80041b6:	18f9      	adds	r1, r7, r3
 80041b8:	4b21      	ldr	r3, [pc, #132]	; (8004240 <MX_TIM1_Init+0x178>)
 80041ba:	2208      	movs	r2, #8
 80041bc:	0018      	movs	r0, r3
 80041be:	f003 fd43 	bl	8007c48 <HAL_TIM_PWM_ConfigChannel>
 80041c2:	1e03      	subs	r3, r0, #0
 80041c4:	d001      	beq.n	80041ca <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80041c6:	f000 fa8b 	bl	80046e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041ca:	1d3b      	adds	r3, r7, #4
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041d0:	1d3b      	adds	r3, r7, #4
 80041d2:	2200      	movs	r2, #0
 80041d4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	2200      	movs	r2, #0
 80041da:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041dc:	1d3b      	adds	r3, r7, #4
 80041de:	2200      	movs	r2, #0
 80041e0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041e2:	1d3b      	adds	r3, r7, #4
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041e8:	1d3b      	adds	r3, r7, #4
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	0192      	lsls	r2, r2, #6
 80041ee:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	2200      	movs	r2, #0
 80041f4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80041f6:	1d3b      	adds	r3, r7, #4
 80041f8:	2200      	movs	r2, #0
 80041fa:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	2200      	movs	r2, #0
 8004200:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004202:	1d3b      	adds	r3, r7, #4
 8004204:	2280      	movs	r2, #128	; 0x80
 8004206:	0492      	lsls	r2, r2, #18
 8004208:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800420a:	1d3b      	adds	r3, r7, #4
 800420c:	2200      	movs	r2, #0
 800420e:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	2200      	movs	r2, #0
 8004214:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800421c:	1d3a      	adds	r2, r7, #4
 800421e:	4b08      	ldr	r3, [pc, #32]	; (8004240 <MX_TIM1_Init+0x178>)
 8004220:	0011      	movs	r1, r2
 8004222:	0018      	movs	r0, r3
 8004224:	f004 f9f4 	bl	8008610 <HAL_TIMEx_ConfigBreakDeadTime>
 8004228:	1e03      	subs	r3, r0, #0
 800422a:	d001      	beq.n	8004230 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 800422c:	f000 fa58 	bl	80046e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <MX_TIM1_Init+0x178>)
 8004232:	0018      	movs	r0, r3
 8004234:	f000 fcac 	bl	8004b90 <HAL_TIM_MspPostInit>

}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b018      	add	sp, #96	; 0x60
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000314 	.word	0x20000314
 8004244:	40012c00 	.word	0x40012c00
 8004248:	0000ffff 	.word	0x0000ffff

0800424c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004250:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 8004252:	4a24      	ldr	r2, [pc, #144]	; (80042e4 <MX_USART1_UART_Init+0x98>)
 8004254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 8004258:	2296      	movs	r2, #150	; 0x96
 800425a:	0192      	lsls	r2, r2, #6
 800425c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004264:	4b1e      	ldr	r3, [pc, #120]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 8004266:	2200      	movs	r2, #0
 8004268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 800426c:	2200      	movs	r2, #0
 800426e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 8004272:	220c      	movs	r2, #12
 8004274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004276:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 8004278:	2200      	movs	r2, #0
 800427a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800427c:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 800427e:	2200      	movs	r2, #0
 8004280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004282:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 8004284:	2200      	movs	r2, #0
 8004286:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004288:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 800428a:	2200      	movs	r2, #0
 800428c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800428e:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 8004290:	2200      	movs	r2, #0
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004294:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 8004296:	0018      	movs	r0, r3
 8004298:	f004 fa78 	bl	800878c <HAL_UART_Init>
 800429c:	1e03      	subs	r3, r0, #0
 800429e:	d001      	beq.n	80042a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80042a0:	f000 fa1e 	bl	80046e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 80042a6:	2100      	movs	r1, #0
 80042a8:	0018      	movs	r0, r3
 80042aa:	f005 fb85 	bl	80099b8 <HAL_UARTEx_SetTxFifoThreshold>
 80042ae:	1e03      	subs	r3, r0, #0
 80042b0:	d001      	beq.n	80042b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80042b2:	f000 fa15 	bl	80046e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 80042b8:	2100      	movs	r1, #0
 80042ba:	0018      	movs	r0, r3
 80042bc:	f005 fbbc 	bl	8009a38 <HAL_UARTEx_SetRxFifoThreshold>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d001      	beq.n	80042c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80042c4:	f000 fa0c 	bl	80046e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <MX_USART1_UART_Init+0x94>)
 80042ca:	0018      	movs	r0, r3
 80042cc:	f005 fb3a 	bl	8009944 <HAL_UARTEx_DisableFifoMode>
 80042d0:	1e03      	subs	r3, r0, #0
 80042d2:	d001      	beq.n	80042d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80042d4:	f000 fa04 	bl	80046e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	20000360 	.word	0x20000360
 80042e4:	40013800 	.word	0x40013800

080042e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <MX_DMA_Init+0x48>)
 80042f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <MX_DMA_Init+0x48>)
 80042f4:	2101      	movs	r1, #1
 80042f6:	430a      	orrs	r2, r1
 80042f8:	639a      	str	r2, [r3, #56]	; 0x38
 80042fa:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <MX_DMA_Init+0x48>)
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	2201      	movs	r2, #1
 8004300:	4013      	ands	r3, r2
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8004306:	2200      	movs	r2, #0
 8004308:	2103      	movs	r1, #3
 800430a:	2009      	movs	r0, #9
 800430c:	f001 fd16 	bl	8005d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004310:	2009      	movs	r0, #9
 8004312:	f001 fd28 	bl	8005d66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 3, 0);
 8004316:	2200      	movs	r2, #0
 8004318:	2103      	movs	r1, #3
 800431a:	200b      	movs	r0, #11
 800431c:	f001 fd0e 	bl	8005d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 8004320:	200b      	movs	r0, #11
 8004322:	f001 fd20 	bl	8005d66 <HAL_NVIC_EnableIRQ>

}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	b002      	add	sp, #8
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	40021000 	.word	0x40021000

08004334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004334:	b590      	push	{r4, r7, lr}
 8004336:	b08b      	sub	sp, #44	; 0x2c
 8004338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800433a:	2414      	movs	r4, #20
 800433c:	193b      	adds	r3, r7, r4
 800433e:	0018      	movs	r0, r3
 8004340:	2314      	movs	r3, #20
 8004342:	001a      	movs	r2, r3
 8004344:	2100      	movs	r1, #0
 8004346:	f007 ff38 	bl	800c1ba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800434a:	4b4e      	ldr	r3, [pc, #312]	; (8004484 <MX_GPIO_Init+0x150>)
 800434c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800434e:	4b4d      	ldr	r3, [pc, #308]	; (8004484 <MX_GPIO_Init+0x150>)
 8004350:	2101      	movs	r1, #1
 8004352:	430a      	orrs	r2, r1
 8004354:	635a      	str	r2, [r3, #52]	; 0x34
 8004356:	4b4b      	ldr	r3, [pc, #300]	; (8004484 <MX_GPIO_Init+0x150>)
 8004358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435a:	2201      	movs	r2, #1
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004362:	4b48      	ldr	r3, [pc, #288]	; (8004484 <MX_GPIO_Init+0x150>)
 8004364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <MX_GPIO_Init+0x150>)
 8004368:	2102      	movs	r1, #2
 800436a:	430a      	orrs	r2, r1
 800436c:	635a      	str	r2, [r3, #52]	; 0x34
 800436e:	4b45      	ldr	r3, [pc, #276]	; (8004484 <MX_GPIO_Init+0x150>)
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	2202      	movs	r2, #2
 8004374:	4013      	ands	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800437a:	4b42      	ldr	r3, [pc, #264]	; (8004484 <MX_GPIO_Init+0x150>)
 800437c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800437e:	4b41      	ldr	r3, [pc, #260]	; (8004484 <MX_GPIO_Init+0x150>)
 8004380:	2104      	movs	r1, #4
 8004382:	430a      	orrs	r2, r1
 8004384:	635a      	str	r2, [r3, #52]	; 0x34
 8004386:	4b3f      	ldr	r3, [pc, #252]	; (8004484 <MX_GPIO_Init+0x150>)
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	2204      	movs	r2, #4
 800438c:	4013      	ands	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004392:	4b3c      	ldr	r3, [pc, #240]	; (8004484 <MX_GPIO_Init+0x150>)
 8004394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004396:	4b3b      	ldr	r3, [pc, #236]	; (8004484 <MX_GPIO_Init+0x150>)
 8004398:	2108      	movs	r1, #8
 800439a:	430a      	orrs	r2, r1
 800439c:	635a      	str	r2, [r3, #52]	; 0x34
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <MX_GPIO_Init+0x150>)
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a2:	2208      	movs	r2, #8
 80043a4:	4013      	ands	r3, r2
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOSFET_0_Pin|MOSFET_1_Pin|MOSFET_2_Pin|MOSFET_3_Pin
 80043aa:	4937      	ldr	r1, [pc, #220]	; (8004488 <MX_GPIO_Init+0x154>)
 80043ac:	4b37      	ldr	r3, [pc, #220]	; (800448c <MX_GPIO_Init+0x158>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	0018      	movs	r0, r3
 80043b2:	f002 f8f5 	bl	80065a0 <HAL_GPIO_WritePin>
                          |MOSFET_4_Pin|MOSFET_5_Pin|DEBUG_LED_1_Pin|DEBUG_LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOSFET_6_Pin|MOSFET_11_Pin, GPIO_PIN_RESET);
 80043b6:	2390      	movs	r3, #144	; 0x90
 80043b8:	0119      	lsls	r1, r3, #4
 80043ba:	23a0      	movs	r3, #160	; 0xa0
 80043bc:	05db      	lsls	r3, r3, #23
 80043be:	2200      	movs	r2, #0
 80043c0:	0018      	movs	r0, r3
 80043c2:	f002 f8ed 	bl	80065a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOSFET_7_Pin|MOSFET_8_Pin, GPIO_PIN_RESET);
 80043c6:	4b32      	ldr	r3, [pc, #200]	; (8004490 <MX_GPIO_Init+0x15c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	21c0      	movs	r1, #192	; 0xc0
 80043cc:	0018      	movs	r0, r3
 80043ce:	f002 f8e7 	bl	80065a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOSFET_9_Pin|MOSFET_10_Pin|DEBUG_LED_3_Pin|DEBUG_LED_2_Pin, GPIO_PIN_RESET);
 80043d2:	23d8      	movs	r3, #216	; 0xd8
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	482f      	ldr	r0, [pc, #188]	; (8004494 <MX_GPIO_Init+0x160>)
 80043d8:	2200      	movs	r2, #0
 80043da:	0019      	movs	r1, r3
 80043dc:	f002 f8e0 	bl	80065a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOSFET_0_Pin MOSFET_1_Pin MOSFET_2_Pin MOSFET_3_Pin
                           MOSFET_4_Pin MOSFET_5_Pin DEBUG_LED_1_Pin DEBUG_LED_0_Pin */
  GPIO_InitStruct.Pin = MOSFET_0_Pin|MOSFET_1_Pin|MOSFET_2_Pin|MOSFET_3_Pin
 80043e0:	193b      	adds	r3, r7, r4
 80043e2:	4a29      	ldr	r2, [pc, #164]	; (8004488 <MX_GPIO_Init+0x154>)
 80043e4:	601a      	str	r2, [r3, #0]
                          |MOSFET_4_Pin|MOSFET_5_Pin|DEBUG_LED_1_Pin|DEBUG_LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043e6:	193b      	adds	r3, r7, r4
 80043e8:	2201      	movs	r2, #1
 80043ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ec:	193b      	adds	r3, r7, r4
 80043ee:	2200      	movs	r2, #0
 80043f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f2:	193b      	adds	r3, r7, r4
 80043f4:	2200      	movs	r2, #0
 80043f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f8:	193b      	adds	r3, r7, r4
 80043fa:	4a24      	ldr	r2, [pc, #144]	; (800448c <MX_GPIO_Init+0x158>)
 80043fc:	0019      	movs	r1, r3
 80043fe:	0010      	movs	r0, r2
 8004400:	f001 ff62 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOSFET_6_Pin MOSFET_11_Pin */
  GPIO_InitStruct.Pin = MOSFET_6_Pin|MOSFET_11_Pin;
 8004404:	0021      	movs	r1, r4
 8004406:	187b      	adds	r3, r7, r1
 8004408:	2290      	movs	r2, #144	; 0x90
 800440a:	0112      	lsls	r2, r2, #4
 800440c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800440e:	000c      	movs	r4, r1
 8004410:	193b      	adds	r3, r7, r4
 8004412:	2201      	movs	r2, #1
 8004414:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004416:	193b      	adds	r3, r7, r4
 8004418:	2200      	movs	r2, #0
 800441a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441c:	193b      	adds	r3, r7, r4
 800441e:	2200      	movs	r2, #0
 8004420:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004422:	193a      	adds	r2, r7, r4
 8004424:	23a0      	movs	r3, #160	; 0xa0
 8004426:	05db      	lsls	r3, r3, #23
 8004428:	0011      	movs	r1, r2
 800442a:	0018      	movs	r0, r3
 800442c:	f001 ff4c 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOSFET_7_Pin MOSFET_8_Pin */
  GPIO_InitStruct.Pin = MOSFET_7_Pin|MOSFET_8_Pin;
 8004430:	193b      	adds	r3, r7, r4
 8004432:	22c0      	movs	r2, #192	; 0xc0
 8004434:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004436:	193b      	adds	r3, r7, r4
 8004438:	2201      	movs	r2, #1
 800443a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443c:	193b      	adds	r3, r7, r4
 800443e:	2200      	movs	r2, #0
 8004440:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004442:	193b      	adds	r3, r7, r4
 8004444:	2200      	movs	r2, #0
 8004446:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004448:	193b      	adds	r3, r7, r4
 800444a:	4a11      	ldr	r2, [pc, #68]	; (8004490 <MX_GPIO_Init+0x15c>)
 800444c:	0019      	movs	r1, r3
 800444e:	0010      	movs	r0, r2
 8004450:	f001 ff3a 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOSFET_9_Pin MOSFET_10_Pin DEBUG_LED_3_Pin DEBUG_LED_2_Pin */
  GPIO_InitStruct.Pin = MOSFET_9_Pin|MOSFET_10_Pin|DEBUG_LED_3_Pin|DEBUG_LED_2_Pin;
 8004454:	0021      	movs	r1, r4
 8004456:	187b      	adds	r3, r7, r1
 8004458:	22d8      	movs	r2, #216	; 0xd8
 800445a:	0092      	lsls	r2, r2, #2
 800445c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800445e:	187b      	adds	r3, r7, r1
 8004460:	2201      	movs	r2, #1
 8004462:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	187b      	adds	r3, r7, r1
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446a:	187b      	adds	r3, r7, r1
 800446c:	2200      	movs	r2, #0
 800446e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004470:	187b      	adds	r3, r7, r1
 8004472:	4a08      	ldr	r2, [pc, #32]	; (8004494 <MX_GPIO_Init+0x160>)
 8004474:	0019      	movs	r1, r3
 8004476:	0010      	movs	r0, r2
 8004478:	f001 ff26 	bl	80062c8 <HAL_GPIO_Init>

}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b00b      	add	sp, #44	; 0x2c
 8004482:	bd90      	pop	{r4, r7, pc}
 8004484:	40021000 	.word	0x40021000
 8004488:	0000fc18 	.word	0x0000fc18
 800448c:	50000400 	.word	0x50000400
 8004490:	50000800 	.word	0x50000800
 8004494:	50000c00 	.word	0x50000c00

08004498 <StartMiscTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMiscTask */
void StartMiscTask(void *argument)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08c      	sub	sp, #48	; 0x30
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	 const TickType_t xFrequency = 5000/portTICK_PERIOD_MS; //values in milliseconds
 80044a0:	4b70      	ldr	r3, [pc, #448]	; (8004664 <StartMiscTask+0x1cc>)
 80044a2:	613b      	str	r3, [r7, #16]
	 xLastWakeTime = xTaskGetTickCount();
 80044a4:	f006 fca0 	bl	800ade8 <xTaskGetTickCount>
 80044a8:	0003      	movs	r3, r0
 80044aa:	60fb      	str	r3, [r7, #12]
	  	   * Science Temperatures
	  	   * State of auto-shut off state of the heater (upon change).
	  	   * State of the heater (upon change).
	  	   */

	    	  update_adc_sensor_values(adc_sensor);
 80044ac:	4b6e      	ldr	r3, [pc, #440]	; (8004668 <StartMiscTask+0x1d0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	0018      	movs	r0, r3
 80044b2:	f7fe ff17 	bl	80032e4 <update_adc_sensor_values>
	  	  for (size_t i = 0; i < NUM_DIAG_TEMP_SENSORS; ++i) {
 80044b6:	2300      	movs	r3, #0
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ba:	e015      	b.n	80044e8 <StartMiscTask+0x50>
	  		  update_diag_temp_sensor_val(diag_temp_sensors[i]);
 80044bc:	4b6b      	ldr	r3, [pc, #428]	; (800466c <StartMiscTask+0x1d4>)
 80044be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c0:	0092      	lsls	r2, r2, #2
 80044c2:	58d3      	ldr	r3, [r2, r3]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7ff fa59 	bl	800397c <update_diag_temp_sensor_val>
	  		  diag_temperatures[i] = get_diag_temp_sensor_val(diag_temp_sensors[i]);
 80044ca:	4b68      	ldr	r3, [pc, #416]	; (800466c <StartMiscTask+0x1d4>)
 80044cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ce:	0092      	lsls	r2, r2, #2
 80044d0:	58d3      	ldr	r3, [r2, r3]
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7ff fa86 	bl	80039e4 <get_diag_temp_sensor_val>
 80044d8:	1c01      	adds	r1, r0, #0
 80044da:	4b65      	ldr	r3, [pc, #404]	; (8004670 <StartMiscTask+0x1d8>)
 80044dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044de:	0092      	lsls	r2, r2, #2
 80044e0:	50d1      	str	r1, [r2, r3]
	  	  for (size_t i = 0; i < NUM_DIAG_TEMP_SENSORS; ++i) {
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	3301      	adds	r3, #1
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d9e6      	bls.n	80044bc <StartMiscTask+0x24>
	  	  }
	  	  for (size_t i = 0; i < NUM_DIAG_CURRENT_SENSORS; ++i) {
 80044ee:	2300      	movs	r3, #0
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f2:	e015      	b.n	8004520 <StartMiscTask+0x88>
	  		  update_diag_current_sensor_val(diag_current_sensors[i]);
 80044f4:	4b5f      	ldr	r3, [pc, #380]	; (8004674 <StartMiscTask+0x1dc>)
 80044f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044f8:	0092      	lsls	r2, r2, #2
 80044fa:	58d3      	ldr	r3, [r2, r3]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7ff f9eb 	bl	80038d8 <update_diag_current_sensor_val>
	  		  diag_currents[i] = get_diag_current_sensor_val(diag_current_sensors[i]);
 8004502:	4b5c      	ldr	r3, [pc, #368]	; (8004674 <StartMiscTask+0x1dc>)
 8004504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004506:	0092      	lsls	r2, r2, #2
 8004508:	58d3      	ldr	r3, [r2, r3]
 800450a:	0018      	movs	r0, r3
 800450c:	f7ff fa12 	bl	8003934 <get_diag_current_sensor_val>
 8004510:	1c01      	adds	r1, r0, #0
 8004512:	4b59      	ldr	r3, [pc, #356]	; (8004678 <StartMiscTask+0x1e0>)
 8004514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004516:	0092      	lsls	r2, r2, #2
 8004518:	50d1      	str	r1, [r2, r3]
	  	  for (size_t i = 0; i < NUM_DIAG_CURRENT_SENSORS; ++i) {
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	3301      	adds	r3, #1
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	2b02      	cmp	r3, #2
 8004524:	d9e6      	bls.n	80044f4 <StartMiscTask+0x5c>
	  	  }
	  	  bridge_send_diagnostic(bridge, diag_temperatures, diag_currents);
 8004526:	4b55      	ldr	r3, [pc, #340]	; (800467c <StartMiscTask+0x1e4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a53      	ldr	r2, [pc, #332]	; (8004678 <StartMiscTask+0x1e0>)
 800452c:	4950      	ldr	r1, [pc, #320]	; (8004670 <StartMiscTask+0x1d8>)
 800452e:	0018      	movs	r0, r3
 8004530:	f7ff f8c0 	bl	80036b4 <bridge_send_diagnostic>

	  	  for (size_t i = 0; i < NUM_HEATERS; ++i) {
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
 8004538:	e01c      	b.n	8004574 <StartMiscTask+0xdc>
	  		  update_heater_temperature(science_heaters[i]);
 800453a:	4b51      	ldr	r3, [pc, #324]	; (8004680 <StartMiscTask+0x1e8>)
 800453c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453e:	0092      	lsls	r2, r2, #2
 8004540:	58d3      	ldr	r3, [r2, r3]
 8004542:	0018      	movs	r0, r3
 8004544:	f7ff fa9b 	bl	8003a7e <update_heater_temperature>
	  		  update_heater_state(science_heaters[i]);
 8004548:	4b4d      	ldr	r3, [pc, #308]	; (8004680 <StartMiscTask+0x1e8>)
 800454a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454c:	0092      	lsls	r2, r2, #2
 800454e:	58d3      	ldr	r3, [r2, r3]
 8004550:	0018      	movs	r0, r3
 8004552:	f7ff faa1 	bl	8003a98 <update_heater_state>
	  		  science_temperatures[i] = get_thermistor_temperature(science_temp_sensors[i]);
 8004556:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <StartMiscTask+0x1ec>)
 8004558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455a:	0092      	lsls	r2, r2, #2
 800455c:	58d3      	ldr	r3, [r2, r3]
 800455e:	0018      	movs	r0, r3
 8004560:	f000 fe9a 	bl	8005298 <get_thermistor_temperature>
 8004564:	1c01      	adds	r1, r0, #0
 8004566:	4b48      	ldr	r3, [pc, #288]	; (8004688 <StartMiscTask+0x1f0>)
 8004568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456a:	0092      	lsls	r2, r2, #2
 800456c:	50d1      	str	r1, [r2, r3]
	  	  for (size_t i = 0; i < NUM_HEATERS; ++i) {
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	3301      	adds	r3, #1
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	2b02      	cmp	r3, #2
 8004578:	d9df      	bls.n	800453a <StartMiscTask+0xa2>
	  	  }
	  	  bridge_send_science_thermistors(bridge, science_temperatures);
 800457a:	4b40      	ldr	r3, [pc, #256]	; (800467c <StartMiscTask+0x1e4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a42      	ldr	r2, [pc, #264]	; (8004688 <StartMiscTask+0x1f0>)
 8004580:	0011      	movs	r1, r2
 8004582:	0018      	movs	r0, r3
 8004584:	f7ff f8fc 	bl	8003780 <bridge_send_science_thermistors>

	    	  bool send_auto_shutoff = false;
 8004588:	2323      	movs	r3, #35	; 0x23
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	2200      	movs	r2, #0
 800458e:	701a      	strb	r2, [r3, #0]
	  	  for (size_t i = 0; i < NUM_HEATERS; ++i) {
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	e01a      	b.n	80045cc <StartMiscTask+0x134>
	  		  heater_auto_shutoff_state = science_heaters[i]->auto_shutoff;
 8004596:	4b3a      	ldr	r3, [pc, #232]	; (8004680 <StartMiscTask+0x1e8>)
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	0092      	lsls	r2, r2, #2
 800459c:	58d3      	ldr	r3, [r2, r3]
 800459e:	7a1a      	ldrb	r2, [r3, #8]
 80045a0:	4b3a      	ldr	r3, [pc, #232]	; (800468c <StartMiscTask+0x1f4>)
 80045a2:	701a      	strb	r2, [r3, #0]
	  		  if (science_heaters[i]->send_auto_shutoff) {
 80045a4:	4b36      	ldr	r3, [pc, #216]	; (8004680 <StartMiscTask+0x1e8>)
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	0092      	lsls	r2, r2, #2
 80045aa:	58d3      	ldr	r3, [r2, r3]
 80045ac:	7a9b      	ldrb	r3, [r3, #10]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <StartMiscTask+0x12e>
	  			  science_heaters[i]->send_auto_shutoff = false;
 80045b2:	4b33      	ldr	r3, [pc, #204]	; (8004680 <StartMiscTask+0x1e8>)
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	0092      	lsls	r2, r2, #2
 80045b8:	58d3      	ldr	r3, [r2, r3]
 80045ba:	2200      	movs	r2, #0
 80045bc:	729a      	strb	r2, [r3, #10]
	  			  send_auto_shutoff = true;
 80045be:	2323      	movs	r3, #35	; 0x23
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
	  	  for (size_t i = 0; i < NUM_HEATERS; ++i) {
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3301      	adds	r3, #1
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d9e1      	bls.n	8004596 <StartMiscTask+0xfe>
	  		  }
	  	  }
	  	  if (send_auto_shutoff) {
 80045d2:	2323      	movs	r3, #35	; 0x23
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <StartMiscTask+0x154>
	  		  bridge_send_heater_auto_shutoff(bridge, heater_auto_shutoff_state);
 80045dc:	4b27      	ldr	r3, [pc, #156]	; (800467c <StartMiscTask+0x1e4>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b2a      	ldr	r3, [pc, #168]	; (800468c <StartMiscTask+0x1f4>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	0019      	movs	r1, r3
 80045e6:	0010      	movs	r0, r2
 80045e8:	f7ff f90c 	bl	8003804 <bridge_send_heater_auto_shutoff>
	  	  }

	  	  bool send_heater_on = false;
 80045ec:	231b      	movs	r3, #27
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
	  	  for (size_t i = 0; i < NUM_HEATERS; ++i) {
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e01d      	b.n	8004636 <StartMiscTask+0x19e>
	  		  heater_on_state[i] = science_heaters[i]->is_on;
 80045fa:	4b21      	ldr	r3, [pc, #132]	; (8004680 <StartMiscTask+0x1e8>)
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	0092      	lsls	r2, r2, #2
 8004600:	58d3      	ldr	r3, [r2, r3]
 8004602:	7a59      	ldrb	r1, [r3, #9]
 8004604:	4a22      	ldr	r2, [pc, #136]	; (8004690 <StartMiscTask+0x1f8>)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	18d3      	adds	r3, r2, r3
 800460a:	1c0a      	adds	r2, r1, #0
 800460c:	701a      	strb	r2, [r3, #0]
	  		  if (science_heaters[i]->send_on) {
 800460e:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <StartMiscTask+0x1e8>)
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	0092      	lsls	r2, r2, #2
 8004614:	58d3      	ldr	r3, [r2, r3]
 8004616:	7adb      	ldrb	r3, [r3, #11]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <StartMiscTask+0x198>
	  			  science_heaters[i]->send_on = false;
 800461c:	4b18      	ldr	r3, [pc, #96]	; (8004680 <StartMiscTask+0x1e8>)
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	0092      	lsls	r2, r2, #2
 8004622:	58d3      	ldr	r3, [r2, r3]
 8004624:	2200      	movs	r2, #0
 8004626:	72da      	strb	r2, [r3, #11]
	  			  send_heater_on = true;
 8004628:	231b      	movs	r3, #27
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
	  	  for (size_t i = 0; i < NUM_HEATERS; ++i) {
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	3301      	adds	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d9de      	bls.n	80045fa <StartMiscTask+0x162>
	  		  }
	  	  }
	  	  if (send_heater_on) {
 800463c:	231b      	movs	r3, #27
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d006      	beq.n	8004654 <StartMiscTask+0x1bc>
	  		  bridge_send_heater_state(bridge, heater_on_state);
 8004646:	4b0d      	ldr	r3, [pc, #52]	; (800467c <StartMiscTask+0x1e4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a11      	ldr	r2, [pc, #68]	; (8004690 <StartMiscTask+0x1f8>)
 800464c:	0011      	movs	r1, r2
 800464e:	0018      	movs	r0, r3
 8004650:	f7ff f8fa 	bl	8003848 <bridge_send_heater_state>
	  	  }
	  	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	230c      	movs	r3, #12
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	0011      	movs	r1, r2
 800465c:	0018      	movs	r0, r3
 800465e:	f006 fa7b 	bl	800ab58 <vTaskDelayUntil>
  {
 8004662:	e723      	b.n	80044ac <StartMiscTask+0x14>
 8004664:	00001388 	.word	0x00001388
 8004668:	2000045c 	.word	0x2000045c
 800466c:	20000470 	.word	0x20000470
 8004670:	200004f4 	.word	0x200004f4
 8004674:	20000464 	.word	0x20000464
 8004678:	20000500 	.word	0x20000500
 800467c:	20000460 	.word	0x20000460
 8004680:	2000047c 	.word	0x2000047c
 8004684:	200004e8 	.word	0x200004e8
 8004688:	2000050c 	.word	0x2000050c
 800468c:	20000518 	.word	0x20000518
 8004690:	2000051c 	.word	0x2000051c

08004694 <StartSpectralTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSpectralTask */
void StartSpectralTask(void *argument)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSpectralTask */
	TickType_t xLastWakeTime;
		 const TickType_t xFrequency = 5000/portTICK_PERIOD_MS; //value in milliseconds
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <StartSpectralTask+0x24>)
 800469e:	60fb      	str	r3, [r7, #12]
		 xLastWakeTime = xTaskGetTickCount();
 80046a0:	f006 fba2 	bl	800ade8 <xTaskGetTickCount>
 80046a4:	0003      	movs	r3, r0
 80046a6:	60bb      	str	r3, [r7, #8]
		  update_spectral_channel_data(spectral, i);
		  spectral_data[i] = get_spectral_channel_data(spectral, i);
	  }
	  bridge_send_spectral(bridge, spectral_data);
	  */
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	2308      	movs	r3, #8
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	0011      	movs	r1, r2
 80046b0:	0018      	movs	r0, r3
 80046b2:	f006 fa51 	bl	800ab58 <vTaskDelayUntil>
 80046b6:	e7f7      	b.n	80046a8 <StartSpectralTask+0x14>
 80046b8:	00001388 	.word	0x00001388

080046bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a04      	ldr	r2, [pc, #16]	; (80046dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80046ce:	f000 fe37 	bl	8005340 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b002      	add	sp, #8
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	40001000 	.word	0x40001000

080046e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046e4:	b672      	cpsid	i
}
 80046e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046e8:	e7fe      	b.n	80046e8 <Error_Handler+0x8>

080046ea <new_pin_data>:
// REQUIRES: _port and _pin corresponds to
// the port and pin and _is_output is boolean
// that is true if the pin is an output pin.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created PinData object
PinData *new_pin_data(GPIO_TypeDef *_port, uint16_t _pin, bool _is_output) {
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	0008      	movs	r0, r1
 80046f4:	0011      	movs	r1, r2
 80046f6:	1cbb      	adds	r3, r7, #2
 80046f8:	1c02      	adds	r2, r0, #0
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	1c7b      	adds	r3, r7, #1
 80046fe:	1c0a      	adds	r2, r1, #0
 8004700:	701a      	strb	r2, [r3, #0]
    PinData *pin_data = (PinData*) malloc(sizeof(PinData));
 8004702:	2008      	movs	r0, #8
 8004704:	f007 fd46 	bl	800c194 <malloc>
 8004708:	0003      	movs	r3, r0
 800470a:	60fb      	str	r3, [r7, #12]
	pin_data->port = _port;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
    pin_data->pin = _pin;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1cba      	adds	r2, r7, #2
 8004716:	8812      	ldrh	r2, [r2, #0]
 8004718:	809a      	strh	r2, [r3, #4]
    pin_data->is_output = _is_output;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1c7a      	adds	r2, r7, #1
 800471e:	7812      	ldrb	r2, [r2, #0]
 8004720:	719a      	strb	r2, [r3, #6]
	return pin_data;
 8004722:	68fb      	ldr	r3, [r7, #12]
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b004      	add	sp, #16
 800472a:	bd80      	pop	{r7, pc}

0800472c <set_pin_value>:

// REQUIRES: pin_data is PinData and value is 0 or 1
// MODIFIES: nothing
// EFFECTS: Sets pin to value
void set_pin_value(PinData *pin_data, bool value) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	000a      	movs	r2, r1
 8004736:	1cfb      	adds	r3, r7, #3
 8004738:	701a      	strb	r2, [r3, #0]
	if (!pin_data->is_output) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	799b      	ldrb	r3, [r3, #6]
 800473e:	2201      	movs	r2, #1
 8004740:	4053      	eors	r3, r2
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d111      	bne.n	800476c <set_pin_value+0x40>
		return;
	}
	HAL_GPIO_WritePin(pin_data->port, pin_data->pin, value == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8899      	ldrh	r1, [r3, #4]
 8004750:	1cfb      	adds	r3, r7, #3
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2201      	movs	r2, #1
 8004756:	4053      	eors	r3, r2
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <set_pin_value+0x36>
 800475e:	2300      	movs	r3, #0
 8004760:	e000      	b.n	8004764 <set_pin_value+0x38>
 8004762:	2301      	movs	r3, #1
 8004764:	001a      	movs	r2, r3
 8004766:	f001 ff1b 	bl	80065a0 <HAL_GPIO_WritePin>
 800476a:	e000      	b.n	800476e <set_pin_value+0x42>
		return;
 800476c:	46c0      	nop			; (mov r8, r8)
}
 800476e:	46bd      	mov	sp, r7
 8004770:	b002      	add	sp, #8
 8004772:	bd80      	pop	{r7, pc}

08004774 <constrain>:
#include "servo.h"

// Constrain input value to bewteen maximum and minimum
int16_t constrain(int16_t val, int16_t min, int16_t max)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	0004      	movs	r4, r0
 800477c:	0008      	movs	r0, r1
 800477e:	0011      	movs	r1, r2
 8004780:	1dbb      	adds	r3, r7, #6
 8004782:	1c22      	adds	r2, r4, #0
 8004784:	801a      	strh	r2, [r3, #0]
 8004786:	1d3b      	adds	r3, r7, #4
 8004788:	1c02      	adds	r2, r0, #0
 800478a:	801a      	strh	r2, [r3, #0]
 800478c:	1cbb      	adds	r3, r7, #2
 800478e:	1c0a      	adds	r2, r1, #0
 8004790:	801a      	strh	r2, [r3, #0]

    // constrain val
    if(val < min)
 8004792:	1dba      	adds	r2, r7, #6
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	2100      	movs	r1, #0
 8004798:	5e52      	ldrsh	r2, [r2, r1]
 800479a:	2100      	movs	r1, #0
 800479c:	5e5b      	ldrsh	r3, [r3, r1]
 800479e:	429a      	cmp	r2, r3
 80047a0:	da04      	bge.n	80047ac <constrain+0x38>
    {
        val = min;
 80047a2:	1dbb      	adds	r3, r7, #6
 80047a4:	1d3a      	adds	r2, r7, #4
 80047a6:	8812      	ldrh	r2, [r2, #0]
 80047a8:	801a      	strh	r2, [r3, #0]
 80047aa:	e00b      	b.n	80047c4 <constrain+0x50>
    }
    else if (val > max)
 80047ac:	1dba      	adds	r2, r7, #6
 80047ae:	1cbb      	adds	r3, r7, #2
 80047b0:	2100      	movs	r1, #0
 80047b2:	5e52      	ldrsh	r2, [r2, r1]
 80047b4:	2100      	movs	r1, #0
 80047b6:	5e5b      	ldrsh	r3, [r3, r1]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	dd03      	ble.n	80047c4 <constrain+0x50>
    {
        val = max;
 80047bc:	1dbb      	adds	r3, r7, #6
 80047be:	1cba      	adds	r2, r7, #2
 80047c0:	8812      	ldrh	r2, [r2, #0]
 80047c2:	801a      	strh	r2, [r3, #0]
    }

    return val;
 80047c4:	1dbb      	adds	r3, r7, #6
 80047c6:	2200      	movs	r2, #0
 80047c8:	5e9b      	ldrsh	r3, [r3, r2]
}
 80047ca:	0018      	movs	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b003      	add	sp, #12
 80047d0:	bd90      	pop	{r4, r7, pc}

080047d2 <new_servo>:

// REQUIRES: timer is the timer and channel is the channel and out channel is the CCR
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Servo object
Servo *new_servo(TIM_HandleTypeDef *_timer, uint32_t _channel, uint32_t *_out_channel)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
	Servo *servo = (Servo*) malloc(sizeof(Servo));
 80047de:	200c      	movs	r0, #12
 80047e0:	f007 fcd8 	bl	800c194 <malloc>
 80047e4:	0003      	movs	r3, r0
 80047e6:	617b      	str	r3, [r7, #20]
	servo->timer = _timer;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	601a      	str	r2, [r3, #0]
	servo->channel = _channel;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	605a      	str	r2, [r3, #4]
	servo->out_channel = _out_channel;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	609a      	str	r2, [r3, #8]
    return servo;
 80047fa:	697b      	ldr	r3, [r7, #20]
}
 80047fc:	0018      	movs	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	b006      	add	sp, #24
 8004802:	bd80      	pop	{r7, pc}

08004804 <set_servo_angle>:
// and 0 <= angle <= 180
// NOTE: the servo has a 120 degree range, so input will need to be scaled accordingly
// MODIFIES: nothing
// EFFECTS: Sets the servo angle to an absolute position
void set_servo_angle(Servo *servo, int16_t angle)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	000a      	movs	r2, r1
 800480e:	1cbb      	adds	r3, r7, #2
 8004810:	801a      	strh	r2, [r3, #0]
	angle = constrain(angle, 0, 180);
 8004812:	1cbc      	adds	r4, r7, #2
 8004814:	1cbb      	adds	r3, r7, #2
 8004816:	2200      	movs	r2, #0
 8004818:	5e9b      	ldrsh	r3, [r3, r2]
 800481a:	22b4      	movs	r2, #180	; 0xb4
 800481c:	2100      	movs	r1, #0
 800481e:	0018      	movs	r0, r3
 8004820:	f7ff ffa8 	bl	8004774 <constrain>
 8004824:	0003      	movs	r3, r0
 8004826:	8023      	strh	r3, [r4, #0]
    *(servo->out_channel) = (angle/18)+10;
 8004828:	1cbb      	adds	r3, r7, #2
 800482a:	2200      	movs	r2, #0
 800482c:	5e9b      	ldrsh	r3, [r3, r2]
 800482e:	2112      	movs	r1, #18
 8004830:	0018      	movs	r0, r3
 8004832:	f7fb fd19 	bl	8000268 <__divsi3>
 8004836:	0003      	movs	r3, r0
 8004838:	b21b      	sxth	r3, r3
 800483a:	330a      	adds	r3, #10
 800483c:	001a      	movs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	601a      	str	r2, [r3, #0]
}
 8004844:	46c0      	nop			; (mov r8, r8)
 8004846:	46bd      	mov	sp, r7
 8004848:	b003      	add	sp, #12
 800484a:	bd90      	pop	{r4, r7, pc}

0800484c <new_smbus>:
// EFFECTS: Returns a pointer to a created SMBus object
SMBus *new_smbus(
    I2C_HandleTypeDef *hi2c,
    UART_HandleTypeDef *huart,
    bool _dma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	1dfb      	adds	r3, r7, #7
 8004858:	701a      	strb	r2, [r3, #0]
    SMBus *smbus = malloc(sizeof(SMBus));
 800485a:	2028      	movs	r0, #40	; 0x28
 800485c:	f007 fc9a 	bl	800c194 <malloc>
 8004860:	0003      	movs	r3, r0
 8004862:	617b      	str	r3, [r7, #20]
    smbus->i2c = hi2c;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	601a      	str	r2, [r3, #0]
    smbus->uart = huart;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	605a      	str	r2, [r3, #4]
    smbus->ret = HAL_OK;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2200      	movs	r2, #0
 8004874:	721a      	strb	r2, [r3, #8]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	3309      	adds	r3, #9
 800487a:	221e      	movs	r2, #30
 800487c:	2100      	movs	r1, #0
 800487e:	0018      	movs	r0, r3
 8004880:	f007 fc9b 	bl	800c1ba <memset>
    smbus->DMA = _dma;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	1dfa      	adds	r2, r7, #7
 8004888:	2127      	movs	r1, #39	; 0x27
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	545a      	strb	r2, [r3, r1]
}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	0018      	movs	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	b006      	add	sp, #24
 8004896:	bd80      	pop	{r7, pc}

08004898 <new_spectral>:
// and uart is the debugging UART channel or NULL,
// and dma tells if DMA is enabled
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Spectral object
Spectral *new_spectral(SMBus *smbus)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
    Spectral *spectral = malloc(sizeof(Spectral));
 80048a0:	2010      	movs	r0, #16
 80048a2:	f007 fc77 	bl	800c194 <malloc>
 80048a6:	0003      	movs	r3, r0
 80048a8:	60bb      	str	r3, [r7, #8]
    spectral->smbus = smbus;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < SPECTRAL_CHANNELS; ++i) {
 80048b0:	230f      	movs	r3, #15
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
 80048b8:	e00d      	b.n	80048d6 <new_spectral+0x3e>
		spectral->channel_data[i] = 0;
 80048ba:	210f      	movs	r1, #15
 80048bc:	187b      	adds	r3, r7, r1
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	18d3      	adds	r3, r2, r3
 80048c6:	3304      	adds	r3, #4
 80048c8:	2200      	movs	r2, #0
 80048ca:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < SPECTRAL_CHANNELS; ++i) {
 80048cc:	187b      	adds	r3, r7, r1
 80048ce:	187a      	adds	r2, r7, r1
 80048d0:	7812      	ldrb	r2, [r2, #0]
 80048d2:	3201      	adds	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	230f      	movs	r3, #15
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b05      	cmp	r3, #5
 80048de:	d9ec      	bls.n	80048ba <new_spectral+0x22>
	}
    return spectral;
 80048e0:	68bb      	ldr	r3, [r7, #8]
}
 80048e2:	0018      	movs	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b004      	add	sp, #16
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f2:	4b12      	ldr	r3, [pc, #72]	; (800493c <HAL_MspInit+0x50>)
 80048f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048f6:	4b11      	ldr	r3, [pc, #68]	; (800493c <HAL_MspInit+0x50>)
 80048f8:	2101      	movs	r1, #1
 80048fa:	430a      	orrs	r2, r1
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <HAL_MspInit+0x50>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	2201      	movs	r2, #1
 8004904:	4013      	ands	r3, r2
 8004906:	607b      	str	r3, [r7, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800490a:	4b0c      	ldr	r3, [pc, #48]	; (800493c <HAL_MspInit+0x50>)
 800490c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800490e:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_MspInit+0x50>)
 8004910:	2180      	movs	r1, #128	; 0x80
 8004912:	0549      	lsls	r1, r1, #21
 8004914:	430a      	orrs	r2, r1
 8004916:	63da      	str	r2, [r3, #60]	; 0x3c
 8004918:	4b08      	ldr	r3, [pc, #32]	; (800493c <HAL_MspInit+0x50>)
 800491a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	055b      	lsls	r3, r3, #21
 8004920:	4013      	ands	r3, r2
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004926:	2302      	movs	r3, #2
 8004928:	425b      	negs	r3, r3
 800492a:	2200      	movs	r2, #0
 800492c:	2103      	movs	r1, #3
 800492e:	0018      	movs	r0, r3
 8004930:	f001 fa04 	bl	8005d3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	46bd      	mov	sp, r7
 8004938:	b002      	add	sp, #8
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000

08004940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b08b      	sub	sp, #44	; 0x2c
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004948:	2414      	movs	r4, #20
 800494a:	193b      	adds	r3, r7, r4
 800494c:	0018      	movs	r0, r3
 800494e:	2314      	movs	r3, #20
 8004950:	001a      	movs	r2, r3
 8004952:	2100      	movs	r1, #0
 8004954:	f007 fc31 	bl	800c1ba <memset>
  if(hadc->Instance==ADC1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3b      	ldr	r2, [pc, #236]	; (8004a4c <HAL_ADC_MspInit+0x10c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d16f      	bne.n	8004a42 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004962:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <HAL_ADC_MspInit+0x110>)
 8004964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004966:	4b3a      	ldr	r3, [pc, #232]	; (8004a50 <HAL_ADC_MspInit+0x110>)
 8004968:	2180      	movs	r1, #128	; 0x80
 800496a:	0349      	lsls	r1, r1, #13
 800496c:	430a      	orrs	r2, r1
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
 8004970:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <HAL_ADC_MspInit+0x110>)
 8004972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	035b      	lsls	r3, r3, #13
 8004978:	4013      	ands	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800497e:	4b34      	ldr	r3, [pc, #208]	; (8004a50 <HAL_ADC_MspInit+0x110>)
 8004980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004982:	4b33      	ldr	r3, [pc, #204]	; (8004a50 <HAL_ADC_MspInit+0x110>)
 8004984:	2101      	movs	r1, #1
 8004986:	430a      	orrs	r2, r1
 8004988:	635a      	str	r2, [r3, #52]	; 0x34
 800498a:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <HAL_ADC_MspInit+0x110>)
 800498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498e:	2201      	movs	r2, #1
 8004990:	4013      	ands	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004996:	4b2e      	ldr	r3, [pc, #184]	; (8004a50 <HAL_ADC_MspInit+0x110>)
 8004998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800499a:	4b2d      	ldr	r3, [pc, #180]	; (8004a50 <HAL_ADC_MspInit+0x110>)
 800499c:	2102      	movs	r1, #2
 800499e:	430a      	orrs	r2, r1
 80049a0:	635a      	str	r2, [r3, #52]	; 0x34
 80049a2:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_ADC_MspInit+0x110>)
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	2202      	movs	r2, #2
 80049a8:	4013      	ands	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80049ae:	193b      	adds	r3, r7, r4
 80049b0:	22ff      	movs	r2, #255	; 0xff
 80049b2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049b4:	193b      	adds	r3, r7, r4
 80049b6:	2203      	movs	r2, #3
 80049b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ba:	193b      	adds	r3, r7, r4
 80049bc:	2200      	movs	r2, #0
 80049be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c0:	193a      	adds	r2, r7, r4
 80049c2:	23a0      	movs	r3, #160	; 0xa0
 80049c4:	05db      	lsls	r3, r3, #23
 80049c6:	0011      	movs	r1, r2
 80049c8:	0018      	movs	r0, r3
 80049ca:	f001 fc7d 	bl	80062c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80049ce:	193b      	adds	r3, r7, r4
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049d4:	193b      	adds	r3, r7, r4
 80049d6:	2203      	movs	r2, #3
 80049d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049da:	193b      	adds	r3, r7, r4
 80049dc:	2200      	movs	r2, #0
 80049de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e0:	193b      	adds	r3, r7, r4
 80049e2:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <HAL_ADC_MspInit+0x114>)
 80049e4:	0019      	movs	r1, r3
 80049e6:	0010      	movs	r0, r2
 80049e8:	f001 fc6e 	bl	80062c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80049ec:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 80049ee:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <HAL_ADC_MspInit+0x11c>)
 80049f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80049f2:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 80049f4:	2205      	movs	r2, #5
 80049f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049f8:	4b17      	ldr	r3, [pc, #92]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049fe:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004a04:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 8004a06:	2280      	movs	r2, #128	; 0x80
 8004a08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a0a:	4b13      	ldr	r3, [pc, #76]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 8004a0c:	2280      	movs	r2, #128	; 0x80
 8004a0e:	0052      	lsls	r2, r2, #1
 8004a10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a12:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 8004a14:	2280      	movs	r2, #128	; 0x80
 8004a16:	00d2      	lsls	r2, r2, #3
 8004a18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004a1a:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004a20:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004a26:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f001 f9ad 	bl	8005d88 <HAL_DMA_Init>
 8004a2e:	1e03      	subs	r3, r0, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8004a32:	f7ff fe55 	bl	80046e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a07      	ldr	r2, [pc, #28]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 8004a3a:	651a      	str	r2, [r3, #80]	; 0x50
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <HAL_ADC_MspInit+0x118>)
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b00b      	add	sp, #44	; 0x2c
 8004a48:	bd90      	pop	{r4, r7, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	40012400 	.word	0x40012400
 8004a50:	40021000 	.word	0x40021000
 8004a54:	50000400 	.word	0x50000400
 8004a58:	20000260 	.word	0x20000260
 8004a5c:	40020008 	.word	0x40020008

08004a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b09d      	sub	sp, #116	; 0x74
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a68:	235c      	movs	r3, #92	; 0x5c
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	2314      	movs	r3, #20
 8004a70:	001a      	movs	r2, r3
 8004a72:	2100      	movs	r1, #0
 8004a74:	f007 fba1 	bl	800c1ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a78:	2410      	movs	r4, #16
 8004a7a:	193b      	adds	r3, r7, r4
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	234c      	movs	r3, #76	; 0x4c
 8004a80:	001a      	movs	r2, r3
 8004a82:	2100      	movs	r1, #0
 8004a84:	f007 fb99 	bl	800c1ba <memset>
  if(hi2c->Instance==I2C1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <HAL_I2C_MspInit+0xb8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d13d      	bne.n	8004b0e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004a92:	193b      	adds	r3, r7, r4
 8004a94:	2220      	movs	r2, #32
 8004a96:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004a98:	193b      	adds	r3, r7, r4
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a9e:	193b      	adds	r3, r7, r4
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f002 fc49 	bl	8007338 <HAL_RCCEx_PeriphCLKConfig>
 8004aa6:	1e03      	subs	r3, r0, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004aaa:	f7ff fe19 	bl	80046e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <HAL_I2C_MspInit+0xbc>)
 8004ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <HAL_I2C_MspInit+0xbc>)
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8004aba:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <HAL_I2C_MspInit+0xbc>)
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abe:	2202      	movs	r2, #2
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SPCETRAL_SCL_Pin|I2C1_SPECTRAL_SDA_Pin;
 8004ac6:	215c      	movs	r1, #92	; 0x5c
 8004ac8:	187b      	adds	r3, r7, r1
 8004aca:	22c0      	movs	r2, #192	; 0xc0
 8004acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	2212      	movs	r2, #18
 8004ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ada:	187b      	adds	r3, r7, r1
 8004adc:	2202      	movs	r2, #2
 8004ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	2206      	movs	r2, #6
 8004ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae6:	187b      	adds	r3, r7, r1
 8004ae8:	4a0d      	ldr	r2, [pc, #52]	; (8004b20 <HAL_I2C_MspInit+0xc0>)
 8004aea:	0019      	movs	r1, r3
 8004aec:	0010      	movs	r0, r2
 8004aee:	f001 fbeb 	bl	80062c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <HAL_I2C_MspInit+0xbc>)
 8004af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_I2C_MspInit+0xbc>)
 8004af8:	2180      	movs	r1, #128	; 0x80
 8004afa:	0389      	lsls	r1, r1, #14
 8004afc:	430a      	orrs	r2, r1
 8004afe:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_I2C_MspInit+0xbc>)
 8004b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	039b      	lsls	r3, r3, #14
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b01d      	add	sp, #116	; 0x74
 8004b14:	bd90      	pop	{r4, r7, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	40005400 	.word	0x40005400
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	50000400 	.word	0x50000400

08004b24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b097      	sub	sp, #92	; 0x5c
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b2c:	240c      	movs	r4, #12
 8004b2e:	193b      	adds	r3, r7, r4
 8004b30:	0018      	movs	r0, r3
 8004b32:	234c      	movs	r3, #76	; 0x4c
 8004b34:	001a      	movs	r2, r3
 8004b36:	2100      	movs	r1, #0
 8004b38:	f007 fb3f 	bl	800c1ba <memset>
  if(htim_pwm->Instance==TIM1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a11      	ldr	r2, [pc, #68]	; (8004b88 <HAL_TIM_PWM_MspInit+0x64>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d11c      	bne.n	8004b80 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004b46:	193b      	adds	r3, r7, r4
 8004b48:	2280      	movs	r2, #128	; 0x80
 8004b4a:	0392      	lsls	r2, r2, #14
 8004b4c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004b4e:	193b      	adds	r3, r7, r4
 8004b50:	2200      	movs	r2, #0
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b54:	193b      	adds	r3, r7, r4
 8004b56:	0018      	movs	r0, r3
 8004b58:	f002 fbee 	bl	8007338 <HAL_RCCEx_PeriphCLKConfig>
 8004b5c:	1e03      	subs	r3, r0, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8004b60:	f7ff fdbe 	bl	80046e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_TIM_PWM_MspInit+0x68>)
 8004b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b68:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <HAL_TIM_PWM_MspInit+0x68>)
 8004b6a:	2180      	movs	r1, #128	; 0x80
 8004b6c:	0109      	lsls	r1, r1, #4
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_TIM_PWM_MspInit+0x68>)
 8004b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b017      	add	sp, #92	; 0x5c
 8004b86:	bd90      	pop	{r4, r7, pc}
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40021000 	.word	0x40021000

08004b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b089      	sub	sp, #36	; 0x24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b98:	240c      	movs	r4, #12
 8004b9a:	193b      	adds	r3, r7, r4
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	2314      	movs	r3, #20
 8004ba0:	001a      	movs	r2, r3
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	f007 fb09 	bl	800c1ba <memset>
  if(htim->Instance==TIM1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <HAL_TIM_MspPostInit+0x70>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d122      	bne.n	8004bf8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bb2:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <HAL_TIM_MspPostInit+0x74>)
 8004bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <HAL_TIM_MspPostInit+0x74>)
 8004bb8:	2104      	movs	r1, #4
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8004bbe:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <HAL_TIM_MspPostInit+0x74>)
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	60bb      	str	r3, [r7, #8]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PC9     ------> TIM1_CH2
    PC10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = SERVO_0_Pin|SERVO_1_Pin|SERVO_2_Pin;
 8004bca:	193b      	adds	r3, r7, r4
 8004bcc:	22e0      	movs	r2, #224	; 0xe0
 8004bce:	00d2      	lsls	r2, r2, #3
 8004bd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd2:	0021      	movs	r1, r4
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bda:	187b      	adds	r3, r7, r1
 8004bdc:	2200      	movs	r2, #0
 8004bde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	2200      	movs	r2, #0
 8004be4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004be6:	187b      	adds	r3, r7, r1
 8004be8:	2202      	movs	r2, #2
 8004bea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bec:	187b      	adds	r3, r7, r1
 8004bee:	4a06      	ldr	r2, [pc, #24]	; (8004c08 <HAL_TIM_MspPostInit+0x78>)
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	0010      	movs	r0, r2
 8004bf4:	f001 fb68 	bl	80062c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b009      	add	sp, #36	; 0x24
 8004bfe:	bd90      	pop	{r4, r7, pc}
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40021000 	.word	0x40021000
 8004c08:	50000800 	.word	0x50000800

08004c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b09d      	sub	sp, #116	; 0x74
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c14:	235c      	movs	r3, #92	; 0x5c
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	0018      	movs	r0, r3
 8004c1a:	2314      	movs	r3, #20
 8004c1c:	001a      	movs	r2, r3
 8004c1e:	2100      	movs	r1, #0
 8004c20:	f007 facb 	bl	800c1ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c24:	2410      	movs	r4, #16
 8004c26:	193b      	adds	r3, r7, r4
 8004c28:	0018      	movs	r0, r3
 8004c2a:	234c      	movs	r3, #76	; 0x4c
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	2100      	movs	r1, #0
 8004c30:	f007 fac3 	bl	800c1ba <memset>
  if(huart->Instance==USART1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a45      	ldr	r2, [pc, #276]	; (8004d50 <HAL_UART_MspInit+0x144>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d000      	beq.n	8004c40 <HAL_UART_MspInit+0x34>
 8004c3e:	e082      	b.n	8004d46 <HAL_UART_MspInit+0x13a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c40:	193b      	adds	r3, r7, r4
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004c46:	193b      	adds	r3, r7, r4
 8004c48:	2200      	movs	r2, #0
 8004c4a:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c4c:	193b      	adds	r3, r7, r4
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f002 fb72 	bl	8007338 <HAL_RCCEx_PeriphCLKConfig>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004c58:	f7ff fd42 	bl	80046e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c5c:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <HAL_UART_MspInit+0x148>)
 8004c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c60:	4b3c      	ldr	r3, [pc, #240]	; (8004d54 <HAL_UART_MspInit+0x148>)
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	01c9      	lsls	r1, r1, #7
 8004c66:	430a      	orrs	r2, r1
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
 8004c6a:	4b3a      	ldr	r3, [pc, #232]	; (8004d54 <HAL_UART_MspInit+0x148>)
 8004c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	01db      	lsls	r3, r3, #7
 8004c72:	4013      	ands	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c78:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <HAL_UART_MspInit+0x148>)
 8004c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7c:	4b35      	ldr	r3, [pc, #212]	; (8004d54 <HAL_UART_MspInit+0x148>)
 8004c7e:	2101      	movs	r1, #1
 8004c80:	430a      	orrs	r2, r1
 8004c82:	635a      	str	r2, [r3, #52]	; 0x34
 8004c84:	4b33      	ldr	r3, [pc, #204]	; (8004d54 <HAL_UART_MspInit+0x148>)
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	2201      	movs	r2, #1
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8004c90:	215c      	movs	r1, #92	; 0x5c
 8004c92:	187b      	adds	r3, r7, r1
 8004c94:	2280      	movs	r2, #128	; 0x80
 8004c96:	0092      	lsls	r2, r2, #2
 8004c98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9a:	000c      	movs	r4, r1
 8004c9c:	193b      	adds	r3, r7, r4
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca2:	193b      	adds	r3, r7, r4
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ca8:	193b      	adds	r3, r7, r4
 8004caa:	2202      	movs	r2, #2
 8004cac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004cae:	193b      	adds	r3, r7, r4
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8004cb4:	193a      	adds	r2, r7, r4
 8004cb6:	23a0      	movs	r3, #160	; 0xa0
 8004cb8:	05db      	lsls	r3, r3, #23
 8004cba:	0011      	movs	r1, r2
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f001 fb03 	bl	80062c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_Pin;
 8004cc2:	0021      	movs	r1, r4
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	2280      	movs	r2, #128	; 0x80
 8004cc8:	00d2      	lsls	r2, r2, #3
 8004cca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ccc:	187b      	adds	r3, r7, r1
 8004cce:	2202      	movs	r2, #2
 8004cd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd2:	187b      	adds	r3, r7, r1
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd8:	187b      	adds	r3, r7, r1
 8004cda:	2200      	movs	r2, #0
 8004cdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004cde:	187b      	adds	r3, r7, r1
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8004ce4:	187a      	adds	r2, r7, r1
 8004ce6:	23a0      	movs	r3, #160	; 0xa0
 8004ce8:	05db      	lsls	r3, r3, #23
 8004cea:	0011      	movs	r1, r2
 8004cec:	0018      	movs	r0, r3
 8004cee:	f001 faeb 	bl	80062c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004cf2:	4b19      	ldr	r3, [pc, #100]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_UART_MspInit+0x150>)
 8004cf6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004cf8:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004cfa:	2232      	movs	r2, #50	; 0x32
 8004cfc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cfe:	4b16      	ldr	r3, [pc, #88]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d04:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004d0c:	2280      	movs	r2, #128	; 0x80
 8004d0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004d1e:	2220      	movs	r2, #32
 8004d20:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f001 f82c 	bl	8005d88 <HAL_DMA_Init>
 8004d30:	1e03      	subs	r3, r0, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8004d34:	f7ff fcd4 	bl	80046e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2180      	movs	r1, #128	; 0x80
 8004d3c:	4a06      	ldr	r2, [pc, #24]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004d3e:	505a      	str	r2, [r3, r1]
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <HAL_UART_MspInit+0x14c>)
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b01d      	add	sp, #116	; 0x74
 8004d4c:	bd90      	pop	{r4, r7, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	40013800 	.word	0x40013800
 8004d54:	40021000 	.word	0x40021000
 8004d58:	200003f4 	.word	0x200003f4
 8004d5c:	40020058 	.word	0x40020058

08004d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d60:	b5b0      	push	{r4, r5, r7, lr}
 8004d62:	b08c      	sub	sp, #48	; 0x30
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004d68:	232b      	movs	r3, #43	; 0x2b
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004d70:	4b37      	ldr	r3, [pc, #220]	; (8004e50 <HAL_InitTick+0xf0>)
 8004d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d74:	4b36      	ldr	r3, [pc, #216]	; (8004e50 <HAL_InitTick+0xf0>)
 8004d76:	2110      	movs	r1, #16
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d7c:	4b34      	ldr	r3, [pc, #208]	; (8004e50 <HAL_InitTick+0xf0>)
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	2210      	movs	r2, #16
 8004d82:	4013      	ands	r3, r2
 8004d84:	60bb      	str	r3, [r7, #8]
 8004d86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d88:	230c      	movs	r3, #12
 8004d8a:	18fa      	adds	r2, r7, r3
 8004d8c:	2410      	movs	r4, #16
 8004d8e:	193b      	adds	r3, r7, r4
 8004d90:	0011      	movs	r1, r2
 8004d92:	0018      	movs	r0, r3
 8004d94:	f002 faa6 	bl	80072e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004d98:	193b      	adds	r3, r7, r4
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d104      	bne.n	8004dae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004da4:	f002 fa88 	bl	80072b8 <HAL_RCC_GetPCLK1Freq>
 8004da8:	0003      	movs	r3, r0
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dac:	e004      	b.n	8004db8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004dae:	f002 fa83 	bl	80072b8 <HAL_RCC_GetPCLK1Freq>
 8004db2:	0003      	movs	r3, r0
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	4926      	ldr	r1, [pc, #152]	; (8004e54 <HAL_InitTick+0xf4>)
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7fb f9c9 	bl	8000154 <__udivsi3>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004dc8:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <HAL_InitTick+0xf8>)
 8004dca:	4a24      	ldr	r2, [pc, #144]	; (8004e5c <HAL_InitTick+0xfc>)
 8004dcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004dce:	4b22      	ldr	r3, [pc, #136]	; (8004e58 <HAL_InitTick+0xf8>)
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <HAL_InitTick+0x100>)
 8004dd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004dd4:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <HAL_InitTick+0xf8>)
 8004dd6:	6a3a      	ldr	r2, [r7, #32]
 8004dd8:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8004dda:	4b1f      	ldr	r3, [pc, #124]	; (8004e58 <HAL_InitTick+0xf8>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de0:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <HAL_InitTick+0xf8>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004de6:	4b1c      	ldr	r3, [pc, #112]	; (8004e58 <HAL_InitTick+0xf8>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004dec:	252b      	movs	r5, #43	; 0x2b
 8004dee:	197c      	adds	r4, r7, r5
 8004df0:	4b19      	ldr	r3, [pc, #100]	; (8004e58 <HAL_InitTick+0xf8>)
 8004df2:	0018      	movs	r0, r3
 8004df4:	f002 fcdc 	bl	80077b0 <HAL_TIM_Base_Init>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8004dfc:	197b      	adds	r3, r7, r5
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11e      	bne.n	8004e42 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004e04:	197c      	adds	r4, r7, r5
 8004e06:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <HAL_InitTick+0xf8>)
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f002 fd31 	bl	8007870 <HAL_TIM_Base_Start_IT>
 8004e0e:	0003      	movs	r3, r0
 8004e10:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8004e12:	197b      	adds	r3, r7, r5
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d113      	bne.n	8004e42 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8004e1a:	2011      	movs	r0, #17
 8004e1c:	f000 ffa3 	bl	8005d66 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d809      	bhi.n	8004e3a <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	0019      	movs	r1, r3
 8004e2c:	2011      	movs	r0, #17
 8004e2e:	f000 ff85 	bl	8005d3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e32:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <HAL_InitTick+0x104>)
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e003      	b.n	8004e42 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8004e3a:	232b      	movs	r3, #43	; 0x2b
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	2201      	movs	r2, #1
 8004e40:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8004e42:	232b      	movs	r3, #43	; 0x2b
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	781b      	ldrb	r3, [r3, #0]
}
 8004e48:	0018      	movs	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b00c      	add	sp, #48	; 0x30
 8004e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e50:	40021000 	.word	0x40021000
 8004e54:	000f4240 	.word	0x000f4240
 8004e58:	20000520 	.word	0x20000520
 8004e5c:	40001000 	.word	0x40001000
 8004e60:	000003e7 	.word	0x000003e7
 8004e64:	20000004 	.word	0x20000004

08004e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e6c:	e7fe      	b.n	8004e6c <NMI_Handler+0x4>

08004e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e72:	e7fe      	b.n	8004e72 <HardFault_Handler+0x4>

08004e74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <DMA1_Channel1_IRQHandler+0x14>)
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f001 f8b6 	bl	8005fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e80:	46c0      	nop			; (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	20000260 	.word	0x20000260

08004e8c <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x14>)
 8004e92:	0018      	movs	r0, r3
 8004e94:	f001 f8aa 	bl	8005fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	200003f4 	.word	0x200003f4

08004ea4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f002 fd9a 	bl	80079e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	20000520 	.word	0x20000520

08004ebc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  return 1;
 8004ec0:	2301      	movs	r3, #1
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <_kill>:

int _kill(int pid, int sig)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ed2:	f007 f935 	bl	800c140 <__errno>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	2216      	movs	r2, #22
 8004eda:	601a      	str	r2, [r3, #0]
  return -1;
 8004edc:	2301      	movs	r3, #1
 8004ede:	425b      	negs	r3, r3
}
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <_exit>:

void _exit (int status)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	425a      	negs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	0011      	movs	r1, r2
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7ff ffe5 	bl	8004ec8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004efe:	e7fe      	b.n	8004efe <_exit+0x16>

08004f00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e00a      	b.n	8004f28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f12:	e000      	b.n	8004f16 <_read+0x16>
 8004f14:	bf00      	nop
 8004f16:	0001      	movs	r1, r0
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	60ba      	str	r2, [r7, #8]
 8004f1e:	b2ca      	uxtb	r2, r1
 8004f20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	3301      	adds	r3, #1
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	dbf0      	blt.n	8004f12 <_read+0x12>
  }

  return len;
 8004f30:	687b      	ldr	r3, [r7, #4]
}
 8004f32:	0018      	movs	r0, r3
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b006      	add	sp, #24
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e009      	b.n	8004f60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	60ba      	str	r2, [r7, #8]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	0018      	movs	r0, r3
 8004f56:	e000      	b.n	8004f5a <_write+0x20>
 8004f58:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	dbf1      	blt.n	8004f4c <_write+0x12>
  }
  return len;
 8004f68:	687b      	ldr	r3, [r7, #4]
}
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b006      	add	sp, #24
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <_close>:

int _close(int file)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	425b      	negs	r3, r3
}
 8004f7e:	0018      	movs	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b002      	add	sp, #8
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	0192      	lsls	r2, r2, #6
 8004f96:	605a      	str	r2, [r3, #4]
  return 0;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	b002      	add	sp, #8
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <_isatty>:

int _isatty(int file)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004faa:	2301      	movs	r3, #1
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b002      	add	sp, #8
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b004      	add	sp, #16
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fd4:	4a14      	ldr	r2, [pc, #80]	; (8005028 <_sbrk+0x5c>)
 8004fd6:	4b15      	ldr	r3, [pc, #84]	; (800502c <_sbrk+0x60>)
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fe0:	4b13      	ldr	r3, [pc, #76]	; (8005030 <_sbrk+0x64>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <_sbrk+0x64>)
 8004fea:	4a12      	ldr	r2, [pc, #72]	; (8005034 <_sbrk+0x68>)
 8004fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004fee:	4b10      	ldr	r3, [pc, #64]	; (8005030 <_sbrk+0x64>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	18d3      	adds	r3, r2, r3
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d207      	bcs.n	800500c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ffc:	f007 f8a0 	bl	800c140 <__errno>
 8005000:	0003      	movs	r3, r0
 8005002:	220c      	movs	r2, #12
 8005004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005006:	2301      	movs	r3, #1
 8005008:	425b      	negs	r3, r3
 800500a:	e009      	b.n	8005020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800500c:	4b08      	ldr	r3, [pc, #32]	; (8005030 <_sbrk+0x64>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005012:	4b07      	ldr	r3, [pc, #28]	; (8005030 <_sbrk+0x64>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	18d2      	adds	r2, r2, r3
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <_sbrk+0x64>)
 800501c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800501e:	68fb      	ldr	r3, [r7, #12]
}
 8005020:	0018      	movs	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	b006      	add	sp, #24
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20024000 	.word	0x20024000
 800502c:	00000400 	.word	0x00000400
 8005030:	2000056c 	.word	0x2000056c
 8005034:	20001ed0 	.word	0x20001ed0

08005038 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800503c:	46c0      	nop			; (mov r8, r8)
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <new_thermistor>:

// REQUIRES: _adc_channel is the corresponding ADC channel and
// _adc_sensor is a pointer to an ADCSensor object
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Thermistor object
Thermistor *new_thermistor(ADCSensor* _adc_sensor, uint8_t _adc_channel) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	000a      	movs	r2, r1
 800504e:	1cfb      	adds	r3, r7, #3
 8005050:	701a      	strb	r2, [r3, #0]
    Thermistor* therms = (Thermistor*) malloc(sizeof(Thermistor));
 8005052:	200c      	movs	r0, #12
 8005054:	f007 f89e 	bl	800c194 <malloc>
 8005058:	0003      	movs	r3, r0
 800505a:	60fb      	str	r3, [r7, #12]
    therms->temperature = 100;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a07      	ldr	r2, [pc, #28]	; (800507c <new_thermistor+0x38>)
 8005060:	601a      	str	r2, [r3, #0]
    therms->adc_channel = _adc_channel;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1cfa      	adds	r2, r7, #3
 8005066:	7812      	ldrb	r2, [r2, #0]
 8005068:	711a      	strb	r2, [r3, #4]
    therms->adc_sensor = _adc_sensor;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	609a      	str	r2, [r3, #8]

    return therms;
 8005070:	68fb      	ldr	r3, [r7, #12]
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b004      	add	sp, #16
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	42c80000 	.word	0x42c80000

08005080 <update_thermistor_temperature>:

// REQUIRES: thermistor is a Thermistor object
// MODIFIES: temperature
// EFFECTS: Updates temperature of thermistor
void update_thermistor_temperature(Thermistor* therm) {
 8005080:	b5b0      	push	{r4, r5, r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
    uint16_t raw_data = get_adc_sensor_value(therm->adc_sensor, therm->adc_channel);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	791b      	ldrb	r3, [r3, #4]
 8005090:	251c      	movs	r5, #28
 8005092:	197c      	adds	r4, r7, r5
 8005094:	0019      	movs	r1, r3
 8005096:	0010      	movs	r0, r2
 8005098:	f7fe f912 	bl	80032c0 <get_adc_sensor_value>
 800509c:	0003      	movs	r3, r0
 800509e:	8023      	strh	r3, [r4, #0]

	// done to avoid sending infinity/nan
    raw_data = raw_data > 4094 ? 4094 : raw_data;
 80050a0:	197a      	adds	r2, r7, r5
 80050a2:	197b      	adds	r3, r7, r5
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b299      	uxth	r1, r3
 80050a8:	4870      	ldr	r0, [pc, #448]	; (800526c <update_thermistor_temperature+0x1ec>)
 80050aa:	4281      	cmp	r1, r0
 80050ac:	d900      	bls.n	80050b0 <update_thermistor_temperature+0x30>
 80050ae:	4b6f      	ldr	r3, [pc, #444]	; (800526c <update_thermistor_temperature+0x1ec>)
 80050b0:	8013      	strh	r3, [r2, #0]

    // Logic to get actual Voltage from 12 bit string
    // NOTE pretty sure it is 12 bit that's what HAL says in documentation, but could be wrong
    float volt_drop_across_thermistor = (raw_data * THERMISTOR_V_1) / 4095.0f; // 2^12 - 1= 4095 (12 bit string  )
 80050b2:	231c      	movs	r3, #28
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f7fc f95f 	bl	800137c <__aeabi_i2f>
 80050be:	1c03      	adds	r3, r0, #0
 80050c0:	496b      	ldr	r1, [pc, #428]	; (8005270 <update_thermistor_temperature+0x1f0>)
 80050c2:	1c18      	adds	r0, r3, #0
 80050c4:	f7fb fe86 	bl	8000dd4 <__aeabi_fmul>
 80050c8:	1c03      	adds	r3, r0, #0
 80050ca:	496a      	ldr	r1, [pc, #424]	; (8005274 <update_thermistor_temperature+0x1f4>)
 80050cc:	1c18      	adds	r0, r3, #0
 80050ce:	f7fb fcb9 	bl	8000a44 <__aeabi_fdiv>
 80050d2:	1c03      	adds	r3, r0, #0
 80050d4:	61bb      	str	r3, [r7, #24]
    // The Nucleo's measured voltage is equal to voltage drop across
    // the resistor.
    // Since current is same, the V=IR implies that volt_therm/resistance_therm =
    // volt_resistor/resistance_resistor.
    // Thus, resistance_therm = volt_therm * resistance_resistor / volt_resistor.
    float volt_drop_across_resistor = THERMISTOR_V_1 - volt_drop_across_thermistor;
 80050d6:	69b9      	ldr	r1, [r7, #24]
 80050d8:	4865      	ldr	r0, [pc, #404]	; (8005270 <update_thermistor_temperature+0x1f0>)
 80050da:	f7fb ffa1 	bl	8001020 <__aeabi_fsub>
 80050de:	1c03      	adds	r3, r0, #0
 80050e0:	617b      	str	r3, [r7, #20]
    float R_t = (THERMISTOR_RESISTOR_OHMS * volt_drop_across_thermistor) / (volt_drop_across_resistor);
 80050e2:	4965      	ldr	r1, [pc, #404]	; (8005278 <update_thermistor_temperature+0x1f8>)
 80050e4:	69b8      	ldr	r0, [r7, #24]
 80050e6:	f7fb fe75 	bl	8000dd4 <__aeabi_fmul>
 80050ea:	1c03      	adds	r3, r0, #0
 80050ec:	6979      	ldr	r1, [r7, #20]
 80050ee:	1c18      	adds	r0, r3, #0
 80050f0:	f7fb fca8 	bl	8000a44 <__aeabi_fdiv>
 80050f4:	1c03      	adds	r3, r0, #0
 80050f6:	613b      	str	r3, [r7, #16]

    uint8_t const_set = 0;
 80050f8:	241f      	movs	r4, #31
 80050fa:	193b      	adds	r3, r7, r4
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
    if (R_t < 692600.0f && R_t >= 32770.0f){
 8005100:	495e      	ldr	r1, [pc, #376]	; (800527c <update_thermistor_temperature+0x1fc>)
 8005102:	6938      	ldr	r0, [r7, #16]
 8005104:	f7fb f9ec 	bl	80004e0 <__aeabi_fcmplt>
 8005108:	1e03      	subs	r3, r0, #0
 800510a:	d009      	beq.n	8005120 <update_thermistor_temperature+0xa0>
 800510c:	495c      	ldr	r1, [pc, #368]	; (8005280 <update_thermistor_temperature+0x200>)
 800510e:	6938      	ldr	r0, [r7, #16]
 8005110:	f7fb fa04 	bl	800051c <__aeabi_fcmpge>
 8005114:	1e03      	subs	r3, r0, #0
 8005116:	d003      	beq.n	8005120 <update_thermistor_temperature+0xa0>
        const_set = 0;
 8005118:	193b      	adds	r3, r7, r4
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e033      	b.n	8005188 <update_thermistor_temperature+0x108>
    } else if (R_t < 32770.0f && R_t >= 3599.0f){
 8005120:	4957      	ldr	r1, [pc, #348]	; (8005280 <update_thermistor_temperature+0x200>)
 8005122:	6938      	ldr	r0, [r7, #16]
 8005124:	f7fb f9dc 	bl	80004e0 <__aeabi_fcmplt>
 8005128:	1e03      	subs	r3, r0, #0
 800512a:	d00a      	beq.n	8005142 <update_thermistor_temperature+0xc2>
 800512c:	4955      	ldr	r1, [pc, #340]	; (8005284 <update_thermistor_temperature+0x204>)
 800512e:	6938      	ldr	r0, [r7, #16]
 8005130:	f7fb f9f4 	bl	800051c <__aeabi_fcmpge>
 8005134:	1e03      	subs	r3, r0, #0
 8005136:	d004      	beq.n	8005142 <update_thermistor_temperature+0xc2>
        const_set = 1;
 8005138:	231f      	movs	r3, #31
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e022      	b.n	8005188 <update_thermistor_temperature+0x108>
    } else if (R_t < 3599.0f && R_t >= 681.6f){
 8005142:	4950      	ldr	r1, [pc, #320]	; (8005284 <update_thermistor_temperature+0x204>)
 8005144:	6938      	ldr	r0, [r7, #16]
 8005146:	f7fb f9cb 	bl	80004e0 <__aeabi_fcmplt>
 800514a:	1e03      	subs	r3, r0, #0
 800514c:	d00a      	beq.n	8005164 <update_thermistor_temperature+0xe4>
 800514e:	494e      	ldr	r1, [pc, #312]	; (8005288 <update_thermistor_temperature+0x208>)
 8005150:	6938      	ldr	r0, [r7, #16]
 8005152:	f7fb f9e3 	bl	800051c <__aeabi_fcmpge>
 8005156:	1e03      	subs	r3, r0, #0
 8005158:	d004      	beq.n	8005164 <update_thermistor_temperature+0xe4>
        const_set = 2;
 800515a:	231f      	movs	r3, #31
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	2202      	movs	r2, #2
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	e011      	b.n	8005188 <update_thermistor_temperature+0x108>
    } else if (R_t < 681.6f && R_t >= 187.0f){
 8005164:	4948      	ldr	r1, [pc, #288]	; (8005288 <update_thermistor_temperature+0x208>)
 8005166:	6938      	ldr	r0, [r7, #16]
 8005168:	f7fb f9ba 	bl	80004e0 <__aeabi_fcmplt>
 800516c:	1e03      	subs	r3, r0, #0
 800516e:	d100      	bne.n	8005172 <update_thermistor_temperature+0xf2>
        const_set = 3;
    } else {
        // Error out cause OOB temp
    	return;
 8005170:	e079      	b.n	8005266 <update_thermistor_temperature+0x1e6>
    } else if (R_t < 681.6f && R_t >= 187.0f){
 8005172:	4946      	ldr	r1, [pc, #280]	; (800528c <update_thermistor_temperature+0x20c>)
 8005174:	6938      	ldr	r0, [r7, #16]
 8005176:	f7fb f9d1 	bl	800051c <__aeabi_fcmpge>
 800517a:	1e03      	subs	r3, r0, #0
 800517c:	d100      	bne.n	8005180 <update_thermistor_temperature+0x100>
    	return;
 800517e:	e072      	b.n	8005266 <update_thermistor_temperature+0x1e6>
        const_set = 3;
 8005180:	231f      	movs	r3, #31
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	2203      	movs	r2, #3
 8005186:	701a      	strb	r2, [r3, #0]
    }
    float lnR_t_over_R_25 = log(R_t / THERMISTOR_R_25);
 8005188:	493b      	ldr	r1, [pc, #236]	; (8005278 <update_thermistor_temperature+0x1f8>)
 800518a:	6938      	ldr	r0, [r7, #16]
 800518c:	f7fb fc5a 	bl	8000a44 <__aeabi_fdiv>
 8005190:	1c03      	adds	r3, r0, #0
 8005192:	1c18      	adds	r0, r3, #0
 8005194:	f7fd ff68 	bl	8003068 <__aeabi_f2d>
 8005198:	0002      	movs	r2, r0
 800519a:	000b      	movs	r3, r1
 800519c:	0010      	movs	r0, r2
 800519e:	0019      	movs	r1, r3
 80051a0:	f00a f8ae 	bl	800f300 <log>
 80051a4:	0002      	movs	r2, r0
 80051a6:	000b      	movs	r3, r1
 80051a8:	0010      	movs	r0, r2
 80051aa:	0019      	movs	r1, r3
 80051ac:	f7fd ffa4 	bl	80030f8 <__aeabi_d2f>
 80051b0:	1c03      	adds	r3, r0, #0
 80051b2:	60fb      	str	r3, [r7, #12]

    float one_over_T = constant_array[const_set][0] + (constant_array[const_set][1] * lnR_t_over_R_25)
 80051b4:	251f      	movs	r5, #31
 80051b6:	197b      	adds	r3, r7, r5
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	4b35      	ldr	r3, [pc, #212]	; (8005290 <update_thermistor_temperature+0x210>)
 80051bc:	0112      	lsls	r2, r2, #4
 80051be:	58d4      	ldr	r4, [r2, r3]
 80051c0:	197b      	adds	r3, r7, r5
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	4a32      	ldr	r2, [pc, #200]	; (8005290 <update_thermistor_temperature+0x210>)
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	18d3      	adds	r3, r2, r3
 80051ca:	3304      	adds	r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	1c18      	adds	r0, r3, #0
 80051d2:	f7fb fdff 	bl	8000dd4 <__aeabi_fmul>
 80051d6:	1c03      	adds	r3, r0, #0
 80051d8:	1c19      	adds	r1, r3, #0
 80051da:	1c20      	adds	r0, r4, #0
 80051dc:	f7fb fa94 	bl	8000708 <__aeabi_fadd>
 80051e0:	1c03      	adds	r3, r0, #0
 80051e2:	1c1c      	adds	r4, r3, #0
                     + (constant_array[const_set][2] * lnR_t_over_R_25 * lnR_t_over_R_25)
 80051e4:	197b      	adds	r3, r7, r5
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	4a29      	ldr	r2, [pc, #164]	; (8005290 <update_thermistor_temperature+0x210>)
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	18d3      	adds	r3, r2, r3
 80051ee:	3308      	adds	r3, #8
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	1c18      	adds	r0, r3, #0
 80051f6:	f7fb fded 	bl	8000dd4 <__aeabi_fmul>
 80051fa:	1c03      	adds	r3, r0, #0
 80051fc:	68f9      	ldr	r1, [r7, #12]
 80051fe:	1c18      	adds	r0, r3, #0
 8005200:	f7fb fde8 	bl	8000dd4 <__aeabi_fmul>
 8005204:	1c03      	adds	r3, r0, #0
 8005206:	1c19      	adds	r1, r3, #0
 8005208:	1c20      	adds	r0, r4, #0
 800520a:	f7fb fa7d 	bl	8000708 <__aeabi_fadd>
 800520e:	1c03      	adds	r3, r0, #0
 8005210:	1c1c      	adds	r4, r3, #0
                     + (constant_array[const_set][3] * lnR_t_over_R_25 * lnR_t_over_R_25 * lnR_t_over_R_25);
 8005212:	197b      	adds	r3, r7, r5
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <update_thermistor_temperature+0x210>)
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	18d3      	adds	r3, r2, r3
 800521c:	330c      	adds	r3, #12
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68f9      	ldr	r1, [r7, #12]
 8005222:	1c18      	adds	r0, r3, #0
 8005224:	f7fb fdd6 	bl	8000dd4 <__aeabi_fmul>
 8005228:	1c03      	adds	r3, r0, #0
 800522a:	68f9      	ldr	r1, [r7, #12]
 800522c:	1c18      	adds	r0, r3, #0
 800522e:	f7fb fdd1 	bl	8000dd4 <__aeabi_fmul>
 8005232:	1c03      	adds	r3, r0, #0
 8005234:	68f9      	ldr	r1, [r7, #12]
 8005236:	1c18      	adds	r0, r3, #0
 8005238:	f7fb fdcc 	bl	8000dd4 <__aeabi_fmul>
 800523c:	1c03      	adds	r3, r0, #0
    float one_over_T = constant_array[const_set][0] + (constant_array[const_set][1] * lnR_t_over_R_25)
 800523e:	1c19      	adds	r1, r3, #0
 8005240:	1c20      	adds	r0, r4, #0
 8005242:	f7fb fa61 	bl	8000708 <__aeabi_fadd>
 8005246:	1c03      	adds	r3, r0, #0
 8005248:	60bb      	str	r3, [r7, #8]
    therm->temperature = (1 / one_over_T) - 273.15f;
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	20fe      	movs	r0, #254	; 0xfe
 800524e:	0580      	lsls	r0, r0, #22
 8005250:	f7fb fbf8 	bl	8000a44 <__aeabi_fdiv>
 8005254:	1c03      	adds	r3, r0, #0
 8005256:	490f      	ldr	r1, [pc, #60]	; (8005294 <update_thermistor_temperature+0x214>)
 8005258:	1c18      	adds	r0, r3, #0
 800525a:	f7fb fee1 	bl	8001020 <__aeabi_fsub>
 800525e:	1c03      	adds	r3, r0, #0
 8005260:	1c1a      	adds	r2, r3, #0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	601a      	str	r2, [r3, #0]
}
 8005266:	46bd      	mov	sp, r7
 8005268:	b008      	add	sp, #32
 800526a:	bdb0      	pop	{r4, r5, r7, pc}
 800526c:	00000ffe 	.word	0x00000ffe
 8005270:	40533333 	.word	0x40533333
 8005274:	457ff000 	.word	0x457ff000
 8005278:	461c4000 	.word	0x461c4000
 800527c:	49291780 	.word	0x49291780
 8005280:	47000200 	.word	0x47000200
 8005284:	4560f000 	.word	0x4560f000
 8005288:	442a6666 	.word	0x442a6666
 800528c:	433b0000 	.word	0x433b0000
 8005290:	0800f9bc 	.word	0x0800f9bc
 8005294:	43889333 	.word	0x43889333

08005298 <get_thermistor_temperature>:

// REQUIRES: thermistor is a Thermistor object
// MODIFIES: nothing
// EFFECTS: Get temperature of thermistor in degrees Celsius
float get_thermistor_temperature(Thermistor* therm) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	return therm->temperature;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
}
 80052a4:	1c18      	adds	r0, r3, #0
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b002      	add	sp, #8
 80052aa:	bd80      	pop	{r7, pc}

080052ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052ac:	480d      	ldr	r0, [pc, #52]	; (80052e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80052b0:	f7ff fec2 	bl	8005038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052b4:	480c      	ldr	r0, [pc, #48]	; (80052e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80052b6:	490d      	ldr	r1, [pc, #52]	; (80052ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80052b8:	4a0d      	ldr	r2, [pc, #52]	; (80052f0 <LoopForever+0xe>)
  movs r3, #0
 80052ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052bc:	e002      	b.n	80052c4 <LoopCopyDataInit>

080052be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052c2:	3304      	adds	r3, #4

080052c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052c8:	d3f9      	bcc.n	80052be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052ca:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052cc:	4c0a      	ldr	r4, [pc, #40]	; (80052f8 <LoopForever+0x16>)
  movs r3, #0
 80052ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052d0:	e001      	b.n	80052d6 <LoopFillZerobss>

080052d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052d4:	3204      	adds	r2, #4

080052d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052d8:	d3fb      	bcc.n	80052d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80052da:	f006 ff37 	bl	800c14c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80052de:	f7fe fc5f 	bl	8003ba0 <main>

080052e2 <LoopForever>:

LoopForever:
  b LoopForever
 80052e2:	e7fe      	b.n	80052e2 <LoopForever>
  ldr   r0, =_estack
 80052e4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80052e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052ec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80052f0:	0800feec 	.word	0x0800feec
  ldr r2, =_sbss
 80052f4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80052f8:	20001ecc 	.word	0x20001ecc

080052fc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80052fc:	e7fe      	b.n	80052fc <ADC1_COMP_IRQHandler>
	...

08005300 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005306:	1dfb      	adds	r3, r7, #7
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <HAL_Init+0x3c>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <HAL_Init+0x3c>)
 8005312:	2180      	movs	r1, #128	; 0x80
 8005314:	0049      	lsls	r1, r1, #1
 8005316:	430a      	orrs	r2, r1
 8005318:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800531a:	2003      	movs	r0, #3
 800531c:	f7ff fd20 	bl	8004d60 <HAL_InitTick>
 8005320:	1e03      	subs	r3, r0, #0
 8005322:	d003      	beq.n	800532c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005324:	1dfb      	adds	r3, r7, #7
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	e001      	b.n	8005330 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800532c:	f7ff fade 	bl	80048ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005330:	1dfb      	adds	r3, r7, #7
 8005332:	781b      	ldrb	r3, [r3, #0]
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b002      	add	sp, #8
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40022000 	.word	0x40022000

08005340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_IncTick+0x1c>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	001a      	movs	r2, r3
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <HAL_IncTick+0x20>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	18d2      	adds	r2, r2, r3
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <HAL_IncTick+0x20>)
 8005352:	601a      	str	r2, [r3, #0]
}
 8005354:	46c0      	nop			; (mov r8, r8)
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	20000008 	.word	0x20000008
 8005360:	20000570 	.word	0x20000570

08005364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  return uwTick;
 8005368:	4b02      	ldr	r3, [pc, #8]	; (8005374 <HAL_GetTick+0x10>)
 800536a:	681b      	ldr	r3, [r3, #0]
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	20000570 	.word	0x20000570

08005378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005380:	f7ff fff0 	bl	8005364 <HAL_GetTick>
 8005384:	0003      	movs	r3, r0
 8005386:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3301      	adds	r3, #1
 8005390:	d005      	beq.n	800539e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <HAL_Delay+0x44>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	001a      	movs	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	189b      	adds	r3, r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	f7ff ffe0 	bl	8005364 <HAL_GetTick>
 80053a4:	0002      	movs	r2, r0
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d8f7      	bhi.n	80053a0 <HAL_Delay+0x28>
  {
  }
}
 80053b0:	46c0      	nop			; (mov r8, r8)
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b004      	add	sp, #16
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	20000008 	.word	0x20000008

080053c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	23e0      	movs	r3, #224	; 0xe0
 80053ce:	045b      	lsls	r3, r3, #17
 80053d0:	4013      	ands	r3, r2
}
 80053d2:	0018      	movs	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b002      	add	sp, #8
 80053d8:	bd80      	pop	{r7, pc}

080053da <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	2104      	movs	r1, #4
 80053ee:	400a      	ands	r2, r1
 80053f0:	2107      	movs	r1, #7
 80053f2:	4091      	lsls	r1, r2
 80053f4:	000a      	movs	r2, r1
 80053f6:	43d2      	mvns	r2, r2
 80053f8:	401a      	ands	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2104      	movs	r1, #4
 80053fe:	400b      	ands	r3, r1
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4099      	lsls	r1, r3
 8005404:	000b      	movs	r3, r1
 8005406:	431a      	orrs	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800540c:	46c0      	nop			; (mov r8, r8)
 800540e:	46bd      	mov	sp, r7
 8005410:	b004      	add	sp, #16
 8005412:	bd80      	pop	{r7, pc}

08005414 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	2104      	movs	r1, #4
 8005426:	400a      	ands	r2, r1
 8005428:	2107      	movs	r1, #7
 800542a:	4091      	lsls	r1, r2
 800542c:	000a      	movs	r2, r1
 800542e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2104      	movs	r1, #4
 8005434:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005436:	40da      	lsrs	r2, r3
 8005438:	0013      	movs	r3, r2
}
 800543a:	0018      	movs	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	b002      	add	sp, #8
 8005440:	bd80      	pop	{r7, pc}

08005442 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	23c0      	movs	r3, #192	; 0xc0
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	4013      	ands	r3, r2
 8005454:	d101      	bne.n	800545a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800545a:	2300      	movs	r3, #0
}
 800545c:	0018      	movs	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	b002      	add	sp, #8
 8005462:	bd80      	pop	{r7, pc}

08005464 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	4a05      	ldr	r2, [pc, #20]	; (8005488 <LL_ADC_EnableInternalRegulator+0x24>)
 8005472:	4013      	ands	r3, r2
 8005474:	2280      	movs	r2, #128	; 0x80
 8005476:	0552      	lsls	r2, r2, #21
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	46bd      	mov	sp, r7
 8005482:	b002      	add	sp, #8
 8005484:	bd80      	pop	{r7, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	6fffffe8 	.word	0x6fffffe8

0800548c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	055b      	lsls	r3, r3, #21
 800549c:	401a      	ands	r2, r3
 800549e:	2380      	movs	r3, #128	; 0x80
 80054a0:	055b      	lsls	r3, r3, #21
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d101      	bne.n	80054aa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	0018      	movs	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b002      	add	sp, #8
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <LL_ADC_Enable+0x20>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	2201      	movs	r2, #1
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80054cc:	46c0      	nop			; (mov r8, r8)
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b002      	add	sp, #8
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	7fffffe8 	.word	0x7fffffe8

080054d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4a04      	ldr	r2, [pc, #16]	; (80054f8 <LL_ADC_Disable+0x20>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	2202      	movs	r2, #2
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80054f0:	46c0      	nop			; (mov r8, r8)
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b002      	add	sp, #8
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	7fffffe8 	.word	0x7fffffe8

080054fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2201      	movs	r2, #1
 800550a:	4013      	ands	r3, r2
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <LL_ADC_IsEnabled+0x18>
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <LL_ADC_IsEnabled+0x1a>
 8005514:	2300      	movs	r3, #0
}
 8005516:	0018      	movs	r0, r3
 8005518:	46bd      	mov	sp, r7
 800551a:	b002      	add	sp, #8
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4a04      	ldr	r2, [pc, #16]	; (8005540 <LL_ADC_REG_StartConversion+0x20>)
 800552e:	4013      	ands	r3, r2
 8005530:	2204      	movs	r2, #4
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	46bd      	mov	sp, r7
 800553c:	b002      	add	sp, #8
 800553e:	bd80      	pop	{r7, pc}
 8005540:	7fffffe8 	.word	0x7fffffe8

08005544 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2204      	movs	r2, #4
 8005552:	4013      	ands	r3, r2
 8005554:	2b04      	cmp	r3, #4
 8005556:	d101      	bne.n	800555c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800555c:	2300      	movs	r3, #0
}
 800555e:	0018      	movs	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	b002      	add	sp, #8
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005570:	231f      	movs	r3, #31
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005578:	2300      	movs	r3, #0
 800557a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e17f      	b.n	800588e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	0018      	movs	r0, r3
 800559a:	f7ff f9d1 	bl	8004940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2254      	movs	r2, #84	; 0x54
 80055a8:	2100      	movs	r1, #0
 80055aa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7ff ff6b 	bl	800548c <LL_ADC_IsInternalRegulatorEnabled>
 80055b6:	1e03      	subs	r3, r0, #0
 80055b8:	d115      	bne.n	80055e6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	0018      	movs	r0, r3
 80055c0:	f7ff ff50 	bl	8005464 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055c4:	4bb4      	ldr	r3, [pc, #720]	; (8005898 <HAL_ADC_Init+0x330>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	49b4      	ldr	r1, [pc, #720]	; (800589c <HAL_ADC_Init+0x334>)
 80055ca:	0018      	movs	r0, r3
 80055cc:	f7fa fdc2 	bl	8000154 <__udivsi3>
 80055d0:	0003      	movs	r3, r0
 80055d2:	3301      	adds	r3, #1
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80055d8:	e002      	b.n	80055e0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3b01      	subs	r3, #1
 80055de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f9      	bne.n	80055da <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	0018      	movs	r0, r3
 80055ec:	f7ff ff4e 	bl	800548c <LL_ADC_IsInternalRegulatorEnabled>
 80055f0:	1e03      	subs	r3, r0, #0
 80055f2:	d10f      	bne.n	8005614 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f8:	2210      	movs	r2, #16
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005604:	2201      	movs	r2, #1
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800560c:	231f      	movs	r3, #31
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	0018      	movs	r0, r3
 800561a:	f7ff ff93 	bl	8005544 <LL_ADC_REG_IsConversionOngoing>
 800561e:	0003      	movs	r3, r0
 8005620:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005626:	2210      	movs	r2, #16
 8005628:	4013      	ands	r3, r2
 800562a:	d000      	beq.n	800562e <HAL_ADC_Init+0xc6>
 800562c:	e122      	b.n	8005874 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d000      	beq.n	8005636 <HAL_ADC_Init+0xce>
 8005634:	e11e      	b.n	8005874 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	4a99      	ldr	r2, [pc, #612]	; (80058a0 <HAL_ADC_Init+0x338>)
 800563c:	4013      	ands	r3, r2
 800563e:	2202      	movs	r2, #2
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	0018      	movs	r0, r3
 800564c:	f7ff ff56 	bl	80054fc <LL_ADC_IsEnabled>
 8005650:	1e03      	subs	r3, r0, #0
 8005652:	d000      	beq.n	8005656 <HAL_ADC_Init+0xee>
 8005654:	e0ad      	b.n	80057b2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	7e1b      	ldrb	r3, [r3, #24]
 800565e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005660:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	7e5b      	ldrb	r3, [r3, #25]
 8005666:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005668:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	7e9b      	ldrb	r3, [r3, #26]
 800566e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005670:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_ADC_Init+0x118>
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	015b      	lsls	r3, r3, #5
 800567e:	e000      	b.n	8005682 <HAL_ADC_Init+0x11a>
 8005680:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005682:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005688:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	da04      	bge.n	800569c <HAL_ADC_Init+0x134>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	e001      	b.n	80056a0 <HAL_ADC_Init+0x138>
 800569c:	2380      	movs	r3, #128	; 0x80
 800569e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80056a0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	212c      	movs	r1, #44	; 0x2c
 80056a6:	5c5b      	ldrb	r3, [r3, r1]
 80056a8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80056aa:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	5c9b      	ldrb	r3, [r3, r2]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d115      	bne.n	80056e8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7e9b      	ldrb	r3, [r3, #26]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2280      	movs	r2, #128	; 0x80
 80056c8:	0252      	lsls	r2, r2, #9
 80056ca:	4313      	orrs	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	e00b      	b.n	80056e8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d4:	2220      	movs	r2, #32
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e0:	2201      	movs	r2, #1
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056f4:	23e0      	movs	r3, #224	; 0xe0
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80056fe:	4313      	orrs	r3, r2
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4a65      	ldr	r2, [pc, #404]	; (80058a4 <HAL_ADC_Init+0x33c>)
 800570e:	4013      	ands	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	430a      	orrs	r2, r1
 800571a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	0f9b      	lsrs	r3, r3, #30
 8005722:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005728:	4313      	orrs	r3, r2
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	223c      	movs	r2, #60	; 0x3c
 8005734:	5c9b      	ldrb	r3, [r3, r2]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d111      	bne.n	800575e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	0f9b      	lsrs	r3, r3, #30
 8005740:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005746:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800574c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005752:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	2201      	movs	r2, #1
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	4a50      	ldr	r2, [pc, #320]	; (80058a8 <HAL_ADC_Init+0x340>)
 8005766:	4013      	ands	r3, r2
 8005768:	0019      	movs	r1, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	430a      	orrs	r2, r1
 8005772:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	23c0      	movs	r3, #192	; 0xc0
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	429a      	cmp	r2, r3
 800577e:	d018      	beq.n	80057b2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	05db      	lsls	r3, r3, #23
 8005788:	429a      	cmp	r2, r3
 800578a:	d012      	beq.n	80057b2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	061b      	lsls	r3, r3, #24
 8005794:	429a      	cmp	r2, r3
 8005796:	d00c      	beq.n	80057b2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005798:	4b44      	ldr	r3, [pc, #272]	; (80058ac <HAL_ADC_Init+0x344>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a44      	ldr	r2, [pc, #272]	; (80058b0 <HAL_ADC_Init+0x348>)
 800579e:	4013      	ands	r3, r2
 80057a0:	0019      	movs	r1, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	23f0      	movs	r3, #240	; 0xf0
 80057a8:	039b      	lsls	r3, r3, #14
 80057aa:	401a      	ands	r2, r3
 80057ac:	4b3f      	ldr	r3, [pc, #252]	; (80058ac <HAL_ADC_Init+0x344>)
 80057ae:	430a      	orrs	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	001a      	movs	r2, r3
 80057bc:	2100      	movs	r1, #0
 80057be:	f7ff fe0c 	bl	80053da <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	493a      	ldr	r1, [pc, #232]	; (80058b4 <HAL_ADC_Init+0x34c>)
 80057cc:	001a      	movs	r2, r3
 80057ce:	f7ff fe04 	bl	80053da <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2110      	movs	r1, #16
 80057e6:	4249      	negs	r1, r1
 80057e8:	430a      	orrs	r2, r1
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28
 80057ec:	e018      	b.n	8005820 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	2380      	movs	r3, #128	; 0x80
 80057f4:	039b      	lsls	r3, r3, #14
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d112      	bne.n	8005820 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	3b01      	subs	r3, #1
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	221c      	movs	r2, #28
 800580a:	4013      	ands	r3, r2
 800580c:	2210      	movs	r2, #16
 800580e:	4252      	negs	r2, r2
 8005810:	409a      	lsls	r2, r3
 8005812:	0011      	movs	r1, r2
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2100      	movs	r1, #0
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fdf4 	bl	8005414 <LL_ADC_GetSamplingTimeCommonChannels>
 800582c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005832:	429a      	cmp	r2, r3
 8005834:	d10b      	bne.n	800584e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005840:	2203      	movs	r2, #3
 8005842:	4393      	bics	r3, r2
 8005844:	2201      	movs	r2, #1
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800584c:	e01c      	b.n	8005888 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	2212      	movs	r2, #18
 8005854:	4393      	bics	r3, r2
 8005856:	2210      	movs	r2, #16
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005862:	2201      	movs	r2, #1
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800586a:	231f      	movs	r3, #31
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005872:	e009      	b.n	8005888 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005878:	2210      	movs	r2, #16
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005880:	231f      	movs	r3, #31
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	2201      	movs	r2, #1
 8005886:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005888:	231f      	movs	r3, #31
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	781b      	ldrb	r3, [r3, #0]
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b008      	add	sp, #32
 8005894:	bd80      	pop	{r7, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	20000000 	.word	0x20000000
 800589c:	00030d40 	.word	0x00030d40
 80058a0:	fffffefd 	.word	0xfffffefd
 80058a4:	fffe0201 	.word	0xfffe0201
 80058a8:	1ffffc02 	.word	0x1ffffc02
 80058ac:	40012708 	.word	0x40012708
 80058b0:	ffc3ffff 	.word	0xffc3ffff
 80058b4:	07ffff04 	.word	0x07ffff04

080058b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80058b8:	b5b0      	push	{r4, r5, r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff fe3b 	bl	8005544 <LL_ADC_REG_IsConversionOngoing>
 80058ce:	1e03      	subs	r3, r0, #0
 80058d0:	d16c      	bne.n	80059ac <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2254      	movs	r2, #84	; 0x54
 80058d6:	5c9b      	ldrb	r3, [r3, r2]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_ADC_Start_DMA+0x28>
 80058dc:	2302      	movs	r3, #2
 80058de:	e06c      	b.n	80059ba <HAL_ADC_Start_DMA+0x102>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2254      	movs	r2, #84	; 0x54
 80058e4:	2101      	movs	r1, #1
 80058e6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	4013      	ands	r3, r2
 80058f2:	d113      	bne.n	800591c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f7ff fdff 	bl	80054fc <LL_ADC_IsEnabled>
 80058fe:	1e03      	subs	r3, r0, #0
 8005900:	d004      	beq.n	800590c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	0018      	movs	r0, r3
 8005908:	f7ff fde6 	bl	80054d8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2101      	movs	r1, #1
 8005918:	430a      	orrs	r2, r1
 800591a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800591c:	2517      	movs	r5, #23
 800591e:	197c      	adds	r4, r7, r5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	0018      	movs	r0, r3
 8005924:	f000 f86e 	bl	8005a04 <ADC_Enable>
 8005928:	0003      	movs	r3, r0
 800592a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800592c:	002c      	movs	r4, r5
 800592e:	193b      	adds	r3, r7, r4
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d13e      	bne.n	80059b4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	4a22      	ldr	r2, [pc, #136]	; (80059c4 <HAL_ADC_Start_DMA+0x10c>)
 800593c:	4013      	ands	r3, r2
 800593e:	2280      	movs	r2, #128	; 0x80
 8005940:	0052      	lsls	r2, r2, #1
 8005942:	431a      	orrs	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005952:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <HAL_ADC_Start_DMA+0x110>)
 8005954:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595a:	4a1c      	ldr	r2, [pc, #112]	; (80059cc <HAL_ADC_Start_DMA+0x114>)
 800595c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005962:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <HAL_ADC_Start_DMA+0x118>)
 8005964:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	221c      	movs	r2, #28
 800596c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2254      	movs	r2, #84	; 0x54
 8005972:	2100      	movs	r1, #0
 8005974:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2110      	movs	r1, #16
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3340      	adds	r3, #64	; 0x40
 8005990:	0019      	movs	r1, r3
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	193c      	adds	r4, r7, r4
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f000 faa2 	bl	8005ee0 <HAL_DMA_Start_IT>
 800599c:	0003      	movs	r3, r0
 800599e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	0018      	movs	r0, r3
 80059a6:	f7ff fdbb 	bl	8005520 <LL_ADC_REG_StartConversion>
 80059aa:	e003      	b.n	80059b4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80059ac:	2317      	movs	r3, #23
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	2202      	movs	r2, #2
 80059b2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80059b4:	2317      	movs	r3, #23
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	781b      	ldrb	r3, [r3, #0]
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b006      	add	sp, #24
 80059c0:	bdb0      	pop	{r4, r5, r7, pc}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	fffff0fe 	.word	0xfffff0fe
 80059c8:	08005b11 	.word	0x08005b11
 80059cc:	08005bd9 	.word	0x08005bd9
 80059d0:	08005bf7 	.word	0x08005bf7

080059d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b002      	add	sp, #8
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80059ec:	46c0      	nop			; (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b002      	add	sp, #8
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80059fc:	46c0      	nop			; (mov r8, r8)
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b002      	add	sp, #8
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7ff fd71 	bl	80054fc <LL_ADC_IsEnabled>
 8005a1a:	1e03      	subs	r3, r0, #0
 8005a1c:	d000      	beq.n	8005a20 <ADC_Enable+0x1c>
 8005a1e:	e069      	b.n	8005af4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	4a36      	ldr	r2, [pc, #216]	; (8005b00 <ADC_Enable+0xfc>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d00d      	beq.n	8005a48 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	2210      	movs	r2, #16
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e056      	b.n	8005af6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7ff fd31 	bl	80054b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8005a52:	4b2c      	ldr	r3, [pc, #176]	; (8005b04 <ADC_Enable+0x100>)
 8005a54:	0018      	movs	r0, r3
 8005a56:	f7ff fcb3 	bl	80053c0 <LL_ADC_GetCommonPathInternalCh>
 8005a5a:	0002      	movs	r2, r0
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	041b      	lsls	r3, r3, #16
 8005a60:	4013      	ands	r3, r2
 8005a62:	d00f      	beq.n	8005a84 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a64:	4b28      	ldr	r3, [pc, #160]	; (8005b08 <ADC_Enable+0x104>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4928      	ldr	r1, [pc, #160]	; (8005b0c <ADC_Enable+0x108>)
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f7fa fb72 	bl	8000154 <__udivsi3>
 8005a70:	0003      	movs	r3, r0
 8005a72:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005a74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a76:	e002      	b.n	8005a7e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f9      	bne.n	8005a78 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	7e5b      	ldrb	r3, [r3, #25]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d033      	beq.n	8005af4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005a8c:	f7ff fc6a 	bl	8005364 <HAL_GetTick>
 8005a90:	0003      	movs	r3, r0
 8005a92:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a94:	e027      	b.n	8005ae6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f7ff fd2e 	bl	80054fc <LL_ADC_IsEnabled>
 8005aa0:	1e03      	subs	r3, r0, #0
 8005aa2:	d104      	bne.n	8005aae <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f7ff fd03 	bl	80054b4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005aae:	f7ff fc59 	bl	8005364 <HAL_GetTick>
 8005ab2:	0002      	movs	r2, r0
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d914      	bls.n	8005ae6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d00d      	beq.n	8005ae6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ace:	2210      	movs	r2, #16
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ada:	2201      	movs	r2, #1
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e007      	b.n	8005af6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2201      	movs	r2, #1
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d1d0      	bne.n	8005a96 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	0018      	movs	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b004      	add	sp, #16
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	80000017 	.word	0x80000017
 8005b04:	40012708 	.word	0x40012708
 8005b08:	20000000 	.word	0x20000000
 8005b0c:	00030d40 	.word	0x00030d40

08005b10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b22:	2250      	movs	r2, #80	; 0x50
 8005b24:	4013      	ands	r3, r2
 8005b26:	d141      	bne.n	8005bac <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2c:	2280      	movs	r2, #128	; 0x80
 8005b2e:	0092      	lsls	r2, r2, #2
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7ff fc81 	bl	8005442 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b40:	1e03      	subs	r3, r0, #0
 8005b42:	d02e      	beq.n	8005ba2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	7e9b      	ldrb	r3, [r3, #26]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d12a      	bne.n	8005ba2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2208      	movs	r2, #8
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d123      	bne.n	8005ba2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f7ff fcf0 	bl	8005544 <LL_ADC_REG_IsConversionOngoing>
 8005b64:	1e03      	subs	r3, r0, #0
 8005b66:	d110      	bne.n	8005b8a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	210c      	movs	r1, #12
 8005b74:	438a      	bics	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7c:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <ADC_DMAConvCplt+0xc4>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2201      	movs	r2, #1
 8005b82:	431a      	orrs	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	659a      	str	r2, [r3, #88]	; 0x58
 8005b88:	e00b      	b.n	8005ba2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	2220      	movs	r2, #32
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f7ff ff15 	bl	80059d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005baa:	e00f      	b.n	8005bcc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f7ff ff1b 	bl	80059f4 <HAL_ADC_ErrorCallback>
}
 8005bbe:	e005      	b.n	8005bcc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	0010      	movs	r0, r2
 8005bca:	4798      	blx	r3
}
 8005bcc:	46c0      	nop			; (mov r8, r8)
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b004      	add	sp, #16
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	fffffefe 	.word	0xfffffefe

08005bd8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	0018      	movs	r0, r3
 8005bea:	f7ff fefb 	bl	80059e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b004      	add	sp, #16
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	2240      	movs	r2, #64	; 0x40
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c14:	2204      	movs	r2, #4
 8005c16:	431a      	orrs	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7ff fee8 	bl	80059f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b004      	add	sp, #16
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	0002      	movs	r2, r0
 8005c34:	1dfb      	adds	r3, r7, #7
 8005c36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c38:	1dfb      	adds	r3, r7, #7
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c3e:	d809      	bhi.n	8005c54 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c40:	1dfb      	adds	r3, r7, #7
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	001a      	movs	r2, r3
 8005c46:	231f      	movs	r3, #31
 8005c48:	401a      	ands	r2, r3
 8005c4a:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <__NVIC_EnableIRQ+0x30>)
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	4091      	lsls	r1, r2
 8005c50:	000a      	movs	r2, r1
 8005c52:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005c54:	46c0      	nop			; (mov r8, r8)
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b002      	add	sp, #8
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	e000e100 	.word	0xe000e100

08005c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c60:	b590      	push	{r4, r7, lr}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	0002      	movs	r2, r0
 8005c68:	6039      	str	r1, [r7, #0]
 8005c6a:	1dfb      	adds	r3, r7, #7
 8005c6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c6e:	1dfb      	adds	r3, r7, #7
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b7f      	cmp	r3, #127	; 0x7f
 8005c74:	d828      	bhi.n	8005cc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c76:	4a2f      	ldr	r2, [pc, #188]	; (8005d34 <__NVIC_SetPriority+0xd4>)
 8005c78:	1dfb      	adds	r3, r7, #7
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	b25b      	sxtb	r3, r3
 8005c7e:	089b      	lsrs	r3, r3, #2
 8005c80:	33c0      	adds	r3, #192	; 0xc0
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	589b      	ldr	r3, [r3, r2]
 8005c86:	1dfa      	adds	r2, r7, #7
 8005c88:	7812      	ldrb	r2, [r2, #0]
 8005c8a:	0011      	movs	r1, r2
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	400a      	ands	r2, r1
 8005c90:	00d2      	lsls	r2, r2, #3
 8005c92:	21ff      	movs	r1, #255	; 0xff
 8005c94:	4091      	lsls	r1, r2
 8005c96:	000a      	movs	r2, r1
 8005c98:	43d2      	mvns	r2, r2
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	019b      	lsls	r3, r3, #6
 8005ca2:	22ff      	movs	r2, #255	; 0xff
 8005ca4:	401a      	ands	r2, r3
 8005ca6:	1dfb      	adds	r3, r7, #7
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	0018      	movs	r0, r3
 8005cac:	2303      	movs	r3, #3
 8005cae:	4003      	ands	r3, r0
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005cb4:	481f      	ldr	r0, [pc, #124]	; (8005d34 <__NVIC_SetPriority+0xd4>)
 8005cb6:	1dfb      	adds	r3, r7, #7
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	b25b      	sxtb	r3, r3
 8005cbc:	089b      	lsrs	r3, r3, #2
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	33c0      	adds	r3, #192	; 0xc0
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005cc6:	e031      	b.n	8005d2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <__NVIC_SetPriority+0xd8>)
 8005cca:	1dfb      	adds	r3, r7, #7
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	0019      	movs	r1, r3
 8005cd0:	230f      	movs	r3, #15
 8005cd2:	400b      	ands	r3, r1
 8005cd4:	3b08      	subs	r3, #8
 8005cd6:	089b      	lsrs	r3, r3, #2
 8005cd8:	3306      	adds	r3, #6
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	18d3      	adds	r3, r2, r3
 8005cde:	3304      	adds	r3, #4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	1dfa      	adds	r2, r7, #7
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	0011      	movs	r1, r2
 8005ce8:	2203      	movs	r2, #3
 8005cea:	400a      	ands	r2, r1
 8005cec:	00d2      	lsls	r2, r2, #3
 8005cee:	21ff      	movs	r1, #255	; 0xff
 8005cf0:	4091      	lsls	r1, r2
 8005cf2:	000a      	movs	r2, r1
 8005cf4:	43d2      	mvns	r2, r2
 8005cf6:	401a      	ands	r2, r3
 8005cf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	019b      	lsls	r3, r3, #6
 8005cfe:	22ff      	movs	r2, #255	; 0xff
 8005d00:	401a      	ands	r2, r3
 8005d02:	1dfb      	adds	r3, r7, #7
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	0018      	movs	r0, r3
 8005d08:	2303      	movs	r3, #3
 8005d0a:	4003      	ands	r3, r0
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d10:	4809      	ldr	r0, [pc, #36]	; (8005d38 <__NVIC_SetPriority+0xd8>)
 8005d12:	1dfb      	adds	r3, r7, #7
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	001c      	movs	r4, r3
 8005d18:	230f      	movs	r3, #15
 8005d1a:	4023      	ands	r3, r4
 8005d1c:	3b08      	subs	r3, #8
 8005d1e:	089b      	lsrs	r3, r3, #2
 8005d20:	430a      	orrs	r2, r1
 8005d22:	3306      	adds	r3, #6
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	18c3      	adds	r3, r0, r3
 8005d28:	3304      	adds	r3, #4
 8005d2a:	601a      	str	r2, [r3, #0]
}
 8005d2c:	46c0      	nop			; (mov r8, r8)
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b003      	add	sp, #12
 8005d32:	bd90      	pop	{r4, r7, pc}
 8005d34:	e000e100 	.word	0xe000e100
 8005d38:	e000ed00 	.word	0xe000ed00

08005d3c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	210f      	movs	r1, #15
 8005d48:	187b      	adds	r3, r7, r1
 8005d4a:	1c02      	adds	r2, r0, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	187b      	adds	r3, r7, r1
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	b25b      	sxtb	r3, r3
 8005d56:	0011      	movs	r1, r2
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f7ff ff81 	bl	8005c60 <__NVIC_SetPriority>
}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	46bd      	mov	sp, r7
 8005d62:	b004      	add	sp, #16
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	0002      	movs	r2, r0
 8005d6e:	1dfb      	adds	r3, r7, #7
 8005d70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d72:	1dfb      	adds	r3, r7, #7
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	b25b      	sxtb	r3, r3
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7ff ff57 	bl	8005c2c <__NVIC_EnableIRQ>
}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b002      	add	sp, #8
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e091      	b.n	8005ebe <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	001a      	movs	r2, r3
 8005da0:	4b49      	ldr	r3, [pc, #292]	; (8005ec8 <HAL_DMA_Init+0x140>)
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d810      	bhi.n	8005dc8 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a48      	ldr	r2, [pc, #288]	; (8005ecc <HAL_DMA_Init+0x144>)
 8005dac:	4694      	mov	ip, r2
 8005dae:	4463      	add	r3, ip
 8005db0:	2114      	movs	r1, #20
 8005db2:	0018      	movs	r0, r3
 8005db4:	f7fa f9ce 	bl	8000154 <__udivsi3>
 8005db8:	0003      	movs	r3, r0
 8005dba:	009a      	lsls	r2, r3, #2
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a43      	ldr	r2, [pc, #268]	; (8005ed0 <HAL_DMA_Init+0x148>)
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40
 8005dc6:	e00f      	b.n	8005de8 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a41      	ldr	r2, [pc, #260]	; (8005ed4 <HAL_DMA_Init+0x14c>)
 8005dce:	4694      	mov	ip, r2
 8005dd0:	4463      	add	r3, ip
 8005dd2:	2114      	movs	r1, #20
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	f7fa f9bd 	bl	8000154 <__udivsi3>
 8005dda:	0003      	movs	r3, r0
 8005ddc:	009a      	lsls	r2, r3, #2
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a3c      	ldr	r2, [pc, #240]	; (8005ed8 <HAL_DMA_Init+0x150>)
 8005de6:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2225      	movs	r2, #37	; 0x25
 8005dec:	2102      	movs	r1, #2
 8005dee:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4938      	ldr	r1, [pc, #224]	; (8005edc <HAL_DMA_Init+0x154>)
 8005dfc:	400a      	ands	r2, r1
 8005dfe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6819      	ldr	r1, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f000 f9d7 	bl	80061ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	01db      	lsls	r3, r3, #7
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d102      	bne.n	8005e50 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e58:	217f      	movs	r1, #127	; 0x7f
 8005e5a:	400a      	ands	r2, r1
 8005e5c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e66:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d011      	beq.n	8005e94 <HAL_DMA_Init+0x10c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d80d      	bhi.n	8005e94 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f000 fa00 	bl	8006280 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e90:	605a      	str	r2, [r3, #4]
 8005e92:	e008      	b.n	8005ea6 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2225      	movs	r2, #37	; 0x25
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2224      	movs	r2, #36	; 0x24
 8005eb8:	2100      	movs	r1, #0
 8005eba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	b002      	add	sp, #8
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	40020407 	.word	0x40020407
 8005ecc:	bffdfff8 	.word	0xbffdfff8
 8005ed0:	40020000 	.word	0x40020000
 8005ed4:	bffdfbf8 	.word	0xbffdfbf8
 8005ed8:	40020400 	.word	0x40020400
 8005edc:	ffff800f 	.word	0xffff800f

08005ee0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eee:	2317      	movs	r3, #23
 8005ef0:	18fb      	adds	r3, r7, r3
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2224      	movs	r2, #36	; 0x24
 8005efa:	5c9b      	ldrb	r3, [r3, r2]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_DMA_Start_IT+0x24>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e06f      	b.n	8005fe4 <HAL_DMA_Start_IT+0x104>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2224      	movs	r2, #36	; 0x24
 8005f08:	2101      	movs	r1, #1
 8005f0a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2225      	movs	r2, #37	; 0x25
 8005f10:	5c9b      	ldrb	r3, [r3, r2]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d157      	bne.n	8005fc8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2225      	movs	r2, #37	; 0x25
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2101      	movs	r1, #1
 8005f32:	438a      	bics	r2, r1
 8005f34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f919 	bl	8006174 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d008      	beq.n	8005f5c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	210e      	movs	r1, #14
 8005f56:	430a      	orrs	r2, r1
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e00f      	b.n	8005f7c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2104      	movs	r1, #4
 8005f68:	438a      	bics	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	210a      	movs	r1, #10
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	2380      	movs	r3, #128	; 0x80
 8005f84:	025b      	lsls	r3, r3, #9
 8005f86:	4013      	ands	r3, r2
 8005f88:	d008      	beq.n	8005f9c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f94:	2180      	movs	r1, #128	; 0x80
 8005f96:	0049      	lsls	r1, r1, #1
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d008      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	2180      	movs	r1, #128	; 0x80
 8005fb0:	0049      	lsls	r1, r1, #1
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	e00a      	b.n	8005fde <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2280      	movs	r2, #128	; 0x80
 8005fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2224      	movs	r2, #36	; 0x24
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005fd6:	2317      	movs	r3, #23
 8005fd8:	18fb      	adds	r3, r7, r3
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005fde:	2317      	movs	r3, #23
 8005fe0:	18fb      	adds	r3, r7, r3
 8005fe2:	781b      	ldrb	r3, [r3, #0]
}
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	b006      	add	sp, #24
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006008:	221c      	movs	r2, #28
 800600a:	4013      	ands	r3, r2
 800600c:	2204      	movs	r2, #4
 800600e:	409a      	lsls	r2, r3
 8006010:	0013      	movs	r3, r2
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4013      	ands	r3, r2
 8006016:	d026      	beq.n	8006066 <HAL_DMA_IRQHandler+0x7a>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2204      	movs	r2, #4
 800601c:	4013      	ands	r3, r2
 800601e:	d022      	beq.n	8006066 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2220      	movs	r2, #32
 8006028:	4013      	ands	r3, r2
 800602a:	d107      	bne.n	800603c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2104      	movs	r1, #4
 8006038:	438a      	bics	r2, r1
 800603a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006040:	221c      	movs	r2, #28
 8006042:	401a      	ands	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	2104      	movs	r1, #4
 800604a:	4091      	lsls	r1, r2
 800604c:	000a      	movs	r2, r1
 800604e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	2b00      	cmp	r3, #0
 8006056:	d100      	bne.n	800605a <HAL_DMA_IRQHandler+0x6e>
 8006058:	e080      	b.n	800615c <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	0010      	movs	r0, r2
 8006062:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006064:	e07a      	b.n	800615c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606a:	221c      	movs	r2, #28
 800606c:	4013      	ands	r3, r2
 800606e:	2202      	movs	r2, #2
 8006070:	409a      	lsls	r2, r3
 8006072:	0013      	movs	r3, r2
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4013      	ands	r3, r2
 8006078:	d03c      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x108>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2202      	movs	r2, #2
 800607e:	4013      	ands	r3, r2
 8006080:	d038      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2220      	movs	r2, #32
 800608a:	4013      	ands	r3, r2
 800608c:	d10b      	bne.n	80060a6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	210a      	movs	r1, #10
 800609a:	438a      	bics	r2, r1
 800609c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2225      	movs	r2, #37	; 0x25
 80060a2:	2101      	movs	r1, #1
 80060a4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	001a      	movs	r2, r3
 80060ac:	4b2e      	ldr	r3, [pc, #184]	; (8006168 <HAL_DMA_IRQHandler+0x17c>)
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d909      	bls.n	80060c6 <HAL_DMA_IRQHandler+0xda>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b6:	221c      	movs	r2, #28
 80060b8:	401a      	ands	r2, r3
 80060ba:	4b2c      	ldr	r3, [pc, #176]	; (800616c <HAL_DMA_IRQHandler+0x180>)
 80060bc:	2102      	movs	r1, #2
 80060be:	4091      	lsls	r1, r2
 80060c0:	000a      	movs	r2, r1
 80060c2:	605a      	str	r2, [r3, #4]
 80060c4:	e008      	b.n	80060d8 <HAL_DMA_IRQHandler+0xec>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ca:	221c      	movs	r2, #28
 80060cc:	401a      	ands	r2, r3
 80060ce:	4b28      	ldr	r3, [pc, #160]	; (8006170 <HAL_DMA_IRQHandler+0x184>)
 80060d0:	2102      	movs	r1, #2
 80060d2:	4091      	lsls	r1, r2
 80060d4:	000a      	movs	r2, r1
 80060d6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2224      	movs	r2, #36	; 0x24
 80060dc:	2100      	movs	r1, #0
 80060de:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d039      	beq.n	800615c <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	0010      	movs	r0, r2
 80060f0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80060f2:	e033      	b.n	800615c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f8:	221c      	movs	r2, #28
 80060fa:	4013      	ands	r3, r2
 80060fc:	2208      	movs	r2, #8
 80060fe:	409a      	lsls	r2, r3
 8006100:	0013      	movs	r3, r2
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4013      	ands	r3, r2
 8006106:	d02a      	beq.n	800615e <HAL_DMA_IRQHandler+0x172>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2208      	movs	r2, #8
 800610c:	4013      	ands	r3, r2
 800610e:	d026      	beq.n	800615e <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	210e      	movs	r1, #14
 800611c:	438a      	bics	r2, r1
 800611e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006124:	221c      	movs	r2, #28
 8006126:	401a      	ands	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	2101      	movs	r1, #1
 800612e:	4091      	lsls	r1, r2
 8006130:	000a      	movs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2225      	movs	r2, #37	; 0x25
 800613e:	2101      	movs	r1, #1
 8006140:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2224      	movs	r2, #36	; 0x24
 8006146:	2100      	movs	r1, #0
 8006148:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	0010      	movs	r0, r2
 800615a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800615c:	46c0      	nop			; (mov r8, r8)
 800615e:	46c0      	nop			; (mov r8, r8)
}
 8006160:	46bd      	mov	sp, r7
 8006162:	b004      	add	sp, #16
 8006164:	bd80      	pop	{r7, pc}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	40020080 	.word	0x40020080
 800616c:	40020400 	.word	0x40020400
 8006170:	40020000 	.word	0x40020000

08006174 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800618a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800619c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a2:	221c      	movs	r2, #28
 80061a4:	401a      	ands	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	2101      	movs	r1, #1
 80061ac:	4091      	lsls	r1, r2
 80061ae:	000a      	movs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b10      	cmp	r3, #16
 80061c0:	d108      	bne.n	80061d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80061d2:	e007      	b.n	80061e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	60da      	str	r2, [r3, #12]
}
 80061e4:	46c0      	nop			; (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b004      	add	sp, #16
 80061ea:	bd80      	pop	{r7, pc}

080061ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	001a      	movs	r2, r3
 80061fa:	4b1d      	ldr	r3, [pc, #116]	; (8006270 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d814      	bhi.n	800622a <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006204:	089b      	lsrs	r3, r3, #2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4a1a      	ldr	r2, [pc, #104]	; (8006274 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800620a:	189a      	adds	r2, r3, r2
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	001a      	movs	r2, r3
 8006216:	23ff      	movs	r3, #255	; 0xff
 8006218:	4013      	ands	r3, r2
 800621a:	3b08      	subs	r3, #8
 800621c:	2114      	movs	r1, #20
 800621e:	0018      	movs	r0, r3
 8006220:	f7f9 ff98 	bl	8000154 <__udivsi3>
 8006224:	0003      	movs	r3, r0
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e014      	b.n	8006254 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	089b      	lsrs	r3, r3, #2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4a11      	ldr	r2, [pc, #68]	; (8006278 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8006234:	189a      	adds	r2, r3, r2
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	001a      	movs	r2, r3
 8006240:	23ff      	movs	r3, #255	; 0xff
 8006242:	4013      	ands	r3, r2
 8006244:	3b08      	subs	r3, #8
 8006246:	2114      	movs	r1, #20
 8006248:	0018      	movs	r0, r3
 800624a:	f7f9 ff83 	bl	8000154 <__udivsi3>
 800624e:	0003      	movs	r3, r0
 8006250:	3307      	adds	r3, #7
 8006252:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a09      	ldr	r2, [pc, #36]	; (800627c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8006258:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	221f      	movs	r2, #31
 800625e:	4013      	ands	r3, r2
 8006260:	2201      	movs	r2, #1
 8006262:	409a      	lsls	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006268:	46c0      	nop			; (mov r8, r8)
 800626a:	46bd      	mov	sp, r7
 800626c:	b004      	add	sp, #16
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40020407 	.word	0x40020407
 8006274:	40020800 	.word	0x40020800
 8006278:	4002081c 	.word	0x4002081c
 800627c:	40020880 	.word	0x40020880

08006280 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	227f      	movs	r2, #127	; 0x7f
 800628e:	4013      	ands	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4a0a      	ldr	r2, [pc, #40]	; (80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006296:	4694      	mov	ip, r2
 8006298:	4463      	add	r3, ip
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	001a      	movs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a07      	ldr	r2, [pc, #28]	; (80062c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80062a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	2203      	movs	r2, #3
 80062ae:	4013      	ands	r3, r2
 80062b0:	2201      	movs	r2, #1
 80062b2:	409a      	lsls	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80062b8:	46c0      	nop			; (mov r8, r8)
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b004      	add	sp, #16
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	1000823f 	.word	0x1000823f
 80062c4:	40020940 	.word	0x40020940

080062c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062d6:	e14d      	b.n	8006574 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2101      	movs	r1, #1
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4091      	lsls	r1, r2
 80062e2:	000a      	movs	r2, r1
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d100      	bne.n	80062f0 <HAL_GPIO_Init+0x28>
 80062ee:	e13e      	b.n	800656e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2203      	movs	r2, #3
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d005      	beq.n	8006308 <HAL_GPIO_Init+0x40>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2203      	movs	r2, #3
 8006302:	4013      	ands	r3, r2
 8006304:	2b02      	cmp	r3, #2
 8006306:	d130      	bne.n	800636a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	2203      	movs	r2, #3
 8006314:	409a      	lsls	r2, r3
 8006316:	0013      	movs	r3, r2
 8006318:	43da      	mvns	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4013      	ands	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	409a      	lsls	r2, r3
 800632a:	0013      	movs	r3, r2
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800633e:	2201      	movs	r2, #1
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	409a      	lsls	r2, r3
 8006344:	0013      	movs	r3, r2
 8006346:	43da      	mvns	r2, r3
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4013      	ands	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	091b      	lsrs	r3, r3, #4
 8006354:	2201      	movs	r2, #1
 8006356:	401a      	ands	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	409a      	lsls	r2, r3
 800635c:	0013      	movs	r3, r2
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2203      	movs	r2, #3
 8006370:	4013      	ands	r3, r2
 8006372:	2b03      	cmp	r3, #3
 8006374:	d017      	beq.n	80063a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	2203      	movs	r2, #3
 8006382:	409a      	lsls	r2, r3
 8006384:	0013      	movs	r3, r2
 8006386:	43da      	mvns	r2, r3
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4013      	ands	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	409a      	lsls	r2, r3
 8006398:	0013      	movs	r3, r2
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2203      	movs	r2, #3
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d123      	bne.n	80063fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	08da      	lsrs	r2, r3, #3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3208      	adds	r2, #8
 80063ba:	0092      	lsls	r2, r2, #2
 80063bc:	58d3      	ldr	r3, [r2, r3]
 80063be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2207      	movs	r2, #7
 80063c4:	4013      	ands	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	220f      	movs	r2, #15
 80063ca:	409a      	lsls	r2, r3
 80063cc:	0013      	movs	r3, r2
 80063ce:	43da      	mvns	r2, r3
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4013      	ands	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2107      	movs	r1, #7
 80063de:	400b      	ands	r3, r1
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	409a      	lsls	r2, r3
 80063e4:	0013      	movs	r3, r2
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	08da      	lsrs	r2, r3, #3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3208      	adds	r2, #8
 80063f4:	0092      	lsls	r2, r2, #2
 80063f6:	6939      	ldr	r1, [r7, #16]
 80063f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	2203      	movs	r2, #3
 8006406:	409a      	lsls	r2, r3
 8006408:	0013      	movs	r3, r2
 800640a:	43da      	mvns	r2, r3
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4013      	ands	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2203      	movs	r2, #3
 8006418:	401a      	ands	r2, r3
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	409a      	lsls	r2, r3
 8006420:	0013      	movs	r3, r2
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	23c0      	movs	r3, #192	; 0xc0
 8006434:	029b      	lsls	r3, r3, #10
 8006436:	4013      	ands	r3, r2
 8006438:	d100      	bne.n	800643c <HAL_GPIO_Init+0x174>
 800643a:	e098      	b.n	800656e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800643c:	4a53      	ldr	r2, [pc, #332]	; (800658c <HAL_GPIO_Init+0x2c4>)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	089b      	lsrs	r3, r3, #2
 8006442:	3318      	adds	r3, #24
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	589b      	ldr	r3, [r3, r2]
 8006448:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2203      	movs	r2, #3
 800644e:	4013      	ands	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	220f      	movs	r2, #15
 8006454:	409a      	lsls	r2, r3
 8006456:	0013      	movs	r3, r2
 8006458:	43da      	mvns	r2, r3
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	4013      	ands	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	23a0      	movs	r3, #160	; 0xa0
 8006464:	05db      	lsls	r3, r3, #23
 8006466:	429a      	cmp	r2, r3
 8006468:	d019      	beq.n	800649e <HAL_GPIO_Init+0x1d6>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a48      	ldr	r2, [pc, #288]	; (8006590 <HAL_GPIO_Init+0x2c8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_GPIO_Init+0x1d2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a47      	ldr	r2, [pc, #284]	; (8006594 <HAL_GPIO_Init+0x2cc>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00d      	beq.n	8006496 <HAL_GPIO_Init+0x1ce>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a46      	ldr	r2, [pc, #280]	; (8006598 <HAL_GPIO_Init+0x2d0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d007      	beq.n	8006492 <HAL_GPIO_Init+0x1ca>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a45      	ldr	r2, [pc, #276]	; (800659c <HAL_GPIO_Init+0x2d4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d101      	bne.n	800648e <HAL_GPIO_Init+0x1c6>
 800648a:	2304      	movs	r3, #4
 800648c:	e008      	b.n	80064a0 <HAL_GPIO_Init+0x1d8>
 800648e:	2305      	movs	r3, #5
 8006490:	e006      	b.n	80064a0 <HAL_GPIO_Init+0x1d8>
 8006492:	2303      	movs	r3, #3
 8006494:	e004      	b.n	80064a0 <HAL_GPIO_Init+0x1d8>
 8006496:	2302      	movs	r3, #2
 8006498:	e002      	b.n	80064a0 <HAL_GPIO_Init+0x1d8>
 800649a:	2301      	movs	r3, #1
 800649c:	e000      	b.n	80064a0 <HAL_GPIO_Init+0x1d8>
 800649e:	2300      	movs	r3, #0
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	2103      	movs	r1, #3
 80064a4:	400a      	ands	r2, r1
 80064a6:	00d2      	lsls	r2, r2, #3
 80064a8:	4093      	lsls	r3, r2
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80064b0:	4936      	ldr	r1, [pc, #216]	; (800658c <HAL_GPIO_Init+0x2c4>)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	089b      	lsrs	r3, r3, #2
 80064b6:	3318      	adds	r3, #24
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064be:	4b33      	ldr	r3, [pc, #204]	; (800658c <HAL_GPIO_Init+0x2c4>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	43da      	mvns	r2, r3
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4013      	ands	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	2380      	movs	r3, #128	; 0x80
 80064d4:	035b      	lsls	r3, r3, #13
 80064d6:	4013      	ands	r3, r2
 80064d8:	d003      	beq.n	80064e2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80064e2:	4b2a      	ldr	r3, [pc, #168]	; (800658c <HAL_GPIO_Init+0x2c4>)
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80064e8:	4b28      	ldr	r3, [pc, #160]	; (800658c <HAL_GPIO_Init+0x2c4>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	43da      	mvns	r2, r3
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	4013      	ands	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	2380      	movs	r3, #128	; 0x80
 80064fe:	039b      	lsls	r3, r3, #14
 8006500:	4013      	ands	r3, r2
 8006502:	d003      	beq.n	800650c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800650c:	4b1f      	ldr	r3, [pc, #124]	; (800658c <HAL_GPIO_Init+0x2c4>)
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006512:	4a1e      	ldr	r2, [pc, #120]	; (800658c <HAL_GPIO_Init+0x2c4>)
 8006514:	2384      	movs	r3, #132	; 0x84
 8006516:	58d3      	ldr	r3, [r2, r3]
 8006518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	43da      	mvns	r2, r3
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4013      	ands	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	2380      	movs	r3, #128	; 0x80
 800652a:	029b      	lsls	r3, r3, #10
 800652c:	4013      	ands	r3, r2
 800652e:	d003      	beq.n	8006538 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006538:	4914      	ldr	r1, [pc, #80]	; (800658c <HAL_GPIO_Init+0x2c4>)
 800653a:	2284      	movs	r2, #132	; 0x84
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006540:	4a12      	ldr	r2, [pc, #72]	; (800658c <HAL_GPIO_Init+0x2c4>)
 8006542:	2380      	movs	r3, #128	; 0x80
 8006544:	58d3      	ldr	r3, [r2, r3]
 8006546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	43da      	mvns	r2, r3
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	4013      	ands	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	2380      	movs	r3, #128	; 0x80
 8006558:	025b      	lsls	r3, r3, #9
 800655a:	4013      	ands	r3, r2
 800655c:	d003      	beq.n	8006566 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006566:	4909      	ldr	r1, [pc, #36]	; (800658c <HAL_GPIO_Init+0x2c4>)
 8006568:	2280      	movs	r2, #128	; 0x80
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	3301      	adds	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	40da      	lsrs	r2, r3
 800657c:	1e13      	subs	r3, r2, #0
 800657e:	d000      	beq.n	8006582 <HAL_GPIO_Init+0x2ba>
 8006580:	e6aa      	b.n	80062d8 <HAL_GPIO_Init+0x10>
  }
}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	46c0      	nop			; (mov r8, r8)
 8006586:	46bd      	mov	sp, r7
 8006588:	b006      	add	sp, #24
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40021800 	.word	0x40021800
 8006590:	50000400 	.word	0x50000400
 8006594:	50000800 	.word	0x50000800
 8006598:	50000c00 	.word	0x50000c00
 800659c:	50001000 	.word	0x50001000

080065a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	0008      	movs	r0, r1
 80065aa:	0011      	movs	r1, r2
 80065ac:	1cbb      	adds	r3, r7, #2
 80065ae:	1c02      	adds	r2, r0, #0
 80065b0:	801a      	strh	r2, [r3, #0]
 80065b2:	1c7b      	adds	r3, r7, #1
 80065b4:	1c0a      	adds	r2, r1, #0
 80065b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065b8:	1c7b      	adds	r3, r7, #1
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80065c0:	1cbb      	adds	r3, r7, #2
 80065c2:	881a      	ldrh	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80065c8:	e003      	b.n	80065d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80065ca:	1cbb      	adds	r3, r7, #2
 80065cc:	881a      	ldrh	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	46bd      	mov	sp, r7
 80065d6:	b002      	add	sp, #8
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e082      	b.n	80066f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2241      	movs	r2, #65	; 0x41
 80065f2:	5c9b      	ldrb	r3, [r3, r2]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d107      	bne.n	800660a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2240      	movs	r2, #64	; 0x40
 80065fe:	2100      	movs	r1, #0
 8006600:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	0018      	movs	r0, r3
 8006606:	f7fe fa2b 	bl	8004a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2241      	movs	r2, #65	; 0x41
 800660e:	2124      	movs	r1, #36	; 0x24
 8006610:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2101      	movs	r1, #1
 800661e:	438a      	bics	r2, r1
 8006620:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4934      	ldr	r1, [pc, #208]	; (80066fc <HAL_I2C_Init+0x120>)
 800662c:	400a      	ands	r2, r1
 800662e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4931      	ldr	r1, [pc, #196]	; (8006700 <HAL_I2C_Init+0x124>)
 800663c:	400a      	ands	r2, r1
 800663e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d108      	bne.n	800665a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2180      	movs	r1, #128	; 0x80
 8006652:	0209      	lsls	r1, r1, #8
 8006654:	430a      	orrs	r2, r1
 8006656:	609a      	str	r2, [r3, #8]
 8006658:	e007      	b.n	800666a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2184      	movs	r1, #132	; 0x84
 8006664:	0209      	lsls	r1, r1, #8
 8006666:	430a      	orrs	r2, r1
 8006668:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d104      	bne.n	800667c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2280      	movs	r2, #128	; 0x80
 8006678:	0112      	lsls	r2, r2, #4
 800667a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	491f      	ldr	r1, [pc, #124]	; (8006704 <HAL_I2C_Init+0x128>)
 8006688:	430a      	orrs	r2, r1
 800668a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	491a      	ldr	r1, [pc, #104]	; (8006700 <HAL_I2C_Init+0x124>)
 8006698:	400a      	ands	r2, r1
 800669a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69d9      	ldr	r1, [r3, #28]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1a      	ldr	r2, [r3, #32]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2101      	movs	r1, #1
 80066d2:	430a      	orrs	r2, r1
 80066d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2241      	movs	r2, #65	; 0x41
 80066e0:	2120      	movs	r1, #32
 80066e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2242      	movs	r2, #66	; 0x42
 80066ee:	2100      	movs	r1, #0
 80066f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	0018      	movs	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b002      	add	sp, #8
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	f0ffffff 	.word	0xf0ffffff
 8006700:	ffff7fff 	.word	0xffff7fff
 8006704:	02008000 	.word	0x02008000

08006708 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2241      	movs	r2, #65	; 0x41
 8006716:	5c9b      	ldrb	r3, [r3, r2]
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b20      	cmp	r3, #32
 800671c:	d138      	bne.n	8006790 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2240      	movs	r2, #64	; 0x40
 8006722:	5c9b      	ldrb	r3, [r3, r2]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006728:	2302      	movs	r3, #2
 800672a:	e032      	b.n	8006792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2240      	movs	r2, #64	; 0x40
 8006730:	2101      	movs	r1, #1
 8006732:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2241      	movs	r2, #65	; 0x41
 8006738:	2124      	movs	r1, #36	; 0x24
 800673a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2101      	movs	r1, #1
 8006748:	438a      	bics	r2, r1
 800674a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4911      	ldr	r1, [pc, #68]	; (800679c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006758:	400a      	ands	r2, r1
 800675a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6819      	ldr	r1, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2101      	movs	r1, #1
 8006778:	430a      	orrs	r2, r1
 800677a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2241      	movs	r2, #65	; 0x41
 8006780:	2120      	movs	r1, #32
 8006782:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2240      	movs	r2, #64	; 0x40
 8006788:	2100      	movs	r1, #0
 800678a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e000      	b.n	8006792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006790:	2302      	movs	r3, #2
  }
}
 8006792:	0018      	movs	r0, r3
 8006794:	46bd      	mov	sp, r7
 8006796:	b002      	add	sp, #8
 8006798:	bd80      	pop	{r7, pc}
 800679a:	46c0      	nop			; (mov r8, r8)
 800679c:	ffffefff 	.word	0xffffefff

080067a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2241      	movs	r2, #65	; 0x41
 80067ae:	5c9b      	ldrb	r3, [r3, r2]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d139      	bne.n	800682a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2240      	movs	r2, #64	; 0x40
 80067ba:	5c9b      	ldrb	r3, [r3, r2]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e033      	b.n	800682c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2240      	movs	r2, #64	; 0x40
 80067c8:	2101      	movs	r1, #1
 80067ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2241      	movs	r2, #65	; 0x41
 80067d0:	2124      	movs	r1, #36	; 0x24
 80067d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2101      	movs	r1, #1
 80067e0:	438a      	bics	r2, r1
 80067e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4a11      	ldr	r2, [pc, #68]	; (8006834 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	021b      	lsls	r3, r3, #8
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2101      	movs	r1, #1
 8006812:	430a      	orrs	r2, r1
 8006814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2241      	movs	r2, #65	; 0x41
 800681a:	2120      	movs	r1, #32
 800681c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2240      	movs	r2, #64	; 0x40
 8006822:	2100      	movs	r1, #0
 8006824:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	e000      	b.n	800682c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800682a:	2302      	movs	r3, #2
  }
}
 800682c:	0018      	movs	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	b004      	add	sp, #16
 8006832:	bd80      	pop	{r7, pc}
 8006834:	fffff0ff 	.word	0xfffff0ff

08006838 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006840:	4b19      	ldr	r3, [pc, #100]	; (80068a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a19      	ldr	r2, [pc, #100]	; (80068ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006846:	4013      	ands	r3, r2
 8006848:	0019      	movs	r1, r3
 800684a:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	430a      	orrs	r2, r1
 8006850:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	2380      	movs	r3, #128	; 0x80
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	429a      	cmp	r2, r3
 800685a:	d11f      	bne.n	800689c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800685c:	4b14      	ldr	r3, [pc, #80]	; (80068b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	0013      	movs	r3, r2
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	189b      	adds	r3, r3, r2
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	4912      	ldr	r1, [pc, #72]	; (80068b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800686a:	0018      	movs	r0, r3
 800686c:	f7f9 fc72 	bl	8000154 <__udivsi3>
 8006870:	0003      	movs	r3, r0
 8006872:	3301      	adds	r3, #1
 8006874:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006876:	e008      	b.n	800688a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3b01      	subs	r3, #1
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e001      	b.n	800688a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e009      	b.n	800689e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800688a:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800688c:	695a      	ldr	r2, [r3, #20]
 800688e:	2380      	movs	r3, #128	; 0x80
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	401a      	ands	r2, r3
 8006894:	2380      	movs	r3, #128	; 0x80
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	429a      	cmp	r2, r3
 800689a:	d0ed      	beq.n	8006878 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	0018      	movs	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b004      	add	sp, #16
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	40007000 	.word	0x40007000
 80068ac:	fffff9ff 	.word	0xfffff9ff
 80068b0:	20000000 	.word	0x20000000
 80068b4:	000f4240 	.word	0x000f4240

080068b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80068bc:	4b03      	ldr	r3, [pc, #12]	; (80068cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	23e0      	movs	r3, #224	; 0xe0
 80068c2:	01db      	lsls	r3, r3, #7
 80068c4:	4013      	ands	r3, r2
}
 80068c6:	0018      	movs	r0, r3
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40021000 	.word	0x40021000

080068d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	f000 fb50 	bl	8006f84 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2201      	movs	r2, #1
 80068ea:	4013      	ands	r3, r2
 80068ec:	d100      	bne.n	80068f0 <HAL_RCC_OscConfig+0x20>
 80068ee:	e07c      	b.n	80069ea <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068f0:	4bc3      	ldr	r3, [pc, #780]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2238      	movs	r2, #56	; 0x38
 80068f6:	4013      	ands	r3, r2
 80068f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068fa:	4bc1      	ldr	r3, [pc, #772]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	2203      	movs	r2, #3
 8006900:	4013      	ands	r3, r2
 8006902:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	2b10      	cmp	r3, #16
 8006908:	d102      	bne.n	8006910 <HAL_RCC_OscConfig+0x40>
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b03      	cmp	r3, #3
 800690e:	d002      	beq.n	8006916 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b08      	cmp	r3, #8
 8006914:	d10b      	bne.n	800692e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006916:	4bba      	ldr	r3, [pc, #744]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	2380      	movs	r3, #128	; 0x80
 800691c:	029b      	lsls	r3, r3, #10
 800691e:	4013      	ands	r3, r2
 8006920:	d062      	beq.n	80069e8 <HAL_RCC_OscConfig+0x118>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d15e      	bne.n	80069e8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e32a      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	2380      	movs	r3, #128	; 0x80
 8006934:	025b      	lsls	r3, r3, #9
 8006936:	429a      	cmp	r2, r3
 8006938:	d107      	bne.n	800694a <HAL_RCC_OscConfig+0x7a>
 800693a:	4bb1      	ldr	r3, [pc, #708]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4bb0      	ldr	r3, [pc, #704]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006940:	2180      	movs	r1, #128	; 0x80
 8006942:	0249      	lsls	r1, r1, #9
 8006944:	430a      	orrs	r2, r1
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	e020      	b.n	800698c <HAL_RCC_OscConfig+0xbc>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	23a0      	movs	r3, #160	; 0xa0
 8006950:	02db      	lsls	r3, r3, #11
 8006952:	429a      	cmp	r2, r3
 8006954:	d10e      	bne.n	8006974 <HAL_RCC_OscConfig+0xa4>
 8006956:	4baa      	ldr	r3, [pc, #680]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4ba9      	ldr	r3, [pc, #676]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 800695c:	2180      	movs	r1, #128	; 0x80
 800695e:	02c9      	lsls	r1, r1, #11
 8006960:	430a      	orrs	r2, r1
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	4ba6      	ldr	r3, [pc, #664]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	4ba5      	ldr	r3, [pc, #660]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 800696a:	2180      	movs	r1, #128	; 0x80
 800696c:	0249      	lsls	r1, r1, #9
 800696e:	430a      	orrs	r2, r1
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e00b      	b.n	800698c <HAL_RCC_OscConfig+0xbc>
 8006974:	4ba2      	ldr	r3, [pc, #648]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	4ba1      	ldr	r3, [pc, #644]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 800697a:	49a2      	ldr	r1, [pc, #648]	; (8006c04 <HAL_RCC_OscConfig+0x334>)
 800697c:	400a      	ands	r2, r1
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	4b9f      	ldr	r3, [pc, #636]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	4b9e      	ldr	r3, [pc, #632]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006986:	49a0      	ldr	r1, [pc, #640]	; (8006c08 <HAL_RCC_OscConfig+0x338>)
 8006988:	400a      	ands	r2, r1
 800698a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d014      	beq.n	80069be <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006994:	f7fe fce6 	bl	8005364 <HAL_GetTick>
 8006998:	0003      	movs	r3, r0
 800699a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800699c:	e008      	b.n	80069b0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800699e:	f7fe fce1 	bl	8005364 <HAL_GetTick>
 80069a2:	0002      	movs	r2, r0
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b64      	cmp	r3, #100	; 0x64
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e2e9      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069b0:	4b93      	ldr	r3, [pc, #588]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	2380      	movs	r3, #128	; 0x80
 80069b6:	029b      	lsls	r3, r3, #10
 80069b8:	4013      	ands	r3, r2
 80069ba:	d0f0      	beq.n	800699e <HAL_RCC_OscConfig+0xce>
 80069bc:	e015      	b.n	80069ea <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069be:	f7fe fcd1 	bl	8005364 <HAL_GetTick>
 80069c2:	0003      	movs	r3, r0
 80069c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c8:	f7fe fccc 	bl	8005364 <HAL_GetTick>
 80069cc:	0002      	movs	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b64      	cmp	r3, #100	; 0x64
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e2d4      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069da:	4b89      	ldr	r3, [pc, #548]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	2380      	movs	r3, #128	; 0x80
 80069e0:	029b      	lsls	r3, r3, #10
 80069e2:	4013      	ands	r3, r2
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0xf8>
 80069e6:	e000      	b.n	80069ea <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2202      	movs	r2, #2
 80069f0:	4013      	ands	r3, r2
 80069f2:	d100      	bne.n	80069f6 <HAL_RCC_OscConfig+0x126>
 80069f4:	e099      	b.n	8006b2a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069f6:	4b82      	ldr	r3, [pc, #520]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2238      	movs	r2, #56	; 0x38
 80069fc:	4013      	ands	r3, r2
 80069fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a00:	4b7f      	ldr	r3, [pc, #508]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	2203      	movs	r2, #3
 8006a06:	4013      	ands	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d102      	bne.n	8006a16 <HAL_RCC_OscConfig+0x146>
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d002      	beq.n	8006a1c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d135      	bne.n	8006a88 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a1c:	4b78      	ldr	r3, [pc, #480]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	2380      	movs	r3, #128	; 0x80
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	4013      	ands	r3, r2
 8006a26:	d005      	beq.n	8006a34 <HAL_RCC_OscConfig+0x164>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e2a7      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a34:	4b72      	ldr	r3, [pc, #456]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	4a74      	ldr	r2, [pc, #464]	; (8006c0c <HAL_RCC_OscConfig+0x33c>)
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	0019      	movs	r1, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	021a      	lsls	r2, r3, #8
 8006a44:	4b6e      	ldr	r3, [pc, #440]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d112      	bne.n	8006a76 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006a50:	4b6b      	ldr	r3, [pc, #428]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a6e      	ldr	r2, [pc, #440]	; (8006c10 <HAL_RCC_OscConfig+0x340>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	0019      	movs	r1, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	4b68      	ldr	r3, [pc, #416]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a60:	430a      	orrs	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006a64:	4b66      	ldr	r3, [pc, #408]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	0adb      	lsrs	r3, r3, #11
 8006a6a:	2207      	movs	r2, #7
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	4a69      	ldr	r2, [pc, #420]	; (8006c14 <HAL_RCC_OscConfig+0x344>)
 8006a70:	40da      	lsrs	r2, r3
 8006a72:	4b69      	ldr	r3, [pc, #420]	; (8006c18 <HAL_RCC_OscConfig+0x348>)
 8006a74:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a76:	4b69      	ldr	r3, [pc, #420]	; (8006c1c <HAL_RCC_OscConfig+0x34c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f7fe f970 	bl	8004d60 <HAL_InitTick>
 8006a80:	1e03      	subs	r3, r0, #0
 8006a82:	d051      	beq.n	8006b28 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e27d      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d030      	beq.n	8006af2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006a90:	4b5b      	ldr	r3, [pc, #364]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a5e      	ldr	r2, [pc, #376]	; (8006c10 <HAL_RCC_OscConfig+0x340>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	0019      	movs	r1, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	4b58      	ldr	r3, [pc, #352]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006aa4:	4b56      	ldr	r3, [pc, #344]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4b55      	ldr	r3, [pc, #340]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	0049      	lsls	r1, r1, #1
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab2:	f7fe fc57 	bl	8005364 <HAL_GetTick>
 8006ab6:	0003      	movs	r3, r0
 8006ab8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006abc:	f7fe fc52 	bl	8005364 <HAL_GetTick>
 8006ac0:	0002      	movs	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e25a      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ace:	4b4c      	ldr	r3, [pc, #304]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	2380      	movs	r3, #128	; 0x80
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	d0f0      	beq.n	8006abc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ada:	4b49      	ldr	r3, [pc, #292]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4a4b      	ldr	r2, [pc, #300]	; (8006c0c <HAL_RCC_OscConfig+0x33c>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	0019      	movs	r1, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	021a      	lsls	r2, r3, #8
 8006aea:	4b45      	ldr	r3, [pc, #276]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006aec:	430a      	orrs	r2, r1
 8006aee:	605a      	str	r2, [r3, #4]
 8006af0:	e01b      	b.n	8006b2a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006af2:	4b43      	ldr	r3, [pc, #268]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b42      	ldr	r3, [pc, #264]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006af8:	4949      	ldr	r1, [pc, #292]	; (8006c20 <HAL_RCC_OscConfig+0x350>)
 8006afa:	400a      	ands	r2, r1
 8006afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afe:	f7fe fc31 	bl	8005364 <HAL_GetTick>
 8006b02:	0003      	movs	r3, r0
 8006b04:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b08:	f7fe fc2c 	bl	8005364 <HAL_GetTick>
 8006b0c:	0002      	movs	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e234      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b1a:	4b39      	ldr	r3, [pc, #228]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	2380      	movs	r3, #128	; 0x80
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	4013      	ands	r3, r2
 8006b24:	d1f0      	bne.n	8006b08 <HAL_RCC_OscConfig+0x238>
 8006b26:	e000      	b.n	8006b2a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2208      	movs	r2, #8
 8006b30:	4013      	ands	r3, r2
 8006b32:	d047      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006b34:	4b32      	ldr	r3, [pc, #200]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	2238      	movs	r2, #56	; 0x38
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b18      	cmp	r3, #24
 8006b3e:	d10a      	bne.n	8006b56 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006b40:	4b2f      	ldr	r3, [pc, #188]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b44:	2202      	movs	r2, #2
 8006b46:	4013      	ands	r3, r2
 8006b48:	d03c      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x2f4>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d138      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e216      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d019      	beq.n	8006b92 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006b5e:	4b28      	ldr	r3, [pc, #160]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006b60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b62:	4b27      	ldr	r3, [pc, #156]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006b64:	2101      	movs	r1, #1
 8006b66:	430a      	orrs	r2, r1
 8006b68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6a:	f7fe fbfb 	bl	8005364 <HAL_GetTick>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b74:	f7fe fbf6 	bl	8005364 <HAL_GetTick>
 8006b78:	0002      	movs	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e1fe      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b86:	4b1e      	ldr	r3, [pc, #120]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	d0f1      	beq.n	8006b74 <HAL_RCC_OscConfig+0x2a4>
 8006b90:	e018      	b.n	8006bc4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006b92:	4b1b      	ldr	r3, [pc, #108]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006b94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b96:	4b1a      	ldr	r3, [pc, #104]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006b98:	2101      	movs	r1, #1
 8006b9a:	438a      	bics	r2, r1
 8006b9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fe fbe1 	bl	8005364 <HAL_GetTick>
 8006ba2:	0003      	movs	r3, r0
 8006ba4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ba8:	f7fe fbdc 	bl	8005364 <HAL_GetTick>
 8006bac:	0002      	movs	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e1e4      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bba:	4b11      	ldr	r3, [pc, #68]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	d1f1      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2204      	movs	r2, #4
 8006bca:	4013      	ands	r3, r2
 8006bcc:	d100      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x300>
 8006bce:	e0c7      	b.n	8006d60 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bd0:	231f      	movs	r3, #31
 8006bd2:	18fb      	adds	r3, r7, r3
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006bd8:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2238      	movs	r2, #56	; 0x38
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d11f      	bne.n	8006c24 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be8:	2202      	movs	r2, #2
 8006bea:	4013      	ands	r3, r2
 8006bec:	d100      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x320>
 8006bee:	e0b7      	b.n	8006d60 <HAL_RCC_OscConfig+0x490>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d000      	beq.n	8006bfa <HAL_RCC_OscConfig+0x32a>
 8006bf8:	e0b2      	b.n	8006d60 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e1c2      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
 8006bfe:	46c0      	nop			; (mov r8, r8)
 8006c00:	40021000 	.word	0x40021000
 8006c04:	fffeffff 	.word	0xfffeffff
 8006c08:	fffbffff 	.word	0xfffbffff
 8006c0c:	ffff80ff 	.word	0xffff80ff
 8006c10:	ffffc7ff 	.word	0xffffc7ff
 8006c14:	00f42400 	.word	0x00f42400
 8006c18:	20000000 	.word	0x20000000
 8006c1c:	20000004 	.word	0x20000004
 8006c20:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c24:	4bb5      	ldr	r3, [pc, #724]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	055b      	lsls	r3, r3, #21
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d101      	bne.n	8006c34 <HAL_RCC_OscConfig+0x364>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <HAL_RCC_OscConfig+0x366>
 8006c34:	2300      	movs	r3, #0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d011      	beq.n	8006c5e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006c3a:	4bb0      	ldr	r3, [pc, #704]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c3e:	4baf      	ldr	r3, [pc, #700]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006c40:	2180      	movs	r1, #128	; 0x80
 8006c42:	0549      	lsls	r1, r1, #21
 8006c44:	430a      	orrs	r2, r1
 8006c46:	63da      	str	r2, [r3, #60]	; 0x3c
 8006c48:	4bac      	ldr	r3, [pc, #688]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	055b      	lsls	r3, r3, #21
 8006c50:	4013      	ands	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006c56:	231f      	movs	r3, #31
 8006c58:	18fb      	adds	r3, r7, r3
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c5e:	4ba8      	ldr	r3, [pc, #672]	; (8006f00 <HAL_RCC_OscConfig+0x630>)
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	2380      	movs	r3, #128	; 0x80
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	4013      	ands	r3, r2
 8006c68:	d11a      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c6a:	4ba5      	ldr	r3, [pc, #660]	; (8006f00 <HAL_RCC_OscConfig+0x630>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	4ba4      	ldr	r3, [pc, #656]	; (8006f00 <HAL_RCC_OscConfig+0x630>)
 8006c70:	2180      	movs	r1, #128	; 0x80
 8006c72:	0049      	lsls	r1, r1, #1
 8006c74:	430a      	orrs	r2, r1
 8006c76:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006c78:	f7fe fb74 	bl	8005364 <HAL_GetTick>
 8006c7c:	0003      	movs	r3, r0
 8006c7e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c82:	f7fe fb6f 	bl	8005364 <HAL_GetTick>
 8006c86:	0002      	movs	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e177      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c94:	4b9a      	ldr	r3, [pc, #616]	; (8006f00 <HAL_RCC_OscConfig+0x630>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	2380      	movs	r3, #128	; 0x80
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d0f0      	beq.n	8006c82 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d106      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x3e6>
 8006ca8:	4b94      	ldr	r3, [pc, #592]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006caa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cac:	4b93      	ldr	r3, [pc, #588]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006cae:	2101      	movs	r1, #1
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006cb4:	e01c      	b.n	8006cf0 <HAL_RCC_OscConfig+0x420>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x408>
 8006cbe:	4b8f      	ldr	r3, [pc, #572]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006cc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cc2:	4b8e      	ldr	r3, [pc, #568]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006cc4:	2104      	movs	r1, #4
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006cca:	4b8c      	ldr	r3, [pc, #560]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006ccc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cce:	4b8b      	ldr	r3, [pc, #556]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006cd6:	e00b      	b.n	8006cf0 <HAL_RCC_OscConfig+0x420>
 8006cd8:	4b88      	ldr	r3, [pc, #544]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006cda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cdc:	4b87      	ldr	r3, [pc, #540]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006cde:	2101      	movs	r1, #1
 8006ce0:	438a      	bics	r2, r1
 8006ce2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ce4:	4b85      	ldr	r3, [pc, #532]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006ce6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ce8:	4b84      	ldr	r3, [pc, #528]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006cea:	2104      	movs	r1, #4
 8006cec:	438a      	bics	r2, r1
 8006cee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d014      	beq.n	8006d22 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf8:	f7fe fb34 	bl	8005364 <HAL_GetTick>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d00:	e009      	b.n	8006d16 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d02:	f7fe fb2f 	bl	8005364 <HAL_GetTick>
 8006d06:	0002      	movs	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	4a7d      	ldr	r2, [pc, #500]	; (8006f04 <HAL_RCC_OscConfig+0x634>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e136      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d16:	4b79      	ldr	r3, [pc, #484]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d0f0      	beq.n	8006d02 <HAL_RCC_OscConfig+0x432>
 8006d20:	e013      	b.n	8006d4a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d22:	f7fe fb1f 	bl	8005364 <HAL_GetTick>
 8006d26:	0003      	movs	r3, r0
 8006d28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d2a:	e009      	b.n	8006d40 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d2c:	f7fe fb1a 	bl	8005364 <HAL_GetTick>
 8006d30:	0002      	movs	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	4a73      	ldr	r2, [pc, #460]	; (8006f04 <HAL_RCC_OscConfig+0x634>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e121      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d40:	4b6e      	ldr	r3, [pc, #440]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d44:	2202      	movs	r2, #2
 8006d46:	4013      	ands	r3, r2
 8006d48:	d1f0      	bne.n	8006d2c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006d4a:	231f      	movs	r3, #31
 8006d4c:	18fb      	adds	r3, r7, r3
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d105      	bne.n	8006d60 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006d54:	4b69      	ldr	r3, [pc, #420]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d58:	4b68      	ldr	r3, [pc, #416]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006d5a:	496b      	ldr	r1, [pc, #428]	; (8006f08 <HAL_RCC_OscConfig+0x638>)
 8006d5c:	400a      	ands	r2, r1
 8006d5e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2220      	movs	r2, #32
 8006d66:	4013      	ands	r3, r2
 8006d68:	d039      	beq.n	8006dde <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01b      	beq.n	8006daa <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d72:	4b62      	ldr	r3, [pc, #392]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b61      	ldr	r3, [pc, #388]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006d78:	2180      	movs	r1, #128	; 0x80
 8006d7a:	03c9      	lsls	r1, r1, #15
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d80:	f7fe faf0 	bl	8005364 <HAL_GetTick>
 8006d84:	0003      	movs	r3, r0
 8006d86:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d8a:	f7fe faeb 	bl	8005364 <HAL_GetTick>
 8006d8e:	0002      	movs	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e0f3      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006d9c:	4b57      	ldr	r3, [pc, #348]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	041b      	lsls	r3, r3, #16
 8006da4:	4013      	ands	r3, r2
 8006da6:	d0f0      	beq.n	8006d8a <HAL_RCC_OscConfig+0x4ba>
 8006da8:	e019      	b.n	8006dde <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006daa:	4b54      	ldr	r3, [pc, #336]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b53      	ldr	r3, [pc, #332]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006db0:	4956      	ldr	r1, [pc, #344]	; (8006f0c <HAL_RCC_OscConfig+0x63c>)
 8006db2:	400a      	ands	r2, r1
 8006db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db6:	f7fe fad5 	bl	8005364 <HAL_GetTick>
 8006dba:	0003      	movs	r3, r0
 8006dbc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dc0:	f7fe fad0 	bl	8005364 <HAL_GetTick>
 8006dc4:	0002      	movs	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e0d8      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006dd2:	4b4a      	ldr	r3, [pc, #296]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	2380      	movs	r3, #128	; 0x80
 8006dd8:	041b      	lsls	r3, r3, #16
 8006dda:	4013      	ands	r3, r2
 8006ddc:	d1f0      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d100      	bne.n	8006de8 <HAL_RCC_OscConfig+0x518>
 8006de6:	e0cc      	b.n	8006f82 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006de8:	4b44      	ldr	r3, [pc, #272]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	2238      	movs	r2, #56	; 0x38
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b10      	cmp	r3, #16
 8006df2:	d100      	bne.n	8006df6 <HAL_RCC_OscConfig+0x526>
 8006df4:	e07b      	b.n	8006eee <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d156      	bne.n	8006eac <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dfe:	4b3f      	ldr	r3, [pc, #252]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4b3e      	ldr	r3, [pc, #248]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006e04:	4942      	ldr	r1, [pc, #264]	; (8006f10 <HAL_RCC_OscConfig+0x640>)
 8006e06:	400a      	ands	r2, r1
 8006e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0a:	f7fe faab 	bl	8005364 <HAL_GetTick>
 8006e0e:	0003      	movs	r3, r0
 8006e10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fe faa6 	bl	8005364 <HAL_GetTick>
 8006e18:	0002      	movs	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e0ae      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e26:	4b35      	ldr	r3, [pc, #212]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	2380      	movs	r3, #128	; 0x80
 8006e2c:	049b      	lsls	r3, r3, #18
 8006e2e:	4013      	ands	r3, r2
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e32:	4b32      	ldr	r3, [pc, #200]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	4a37      	ldr	r2, [pc, #220]	; (8006f14 <HAL_RCC_OscConfig+0x644>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	0019      	movs	r1, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4a:	021b      	lsls	r3, r3, #8
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	4b26      	ldr	r3, [pc, #152]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006e62:	430a      	orrs	r2, r1
 8006e64:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e66:	4b25      	ldr	r3, [pc, #148]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	4b24      	ldr	r3, [pc, #144]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006e6c:	2180      	movs	r1, #128	; 0x80
 8006e6e:	0449      	lsls	r1, r1, #17
 8006e70:	430a      	orrs	r2, r1
 8006e72:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006e74:	4b21      	ldr	r3, [pc, #132]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006e76:	68da      	ldr	r2, [r3, #12]
 8006e78:	4b20      	ldr	r3, [pc, #128]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006e7a:	2180      	movs	r1, #128	; 0x80
 8006e7c:	0549      	lsls	r1, r1, #21
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e82:	f7fe fa6f 	bl	8005364 <HAL_GetTick>
 8006e86:	0003      	movs	r3, r0
 8006e88:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e8c:	f7fe fa6a 	bl	8005364 <HAL_GetTick>
 8006e90:	0002      	movs	r2, r0
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e072      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e9e:	4b17      	ldr	r3, [pc, #92]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	2380      	movs	r3, #128	; 0x80
 8006ea4:	049b      	lsls	r3, r3, #18
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCC_OscConfig+0x5bc>
 8006eaa:	e06a      	b.n	8006f82 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eac:	4b13      	ldr	r3, [pc, #76]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	4b12      	ldr	r3, [pc, #72]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006eb2:	4917      	ldr	r1, [pc, #92]	; (8006f10 <HAL_RCC_OscConfig+0x640>)
 8006eb4:	400a      	ands	r2, r1
 8006eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fe fa54 	bl	8005364 <HAL_GetTick>
 8006ebc:	0003      	movs	r3, r0
 8006ebe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec2:	f7fe fa4f 	bl	8005364 <HAL_GetTick>
 8006ec6:	0002      	movs	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e057      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ed4:	4b09      	ldr	r3, [pc, #36]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	049b      	lsls	r3, r3, #18
 8006edc:	4013      	ands	r3, r2
 8006ede:	d1f0      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006ee0:	4b06      	ldr	r3, [pc, #24]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	4b05      	ldr	r3, [pc, #20]	; (8006efc <HAL_RCC_OscConfig+0x62c>)
 8006ee6:	490c      	ldr	r1, [pc, #48]	; (8006f18 <HAL_RCC_OscConfig+0x648>)
 8006ee8:	400a      	ands	r2, r1
 8006eea:	60da      	str	r2, [r3, #12]
 8006eec:	e049      	b.n	8006f82 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d112      	bne.n	8006f1c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e044      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	40021000 	.word	0x40021000
 8006f00:	40007000 	.word	0x40007000
 8006f04:	00001388 	.word	0x00001388
 8006f08:	efffffff 	.word	0xefffffff
 8006f0c:	ffbfffff 	.word	0xffbfffff
 8006f10:	feffffff 	.word	0xfeffffff
 8006f14:	11c1808c 	.word	0x11c1808c
 8006f18:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006f1c:	4b1b      	ldr	r3, [pc, #108]	; (8006f8c <HAL_RCC_OscConfig+0x6bc>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2203      	movs	r2, #3
 8006f26:	401a      	ands	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d126      	bne.n	8006f7e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2270      	movs	r2, #112	; 0x70
 8006f34:	401a      	ands	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d11f      	bne.n	8006f7e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	23fe      	movs	r3, #254	; 0xfe
 8006f42:	01db      	lsls	r3, r3, #7
 8006f44:	401a      	ands	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d116      	bne.n	8006f7e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	23f8      	movs	r3, #248	; 0xf8
 8006f54:	039b      	lsls	r3, r3, #14
 8006f56:	401a      	ands	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d10e      	bne.n	8006f7e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	23e0      	movs	r3, #224	; 0xe0
 8006f64:	051b      	lsls	r3, r3, #20
 8006f66:	401a      	ands	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d106      	bne.n	8006f7e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	0f5b      	lsrs	r3, r3, #29
 8006f74:	075a      	lsls	r2, r3, #29
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d001      	beq.n	8006f82 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	0018      	movs	r0, r3
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b008      	add	sp, #32
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	40021000 	.word	0x40021000

08006f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0e9      	b.n	8007178 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fa4:	4b76      	ldr	r3, [pc, #472]	; (8007180 <HAL_RCC_ClockConfig+0x1f0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2207      	movs	r2, #7
 8006faa:	4013      	ands	r3, r2
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d91e      	bls.n	8006ff0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb2:	4b73      	ldr	r3, [pc, #460]	; (8007180 <HAL_RCC_ClockConfig+0x1f0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2207      	movs	r2, #7
 8006fb8:	4393      	bics	r3, r2
 8006fba:	0019      	movs	r1, r3
 8006fbc:	4b70      	ldr	r3, [pc, #448]	; (8007180 <HAL_RCC_ClockConfig+0x1f0>)
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006fc4:	f7fe f9ce 	bl	8005364 <HAL_GetTick>
 8006fc8:	0003      	movs	r3, r0
 8006fca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006fcc:	e009      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fce:	f7fe f9c9 	bl	8005364 <HAL_GetTick>
 8006fd2:	0002      	movs	r2, r0
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	4a6a      	ldr	r2, [pc, #424]	; (8007184 <HAL_RCC_ClockConfig+0x1f4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e0ca      	b.n	8007178 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006fe2:	4b67      	ldr	r3, [pc, #412]	; (8007180 <HAL_RCC_ClockConfig+0x1f0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2207      	movs	r2, #7
 8006fe8:	4013      	ands	r3, r2
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d1ee      	bne.n	8006fce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d015      	beq.n	8007026 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2204      	movs	r2, #4
 8007000:	4013      	ands	r3, r2
 8007002:	d006      	beq.n	8007012 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007004:	4b60      	ldr	r3, [pc, #384]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	4b5f      	ldr	r3, [pc, #380]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 800700a:	21e0      	movs	r1, #224	; 0xe0
 800700c:	01c9      	lsls	r1, r1, #7
 800700e:	430a      	orrs	r2, r1
 8007010:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007012:	4b5d      	ldr	r3, [pc, #372]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	4a5d      	ldr	r2, [pc, #372]	; (800718c <HAL_RCC_ClockConfig+0x1fc>)
 8007018:	4013      	ands	r3, r2
 800701a:	0019      	movs	r1, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	4b59      	ldr	r3, [pc, #356]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 8007022:	430a      	orrs	r2, r1
 8007024:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2201      	movs	r2, #1
 800702c:	4013      	ands	r3, r2
 800702e:	d057      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d107      	bne.n	8007048 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007038:	4b53      	ldr	r3, [pc, #332]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	2380      	movs	r3, #128	; 0x80
 800703e:	029b      	lsls	r3, r3, #10
 8007040:	4013      	ands	r3, r2
 8007042:	d12b      	bne.n	800709c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e097      	b.n	8007178 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2b02      	cmp	r3, #2
 800704e:	d107      	bne.n	8007060 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007050:	4b4d      	ldr	r3, [pc, #308]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	2380      	movs	r3, #128	; 0x80
 8007056:	049b      	lsls	r3, r3, #18
 8007058:	4013      	ands	r3, r2
 800705a:	d11f      	bne.n	800709c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e08b      	b.n	8007178 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d107      	bne.n	8007078 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007068:	4b47      	ldr	r3, [pc, #284]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	2380      	movs	r3, #128	; 0x80
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	4013      	ands	r3, r2
 8007072:	d113      	bne.n	800709c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e07f      	b.n	8007178 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d106      	bne.n	800708e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007080:	4b41      	ldr	r3, [pc, #260]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 8007082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007084:	2202      	movs	r2, #2
 8007086:	4013      	ands	r3, r2
 8007088:	d108      	bne.n	800709c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e074      	b.n	8007178 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800708e:	4b3e      	ldr	r3, [pc, #248]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 8007090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007092:	2202      	movs	r2, #2
 8007094:	4013      	ands	r3, r2
 8007096:	d101      	bne.n	800709c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e06d      	b.n	8007178 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800709c:	4b3a      	ldr	r3, [pc, #232]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	2207      	movs	r2, #7
 80070a2:	4393      	bics	r3, r2
 80070a4:	0019      	movs	r1, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	4b37      	ldr	r3, [pc, #220]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 80070ac:	430a      	orrs	r2, r1
 80070ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070b0:	f7fe f958 	bl	8005364 <HAL_GetTick>
 80070b4:	0003      	movs	r3, r0
 80070b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b8:	e009      	b.n	80070ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070ba:	f7fe f953 	bl	8005364 <HAL_GetTick>
 80070be:	0002      	movs	r2, r0
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	4a2f      	ldr	r2, [pc, #188]	; (8007184 <HAL_RCC_ClockConfig+0x1f4>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e054      	b.n	8007178 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ce:	4b2e      	ldr	r3, [pc, #184]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	2238      	movs	r2, #56	; 0x38
 80070d4:	401a      	ands	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	429a      	cmp	r2, r3
 80070de:	d1ec      	bne.n	80070ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070e0:	4b27      	ldr	r3, [pc, #156]	; (8007180 <HAL_RCC_ClockConfig+0x1f0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2207      	movs	r2, #7
 80070e6:	4013      	ands	r3, r2
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d21e      	bcs.n	800712c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ee:	4b24      	ldr	r3, [pc, #144]	; (8007180 <HAL_RCC_ClockConfig+0x1f0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2207      	movs	r2, #7
 80070f4:	4393      	bics	r3, r2
 80070f6:	0019      	movs	r1, r3
 80070f8:	4b21      	ldr	r3, [pc, #132]	; (8007180 <HAL_RCC_ClockConfig+0x1f0>)
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007100:	f7fe f930 	bl	8005364 <HAL_GetTick>
 8007104:	0003      	movs	r3, r0
 8007106:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007108:	e009      	b.n	800711e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800710a:	f7fe f92b 	bl	8005364 <HAL_GetTick>
 800710e:	0002      	movs	r2, r0
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	4a1b      	ldr	r2, [pc, #108]	; (8007184 <HAL_RCC_ClockConfig+0x1f4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d901      	bls.n	800711e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e02c      	b.n	8007178 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800711e:	4b18      	ldr	r3, [pc, #96]	; (8007180 <HAL_RCC_ClockConfig+0x1f0>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2207      	movs	r2, #7
 8007124:	4013      	ands	r3, r2
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d1ee      	bne.n	800710a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2204      	movs	r2, #4
 8007132:	4013      	ands	r3, r2
 8007134:	d009      	beq.n	800714a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007136:	4b14      	ldr	r3, [pc, #80]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	4a15      	ldr	r2, [pc, #84]	; (8007190 <HAL_RCC_ClockConfig+0x200>)
 800713c:	4013      	ands	r3, r2
 800713e:	0019      	movs	r1, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	4b10      	ldr	r3, [pc, #64]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 8007146:	430a      	orrs	r2, r1
 8007148:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800714a:	f000 f829 	bl	80071a0 <HAL_RCC_GetSysClockFreq>
 800714e:	0001      	movs	r1, r0
 8007150:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <HAL_RCC_ClockConfig+0x1f8>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	0a1b      	lsrs	r3, r3, #8
 8007156:	220f      	movs	r2, #15
 8007158:	401a      	ands	r2, r3
 800715a:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <HAL_RCC_ClockConfig+0x204>)
 800715c:	0092      	lsls	r2, r2, #2
 800715e:	58d3      	ldr	r3, [r2, r3]
 8007160:	221f      	movs	r2, #31
 8007162:	4013      	ands	r3, r2
 8007164:	000a      	movs	r2, r1
 8007166:	40da      	lsrs	r2, r3
 8007168:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_RCC_ClockConfig+0x208>)
 800716a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_RCC_ClockConfig+0x20c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	0018      	movs	r0, r3
 8007172:	f7fd fdf5 	bl	8004d60 <HAL_InitTick>
 8007176:	0003      	movs	r3, r0
}
 8007178:	0018      	movs	r0, r3
 800717a:	46bd      	mov	sp, r7
 800717c:	b004      	add	sp, #16
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40022000 	.word	0x40022000
 8007184:	00001388 	.word	0x00001388
 8007188:	40021000 	.word	0x40021000
 800718c:	fffff0ff 	.word	0xfffff0ff
 8007190:	ffff8fff 	.word	0xffff8fff
 8007194:	0800f95c 	.word	0x0800f95c
 8007198:	20000000 	.word	0x20000000
 800719c:	20000004 	.word	0x20000004

080071a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071a6:	4b3c      	ldr	r3, [pc, #240]	; (8007298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2238      	movs	r2, #56	; 0x38
 80071ac:	4013      	ands	r3, r2
 80071ae:	d10f      	bne.n	80071d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80071b0:	4b39      	ldr	r3, [pc, #228]	; (8007298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	0adb      	lsrs	r3, r3, #11
 80071b6:	2207      	movs	r2, #7
 80071b8:	4013      	ands	r3, r2
 80071ba:	2201      	movs	r2, #1
 80071bc:	409a      	lsls	r2, r3
 80071be:	0013      	movs	r3, r2
 80071c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	4835      	ldr	r0, [pc, #212]	; (800729c <HAL_RCC_GetSysClockFreq+0xfc>)
 80071c6:	f7f8 ffc5 	bl	8000154 <__udivsi3>
 80071ca:	0003      	movs	r3, r0
 80071cc:	613b      	str	r3, [r7, #16]
 80071ce:	e05d      	b.n	800728c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071d0:	4b31      	ldr	r3, [pc, #196]	; (8007298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	2238      	movs	r2, #56	; 0x38
 80071d6:	4013      	ands	r3, r2
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d102      	bne.n	80071e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071dc:	4b30      	ldr	r3, [pc, #192]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	e054      	b.n	800728c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071e2:	4b2d      	ldr	r3, [pc, #180]	; (8007298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	2238      	movs	r2, #56	; 0x38
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d138      	bne.n	8007260 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80071ee:	4b2a      	ldr	r3, [pc, #168]	; (8007298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	2203      	movs	r2, #3
 80071f4:	4013      	ands	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071f8:	4b27      	ldr	r3, [pc, #156]	; (8007298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	2207      	movs	r2, #7
 8007200:	4013      	ands	r3, r2
 8007202:	3301      	adds	r3, #1
 8007204:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d10d      	bne.n	8007228 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800720c:	68b9      	ldr	r1, [r7, #8]
 800720e:	4824      	ldr	r0, [pc, #144]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8007210:	f7f8 ffa0 	bl	8000154 <__udivsi3>
 8007214:	0003      	movs	r3, r0
 8007216:	0019      	movs	r1, r3
 8007218:	4b1f      	ldr	r3, [pc, #124]	; (8007298 <HAL_RCC_GetSysClockFreq+0xf8>)
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	0a1b      	lsrs	r3, r3, #8
 800721e:	227f      	movs	r2, #127	; 0x7f
 8007220:	4013      	ands	r3, r2
 8007222:	434b      	muls	r3, r1
 8007224:	617b      	str	r3, [r7, #20]
        break;
 8007226:	e00d      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	481c      	ldr	r0, [pc, #112]	; (800729c <HAL_RCC_GetSysClockFreq+0xfc>)
 800722c:	f7f8 ff92 	bl	8000154 <__udivsi3>
 8007230:	0003      	movs	r3, r0
 8007232:	0019      	movs	r1, r3
 8007234:	4b18      	ldr	r3, [pc, #96]	; (8007298 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	0a1b      	lsrs	r3, r3, #8
 800723a:	227f      	movs	r2, #127	; 0x7f
 800723c:	4013      	ands	r3, r2
 800723e:	434b      	muls	r3, r1
 8007240:	617b      	str	r3, [r7, #20]
        break;
 8007242:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007244:	4b14      	ldr	r3, [pc, #80]	; (8007298 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	0f5b      	lsrs	r3, r3, #29
 800724a:	2207      	movs	r2, #7
 800724c:	4013      	ands	r3, r2
 800724e:	3301      	adds	r3, #1
 8007250:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	6978      	ldr	r0, [r7, #20]
 8007256:	f7f8 ff7d 	bl	8000154 <__udivsi3>
 800725a:	0003      	movs	r3, r0
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	e015      	b.n	800728c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007260:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	2238      	movs	r2, #56	; 0x38
 8007266:	4013      	ands	r3, r2
 8007268:	2b20      	cmp	r3, #32
 800726a:	d103      	bne.n	8007274 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800726c:	2380      	movs	r3, #128	; 0x80
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	e00b      	b.n	800728c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007274:	4b08      	ldr	r3, [pc, #32]	; (8007298 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2238      	movs	r2, #56	; 0x38
 800727a:	4013      	ands	r3, r2
 800727c:	2b18      	cmp	r3, #24
 800727e:	d103      	bne.n	8007288 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007280:	23fa      	movs	r3, #250	; 0xfa
 8007282:	01db      	lsls	r3, r3, #7
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	e001      	b.n	800728c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800728c:	693b      	ldr	r3, [r7, #16]
}
 800728e:	0018      	movs	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	b006      	add	sp, #24
 8007294:	bd80      	pop	{r7, pc}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	40021000 	.word	0x40021000
 800729c:	00f42400 	.word	0x00f42400
 80072a0:	007a1200 	.word	0x007a1200

080072a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072a8:	4b02      	ldr	r3, [pc, #8]	; (80072b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80072aa:	681b      	ldr	r3, [r3, #0]
}
 80072ac:	0018      	movs	r0, r3
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	20000000 	.word	0x20000000

080072b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072b8:	b5b0      	push	{r4, r5, r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80072bc:	f7ff fff2 	bl	80072a4 <HAL_RCC_GetHCLKFreq>
 80072c0:	0004      	movs	r4, r0
 80072c2:	f7ff faf9 	bl	80068b8 <LL_RCC_GetAPB1Prescaler>
 80072c6:	0003      	movs	r3, r0
 80072c8:	0b1a      	lsrs	r2, r3, #12
 80072ca:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072cc:	0092      	lsls	r2, r2, #2
 80072ce:	58d3      	ldr	r3, [r2, r3]
 80072d0:	221f      	movs	r2, #31
 80072d2:	4013      	ands	r3, r2
 80072d4:	40dc      	lsrs	r4, r3
 80072d6:	0023      	movs	r3, r4
}
 80072d8:	0018      	movs	r0, r3
 80072da:	46bd      	mov	sp, r7
 80072dc:	bdb0      	pop	{r4, r5, r7, pc}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	0800f99c 	.word	0x0800f99c

080072e4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2207      	movs	r2, #7
 80072f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072f4:	4b0e      	ldr	r3, [pc, #56]	; (8007330 <HAL_RCC_GetClockConfig+0x4c>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2207      	movs	r2, #7
 80072fa:	401a      	ands	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <HAL_RCC_GetClockConfig+0x4c>)
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	23f0      	movs	r3, #240	; 0xf0
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	401a      	ands	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800730e:	4b08      	ldr	r3, [pc, #32]	; (8007330 <HAL_RCC_GetClockConfig+0x4c>)
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	23e0      	movs	r3, #224	; 0xe0
 8007314:	01db      	lsls	r3, r3, #7
 8007316:	401a      	ands	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <HAL_RCC_GetClockConfig+0x50>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2207      	movs	r2, #7
 8007322:	401a      	ands	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	601a      	str	r2, [r3, #0]
}
 8007328:	46c0      	nop			; (mov r8, r8)
 800732a:	46bd      	mov	sp, r7
 800732c:	b002      	add	sp, #8
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40021000 	.word	0x40021000
 8007334:	40022000 	.word	0x40022000

08007338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007340:	2313      	movs	r3, #19
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	2200      	movs	r2, #0
 8007346:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007348:	2312      	movs	r3, #18
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	2380      	movs	r3, #128	; 0x80
 8007356:	029b      	lsls	r3, r3, #10
 8007358:	4013      	ands	r3, r2
 800735a:	d100      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800735c:	e0ad      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800735e:	2011      	movs	r0, #17
 8007360:	183b      	adds	r3, r7, r0
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007366:	4b47      	ldr	r3, [pc, #284]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800736a:	2380      	movs	r3, #128	; 0x80
 800736c:	055b      	lsls	r3, r3, #21
 800736e:	4013      	ands	r3, r2
 8007370:	d110      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007372:	4b44      	ldr	r3, [pc, #272]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007376:	4b43      	ldr	r3, [pc, #268]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007378:	2180      	movs	r1, #128	; 0x80
 800737a:	0549      	lsls	r1, r1, #21
 800737c:	430a      	orrs	r2, r1
 800737e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007380:	4b40      	ldr	r3, [pc, #256]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007384:	2380      	movs	r3, #128	; 0x80
 8007386:	055b      	lsls	r3, r3, #21
 8007388:	4013      	ands	r3, r2
 800738a:	60bb      	str	r3, [r7, #8]
 800738c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800738e:	183b      	adds	r3, r7, r0
 8007390:	2201      	movs	r2, #1
 8007392:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007394:	4b3c      	ldr	r3, [pc, #240]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	4b3b      	ldr	r3, [pc, #236]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800739a:	2180      	movs	r1, #128	; 0x80
 800739c:	0049      	lsls	r1, r1, #1
 800739e:	430a      	orrs	r2, r1
 80073a0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073a2:	f7fd ffdf 	bl	8005364 <HAL_GetTick>
 80073a6:	0003      	movs	r3, r0
 80073a8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073aa:	e00b      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ac:	f7fd ffda 	bl	8005364 <HAL_GetTick>
 80073b0:	0002      	movs	r2, r0
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d904      	bls.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80073ba:	2313      	movs	r3, #19
 80073bc:	18fb      	adds	r3, r7, r3
 80073be:	2203      	movs	r2, #3
 80073c0:	701a      	strb	r2, [r3, #0]
        break;
 80073c2:	e005      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073c4:	4b30      	ldr	r3, [pc, #192]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	4013      	ands	r3, r2
 80073ce:	d0ed      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80073d0:	2313      	movs	r3, #19
 80073d2:	18fb      	adds	r3, r7, r3
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d15e      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073da:	4b2a      	ldr	r3, [pc, #168]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80073dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073de:	23c0      	movs	r3, #192	; 0xc0
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4013      	ands	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d019      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d014      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073f6:	4b23      	ldr	r3, [pc, #140]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80073f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fa:	4a24      	ldr	r2, [pc, #144]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007400:	4b20      	ldr	r3, [pc, #128]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007402:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007404:	4b1f      	ldr	r3, [pc, #124]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007406:	2180      	movs	r1, #128	; 0x80
 8007408:	0249      	lsls	r1, r1, #9
 800740a:	430a      	orrs	r2, r1
 800740c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800740e:	4b1d      	ldr	r3, [pc, #116]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007412:	4b1c      	ldr	r3, [pc, #112]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007414:	491e      	ldr	r1, [pc, #120]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8007416:	400a      	ands	r2, r1
 8007418:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800741a:	4b1a      	ldr	r3, [pc, #104]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2201      	movs	r2, #1
 8007424:	4013      	ands	r3, r2
 8007426:	d016      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007428:	f7fd ff9c 	bl	8005364 <HAL_GetTick>
 800742c:	0003      	movs	r3, r0
 800742e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007430:	e00c      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007432:	f7fd ff97 	bl	8005364 <HAL_GetTick>
 8007436:	0002      	movs	r2, r0
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	4a15      	ldr	r2, [pc, #84]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d904      	bls.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007442:	2313      	movs	r3, #19
 8007444:	18fb      	adds	r3, r7, r3
 8007446:	2203      	movs	r2, #3
 8007448:	701a      	strb	r2, [r3, #0]
            break;
 800744a:	e004      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800744c:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800744e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007450:	2202      	movs	r2, #2
 8007452:	4013      	ands	r3, r2
 8007454:	d0ed      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007456:	2313      	movs	r3, #19
 8007458:	18fb      	adds	r3, r7, r3
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10a      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007460:	4b08      	ldr	r3, [pc, #32]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007464:	4a09      	ldr	r2, [pc, #36]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007466:	4013      	ands	r3, r2
 8007468:	0019      	movs	r1, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007470:	430a      	orrs	r2, r1
 8007472:	65da      	str	r2, [r3, #92]	; 0x5c
 8007474:	e016      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007476:	2312      	movs	r3, #18
 8007478:	18fb      	adds	r3, r7, r3
 800747a:	2213      	movs	r2, #19
 800747c:	18ba      	adds	r2, r7, r2
 800747e:	7812      	ldrb	r2, [r2, #0]
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	e00f      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007484:	40021000 	.word	0x40021000
 8007488:	40007000 	.word	0x40007000
 800748c:	fffffcff 	.word	0xfffffcff
 8007490:	fffeffff 	.word	0xfffeffff
 8007494:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007498:	2312      	movs	r3, #18
 800749a:	18fb      	adds	r3, r7, r3
 800749c:	2213      	movs	r2, #19
 800749e:	18ba      	adds	r2, r7, r2
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074a4:	2311      	movs	r3, #17
 80074a6:	18fb      	adds	r3, r7, r3
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d105      	bne.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074ae:	4bb6      	ldr	r3, [pc, #728]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074b2:	4bb5      	ldr	r3, [pc, #724]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074b4:	49b5      	ldr	r1, [pc, #724]	; (800778c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80074b6:	400a      	ands	r2, r1
 80074b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2201      	movs	r2, #1
 80074c0:	4013      	ands	r3, r2
 80074c2:	d009      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074c4:	4bb0      	ldr	r3, [pc, #704]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c8:	2203      	movs	r2, #3
 80074ca:	4393      	bics	r3, r2
 80074cc:	0019      	movs	r1, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	4bad      	ldr	r3, [pc, #692]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074d4:	430a      	orrs	r2, r1
 80074d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2202      	movs	r2, #2
 80074de:	4013      	ands	r3, r2
 80074e0:	d009      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074e2:	4ba9      	ldr	r3, [pc, #676]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	220c      	movs	r2, #12
 80074e8:	4393      	bics	r3, r2
 80074ea:	0019      	movs	r1, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	4ba5      	ldr	r3, [pc, #660]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074f2:	430a      	orrs	r2, r1
 80074f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2204      	movs	r2, #4
 80074fc:	4013      	ands	r3, r2
 80074fe:	d009      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007500:	4ba1      	ldr	r3, [pc, #644]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007504:	2230      	movs	r2, #48	; 0x30
 8007506:	4393      	bics	r3, r2
 8007508:	0019      	movs	r1, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	4b9e      	ldr	r3, [pc, #632]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007510:	430a      	orrs	r2, r1
 8007512:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2210      	movs	r2, #16
 800751a:	4013      	ands	r3, r2
 800751c:	d009      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800751e:	4b9a      	ldr	r3, [pc, #616]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007522:	4a9b      	ldr	r2, [pc, #620]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007524:	4013      	ands	r3, r2
 8007526:	0019      	movs	r1, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	4b96      	ldr	r3, [pc, #600]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800752e:	430a      	orrs	r2, r1
 8007530:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	2380      	movs	r3, #128	; 0x80
 8007538:	015b      	lsls	r3, r3, #5
 800753a:	4013      	ands	r3, r2
 800753c:	d009      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800753e:	4b92      	ldr	r3, [pc, #584]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007542:	4a94      	ldr	r2, [pc, #592]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007544:	4013      	ands	r3, r2
 8007546:	0019      	movs	r1, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	695a      	ldr	r2, [r3, #20]
 800754c:	4b8e      	ldr	r3, [pc, #568]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800754e:	430a      	orrs	r2, r1
 8007550:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	2380      	movs	r3, #128	; 0x80
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4013      	ands	r3, r2
 800755c:	d009      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800755e:	4b8a      	ldr	r3, [pc, #552]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	4a8d      	ldr	r2, [pc, #564]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8007564:	4013      	ands	r3, r2
 8007566:	0019      	movs	r1, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800756c:	4b86      	ldr	r3, [pc, #536]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800756e:	430a      	orrs	r2, r1
 8007570:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	2380      	movs	r3, #128	; 0x80
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	4013      	ands	r3, r2
 800757c:	d009      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800757e:	4b82      	ldr	r3, [pc, #520]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007582:	4a86      	ldr	r2, [pc, #536]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8007584:	4013      	ands	r3, r2
 8007586:	0019      	movs	r1, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758c:	4b7e      	ldr	r3, [pc, #504]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800758e:	430a      	orrs	r2, r1
 8007590:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2220      	movs	r2, #32
 8007598:	4013      	ands	r3, r2
 800759a:	d009      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800759c:	4b7a      	ldr	r3, [pc, #488]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800759e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a0:	4a7f      	ldr	r2, [pc, #508]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	0019      	movs	r1, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	4b77      	ldr	r3, [pc, #476]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075ac:	430a      	orrs	r2, r1
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2240      	movs	r2, #64	; 0x40
 80075b6:	4013      	ands	r3, r2
 80075b8:	d009      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075ba:	4b73      	ldr	r3, [pc, #460]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075be:	4a79      	ldr	r2, [pc, #484]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	0019      	movs	r1, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	69da      	ldr	r2, [r3, #28]
 80075c8:	4b6f      	ldr	r3, [pc, #444]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075ca:	430a      	orrs	r2, r1
 80075cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	2380      	movs	r3, #128	; 0x80
 80075d4:	01db      	lsls	r3, r3, #7
 80075d6:	4013      	ands	r3, r2
 80075d8:	d015      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075da:	4b6b      	ldr	r3, [pc, #428]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	0899      	lsrs	r1, r3, #2
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e6:	4b68      	ldr	r3, [pc, #416]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075e8:	430a      	orrs	r2, r1
 80075ea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075f0:	2380      	movs	r3, #128	; 0x80
 80075f2:	05db      	lsls	r3, r3, #23
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d106      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80075f8:	4b63      	ldr	r3, [pc, #396]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	4b62      	ldr	r3, [pc, #392]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075fe:	2180      	movs	r1, #128	; 0x80
 8007600:	0249      	lsls	r1, r1, #9
 8007602:	430a      	orrs	r2, r1
 8007604:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	2380      	movs	r3, #128	; 0x80
 800760c:	031b      	lsls	r3, r3, #12
 800760e:	4013      	ands	r3, r2
 8007610:	d009      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007612:	4b5d      	ldr	r3, [pc, #372]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007616:	2240      	movs	r2, #64	; 0x40
 8007618:	4393      	bics	r3, r2
 800761a:	0019      	movs	r1, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007620:	4b59      	ldr	r3, [pc, #356]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007622:	430a      	orrs	r2, r1
 8007624:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	2380      	movs	r3, #128	; 0x80
 800762c:	039b      	lsls	r3, r3, #14
 800762e:	4013      	ands	r3, r2
 8007630:	d016      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007632:	4b55      	ldr	r3, [pc, #340]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007636:	4a5c      	ldr	r2, [pc, #368]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007638:	4013      	ands	r3, r2
 800763a:	0019      	movs	r1, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007640:	4b51      	ldr	r3, [pc, #324]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007642:	430a      	orrs	r2, r1
 8007644:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800764a:	2380      	movs	r3, #128	; 0x80
 800764c:	03db      	lsls	r3, r3, #15
 800764e:	429a      	cmp	r2, r3
 8007650:	d106      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007652:	4b4d      	ldr	r3, [pc, #308]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	4b4c      	ldr	r3, [pc, #304]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007658:	2180      	movs	r1, #128	; 0x80
 800765a:	0449      	lsls	r1, r1, #17
 800765c:	430a      	orrs	r2, r1
 800765e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	2380      	movs	r3, #128	; 0x80
 8007666:	03db      	lsls	r3, r3, #15
 8007668:	4013      	ands	r3, r2
 800766a:	d016      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800766c:	4b46      	ldr	r3, [pc, #280]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800766e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007670:	4a4e      	ldr	r2, [pc, #312]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007672:	4013      	ands	r3, r2
 8007674:	0019      	movs	r1, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800767a:	4b43      	ldr	r3, [pc, #268]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800767c:	430a      	orrs	r2, r1
 800767e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007684:	2380      	movs	r3, #128	; 0x80
 8007686:	045b      	lsls	r3, r3, #17
 8007688:	429a      	cmp	r2, r3
 800768a:	d106      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800768c:	4b3e      	ldr	r3, [pc, #248]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	4b3d      	ldr	r3, [pc, #244]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007692:	2180      	movs	r1, #128	; 0x80
 8007694:	0449      	lsls	r1, r1, #17
 8007696:	430a      	orrs	r2, r1
 8007698:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	2380      	movs	r3, #128	; 0x80
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	4013      	ands	r3, r2
 80076a4:	d014      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80076a6:	4b38      	ldr	r3, [pc, #224]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80076a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076aa:	2203      	movs	r2, #3
 80076ac:	4393      	bics	r3, r2
 80076ae:	0019      	movs	r1, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a1a      	ldr	r2, [r3, #32]
 80076b4:	4b34      	ldr	r3, [pc, #208]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80076b6:	430a      	orrs	r2, r1
 80076b8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d106      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80076c2:	4b31      	ldr	r3, [pc, #196]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	4b30      	ldr	r3, [pc, #192]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80076c8:	2180      	movs	r1, #128	; 0x80
 80076ca:	0249      	lsls	r1, r1, #9
 80076cc:	430a      	orrs	r2, r1
 80076ce:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	2380      	movs	r3, #128	; 0x80
 80076d6:	019b      	lsls	r3, r3, #6
 80076d8:	4013      	ands	r3, r2
 80076da:	d014      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80076dc:	4b2a      	ldr	r3, [pc, #168]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80076de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e0:	220c      	movs	r2, #12
 80076e2:	4393      	bics	r3, r2
 80076e4:	0019      	movs	r1, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076ea:	4b27      	ldr	r3, [pc, #156]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80076ec:	430a      	orrs	r2, r1
 80076ee:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d106      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80076f8:	4b23      	ldr	r3, [pc, #140]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	4b22      	ldr	r3, [pc, #136]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80076fe:	2180      	movs	r1, #128	; 0x80
 8007700:	0249      	lsls	r1, r1, #9
 8007702:	430a      	orrs	r2, r1
 8007704:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	2380      	movs	r3, #128	; 0x80
 800770c:	045b      	lsls	r3, r3, #17
 800770e:	4013      	ands	r3, r2
 8007710:	d016      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007712:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007716:	4a22      	ldr	r2, [pc, #136]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007718:	4013      	ands	r3, r2
 800771a:	0019      	movs	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007720:	4b19      	ldr	r3, [pc, #100]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007722:	430a      	orrs	r2, r1
 8007724:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800772a:	2380      	movs	r3, #128	; 0x80
 800772c:	019b      	lsls	r3, r3, #6
 800772e:	429a      	cmp	r2, r3
 8007730:	d106      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007732:	4b15      	ldr	r3, [pc, #84]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	4b14      	ldr	r3, [pc, #80]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007738:	2180      	movs	r1, #128	; 0x80
 800773a:	0449      	lsls	r1, r1, #17
 800773c:	430a      	orrs	r2, r1
 800773e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	2380      	movs	r3, #128	; 0x80
 8007746:	049b      	lsls	r3, r3, #18
 8007748:	4013      	ands	r3, r2
 800774a:	d016      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800774c:	4b0e      	ldr	r3, [pc, #56]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800774e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007750:	4a10      	ldr	r2, [pc, #64]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007752:	4013      	ands	r3, r2
 8007754:	0019      	movs	r1, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800775a:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800775c:	430a      	orrs	r2, r1
 800775e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007764:	2380      	movs	r3, #128	; 0x80
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	429a      	cmp	r2, r3
 800776a:	d106      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800776c:	4b06      	ldr	r3, [pc, #24]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	4b05      	ldr	r3, [pc, #20]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007772:	2180      	movs	r1, #128	; 0x80
 8007774:	0449      	lsls	r1, r1, #17
 8007776:	430a      	orrs	r2, r1
 8007778:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800777a:	2312      	movs	r3, #18
 800777c:	18fb      	adds	r3, r7, r3
 800777e:	781b      	ldrb	r3, [r3, #0]
}
 8007780:	0018      	movs	r0, r3
 8007782:	46bd      	mov	sp, r7
 8007784:	b006      	add	sp, #24
 8007786:	bd80      	pop	{r7, pc}
 8007788:	40021000 	.word	0x40021000
 800778c:	efffffff 	.word	0xefffffff
 8007790:	fffff3ff 	.word	0xfffff3ff
 8007794:	fffffcff 	.word	0xfffffcff
 8007798:	fff3ffff 	.word	0xfff3ffff
 800779c:	ffcfffff 	.word	0xffcfffff
 80077a0:	ffffcfff 	.word	0xffffcfff
 80077a4:	ffff3fff 	.word	0xffff3fff
 80077a8:	ffbfffff 	.word	0xffbfffff
 80077ac:	feffffff 	.word	0xfeffffff

080077b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e04a      	b.n	8007858 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	223d      	movs	r2, #61	; 0x3d
 80077c6:	5c9b      	ldrb	r3, [r3, r2]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d107      	bne.n	80077de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	223c      	movs	r2, #60	; 0x3c
 80077d2:	2100      	movs	r1, #0
 80077d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	0018      	movs	r0, r3
 80077da:	f000 f841 	bl	8007860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	223d      	movs	r2, #61	; 0x3d
 80077e2:	2102      	movs	r1, #2
 80077e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3304      	adds	r3, #4
 80077ee:	0019      	movs	r1, r3
 80077f0:	0010      	movs	r0, r2
 80077f2:	f000 fb49 	bl	8007e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2248      	movs	r2, #72	; 0x48
 80077fa:	2101      	movs	r1, #1
 80077fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	223e      	movs	r2, #62	; 0x3e
 8007802:	2101      	movs	r1, #1
 8007804:	5499      	strb	r1, [r3, r2]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	223f      	movs	r2, #63	; 0x3f
 800780a:	2101      	movs	r1, #1
 800780c:	5499      	strb	r1, [r3, r2]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2240      	movs	r2, #64	; 0x40
 8007812:	2101      	movs	r1, #1
 8007814:	5499      	strb	r1, [r3, r2]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2241      	movs	r2, #65	; 0x41
 800781a:	2101      	movs	r1, #1
 800781c:	5499      	strb	r1, [r3, r2]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2242      	movs	r2, #66	; 0x42
 8007822:	2101      	movs	r1, #1
 8007824:	5499      	strb	r1, [r3, r2]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2243      	movs	r2, #67	; 0x43
 800782a:	2101      	movs	r1, #1
 800782c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2244      	movs	r2, #68	; 0x44
 8007832:	2101      	movs	r1, #1
 8007834:	5499      	strb	r1, [r3, r2]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2245      	movs	r2, #69	; 0x45
 800783a:	2101      	movs	r1, #1
 800783c:	5499      	strb	r1, [r3, r2]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2246      	movs	r2, #70	; 0x46
 8007842:	2101      	movs	r1, #1
 8007844:	5499      	strb	r1, [r3, r2]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2247      	movs	r2, #71	; 0x47
 800784a:	2101      	movs	r1, #1
 800784c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	223d      	movs	r2, #61	; 0x3d
 8007852:	2101      	movs	r1, #1
 8007854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	0018      	movs	r0, r3
 800785a:	46bd      	mov	sp, r7
 800785c:	b002      	add	sp, #8
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007868:	46c0      	nop			; (mov r8, r8)
 800786a:	46bd      	mov	sp, r7
 800786c:	b002      	add	sp, #8
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	223d      	movs	r2, #61	; 0x3d
 800787c:	5c9b      	ldrb	r3, [r3, r2]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b01      	cmp	r3, #1
 8007882:	d001      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e047      	b.n	8007918 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	223d      	movs	r2, #61	; 0x3d
 800788c:	2102      	movs	r1, #2
 800788e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2101      	movs	r1, #1
 800789c:	430a      	orrs	r2, r1
 800789e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a1e      	ldr	r2, [pc, #120]	; (8007920 <HAL_TIM_Base_Start_IT+0xb0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d014      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x64>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	2380      	movs	r3, #128	; 0x80
 80078b0:	05db      	lsls	r3, r3, #23
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d00e      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x64>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1a      	ldr	r2, [pc, #104]	; (8007924 <HAL_TIM_Base_Start_IT+0xb4>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d009      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x64>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a18      	ldr	r2, [pc, #96]	; (8007928 <HAL_TIM_Base_Start_IT+0xb8>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x64>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a17      	ldr	r2, [pc, #92]	; (800792c <HAL_TIM_Base_Start_IT+0xbc>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d116      	bne.n	8007902 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	4a15      	ldr	r2, [pc, #84]	; (8007930 <HAL_TIM_Base_Start_IT+0xc0>)
 80078dc:	4013      	ands	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b06      	cmp	r3, #6
 80078e4:	d016      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0xa4>
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	2380      	movs	r3, #128	; 0x80
 80078ea:	025b      	lsls	r3, r3, #9
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d011      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2101      	movs	r1, #1
 80078fc:	430a      	orrs	r2, r1
 80078fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007900:	e008      	b.n	8007914 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2101      	movs	r1, #1
 800790e:	430a      	orrs	r2, r1
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	e000      	b.n	8007916 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007914:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	0018      	movs	r0, r3
 800791a:	46bd      	mov	sp, r7
 800791c:	b004      	add	sp, #16
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40012c00 	.word	0x40012c00
 8007924:	40000400 	.word	0x40000400
 8007928:	40000800 	.word	0x40000800
 800792c:	40014000 	.word	0x40014000
 8007930:	00010007 	.word	0x00010007

08007934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e04a      	b.n	80079dc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	223d      	movs	r2, #61	; 0x3d
 800794a:	5c9b      	ldrb	r3, [r3, r2]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d107      	bne.n	8007962 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	223c      	movs	r2, #60	; 0x3c
 8007956:	2100      	movs	r1, #0
 8007958:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	0018      	movs	r0, r3
 800795e:	f7fd f8e1 	bl	8004b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	223d      	movs	r2, #61	; 0x3d
 8007966:	2102      	movs	r1, #2
 8007968:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3304      	adds	r3, #4
 8007972:	0019      	movs	r1, r3
 8007974:	0010      	movs	r0, r2
 8007976:	f000 fa87 	bl	8007e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2248      	movs	r2, #72	; 0x48
 800797e:	2101      	movs	r1, #1
 8007980:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	223e      	movs	r2, #62	; 0x3e
 8007986:	2101      	movs	r1, #1
 8007988:	5499      	strb	r1, [r3, r2]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	223f      	movs	r2, #63	; 0x3f
 800798e:	2101      	movs	r1, #1
 8007990:	5499      	strb	r1, [r3, r2]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2240      	movs	r2, #64	; 0x40
 8007996:	2101      	movs	r1, #1
 8007998:	5499      	strb	r1, [r3, r2]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2241      	movs	r2, #65	; 0x41
 800799e:	2101      	movs	r1, #1
 80079a0:	5499      	strb	r1, [r3, r2]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2242      	movs	r2, #66	; 0x42
 80079a6:	2101      	movs	r1, #1
 80079a8:	5499      	strb	r1, [r3, r2]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2243      	movs	r2, #67	; 0x43
 80079ae:	2101      	movs	r1, #1
 80079b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2244      	movs	r2, #68	; 0x44
 80079b6:	2101      	movs	r1, #1
 80079b8:	5499      	strb	r1, [r3, r2]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2245      	movs	r2, #69	; 0x45
 80079be:	2101      	movs	r1, #1
 80079c0:	5499      	strb	r1, [r3, r2]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2246      	movs	r2, #70	; 0x46
 80079c6:	2101      	movs	r1, #1
 80079c8:	5499      	strb	r1, [r3, r2]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2247      	movs	r2, #71	; 0x47
 80079ce:	2101      	movs	r1, #1
 80079d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	223d      	movs	r2, #61	; 0x3d
 80079d6:	2101      	movs	r1, #1
 80079d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	0018      	movs	r0, r3
 80079de:	46bd      	mov	sp, r7
 80079e0:	b002      	add	sp, #8
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	2202      	movs	r2, #2
 80079f4:	4013      	ands	r3, r2
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d124      	bne.n	8007a44 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	2202      	movs	r2, #2
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d11d      	bne.n	8007a44 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	4252      	negs	r2, r2
 8007a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	2203      	movs	r2, #3
 8007a20:	4013      	ands	r3, r2
 8007a22:	d004      	beq.n	8007a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	0018      	movs	r0, r3
 8007a28:	f000 fa16 	bl	8007e58 <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e007      	b.n	8007a3e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	0018      	movs	r0, r3
 8007a32:	f000 fa09 	bl	8007e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	0018      	movs	r0, r3
 8007a3a:	f000 fa15 	bl	8007e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d125      	bne.n	8007a9e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	2204      	movs	r2, #4
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	d11e      	bne.n	8007a9e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2205      	movs	r2, #5
 8007a66:	4252      	negs	r2, r2
 8007a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	23c0      	movs	r3, #192	; 0xc0
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d004      	beq.n	8007a88 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	0018      	movs	r0, r3
 8007a82:	f000 f9e9 	bl	8007e58 <HAL_TIM_IC_CaptureCallback>
 8007a86:	e007      	b.n	8007a98 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f000 f9dc 	bl	8007e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	0018      	movs	r0, r3
 8007a94:	f000 f9e8 	bl	8007e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d124      	bne.n	8007af6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	2208      	movs	r2, #8
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	2b08      	cmp	r3, #8
 8007ab8:	d11d      	bne.n	8007af6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2209      	movs	r2, #9
 8007ac0:	4252      	negs	r2, r2
 8007ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2204      	movs	r2, #4
 8007ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	d004      	beq.n	8007ae0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f000 f9bd 	bl	8007e58 <HAL_TIM_IC_CaptureCallback>
 8007ade:	e007      	b.n	8007af0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	f000 f9b0 	bl	8007e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	0018      	movs	r0, r3
 8007aec:	f000 f9bc 	bl	8007e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2210      	movs	r2, #16
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b10      	cmp	r3, #16
 8007b02:	d125      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	2210      	movs	r2, #16
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	2b10      	cmp	r3, #16
 8007b10:	d11e      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2211      	movs	r2, #17
 8007b18:	4252      	negs	r2, r2
 8007b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2208      	movs	r2, #8
 8007b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69da      	ldr	r2, [r3, #28]
 8007b28:	23c0      	movs	r3, #192	; 0xc0
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	d004      	beq.n	8007b3a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	0018      	movs	r0, r3
 8007b34:	f000 f990 	bl	8007e58 <HAL_TIM_IC_CaptureCallback>
 8007b38:	e007      	b.n	8007b4a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	f000 f983 	bl	8007e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	0018      	movs	r0, r3
 8007b46:	f000 f98f 	bl	8007e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2201      	movs	r2, #1
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d10f      	bne.n	8007b7e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	4013      	ands	r3, r2
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d108      	bne.n	8007b7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2202      	movs	r2, #2
 8007b72:	4252      	negs	r2, r2
 8007b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f7fc fd9f 	bl	80046bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	2280      	movs	r2, #128	; 0x80
 8007b86:	4013      	ands	r3, r2
 8007b88:	2b80      	cmp	r3, #128	; 0x80
 8007b8a:	d10f      	bne.n	8007bac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2280      	movs	r2, #128	; 0x80
 8007b94:	4013      	ands	r3, r2
 8007b96:	2b80      	cmp	r3, #128	; 0x80
 8007b98:	d108      	bne.n	8007bac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2281      	movs	r2, #129	; 0x81
 8007ba0:	4252      	negs	r2, r2
 8007ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f000 fde0 	bl	800876c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	2380      	movs	r3, #128	; 0x80
 8007bb4:	005b      	lsls	r3, r3, #1
 8007bb6:	401a      	ands	r2, r3
 8007bb8:	2380      	movs	r3, #128	; 0x80
 8007bba:	005b      	lsls	r3, r3, #1
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d10e      	bne.n	8007bde <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	2280      	movs	r2, #128	; 0x80
 8007bc8:	4013      	ands	r3, r2
 8007bca:	2b80      	cmp	r3, #128	; 0x80
 8007bcc:	d107      	bne.n	8007bde <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <HAL_TIM_IRQHandler+0x260>)
 8007bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	0018      	movs	r0, r3
 8007bda:	f000 fdcf 	bl	800877c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	2240      	movs	r2, #64	; 0x40
 8007be6:	4013      	ands	r3, r2
 8007be8:	2b40      	cmp	r3, #64	; 0x40
 8007bea:	d10f      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2240      	movs	r2, #64	; 0x40
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	2b40      	cmp	r3, #64	; 0x40
 8007bf8:	d108      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2241      	movs	r2, #65	; 0x41
 8007c00:	4252      	negs	r2, r2
 8007c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	0018      	movs	r0, r3
 8007c08:	f000 f936 	bl	8007e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2220      	movs	r2, #32
 8007c14:	4013      	ands	r3, r2
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	d10f      	bne.n	8007c3a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	2220      	movs	r2, #32
 8007c22:	4013      	ands	r3, r2
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	d108      	bne.n	8007c3a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2221      	movs	r2, #33	; 0x21
 8007c2e:	4252      	negs	r2, r2
 8007c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	0018      	movs	r0, r3
 8007c36:	f000 fd91 	bl	800875c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c3a:	46c0      	nop			; (mov r8, r8)
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	b002      	add	sp, #8
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	fffffeff 	.word	0xfffffeff

08007c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c54:	2317      	movs	r3, #23
 8007c56:	18fb      	adds	r3, r7, r3
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	223c      	movs	r2, #60	; 0x3c
 8007c60:	5c9b      	ldrb	r3, [r3, r2]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_TIM_PWM_ConfigChannel+0x22>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e0e5      	b.n	8007e36 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	223c      	movs	r2, #60	; 0x3c
 8007c6e:	2101      	movs	r1, #1
 8007c70:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b14      	cmp	r3, #20
 8007c76:	d900      	bls.n	8007c7a <HAL_TIM_PWM_ConfigChannel+0x32>
 8007c78:	e0d1      	b.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	009a      	lsls	r2, r3, #2
 8007c7e:	4b70      	ldr	r3, [pc, #448]	; (8007e40 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007c80:	18d3      	adds	r3, r2, r3
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	0011      	movs	r1, r2
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f000 f984 	bl	8007f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2108      	movs	r1, #8
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2104      	movs	r1, #4
 8007cb0:	438a      	bics	r2, r1
 8007cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6999      	ldr	r1, [r3, #24]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	619a      	str	r2, [r3, #24]
      break;
 8007cc6:	e0af      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	0011      	movs	r1, r2
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	f000 f9ed 	bl	80080b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	699a      	ldr	r2, [r3, #24]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2180      	movs	r1, #128	; 0x80
 8007ce2:	0109      	lsls	r1, r1, #4
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4954      	ldr	r1, [pc, #336]	; (8007e44 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007cf4:	400a      	ands	r2, r1
 8007cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6999      	ldr	r1, [r3, #24]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	021a      	lsls	r2, r3, #8
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	619a      	str	r2, [r3, #24]
      break;
 8007d0c:	e08c      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	0011      	movs	r1, r2
 8007d16:	0018      	movs	r0, r3
 8007d18:	f000 fa4e 	bl	80081b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	69da      	ldr	r2, [r3, #28]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2108      	movs	r1, #8
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	69da      	ldr	r2, [r3, #28]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2104      	movs	r1, #4
 8007d38:	438a      	bics	r2, r1
 8007d3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	69d9      	ldr	r1, [r3, #28]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	691a      	ldr	r2, [r3, #16]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	61da      	str	r2, [r3, #28]
      break;
 8007d4e:	e06b      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	0011      	movs	r1, r2
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f000 fab5 	bl	80082c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69da      	ldr	r2, [r3, #28]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2180      	movs	r1, #128	; 0x80
 8007d6a:	0109      	lsls	r1, r1, #4
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	69da      	ldr	r2, [r3, #28]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4932      	ldr	r1, [pc, #200]	; (8007e44 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007d7c:	400a      	ands	r2, r1
 8007d7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69d9      	ldr	r1, [r3, #28]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	021a      	lsls	r2, r3, #8
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	61da      	str	r2, [r3, #28]
      break;
 8007d94:	e048      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	0011      	movs	r1, r2
 8007d9e:	0018      	movs	r0, r3
 8007da0:	f000 fafc 	bl	800839c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2108      	movs	r1, #8
 8007db0:	430a      	orrs	r2, r1
 8007db2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2104      	movs	r1, #4
 8007dc0:	438a      	bics	r2, r1
 8007dc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	691a      	ldr	r2, [r3, #16]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007dd6:	e027      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	0011      	movs	r1, r2
 8007de0:	0018      	movs	r0, r3
 8007de2:	f000 fb3b 	bl	800845c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2180      	movs	r1, #128	; 0x80
 8007df2:	0109      	lsls	r1, r1, #4
 8007df4:	430a      	orrs	r2, r1
 8007df6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4910      	ldr	r1, [pc, #64]	; (8007e44 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007e04:	400a      	ands	r2, r1
 8007e06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	021a      	lsls	r2, r3, #8
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e1c:	e004      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007e1e:	2317      	movs	r3, #23
 8007e20:	18fb      	adds	r3, r7, r3
 8007e22:	2201      	movs	r2, #1
 8007e24:	701a      	strb	r2, [r3, #0]
      break;
 8007e26:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	223c      	movs	r2, #60	; 0x3c
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	5499      	strb	r1, [r3, r2]

  return status;
 8007e30:	2317      	movs	r3, #23
 8007e32:	18fb      	adds	r3, r7, r3
 8007e34:	781b      	ldrb	r3, [r3, #0]
}
 8007e36:	0018      	movs	r0, r3
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	b006      	add	sp, #24
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	0800f9fc 	.word	0x0800f9fc
 8007e44:	fffffbff 	.word	0xfffffbff

08007e48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e50:	46c0      	nop			; (mov r8, r8)
 8007e52:	46bd      	mov	sp, r7
 8007e54:	b002      	add	sp, #8
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e60:	46c0      	nop			; (mov r8, r8)
 8007e62:	46bd      	mov	sp, r7
 8007e64:	b002      	add	sp, #8
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e70:	46c0      	nop			; (mov r8, r8)
 8007e72:	46bd      	mov	sp, r7
 8007e74:	b002      	add	sp, #8
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e80:	46c0      	nop			; (mov r8, r8)
 8007e82:	46bd      	mov	sp, r7
 8007e84:	b002      	add	sp, #8
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a38      	ldr	r2, [pc, #224]	; (8007f7c <TIM_Base_SetConfig+0xf4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d00c      	beq.n	8007eba <TIM_Base_SetConfig+0x32>
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	2380      	movs	r3, #128	; 0x80
 8007ea4:	05db      	lsls	r3, r3, #23
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d007      	beq.n	8007eba <TIM_Base_SetConfig+0x32>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a34      	ldr	r2, [pc, #208]	; (8007f80 <TIM_Base_SetConfig+0xf8>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d003      	beq.n	8007eba <TIM_Base_SetConfig+0x32>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a33      	ldr	r2, [pc, #204]	; (8007f84 <TIM_Base_SetConfig+0xfc>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d108      	bne.n	8007ecc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2270      	movs	r2, #112	; 0x70
 8007ebe:	4393      	bics	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a2b      	ldr	r2, [pc, #172]	; (8007f7c <TIM_Base_SetConfig+0xf4>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d01c      	beq.n	8007f0e <TIM_Base_SetConfig+0x86>
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	2380      	movs	r3, #128	; 0x80
 8007ed8:	05db      	lsls	r3, r3, #23
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d017      	beq.n	8007f0e <TIM_Base_SetConfig+0x86>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a27      	ldr	r2, [pc, #156]	; (8007f80 <TIM_Base_SetConfig+0xf8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d013      	beq.n	8007f0e <TIM_Base_SetConfig+0x86>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a26      	ldr	r2, [pc, #152]	; (8007f84 <TIM_Base_SetConfig+0xfc>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00f      	beq.n	8007f0e <TIM_Base_SetConfig+0x86>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a25      	ldr	r2, [pc, #148]	; (8007f88 <TIM_Base_SetConfig+0x100>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00b      	beq.n	8007f0e <TIM_Base_SetConfig+0x86>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a24      	ldr	r2, [pc, #144]	; (8007f8c <TIM_Base_SetConfig+0x104>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d007      	beq.n	8007f0e <TIM_Base_SetConfig+0x86>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a23      	ldr	r2, [pc, #140]	; (8007f90 <TIM_Base_SetConfig+0x108>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d003      	beq.n	8007f0e <TIM_Base_SetConfig+0x86>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a22      	ldr	r2, [pc, #136]	; (8007f94 <TIM_Base_SetConfig+0x10c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d108      	bne.n	8007f20 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4a21      	ldr	r2, [pc, #132]	; (8007f98 <TIM_Base_SetConfig+0x110>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2280      	movs	r2, #128	; 0x80
 8007f24:	4393      	bics	r3, r2
 8007f26:	001a      	movs	r2, r3
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a0c      	ldr	r2, [pc, #48]	; (8007f7c <TIM_Base_SetConfig+0xf4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d00b      	beq.n	8007f66 <TIM_Base_SetConfig+0xde>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a0e      	ldr	r2, [pc, #56]	; (8007f8c <TIM_Base_SetConfig+0x104>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d007      	beq.n	8007f66 <TIM_Base_SetConfig+0xde>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a0d      	ldr	r2, [pc, #52]	; (8007f90 <TIM_Base_SetConfig+0x108>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d003      	beq.n	8007f66 <TIM_Base_SetConfig+0xde>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a0c      	ldr	r2, [pc, #48]	; (8007f94 <TIM_Base_SetConfig+0x10c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d103      	bne.n	8007f6e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	691a      	ldr	r2, [r3, #16]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	615a      	str	r2, [r3, #20]
}
 8007f74:	46c0      	nop			; (mov r8, r8)
 8007f76:	46bd      	mov	sp, r7
 8007f78:	b004      	add	sp, #16
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	40012c00 	.word	0x40012c00
 8007f80:	40000400 	.word	0x40000400
 8007f84:	40000800 	.word	0x40000800
 8007f88:	40002000 	.word	0x40002000
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40014400 	.word	0x40014400
 8007f94:	40014800 	.word	0x40014800
 8007f98:	fffffcff 	.word	0xfffffcff

08007f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	2201      	movs	r2, #1
 8007fac:	4393      	bics	r3, r2
 8007fae:	001a      	movs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4a32      	ldr	r2, [pc, #200]	; (8008094 <TIM_OC1_SetConfig+0xf8>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	4393      	bics	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	4393      	bics	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a28      	ldr	r2, [pc, #160]	; (8008098 <TIM_OC1_SetConfig+0xfc>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d00b      	beq.n	8008012 <TIM_OC1_SetConfig+0x76>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a27      	ldr	r2, [pc, #156]	; (800809c <TIM_OC1_SetConfig+0x100>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d007      	beq.n	8008012 <TIM_OC1_SetConfig+0x76>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a26      	ldr	r2, [pc, #152]	; (80080a0 <TIM_OC1_SetConfig+0x104>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d003      	beq.n	8008012 <TIM_OC1_SetConfig+0x76>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a25      	ldr	r2, [pc, #148]	; (80080a4 <TIM_OC1_SetConfig+0x108>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d10c      	bne.n	800802c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2208      	movs	r2, #8
 8008016:	4393      	bics	r3, r2
 8008018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2204      	movs	r2, #4
 8008028:	4393      	bics	r3, r2
 800802a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a1a      	ldr	r2, [pc, #104]	; (8008098 <TIM_OC1_SetConfig+0xfc>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00b      	beq.n	800804c <TIM_OC1_SetConfig+0xb0>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a19      	ldr	r2, [pc, #100]	; (800809c <TIM_OC1_SetConfig+0x100>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d007      	beq.n	800804c <TIM_OC1_SetConfig+0xb0>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a18      	ldr	r2, [pc, #96]	; (80080a0 <TIM_OC1_SetConfig+0x104>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d003      	beq.n	800804c <TIM_OC1_SetConfig+0xb0>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a17      	ldr	r2, [pc, #92]	; (80080a4 <TIM_OC1_SetConfig+0x108>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d111      	bne.n	8008070 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	4a16      	ldr	r2, [pc, #88]	; (80080a8 <TIM_OC1_SetConfig+0x10c>)
 8008050:	4013      	ands	r3, r2
 8008052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	4a15      	ldr	r2, [pc, #84]	; (80080ac <TIM_OC1_SetConfig+0x110>)
 8008058:	4013      	ands	r3, r2
 800805a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	4313      	orrs	r3, r2
 8008064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	4313      	orrs	r3, r2
 800806e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	621a      	str	r2, [r3, #32]
}
 800808a:	46c0      	nop			; (mov r8, r8)
 800808c:	46bd      	mov	sp, r7
 800808e:	b006      	add	sp, #24
 8008090:	bd80      	pop	{r7, pc}
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	fffeff8f 	.word	0xfffeff8f
 8008098:	40012c00 	.word	0x40012c00
 800809c:	40014000 	.word	0x40014000
 80080a0:	40014400 	.word	0x40014400
 80080a4:	40014800 	.word	0x40014800
 80080a8:	fffffeff 	.word	0xfffffeff
 80080ac:	fffffdff 	.word	0xfffffdff

080080b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	2210      	movs	r2, #16
 80080c0:	4393      	bics	r3, r2
 80080c2:	001a      	movs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4a2e      	ldr	r2, [pc, #184]	; (8008198 <TIM_OC2_SetConfig+0xe8>)
 80080de:	4013      	ands	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4a2d      	ldr	r2, [pc, #180]	; (800819c <TIM_OC2_SetConfig+0xec>)
 80080e6:	4013      	ands	r3, r2
 80080e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	021b      	lsls	r3, r3, #8
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2220      	movs	r2, #32
 80080fa:	4393      	bics	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	4313      	orrs	r3, r2
 8008108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a24      	ldr	r2, [pc, #144]	; (80081a0 <TIM_OC2_SetConfig+0xf0>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d10d      	bne.n	800812e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2280      	movs	r2, #128	; 0x80
 8008116:	4393      	bics	r3, r2
 8008118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4313      	orrs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2240      	movs	r2, #64	; 0x40
 800812a:	4393      	bics	r3, r2
 800812c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a1b      	ldr	r2, [pc, #108]	; (80081a0 <TIM_OC2_SetConfig+0xf0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00b      	beq.n	800814e <TIM_OC2_SetConfig+0x9e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a1a      	ldr	r2, [pc, #104]	; (80081a4 <TIM_OC2_SetConfig+0xf4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d007      	beq.n	800814e <TIM_OC2_SetConfig+0x9e>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a19      	ldr	r2, [pc, #100]	; (80081a8 <TIM_OC2_SetConfig+0xf8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d003      	beq.n	800814e <TIM_OC2_SetConfig+0x9e>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a18      	ldr	r2, [pc, #96]	; (80081ac <TIM_OC2_SetConfig+0xfc>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d113      	bne.n	8008176 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	4a17      	ldr	r2, [pc, #92]	; (80081b0 <TIM_OC2_SetConfig+0x100>)
 8008152:	4013      	ands	r3, r2
 8008154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	4a16      	ldr	r2, [pc, #88]	; (80081b4 <TIM_OC2_SetConfig+0x104>)
 800815a:	4013      	ands	r3, r2
 800815c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	4313      	orrs	r3, r2
 8008168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	4313      	orrs	r3, r2
 8008174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	621a      	str	r2, [r3, #32]
}
 8008190:	46c0      	nop			; (mov r8, r8)
 8008192:	46bd      	mov	sp, r7
 8008194:	b006      	add	sp, #24
 8008196:	bd80      	pop	{r7, pc}
 8008198:	feff8fff 	.word	0xfeff8fff
 800819c:	fffffcff 	.word	0xfffffcff
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40014000 	.word	0x40014000
 80081a8:	40014400 	.word	0x40014400
 80081ac:	40014800 	.word	0x40014800
 80081b0:	fffffbff 	.word	0xfffffbff
 80081b4:	fffff7ff 	.word	0xfffff7ff

080081b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	4a35      	ldr	r2, [pc, #212]	; (800829c <TIM_OC3_SetConfig+0xe4>)
 80081c8:	401a      	ands	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4a2f      	ldr	r2, [pc, #188]	; (80082a0 <TIM_OC3_SetConfig+0xe8>)
 80081e4:	4013      	ands	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2203      	movs	r2, #3
 80081ec:	4393      	bics	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	4a29      	ldr	r2, [pc, #164]	; (80082a4 <TIM_OC3_SetConfig+0xec>)
 80081fe:	4013      	ands	r3, r2
 8008200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	021b      	lsls	r3, r3, #8
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a25      	ldr	r2, [pc, #148]	; (80082a8 <TIM_OC3_SetConfig+0xf0>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d10d      	bne.n	8008232 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	4a24      	ldr	r2, [pc, #144]	; (80082ac <TIM_OC3_SetConfig+0xf4>)
 800821a:	4013      	ands	r3, r2
 800821c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	4a20      	ldr	r2, [pc, #128]	; (80082b0 <TIM_OC3_SetConfig+0xf8>)
 800822e:	4013      	ands	r3, r2
 8008230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a1c      	ldr	r2, [pc, #112]	; (80082a8 <TIM_OC3_SetConfig+0xf0>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d00b      	beq.n	8008252 <TIM_OC3_SetConfig+0x9a>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a1d      	ldr	r2, [pc, #116]	; (80082b4 <TIM_OC3_SetConfig+0xfc>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d007      	beq.n	8008252 <TIM_OC3_SetConfig+0x9a>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a1c      	ldr	r2, [pc, #112]	; (80082b8 <TIM_OC3_SetConfig+0x100>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d003      	beq.n	8008252 <TIM_OC3_SetConfig+0x9a>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a1b      	ldr	r2, [pc, #108]	; (80082bc <TIM_OC3_SetConfig+0x104>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d113      	bne.n	800827a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	4a1a      	ldr	r2, [pc, #104]	; (80082c0 <TIM_OC3_SetConfig+0x108>)
 8008256:	4013      	ands	r3, r2
 8008258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	4a19      	ldr	r2, [pc, #100]	; (80082c4 <TIM_OC3_SetConfig+0x10c>)
 800825e:	4013      	ands	r3, r2
 8008260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4313      	orrs	r3, r2
 8008278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	621a      	str	r2, [r3, #32]
}
 8008294:	46c0      	nop			; (mov r8, r8)
 8008296:	46bd      	mov	sp, r7
 8008298:	b006      	add	sp, #24
 800829a:	bd80      	pop	{r7, pc}
 800829c:	fffffeff 	.word	0xfffffeff
 80082a0:	fffeff8f 	.word	0xfffeff8f
 80082a4:	fffffdff 	.word	0xfffffdff
 80082a8:	40012c00 	.word	0x40012c00
 80082ac:	fffff7ff 	.word	0xfffff7ff
 80082b0:	fffffbff 	.word	0xfffffbff
 80082b4:	40014000 	.word	0x40014000
 80082b8:	40014400 	.word	0x40014400
 80082bc:	40014800 	.word	0x40014800
 80082c0:	ffffefff 	.word	0xffffefff
 80082c4:	ffffdfff 	.word	0xffffdfff

080082c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	4a28      	ldr	r2, [pc, #160]	; (8008378 <TIM_OC4_SetConfig+0xb0>)
 80082d8:	401a      	ands	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4a22      	ldr	r2, [pc, #136]	; (800837c <TIM_OC4_SetConfig+0xb4>)
 80082f4:	4013      	ands	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4a21      	ldr	r2, [pc, #132]	; (8008380 <TIM_OC4_SetConfig+0xb8>)
 80082fc:	4013      	ands	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	021b      	lsls	r3, r3, #8
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	4313      	orrs	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	4a1d      	ldr	r2, [pc, #116]	; (8008384 <TIM_OC4_SetConfig+0xbc>)
 8008310:	4013      	ands	r3, r2
 8008312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	031b      	lsls	r3, r3, #12
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	4313      	orrs	r3, r2
 800831e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a19      	ldr	r2, [pc, #100]	; (8008388 <TIM_OC4_SetConfig+0xc0>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00b      	beq.n	8008340 <TIM_OC4_SetConfig+0x78>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a18      	ldr	r2, [pc, #96]	; (800838c <TIM_OC4_SetConfig+0xc4>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d007      	beq.n	8008340 <TIM_OC4_SetConfig+0x78>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a17      	ldr	r2, [pc, #92]	; (8008390 <TIM_OC4_SetConfig+0xc8>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d003      	beq.n	8008340 <TIM_OC4_SetConfig+0x78>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a16      	ldr	r2, [pc, #88]	; (8008394 <TIM_OC4_SetConfig+0xcc>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d109      	bne.n	8008354 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	4a15      	ldr	r2, [pc, #84]	; (8008398 <TIM_OC4_SetConfig+0xd0>)
 8008344:	4013      	ands	r3, r2
 8008346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	019b      	lsls	r3, r3, #6
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	621a      	str	r2, [r3, #32]
}
 800836e:	46c0      	nop			; (mov r8, r8)
 8008370:	46bd      	mov	sp, r7
 8008372:	b006      	add	sp, #24
 8008374:	bd80      	pop	{r7, pc}
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	ffffefff 	.word	0xffffefff
 800837c:	feff8fff 	.word	0xfeff8fff
 8008380:	fffffcff 	.word	0xfffffcff
 8008384:	ffffdfff 	.word	0xffffdfff
 8008388:	40012c00 	.word	0x40012c00
 800838c:	40014000 	.word	0x40014000
 8008390:	40014400 	.word	0x40014400
 8008394:	40014800 	.word	0x40014800
 8008398:	ffffbfff 	.word	0xffffbfff

0800839c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	4a25      	ldr	r2, [pc, #148]	; (8008440 <TIM_OC5_SetConfig+0xa4>)
 80083ac:	401a      	ands	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4a1f      	ldr	r2, [pc, #124]	; (8008444 <TIM_OC5_SetConfig+0xa8>)
 80083c8:	4013      	ands	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	4a1b      	ldr	r2, [pc, #108]	; (8008448 <TIM_OC5_SetConfig+0xac>)
 80083da:	4013      	ands	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	041b      	lsls	r3, r3, #16
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a17      	ldr	r2, [pc, #92]	; (800844c <TIM_OC5_SetConfig+0xb0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00b      	beq.n	800840a <TIM_OC5_SetConfig+0x6e>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a16      	ldr	r2, [pc, #88]	; (8008450 <TIM_OC5_SetConfig+0xb4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d007      	beq.n	800840a <TIM_OC5_SetConfig+0x6e>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a15      	ldr	r2, [pc, #84]	; (8008454 <TIM_OC5_SetConfig+0xb8>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d003      	beq.n	800840a <TIM_OC5_SetConfig+0x6e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a14      	ldr	r2, [pc, #80]	; (8008458 <TIM_OC5_SetConfig+0xbc>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d109      	bne.n	800841e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	4a0c      	ldr	r2, [pc, #48]	; (8008440 <TIM_OC5_SetConfig+0xa4>)
 800840e:	4013      	ands	r3, r2
 8008410:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	021b      	lsls	r3, r3, #8
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	4313      	orrs	r3, r2
 800841c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	621a      	str	r2, [r3, #32]
}
 8008438:	46c0      	nop			; (mov r8, r8)
 800843a:	46bd      	mov	sp, r7
 800843c:	b006      	add	sp, #24
 800843e:	bd80      	pop	{r7, pc}
 8008440:	fffeffff 	.word	0xfffeffff
 8008444:	fffeff8f 	.word	0xfffeff8f
 8008448:	fffdffff 	.word	0xfffdffff
 800844c:	40012c00 	.word	0x40012c00
 8008450:	40014000 	.word	0x40014000
 8008454:	40014400 	.word	0x40014400
 8008458:	40014800 	.word	0x40014800

0800845c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	4a26      	ldr	r2, [pc, #152]	; (8008504 <TIM_OC6_SetConfig+0xa8>)
 800846c:	401a      	ands	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4a20      	ldr	r2, [pc, #128]	; (8008508 <TIM_OC6_SetConfig+0xac>)
 8008488:	4013      	ands	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	021b      	lsls	r3, r3, #8
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4a1c      	ldr	r2, [pc, #112]	; (800850c <TIM_OC6_SetConfig+0xb0>)
 800849c:	4013      	ands	r3, r2
 800849e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	051b      	lsls	r3, r3, #20
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a18      	ldr	r2, [pc, #96]	; (8008510 <TIM_OC6_SetConfig+0xb4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d00b      	beq.n	80084cc <TIM_OC6_SetConfig+0x70>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a17      	ldr	r2, [pc, #92]	; (8008514 <TIM_OC6_SetConfig+0xb8>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d007      	beq.n	80084cc <TIM_OC6_SetConfig+0x70>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a16      	ldr	r2, [pc, #88]	; (8008518 <TIM_OC6_SetConfig+0xbc>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d003      	beq.n	80084cc <TIM_OC6_SetConfig+0x70>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a15      	ldr	r2, [pc, #84]	; (800851c <TIM_OC6_SetConfig+0xc0>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d109      	bne.n	80084e0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	4a14      	ldr	r2, [pc, #80]	; (8008520 <TIM_OC6_SetConfig+0xc4>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	029b      	lsls	r3, r3, #10
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	4313      	orrs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	621a      	str	r2, [r3, #32]
}
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	46bd      	mov	sp, r7
 80084fe:	b006      	add	sp, #24
 8008500:	bd80      	pop	{r7, pc}
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	ffefffff 	.word	0xffefffff
 8008508:	feff8fff 	.word	0xfeff8fff
 800850c:	ffdfffff 	.word	0xffdfffff
 8008510:	40012c00 	.word	0x40012c00
 8008514:	40014000 	.word	0x40014000
 8008518:	40014400 	.word	0x40014400
 800851c:	40014800 	.word	0x40014800
 8008520:	fffbffff 	.word	0xfffbffff

08008524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	223c      	movs	r2, #60	; 0x3c
 8008532:	5c9b      	ldrb	r3, [r3, r2]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d101      	bne.n	800853c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008538:	2302      	movs	r3, #2
 800853a:	e05a      	b.n	80085f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	223c      	movs	r2, #60	; 0x3c
 8008540:	2101      	movs	r1, #1
 8008542:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	223d      	movs	r2, #61	; 0x3d
 8008548:	2102      	movs	r1, #2
 800854a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a26      	ldr	r2, [pc, #152]	; (80085fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d108      	bne.n	8008578 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4a25      	ldr	r2, [pc, #148]	; (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800856a:	4013      	ands	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4313      	orrs	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2270      	movs	r2, #112	; 0x70
 800857c:	4393      	bics	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a19      	ldr	r2, [pc, #100]	; (80085fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d014      	beq.n	80085c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	2380      	movs	r3, #128	; 0x80
 80085a2:	05db      	lsls	r3, r3, #23
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d00e      	beq.n	80085c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a15      	ldr	r2, [pc, #84]	; (8008604 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d009      	beq.n	80085c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a14      	ldr	r2, [pc, #80]	; (8008608 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d004      	beq.n	80085c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a12      	ldr	r2, [pc, #72]	; (800860c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d10c      	bne.n	80085e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2280      	movs	r2, #128	; 0x80
 80085ca:	4393      	bics	r3, r2
 80085cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	223d      	movs	r2, #61	; 0x3d
 80085e4:	2101      	movs	r1, #1
 80085e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	223c      	movs	r2, #60	; 0x3c
 80085ec:	2100      	movs	r1, #0
 80085ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	0018      	movs	r0, r3
 80085f4:	46bd      	mov	sp, r7
 80085f6:	b004      	add	sp, #16
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	40012c00 	.word	0x40012c00
 8008600:	ff0fffff 	.word	0xff0fffff
 8008604:	40000400 	.word	0x40000400
 8008608:	40000800 	.word	0x40000800
 800860c:	40014000 	.word	0x40014000

08008610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	223c      	movs	r2, #60	; 0x3c
 8008622:	5c9b      	ldrb	r3, [r3, r2]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008628:	2302      	movs	r3, #2
 800862a:	e079      	b.n	8008720 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	223c      	movs	r2, #60	; 0x3c
 8008630:	2101      	movs	r1, #1
 8008632:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	22ff      	movs	r2, #255	; 0xff
 8008638:	4393      	bics	r3, r2
 800863a:	001a      	movs	r2, r3
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	4313      	orrs	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	4a38      	ldr	r2, [pc, #224]	; (8008728 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008648:	401a      	ands	r2, r3
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	4a35      	ldr	r2, [pc, #212]	; (800872c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008656:	401a      	ands	r2, r3
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	4313      	orrs	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a33      	ldr	r2, [pc, #204]	; (8008730 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008664:	401a      	ands	r2, r3
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	4a30      	ldr	r2, [pc, #192]	; (8008734 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008672:	401a      	ands	r2, r3
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	4313      	orrs	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4a2e      	ldr	r2, [pc, #184]	; (8008738 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008680:	401a      	ands	r2, r3
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4a2b      	ldr	r2, [pc, #172]	; (800873c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800868e:	401a      	ands	r2, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4a29      	ldr	r2, [pc, #164]	; (8008740 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800869c:	401a      	ands	r2, r3
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	041b      	lsls	r3, r3, #16
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a25      	ldr	r2, [pc, #148]	; (8008744 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d106      	bne.n	80086c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4a24      	ldr	r2, [pc, #144]	; (8008748 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80086b6:	401a      	ands	r2, r3
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	4313      	orrs	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a1f      	ldr	r2, [pc, #124]	; (8008744 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d121      	bne.n	800870e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4a1f      	ldr	r2, [pc, #124]	; (800874c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80086ce:	401a      	ands	r2, r3
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d4:	051b      	lsls	r3, r3, #20
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4a1c      	ldr	r2, [pc, #112]	; (8008750 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80086de:	401a      	ands	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4a1a      	ldr	r2, [pc, #104]	; (8008754 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80086ec:	401a      	ands	r2, r3
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	4313      	orrs	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a12      	ldr	r2, [pc, #72]	; (8008744 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d106      	bne.n	800870e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a15      	ldr	r2, [pc, #84]	; (8008758 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008704:	401a      	ands	r2, r3
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	223c      	movs	r2, #60	; 0x3c
 800871a:	2100      	movs	r1, #0
 800871c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	0018      	movs	r0, r3
 8008722:	46bd      	mov	sp, r7
 8008724:	b004      	add	sp, #16
 8008726:	bd80      	pop	{r7, pc}
 8008728:	fffffcff 	.word	0xfffffcff
 800872c:	fffffbff 	.word	0xfffffbff
 8008730:	fffff7ff 	.word	0xfffff7ff
 8008734:	ffffefff 	.word	0xffffefff
 8008738:	ffffdfff 	.word	0xffffdfff
 800873c:	ffffbfff 	.word	0xffffbfff
 8008740:	fff0ffff 	.word	0xfff0ffff
 8008744:	40012c00 	.word	0x40012c00
 8008748:	efffffff 	.word	0xefffffff
 800874c:	ff0fffff 	.word	0xff0fffff
 8008750:	feffffff 	.word	0xfeffffff
 8008754:	fdffffff 	.word	0xfdffffff
 8008758:	dfffffff 	.word	0xdfffffff

0800875c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008764:	46c0      	nop			; (mov r8, r8)
 8008766:	46bd      	mov	sp, r7
 8008768:	b002      	add	sp, #8
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008774:	46c0      	nop			; (mov r8, r8)
 8008776:	46bd      	mov	sp, r7
 8008778:	b002      	add	sp, #8
 800877a:	bd80      	pop	{r7, pc}

0800877c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008784:	46c0      	nop			; (mov r8, r8)
 8008786:	46bd      	mov	sp, r7
 8008788:	b002      	add	sp, #8
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e046      	b.n	800882c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2288      	movs	r2, #136	; 0x88
 80087a2:	589b      	ldr	r3, [r3, r2]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d107      	bne.n	80087b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2284      	movs	r2, #132	; 0x84
 80087ac:	2100      	movs	r1, #0
 80087ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7fc fa2a 	bl	8004c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2288      	movs	r2, #136	; 0x88
 80087bc:	2124      	movs	r1, #36	; 0x24
 80087be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2101      	movs	r1, #1
 80087cc:	438a      	bics	r2, r1
 80087ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	0018      	movs	r0, r3
 80087d4:	f000 f94e 	bl	8008a74 <UART_SetConfig>
 80087d8:	0003      	movs	r3, r0
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d101      	bne.n	80087e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e024      	b.n	800882c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	0018      	movs	r0, r3
 80087ee:	f000 fc97 	bl	8009120 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	490d      	ldr	r1, [pc, #52]	; (8008834 <HAL_UART_Init+0xa8>)
 80087fe:	400a      	ands	r2, r1
 8008800:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	212a      	movs	r1, #42	; 0x2a
 800880e:	438a      	bics	r2, r1
 8008810:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2101      	movs	r1, #1
 800881e:	430a      	orrs	r2, r1
 8008820:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	0018      	movs	r0, r3
 8008826:	f000 fd2f 	bl	8009288 <UART_CheckIdleState>
 800882a:	0003      	movs	r3, r0
}
 800882c:	0018      	movs	r0, r3
 800882e:	46bd      	mov	sp, r7
 8008830:	b002      	add	sp, #8
 8008832:	bd80      	pop	{r7, pc}
 8008834:	ffffb7ff 	.word	0xffffb7ff

08008838 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08a      	sub	sp, #40	; 0x28
 800883c:	af02      	add	r7, sp, #8
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	603b      	str	r3, [r7, #0]
 8008844:	1dbb      	adds	r3, r7, #6
 8008846:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2288      	movs	r2, #136	; 0x88
 800884c:	589b      	ldr	r3, [r3, r2]
 800884e:	2b20      	cmp	r3, #32
 8008850:	d000      	beq.n	8008854 <HAL_UART_Transmit+0x1c>
 8008852:	e088      	b.n	8008966 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <HAL_UART_Transmit+0x2a>
 800885a:	1dbb      	adds	r3, r7, #6
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e080      	b.n	8008968 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	689a      	ldr	r2, [r3, #8]
 800886a:	2380      	movs	r3, #128	; 0x80
 800886c:	015b      	lsls	r3, r3, #5
 800886e:	429a      	cmp	r2, r3
 8008870:	d109      	bne.n	8008886 <HAL_UART_Transmit+0x4e>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d105      	bne.n	8008886 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2201      	movs	r2, #1
 800887e:	4013      	ands	r3, r2
 8008880:	d001      	beq.n	8008886 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e070      	b.n	8008968 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2290      	movs	r2, #144	; 0x90
 800888a:	2100      	movs	r1, #0
 800888c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2288      	movs	r2, #136	; 0x88
 8008892:	2121      	movs	r1, #33	; 0x21
 8008894:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008896:	f7fc fd65 	bl	8005364 <HAL_GetTick>
 800889a:	0003      	movs	r3, r0
 800889c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	1dba      	adds	r2, r7, #6
 80088a2:	2154      	movs	r1, #84	; 0x54
 80088a4:	8812      	ldrh	r2, [r2, #0]
 80088a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	1dba      	adds	r2, r7, #6
 80088ac:	2156      	movs	r1, #86	; 0x56
 80088ae:	8812      	ldrh	r2, [r2, #0]
 80088b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689a      	ldr	r2, [r3, #8]
 80088b6:	2380      	movs	r3, #128	; 0x80
 80088b8:	015b      	lsls	r3, r3, #5
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d108      	bne.n	80088d0 <HAL_UART_Transmit+0x98>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d104      	bne.n	80088d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	61bb      	str	r3, [r7, #24]
 80088ce:	e003      	b.n	80088d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088d4:	2300      	movs	r3, #0
 80088d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088d8:	e02c      	b.n	8008934 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	0013      	movs	r3, r2
 80088e4:	2200      	movs	r2, #0
 80088e6:	2180      	movs	r1, #128	; 0x80
 80088e8:	f000 fd1c 	bl	8009324 <UART_WaitOnFlagUntilTimeout>
 80088ec:	1e03      	subs	r3, r0, #0
 80088ee:	d001      	beq.n	80088f4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e039      	b.n	8008968 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10b      	bne.n	8008912 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	001a      	movs	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	05d2      	lsls	r2, r2, #23
 8008906:	0dd2      	lsrs	r2, r2, #23
 8008908:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	3302      	adds	r3, #2
 800890e:	61bb      	str	r3, [r7, #24]
 8008910:	e007      	b.n	8008922 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	781a      	ldrb	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	3301      	adds	r3, #1
 8008920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2256      	movs	r2, #86	; 0x56
 8008926:	5a9b      	ldrh	r3, [r3, r2]
 8008928:	b29b      	uxth	r3, r3
 800892a:	3b01      	subs	r3, #1
 800892c:	b299      	uxth	r1, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2256      	movs	r2, #86	; 0x56
 8008932:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2256      	movs	r2, #86	; 0x56
 8008938:	5a9b      	ldrh	r3, [r3, r2]
 800893a:	b29b      	uxth	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1cc      	bne.n	80088da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	0013      	movs	r3, r2
 800894a:	2200      	movs	r2, #0
 800894c:	2140      	movs	r1, #64	; 0x40
 800894e:	f000 fce9 	bl	8009324 <UART_WaitOnFlagUntilTimeout>
 8008952:	1e03      	subs	r3, r0, #0
 8008954:	d001      	beq.n	800895a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e006      	b.n	8008968 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2288      	movs	r2, #136	; 0x88
 800895e:	2120      	movs	r1, #32
 8008960:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	e000      	b.n	8008968 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8008966:	2302      	movs	r3, #2
  }
}
 8008968:	0018      	movs	r0, r3
 800896a:	46bd      	mov	sp, r7
 800896c:	b008      	add	sp, #32
 800896e:	bd80      	pop	{r7, pc}

08008970 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	1dbb      	adds	r3, r7, #6
 800897c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	228c      	movs	r2, #140	; 0x8c
 8008982:	589b      	ldr	r3, [r3, r2]
 8008984:	2b20      	cmp	r3, #32
 8008986:	d14f      	bne.n	8008a28 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <HAL_UART_Receive_DMA+0x26>
 800898e:	1dbb      	adds	r3, r7, #6
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e047      	b.n	8008a2a <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	689a      	ldr	r2, [r3, #8]
 800899e:	2380      	movs	r3, #128	; 0x80
 80089a0:	015b      	lsls	r3, r3, #5
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d109      	bne.n	80089ba <HAL_UART_Receive_DMA+0x4a>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d105      	bne.n	80089ba <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2201      	movs	r2, #1
 80089b2:	4013      	ands	r3, r2
 80089b4:	d001      	beq.n	80089ba <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e037      	b.n	8008a2a <HAL_UART_Receive_DMA+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a1b      	ldr	r2, [pc, #108]	; (8008a34 <HAL_UART_Receive_DMA+0xc4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d025      	beq.n	8008a16 <HAL_UART_Receive_DMA+0xa6>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a1a      	ldr	r2, [pc, #104]	; (8008a38 <HAL_UART_Receive_DMA+0xc8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d020      	beq.n	8008a16 <HAL_UART_Receive_DMA+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	2380      	movs	r3, #128	; 0x80
 80089dc:	041b      	lsls	r3, r3, #16
 80089de:	4013      	ands	r3, r2
 80089e0:	d019      	beq.n	8008a16 <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089e2:	f3ef 8310 	mrs	r3, PRIMASK
 80089e6:	613b      	str	r3, [r7, #16]
  return(result);
 80089e8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089ea:	61fb      	str	r3, [r7, #28]
 80089ec:	2301      	movs	r3, #1
 80089ee:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f383 8810 	msr	PRIMASK, r3
}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2180      	movs	r1, #128	; 0x80
 8008a04:	04c9      	lsls	r1, r1, #19
 8008a06:	430a      	orrs	r2, r1
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	f383 8810 	msr	PRIMASK, r3
}
 8008a14:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008a16:	1dbb      	adds	r3, r7, #6
 8008a18:	881a      	ldrh	r2, [r3, #0]
 8008a1a:	68b9      	ldr	r1, [r7, #8]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	0018      	movs	r0, r3
 8008a20:	f000 fd48 	bl	80094b4 <UART_Start_Receive_DMA>
 8008a24:	0003      	movs	r3, r0
 8008a26:	e000      	b.n	8008a2a <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008a28:	2302      	movs	r3, #2
  }
}
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	b008      	add	sp, #32
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	40008000 	.word	0x40008000
 8008a38:	40008400 	.word	0x40008400

08008a3c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a44:	46c0      	nop			; (mov r8, r8)
 8008a46:	46bd      	mov	sp, r7
 8008a48:	b002      	add	sp, #8
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a54:	46c0      	nop			; (mov r8, r8)
 8008a56:	46bd      	mov	sp, r7
 8008a58:	b002      	add	sp, #8
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	000a      	movs	r2, r1
 8008a66:	1cbb      	adds	r3, r7, #2
 8008a68:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	b002      	add	sp, #8
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a74:	b5b0      	push	{r4, r5, r7, lr}
 8008a76:	b090      	sub	sp, #64	; 0x40
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a7c:	231a      	movs	r3, #26
 8008a7e:	2220      	movs	r2, #32
 8008a80:	189b      	adds	r3, r3, r2
 8008a82:	19db      	adds	r3, r3, r7
 8008a84:	2200      	movs	r2, #0
 8008a86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	431a      	orrs	r2, r3
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	431a      	orrs	r2, r3
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4ac1      	ldr	r2, [pc, #772]	; (8008dac <UART_SetConfig+0x338>)
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	0019      	movs	r1, r3
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4abc      	ldr	r2, [pc, #752]	; (8008db0 <UART_SetConfig+0x33c>)
 8008abe:	4013      	ands	r3, r2
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	68d9      	ldr	r1, [r3, #12]
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	0003      	movs	r3, r0
 8008acc:	430b      	orrs	r3, r1
 8008ace:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4ab6      	ldr	r2, [pc, #728]	; (8008db4 <UART_SetConfig+0x340>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d009      	beq.n	8008af4 <UART_SetConfig+0x80>
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4ab4      	ldr	r2, [pc, #720]	; (8008db8 <UART_SetConfig+0x344>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d004      	beq.n	8008af4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008af0:	4313      	orrs	r3, r2
 8008af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	4ab0      	ldr	r2, [pc, #704]	; (8008dbc <UART_SetConfig+0x348>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	0019      	movs	r1, r3
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b06:	430b      	orrs	r3, r1
 8008b08:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	220f      	movs	r2, #15
 8008b12:	4393      	bics	r3, r2
 8008b14:	0018      	movs	r0, r3
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	0003      	movs	r3, r0
 8008b20:	430b      	orrs	r3, r1
 8008b22:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4aa5      	ldr	r2, [pc, #660]	; (8008dc0 <UART_SetConfig+0x34c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d131      	bne.n	8008b92 <UART_SetConfig+0x11e>
 8008b2e:	4ba5      	ldr	r3, [pc, #660]	; (8008dc4 <UART_SetConfig+0x350>)
 8008b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b32:	2203      	movs	r2, #3
 8008b34:	4013      	ands	r3, r2
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d01d      	beq.n	8008b76 <UART_SetConfig+0x102>
 8008b3a:	d823      	bhi.n	8008b84 <UART_SetConfig+0x110>
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d00c      	beq.n	8008b5a <UART_SetConfig+0xe6>
 8008b40:	d820      	bhi.n	8008b84 <UART_SetConfig+0x110>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <UART_SetConfig+0xd8>
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d00e      	beq.n	8008b68 <UART_SetConfig+0xf4>
 8008b4a:	e01b      	b.n	8008b84 <UART_SetConfig+0x110>
 8008b4c:	231b      	movs	r3, #27
 8008b4e:	2220      	movs	r2, #32
 8008b50:	189b      	adds	r3, r3, r2
 8008b52:	19db      	adds	r3, r3, r7
 8008b54:	2200      	movs	r2, #0
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	e154      	b.n	8008e04 <UART_SetConfig+0x390>
 8008b5a:	231b      	movs	r3, #27
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	189b      	adds	r3, r3, r2
 8008b60:	19db      	adds	r3, r3, r7
 8008b62:	2202      	movs	r2, #2
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	e14d      	b.n	8008e04 <UART_SetConfig+0x390>
 8008b68:	231b      	movs	r3, #27
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	189b      	adds	r3, r3, r2
 8008b6e:	19db      	adds	r3, r3, r7
 8008b70:	2204      	movs	r2, #4
 8008b72:	701a      	strb	r2, [r3, #0]
 8008b74:	e146      	b.n	8008e04 <UART_SetConfig+0x390>
 8008b76:	231b      	movs	r3, #27
 8008b78:	2220      	movs	r2, #32
 8008b7a:	189b      	adds	r3, r3, r2
 8008b7c:	19db      	adds	r3, r3, r7
 8008b7e:	2208      	movs	r2, #8
 8008b80:	701a      	strb	r2, [r3, #0]
 8008b82:	e13f      	b.n	8008e04 <UART_SetConfig+0x390>
 8008b84:	231b      	movs	r3, #27
 8008b86:	2220      	movs	r2, #32
 8008b88:	189b      	adds	r3, r3, r2
 8008b8a:	19db      	adds	r3, r3, r7
 8008b8c:	2210      	movs	r2, #16
 8008b8e:	701a      	strb	r2, [r3, #0]
 8008b90:	e138      	b.n	8008e04 <UART_SetConfig+0x390>
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a8c      	ldr	r2, [pc, #560]	; (8008dc8 <UART_SetConfig+0x354>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d131      	bne.n	8008c00 <UART_SetConfig+0x18c>
 8008b9c:	4b89      	ldr	r3, [pc, #548]	; (8008dc4 <UART_SetConfig+0x350>)
 8008b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba0:	220c      	movs	r2, #12
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	2b0c      	cmp	r3, #12
 8008ba6:	d01d      	beq.n	8008be4 <UART_SetConfig+0x170>
 8008ba8:	d823      	bhi.n	8008bf2 <UART_SetConfig+0x17e>
 8008baa:	2b08      	cmp	r3, #8
 8008bac:	d00c      	beq.n	8008bc8 <UART_SetConfig+0x154>
 8008bae:	d820      	bhi.n	8008bf2 <UART_SetConfig+0x17e>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <UART_SetConfig+0x146>
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d00e      	beq.n	8008bd6 <UART_SetConfig+0x162>
 8008bb8:	e01b      	b.n	8008bf2 <UART_SetConfig+0x17e>
 8008bba:	231b      	movs	r3, #27
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	189b      	adds	r3, r3, r2
 8008bc0:	19db      	adds	r3, r3, r7
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	e11d      	b.n	8008e04 <UART_SetConfig+0x390>
 8008bc8:	231b      	movs	r3, #27
 8008bca:	2220      	movs	r2, #32
 8008bcc:	189b      	adds	r3, r3, r2
 8008bce:	19db      	adds	r3, r3, r7
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	701a      	strb	r2, [r3, #0]
 8008bd4:	e116      	b.n	8008e04 <UART_SetConfig+0x390>
 8008bd6:	231b      	movs	r3, #27
 8008bd8:	2220      	movs	r2, #32
 8008bda:	189b      	adds	r3, r3, r2
 8008bdc:	19db      	adds	r3, r3, r7
 8008bde:	2204      	movs	r2, #4
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	e10f      	b.n	8008e04 <UART_SetConfig+0x390>
 8008be4:	231b      	movs	r3, #27
 8008be6:	2220      	movs	r2, #32
 8008be8:	189b      	adds	r3, r3, r2
 8008bea:	19db      	adds	r3, r3, r7
 8008bec:	2208      	movs	r2, #8
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	e108      	b.n	8008e04 <UART_SetConfig+0x390>
 8008bf2:	231b      	movs	r3, #27
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	189b      	adds	r3, r3, r2
 8008bf8:	19db      	adds	r3, r3, r7
 8008bfa:	2210      	movs	r2, #16
 8008bfc:	701a      	strb	r2, [r3, #0]
 8008bfe:	e101      	b.n	8008e04 <UART_SetConfig+0x390>
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a71      	ldr	r2, [pc, #452]	; (8008dcc <UART_SetConfig+0x358>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d131      	bne.n	8008c6e <UART_SetConfig+0x1fa>
 8008c0a:	4b6e      	ldr	r3, [pc, #440]	; (8008dc4 <UART_SetConfig+0x350>)
 8008c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c0e:	2230      	movs	r2, #48	; 0x30
 8008c10:	4013      	ands	r3, r2
 8008c12:	2b30      	cmp	r3, #48	; 0x30
 8008c14:	d01d      	beq.n	8008c52 <UART_SetConfig+0x1de>
 8008c16:	d823      	bhi.n	8008c60 <UART_SetConfig+0x1ec>
 8008c18:	2b20      	cmp	r3, #32
 8008c1a:	d00c      	beq.n	8008c36 <UART_SetConfig+0x1c2>
 8008c1c:	d820      	bhi.n	8008c60 <UART_SetConfig+0x1ec>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <UART_SetConfig+0x1b4>
 8008c22:	2b10      	cmp	r3, #16
 8008c24:	d00e      	beq.n	8008c44 <UART_SetConfig+0x1d0>
 8008c26:	e01b      	b.n	8008c60 <UART_SetConfig+0x1ec>
 8008c28:	231b      	movs	r3, #27
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	189b      	adds	r3, r3, r2
 8008c2e:	19db      	adds	r3, r3, r7
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
 8008c34:	e0e6      	b.n	8008e04 <UART_SetConfig+0x390>
 8008c36:	231b      	movs	r3, #27
 8008c38:	2220      	movs	r2, #32
 8008c3a:	189b      	adds	r3, r3, r2
 8008c3c:	19db      	adds	r3, r3, r7
 8008c3e:	2202      	movs	r2, #2
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	e0df      	b.n	8008e04 <UART_SetConfig+0x390>
 8008c44:	231b      	movs	r3, #27
 8008c46:	2220      	movs	r2, #32
 8008c48:	189b      	adds	r3, r3, r2
 8008c4a:	19db      	adds	r3, r3, r7
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	701a      	strb	r2, [r3, #0]
 8008c50:	e0d8      	b.n	8008e04 <UART_SetConfig+0x390>
 8008c52:	231b      	movs	r3, #27
 8008c54:	2220      	movs	r2, #32
 8008c56:	189b      	adds	r3, r3, r2
 8008c58:	19db      	adds	r3, r3, r7
 8008c5a:	2208      	movs	r2, #8
 8008c5c:	701a      	strb	r2, [r3, #0]
 8008c5e:	e0d1      	b.n	8008e04 <UART_SetConfig+0x390>
 8008c60:	231b      	movs	r3, #27
 8008c62:	2220      	movs	r2, #32
 8008c64:	189b      	adds	r3, r3, r2
 8008c66:	19db      	adds	r3, r3, r7
 8008c68:	2210      	movs	r2, #16
 8008c6a:	701a      	strb	r2, [r3, #0]
 8008c6c:	e0ca      	b.n	8008e04 <UART_SetConfig+0x390>
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a57      	ldr	r2, [pc, #348]	; (8008dd0 <UART_SetConfig+0x35c>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d106      	bne.n	8008c86 <UART_SetConfig+0x212>
 8008c78:	231b      	movs	r3, #27
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	189b      	adds	r3, r3, r2
 8008c7e:	19db      	adds	r3, r3, r7
 8008c80:	2200      	movs	r2, #0
 8008c82:	701a      	strb	r2, [r3, #0]
 8008c84:	e0be      	b.n	8008e04 <UART_SetConfig+0x390>
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a52      	ldr	r2, [pc, #328]	; (8008dd4 <UART_SetConfig+0x360>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d106      	bne.n	8008c9e <UART_SetConfig+0x22a>
 8008c90:	231b      	movs	r3, #27
 8008c92:	2220      	movs	r2, #32
 8008c94:	189b      	adds	r3, r3, r2
 8008c96:	19db      	adds	r3, r3, r7
 8008c98:	2200      	movs	r2, #0
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	e0b2      	b.n	8008e04 <UART_SetConfig+0x390>
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a4d      	ldr	r2, [pc, #308]	; (8008dd8 <UART_SetConfig+0x364>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d106      	bne.n	8008cb6 <UART_SetConfig+0x242>
 8008ca8:	231b      	movs	r3, #27
 8008caa:	2220      	movs	r2, #32
 8008cac:	189b      	adds	r3, r3, r2
 8008cae:	19db      	adds	r3, r3, r7
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	e0a6      	b.n	8008e04 <UART_SetConfig+0x390>
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a3e      	ldr	r2, [pc, #248]	; (8008db4 <UART_SetConfig+0x340>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d13e      	bne.n	8008d3e <UART_SetConfig+0x2ca>
 8008cc0:	4b40      	ldr	r3, [pc, #256]	; (8008dc4 <UART_SetConfig+0x350>)
 8008cc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cc4:	23c0      	movs	r3, #192	; 0xc0
 8008cc6:	011b      	lsls	r3, r3, #4
 8008cc8:	4013      	ands	r3, r2
 8008cca:	22c0      	movs	r2, #192	; 0xc0
 8008ccc:	0112      	lsls	r2, r2, #4
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d027      	beq.n	8008d22 <UART_SetConfig+0x2ae>
 8008cd2:	22c0      	movs	r2, #192	; 0xc0
 8008cd4:	0112      	lsls	r2, r2, #4
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d82a      	bhi.n	8008d30 <UART_SetConfig+0x2bc>
 8008cda:	2280      	movs	r2, #128	; 0x80
 8008cdc:	0112      	lsls	r2, r2, #4
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d011      	beq.n	8008d06 <UART_SetConfig+0x292>
 8008ce2:	2280      	movs	r2, #128	; 0x80
 8008ce4:	0112      	lsls	r2, r2, #4
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d822      	bhi.n	8008d30 <UART_SetConfig+0x2bc>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d004      	beq.n	8008cf8 <UART_SetConfig+0x284>
 8008cee:	2280      	movs	r2, #128	; 0x80
 8008cf0:	00d2      	lsls	r2, r2, #3
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00e      	beq.n	8008d14 <UART_SetConfig+0x2a0>
 8008cf6:	e01b      	b.n	8008d30 <UART_SetConfig+0x2bc>
 8008cf8:	231b      	movs	r3, #27
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	189b      	adds	r3, r3, r2
 8008cfe:	19db      	adds	r3, r3, r7
 8008d00:	2200      	movs	r2, #0
 8008d02:	701a      	strb	r2, [r3, #0]
 8008d04:	e07e      	b.n	8008e04 <UART_SetConfig+0x390>
 8008d06:	231b      	movs	r3, #27
 8008d08:	2220      	movs	r2, #32
 8008d0a:	189b      	adds	r3, r3, r2
 8008d0c:	19db      	adds	r3, r3, r7
 8008d0e:	2202      	movs	r2, #2
 8008d10:	701a      	strb	r2, [r3, #0]
 8008d12:	e077      	b.n	8008e04 <UART_SetConfig+0x390>
 8008d14:	231b      	movs	r3, #27
 8008d16:	2220      	movs	r2, #32
 8008d18:	189b      	adds	r3, r3, r2
 8008d1a:	19db      	adds	r3, r3, r7
 8008d1c:	2204      	movs	r2, #4
 8008d1e:	701a      	strb	r2, [r3, #0]
 8008d20:	e070      	b.n	8008e04 <UART_SetConfig+0x390>
 8008d22:	231b      	movs	r3, #27
 8008d24:	2220      	movs	r2, #32
 8008d26:	189b      	adds	r3, r3, r2
 8008d28:	19db      	adds	r3, r3, r7
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	701a      	strb	r2, [r3, #0]
 8008d2e:	e069      	b.n	8008e04 <UART_SetConfig+0x390>
 8008d30:	231b      	movs	r3, #27
 8008d32:	2220      	movs	r2, #32
 8008d34:	189b      	adds	r3, r3, r2
 8008d36:	19db      	adds	r3, r3, r7
 8008d38:	2210      	movs	r2, #16
 8008d3a:	701a      	strb	r2, [r3, #0]
 8008d3c:	e062      	b.n	8008e04 <UART_SetConfig+0x390>
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a1d      	ldr	r2, [pc, #116]	; (8008db8 <UART_SetConfig+0x344>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d157      	bne.n	8008df8 <UART_SetConfig+0x384>
 8008d48:	4b1e      	ldr	r3, [pc, #120]	; (8008dc4 <UART_SetConfig+0x350>)
 8008d4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d4c:	23c0      	movs	r3, #192	; 0xc0
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4013      	ands	r3, r2
 8008d52:	22c0      	movs	r2, #192	; 0xc0
 8008d54:	0092      	lsls	r2, r2, #2
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d040      	beq.n	8008ddc <UART_SetConfig+0x368>
 8008d5a:	22c0      	movs	r2, #192	; 0xc0
 8008d5c:	0092      	lsls	r2, r2, #2
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d843      	bhi.n	8008dea <UART_SetConfig+0x376>
 8008d62:	2280      	movs	r2, #128	; 0x80
 8008d64:	0092      	lsls	r2, r2, #2
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d011      	beq.n	8008d8e <UART_SetConfig+0x31a>
 8008d6a:	2280      	movs	r2, #128	; 0x80
 8008d6c:	0092      	lsls	r2, r2, #2
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d83b      	bhi.n	8008dea <UART_SetConfig+0x376>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d004      	beq.n	8008d80 <UART_SetConfig+0x30c>
 8008d76:	2280      	movs	r2, #128	; 0x80
 8008d78:	0052      	lsls	r2, r2, #1
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00e      	beq.n	8008d9c <UART_SetConfig+0x328>
 8008d7e:	e034      	b.n	8008dea <UART_SetConfig+0x376>
 8008d80:	231b      	movs	r3, #27
 8008d82:	2220      	movs	r2, #32
 8008d84:	189b      	adds	r3, r3, r2
 8008d86:	19db      	adds	r3, r3, r7
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	e03a      	b.n	8008e04 <UART_SetConfig+0x390>
 8008d8e:	231b      	movs	r3, #27
 8008d90:	2220      	movs	r2, #32
 8008d92:	189b      	adds	r3, r3, r2
 8008d94:	19db      	adds	r3, r3, r7
 8008d96:	2202      	movs	r2, #2
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	e033      	b.n	8008e04 <UART_SetConfig+0x390>
 8008d9c:	231b      	movs	r3, #27
 8008d9e:	2220      	movs	r2, #32
 8008da0:	189b      	adds	r3, r3, r2
 8008da2:	19db      	adds	r3, r3, r7
 8008da4:	2204      	movs	r2, #4
 8008da6:	701a      	strb	r2, [r3, #0]
 8008da8:	e02c      	b.n	8008e04 <UART_SetConfig+0x390>
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	cfff69f3 	.word	0xcfff69f3
 8008db0:	ffffcfff 	.word	0xffffcfff
 8008db4:	40008000 	.word	0x40008000
 8008db8:	40008400 	.word	0x40008400
 8008dbc:	11fff4ff 	.word	0x11fff4ff
 8008dc0:	40013800 	.word	0x40013800
 8008dc4:	40021000 	.word	0x40021000
 8008dc8:	40004400 	.word	0x40004400
 8008dcc:	40004800 	.word	0x40004800
 8008dd0:	40004c00 	.word	0x40004c00
 8008dd4:	40005000 	.word	0x40005000
 8008dd8:	40013c00 	.word	0x40013c00
 8008ddc:	231b      	movs	r3, #27
 8008dde:	2220      	movs	r2, #32
 8008de0:	189b      	adds	r3, r3, r2
 8008de2:	19db      	adds	r3, r3, r7
 8008de4:	2208      	movs	r2, #8
 8008de6:	701a      	strb	r2, [r3, #0]
 8008de8:	e00c      	b.n	8008e04 <UART_SetConfig+0x390>
 8008dea:	231b      	movs	r3, #27
 8008dec:	2220      	movs	r2, #32
 8008dee:	189b      	adds	r3, r3, r2
 8008df0:	19db      	adds	r3, r3, r7
 8008df2:	2210      	movs	r2, #16
 8008df4:	701a      	strb	r2, [r3, #0]
 8008df6:	e005      	b.n	8008e04 <UART_SetConfig+0x390>
 8008df8:	231b      	movs	r3, #27
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	189b      	adds	r3, r3, r2
 8008dfe:	19db      	adds	r3, r3, r7
 8008e00:	2210      	movs	r2, #16
 8008e02:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4ac1      	ldr	r2, [pc, #772]	; (8009110 <UART_SetConfig+0x69c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d005      	beq.n	8008e1a <UART_SetConfig+0x3a6>
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4ac0      	ldr	r2, [pc, #768]	; (8009114 <UART_SetConfig+0x6a0>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d000      	beq.n	8008e1a <UART_SetConfig+0x3a6>
 8008e18:	e093      	b.n	8008f42 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e1a:	231b      	movs	r3, #27
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	189b      	adds	r3, r3, r2
 8008e20:	19db      	adds	r3, r3, r7
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d015      	beq.n	8008e54 <UART_SetConfig+0x3e0>
 8008e28:	dc18      	bgt.n	8008e5c <UART_SetConfig+0x3e8>
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d00d      	beq.n	8008e4a <UART_SetConfig+0x3d6>
 8008e2e:	dc15      	bgt.n	8008e5c <UART_SetConfig+0x3e8>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <UART_SetConfig+0x3c6>
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d005      	beq.n	8008e44 <UART_SetConfig+0x3d0>
 8008e38:	e010      	b.n	8008e5c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e3a:	f7fe fa3d 	bl	80072b8 <HAL_RCC_GetPCLK1Freq>
 8008e3e:	0003      	movs	r3, r0
 8008e40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e42:	e014      	b.n	8008e6e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e44:	4bb4      	ldr	r3, [pc, #720]	; (8009118 <UART_SetConfig+0x6a4>)
 8008e46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e48:	e011      	b.n	8008e6e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e4a:	f7fe f9a9 	bl	80071a0 <HAL_RCC_GetSysClockFreq>
 8008e4e:	0003      	movs	r3, r0
 8008e50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e52:	e00c      	b.n	8008e6e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e54:	2380      	movs	r3, #128	; 0x80
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e5a:	e008      	b.n	8008e6e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008e60:	231a      	movs	r3, #26
 8008e62:	2220      	movs	r2, #32
 8008e64:	189b      	adds	r3, r3, r2
 8008e66:	19db      	adds	r3, r3, r7
 8008e68:	2201      	movs	r2, #1
 8008e6a:	701a      	strb	r2, [r3, #0]
        break;
 8008e6c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d100      	bne.n	8008e76 <UART_SetConfig+0x402>
 8008e74:	e135      	b.n	80090e2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e7a:	4ba8      	ldr	r3, [pc, #672]	; (800911c <UART_SetConfig+0x6a8>)
 8008e7c:	0052      	lsls	r2, r2, #1
 8008e7e:	5ad3      	ldrh	r3, [r2, r3]
 8008e80:	0019      	movs	r1, r3
 8008e82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008e84:	f7f7 f966 	bl	8000154 <__udivsi3>
 8008e88:	0003      	movs	r3, r0
 8008e8a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	0013      	movs	r3, r2
 8008e92:	005b      	lsls	r3, r3, #1
 8008e94:	189b      	adds	r3, r3, r2
 8008e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d305      	bcc.n	8008ea8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d906      	bls.n	8008eb6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8008ea8:	231a      	movs	r3, #26
 8008eaa:	2220      	movs	r2, #32
 8008eac:	189b      	adds	r3, r3, r2
 8008eae:	19db      	adds	r3, r3, r7
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	701a      	strb	r2, [r3, #0]
 8008eb4:	e044      	b.n	8008f40 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb8:	61bb      	str	r3, [r7, #24]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61fb      	str	r3, [r7, #28]
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ec2:	4b96      	ldr	r3, [pc, #600]	; (800911c <UART_SetConfig+0x6a8>)
 8008ec4:	0052      	lsls	r2, r2, #1
 8008ec6:	5ad3      	ldrh	r3, [r2, r3]
 8008ec8:	613b      	str	r3, [r7, #16]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	69b8      	ldr	r0, [r7, #24]
 8008ed4:	69f9      	ldr	r1, [r7, #28]
 8008ed6:	f7f7 fb2b 	bl	8000530 <__aeabi_uldivmod>
 8008eda:	0002      	movs	r2, r0
 8008edc:	000b      	movs	r3, r1
 8008ede:	0e11      	lsrs	r1, r2, #24
 8008ee0:	021d      	lsls	r5, r3, #8
 8008ee2:	430d      	orrs	r5, r1
 8008ee4:	0214      	lsls	r4, r2, #8
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	085b      	lsrs	r3, r3, #1
 8008eec:	60bb      	str	r3, [r7, #8]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	68b8      	ldr	r0, [r7, #8]
 8008ef4:	68f9      	ldr	r1, [r7, #12]
 8008ef6:	1900      	adds	r0, r0, r4
 8008ef8:	4169      	adcs	r1, r5
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	603b      	str	r3, [r7, #0]
 8008f00:	2300      	movs	r3, #0
 8008f02:	607b      	str	r3, [r7, #4]
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f7f7 fb12 	bl	8000530 <__aeabi_uldivmod>
 8008f0c:	0002      	movs	r2, r0
 8008f0e:	000b      	movs	r3, r1
 8008f10:	0013      	movs	r3, r2
 8008f12:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f16:	23c0      	movs	r3, #192	; 0xc0
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d309      	bcc.n	8008f32 <UART_SetConfig+0x4be>
 8008f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f20:	2380      	movs	r3, #128	; 0x80
 8008f22:	035b      	lsls	r3, r3, #13
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d204      	bcs.n	8008f32 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f2e:	60da      	str	r2, [r3, #12]
 8008f30:	e006      	b.n	8008f40 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8008f32:	231a      	movs	r3, #26
 8008f34:	2220      	movs	r2, #32
 8008f36:	189b      	adds	r3, r3, r2
 8008f38:	19db      	adds	r3, r3, r7
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8008f3e:	e0d0      	b.n	80090e2 <UART_SetConfig+0x66e>
 8008f40:	e0cf      	b.n	80090e2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	69da      	ldr	r2, [r3, #28]
 8008f46:	2380      	movs	r3, #128	; 0x80
 8008f48:	021b      	lsls	r3, r3, #8
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d000      	beq.n	8008f50 <UART_SetConfig+0x4dc>
 8008f4e:	e070      	b.n	8009032 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8008f50:	231b      	movs	r3, #27
 8008f52:	2220      	movs	r2, #32
 8008f54:	189b      	adds	r3, r3, r2
 8008f56:	19db      	adds	r3, r3, r7
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	2b08      	cmp	r3, #8
 8008f5c:	d015      	beq.n	8008f8a <UART_SetConfig+0x516>
 8008f5e:	dc18      	bgt.n	8008f92 <UART_SetConfig+0x51e>
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d00d      	beq.n	8008f80 <UART_SetConfig+0x50c>
 8008f64:	dc15      	bgt.n	8008f92 <UART_SetConfig+0x51e>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <UART_SetConfig+0x4fc>
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d005      	beq.n	8008f7a <UART_SetConfig+0x506>
 8008f6e:	e010      	b.n	8008f92 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f70:	f7fe f9a2 	bl	80072b8 <HAL_RCC_GetPCLK1Freq>
 8008f74:	0003      	movs	r3, r0
 8008f76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f78:	e014      	b.n	8008fa4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f7a:	4b67      	ldr	r3, [pc, #412]	; (8009118 <UART_SetConfig+0x6a4>)
 8008f7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f7e:	e011      	b.n	8008fa4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f80:	f7fe f90e 	bl	80071a0 <HAL_RCC_GetSysClockFreq>
 8008f84:	0003      	movs	r3, r0
 8008f86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f88:	e00c      	b.n	8008fa4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f8a:	2380      	movs	r3, #128	; 0x80
 8008f8c:	021b      	lsls	r3, r3, #8
 8008f8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f90:	e008      	b.n	8008fa4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008f96:	231a      	movs	r3, #26
 8008f98:	2220      	movs	r2, #32
 8008f9a:	189b      	adds	r3, r3, r2
 8008f9c:	19db      	adds	r3, r3, r7
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	701a      	strb	r2, [r3, #0]
        break;
 8008fa2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d100      	bne.n	8008fac <UART_SetConfig+0x538>
 8008faa:	e09a      	b.n	80090e2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fb0:	4b5a      	ldr	r3, [pc, #360]	; (800911c <UART_SetConfig+0x6a8>)
 8008fb2:	0052      	lsls	r2, r2, #1
 8008fb4:	5ad3      	ldrh	r3, [r2, r3]
 8008fb6:	0019      	movs	r1, r3
 8008fb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008fba:	f7f7 f8cb 	bl	8000154 <__udivsi3>
 8008fbe:	0003      	movs	r3, r0
 8008fc0:	005a      	lsls	r2, r3, #1
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	085b      	lsrs	r3, r3, #1
 8008fc8:	18d2      	adds	r2, r2, r3
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	0019      	movs	r1, r3
 8008fd0:	0010      	movs	r0, r2
 8008fd2:	f7f7 f8bf 	bl	8000154 <__udivsi3>
 8008fd6:	0003      	movs	r3, r0
 8008fd8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	2b0f      	cmp	r3, #15
 8008fde:	d921      	bls.n	8009024 <UART_SetConfig+0x5b0>
 8008fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe2:	2380      	movs	r3, #128	; 0x80
 8008fe4:	025b      	lsls	r3, r3, #9
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d21c      	bcs.n	8009024 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	200e      	movs	r0, #14
 8008ff0:	2420      	movs	r4, #32
 8008ff2:	1903      	adds	r3, r0, r4
 8008ff4:	19db      	adds	r3, r3, r7
 8008ff6:	210f      	movs	r1, #15
 8008ff8:	438a      	bics	r2, r1
 8008ffa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffe:	085b      	lsrs	r3, r3, #1
 8009000:	b29b      	uxth	r3, r3
 8009002:	2207      	movs	r2, #7
 8009004:	4013      	ands	r3, r2
 8009006:	b299      	uxth	r1, r3
 8009008:	1903      	adds	r3, r0, r4
 800900a:	19db      	adds	r3, r3, r7
 800900c:	1902      	adds	r2, r0, r4
 800900e:	19d2      	adds	r2, r2, r7
 8009010:	8812      	ldrh	r2, [r2, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	1902      	adds	r2, r0, r4
 800901c:	19d2      	adds	r2, r2, r7
 800901e:	8812      	ldrh	r2, [r2, #0]
 8009020:	60da      	str	r2, [r3, #12]
 8009022:	e05e      	b.n	80090e2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8009024:	231a      	movs	r3, #26
 8009026:	2220      	movs	r2, #32
 8009028:	189b      	adds	r3, r3, r2
 800902a:	19db      	adds	r3, r3, r7
 800902c:	2201      	movs	r2, #1
 800902e:	701a      	strb	r2, [r3, #0]
 8009030:	e057      	b.n	80090e2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009032:	231b      	movs	r3, #27
 8009034:	2220      	movs	r2, #32
 8009036:	189b      	adds	r3, r3, r2
 8009038:	19db      	adds	r3, r3, r7
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	2b08      	cmp	r3, #8
 800903e:	d015      	beq.n	800906c <UART_SetConfig+0x5f8>
 8009040:	dc18      	bgt.n	8009074 <UART_SetConfig+0x600>
 8009042:	2b04      	cmp	r3, #4
 8009044:	d00d      	beq.n	8009062 <UART_SetConfig+0x5ee>
 8009046:	dc15      	bgt.n	8009074 <UART_SetConfig+0x600>
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <UART_SetConfig+0x5de>
 800904c:	2b02      	cmp	r3, #2
 800904e:	d005      	beq.n	800905c <UART_SetConfig+0x5e8>
 8009050:	e010      	b.n	8009074 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009052:	f7fe f931 	bl	80072b8 <HAL_RCC_GetPCLK1Freq>
 8009056:	0003      	movs	r3, r0
 8009058:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800905a:	e014      	b.n	8009086 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800905c:	4b2e      	ldr	r3, [pc, #184]	; (8009118 <UART_SetConfig+0x6a4>)
 800905e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009060:	e011      	b.n	8009086 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009062:	f7fe f89d 	bl	80071a0 <HAL_RCC_GetSysClockFreq>
 8009066:	0003      	movs	r3, r0
 8009068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800906a:	e00c      	b.n	8009086 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800906c:	2380      	movs	r3, #128	; 0x80
 800906e:	021b      	lsls	r3, r3, #8
 8009070:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009072:	e008      	b.n	8009086 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8009074:	2300      	movs	r3, #0
 8009076:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8009078:	231a      	movs	r3, #26
 800907a:	2220      	movs	r2, #32
 800907c:	189b      	adds	r3, r3, r2
 800907e:	19db      	adds	r3, r3, r7
 8009080:	2201      	movs	r2, #1
 8009082:	701a      	strb	r2, [r3, #0]
        break;
 8009084:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009088:	2b00      	cmp	r3, #0
 800908a:	d02a      	beq.n	80090e2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009090:	4b22      	ldr	r3, [pc, #136]	; (800911c <UART_SetConfig+0x6a8>)
 8009092:	0052      	lsls	r2, r2, #1
 8009094:	5ad3      	ldrh	r3, [r2, r3]
 8009096:	0019      	movs	r1, r3
 8009098:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800909a:	f7f7 f85b 	bl	8000154 <__udivsi3>
 800909e:	0003      	movs	r3, r0
 80090a0:	001a      	movs	r2, r3
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	085b      	lsrs	r3, r3, #1
 80090a8:	18d2      	adds	r2, r2, r3
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	0019      	movs	r1, r3
 80090b0:	0010      	movs	r0, r2
 80090b2:	f7f7 f84f 	bl	8000154 <__udivsi3>
 80090b6:	0003      	movs	r3, r0
 80090b8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	2b0f      	cmp	r3, #15
 80090be:	d90a      	bls.n	80090d6 <UART_SetConfig+0x662>
 80090c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090c2:	2380      	movs	r3, #128	; 0x80
 80090c4:	025b      	lsls	r3, r3, #9
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d205      	bcs.n	80090d6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	60da      	str	r2, [r3, #12]
 80090d4:	e005      	b.n	80090e2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80090d6:	231a      	movs	r3, #26
 80090d8:	2220      	movs	r2, #32
 80090da:	189b      	adds	r3, r3, r2
 80090dc:	19db      	adds	r3, r3, r7
 80090de:	2201      	movs	r2, #1
 80090e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	226a      	movs	r2, #106	; 0x6a
 80090e6:	2101      	movs	r1, #1
 80090e8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	2268      	movs	r2, #104	; 0x68
 80090ee:	2101      	movs	r1, #1
 80090f0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	2200      	movs	r2, #0
 80090f6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	2200      	movs	r2, #0
 80090fc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80090fe:	231a      	movs	r3, #26
 8009100:	2220      	movs	r2, #32
 8009102:	189b      	adds	r3, r3, r2
 8009104:	19db      	adds	r3, r3, r7
 8009106:	781b      	ldrb	r3, [r3, #0]
}
 8009108:	0018      	movs	r0, r3
 800910a:	46bd      	mov	sp, r7
 800910c:	b010      	add	sp, #64	; 0x40
 800910e:	bdb0      	pop	{r4, r5, r7, pc}
 8009110:	40008000 	.word	0x40008000
 8009114:	40008400 	.word	0x40008400
 8009118:	00f42400 	.word	0x00f42400
 800911c:	0800fa50 	.word	0x0800fa50

08009120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912c:	2201      	movs	r2, #1
 800912e:	4013      	ands	r3, r2
 8009130:	d00b      	beq.n	800914a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	4a4a      	ldr	r2, [pc, #296]	; (8009264 <UART_AdvFeatureConfig+0x144>)
 800913a:	4013      	ands	r3, r2
 800913c:	0019      	movs	r1, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	430a      	orrs	r2, r1
 8009148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914e:	2202      	movs	r2, #2
 8009150:	4013      	ands	r3, r2
 8009152:	d00b      	beq.n	800916c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	4a43      	ldr	r2, [pc, #268]	; (8009268 <UART_AdvFeatureConfig+0x148>)
 800915c:	4013      	ands	r3, r2
 800915e:	0019      	movs	r1, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	2204      	movs	r2, #4
 8009172:	4013      	ands	r3, r2
 8009174:	d00b      	beq.n	800918e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	4a3b      	ldr	r2, [pc, #236]	; (800926c <UART_AdvFeatureConfig+0x14c>)
 800917e:	4013      	ands	r3, r2
 8009180:	0019      	movs	r1, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009192:	2208      	movs	r2, #8
 8009194:	4013      	ands	r3, r2
 8009196:	d00b      	beq.n	80091b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	4a34      	ldr	r2, [pc, #208]	; (8009270 <UART_AdvFeatureConfig+0x150>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	0019      	movs	r1, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b4:	2210      	movs	r2, #16
 80091b6:	4013      	ands	r3, r2
 80091b8:	d00b      	beq.n	80091d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	4a2c      	ldr	r2, [pc, #176]	; (8009274 <UART_AdvFeatureConfig+0x154>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	0019      	movs	r1, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d6:	2220      	movs	r2, #32
 80091d8:	4013      	ands	r3, r2
 80091da:	d00b      	beq.n	80091f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	4a25      	ldr	r2, [pc, #148]	; (8009278 <UART_AdvFeatureConfig+0x158>)
 80091e4:	4013      	ands	r3, r2
 80091e6:	0019      	movs	r1, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	430a      	orrs	r2, r1
 80091f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f8:	2240      	movs	r2, #64	; 0x40
 80091fa:	4013      	ands	r3, r2
 80091fc:	d01d      	beq.n	800923a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	4a1d      	ldr	r2, [pc, #116]	; (800927c <UART_AdvFeatureConfig+0x15c>)
 8009206:	4013      	ands	r3, r2
 8009208:	0019      	movs	r1, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	430a      	orrs	r2, r1
 8009214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800921a:	2380      	movs	r3, #128	; 0x80
 800921c:	035b      	lsls	r3, r3, #13
 800921e:	429a      	cmp	r2, r3
 8009220:	d10b      	bne.n	800923a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4a15      	ldr	r2, [pc, #84]	; (8009280 <UART_AdvFeatureConfig+0x160>)
 800922a:	4013      	ands	r3, r2
 800922c:	0019      	movs	r1, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	2280      	movs	r2, #128	; 0x80
 8009240:	4013      	ands	r3, r2
 8009242:	d00b      	beq.n	800925c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	4a0e      	ldr	r2, [pc, #56]	; (8009284 <UART_AdvFeatureConfig+0x164>)
 800924c:	4013      	ands	r3, r2
 800924e:	0019      	movs	r1, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	430a      	orrs	r2, r1
 800925a:	605a      	str	r2, [r3, #4]
  }
}
 800925c:	46c0      	nop			; (mov r8, r8)
 800925e:	46bd      	mov	sp, r7
 8009260:	b002      	add	sp, #8
 8009262:	bd80      	pop	{r7, pc}
 8009264:	fffdffff 	.word	0xfffdffff
 8009268:	fffeffff 	.word	0xfffeffff
 800926c:	fffbffff 	.word	0xfffbffff
 8009270:	ffff7fff 	.word	0xffff7fff
 8009274:	ffffefff 	.word	0xffffefff
 8009278:	ffffdfff 	.word	0xffffdfff
 800927c:	ffefffff 	.word	0xffefffff
 8009280:	ff9fffff 	.word	0xff9fffff
 8009284:	fff7ffff 	.word	0xfff7ffff

08009288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af02      	add	r7, sp, #8
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2290      	movs	r2, #144	; 0x90
 8009294:	2100      	movs	r1, #0
 8009296:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009298:	f7fc f864 	bl	8005364 <HAL_GetTick>
 800929c:	0003      	movs	r3, r0
 800929e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2208      	movs	r2, #8
 80092a8:	4013      	ands	r3, r2
 80092aa:	2b08      	cmp	r3, #8
 80092ac:	d10c      	bne.n	80092c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2280      	movs	r2, #128	; 0x80
 80092b2:	0391      	lsls	r1, r2, #14
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	4a1a      	ldr	r2, [pc, #104]	; (8009320 <UART_CheckIdleState+0x98>)
 80092b8:	9200      	str	r2, [sp, #0]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f000 f832 	bl	8009324 <UART_WaitOnFlagUntilTimeout>
 80092c0:	1e03      	subs	r3, r0, #0
 80092c2:	d001      	beq.n	80092c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e026      	b.n	8009316 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2204      	movs	r2, #4
 80092d0:	4013      	ands	r3, r2
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	d10c      	bne.n	80092f0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2280      	movs	r2, #128	; 0x80
 80092da:	03d1      	lsls	r1, r2, #15
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	4a10      	ldr	r2, [pc, #64]	; (8009320 <UART_CheckIdleState+0x98>)
 80092e0:	9200      	str	r2, [sp, #0]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f000 f81e 	bl	8009324 <UART_WaitOnFlagUntilTimeout>
 80092e8:	1e03      	subs	r3, r0, #0
 80092ea:	d001      	beq.n	80092f0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e012      	b.n	8009316 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2288      	movs	r2, #136	; 0x88
 80092f4:	2120      	movs	r1, #32
 80092f6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	228c      	movs	r2, #140	; 0x8c
 80092fc:	2120      	movs	r1, #32
 80092fe:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2284      	movs	r2, #132	; 0x84
 8009310:	2100      	movs	r1, #0
 8009312:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	0018      	movs	r0, r3
 8009318:	46bd      	mov	sp, r7
 800931a:	b004      	add	sp, #16
 800931c:	bd80      	pop	{r7, pc}
 800931e:	46c0      	nop			; (mov r8, r8)
 8009320:	01ffffff 	.word	0x01ffffff

08009324 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b094      	sub	sp, #80	; 0x50
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	1dfb      	adds	r3, r7, #7
 8009332:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009334:	e0a7      	b.n	8009486 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009338:	3301      	adds	r3, #1
 800933a:	d100      	bne.n	800933e <UART_WaitOnFlagUntilTimeout+0x1a>
 800933c:	e0a3      	b.n	8009486 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800933e:	f7fc f811 	bl	8005364 <HAL_GetTick>
 8009342:	0002      	movs	r2, r0
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800934a:	429a      	cmp	r2, r3
 800934c:	d302      	bcc.n	8009354 <UART_WaitOnFlagUntilTimeout+0x30>
 800934e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009350:	2b00      	cmp	r3, #0
 8009352:	d13f      	bne.n	80093d4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009354:	f3ef 8310 	mrs	r3, PRIMASK
 8009358:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800935c:	647b      	str	r3, [r7, #68]	; 0x44
 800935e:	2301      	movs	r3, #1
 8009360:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009364:	f383 8810 	msr	PRIMASK, r3
}
 8009368:	46c0      	nop			; (mov r8, r8)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	494e      	ldr	r1, [pc, #312]	; (80094b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009376:	400a      	ands	r2, r1
 8009378:	601a      	str	r2, [r3, #0]
 800937a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800937c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	f383 8810 	msr	PRIMASK, r3
}
 8009384:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009386:	f3ef 8310 	mrs	r3, PRIMASK
 800938a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800938c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800938e:	643b      	str	r3, [r7, #64]	; 0x40
 8009390:	2301      	movs	r3, #1
 8009392:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	f383 8810 	msr	PRIMASK, r3
}
 800939a:	46c0      	nop			; (mov r8, r8)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2101      	movs	r1, #1
 80093a8:	438a      	bics	r2, r1
 80093aa:	609a      	str	r2, [r3, #8]
 80093ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b2:	f383 8810 	msr	PRIMASK, r3
}
 80093b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2288      	movs	r2, #136	; 0x88
 80093bc:	2120      	movs	r1, #32
 80093be:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	228c      	movs	r2, #140	; 0x8c
 80093c4:	2120      	movs	r1, #32
 80093c6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2284      	movs	r2, #132	; 0x84
 80093cc:	2100      	movs	r1, #0
 80093ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e069      	b.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2204      	movs	r2, #4
 80093dc:	4013      	ands	r3, r2
 80093de:	d052      	beq.n	8009486 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	69da      	ldr	r2, [r3, #28]
 80093e6:	2380      	movs	r3, #128	; 0x80
 80093e8:	011b      	lsls	r3, r3, #4
 80093ea:	401a      	ands	r2, r3
 80093ec:	2380      	movs	r3, #128	; 0x80
 80093ee:	011b      	lsls	r3, r3, #4
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d148      	bne.n	8009486 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2280      	movs	r2, #128	; 0x80
 80093fa:	0112      	lsls	r2, r2, #4
 80093fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009402:	613b      	str	r3, [r7, #16]
  return(result);
 8009404:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009408:	2301      	movs	r3, #1
 800940a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f383 8810 	msr	PRIMASK, r3
}
 8009412:	46c0      	nop			; (mov r8, r8)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4924      	ldr	r1, [pc, #144]	; (80094b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009420:	400a      	ands	r2, r1
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009426:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	f383 8810 	msr	PRIMASK, r3
}
 800942e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009430:	f3ef 8310 	mrs	r3, PRIMASK
 8009434:	61fb      	str	r3, [r7, #28]
  return(result);
 8009436:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009438:	64bb      	str	r3, [r7, #72]	; 0x48
 800943a:	2301      	movs	r3, #1
 800943c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	f383 8810 	msr	PRIMASK, r3
}
 8009444:	46c0      	nop			; (mov r8, r8)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689a      	ldr	r2, [r3, #8]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2101      	movs	r1, #1
 8009452:	438a      	bics	r2, r1
 8009454:	609a      	str	r2, [r3, #8]
 8009456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	f383 8810 	msr	PRIMASK, r3
}
 8009460:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2288      	movs	r2, #136	; 0x88
 8009466:	2120      	movs	r1, #32
 8009468:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	228c      	movs	r2, #140	; 0x8c
 800946e:	2120      	movs	r1, #32
 8009470:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2290      	movs	r2, #144	; 0x90
 8009476:	2120      	movs	r1, #32
 8009478:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2284      	movs	r2, #132	; 0x84
 800947e:	2100      	movs	r1, #0
 8009480:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e010      	b.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	69db      	ldr	r3, [r3, #28]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	4013      	ands	r3, r2
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	425a      	negs	r2, r3
 8009496:	4153      	adcs	r3, r2
 8009498:	b2db      	uxtb	r3, r3
 800949a:	001a      	movs	r2, r3
 800949c:	1dfb      	adds	r3, r7, #7
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d100      	bne.n	80094a6 <UART_WaitOnFlagUntilTimeout+0x182>
 80094a4:	e747      	b.n	8009336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	0018      	movs	r0, r3
 80094aa:	46bd      	mov	sp, r7
 80094ac:	b014      	add	sp, #80	; 0x50
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	fffffe5f 	.word	0xfffffe5f

080094b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b090      	sub	sp, #64	; 0x40
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	1dbb      	adds	r3, r7, #6
 80094c0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	1dba      	adds	r2, r7, #6
 80094cc:	215c      	movs	r1, #92	; 0x5c
 80094ce:	8812      	ldrh	r2, [r2, #0]
 80094d0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2290      	movs	r2, #144	; 0x90
 80094d6:	2100      	movs	r1, #0
 80094d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	228c      	movs	r2, #140	; 0x8c
 80094de:	2122      	movs	r1, #34	; 0x22
 80094e0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2280      	movs	r2, #128	; 0x80
 80094e6:	589b      	ldr	r3, [r3, r2]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d02d      	beq.n	8009548 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2280      	movs	r2, #128	; 0x80
 80094f0:	589b      	ldr	r3, [r3, r2]
 80094f2:	4a40      	ldr	r2, [pc, #256]	; (80095f4 <UART_Start_Receive_DMA+0x140>)
 80094f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2280      	movs	r2, #128	; 0x80
 80094fa:	589b      	ldr	r3, [r3, r2]
 80094fc:	4a3e      	ldr	r2, [pc, #248]	; (80095f8 <UART_Start_Receive_DMA+0x144>)
 80094fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2280      	movs	r2, #128	; 0x80
 8009504:	589b      	ldr	r3, [r3, r2]
 8009506:	4a3d      	ldr	r2, [pc, #244]	; (80095fc <UART_Start_Receive_DMA+0x148>)
 8009508:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2280      	movs	r2, #128	; 0x80
 800950e:	589b      	ldr	r3, [r3, r2]
 8009510:	2200      	movs	r2, #0
 8009512:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2280      	movs	r2, #128	; 0x80
 8009518:	5898      	ldr	r0, [r3, r2]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3324      	adds	r3, #36	; 0x24
 8009520:	0019      	movs	r1, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009526:	001a      	movs	r2, r3
 8009528:	1dbb      	adds	r3, r7, #6
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	f7fc fcd8 	bl	8005ee0 <HAL_DMA_Start_IT>
 8009530:	1e03      	subs	r3, r0, #0
 8009532:	d009      	beq.n	8009548 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2290      	movs	r2, #144	; 0x90
 8009538:	2110      	movs	r1, #16
 800953a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	228c      	movs	r2, #140	; 0x8c
 8009540:	2120      	movs	r1, #32
 8009542:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e050      	b.n	80095ea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d019      	beq.n	8009584 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009550:	f3ef 8310 	mrs	r3, PRIMASK
 8009554:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800955a:	2301      	movs	r3, #1
 800955c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800955e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009560:	f383 8810 	msr	PRIMASK, r3
}
 8009564:	46c0      	nop			; (mov r8, r8)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2180      	movs	r1, #128	; 0x80
 8009572:	0049      	lsls	r1, r1, #1
 8009574:	430a      	orrs	r2, r1
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	f383 8810 	msr	PRIMASK, r3
}
 8009582:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009584:	f3ef 8310 	mrs	r3, PRIMASK
 8009588:	613b      	str	r3, [r7, #16]
  return(result);
 800958a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958c:	63bb      	str	r3, [r7, #56]	; 0x38
 800958e:	2301      	movs	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f383 8810 	msr	PRIMASK, r3
}
 8009598:	46c0      	nop			; (mov r8, r8)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689a      	ldr	r2, [r3, #8]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2101      	movs	r1, #1
 80095a6:	430a      	orrs	r2, r1
 80095a8:	609a      	str	r2, [r3, #8]
 80095aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	f383 8810 	msr	PRIMASK, r3
}
 80095b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095b6:	f3ef 8310 	mrs	r3, PRIMASK
 80095ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80095bc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095be:	637b      	str	r3, [r7, #52]	; 0x34
 80095c0:	2301      	movs	r3, #1
 80095c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c4:	6a3b      	ldr	r3, [r7, #32]
 80095c6:	f383 8810 	msr	PRIMASK, r3
}
 80095ca:	46c0      	nop			; (mov r8, r8)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689a      	ldr	r2, [r3, #8]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2140      	movs	r1, #64	; 0x40
 80095d8:	430a      	orrs	r2, r1
 80095da:	609a      	str	r2, [r3, #8]
 80095dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	f383 8810 	msr	PRIMASK, r3
}
 80095e6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	0018      	movs	r0, r3
 80095ec:	46bd      	mov	sp, r7
 80095ee:	b010      	add	sp, #64	; 0x40
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	0800974d 	.word	0x0800974d
 80095f8:	0800987d 	.word	0x0800987d
 80095fc:	080098bf 	.word	0x080098bf

08009600 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b08a      	sub	sp, #40	; 0x28
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009608:	f3ef 8310 	mrs	r3, PRIMASK
 800960c:	60bb      	str	r3, [r7, #8]
  return(result);
 800960e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009610:	627b      	str	r3, [r7, #36]	; 0x24
 8009612:	2301      	movs	r3, #1
 8009614:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f383 8810 	msr	PRIMASK, r3
}
 800961c:	46c0      	nop			; (mov r8, r8)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	21c0      	movs	r1, #192	; 0xc0
 800962a:	438a      	bics	r2, r1
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	f383 8810 	msr	PRIMASK, r3
}
 8009638:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800963a:	f3ef 8310 	mrs	r3, PRIMASK
 800963e:	617b      	str	r3, [r7, #20]
  return(result);
 8009640:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009642:	623b      	str	r3, [r7, #32]
 8009644:	2301      	movs	r3, #1
 8009646:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	f383 8810 	msr	PRIMASK, r3
}
 800964e:	46c0      	nop			; (mov r8, r8)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4908      	ldr	r1, [pc, #32]	; (800967c <UART_EndTxTransfer+0x7c>)
 800965c:	400a      	ands	r2, r1
 800965e:	609a      	str	r2, [r3, #8]
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	f383 8810 	msr	PRIMASK, r3
}
 800966a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2288      	movs	r2, #136	; 0x88
 8009670:	2120      	movs	r1, #32
 8009672:	5099      	str	r1, [r3, r2]
}
 8009674:	46c0      	nop			; (mov r8, r8)
 8009676:	46bd      	mov	sp, r7
 8009678:	b00a      	add	sp, #40	; 0x28
 800967a:	bd80      	pop	{r7, pc}
 800967c:	ff7fffff 	.word	0xff7fffff

08009680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08e      	sub	sp, #56	; 0x38
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009688:	f3ef 8310 	mrs	r3, PRIMASK
 800968c:	617b      	str	r3, [r7, #20]
  return(result);
 800968e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009690:	637b      	str	r3, [r7, #52]	; 0x34
 8009692:	2301      	movs	r3, #1
 8009694:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	f383 8810 	msr	PRIMASK, r3
}
 800969c:	46c0      	nop			; (mov r8, r8)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4926      	ldr	r1, [pc, #152]	; (8009744 <UART_EndRxTransfer+0xc4>)
 80096aa:	400a      	ands	r2, r1
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	f383 8810 	msr	PRIMASK, r3
}
 80096b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096ba:	f3ef 8310 	mrs	r3, PRIMASK
 80096be:	623b      	str	r3, [r7, #32]
  return(result);
 80096c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096c2:	633b      	str	r3, [r7, #48]	; 0x30
 80096c4:	2301      	movs	r3, #1
 80096c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	f383 8810 	msr	PRIMASK, r3
}
 80096ce:	46c0      	nop			; (mov r8, r8)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	491b      	ldr	r1, [pc, #108]	; (8009748 <UART_EndRxTransfer+0xc8>)
 80096dc:	400a      	ands	r2, r1
 80096de:	609a      	str	r2, [r3, #8]
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	f383 8810 	msr	PRIMASK, r3
}
 80096ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d118      	bne.n	8009726 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096f4:	f3ef 8310 	mrs	r3, PRIMASK
 80096f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80096fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096fe:	2301      	movs	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f383 8810 	msr	PRIMASK, r3
}
 8009708:	46c0      	nop			; (mov r8, r8)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2110      	movs	r1, #16
 8009716:	438a      	bics	r2, r1
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f383 8810 	msr	PRIMASK, r3
}
 8009724:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	228c      	movs	r2, #140	; 0x8c
 800972a:	2120      	movs	r1, #32
 800972c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	675a      	str	r2, [r3, #116]	; 0x74
}
 800973a:	46c0      	nop			; (mov r8, r8)
 800973c:	46bd      	mov	sp, r7
 800973e:	b00e      	add	sp, #56	; 0x38
 8009740:	bd80      	pop	{r7, pc}
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	fffffedf 	.word	0xfffffedf
 8009748:	effffffe 	.word	0xeffffffe

0800974c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b094      	sub	sp, #80	; 0x50
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009758:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2220      	movs	r2, #32
 8009762:	4013      	ands	r3, r2
 8009764:	d16f      	bne.n	8009846 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8009766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009768:	225e      	movs	r2, #94	; 0x5e
 800976a:	2100      	movs	r1, #0
 800976c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800976e:	f3ef 8310 	mrs	r3, PRIMASK
 8009772:	61bb      	str	r3, [r7, #24]
  return(result);
 8009774:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009776:	64bb      	str	r3, [r7, #72]	; 0x48
 8009778:	2301      	movs	r3, #1
 800977a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	f383 8810 	msr	PRIMASK, r3
}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	493a      	ldr	r1, [pc, #232]	; (8009878 <UART_DMAReceiveCplt+0x12c>)
 8009790:	400a      	ands	r2, r1
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009796:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009798:	6a3b      	ldr	r3, [r7, #32]
 800979a:	f383 8810 	msr	PRIMASK, r3
}
 800979e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a0:	f3ef 8310 	mrs	r3, PRIMASK
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a8:	647b      	str	r3, [r7, #68]	; 0x44
 80097aa:	2301      	movs	r3, #1
 80097ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b0:	f383 8810 	msr	PRIMASK, r3
}
 80097b4:	46c0      	nop			; (mov r8, r8)
 80097b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2101      	movs	r1, #1
 80097c2:	438a      	bics	r2, r1
 80097c4:	609a      	str	r2, [r3, #8]
 80097c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	f383 8810 	msr	PRIMASK, r3
}
 80097d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097d2:	f3ef 8310 	mrs	r3, PRIMASK
 80097d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80097d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097da:	643b      	str	r3, [r7, #64]	; 0x40
 80097dc:	2301      	movs	r3, #1
 80097de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e2:	f383 8810 	msr	PRIMASK, r3
}
 80097e6:	46c0      	nop			; (mov r8, r8)
 80097e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689a      	ldr	r2, [r3, #8]
 80097ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2140      	movs	r1, #64	; 0x40
 80097f4:	438a      	bics	r2, r1
 80097f6:	609a      	str	r2, [r3, #8]
 80097f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fe:	f383 8810 	msr	PRIMASK, r3
}
 8009802:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009806:	228c      	movs	r2, #140	; 0x8c
 8009808:	2120      	movs	r1, #32
 800980a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800980c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800980e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009810:	2b01      	cmp	r3, #1
 8009812:	d118      	bne.n	8009846 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009814:	f3ef 8310 	mrs	r3, PRIMASK
 8009818:	60fb      	str	r3, [r7, #12]
  return(result);
 800981a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800981c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800981e:	2301      	movs	r3, #1
 8009820:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f383 8810 	msr	PRIMASK, r3
}
 8009828:	46c0      	nop			; (mov r8, r8)
 800982a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2110      	movs	r1, #16
 8009836:	438a      	bics	r2, r1
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800983c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f383 8810 	msr	PRIMASK, r3
}
 8009844:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009848:	2200      	movs	r2, #0
 800984a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800984c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009850:	2b01      	cmp	r3, #1
 8009852:	d108      	bne.n	8009866 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009856:	225c      	movs	r2, #92	; 0x5c
 8009858:	5a9a      	ldrh	r2, [r3, r2]
 800985a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985c:	0011      	movs	r1, r2
 800985e:	0018      	movs	r0, r3
 8009860:	f7ff f8fc 	bl	8008a5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009864:	e003      	b.n	800986e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8009866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009868:	0018      	movs	r0, r3
 800986a:	f7fa f981 	bl	8003b70 <HAL_UART_RxCpltCallback>
}
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	46bd      	mov	sp, r7
 8009872:	b014      	add	sp, #80	; 0x50
 8009874:	bd80      	pop	{r7, pc}
 8009876:	46c0      	nop			; (mov r8, r8)
 8009878:	fffffeff 	.word	0xfffffeff

0800987c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009888:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009894:	2b01      	cmp	r3, #1
 8009896:	d10a      	bne.n	80098ae <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	225c      	movs	r2, #92	; 0x5c
 800989c:	5a9b      	ldrh	r3, [r3, r2]
 800989e:	085b      	lsrs	r3, r3, #1
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	0011      	movs	r1, r2
 80098a6:	0018      	movs	r0, r3
 80098a8:	f7ff f8d8 	bl	8008a5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098ac:	e003      	b.n	80098b6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	0018      	movs	r0, r3
 80098b2:	f7ff f8c3 	bl	8008a3c <HAL_UART_RxHalfCpltCallback>
}
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	46bd      	mov	sp, r7
 80098ba:	b004      	add	sp, #16
 80098bc:	bd80      	pop	{r7, pc}

080098be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b086      	sub	sp, #24
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2288      	movs	r2, #136	; 0x88
 80098d0:	589b      	ldr	r3, [r3, r2]
 80098d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	228c      	movs	r2, #140	; 0x8c
 80098d8:	589b      	ldr	r3, [r3, r2]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	2280      	movs	r2, #128	; 0x80
 80098e4:	4013      	ands	r3, r2
 80098e6:	2b80      	cmp	r3, #128	; 0x80
 80098e8:	d10a      	bne.n	8009900 <UART_DMAError+0x42>
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b21      	cmp	r3, #33	; 0x21
 80098ee:	d107      	bne.n	8009900 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	2256      	movs	r2, #86	; 0x56
 80098f4:	2100      	movs	r1, #0
 80098f6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	0018      	movs	r0, r3
 80098fc:	f7ff fe80 	bl	8009600 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	2240      	movs	r2, #64	; 0x40
 8009908:	4013      	ands	r3, r2
 800990a:	2b40      	cmp	r3, #64	; 0x40
 800990c:	d10a      	bne.n	8009924 <UART_DMAError+0x66>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2b22      	cmp	r3, #34	; 0x22
 8009912:	d107      	bne.n	8009924 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	225e      	movs	r2, #94	; 0x5e
 8009918:	2100      	movs	r1, #0
 800991a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	0018      	movs	r0, r3
 8009920:	f7ff feae 	bl	8009680 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2290      	movs	r2, #144	; 0x90
 8009928:	589b      	ldr	r3, [r3, r2]
 800992a:	2210      	movs	r2, #16
 800992c:	431a      	orrs	r2, r3
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2190      	movs	r1, #144	; 0x90
 8009932:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	0018      	movs	r0, r3
 8009938:	f7ff f888 	bl	8008a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800993c:	46c0      	nop			; (mov r8, r8)
 800993e:	46bd      	mov	sp, r7
 8009940:	b006      	add	sp, #24
 8009942:	bd80      	pop	{r7, pc}

08009944 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2284      	movs	r2, #132	; 0x84
 8009950:	5c9b      	ldrb	r3, [r3, r2]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d101      	bne.n	800995a <HAL_UARTEx_DisableFifoMode+0x16>
 8009956:	2302      	movs	r3, #2
 8009958:	e027      	b.n	80099aa <HAL_UARTEx_DisableFifoMode+0x66>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2284      	movs	r2, #132	; 0x84
 800995e:	2101      	movs	r1, #1
 8009960:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2288      	movs	r2, #136	; 0x88
 8009966:	2124      	movs	r1, #36	; 0x24
 8009968:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2101      	movs	r1, #1
 800997e:	438a      	bics	r2, r1
 8009980:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	4a0b      	ldr	r2, [pc, #44]	; (80099b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009986:	4013      	ands	r3, r2
 8009988:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2288      	movs	r2, #136	; 0x88
 800999c:	2120      	movs	r1, #32
 800999e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2284      	movs	r2, #132	; 0x84
 80099a4:	2100      	movs	r1, #0
 80099a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	0018      	movs	r0, r3
 80099ac:	46bd      	mov	sp, r7
 80099ae:	b004      	add	sp, #16
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	46c0      	nop			; (mov r8, r8)
 80099b4:	dfffffff 	.word	0xdfffffff

080099b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2284      	movs	r2, #132	; 0x84
 80099c6:	5c9b      	ldrb	r3, [r3, r2]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d101      	bne.n	80099d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099cc:	2302      	movs	r3, #2
 80099ce:	e02e      	b.n	8009a2e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2284      	movs	r2, #132	; 0x84
 80099d4:	2101      	movs	r1, #1
 80099d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2288      	movs	r2, #136	; 0x88
 80099dc:	2124      	movs	r1, #36	; 0x24
 80099de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2101      	movs	r1, #1
 80099f4:	438a      	bics	r2, r1
 80099f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	08d9      	lsrs	r1, r3, #3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	0018      	movs	r0, r3
 8009a10:	f000 f854 	bl	8009abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2288      	movs	r2, #136	; 0x88
 8009a20:	2120      	movs	r1, #32
 8009a22:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2284      	movs	r2, #132	; 0x84
 8009a28:	2100      	movs	r1, #0
 8009a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	0018      	movs	r0, r3
 8009a30:	46bd      	mov	sp, r7
 8009a32:	b004      	add	sp, #16
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2284      	movs	r2, #132	; 0x84
 8009a46:	5c9b      	ldrb	r3, [r3, r2]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d101      	bne.n	8009a50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	e02f      	b.n	8009ab0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2284      	movs	r2, #132	; 0x84
 8009a54:	2101      	movs	r1, #1
 8009a56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2288      	movs	r2, #136	; 0x88
 8009a5c:	2124      	movs	r1, #36	; 0x24
 8009a5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2101      	movs	r1, #1
 8009a74:	438a      	bics	r2, r1
 8009a76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	4a0e      	ldr	r2, [pc, #56]	; (8009ab8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009a80:	4013      	ands	r3, r2
 8009a82:	0019      	movs	r1, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	0018      	movs	r0, r3
 8009a92:	f000 f813 	bl	8009abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2288      	movs	r2, #136	; 0x88
 8009aa2:	2120      	movs	r1, #32
 8009aa4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2284      	movs	r2, #132	; 0x84
 8009aaa:	2100      	movs	r1, #0
 8009aac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	0018      	movs	r0, r3
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	b004      	add	sp, #16
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	f1ffffff 	.word	0xf1ffffff

08009abc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d108      	bne.n	8009ade <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	226a      	movs	r2, #106	; 0x6a
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2268      	movs	r2, #104	; 0x68
 8009ad8:	2101      	movs	r1, #1
 8009ada:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009adc:	e043      	b.n	8009b66 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ade:	260f      	movs	r6, #15
 8009ae0:	19bb      	adds	r3, r7, r6
 8009ae2:	2208      	movs	r2, #8
 8009ae4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ae6:	200e      	movs	r0, #14
 8009ae8:	183b      	adds	r3, r7, r0
 8009aea:	2208      	movs	r2, #8
 8009aec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	0e5b      	lsrs	r3, r3, #25
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	240d      	movs	r4, #13
 8009afa:	193b      	adds	r3, r7, r4
 8009afc:	2107      	movs	r1, #7
 8009afe:	400a      	ands	r2, r1
 8009b00:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	0f5b      	lsrs	r3, r3, #29
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	250c      	movs	r5, #12
 8009b0e:	197b      	adds	r3, r7, r5
 8009b10:	2107      	movs	r1, #7
 8009b12:	400a      	ands	r2, r1
 8009b14:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b16:	183b      	adds	r3, r7, r0
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	197a      	adds	r2, r7, r5
 8009b1c:	7812      	ldrb	r2, [r2, #0]
 8009b1e:	4914      	ldr	r1, [pc, #80]	; (8009b70 <UARTEx_SetNbDataToProcess+0xb4>)
 8009b20:	5c8a      	ldrb	r2, [r1, r2]
 8009b22:	435a      	muls	r2, r3
 8009b24:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b26:	197b      	adds	r3, r7, r5
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	4a12      	ldr	r2, [pc, #72]	; (8009b74 <UARTEx_SetNbDataToProcess+0xb8>)
 8009b2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b2e:	0019      	movs	r1, r3
 8009b30:	f7f6 fb9a 	bl	8000268 <__divsi3>
 8009b34:	0003      	movs	r3, r0
 8009b36:	b299      	uxth	r1, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	226a      	movs	r2, #106	; 0x6a
 8009b3c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b3e:	19bb      	adds	r3, r7, r6
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	193a      	adds	r2, r7, r4
 8009b44:	7812      	ldrb	r2, [r2, #0]
 8009b46:	490a      	ldr	r1, [pc, #40]	; (8009b70 <UARTEx_SetNbDataToProcess+0xb4>)
 8009b48:	5c8a      	ldrb	r2, [r1, r2]
 8009b4a:	435a      	muls	r2, r3
 8009b4c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b4e:	193b      	adds	r3, r7, r4
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	4a08      	ldr	r2, [pc, #32]	; (8009b74 <UARTEx_SetNbDataToProcess+0xb8>)
 8009b54:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b56:	0019      	movs	r1, r3
 8009b58:	f7f6 fb86 	bl	8000268 <__divsi3>
 8009b5c:	0003      	movs	r3, r0
 8009b5e:	b299      	uxth	r1, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2268      	movs	r2, #104	; 0x68
 8009b64:	5299      	strh	r1, [r3, r2]
}
 8009b66:	46c0      	nop			; (mov r8, r8)
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	b005      	add	sp, #20
 8009b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b6e:	46c0      	nop			; (mov r8, r8)
 8009b70:	0800fa68 	.word	0x0800fa68
 8009b74:	0800fa70 	.word	0x0800fa70

08009b78 <__NVIC_SetPriority>:
{
 8009b78:	b590      	push	{r4, r7, lr}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	0002      	movs	r2, r0
 8009b80:	6039      	str	r1, [r7, #0]
 8009b82:	1dfb      	adds	r3, r7, #7
 8009b84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009b86:	1dfb      	adds	r3, r7, #7
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8009b8c:	d828      	bhi.n	8009be0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b8e:	4a2f      	ldr	r2, [pc, #188]	; (8009c4c <__NVIC_SetPriority+0xd4>)
 8009b90:	1dfb      	adds	r3, r7, #7
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	b25b      	sxtb	r3, r3
 8009b96:	089b      	lsrs	r3, r3, #2
 8009b98:	33c0      	adds	r3, #192	; 0xc0
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	589b      	ldr	r3, [r3, r2]
 8009b9e:	1dfa      	adds	r2, r7, #7
 8009ba0:	7812      	ldrb	r2, [r2, #0]
 8009ba2:	0011      	movs	r1, r2
 8009ba4:	2203      	movs	r2, #3
 8009ba6:	400a      	ands	r2, r1
 8009ba8:	00d2      	lsls	r2, r2, #3
 8009baa:	21ff      	movs	r1, #255	; 0xff
 8009bac:	4091      	lsls	r1, r2
 8009bae:	000a      	movs	r2, r1
 8009bb0:	43d2      	mvns	r2, r2
 8009bb2:	401a      	ands	r2, r3
 8009bb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	019b      	lsls	r3, r3, #6
 8009bba:	22ff      	movs	r2, #255	; 0xff
 8009bbc:	401a      	ands	r2, r3
 8009bbe:	1dfb      	adds	r3, r7, #7
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	4003      	ands	r3, r0
 8009bc8:	00db      	lsls	r3, r3, #3
 8009bca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009bcc:	481f      	ldr	r0, [pc, #124]	; (8009c4c <__NVIC_SetPriority+0xd4>)
 8009bce:	1dfb      	adds	r3, r7, #7
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	b25b      	sxtb	r3, r3
 8009bd4:	089b      	lsrs	r3, r3, #2
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	33c0      	adds	r3, #192	; 0xc0
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	501a      	str	r2, [r3, r0]
}
 8009bde:	e031      	b.n	8009c44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009be0:	4a1b      	ldr	r2, [pc, #108]	; (8009c50 <__NVIC_SetPriority+0xd8>)
 8009be2:	1dfb      	adds	r3, r7, #7
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	0019      	movs	r1, r3
 8009be8:	230f      	movs	r3, #15
 8009bea:	400b      	ands	r3, r1
 8009bec:	3b08      	subs	r3, #8
 8009bee:	089b      	lsrs	r3, r3, #2
 8009bf0:	3306      	adds	r3, #6
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	18d3      	adds	r3, r2, r3
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	1dfa      	adds	r2, r7, #7
 8009bfc:	7812      	ldrb	r2, [r2, #0]
 8009bfe:	0011      	movs	r1, r2
 8009c00:	2203      	movs	r2, #3
 8009c02:	400a      	ands	r2, r1
 8009c04:	00d2      	lsls	r2, r2, #3
 8009c06:	21ff      	movs	r1, #255	; 0xff
 8009c08:	4091      	lsls	r1, r2
 8009c0a:	000a      	movs	r2, r1
 8009c0c:	43d2      	mvns	r2, r2
 8009c0e:	401a      	ands	r2, r3
 8009c10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	019b      	lsls	r3, r3, #6
 8009c16:	22ff      	movs	r2, #255	; 0xff
 8009c18:	401a      	ands	r2, r3
 8009c1a:	1dfb      	adds	r3, r7, #7
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	0018      	movs	r0, r3
 8009c20:	2303      	movs	r3, #3
 8009c22:	4003      	ands	r3, r0
 8009c24:	00db      	lsls	r3, r3, #3
 8009c26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009c28:	4809      	ldr	r0, [pc, #36]	; (8009c50 <__NVIC_SetPriority+0xd8>)
 8009c2a:	1dfb      	adds	r3, r7, #7
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	001c      	movs	r4, r3
 8009c30:	230f      	movs	r3, #15
 8009c32:	4023      	ands	r3, r4
 8009c34:	3b08      	subs	r3, #8
 8009c36:	089b      	lsrs	r3, r3, #2
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	3306      	adds	r3, #6
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	18c3      	adds	r3, r0, r3
 8009c40:	3304      	adds	r3, #4
 8009c42:	601a      	str	r2, [r3, #0]
}
 8009c44:	46c0      	nop			; (mov r8, r8)
 8009c46:	46bd      	mov	sp, r7
 8009c48:	b003      	add	sp, #12
 8009c4a:	bd90      	pop	{r4, r7, pc}
 8009c4c:	e000e100 	.word	0xe000e100
 8009c50:	e000ed00 	.word	0xe000ed00

08009c54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009c58:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <SysTick_Handler+0x1c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009c5c:	f001 fbaa 	bl	800b3b4 <xTaskGetSchedulerState>
 8009c60:	0003      	movs	r3, r0
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d001      	beq.n	8009c6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009c66:	f002 f877 	bl	800bd58 <xPortSysTickHandler>
  }
}
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	e000e010 	.word	0xe000e010

08009c74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009c78:	2305      	movs	r3, #5
 8009c7a:	425b      	negs	r3, r3
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f7ff ff7a 	bl	8009b78 <__NVIC_SetPriority>
#endif
}
 8009c84:	46c0      	nop			; (mov r8, r8)
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c92:	f3ef 8305 	mrs	r3, IPSR
 8009c96:	603b      	str	r3, [r7, #0]
  return(result);
 8009c98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c9e:	2306      	movs	r3, #6
 8009ca0:	425b      	negs	r3, r3
 8009ca2:	607b      	str	r3, [r7, #4]
 8009ca4:	e00c      	b.n	8009cc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <osKernelInitialize+0x40>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d105      	bne.n	8009cba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009cae:	4b07      	ldr	r3, [pc, #28]	; (8009ccc <osKernelInitialize+0x40>)
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	607b      	str	r3, [r7, #4]
 8009cb8:	e002      	b.n	8009cc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	425b      	negs	r3, r3
 8009cbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009cc0:	687b      	ldr	r3, [r7, #4]
}
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	b002      	add	sp, #8
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	46c0      	nop			; (mov r8, r8)
 8009ccc:	20000574 	.word	0x20000574

08009cd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cd6:	f3ef 8305 	mrs	r3, IPSR
 8009cda:	603b      	str	r3, [r7, #0]
  return(result);
 8009cdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <osKernelStart+0x1a>
    stat = osErrorISR;
 8009ce2:	2306      	movs	r3, #6
 8009ce4:	425b      	negs	r3, r3
 8009ce6:	607b      	str	r3, [r7, #4]
 8009ce8:	e010      	b.n	8009d0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009cea:	4b0b      	ldr	r3, [pc, #44]	; (8009d18 <osKernelStart+0x48>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d109      	bne.n	8009d06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009cf2:	f7ff ffbf 	bl	8009c74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009cf6:	4b08      	ldr	r3, [pc, #32]	; (8009d18 <osKernelStart+0x48>)
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009cfc:	f000 ff88 	bl	800ac10 <vTaskStartScheduler>
      stat = osOK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	607b      	str	r3, [r7, #4]
 8009d04:	e002      	b.n	8009d0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009d06:	2301      	movs	r3, #1
 8009d08:	425b      	negs	r3, r3
 8009d0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d0c:	687b      	ldr	r3, [r7, #4]
}
 8009d0e:	0018      	movs	r0, r3
 8009d10:	46bd      	mov	sp, r7
 8009d12:	b002      	add	sp, #8
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	20000574 	.word	0x20000574

08009d1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d1c:	b5b0      	push	{r4, r5, r7, lr}
 8009d1e:	b08e      	sub	sp, #56	; 0x38
 8009d20:	af04      	add	r7, sp, #16
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d2c:	f3ef 8305 	mrs	r3, IPSR
 8009d30:	617b      	str	r3, [r7, #20]
  return(result);
 8009d32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d000      	beq.n	8009d3a <osThreadNew+0x1e>
 8009d38:	e081      	b.n	8009e3e <osThreadNew+0x122>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d100      	bne.n	8009d42 <osThreadNew+0x26>
 8009d40:	e07d      	b.n	8009e3e <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8009d42:	2380      	movs	r3, #128	; 0x80
 8009d44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009d46:	2318      	movs	r3, #24
 8009d48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	425b      	negs	r3, r3
 8009d52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d044      	beq.n	8009de4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <osThreadNew+0x4c>
        name = attr->name;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d007      	beq.n	8009d8c <osThreadNew+0x70>
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	2b38      	cmp	r3, #56	; 0x38
 8009d80:	d804      	bhi.n	8009d8c <osThreadNew+0x70>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	4013      	ands	r3, r2
 8009d8a:	d001      	beq.n	8009d90 <osThreadNew+0x74>
        return (NULL);
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	e057      	b.n	8009e40 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	695b      	ldr	r3, [r3, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	089b      	lsrs	r3, r3, #2
 8009d9e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00e      	beq.n	8009dc6 <osThreadNew+0xaa>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	2b5b      	cmp	r3, #91	; 0x5b
 8009dae:	d90a      	bls.n	8009dc6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d006      	beq.n	8009dc6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <osThreadNew+0xaa>
        mem = 1;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	61bb      	str	r3, [r7, #24]
 8009dc4:	e010      	b.n	8009de8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10c      	bne.n	8009de8 <osThreadNew+0xcc>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d108      	bne.n	8009de8 <osThreadNew+0xcc>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d104      	bne.n	8009de8 <osThreadNew+0xcc>
          mem = 0;
 8009dde:	2300      	movs	r3, #0
 8009de0:	61bb      	str	r3, [r7, #24]
 8009de2:	e001      	b.n	8009de8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d112      	bne.n	8009e14 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009df6:	68bd      	ldr	r5, [r7, #8]
 8009df8:	6a3c      	ldr	r4, [r7, #32]
 8009dfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	9302      	str	r3, [sp, #8]
 8009e00:	9201      	str	r2, [sp, #4]
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	002b      	movs	r3, r5
 8009e08:	0022      	movs	r2, r4
 8009e0a:	f000 fd22 	bl	800a852 <xTaskCreateStatic>
 8009e0e:	0003      	movs	r3, r0
 8009e10:	613b      	str	r3, [r7, #16]
 8009e12:	e014      	b.n	8009e3e <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d111      	bne.n	8009e3e <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	68bc      	ldr	r4, [r7, #8]
 8009e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	2310      	movs	r3, #16
 8009e26:	18fb      	adds	r3, r7, r3
 8009e28:	9301      	str	r3, [sp, #4]
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	0023      	movs	r3, r4
 8009e30:	f000 fd53 	bl	800a8da <xTaskCreate>
 8009e34:	0003      	movs	r3, r0
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d001      	beq.n	8009e3e <osThreadNew+0x122>
            hTask = NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e3e:	693b      	ldr	r3, [r7, #16]
}
 8009e40:	0018      	movs	r0, r3
 8009e42:	46bd      	mov	sp, r7
 8009e44:	b00a      	add	sp, #40	; 0x28
 8009e46:	bdb0      	pop	{r4, r5, r7, pc}

08009e48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	4a06      	ldr	r2, [pc, #24]	; (8009e70 <vApplicationGetIdleTaskMemory+0x28>)
 8009e58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	4a05      	ldr	r2, [pc, #20]	; (8009e74 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2280      	movs	r2, #128	; 0x80
 8009e64:	601a      	str	r2, [r3, #0]
}
 8009e66:	46c0      	nop			; (mov r8, r8)
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	b004      	add	sp, #16
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	46c0      	nop			; (mov r8, r8)
 8009e70:	20000578 	.word	0x20000578
 8009e74:	200005d4 	.word	0x200005d4

08009e78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	4a06      	ldr	r2, [pc, #24]	; (8009ea0 <vApplicationGetTimerTaskMemory+0x28>)
 8009e88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	4a05      	ldr	r2, [pc, #20]	; (8009ea4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009e8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2280      	movs	r2, #128	; 0x80
 8009e94:	0052      	lsls	r2, r2, #1
 8009e96:	601a      	str	r2, [r3, #0]
}
 8009e98:	46c0      	nop			; (mov r8, r8)
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	b004      	add	sp, #16
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	200007d4 	.word	0x200007d4
 8009ea4:	20000830 	.word	0x20000830

08009ea8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3308      	adds	r3, #8
 8009eb4:	001a      	movs	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	4252      	negs	r2, r2
 8009ec0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	001a      	movs	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	3308      	adds	r3, #8
 8009ed0:	001a      	movs	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009edc:	46c0      	nop			; (mov r8, r8)
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	b002      	add	sp, #8
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ef2:	46c0      	nop			; (mov r8, r8)
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b002      	add	sp, #8
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	1c5a      	adds	r2, r3, #1
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]
}
 8009f36:	46c0      	nop			; (mov r8, r8)
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	b004      	add	sp, #16
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	3301      	adds	r3, #1
 8009f52:	d103      	bne.n	8009f5c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	e00c      	b.n	8009f76 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3308      	adds	r3, #8
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	e002      	b.n	8009f6a <vListInsert+0x2c>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	60fb      	str	r3, [r7, #12]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d2f6      	bcs.n	8009f64 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	1c5a      	adds	r2, r3, #1
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	601a      	str	r2, [r3, #0]
}
 8009fa2:	46c0      	nop			; (mov r8, r8)
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	b004      	add	sp, #16
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	6892      	ldr	r2, [r2, #8]
 8009fc0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	6852      	ldr	r2, [r2, #4]
 8009fca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d103      	bne.n	8009fde <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	689a      	ldr	r2, [r3, #8]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	1e5a      	subs	r2, r3, #1
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
}
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	b004      	add	sp, #16
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <xQueueGenericReset+0x18>
 800a00e:	b672      	cpsid	i
 800a010:	e7fe      	b.n	800a010 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800a012:	f001 fe45 	bl	800bca0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	434b      	muls	r3, r1
 800a024:	18d2      	adds	r2, r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a040:	1e59      	subs	r1, r3, #1
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a046:	434b      	muls	r3, r1
 800a048:	18d2      	adds	r2, r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2244      	movs	r2, #68	; 0x44
 800a052:	21ff      	movs	r1, #255	; 0xff
 800a054:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2245      	movs	r2, #69	; 0x45
 800a05a:	21ff      	movs	r1, #255	; 0xff
 800a05c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10d      	bne.n	800a080 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d013      	beq.n	800a094 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	3310      	adds	r3, #16
 800a070:	0018      	movs	r0, r3
 800a072:	f001 f80d 	bl	800b090 <xTaskRemoveFromEventList>
 800a076:	1e03      	subs	r3, r0, #0
 800a078:	d00c      	beq.n	800a094 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a07a:	f001 fe01 	bl	800bc80 <vPortYield>
 800a07e:	e009      	b.n	800a094 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3310      	adds	r3, #16
 800a084:	0018      	movs	r0, r3
 800a086:	f7ff ff0f 	bl	8009ea8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3324      	adds	r3, #36	; 0x24
 800a08e:	0018      	movs	r0, r3
 800a090:	f7ff ff0a 	bl	8009ea8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a094:	f001 fe16 	bl	800bcc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a098:	2301      	movs	r3, #1
}
 800a09a:	0018      	movs	r0, r3
 800a09c:	46bd      	mov	sp, r7
 800a09e:	b004      	add	sp, #16
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0a2:	b590      	push	{r4, r7, lr}
 800a0a4:	b089      	sub	sp, #36	; 0x24
 800a0a6:	af02      	add	r7, sp, #8
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	607a      	str	r2, [r7, #4]
 800a0ae:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <xQueueGenericCreateStatic+0x18>
 800a0b6:	b672      	cpsid	i
 800a0b8:	e7fe      	b.n	800a0b8 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <xQueueGenericCreateStatic+0x22>
 800a0c0:	b672      	cpsid	i
 800a0c2:	e7fe      	b.n	800a0c2 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <xQueueGenericCreateStatic+0x2e>
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <xQueueGenericCreateStatic+0x32>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e000      	b.n	800a0d6 <xQueueGenericCreateStatic+0x34>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <xQueueGenericCreateStatic+0x3c>
 800a0da:	b672      	cpsid	i
 800a0dc:	e7fe      	b.n	800a0dc <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d102      	bne.n	800a0ea <xQueueGenericCreateStatic+0x48>
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d101      	bne.n	800a0ee <xQueueGenericCreateStatic+0x4c>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e000      	b.n	800a0f0 <xQueueGenericCreateStatic+0x4e>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <xQueueGenericCreateStatic+0x56>
 800a0f4:	b672      	cpsid	i
 800a0f6:	e7fe      	b.n	800a0f6 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0f8:	2350      	movs	r3, #80	; 0x50
 800a0fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	2b50      	cmp	r3, #80	; 0x50
 800a100:	d001      	beq.n	800a106 <xQueueGenericCreateStatic+0x64>
 800a102:	b672      	cpsid	i
 800a104:	e7fe      	b.n	800a104 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a106:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00e      	beq.n	800a130 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2246      	movs	r2, #70	; 0x46
 800a116:	2101      	movs	r1, #1
 800a118:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a11a:	2328      	movs	r3, #40	; 0x28
 800a11c:	18fb      	adds	r3, r7, r3
 800a11e:	781c      	ldrb	r4, [r3, #0]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	68b9      	ldr	r1, [r7, #8]
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	0023      	movs	r3, r4
 800a12c:	f000 f805 	bl	800a13a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a130:	697b      	ldr	r3, [r7, #20]
	}
 800a132:	0018      	movs	r0, r3
 800a134:	46bd      	mov	sp, r7
 800a136:	b007      	add	sp, #28
 800a138:	bd90      	pop	{r4, r7, pc}

0800a13a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	001a      	movs	r2, r3
 800a148:	1cfb      	adds	r3, r7, #3
 800a14a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d103      	bne.n	800a15a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	e002      	b.n	800a160 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	2101      	movs	r1, #1
 800a170:	0018      	movs	r0, r3
 800a172:	f7ff ff42 	bl	8009ffa <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	1cfa      	adds	r2, r7, #3
 800a17a:	214c      	movs	r1, #76	; 0x4c
 800a17c:	7812      	ldrb	r2, [r2, #0]
 800a17e:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a180:	46c0      	nop			; (mov r8, r8)
 800a182:	46bd      	mov	sp, r7
 800a184:	b004      	add	sp, #16
 800a186:	bd80      	pop	{r7, pc}

0800a188 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08a      	sub	sp, #40	; 0x28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a196:	2300      	movs	r3, #0
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <xQueueGenericSend+0x20>
 800a1a4:	b672      	cpsid	i
 800a1a6:	e7fe      	b.n	800a1a6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d103      	bne.n	800a1b6 <xQueueGenericSend+0x2e>
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <xQueueGenericSend+0x32>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e000      	b.n	800a1bc <xQueueGenericSend+0x34>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <xQueueGenericSend+0x3c>
 800a1c0:	b672      	cpsid	i
 800a1c2:	e7fe      	b.n	800a1c2 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d103      	bne.n	800a1d2 <xQueueGenericSend+0x4a>
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d101      	bne.n	800a1d6 <xQueueGenericSend+0x4e>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e000      	b.n	800a1d8 <xQueueGenericSend+0x50>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <xQueueGenericSend+0x58>
 800a1dc:	b672      	cpsid	i
 800a1de:	e7fe      	b.n	800a1de <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1e0:	f001 f8e8 	bl	800b3b4 <xTaskGetSchedulerState>
 800a1e4:	1e03      	subs	r3, r0, #0
 800a1e6:	d102      	bne.n	800a1ee <xQueueGenericSend+0x66>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <xQueueGenericSend+0x6a>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e000      	b.n	800a1f4 <xQueueGenericSend+0x6c>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <xQueueGenericSend+0x74>
 800a1f8:	b672      	cpsid	i
 800a1fa:	e7fe      	b.n	800a1fa <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1fc:	f001 fd50 	bl	800bca0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a208:	429a      	cmp	r2, r3
 800a20a:	d302      	bcc.n	800a212 <xQueueGenericSend+0x8a>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d11e      	bne.n	800a250 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	68b9      	ldr	r1, [r7, #8]
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	0018      	movs	r0, r3
 800a21a:	f000 f9a2 	bl	800a562 <prvCopyDataToQueue>
 800a21e:	0003      	movs	r3, r0
 800a220:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	2b00      	cmp	r3, #0
 800a228:	d009      	beq.n	800a23e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	3324      	adds	r3, #36	; 0x24
 800a22e:	0018      	movs	r0, r3
 800a230:	f000 ff2e 	bl	800b090 <xTaskRemoveFromEventList>
 800a234:	1e03      	subs	r3, r0, #0
 800a236:	d007      	beq.n	800a248 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a238:	f001 fd22 	bl	800bc80 <vPortYield>
 800a23c:	e004      	b.n	800a248 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d001      	beq.n	800a248 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a244:	f001 fd1c 	bl	800bc80 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a248:	f001 fd3c 	bl	800bcc4 <vPortExitCritical>
				return pdPASS;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e05b      	b.n	800a308 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d103      	bne.n	800a25e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a256:	f001 fd35 	bl	800bcc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	e054      	b.n	800a308 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a264:	2314      	movs	r3, #20
 800a266:	18fb      	adds	r3, r7, r3
 800a268:	0018      	movs	r0, r3
 800a26a:	f000 ff6d 	bl	800b148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a26e:	2301      	movs	r3, #1
 800a270:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a272:	f001 fd27 	bl	800bcc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a276:	f000 fd1f 	bl	800acb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a27a:	f001 fd11 	bl	800bca0 <vPortEnterCritical>
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	2244      	movs	r2, #68	; 0x44
 800a282:	5c9b      	ldrb	r3, [r3, r2]
 800a284:	b25b      	sxtb	r3, r3
 800a286:	3301      	adds	r3, #1
 800a288:	d103      	bne.n	800a292 <xQueueGenericSend+0x10a>
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	2244      	movs	r2, #68	; 0x44
 800a28e:	2100      	movs	r1, #0
 800a290:	5499      	strb	r1, [r3, r2]
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	2245      	movs	r2, #69	; 0x45
 800a296:	5c9b      	ldrb	r3, [r3, r2]
 800a298:	b25b      	sxtb	r3, r3
 800a29a:	3301      	adds	r3, #1
 800a29c:	d103      	bne.n	800a2a6 <xQueueGenericSend+0x11e>
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	2245      	movs	r2, #69	; 0x45
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	5499      	strb	r1, [r3, r2]
 800a2a6:	f001 fd0d 	bl	800bcc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2aa:	1d3a      	adds	r2, r7, #4
 800a2ac:	2314      	movs	r3, #20
 800a2ae:	18fb      	adds	r3, r7, r3
 800a2b0:	0011      	movs	r1, r2
 800a2b2:	0018      	movs	r0, r3
 800a2b4:	f000 ff5c 	bl	800b170 <xTaskCheckForTimeOut>
 800a2b8:	1e03      	subs	r3, r0, #0
 800a2ba:	d11e      	bne.n	800a2fa <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2bc:	6a3b      	ldr	r3, [r7, #32]
 800a2be:	0018      	movs	r0, r3
 800a2c0:	f000 fa54 	bl	800a76c <prvIsQueueFull>
 800a2c4:	1e03      	subs	r3, r0, #0
 800a2c6:	d011      	beq.n	800a2ec <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2c8:	6a3b      	ldr	r3, [r7, #32]
 800a2ca:	3310      	adds	r3, #16
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	0011      	movs	r1, r2
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f000 fe99 	bl	800b008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	0018      	movs	r0, r3
 800a2da:	f000 f9d3 	bl	800a684 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2de:	f000 fcf7 	bl	800acd0 <xTaskResumeAll>
 800a2e2:	1e03      	subs	r3, r0, #0
 800a2e4:	d18a      	bne.n	800a1fc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800a2e6:	f001 fccb 	bl	800bc80 <vPortYield>
 800a2ea:	e787      	b.n	800a1fc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	f000 f9c8 	bl	800a684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2f4:	f000 fcec 	bl	800acd0 <xTaskResumeAll>
 800a2f8:	e780      	b.n	800a1fc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	f000 f9c1 	bl	800a684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a302:	f000 fce5 	bl	800acd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a306:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a308:	0018      	movs	r0, r3
 800a30a:	46bd      	mov	sp, r7
 800a30c:	b00a      	add	sp, #40	; 0x28
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a310:	b590      	push	{r4, r7, lr}
 800a312:	b08b      	sub	sp, #44	; 0x2c
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <xQueueGenericSendFromISR+0x1c>
 800a328:	b672      	cpsid	i
 800a32a:	e7fe      	b.n	800a32a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <xQueueGenericSendFromISR+0x2a>
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <xQueueGenericSendFromISR+0x2e>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <xQueueGenericSendFromISR+0x30>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <xQueueGenericSendFromISR+0x38>
 800a344:	b672      	cpsid	i
 800a346:	e7fe      	b.n	800a346 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d103      	bne.n	800a356 <xQueueGenericSendFromISR+0x46>
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a352:	2b01      	cmp	r3, #1
 800a354:	d101      	bne.n	800a35a <xQueueGenericSendFromISR+0x4a>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <xQueueGenericSendFromISR+0x4c>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <xQueueGenericSendFromISR+0x54>
 800a360:	b672      	cpsid	i
 800a362:	e7fe      	b.n	800a362 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a364:	f001 fcc6 	bl	800bcf4 <ulSetInterruptMaskFromISR>
 800a368:	0003      	movs	r3, r0
 800a36a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a374:	429a      	cmp	r2, r3
 800a376:	d302      	bcc.n	800a37e <xQueueGenericSendFromISR+0x6e>
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d131      	bne.n	800a3e2 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a37e:	241b      	movs	r4, #27
 800a380:	193b      	adds	r3, r7, r4
 800a382:	6a3a      	ldr	r2, [r7, #32]
 800a384:	2145      	movs	r1, #69	; 0x45
 800a386:	5c52      	ldrb	r2, [r2, r1]
 800a388:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	68b9      	ldr	r1, [r7, #8]
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	0018      	movs	r0, r3
 800a398:	f000 f8e3 	bl	800a562 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a39c:	193b      	adds	r3, r7, r4
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	b25b      	sxtb	r3, r3
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	d111      	bne.n	800a3ca <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d016      	beq.n	800a3dc <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	3324      	adds	r3, #36	; 0x24
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	f000 fe6c 	bl	800b090 <xTaskRemoveFromEventList>
 800a3b8:	1e03      	subs	r3, r0, #0
 800a3ba:	d00f      	beq.n	800a3dc <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00c      	beq.n	800a3dc <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	e008      	b.n	800a3dc <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3ca:	231b      	movs	r3, #27
 800a3cc:	18fb      	adds	r3, r7, r3
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	b259      	sxtb	r1, r3
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	2245      	movs	r2, #69	; 0x45
 800a3da:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800a3e0:	e001      	b.n	800a3e6 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	f001 fc89 	bl	800bd00 <vClearInterruptMaskFromISR>

	return xReturn;
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	b00b      	add	sp, #44	; 0x2c
 800a3f6:	bd90      	pop	{r4, r7, pc}

0800a3f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08a      	sub	sp, #40	; 0x28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a404:	2300      	movs	r3, #0
 800a406:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <xQueueReceive+0x1e>
 800a412:	b672      	cpsid	i
 800a414:	e7fe      	b.n	800a414 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <xQueueReceive+0x2c>
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <xQueueReceive+0x30>
 800a424:	2301      	movs	r3, #1
 800a426:	e000      	b.n	800a42a <xQueueReceive+0x32>
 800a428:	2300      	movs	r3, #0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <xQueueReceive+0x3a>
 800a42e:	b672      	cpsid	i
 800a430:	e7fe      	b.n	800a430 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a432:	f000 ffbf 	bl	800b3b4 <xTaskGetSchedulerState>
 800a436:	1e03      	subs	r3, r0, #0
 800a438:	d102      	bne.n	800a440 <xQueueReceive+0x48>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d101      	bne.n	800a444 <xQueueReceive+0x4c>
 800a440:	2301      	movs	r3, #1
 800a442:	e000      	b.n	800a446 <xQueueReceive+0x4e>
 800a444:	2300      	movs	r3, #0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <xQueueReceive+0x56>
 800a44a:	b672      	cpsid	i
 800a44c:	e7fe      	b.n	800a44c <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a44e:	f001 fc27 	bl	800bca0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a452:	6a3b      	ldr	r3, [r7, #32]
 800a454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a456:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d01a      	beq.n	800a494 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	0011      	movs	r1, r2
 800a464:	0018      	movs	r0, r3
 800a466:	f000 f8e7 	bl	800a638 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	1e5a      	subs	r2, r3, #1
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d008      	beq.n	800a48c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a47a:	6a3b      	ldr	r3, [r7, #32]
 800a47c:	3310      	adds	r3, #16
 800a47e:	0018      	movs	r0, r3
 800a480:	f000 fe06 	bl	800b090 <xTaskRemoveFromEventList>
 800a484:	1e03      	subs	r3, r0, #0
 800a486:	d001      	beq.n	800a48c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a488:	f001 fbfa 	bl	800bc80 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a48c:	f001 fc1a 	bl	800bcc4 <vPortExitCritical>
				return pdPASS;
 800a490:	2301      	movs	r3, #1
 800a492:	e062      	b.n	800a55a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d103      	bne.n	800a4a2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a49a:	f001 fc13 	bl	800bcc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	e05b      	b.n	800a55a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d106      	bne.n	800a4b6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4a8:	2314      	movs	r3, #20
 800a4aa:	18fb      	adds	r3, r7, r3
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	f000 fe4b 	bl	800b148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4b6:	f001 fc05 	bl	800bcc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4ba:	f000 fbfd 	bl	800acb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4be:	f001 fbef 	bl	800bca0 <vPortEnterCritical>
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	2244      	movs	r2, #68	; 0x44
 800a4c6:	5c9b      	ldrb	r3, [r3, r2]
 800a4c8:	b25b      	sxtb	r3, r3
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	d103      	bne.n	800a4d6 <xQueueReceive+0xde>
 800a4ce:	6a3b      	ldr	r3, [r7, #32]
 800a4d0:	2244      	movs	r2, #68	; 0x44
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	5499      	strb	r1, [r3, r2]
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	2245      	movs	r2, #69	; 0x45
 800a4da:	5c9b      	ldrb	r3, [r3, r2]
 800a4dc:	b25b      	sxtb	r3, r3
 800a4de:	3301      	adds	r3, #1
 800a4e0:	d103      	bne.n	800a4ea <xQueueReceive+0xf2>
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	2245      	movs	r2, #69	; 0x45
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	5499      	strb	r1, [r3, r2]
 800a4ea:	f001 fbeb 	bl	800bcc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4ee:	1d3a      	adds	r2, r7, #4
 800a4f0:	2314      	movs	r3, #20
 800a4f2:	18fb      	adds	r3, r7, r3
 800a4f4:	0011      	movs	r1, r2
 800a4f6:	0018      	movs	r0, r3
 800a4f8:	f000 fe3a 	bl	800b170 <xTaskCheckForTimeOut>
 800a4fc:	1e03      	subs	r3, r0, #0
 800a4fe:	d11e      	bne.n	800a53e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	0018      	movs	r0, r3
 800a504:	f000 f91c 	bl	800a740 <prvIsQueueEmpty>
 800a508:	1e03      	subs	r3, r0, #0
 800a50a:	d011      	beq.n	800a530 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a50c:	6a3b      	ldr	r3, [r7, #32]
 800a50e:	3324      	adds	r3, #36	; 0x24
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	0011      	movs	r1, r2
 800a514:	0018      	movs	r0, r3
 800a516:	f000 fd77 	bl	800b008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	0018      	movs	r0, r3
 800a51e:	f000 f8b1 	bl	800a684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a522:	f000 fbd5 	bl	800acd0 <xTaskResumeAll>
 800a526:	1e03      	subs	r3, r0, #0
 800a528:	d191      	bne.n	800a44e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800a52a:	f001 fba9 	bl	800bc80 <vPortYield>
 800a52e:	e78e      	b.n	800a44e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	0018      	movs	r0, r3
 800a534:	f000 f8a6 	bl	800a684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a538:	f000 fbca 	bl	800acd0 <xTaskResumeAll>
 800a53c:	e787      	b.n	800a44e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	0018      	movs	r0, r3
 800a542:	f000 f89f 	bl	800a684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a546:	f000 fbc3 	bl	800acd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a54a:	6a3b      	ldr	r3, [r7, #32]
 800a54c:	0018      	movs	r0, r3
 800a54e:	f000 f8f7 	bl	800a740 <prvIsQueueEmpty>
 800a552:	1e03      	subs	r3, r0, #0
 800a554:	d100      	bne.n	800a558 <xQueueReceive+0x160>
 800a556:	e77a      	b.n	800a44e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a558:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a55a:	0018      	movs	r0, r3
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b00a      	add	sp, #40	; 0x28
 800a560:	bd80      	pop	{r7, pc}

0800a562 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b086      	sub	sp, #24
 800a566:	af00      	add	r7, sp, #0
 800a568:	60f8      	str	r0, [r7, #12]
 800a56a:	60b9      	str	r1, [r7, #8]
 800a56c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a56e:	2300      	movs	r3, #0
 800a570:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a576:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10e      	bne.n	800a59e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d14e      	bne.n	800a626 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	0018      	movs	r0, r3
 800a58e:	f000 ff2d 	bl	800b3ec <xTaskPriorityDisinherit>
 800a592:	0003      	movs	r3, r0
 800a594:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	609a      	str	r2, [r3, #8]
 800a59c:	e043      	b.n	800a626 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d119      	bne.n	800a5d8 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6858      	ldr	r0, [r3, #4]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	0019      	movs	r1, r3
 800a5b0:	f001 fdfa 	bl	800c1a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5bc:	18d2      	adds	r2, r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d32b      	bcc.n	800a626 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	605a      	str	r2, [r3, #4]
 800a5d6:	e026      	b.n	800a626 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	68d8      	ldr	r0, [r3, #12]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	0019      	movs	r1, r3
 800a5e4:	f001 fde0 	bl	800c1a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	68da      	ldr	r2, [r3, #12]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f0:	425b      	negs	r3, r3
 800a5f2:	18d2      	adds	r2, r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	68da      	ldr	r2, [r3, #12]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	429a      	cmp	r2, r3
 800a602:	d207      	bcs.n	800a614 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60c:	425b      	negs	r3, r3
 800a60e:	18d2      	adds	r2, r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b02      	cmp	r3, #2
 800a618:	d105      	bne.n	800a626 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	3b01      	subs	r3, #1
 800a624:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a62e:	697b      	ldr	r3, [r7, #20]
}
 800a630:	0018      	movs	r0, r3
 800a632:	46bd      	mov	sp, r7
 800a634:	b006      	add	sp, #24
 800a636:	bd80      	pop	{r7, pc}

0800a638 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	d018      	beq.n	800a67c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68da      	ldr	r2, [r3, #12]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a652:	18d2      	adds	r2, r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	68da      	ldr	r2, [r3, #12]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	429a      	cmp	r2, r3
 800a662:	d303      	bcc.n	800a66c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68d9      	ldr	r1, [r3, #12]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	0018      	movs	r0, r3
 800a678:	f001 fd96 	bl	800c1a8 <memcpy>
	}
}
 800a67c:	46c0      	nop			; (mov r8, r8)
 800a67e:	46bd      	mov	sp, r7
 800a680:	b002      	add	sp, #8
 800a682:	bd80      	pop	{r7, pc}

0800a684 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a68c:	f001 fb08 	bl	800bca0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a690:	230f      	movs	r3, #15
 800a692:	18fb      	adds	r3, r7, r3
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	2145      	movs	r1, #69	; 0x45
 800a698:	5c52      	ldrb	r2, [r2, r1]
 800a69a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a69c:	e013      	b.n	800a6c6 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d016      	beq.n	800a6d4 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	3324      	adds	r3, #36	; 0x24
 800a6aa:	0018      	movs	r0, r3
 800a6ac:	f000 fcf0 	bl	800b090 <xTaskRemoveFromEventList>
 800a6b0:	1e03      	subs	r3, r0, #0
 800a6b2:	d001      	beq.n	800a6b8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6b4:	f000 fdac 	bl	800b210 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6b8:	210f      	movs	r1, #15
 800a6ba:	187b      	adds	r3, r7, r1
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	187b      	adds	r3, r7, r1
 800a6c4:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6c6:	230f      	movs	r3, #15
 800a6c8:	18fb      	adds	r3, r7, r3
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	b25b      	sxtb	r3, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	dce5      	bgt.n	800a69e <prvUnlockQueue+0x1a>
 800a6d2:	e000      	b.n	800a6d6 <prvUnlockQueue+0x52>
					break;
 800a6d4:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2245      	movs	r2, #69	; 0x45
 800a6da:	21ff      	movs	r1, #255	; 0xff
 800a6dc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800a6de:	f001 faf1 	bl	800bcc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6e2:	f001 fadd 	bl	800bca0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6e6:	230e      	movs	r3, #14
 800a6e8:	18fb      	adds	r3, r7, r3
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	2144      	movs	r1, #68	; 0x44
 800a6ee:	5c52      	ldrb	r2, [r2, r1]
 800a6f0:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6f2:	e013      	b.n	800a71c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d016      	beq.n	800a72a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3310      	adds	r3, #16
 800a700:	0018      	movs	r0, r3
 800a702:	f000 fcc5 	bl	800b090 <xTaskRemoveFromEventList>
 800a706:	1e03      	subs	r3, r0, #0
 800a708:	d001      	beq.n	800a70e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800a70a:	f000 fd81 	bl	800b210 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a70e:	210e      	movs	r1, #14
 800a710:	187b      	adds	r3, r7, r1
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	3b01      	subs	r3, #1
 800a716:	b2da      	uxtb	r2, r3
 800a718:	187b      	adds	r3, r7, r1
 800a71a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a71c:	230e      	movs	r3, #14
 800a71e:	18fb      	adds	r3, r7, r3
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	b25b      	sxtb	r3, r3
 800a724:	2b00      	cmp	r3, #0
 800a726:	dce5      	bgt.n	800a6f4 <prvUnlockQueue+0x70>
 800a728:	e000      	b.n	800a72c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800a72a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2244      	movs	r2, #68	; 0x44
 800a730:	21ff      	movs	r1, #255	; 0xff
 800a732:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800a734:	f001 fac6 	bl	800bcc4 <vPortExitCritical>
}
 800a738:	46c0      	nop			; (mov r8, r8)
 800a73a:	46bd      	mov	sp, r7
 800a73c:	b004      	add	sp, #16
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a748:	f001 faaa 	bl	800bca0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a750:	2b00      	cmp	r3, #0
 800a752:	d102      	bne.n	800a75a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a754:	2301      	movs	r3, #1
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	e001      	b.n	800a75e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a75a:	2300      	movs	r3, #0
 800a75c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a75e:	f001 fab1 	bl	800bcc4 <vPortExitCritical>

	return xReturn;
 800a762:	68fb      	ldr	r3, [r7, #12]
}
 800a764:	0018      	movs	r0, r3
 800a766:	46bd      	mov	sp, r7
 800a768:	b004      	add	sp, #16
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a774:	f001 fa94 	bl	800bca0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a780:	429a      	cmp	r2, r3
 800a782:	d102      	bne.n	800a78a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a784:	2301      	movs	r3, #1
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	e001      	b.n	800a78e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a78a:	2300      	movs	r3, #0
 800a78c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a78e:	f001 fa99 	bl	800bcc4 <vPortExitCritical>

	return xReturn;
 800a792:	68fb      	ldr	r3, [r7, #12]
}
 800a794:	0018      	movs	r0, r3
 800a796:	46bd      	mov	sp, r7
 800a798:	b004      	add	sp, #16
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
 800a7aa:	e015      	b.n	800a7d8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	; (800a7e8 <vQueueAddToRegistry+0x4c>)
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	00d2      	lsls	r2, r2, #3
 800a7b2:	58d3      	ldr	r3, [r2, r3]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10c      	bne.n	800a7d2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a7b8:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <vQueueAddToRegistry+0x4c>)
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	00d2      	lsls	r2, r2, #3
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7c2:	4a09      	ldr	r2, [pc, #36]	; (800a7e8 <vQueueAddToRegistry+0x4c>)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	18d3      	adds	r3, r2, r3
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7d0:	e006      	b.n	800a7e0 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b07      	cmp	r3, #7
 800a7dc:	d9e6      	bls.n	800a7ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7de:	46c0      	nop			; (mov r8, r8)
 800a7e0:	46c0      	nop			; (mov r8, r8)
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	b004      	add	sp, #16
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	20000c30 	.word	0x20000c30

0800a7ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7fc:	f001 fa50 	bl	800bca0 <vPortEnterCritical>
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	2244      	movs	r2, #68	; 0x44
 800a804:	5c9b      	ldrb	r3, [r3, r2]
 800a806:	b25b      	sxtb	r3, r3
 800a808:	3301      	adds	r3, #1
 800a80a:	d103      	bne.n	800a814 <vQueueWaitForMessageRestricted+0x28>
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	2244      	movs	r2, #68	; 0x44
 800a810:	2100      	movs	r1, #0
 800a812:	5499      	strb	r1, [r3, r2]
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2245      	movs	r2, #69	; 0x45
 800a818:	5c9b      	ldrb	r3, [r3, r2]
 800a81a:	b25b      	sxtb	r3, r3
 800a81c:	3301      	adds	r3, #1
 800a81e:	d103      	bne.n	800a828 <vQueueWaitForMessageRestricted+0x3c>
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	2245      	movs	r2, #69	; 0x45
 800a824:	2100      	movs	r1, #0
 800a826:	5499      	strb	r1, [r3, r2]
 800a828:	f001 fa4c 	bl	800bcc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a830:	2b00      	cmp	r3, #0
 800a832:	d106      	bne.n	800a842 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	3324      	adds	r3, #36	; 0x24
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	0018      	movs	r0, r3
 800a83e:	f000 fc01 	bl	800b044 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	0018      	movs	r0, r3
 800a846:	f7ff ff1d 	bl	800a684 <prvUnlockQueue>
	}
 800a84a:	46c0      	nop			; (mov r8, r8)
 800a84c:	46bd      	mov	sp, r7
 800a84e:	b006      	add	sp, #24
 800a850:	bd80      	pop	{r7, pc}

0800a852 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a852:	b590      	push	{r4, r7, lr}
 800a854:	b08d      	sub	sp, #52	; 0x34
 800a856:	af04      	add	r7, sp, #16
 800a858:	60f8      	str	r0, [r7, #12]
 800a85a:	60b9      	str	r1, [r7, #8]
 800a85c:	607a      	str	r2, [r7, #4]
 800a85e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <xTaskCreateStatic+0x18>
 800a866:	b672      	cpsid	i
 800a868:	e7fe      	b.n	800a868 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800a86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <xTaskCreateStatic+0x22>
 800a870:	b672      	cpsid	i
 800a872:	e7fe      	b.n	800a872 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a874:	235c      	movs	r3, #92	; 0x5c
 800a876:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2b5c      	cmp	r3, #92	; 0x5c
 800a87c:	d001      	beq.n	800a882 <xTaskCreateStatic+0x30>
 800a87e:	b672      	cpsid	i
 800a880:	e7fe      	b.n	800a880 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a882:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a886:	2b00      	cmp	r3, #0
 800a888:	d020      	beq.n	800a8cc <xTaskCreateStatic+0x7a>
 800a88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d01d      	beq.n	800a8cc <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a892:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a898:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	2259      	movs	r2, #89	; 0x59
 800a89e:	2102      	movs	r1, #2
 800a8a0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a8a2:	683c      	ldr	r4, [r7, #0]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	68b9      	ldr	r1, [r7, #8]
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9303      	str	r3, [sp, #12]
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	9302      	str	r3, [sp, #8]
 800a8b2:	2318      	movs	r3, #24
 800a8b4:	18fb      	adds	r3, r7, r3
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	0023      	movs	r3, r4
 800a8be:	f000 f859 	bl	800a974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	f000 f8df 	bl	800aa88 <prvAddNewTaskToReadyList>
 800a8ca:	e001      	b.n	800a8d0 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a8d0:	69bb      	ldr	r3, [r7, #24]
	}
 800a8d2:	0018      	movs	r0, r3
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	b009      	add	sp, #36	; 0x24
 800a8d8:	bd90      	pop	{r4, r7, pc}

0800a8da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8da:	b590      	push	{r4, r7, lr}
 800a8dc:	b08d      	sub	sp, #52	; 0x34
 800a8de:	af04      	add	r7, sp, #16
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	60b9      	str	r1, [r7, #8]
 800a8e4:	603b      	str	r3, [r7, #0]
 800a8e6:	1dbb      	adds	r3, r7, #6
 800a8e8:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a8ea:	1dbb      	adds	r3, r7, #6
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	0018      	movs	r0, r3
 800a8f2:	f001 fa6d 	bl	800bdd0 <pvPortMalloc>
 800a8f6:	0003      	movs	r3, r0
 800a8f8:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d010      	beq.n	800a922 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a900:	205c      	movs	r0, #92	; 0x5c
 800a902:	f001 fa65 	bl	800bdd0 <pvPortMalloc>
 800a906:	0003      	movs	r3, r0
 800a908:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d003      	beq.n	800a918 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	631a      	str	r2, [r3, #48]	; 0x30
 800a916:	e006      	b.n	800a926 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	0018      	movs	r0, r3
 800a91c:	f001 fb04 	bl	800bf28 <vPortFree>
 800a920:	e001      	b.n	800a926 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a922:	2300      	movs	r3, #0
 800a924:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d01a      	beq.n	800a962 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	2259      	movs	r2, #89	; 0x59
 800a930:	2100      	movs	r1, #0
 800a932:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a934:	1dbb      	adds	r3, r7, #6
 800a936:	881a      	ldrh	r2, [r3, #0]
 800a938:	683c      	ldr	r4, [r7, #0]
 800a93a:	68b9      	ldr	r1, [r7, #8]
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	2300      	movs	r3, #0
 800a940:	9303      	str	r3, [sp, #12]
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	9302      	str	r3, [sp, #8]
 800a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	0023      	movs	r3, r4
 800a950:	f000 f810 	bl	800a974 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	0018      	movs	r0, r3
 800a958:	f000 f896 	bl	800aa88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a95c:	2301      	movs	r3, #1
 800a95e:	61bb      	str	r3, [r7, #24]
 800a960:	e002      	b.n	800a968 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a962:	2301      	movs	r3, #1
 800a964:	425b      	negs	r3, r3
 800a966:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a968:	69bb      	ldr	r3, [r7, #24]
	}
 800a96a:	0018      	movs	r0, r3
 800a96c:	46bd      	mov	sp, r7
 800a96e:	b009      	add	sp, #36	; 0x24
 800a970:	bd90      	pop	{r4, r7, pc}
	...

0800a974 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a984:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	001a      	movs	r2, r3
 800a98c:	21a5      	movs	r1, #165	; 0xa5
 800a98e:	f001 fc14 	bl	800c1ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	493a      	ldr	r1, [pc, #232]	; (800aa84 <prvInitialiseNewTask+0x110>)
 800a99a:	468c      	mov	ip, r1
 800a99c:	4463      	add	r3, ip
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	18d3      	adds	r3, r2, r3
 800a9a2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	2207      	movs	r2, #7
 800a9a8:	4393      	bics	r3, r2
 800a9aa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	2207      	movs	r2, #7
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	d001      	beq.n	800a9b8 <prvInitialiseNewTask+0x44>
 800a9b4:	b672      	cpsid	i
 800a9b6:	e7fe      	b.n	800a9b6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d020      	beq.n	800aa00 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9be:	2300      	movs	r3, #0
 800a9c0:	617b      	str	r3, [r7, #20]
 800a9c2:	e013      	b.n	800a9ec <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	18d3      	adds	r3, r2, r3
 800a9ca:	7818      	ldrb	r0, [r3, #0]
 800a9cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9ce:	2134      	movs	r1, #52	; 0x34
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	18d3      	adds	r3, r2, r3
 800a9d4:	185b      	adds	r3, r3, r1
 800a9d6:	1c02      	adds	r2, r0, #0
 800a9d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	18d3      	adds	r3, r2, r3
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d006      	beq.n	800a9f4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	617b      	str	r3, [r7, #20]
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	2b0f      	cmp	r3, #15
 800a9f0:	d9e8      	bls.n	800a9c4 <prvInitialiseNewTask+0x50>
 800a9f2:	e000      	b.n	800a9f6 <prvInitialiseNewTask+0x82>
			{
				break;
 800a9f4:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	2243      	movs	r2, #67	; 0x43
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	5499      	strb	r1, [r3, r2]
 800a9fe:	e003      	b.n	800aa08 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	2234      	movs	r2, #52	; 0x34
 800aa04:	2100      	movs	r1, #0
 800aa06:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	2b37      	cmp	r3, #55	; 0x37
 800aa0c:	d901      	bls.n	800aa12 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa0e:	2337      	movs	r3, #55	; 0x37
 800aa10:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	6a3a      	ldr	r2, [r7, #32]
 800aa16:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	6a3a      	ldr	r2, [r7, #32]
 800aa1c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa20:	2200      	movs	r2, #0
 800aa22:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa26:	3304      	adds	r3, #4
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f7ff fa5b 	bl	8009ee4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	3318      	adds	r3, #24
 800aa32:	0018      	movs	r0, r3
 800aa34:	f7ff fa56 	bl	8009ee4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	2238      	movs	r2, #56	; 0x38
 800aa42:	1ad2      	subs	r2, r2, r3
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa4c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	2200      	movs	r2, #0
 800aa52:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa56:	2258      	movs	r2, #88	; 0x58
 800aa58:	2100      	movs	r1, #0
 800aa5a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	68f9      	ldr	r1, [r7, #12]
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	0018      	movs	r0, r3
 800aa64:	f001 f884 	bl	800bb70 <pxPortInitialiseStack>
 800aa68:	0002      	movs	r2, r0
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa7a:	46c0      	nop			; (mov r8, r8)
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	b006      	add	sp, #24
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	46c0      	nop			; (mov r8, r8)
 800aa84:	3fffffff 	.word	0x3fffffff

0800aa88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa90:	f001 f906 	bl	800bca0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa94:	4b2a      	ldr	r3, [pc, #168]	; (800ab40 <prvAddNewTaskToReadyList+0xb8>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	4b29      	ldr	r3, [pc, #164]	; (800ab40 <prvAddNewTaskToReadyList+0xb8>)
 800aa9c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800aa9e:	4b29      	ldr	r3, [pc, #164]	; (800ab44 <prvAddNewTaskToReadyList+0xbc>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d109      	bne.n	800aaba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aaa6:	4b27      	ldr	r3, [pc, #156]	; (800ab44 <prvAddNewTaskToReadyList+0xbc>)
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aaac:	4b24      	ldr	r3, [pc, #144]	; (800ab40 <prvAddNewTaskToReadyList+0xb8>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d110      	bne.n	800aad6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aab4:	f000 fbc6 	bl	800b244 <prvInitialiseTaskLists>
 800aab8:	e00d      	b.n	800aad6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aaba:	4b23      	ldr	r3, [pc, #140]	; (800ab48 <prvAddNewTaskToReadyList+0xc0>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d109      	bne.n	800aad6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aac2:	4b20      	ldr	r3, [pc, #128]	; (800ab44 <prvAddNewTaskToReadyList+0xbc>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aacc:	429a      	cmp	r2, r3
 800aace:	d802      	bhi.n	800aad6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aad0:	4b1c      	ldr	r3, [pc, #112]	; (800ab44 <prvAddNewTaskToReadyList+0xbc>)
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aad6:	4b1d      	ldr	r3, [pc, #116]	; (800ab4c <prvAddNewTaskToReadyList+0xc4>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	4b1b      	ldr	r3, [pc, #108]	; (800ab4c <prvAddNewTaskToReadyList+0xc4>)
 800aade:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aae0:	4b1a      	ldr	r3, [pc, #104]	; (800ab4c <prvAddNewTaskToReadyList+0xc4>)
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaec:	4b18      	ldr	r3, [pc, #96]	; (800ab50 <prvAddNewTaskToReadyList+0xc8>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d903      	bls.n	800aafc <prvAddNewTaskToReadyList+0x74>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf8:	4b15      	ldr	r3, [pc, #84]	; (800ab50 <prvAddNewTaskToReadyList+0xc8>)
 800aafa:	601a      	str	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab00:	0013      	movs	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	189b      	adds	r3, r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4a12      	ldr	r2, [pc, #72]	; (800ab54 <prvAddNewTaskToReadyList+0xcc>)
 800ab0a:	189a      	adds	r2, r3, r2
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	3304      	adds	r3, #4
 800ab10:	0019      	movs	r1, r3
 800ab12:	0010      	movs	r0, r2
 800ab14:	f7ff f9f1 	bl	8009efa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab18:	f001 f8d4 	bl	800bcc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab1c:	4b0a      	ldr	r3, [pc, #40]	; (800ab48 <prvAddNewTaskToReadyList+0xc0>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d008      	beq.n	800ab36 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab24:	4b07      	ldr	r3, [pc, #28]	; (800ab44 <prvAddNewTaskToReadyList+0xbc>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d201      	bcs.n	800ab36 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab32:	f001 f8a5 	bl	800bc80 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	b002      	add	sp, #8
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	46c0      	nop			; (mov r8, r8)
 800ab40:	20001144 	.word	0x20001144
 800ab44:	20000c70 	.word	0x20000c70
 800ab48:	20001150 	.word	0x20001150
 800ab4c:	20001160 	.word	0x20001160
 800ab50:	2000114c 	.word	0x2000114c
 800ab54:	20000c74 	.word	0x20000c74

0800ab58 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <vTaskDelayUntil+0x18>
 800ab6c:	b672      	cpsid	i
 800ab6e:	e7fe      	b.n	800ab6e <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d101      	bne.n	800ab7a <vTaskDelayUntil+0x22>
 800ab76:	b672      	cpsid	i
 800ab78:	e7fe      	b.n	800ab78 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
 800ab7a:	4b23      	ldr	r3, [pc, #140]	; (800ac08 <vTaskDelayUntil+0xb0>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <vTaskDelayUntil+0x2e>
 800ab82:	b672      	cpsid	i
 800ab84:	e7fe      	b.n	800ab84 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 800ab86:	f000 f897 	bl	800acb8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ab8a:	4b20      	ldr	r3, [pc, #128]	; (800ac0c <vTaskDelayUntil+0xb4>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	18d3      	adds	r3, r2, r3
 800ab98:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d20b      	bcs.n	800abbc <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d211      	bcs.n	800abd2 <vTaskDelayUntil+0x7a>
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d90d      	bls.n	800abd2 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 800abb6:	2301      	movs	r3, #1
 800abb8:	617b      	str	r3, [r7, #20]
 800abba:	e00a      	b.n	800abd2 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d303      	bcc.n	800abce <vTaskDelayUntil+0x76>
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d901      	bls.n	800abd2 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 800abce:	2301      	movs	r3, #1
 800abd0:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d006      	beq.n	800abec <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	2100      	movs	r1, #0
 800abe6:	0018      	movs	r0, r3
 800abe8:	f000 fc5c 	bl	800b4a4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800abec:	f000 f870 	bl	800acd0 <xTaskResumeAll>
 800abf0:	0003      	movs	r3, r0
 800abf2:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
 800abfa:	f001 f841 	bl	800bc80 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800abfe:	46c0      	nop			; (mov r8, r8)
 800ac00:	46bd      	mov	sp, r7
 800ac02:	b006      	add	sp, #24
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	46c0      	nop			; (mov r8, r8)
 800ac08:	2000116c 	.word	0x2000116c
 800ac0c:	20001148 	.word	0x20001148

0800ac10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac10:	b590      	push	{r4, r7, lr}
 800ac12:	b089      	sub	sp, #36	; 0x24
 800ac14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac16:	2300      	movs	r3, #0
 800ac18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac1e:	003a      	movs	r2, r7
 800ac20:	1d39      	adds	r1, r7, #4
 800ac22:	2308      	movs	r3, #8
 800ac24:	18fb      	adds	r3, r7, r3
 800ac26:	0018      	movs	r0, r3
 800ac28:	f7ff f90e 	bl	8009e48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac2c:	683c      	ldr	r4, [r7, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	491b      	ldr	r1, [pc, #108]	; (800aca0 <vTaskStartScheduler+0x90>)
 800ac34:	481b      	ldr	r0, [pc, #108]	; (800aca4 <vTaskStartScheduler+0x94>)
 800ac36:	9202      	str	r2, [sp, #8]
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	0022      	movs	r2, r4
 800ac42:	f7ff fe06 	bl	800a852 <xTaskCreateStatic>
 800ac46:	0002      	movs	r2, r0
 800ac48:	4b17      	ldr	r3, [pc, #92]	; (800aca8 <vTaskStartScheduler+0x98>)
 800ac4a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac4c:	4b16      	ldr	r3, [pc, #88]	; (800aca8 <vTaskStartScheduler+0x98>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac54:	2301      	movs	r3, #1
 800ac56:	60fb      	str	r3, [r7, #12]
 800ac58:	e001      	b.n	800ac5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d103      	bne.n	800ac6c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800ac64:	f000 fc72 	bl	800b54c <xTimerCreateTimerTask>
 800ac68:	0003      	movs	r3, r0
 800ac6a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d10d      	bne.n	800ac8e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800ac72:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac74:	4b0d      	ldr	r3, [pc, #52]	; (800acac <vTaskStartScheduler+0x9c>)
 800ac76:	2201      	movs	r2, #1
 800ac78:	4252      	negs	r2, r2
 800ac7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac7c:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <vTaskStartScheduler+0xa0>)
 800ac7e:	2201      	movs	r2, #1
 800ac80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac82:	4b0c      	ldr	r3, [pc, #48]	; (800acb4 <vTaskStartScheduler+0xa4>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac88:	f000 ffd6 	bl	800bc38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac8c:	e004      	b.n	800ac98 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3301      	adds	r3, #1
 800ac92:	d101      	bne.n	800ac98 <vTaskStartScheduler+0x88>
 800ac94:	b672      	cpsid	i
 800ac96:	e7fe      	b.n	800ac96 <vTaskStartScheduler+0x86>
}
 800ac98:	46c0      	nop			; (mov r8, r8)
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	b005      	add	sp, #20
 800ac9e:	bd90      	pop	{r4, r7, pc}
 800aca0:	0800f7bc 	.word	0x0800f7bc
 800aca4:	0800b225 	.word	0x0800b225
 800aca8:	20001168 	.word	0x20001168
 800acac:	20001164 	.word	0x20001164
 800acb0:	20001150 	.word	0x20001150
 800acb4:	20001148 	.word	0x20001148

0800acb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800acbc:	4b03      	ldr	r3, [pc, #12]	; (800accc <vTaskSuspendAll+0x14>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	4b02      	ldr	r3, [pc, #8]	; (800accc <vTaskSuspendAll+0x14>)
 800acc4:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800acc6:	46c0      	nop			; (mov r8, r8)
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	2000116c 	.word	0x2000116c

0800acd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800acda:	2300      	movs	r3, #0
 800acdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800acde:	4b3a      	ldr	r3, [pc, #232]	; (800adc8 <xTaskResumeAll+0xf8>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <xTaskResumeAll+0x1a>
 800ace6:	b672      	cpsid	i
 800ace8:	e7fe      	b.n	800ace8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800acea:	f000 ffd9 	bl	800bca0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800acee:	4b36      	ldr	r3, [pc, #216]	; (800adc8 <xTaskResumeAll+0xf8>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	1e5a      	subs	r2, r3, #1
 800acf4:	4b34      	ldr	r3, [pc, #208]	; (800adc8 <xTaskResumeAll+0xf8>)
 800acf6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acf8:	4b33      	ldr	r3, [pc, #204]	; (800adc8 <xTaskResumeAll+0xf8>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d15b      	bne.n	800adb8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad00:	4b32      	ldr	r3, [pc, #200]	; (800adcc <xTaskResumeAll+0xfc>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d057      	beq.n	800adb8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad08:	e02f      	b.n	800ad6a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad0a:	4b31      	ldr	r3, [pc, #196]	; (800add0 <xTaskResumeAll+0x100>)
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3318      	adds	r3, #24
 800ad16:	0018      	movs	r0, r3
 800ad18:	f7ff f947 	bl	8009faa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3304      	adds	r3, #4
 800ad20:	0018      	movs	r0, r3
 800ad22:	f7ff f942 	bl	8009faa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2a:	4b2a      	ldr	r3, [pc, #168]	; (800add4 <xTaskResumeAll+0x104>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d903      	bls.n	800ad3a <xTaskResumeAll+0x6a>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad36:	4b27      	ldr	r3, [pc, #156]	; (800add4 <xTaskResumeAll+0x104>)
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3e:	0013      	movs	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	189b      	adds	r3, r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4a24      	ldr	r2, [pc, #144]	; (800add8 <xTaskResumeAll+0x108>)
 800ad48:	189a      	adds	r2, r3, r2
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	0019      	movs	r1, r3
 800ad50:	0010      	movs	r0, r2
 800ad52:	f7ff f8d2 	bl	8009efa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad5a:	4b20      	ldr	r3, [pc, #128]	; (800addc <xTaskResumeAll+0x10c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d302      	bcc.n	800ad6a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800ad64:	4b1e      	ldr	r3, [pc, #120]	; (800ade0 <xTaskResumeAll+0x110>)
 800ad66:	2201      	movs	r2, #1
 800ad68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad6a:	4b19      	ldr	r3, [pc, #100]	; (800add0 <xTaskResumeAll+0x100>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1cb      	bne.n	800ad0a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad78:	f000 fafe 	bl	800b378 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad7c:	4b19      	ldr	r3, [pc, #100]	; (800ade4 <xTaskResumeAll+0x114>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00f      	beq.n	800ada8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad88:	f000 f83c 	bl	800ae04 <xTaskIncrementTick>
 800ad8c:	1e03      	subs	r3, r0, #0
 800ad8e:	d002      	beq.n	800ad96 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800ad90:	4b13      	ldr	r3, [pc, #76]	; (800ade0 <xTaskResumeAll+0x110>)
 800ad92:	2201      	movs	r2, #1
 800ad94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1f2      	bne.n	800ad88 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800ada2:	4b10      	ldr	r3, [pc, #64]	; (800ade4 <xTaskResumeAll+0x114>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ada8:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <xTaskResumeAll+0x110>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d003      	beq.n	800adb8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800adb0:	2301      	movs	r3, #1
 800adb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800adb4:	f000 ff64 	bl	800bc80 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800adb8:	f000 ff84 	bl	800bcc4 <vPortExitCritical>

	return xAlreadyYielded;
 800adbc:	68bb      	ldr	r3, [r7, #8]
}
 800adbe:	0018      	movs	r0, r3
 800adc0:	46bd      	mov	sp, r7
 800adc2:	b004      	add	sp, #16
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	2000116c 	.word	0x2000116c
 800adcc:	20001144 	.word	0x20001144
 800add0:	20001104 	.word	0x20001104
 800add4:	2000114c 	.word	0x2000114c
 800add8:	20000c74 	.word	0x20000c74
 800addc:	20000c70 	.word	0x20000c70
 800ade0:	20001158 	.word	0x20001158
 800ade4:	20001154 	.word	0x20001154

0800ade8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800adee:	4b04      	ldr	r3, [pc, #16]	; (800ae00 <xTaskGetTickCount+0x18>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800adf4:	687b      	ldr	r3, [r7, #4]
}
 800adf6:	0018      	movs	r0, r3
 800adf8:	46bd      	mov	sp, r7
 800adfa:	b002      	add	sp, #8
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	46c0      	nop			; (mov r8, r8)
 800ae00:	20001148 	.word	0x20001148

0800ae04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae0e:	4b4a      	ldr	r3, [pc, #296]	; (800af38 <xTaskIncrementTick+0x134>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d000      	beq.n	800ae18 <xTaskIncrementTick+0x14>
 800ae16:	e084      	b.n	800af22 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae18:	4b48      	ldr	r3, [pc, #288]	; (800af3c <xTaskIncrementTick+0x138>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae20:	4b46      	ldr	r3, [pc, #280]	; (800af3c <xTaskIncrementTick+0x138>)
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d117      	bne.n	800ae5c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae2c:	4b44      	ldr	r3, [pc, #272]	; (800af40 <xTaskIncrementTick+0x13c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d001      	beq.n	800ae3a <xTaskIncrementTick+0x36>
 800ae36:	b672      	cpsid	i
 800ae38:	e7fe      	b.n	800ae38 <xTaskIncrementTick+0x34>
 800ae3a:	4b41      	ldr	r3, [pc, #260]	; (800af40 <xTaskIncrementTick+0x13c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	4b40      	ldr	r3, [pc, #256]	; (800af44 <xTaskIncrementTick+0x140>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	4b3e      	ldr	r3, [pc, #248]	; (800af40 <xTaskIncrementTick+0x13c>)
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	4b3e      	ldr	r3, [pc, #248]	; (800af44 <xTaskIncrementTick+0x140>)
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	601a      	str	r2, [r3, #0]
 800ae4e:	4b3e      	ldr	r3, [pc, #248]	; (800af48 <xTaskIncrementTick+0x144>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	1c5a      	adds	r2, r3, #1
 800ae54:	4b3c      	ldr	r3, [pc, #240]	; (800af48 <xTaskIncrementTick+0x144>)
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	f000 fa8e 	bl	800b378 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae5c:	4b3b      	ldr	r3, [pc, #236]	; (800af4c <xTaskIncrementTick+0x148>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d349      	bcc.n	800aefa <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae66:	4b36      	ldr	r3, [pc, #216]	; (800af40 <xTaskIncrementTick+0x13c>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d104      	bne.n	800ae7a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae70:	4b36      	ldr	r3, [pc, #216]	; (800af4c <xTaskIncrementTick+0x148>)
 800ae72:	2201      	movs	r2, #1
 800ae74:	4252      	negs	r2, r2
 800ae76:	601a      	str	r2, [r3, #0]
					break;
 800ae78:	e03f      	b.n	800aefa <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae7a:	4b31      	ldr	r3, [pc, #196]	; (800af40 <xTaskIncrementTick+0x13c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae8a:	693a      	ldr	r2, [r7, #16]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d203      	bcs.n	800ae9a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae92:	4b2e      	ldr	r3, [pc, #184]	; (800af4c <xTaskIncrementTick+0x148>)
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae98:	e02f      	b.n	800aefa <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	0018      	movs	r0, r3
 800aea0:	f7ff f883 	bl	8009faa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d004      	beq.n	800aeb6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	3318      	adds	r3, #24
 800aeb0:	0018      	movs	r0, r3
 800aeb2:	f7ff f87a 	bl	8009faa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeba:	4b25      	ldr	r3, [pc, #148]	; (800af50 <xTaskIncrementTick+0x14c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d903      	bls.n	800aeca <xTaskIncrementTick+0xc6>
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec6:	4b22      	ldr	r3, [pc, #136]	; (800af50 <xTaskIncrementTick+0x14c>)
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aece:	0013      	movs	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	189b      	adds	r3, r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4a1f      	ldr	r2, [pc, #124]	; (800af54 <xTaskIncrementTick+0x150>)
 800aed8:	189a      	adds	r2, r3, r2
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	3304      	adds	r3, #4
 800aede:	0019      	movs	r1, r3
 800aee0:	0010      	movs	r0, r2
 800aee2:	f7ff f80a 	bl	8009efa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeea:	4b1b      	ldr	r3, [pc, #108]	; (800af58 <xTaskIncrementTick+0x154>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d3b8      	bcc.n	800ae66 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800aef4:	2301      	movs	r3, #1
 800aef6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aef8:	e7b5      	b.n	800ae66 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aefa:	4b17      	ldr	r3, [pc, #92]	; (800af58 <xTaskIncrementTick+0x154>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af00:	4914      	ldr	r1, [pc, #80]	; (800af54 <xTaskIncrementTick+0x150>)
 800af02:	0013      	movs	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	189b      	adds	r3, r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	585b      	ldr	r3, [r3, r1]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d901      	bls.n	800af14 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800af10:	2301      	movs	r3, #1
 800af12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af14:	4b11      	ldr	r3, [pc, #68]	; (800af5c <xTaskIncrementTick+0x158>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d007      	beq.n	800af2c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800af1c:	2301      	movs	r3, #1
 800af1e:	617b      	str	r3, [r7, #20]
 800af20:	e004      	b.n	800af2c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af22:	4b0f      	ldr	r3, [pc, #60]	; (800af60 <xTaskIncrementTick+0x15c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	1c5a      	adds	r2, r3, #1
 800af28:	4b0d      	ldr	r3, [pc, #52]	; (800af60 <xTaskIncrementTick+0x15c>)
 800af2a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af2c:	697b      	ldr	r3, [r7, #20]
}
 800af2e:	0018      	movs	r0, r3
 800af30:	46bd      	mov	sp, r7
 800af32:	b006      	add	sp, #24
 800af34:	bd80      	pop	{r7, pc}
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	2000116c 	.word	0x2000116c
 800af3c:	20001148 	.word	0x20001148
 800af40:	200010fc 	.word	0x200010fc
 800af44:	20001100 	.word	0x20001100
 800af48:	2000115c 	.word	0x2000115c
 800af4c:	20001164 	.word	0x20001164
 800af50:	2000114c 	.word	0x2000114c
 800af54:	20000c74 	.word	0x20000c74
 800af58:	20000c70 	.word	0x20000c70
 800af5c:	20001158 	.word	0x20001158
 800af60:	20001154 	.word	0x20001154

0800af64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af6a:	4b22      	ldr	r3, [pc, #136]	; (800aff4 <vTaskSwitchContext+0x90>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af72:	4b21      	ldr	r3, [pc, #132]	; (800aff8 <vTaskSwitchContext+0x94>)
 800af74:	2201      	movs	r2, #1
 800af76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af78:	e037      	b.n	800afea <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800af7a:	4b1f      	ldr	r3, [pc, #124]	; (800aff8 <vTaskSwitchContext+0x94>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af80:	4b1e      	ldr	r3, [pc, #120]	; (800affc <vTaskSwitchContext+0x98>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	607b      	str	r3, [r7, #4]
 800af86:	e007      	b.n	800af98 <vTaskSwitchContext+0x34>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <vTaskSwitchContext+0x2e>
 800af8e:	b672      	cpsid	i
 800af90:	e7fe      	b.n	800af90 <vTaskSwitchContext+0x2c>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3b01      	subs	r3, #1
 800af96:	607b      	str	r3, [r7, #4]
 800af98:	4919      	ldr	r1, [pc, #100]	; (800b000 <vTaskSwitchContext+0x9c>)
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	0013      	movs	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	189b      	adds	r3, r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	585b      	ldr	r3, [r3, r1]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0ee      	beq.n	800af88 <vTaskSwitchContext+0x24>
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	0013      	movs	r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	189b      	adds	r3, r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4a12      	ldr	r2, [pc, #72]	; (800b000 <vTaskSwitchContext+0x9c>)
 800afb6:	189b      	adds	r3, r3, r2
 800afb8:	603b      	str	r3, [r7, #0]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	605a      	str	r2, [r3, #4]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	3308      	adds	r3, #8
 800afcc:	429a      	cmp	r2, r3
 800afce:	d104      	bne.n	800afda <vTaskSwitchContext+0x76>
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	605a      	str	r2, [r3, #4]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	68da      	ldr	r2, [r3, #12]
 800afe0:	4b08      	ldr	r3, [pc, #32]	; (800b004 <vTaskSwitchContext+0xa0>)
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	4b05      	ldr	r3, [pc, #20]	; (800affc <vTaskSwitchContext+0x98>)
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	601a      	str	r2, [r3, #0]
}
 800afea:	46c0      	nop			; (mov r8, r8)
 800afec:	46bd      	mov	sp, r7
 800afee:	b002      	add	sp, #8
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	46c0      	nop			; (mov r8, r8)
 800aff4:	2000116c 	.word	0x2000116c
 800aff8:	20001158 	.word	0x20001158
 800affc:	2000114c 	.word	0x2000114c
 800b000:	20000c74 	.word	0x20000c74
 800b004:	20000c70 	.word	0x20000c70

0800b008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d101      	bne.n	800b01c <vTaskPlaceOnEventList+0x14>
 800b018:	b672      	cpsid	i
 800b01a:	e7fe      	b.n	800b01a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b01c:	4b08      	ldr	r3, [pc, #32]	; (800b040 <vTaskPlaceOnEventList+0x38>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3318      	adds	r3, #24
 800b022:	001a      	movs	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	0011      	movs	r1, r2
 800b028:	0018      	movs	r0, r3
 800b02a:	f7fe ff88 	bl	8009f3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	2101      	movs	r1, #1
 800b032:	0018      	movs	r0, r3
 800b034:	f000 fa36 	bl	800b4a4 <prvAddCurrentTaskToDelayedList>
}
 800b038:	46c0      	nop			; (mov r8, r8)
 800b03a:	46bd      	mov	sp, r7
 800b03c:	b002      	add	sp, #8
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	20000c70 	.word	0x20000c70

0800b044 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d101      	bne.n	800b05a <vTaskPlaceOnEventListRestricted+0x16>
 800b056:	b672      	cpsid	i
 800b058:	e7fe      	b.n	800b058 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b05a:	4b0c      	ldr	r3, [pc, #48]	; (800b08c <vTaskPlaceOnEventListRestricted+0x48>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	3318      	adds	r3, #24
 800b060:	001a      	movs	r2, r3
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	0011      	movs	r1, r2
 800b066:	0018      	movs	r0, r3
 800b068:	f7fe ff47 	bl	8009efa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d002      	beq.n	800b078 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800b072:	2301      	movs	r3, #1
 800b074:	425b      	negs	r3, r3
 800b076:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	0011      	movs	r1, r2
 800b07e:	0018      	movs	r0, r3
 800b080:	f000 fa10 	bl	800b4a4 <prvAddCurrentTaskToDelayedList>
	}
 800b084:	46c0      	nop			; (mov r8, r8)
 800b086:	46bd      	mov	sp, r7
 800b088:	b004      	add	sp, #16
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	20000c70 	.word	0x20000c70

0800b090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <xTaskRemoveFromEventList+0x1a>
 800b0a6:	b672      	cpsid	i
 800b0a8:	e7fe      	b.n	800b0a8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	3318      	adds	r3, #24
 800b0ae:	0018      	movs	r0, r3
 800b0b0:	f7fe ff7b 	bl	8009faa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0b4:	4b1e      	ldr	r3, [pc, #120]	; (800b130 <xTaskRemoveFromEventList+0xa0>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d11d      	bne.n	800b0f8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	0018      	movs	r0, r3
 800b0c2:	f7fe ff72 	bl	8009faa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ca:	4b1a      	ldr	r3, [pc, #104]	; (800b134 <xTaskRemoveFromEventList+0xa4>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d903      	bls.n	800b0da <xTaskRemoveFromEventList+0x4a>
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d6:	4b17      	ldr	r3, [pc, #92]	; (800b134 <xTaskRemoveFromEventList+0xa4>)
 800b0d8:	601a      	str	r2, [r3, #0]
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0de:	0013      	movs	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	189b      	adds	r3, r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4a14      	ldr	r2, [pc, #80]	; (800b138 <xTaskRemoveFromEventList+0xa8>)
 800b0e8:	189a      	adds	r2, r3, r2
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	0019      	movs	r1, r3
 800b0f0:	0010      	movs	r0, r2
 800b0f2:	f7fe ff02 	bl	8009efa <vListInsertEnd>
 800b0f6:	e007      	b.n	800b108 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	3318      	adds	r3, #24
 800b0fc:	001a      	movs	r2, r3
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <xTaskRemoveFromEventList+0xac>)
 800b100:	0011      	movs	r1, r2
 800b102:	0018      	movs	r0, r3
 800b104:	f7fe fef9 	bl	8009efa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10c:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <xTaskRemoveFromEventList+0xb0>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b112:	429a      	cmp	r2, r3
 800b114:	d905      	bls.n	800b122 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b116:	2301      	movs	r3, #1
 800b118:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b11a:	4b0a      	ldr	r3, [pc, #40]	; (800b144 <xTaskRemoveFromEventList+0xb4>)
 800b11c:	2201      	movs	r2, #1
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	e001      	b.n	800b126 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800b122:	2300      	movs	r3, #0
 800b124:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800b126:	68fb      	ldr	r3, [r7, #12]
}
 800b128:	0018      	movs	r0, r3
 800b12a:	46bd      	mov	sp, r7
 800b12c:	b004      	add	sp, #16
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	2000116c 	.word	0x2000116c
 800b134:	2000114c 	.word	0x2000114c
 800b138:	20000c74 	.word	0x20000c74
 800b13c:	20001104 	.word	0x20001104
 800b140:	20000c70 	.word	0x20000c70
 800b144:	20001158 	.word	0x20001158

0800b148 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b150:	4b05      	ldr	r3, [pc, #20]	; (800b168 <vTaskInternalSetTimeOutState+0x20>)
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b158:	4b04      	ldr	r3, [pc, #16]	; (800b16c <vTaskInternalSetTimeOutState+0x24>)
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	605a      	str	r2, [r3, #4]
}
 800b160:	46c0      	nop			; (mov r8, r8)
 800b162:	46bd      	mov	sp, r7
 800b164:	b002      	add	sp, #8
 800b166:	bd80      	pop	{r7, pc}
 800b168:	2000115c 	.word	0x2000115c
 800b16c:	20001148 	.word	0x20001148

0800b170 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d101      	bne.n	800b184 <xTaskCheckForTimeOut+0x14>
 800b180:	b672      	cpsid	i
 800b182:	e7fe      	b.n	800b182 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <xTaskCheckForTimeOut+0x1e>
 800b18a:	b672      	cpsid	i
 800b18c:	e7fe      	b.n	800b18c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800b18e:	f000 fd87 	bl	800bca0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b192:	4b1d      	ldr	r3, [pc, #116]	; (800b208 <xTaskCheckForTimeOut+0x98>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	693a      	ldr	r2, [r7, #16]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	d102      	bne.n	800b1b0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	617b      	str	r3, [r7, #20]
 800b1ae:	e024      	b.n	800b1fa <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	4b15      	ldr	r3, [pc, #84]	; (800b20c <xTaskCheckForTimeOut+0x9c>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d007      	beq.n	800b1cc <xTaskCheckForTimeOut+0x5c>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d302      	bcc.n	800b1cc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	617b      	str	r3, [r7, #20]
 800b1ca:	e016      	b.n	800b1fa <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d20c      	bcs.n	800b1f0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	1ad2      	subs	r2, r2, r3
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	0018      	movs	r0, r3
 800b1e6:	f7ff ffaf 	bl	800b148 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	617b      	str	r3, [r7, #20]
 800b1ee:	e004      	b.n	800b1fa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b1fa:	f000 fd63 	bl	800bcc4 <vPortExitCritical>

	return xReturn;
 800b1fe:	697b      	ldr	r3, [r7, #20]
}
 800b200:	0018      	movs	r0, r3
 800b202:	46bd      	mov	sp, r7
 800b204:	b006      	add	sp, #24
 800b206:	bd80      	pop	{r7, pc}
 800b208:	20001148 	.word	0x20001148
 800b20c:	2000115c 	.word	0x2000115c

0800b210 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b214:	4b02      	ldr	r3, [pc, #8]	; (800b220 <vTaskMissedYield+0x10>)
 800b216:	2201      	movs	r2, #1
 800b218:	601a      	str	r2, [r3, #0]
}
 800b21a:	46c0      	nop			; (mov r8, r8)
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	20001158 	.word	0x20001158

0800b224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b22c:	f000 f84e 	bl	800b2cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b230:	4b03      	ldr	r3, [pc, #12]	; (800b240 <prvIdleTask+0x1c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d9f9      	bls.n	800b22c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b238:	f000 fd22 	bl	800bc80 <vPortYield>
		prvCheckTasksWaitingTermination();
 800b23c:	e7f6      	b.n	800b22c <prvIdleTask+0x8>
 800b23e:	46c0      	nop			; (mov r8, r8)
 800b240:	20000c74 	.word	0x20000c74

0800b244 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b24a:	2300      	movs	r3, #0
 800b24c:	607b      	str	r3, [r7, #4]
 800b24e:	e00c      	b.n	800b26a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	0013      	movs	r3, r2
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	189b      	adds	r3, r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4a14      	ldr	r2, [pc, #80]	; (800b2ac <prvInitialiseTaskLists+0x68>)
 800b25c:	189b      	adds	r3, r3, r2
 800b25e:	0018      	movs	r0, r3
 800b260:	f7fe fe22 	bl	8009ea8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3301      	adds	r3, #1
 800b268:	607b      	str	r3, [r7, #4]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b37      	cmp	r3, #55	; 0x37
 800b26e:	d9ef      	bls.n	800b250 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b270:	4b0f      	ldr	r3, [pc, #60]	; (800b2b0 <prvInitialiseTaskLists+0x6c>)
 800b272:	0018      	movs	r0, r3
 800b274:	f7fe fe18 	bl	8009ea8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b278:	4b0e      	ldr	r3, [pc, #56]	; (800b2b4 <prvInitialiseTaskLists+0x70>)
 800b27a:	0018      	movs	r0, r3
 800b27c:	f7fe fe14 	bl	8009ea8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b280:	4b0d      	ldr	r3, [pc, #52]	; (800b2b8 <prvInitialiseTaskLists+0x74>)
 800b282:	0018      	movs	r0, r3
 800b284:	f7fe fe10 	bl	8009ea8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b288:	4b0c      	ldr	r3, [pc, #48]	; (800b2bc <prvInitialiseTaskLists+0x78>)
 800b28a:	0018      	movs	r0, r3
 800b28c:	f7fe fe0c 	bl	8009ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b290:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <prvInitialiseTaskLists+0x7c>)
 800b292:	0018      	movs	r0, r3
 800b294:	f7fe fe08 	bl	8009ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b298:	4b0a      	ldr	r3, [pc, #40]	; (800b2c4 <prvInitialiseTaskLists+0x80>)
 800b29a:	4a05      	ldr	r2, [pc, #20]	; (800b2b0 <prvInitialiseTaskLists+0x6c>)
 800b29c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b29e:	4b0a      	ldr	r3, [pc, #40]	; (800b2c8 <prvInitialiseTaskLists+0x84>)
 800b2a0:	4a04      	ldr	r2, [pc, #16]	; (800b2b4 <prvInitialiseTaskLists+0x70>)
 800b2a2:	601a      	str	r2, [r3, #0]
}
 800b2a4:	46c0      	nop			; (mov r8, r8)
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	b002      	add	sp, #8
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	20000c74 	.word	0x20000c74
 800b2b0:	200010d4 	.word	0x200010d4
 800b2b4:	200010e8 	.word	0x200010e8
 800b2b8:	20001104 	.word	0x20001104
 800b2bc:	20001118 	.word	0x20001118
 800b2c0:	20001130 	.word	0x20001130
 800b2c4:	200010fc 	.word	0x200010fc
 800b2c8:	20001100 	.word	0x20001100

0800b2cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2d2:	e01a      	b.n	800b30a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800b2d4:	f000 fce4 	bl	800bca0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2d8:	4b10      	ldr	r3, [pc, #64]	; (800b31c <prvCheckTasksWaitingTermination+0x50>)
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	0018      	movs	r0, r3
 800b2e6:	f7fe fe60 	bl	8009faa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b2ea:	4b0d      	ldr	r3, [pc, #52]	; (800b320 <prvCheckTasksWaitingTermination+0x54>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	1e5a      	subs	r2, r3, #1
 800b2f0:	4b0b      	ldr	r3, [pc, #44]	; (800b320 <prvCheckTasksWaitingTermination+0x54>)
 800b2f2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b2f4:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <prvCheckTasksWaitingTermination+0x58>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	1e5a      	subs	r2, r3, #1
 800b2fa:	4b0a      	ldr	r3, [pc, #40]	; (800b324 <prvCheckTasksWaitingTermination+0x58>)
 800b2fc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800b2fe:	f000 fce1 	bl	800bcc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	0018      	movs	r0, r3
 800b306:	f000 f80f 	bl	800b328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b30a:	4b06      	ldr	r3, [pc, #24]	; (800b324 <prvCheckTasksWaitingTermination+0x58>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e0      	bne.n	800b2d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b312:	46c0      	nop			; (mov r8, r8)
 800b314:	46c0      	nop			; (mov r8, r8)
 800b316:	46bd      	mov	sp, r7
 800b318:	b002      	add	sp, #8
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	20001118 	.word	0x20001118
 800b320:	20001144 	.word	0x20001144
 800b324:	2000112c 	.word	0x2000112c

0800b328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2259      	movs	r2, #89	; 0x59
 800b334:	5c9b      	ldrb	r3, [r3, r2]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d109      	bne.n	800b34e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33e:	0018      	movs	r0, r3
 800b340:	f000 fdf2 	bl	800bf28 <vPortFree>
				vPortFree( pxTCB );
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	0018      	movs	r0, r3
 800b348:	f000 fdee 	bl	800bf28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b34c:	e010      	b.n	800b370 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2259      	movs	r2, #89	; 0x59
 800b352:	5c9b      	ldrb	r3, [r3, r2]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d104      	bne.n	800b362 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	0018      	movs	r0, r3
 800b35c:	f000 fde4 	bl	800bf28 <vPortFree>
	}
 800b360:	e006      	b.n	800b370 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2259      	movs	r2, #89	; 0x59
 800b366:	5c9b      	ldrb	r3, [r3, r2]
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d001      	beq.n	800b370 <prvDeleteTCB+0x48>
 800b36c:	b672      	cpsid	i
 800b36e:	e7fe      	b.n	800b36e <prvDeleteTCB+0x46>
	}
 800b370:	46c0      	nop			; (mov r8, r8)
 800b372:	46bd      	mov	sp, r7
 800b374:	b002      	add	sp, #8
 800b376:	bd80      	pop	{r7, pc}

0800b378 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b37e:	4b0b      	ldr	r3, [pc, #44]	; (800b3ac <prvResetNextTaskUnblockTime+0x34>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d104      	bne.n	800b392 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b388:	4b09      	ldr	r3, [pc, #36]	; (800b3b0 <prvResetNextTaskUnblockTime+0x38>)
 800b38a:	2201      	movs	r2, #1
 800b38c:	4252      	negs	r2, r2
 800b38e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b390:	e008      	b.n	800b3a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b392:	4b06      	ldr	r3, [pc, #24]	; (800b3ac <prvResetNextTaskUnblockTime+0x34>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685a      	ldr	r2, [r3, #4]
 800b3a0:	4b03      	ldr	r3, [pc, #12]	; (800b3b0 <prvResetNextTaskUnblockTime+0x38>)
 800b3a2:	601a      	str	r2, [r3, #0]
}
 800b3a4:	46c0      	nop			; (mov r8, r8)
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	b002      	add	sp, #8
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	200010fc 	.word	0x200010fc
 800b3b0:	20001164 	.word	0x20001164

0800b3b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b3ba:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <xTaskGetSchedulerState+0x30>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d102      	bne.n	800b3c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	607b      	str	r3, [r7, #4]
 800b3c6:	e008      	b.n	800b3da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3c8:	4b07      	ldr	r3, [pc, #28]	; (800b3e8 <xTaskGetSchedulerState+0x34>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d102      	bne.n	800b3d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	607b      	str	r3, [r7, #4]
 800b3d4:	e001      	b.n	800b3da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3da:	687b      	ldr	r3, [r7, #4]
	}
 800b3dc:	0018      	movs	r0, r3
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	b002      	add	sp, #8
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	20001150 	.word	0x20001150
 800b3e8:	2000116c 	.word	0x2000116c

0800b3ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d044      	beq.n	800b48c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b402:	4b25      	ldr	r3, [pc, #148]	; (800b498 <xTaskPriorityDisinherit+0xac>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d001      	beq.n	800b410 <xTaskPriorityDisinherit+0x24>
 800b40c:	b672      	cpsid	i
 800b40e:	e7fe      	b.n	800b40e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b414:	2b00      	cmp	r3, #0
 800b416:	d101      	bne.n	800b41c <xTaskPriorityDisinherit+0x30>
 800b418:	b672      	cpsid	i
 800b41a:	e7fe      	b.n	800b41a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b420:	1e5a      	subs	r2, r3, #1
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b42e:	429a      	cmp	r2, r3
 800b430:	d02c      	beq.n	800b48c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b436:	2b00      	cmp	r3, #0
 800b438:	d128      	bne.n	800b48c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	3304      	adds	r3, #4
 800b43e:	0018      	movs	r0, r3
 800b440:	f7fe fdb3 	bl	8009faa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	2238      	movs	r2, #56	; 0x38
 800b452:	1ad2      	subs	r2, r2, r3
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45c:	4b0f      	ldr	r3, [pc, #60]	; (800b49c <xTaskPriorityDisinherit+0xb0>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	429a      	cmp	r2, r3
 800b462:	d903      	bls.n	800b46c <xTaskPriorityDisinherit+0x80>
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b468:	4b0c      	ldr	r3, [pc, #48]	; (800b49c <xTaskPriorityDisinherit+0xb0>)
 800b46a:	601a      	str	r2, [r3, #0]
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b470:	0013      	movs	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	189b      	adds	r3, r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4a09      	ldr	r2, [pc, #36]	; (800b4a0 <xTaskPriorityDisinherit+0xb4>)
 800b47a:	189a      	adds	r2, r3, r2
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	3304      	adds	r3, #4
 800b480:	0019      	movs	r1, r3
 800b482:	0010      	movs	r0, r2
 800b484:	f7fe fd39 	bl	8009efa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b488:	2301      	movs	r3, #1
 800b48a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b48c:	68fb      	ldr	r3, [r7, #12]
	}
 800b48e:	0018      	movs	r0, r3
 800b490:	46bd      	mov	sp, r7
 800b492:	b004      	add	sp, #16
 800b494:	bd80      	pop	{r7, pc}
 800b496:	46c0      	nop			; (mov r8, r8)
 800b498:	20000c70 	.word	0x20000c70
 800b49c:	2000114c 	.word	0x2000114c
 800b4a0:	20000c74 	.word	0x20000c74

0800b4a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b4ae:	4b21      	ldr	r3, [pc, #132]	; (800b534 <prvAddCurrentTaskToDelayedList+0x90>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4b4:	4b20      	ldr	r3, [pc, #128]	; (800b538 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	0018      	movs	r0, r3
 800b4bc:	f7fe fd75 	bl	8009faa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	d10b      	bne.n	800b4de <prvAddCurrentTaskToDelayedList+0x3a>
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d008      	beq.n	800b4de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4cc:	4b1a      	ldr	r3, [pc, #104]	; (800b538 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	1d1a      	adds	r2, r3, #4
 800b4d2:	4b1a      	ldr	r3, [pc, #104]	; (800b53c <prvAddCurrentTaskToDelayedList+0x98>)
 800b4d4:	0011      	movs	r1, r2
 800b4d6:	0018      	movs	r0, r3
 800b4d8:	f7fe fd0f 	bl	8009efa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4dc:	e026      	b.n	800b52c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	18d3      	adds	r3, r2, r3
 800b4e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4e6:	4b14      	ldr	r3, [pc, #80]	; (800b538 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d209      	bcs.n	800b50a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4f6:	4b12      	ldr	r3, [pc, #72]	; (800b540 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	4b0f      	ldr	r3, [pc, #60]	; (800b538 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3304      	adds	r3, #4
 800b500:	0019      	movs	r1, r3
 800b502:	0010      	movs	r0, r2
 800b504:	f7fe fd1b 	bl	8009f3e <vListInsert>
}
 800b508:	e010      	b.n	800b52c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b50a:	4b0e      	ldr	r3, [pc, #56]	; (800b544 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	4b0a      	ldr	r3, [pc, #40]	; (800b538 <prvAddCurrentTaskToDelayedList+0x94>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3304      	adds	r3, #4
 800b514:	0019      	movs	r1, r3
 800b516:	0010      	movs	r0, r2
 800b518:	f7fe fd11 	bl	8009f3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b51c:	4b0a      	ldr	r3, [pc, #40]	; (800b548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	429a      	cmp	r2, r3
 800b524:	d202      	bcs.n	800b52c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b526:	4b08      	ldr	r3, [pc, #32]	; (800b548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	601a      	str	r2, [r3, #0]
}
 800b52c:	46c0      	nop			; (mov r8, r8)
 800b52e:	46bd      	mov	sp, r7
 800b530:	b004      	add	sp, #16
 800b532:	bd80      	pop	{r7, pc}
 800b534:	20001148 	.word	0x20001148
 800b538:	20000c70 	.word	0x20000c70
 800b53c:	20001130 	.word	0x20001130
 800b540:	20001100 	.word	0x20001100
 800b544:	200010fc 	.word	0x200010fc
 800b548:	20001164 	.word	0x20001164

0800b54c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b54c:	b590      	push	{r4, r7, lr}
 800b54e:	b089      	sub	sp, #36	; 0x24
 800b550:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b552:	2300      	movs	r3, #0
 800b554:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b556:	f000 fac9 	bl	800baec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b55a:	4b17      	ldr	r3, [pc, #92]	; (800b5b8 <xTimerCreateTimerTask+0x6c>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d020      	beq.n	800b5a4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b562:	2300      	movs	r3, #0
 800b564:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b566:	2300      	movs	r3, #0
 800b568:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b56a:	003a      	movs	r2, r7
 800b56c:	1d39      	adds	r1, r7, #4
 800b56e:	2308      	movs	r3, #8
 800b570:	18fb      	adds	r3, r7, r3
 800b572:	0018      	movs	r0, r3
 800b574:	f7fe fc80 	bl	8009e78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b578:	683c      	ldr	r4, [r7, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	490f      	ldr	r1, [pc, #60]	; (800b5bc <xTimerCreateTimerTask+0x70>)
 800b580:	480f      	ldr	r0, [pc, #60]	; (800b5c0 <xTimerCreateTimerTask+0x74>)
 800b582:	9202      	str	r2, [sp, #8]
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	2302      	movs	r3, #2
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	2300      	movs	r3, #0
 800b58c:	0022      	movs	r2, r4
 800b58e:	f7ff f960 	bl	800a852 <xTaskCreateStatic>
 800b592:	0002      	movs	r2, r0
 800b594:	4b0b      	ldr	r3, [pc, #44]	; (800b5c4 <xTimerCreateTimerTask+0x78>)
 800b596:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b598:	4b0a      	ldr	r3, [pc, #40]	; (800b5c4 <xTimerCreateTimerTask+0x78>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d001      	beq.n	800b5a4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <xTimerCreateTimerTask+0x62>
 800b5aa:	b672      	cpsid	i
 800b5ac:	e7fe      	b.n	800b5ac <xTimerCreateTimerTask+0x60>
	return xReturn;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
}
 800b5b0:	0018      	movs	r0, r3
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	b005      	add	sp, #20
 800b5b6:	bd90      	pop	{r4, r7, pc}
 800b5b8:	200011a0 	.word	0x200011a0
 800b5bc:	0800f7c4 	.word	0x0800f7c4
 800b5c0:	0800b6e5 	.word	0x0800b6e5
 800b5c4:	200011a4 	.word	0x200011a4

0800b5c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5c8:	b590      	push	{r4, r7, lr}
 800b5ca:	b08b      	sub	sp, #44	; 0x2c
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
 800b5d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <xTimerGenericCommand+0x1c>
 800b5e0:	b672      	cpsid	i
 800b5e2:	e7fe      	b.n	800b5e2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5e4:	4b1c      	ldr	r3, [pc, #112]	; (800b658 <xTimerGenericCommand+0x90>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d030      	beq.n	800b64e <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5ec:	2414      	movs	r4, #20
 800b5ee:	193b      	adds	r3, r7, r4
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5f4:	193b      	adds	r3, r7, r4
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b5fa:	193b      	adds	r3, r7, r4
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	2b05      	cmp	r3, #5
 800b604:	dc19      	bgt.n	800b63a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b606:	f7ff fed5 	bl	800b3b4 <xTaskGetSchedulerState>
 800b60a:	0003      	movs	r3, r0
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d109      	bne.n	800b624 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b610:	4b11      	ldr	r3, [pc, #68]	; (800b658 <xTimerGenericCommand+0x90>)
 800b612:	6818      	ldr	r0, [r3, #0]
 800b614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b616:	1939      	adds	r1, r7, r4
 800b618:	2300      	movs	r3, #0
 800b61a:	f7fe fdb5 	bl	800a188 <xQueueGenericSend>
 800b61e:	0003      	movs	r3, r0
 800b620:	627b      	str	r3, [r7, #36]	; 0x24
 800b622:	e014      	b.n	800b64e <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b624:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <xTimerGenericCommand+0x90>)
 800b626:	6818      	ldr	r0, [r3, #0]
 800b628:	2314      	movs	r3, #20
 800b62a:	18f9      	adds	r1, r7, r3
 800b62c:	2300      	movs	r3, #0
 800b62e:	2200      	movs	r2, #0
 800b630:	f7fe fdaa 	bl	800a188 <xQueueGenericSend>
 800b634:	0003      	movs	r3, r0
 800b636:	627b      	str	r3, [r7, #36]	; 0x24
 800b638:	e009      	b.n	800b64e <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b63a:	4b07      	ldr	r3, [pc, #28]	; (800b658 <xTimerGenericCommand+0x90>)
 800b63c:	6818      	ldr	r0, [r3, #0]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	2314      	movs	r3, #20
 800b642:	18f9      	adds	r1, r7, r3
 800b644:	2300      	movs	r3, #0
 800b646:	f7fe fe63 	bl	800a310 <xQueueGenericSendFromISR>
 800b64a:	0003      	movs	r3, r0
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b650:	0018      	movs	r0, r3
 800b652:	46bd      	mov	sp, r7
 800b654:	b00b      	add	sp, #44	; 0x2c
 800b656:	bd90      	pop	{r4, r7, pc}
 800b658:	200011a0 	.word	0x200011a0

0800b65c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af02      	add	r7, sp, #8
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b666:	4b1e      	ldr	r3, [pc, #120]	; (800b6e0 <prvProcessExpiredTimer+0x84>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3304      	adds	r3, #4
 800b674:	0018      	movs	r0, r3
 800b676:	f7fe fc98 	bl	8009faa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2228      	movs	r2, #40	; 0x28
 800b67e:	5c9b      	ldrb	r3, [r3, r2]
 800b680:	001a      	movs	r2, r3
 800b682:	2304      	movs	r3, #4
 800b684:	4013      	ands	r3, r2
 800b686:	d019      	beq.n	800b6bc <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	699a      	ldr	r2, [r3, #24]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	18d1      	adds	r1, r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	683a      	ldr	r2, [r7, #0]
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f000 f8c3 	bl	800b820 <prvInsertTimerInActiveList>
 800b69a:	1e03      	subs	r3, r0, #0
 800b69c:	d017      	beq.n	800b6ce <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	f7ff ff8d 	bl	800b5c8 <xTimerGenericCommand>
 800b6ae:	0003      	movs	r3, r0
 800b6b0:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10a      	bne.n	800b6ce <prvProcessExpiredTimer+0x72>
 800b6b8:	b672      	cpsid	i
 800b6ba:	e7fe      	b.n	800b6ba <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2228      	movs	r2, #40	; 0x28
 800b6c0:	5c9b      	ldrb	r3, [r3, r2]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	4393      	bics	r3, r2
 800b6c6:	b2d9      	uxtb	r1, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2228      	movs	r2, #40	; 0x28
 800b6cc:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	0010      	movs	r0, r2
 800b6d6:	4798      	blx	r3
}
 800b6d8:	46c0      	nop			; (mov r8, r8)
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	b004      	add	sp, #16
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	20001198 	.word	0x20001198

0800b6e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6ec:	2308      	movs	r3, #8
 800b6ee:	18fb      	adds	r3, r7, r3
 800b6f0:	0018      	movs	r0, r3
 800b6f2:	f000 f853 	bl	800b79c <prvGetNextExpireTime>
 800b6f6:	0003      	movs	r3, r0
 800b6f8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6fa:	68ba      	ldr	r2, [r7, #8]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	0011      	movs	r1, r2
 800b700:	0018      	movs	r0, r3
 800b702:	f000 f803 	bl	800b70c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b706:	f000 f8cd 	bl	800b8a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b70a:	e7ef      	b.n	800b6ec <prvTimerTask+0x8>

0800b70c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b716:	f7ff facf 	bl	800acb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b71a:	2308      	movs	r3, #8
 800b71c:	18fb      	adds	r3, r7, r3
 800b71e:	0018      	movs	r0, r3
 800b720:	f000 f85e 	bl	800b7e0 <prvSampleTimeNow>
 800b724:	0003      	movs	r3, r0
 800b726:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d12b      	bne.n	800b786 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10c      	bne.n	800b74e <prvProcessTimerOrBlockTask+0x42>
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d808      	bhi.n	800b74e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800b73c:	f7ff fac8 	bl	800acd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	0011      	movs	r1, r2
 800b746:	0018      	movs	r0, r3
 800b748:	f7ff ff88 	bl	800b65c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b74c:	e01d      	b.n	800b78a <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d008      	beq.n	800b766 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b754:	4b0f      	ldr	r3, [pc, #60]	; (800b794 <prvProcessTimerOrBlockTask+0x88>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d101      	bne.n	800b762 <prvProcessTimerOrBlockTask+0x56>
 800b75e:	2301      	movs	r3, #1
 800b760:	e000      	b.n	800b764 <prvProcessTimerOrBlockTask+0x58>
 800b762:	2300      	movs	r3, #0
 800b764:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b766:	4b0c      	ldr	r3, [pc, #48]	; (800b798 <prvProcessTimerOrBlockTask+0x8c>)
 800b768:	6818      	ldr	r0, [r3, #0]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	0019      	movs	r1, r3
 800b774:	f7ff f83a 	bl	800a7ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b778:	f7ff faaa 	bl	800acd0 <xTaskResumeAll>
 800b77c:	1e03      	subs	r3, r0, #0
 800b77e:	d104      	bne.n	800b78a <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800b780:	f000 fa7e 	bl	800bc80 <vPortYield>
}
 800b784:	e001      	b.n	800b78a <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800b786:	f7ff faa3 	bl	800acd0 <xTaskResumeAll>
}
 800b78a:	46c0      	nop			; (mov r8, r8)
 800b78c:	46bd      	mov	sp, r7
 800b78e:	b004      	add	sp, #16
 800b790:	bd80      	pop	{r7, pc}
 800b792:	46c0      	nop			; (mov r8, r8)
 800b794:	2000119c 	.word	0x2000119c
 800b798:	200011a0 	.word	0x200011a0

0800b79c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7a4:	4b0d      	ldr	r3, [pc, #52]	; (800b7dc <prvGetNextExpireTime+0x40>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d101      	bne.n	800b7b2 <prvGetNextExpireTime+0x16>
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	e000      	b.n	800b7b4 <prvGetNextExpireTime+0x18>
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d105      	bne.n	800b7cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7c0:	4b06      	ldr	r3, [pc, #24]	; (800b7dc <prvGetNextExpireTime+0x40>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	60fb      	str	r3, [r7, #12]
 800b7ca:	e001      	b.n	800b7d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
}
 800b7d2:	0018      	movs	r0, r3
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	b004      	add	sp, #16
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	46c0      	nop			; (mov r8, r8)
 800b7dc:	20001198 	.word	0x20001198

0800b7e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7e8:	f7ff fafe 	bl	800ade8 <xTaskGetTickCount>
 800b7ec:	0003      	movs	r3, r0
 800b7ee:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7f0:	4b0a      	ldr	r3, [pc, #40]	; (800b81c <prvSampleTimeNow+0x3c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d205      	bcs.n	800b806 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800b7fa:	f000 f919 	bl	800ba30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	e002      	b.n	800b80c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b80c:	4b03      	ldr	r3, [pc, #12]	; (800b81c <prvSampleTimeNow+0x3c>)
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800b812:	68fb      	ldr	r3, [r7, #12]
}
 800b814:	0018      	movs	r0, r3
 800b816:	46bd      	mov	sp, r7
 800b818:	b004      	add	sp, #16
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	200011a8 	.word	0x200011a8

0800b820 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
 800b82c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b82e:	2300      	movs	r3, #0
 800b830:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	429a      	cmp	r2, r3
 800b844:	d812      	bhi.n	800b86c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	1ad2      	subs	r2, r2, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	429a      	cmp	r2, r3
 800b852:	d302      	bcc.n	800b85a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b854:	2301      	movs	r3, #1
 800b856:	617b      	str	r3, [r7, #20]
 800b858:	e01b      	b.n	800b892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b85a:	4b10      	ldr	r3, [pc, #64]	; (800b89c <prvInsertTimerInActiveList+0x7c>)
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	3304      	adds	r3, #4
 800b862:	0019      	movs	r1, r3
 800b864:	0010      	movs	r0, r2
 800b866:	f7fe fb6a 	bl	8009f3e <vListInsert>
 800b86a:	e012      	b.n	800b892 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	429a      	cmp	r2, r3
 800b872:	d206      	bcs.n	800b882 <prvInsertTimerInActiveList+0x62>
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d302      	bcc.n	800b882 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b87c:	2301      	movs	r3, #1
 800b87e:	617b      	str	r3, [r7, #20]
 800b880:	e007      	b.n	800b892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b882:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <prvInsertTimerInActiveList+0x80>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3304      	adds	r3, #4
 800b88a:	0019      	movs	r1, r3
 800b88c:	0010      	movs	r0, r2
 800b88e:	f7fe fb56 	bl	8009f3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b892:	697b      	ldr	r3, [r7, #20]
}
 800b894:	0018      	movs	r0, r3
 800b896:	46bd      	mov	sp, r7
 800b898:	b006      	add	sp, #24
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	2000119c 	.word	0x2000119c
 800b8a0:	20001198 	.word	0x20001198

0800b8a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8a4:	b590      	push	{r4, r7, lr}
 800b8a6:	b08d      	sub	sp, #52	; 0x34
 800b8a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8aa:	e0ac      	b.n	800ba06 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8ac:	2208      	movs	r2, #8
 800b8ae:	18bb      	adds	r3, r7, r2
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	da0f      	bge.n	800b8d6 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8b6:	18bb      	adds	r3, r7, r2
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <prvProcessReceivedCommands+0x22>
 800b8c2:	b672      	cpsid	i
 800b8c4:	e7fe      	b.n	800b8c4 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	6858      	ldr	r0, [r3, #4]
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	0019      	movs	r1, r3
 800b8d4:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8d6:	2208      	movs	r2, #8
 800b8d8:	18bb      	adds	r3, r7, r2
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	da00      	bge.n	800b8e2 <prvProcessReceivedCommands+0x3e>
 800b8e0:	e090      	b.n	800ba04 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8e2:	18bb      	adds	r3, r7, r2
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	695b      	ldr	r3, [r3, #20]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d004      	beq.n	800b8fa <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	0018      	movs	r0, r3
 800b8f6:	f7fe fb58 	bl	8009faa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8fa:	1d3b      	adds	r3, r7, #4
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f7ff ff6f 	bl	800b7e0 <prvSampleTimeNow>
 800b902:	0003      	movs	r3, r0
 800b904:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800b906:	2308      	movs	r3, #8
 800b908:	18fb      	adds	r3, r7, r3
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b09      	cmp	r3, #9
 800b90e:	d900      	bls.n	800b912 <prvProcessReceivedCommands+0x6e>
 800b910:	e079      	b.n	800ba06 <prvProcessReceivedCommands+0x162>
 800b912:	009a      	lsls	r2, r3, #2
 800b914:	4b44      	ldr	r3, [pc, #272]	; (800ba28 <prvProcessReceivedCommands+0x184>)
 800b916:	18d3      	adds	r3, r2, r3
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b91c:	6a3b      	ldr	r3, [r7, #32]
 800b91e:	2228      	movs	r2, #40	; 0x28
 800b920:	5c9b      	ldrb	r3, [r3, r2]
 800b922:	2201      	movs	r2, #1
 800b924:	4313      	orrs	r3, r2
 800b926:	b2d9      	uxtb	r1, r3
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	2228      	movs	r2, #40	; 0x28
 800b92c:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b92e:	2408      	movs	r4, #8
 800b930:	193b      	adds	r3, r7, r4
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	699b      	ldr	r3, [r3, #24]
 800b938:	18d1      	adds	r1, r2, r3
 800b93a:	193b      	adds	r3, r7, r4
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	6a38      	ldr	r0, [r7, #32]
 800b942:	f7ff ff6d 	bl	800b820 <prvInsertTimerInActiveList>
 800b946:	1e03      	subs	r3, r0, #0
 800b948:	d05d      	beq.n	800ba06 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b94a:	6a3b      	ldr	r3, [r7, #32]
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	6a3a      	ldr	r2, [r7, #32]
 800b950:	0010      	movs	r0, r2
 800b952:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	2228      	movs	r2, #40	; 0x28
 800b958:	5c9b      	ldrb	r3, [r3, r2]
 800b95a:	001a      	movs	r2, r3
 800b95c:	2304      	movs	r3, #4
 800b95e:	4013      	ands	r3, r2
 800b960:	d051      	beq.n	800ba06 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b962:	193b      	adds	r3, r7, r4
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	18d2      	adds	r2, r2, r3
 800b96c:	6a38      	ldr	r0, [r7, #32]
 800b96e:	2300      	movs	r3, #0
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	2300      	movs	r3, #0
 800b974:	2100      	movs	r1, #0
 800b976:	f7ff fe27 	bl	800b5c8 <xTimerGenericCommand>
 800b97a:	0003      	movs	r3, r0
 800b97c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d140      	bne.n	800ba06 <prvProcessReceivedCommands+0x162>
 800b984:	b672      	cpsid	i
 800b986:	e7fe      	b.n	800b986 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b988:	6a3b      	ldr	r3, [r7, #32]
 800b98a:	2228      	movs	r2, #40	; 0x28
 800b98c:	5c9b      	ldrb	r3, [r3, r2]
 800b98e:	2201      	movs	r2, #1
 800b990:	4393      	bics	r3, r2
 800b992:	b2d9      	uxtb	r1, r3
 800b994:	6a3b      	ldr	r3, [r7, #32]
 800b996:	2228      	movs	r2, #40	; 0x28
 800b998:	5499      	strb	r1, [r3, r2]
					break;
 800b99a:	e034      	b.n	800ba06 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	2228      	movs	r2, #40	; 0x28
 800b9a0:	5c9b      	ldrb	r3, [r3, r2]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	b2d9      	uxtb	r1, r3
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	2228      	movs	r2, #40	; 0x28
 800b9ac:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9ae:	2308      	movs	r3, #8
 800b9b0:	18fb      	adds	r3, r7, r3
 800b9b2:	685a      	ldr	r2, [r3, #4]
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d101      	bne.n	800b9c4 <prvProcessReceivedCommands+0x120>
 800b9c0:	b672      	cpsid	i
 800b9c2:	e7fe      	b.n	800b9c2 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	699a      	ldr	r2, [r3, #24]
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	18d1      	adds	r1, r2, r3
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	69fa      	ldr	r2, [r7, #28]
 800b9d0:	6a38      	ldr	r0, [r7, #32]
 800b9d2:	f7ff ff25 	bl	800b820 <prvInsertTimerInActiveList>
					break;
 800b9d6:	e016      	b.n	800ba06 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b9d8:	6a3b      	ldr	r3, [r7, #32]
 800b9da:	2228      	movs	r2, #40	; 0x28
 800b9dc:	5c9b      	ldrb	r3, [r3, r2]
 800b9de:	001a      	movs	r2, r3
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	4013      	ands	r3, r2
 800b9e4:	d104      	bne.n	800b9f0 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	0018      	movs	r0, r3
 800b9ea:	f000 fa9d 	bl	800bf28 <vPortFree>
 800b9ee:	e00a      	b.n	800ba06 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9f0:	6a3b      	ldr	r3, [r7, #32]
 800b9f2:	2228      	movs	r2, #40	; 0x28
 800b9f4:	5c9b      	ldrb	r3, [r3, r2]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	4393      	bics	r3, r2
 800b9fa:	b2d9      	uxtb	r1, r3
 800b9fc:	6a3b      	ldr	r3, [r7, #32]
 800b9fe:	2228      	movs	r2, #40	; 0x28
 800ba00:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba02:	e000      	b.n	800ba06 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ba04:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba06:	4b09      	ldr	r3, [pc, #36]	; (800ba2c <prvProcessReceivedCommands+0x188>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2208      	movs	r2, #8
 800ba0c:	18b9      	adds	r1, r7, r2
 800ba0e:	2200      	movs	r2, #0
 800ba10:	0018      	movs	r0, r3
 800ba12:	f7fe fcf1 	bl	800a3f8 <xQueueReceive>
 800ba16:	1e03      	subs	r3, r0, #0
 800ba18:	d000      	beq.n	800ba1c <prvProcessReceivedCommands+0x178>
 800ba1a:	e747      	b.n	800b8ac <prvProcessReceivedCommands+0x8>
	}
}
 800ba1c:	46c0      	nop			; (mov r8, r8)
 800ba1e:	46c0      	nop			; (mov r8, r8)
 800ba20:	46bd      	mov	sp, r7
 800ba22:	b00b      	add	sp, #44	; 0x2c
 800ba24:	bd90      	pop	{r4, r7, pc}
 800ba26:	46c0      	nop			; (mov r8, r8)
 800ba28:	0800fa78 	.word	0x0800fa78
 800ba2c:	200011a0 	.word	0x200011a0

0800ba30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b088      	sub	sp, #32
 800ba34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba36:	e041      	b.n	800babc <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba38:	4b2a      	ldr	r3, [pc, #168]	; (800bae4 <prvSwitchTimerLists+0xb4>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba42:	4b28      	ldr	r3, [pc, #160]	; (800bae4 <prvSwitchTimerLists+0xb4>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	0018      	movs	r0, r3
 800ba52:	f7fe faaa 	bl	8009faa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	0010      	movs	r0, r2
 800ba5e:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2228      	movs	r2, #40	; 0x28
 800ba64:	5c9b      	ldrb	r3, [r3, r2]
 800ba66:	001a      	movs	r2, r3
 800ba68:	2304      	movs	r3, #4
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	d026      	beq.n	800babc <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	699b      	ldr	r3, [r3, #24]
 800ba72:	693a      	ldr	r2, [r7, #16]
 800ba74:	18d3      	adds	r3, r2, r3
 800ba76:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d90e      	bls.n	800ba9e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba8c:	4b15      	ldr	r3, [pc, #84]	; (800bae4 <prvSwitchTimerLists+0xb4>)
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3304      	adds	r3, #4
 800ba94:	0019      	movs	r1, r3
 800ba96:	0010      	movs	r0, r2
 800ba98:	f7fe fa51 	bl	8009f3e <vListInsert>
 800ba9c:	e00e      	b.n	800babc <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba9e:	693a      	ldr	r2, [r7, #16]
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	2300      	movs	r3, #0
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	2300      	movs	r3, #0
 800baa8:	2100      	movs	r1, #0
 800baaa:	f7ff fd8d 	bl	800b5c8 <xTimerGenericCommand>
 800baae:	0003      	movs	r3, r0
 800bab0:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <prvSwitchTimerLists+0x8c>
 800bab8:	b672      	cpsid	i
 800baba:	e7fe      	b.n	800baba <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800babc:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <prvSwitchTimerLists+0xb4>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1b8      	bne.n	800ba38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bac6:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <prvSwitchTimerLists+0xb4>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bacc:	4b06      	ldr	r3, [pc, #24]	; (800bae8 <prvSwitchTimerLists+0xb8>)
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	4b04      	ldr	r3, [pc, #16]	; (800bae4 <prvSwitchTimerLists+0xb4>)
 800bad2:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800bad4:	4b04      	ldr	r3, [pc, #16]	; (800bae8 <prvSwitchTimerLists+0xb8>)
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	601a      	str	r2, [r3, #0]
}
 800bada:	46c0      	nop			; (mov r8, r8)
 800badc:	46bd      	mov	sp, r7
 800bade:	b006      	add	sp, #24
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	46c0      	nop			; (mov r8, r8)
 800bae4:	20001198 	.word	0x20001198
 800bae8:	2000119c 	.word	0x2000119c

0800baec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800baf2:	f000 f8d5 	bl	800bca0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800baf6:	4b16      	ldr	r3, [pc, #88]	; (800bb50 <prvCheckForValidListAndQueue+0x64>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d123      	bne.n	800bb46 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800bafe:	4b15      	ldr	r3, [pc, #84]	; (800bb54 <prvCheckForValidListAndQueue+0x68>)
 800bb00:	0018      	movs	r0, r3
 800bb02:	f7fe f9d1 	bl	8009ea8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb06:	4b14      	ldr	r3, [pc, #80]	; (800bb58 <prvCheckForValidListAndQueue+0x6c>)
 800bb08:	0018      	movs	r0, r3
 800bb0a:	f7fe f9cd 	bl	8009ea8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb0e:	4b13      	ldr	r3, [pc, #76]	; (800bb5c <prvCheckForValidListAndQueue+0x70>)
 800bb10:	4a10      	ldr	r2, [pc, #64]	; (800bb54 <prvCheckForValidListAndQueue+0x68>)
 800bb12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb14:	4b12      	ldr	r3, [pc, #72]	; (800bb60 <prvCheckForValidListAndQueue+0x74>)
 800bb16:	4a10      	ldr	r2, [pc, #64]	; (800bb58 <prvCheckForValidListAndQueue+0x6c>)
 800bb18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb1a:	4b12      	ldr	r3, [pc, #72]	; (800bb64 <prvCheckForValidListAndQueue+0x78>)
 800bb1c:	4a12      	ldr	r2, [pc, #72]	; (800bb68 <prvCheckForValidListAndQueue+0x7c>)
 800bb1e:	2100      	movs	r1, #0
 800bb20:	9100      	str	r1, [sp, #0]
 800bb22:	2110      	movs	r1, #16
 800bb24:	200a      	movs	r0, #10
 800bb26:	f7fe fabc 	bl	800a0a2 <xQueueGenericCreateStatic>
 800bb2a:	0002      	movs	r2, r0
 800bb2c:	4b08      	ldr	r3, [pc, #32]	; (800bb50 <prvCheckForValidListAndQueue+0x64>)
 800bb2e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <prvCheckForValidListAndQueue+0x64>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d006      	beq.n	800bb46 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb38:	4b05      	ldr	r3, [pc, #20]	; (800bb50 <prvCheckForValidListAndQueue+0x64>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a0b      	ldr	r2, [pc, #44]	; (800bb6c <prvCheckForValidListAndQueue+0x80>)
 800bb3e:	0011      	movs	r1, r2
 800bb40:	0018      	movs	r0, r3
 800bb42:	f7fe fe2b 	bl	800a79c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb46:	f000 f8bd 	bl	800bcc4 <vPortExitCritical>
}
 800bb4a:	46c0      	nop			; (mov r8, r8)
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	200011a0 	.word	0x200011a0
 800bb54:	20001170 	.word	0x20001170
 800bb58:	20001184 	.word	0x20001184
 800bb5c:	20001198 	.word	0x20001198
 800bb60:	2000119c 	.word	0x2000119c
 800bb64:	2000124c 	.word	0x2000124c
 800bb68:	200011ac 	.word	0x200011ac
 800bb6c:	0800f7cc 	.word	0x0800f7cc

0800bb70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	3b04      	subs	r3, #4
 800bb80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2280      	movs	r2, #128	; 0x80
 800bb86:	0452      	lsls	r2, r2, #17
 800bb88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	3b04      	subs	r3, #4
 800bb8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3b04      	subs	r3, #4
 800bb9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb9c:	4a08      	ldr	r2, [pc, #32]	; (800bbc0 <pxPortInitialiseStack+0x50>)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3b14      	subs	r3, #20
 800bba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3b20      	subs	r3, #32
 800bbb2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
}
 800bbb6:	0018      	movs	r0, r3
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	b004      	add	sp, #16
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	46c0      	nop			; (mov r8, r8)
 800bbc0:	0800bbc5 	.word	0x0800bbc5

0800bbc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bbce:	4b08      	ldr	r3, [pc, #32]	; (800bbf0 <prvTaskExitError+0x2c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	d001      	beq.n	800bbda <prvTaskExitError+0x16>
 800bbd6:	b672      	cpsid	i
 800bbd8:	e7fe      	b.n	800bbd8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800bbda:	b672      	cpsid	i
	while( ulDummy == 0 )
 800bbdc:	46c0      	nop			; (mov r8, r8)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d0fc      	beq.n	800bbde <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbe4:	46c0      	nop			; (mov r8, r8)
 800bbe6:	46c0      	nop			; (mov r8, r8)
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	b002      	add	sp, #8
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	46c0      	nop			; (mov r8, r8)
 800bbf0:	2000000c 	.word	0x2000000c

0800bbf4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800bbf8:	46c0      	nop			; (mov r8, r8)
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
	...

0800bc00 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800bc00:	4a0b      	ldr	r2, [pc, #44]	; (800bc30 <pxCurrentTCBConst2>)
 800bc02:	6813      	ldr	r3, [r2, #0]
 800bc04:	6818      	ldr	r0, [r3, #0]
 800bc06:	3020      	adds	r0, #32
 800bc08:	f380 8809 	msr	PSP, r0
 800bc0c:	2002      	movs	r0, #2
 800bc0e:	f380 8814 	msr	CONTROL, r0
 800bc12:	f3bf 8f6f 	isb	sy
 800bc16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800bc18:	46ae      	mov	lr, r5
 800bc1a:	bc08      	pop	{r3}
 800bc1c:	bc04      	pop	{r2}
 800bc1e:	b662      	cpsie	i
 800bc20:	4718      	bx	r3
 800bc22:	46c0      	nop			; (mov r8, r8)
 800bc24:	46c0      	nop			; (mov r8, r8)
 800bc26:	46c0      	nop			; (mov r8, r8)
 800bc28:	46c0      	nop			; (mov r8, r8)
 800bc2a:	46c0      	nop			; (mov r8, r8)
 800bc2c:	46c0      	nop			; (mov r8, r8)
 800bc2e:	46c0      	nop			; (mov r8, r8)

0800bc30 <pxCurrentTCBConst2>:
 800bc30:	20000c70 	.word	0x20000c70
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800bc34:	46c0      	nop			; (mov r8, r8)
 800bc36:	46c0      	nop			; (mov r8, r8)

0800bc38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc3c:	4b0e      	ldr	r3, [pc, #56]	; (800bc78 <xPortStartScheduler+0x40>)
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	4b0d      	ldr	r3, [pc, #52]	; (800bc78 <xPortStartScheduler+0x40>)
 800bc42:	21ff      	movs	r1, #255	; 0xff
 800bc44:	0409      	lsls	r1, r1, #16
 800bc46:	430a      	orrs	r2, r1
 800bc48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc4a:	4b0b      	ldr	r3, [pc, #44]	; (800bc78 <xPortStartScheduler+0x40>)
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	4b0a      	ldr	r3, [pc, #40]	; (800bc78 <xPortStartScheduler+0x40>)
 800bc50:	21ff      	movs	r1, #255	; 0xff
 800bc52:	0609      	lsls	r1, r1, #24
 800bc54:	430a      	orrs	r2, r1
 800bc56:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc58:	f000 f898 	bl	800bd8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc5c:	4b07      	ldr	r3, [pc, #28]	; (800bc7c <xPortStartScheduler+0x44>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800bc62:	f7ff ffcd 	bl	800bc00 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc66:	f7ff f97d 	bl	800af64 <vTaskSwitchContext>
	prvTaskExitError();
 800bc6a:	f7ff ffab 	bl	800bbc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	0018      	movs	r0, r3
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	46c0      	nop			; (mov r8, r8)
 800bc78:	e000ed20 	.word	0xe000ed20
 800bc7c:	2000000c 	.word	0x2000000c

0800bc80 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc84:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <vPortYield+0x1c>)
 800bc86:	2280      	movs	r2, #128	; 0x80
 800bc88:	0552      	lsls	r2, r2, #21
 800bc8a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800bc8c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800bc90:	f3bf 8f6f 	isb	sy
}
 800bc94:	46c0      	nop			; (mov r8, r8)
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	46c0      	nop			; (mov r8, r8)
 800bc9c:	e000ed04 	.word	0xe000ed04

0800bca0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800bca4:	b672      	cpsid	i
	uxCriticalNesting++;
 800bca6:	4b06      	ldr	r3, [pc, #24]	; (800bcc0 <vPortEnterCritical+0x20>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	1c5a      	adds	r2, r3, #1
 800bcac:	4b04      	ldr	r3, [pc, #16]	; (800bcc0 <vPortEnterCritical+0x20>)
 800bcae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800bcb0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800bcb4:	f3bf 8f6f 	isb	sy
}
 800bcb8:	46c0      	nop			; (mov r8, r8)
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	46c0      	nop			; (mov r8, r8)
 800bcc0:	2000000c 	.word	0x2000000c

0800bcc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcc8:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <vPortExitCritical+0x2c>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d101      	bne.n	800bcd4 <vPortExitCritical+0x10>
 800bcd0:	b672      	cpsid	i
 800bcd2:	e7fe      	b.n	800bcd2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800bcd4:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <vPortExitCritical+0x2c>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	1e5a      	subs	r2, r3, #1
 800bcda:	4b05      	ldr	r3, [pc, #20]	; (800bcf0 <vPortExitCritical+0x2c>)
 800bcdc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800bcde:	4b04      	ldr	r3, [pc, #16]	; (800bcf0 <vPortExitCritical+0x2c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d100      	bne.n	800bce8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800bce6:	b662      	cpsie	i
	}
}
 800bce8:	46c0      	nop			; (mov r8, r8)
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	46c0      	nop			; (mov r8, r8)
 800bcf0:	2000000c 	.word	0x2000000c

0800bcf4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800bcf4:	f3ef 8010 	mrs	r0, PRIMASK
 800bcf8:	b672      	cpsid	i
 800bcfa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800bcfc:	46c0      	nop			; (mov r8, r8)
 800bcfe:	0018      	movs	r0, r3

0800bd00 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800bd00:	f380 8810 	msr	PRIMASK, r0
 800bd04:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800bd06:	46c0      	nop			; (mov r8, r8)
	...

0800bd10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd10:	f3ef 8009 	mrs	r0, PSP
 800bd14:	4b0e      	ldr	r3, [pc, #56]	; (800bd50 <pxCurrentTCBConst>)
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	3820      	subs	r0, #32
 800bd1a:	6010      	str	r0, [r2, #0]
 800bd1c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800bd1e:	4644      	mov	r4, r8
 800bd20:	464d      	mov	r5, r9
 800bd22:	4656      	mov	r6, sl
 800bd24:	465f      	mov	r7, fp
 800bd26:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800bd28:	b508      	push	{r3, lr}
 800bd2a:	b672      	cpsid	i
 800bd2c:	f7ff f91a 	bl	800af64 <vTaskSwitchContext>
 800bd30:	b662      	cpsie	i
 800bd32:	bc0c      	pop	{r2, r3}
 800bd34:	6811      	ldr	r1, [r2, #0]
 800bd36:	6808      	ldr	r0, [r1, #0]
 800bd38:	3010      	adds	r0, #16
 800bd3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800bd3c:	46a0      	mov	r8, r4
 800bd3e:	46a9      	mov	r9, r5
 800bd40:	46b2      	mov	sl, r6
 800bd42:	46bb      	mov	fp, r7
 800bd44:	f380 8809 	msr	PSP, r0
 800bd48:	3820      	subs	r0, #32
 800bd4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800bd4c:	4718      	bx	r3
 800bd4e:	46c0      	nop			; (mov r8, r8)

0800bd50 <pxCurrentTCBConst>:
 800bd50:	20000c70 	.word	0x20000c70
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800bd54:	46c0      	nop			; (mov r8, r8)
 800bd56:	46c0      	nop			; (mov r8, r8)

0800bd58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd5e:	f7ff ffc9 	bl	800bcf4 <ulSetInterruptMaskFromISR>
 800bd62:	0003      	movs	r3, r0
 800bd64:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd66:	f7ff f84d 	bl	800ae04 <xTaskIncrementTick>
 800bd6a:	1e03      	subs	r3, r0, #0
 800bd6c:	d003      	beq.n	800bd76 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd6e:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <xPortSysTickHandler+0x30>)
 800bd70:	2280      	movs	r2, #128	; 0x80
 800bd72:	0552      	lsls	r2, r2, #21
 800bd74:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	0018      	movs	r0, r3
 800bd7a:	f7ff ffc1 	bl	800bd00 <vClearInterruptMaskFromISR>
}
 800bd7e:	46c0      	nop			; (mov r8, r8)
 800bd80:	46bd      	mov	sp, r7
 800bd82:	b002      	add	sp, #8
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	46c0      	nop			; (mov r8, r8)
 800bd88:	e000ed04 	.word	0xe000ed04

0800bd8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd90:	4b0b      	ldr	r3, [pc, #44]	; (800bdc0 <vPortSetupTimerInterrupt+0x34>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd96:	4b0b      	ldr	r3, [pc, #44]	; (800bdc4 <vPortSetupTimerInterrupt+0x38>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd9c:	4b0a      	ldr	r3, [pc, #40]	; (800bdc8 <vPortSetupTimerInterrupt+0x3c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	22fa      	movs	r2, #250	; 0xfa
 800bda2:	0091      	lsls	r1, r2, #2
 800bda4:	0018      	movs	r0, r3
 800bda6:	f7f4 f9d5 	bl	8000154 <__udivsi3>
 800bdaa:	0003      	movs	r3, r0
 800bdac:	001a      	movs	r2, r3
 800bdae:	4b07      	ldr	r3, [pc, #28]	; (800bdcc <vPortSetupTimerInterrupt+0x40>)
 800bdb0:	3a01      	subs	r2, #1
 800bdb2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800bdb4:	4b02      	ldr	r3, [pc, #8]	; (800bdc0 <vPortSetupTimerInterrupt+0x34>)
 800bdb6:	2207      	movs	r2, #7
 800bdb8:	601a      	str	r2, [r3, #0]
}
 800bdba:	46c0      	nop			; (mov r8, r8)
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	e000e010 	.word	0xe000e010
 800bdc4:	e000e018 	.word	0xe000e018
 800bdc8:	20000000 	.word	0x20000000
 800bdcc:	e000e014 	.word	0xe000e014

0800bdd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800bddc:	f7fe ff6c 	bl	800acb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bde0:	4b4b      	ldr	r3, [pc, #300]	; (800bf10 <pvPortMalloc+0x140>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bde8:	f000 f8ec 	bl	800bfc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bdec:	4b49      	ldr	r3, [pc, #292]	; (800bf14 <pvPortMalloc+0x144>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	d000      	beq.n	800bdf8 <pvPortMalloc+0x28>
 800bdf6:	e07e      	b.n	800bef6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d012      	beq.n	800be24 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800bdfe:	2208      	movs	r2, #8
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	189b      	adds	r3, r3, r2
 800be04:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2207      	movs	r2, #7
 800be0a:	4013      	ands	r3, r2
 800be0c:	d00a      	beq.n	800be24 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2207      	movs	r2, #7
 800be12:	4393      	bics	r3, r2
 800be14:	3308      	adds	r3, #8
 800be16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2207      	movs	r2, #7
 800be1c:	4013      	ands	r3, r2
 800be1e:	d001      	beq.n	800be24 <pvPortMalloc+0x54>
 800be20:	b672      	cpsid	i
 800be22:	e7fe      	b.n	800be22 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d065      	beq.n	800bef6 <pvPortMalloc+0x126>
 800be2a:	4b3b      	ldr	r3, [pc, #236]	; (800bf18 <pvPortMalloc+0x148>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	429a      	cmp	r2, r3
 800be32:	d860      	bhi.n	800bef6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be34:	4b39      	ldr	r3, [pc, #228]	; (800bf1c <pvPortMalloc+0x14c>)
 800be36:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800be38:	4b38      	ldr	r3, [pc, #224]	; (800bf1c <pvPortMalloc+0x14c>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be3e:	e004      	b.n	800be4a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	429a      	cmp	r2, r3
 800be52:	d903      	bls.n	800be5c <pvPortMalloc+0x8c>
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1f1      	bne.n	800be40 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be5c:	4b2c      	ldr	r3, [pc, #176]	; (800bf10 <pvPortMalloc+0x140>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	697a      	ldr	r2, [r7, #20]
 800be62:	429a      	cmp	r2, r3
 800be64:	d047      	beq.n	800bef6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2208      	movs	r2, #8
 800be6c:	189b      	adds	r3, r3, r2
 800be6e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	685a      	ldr	r2, [r3, #4]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	1ad2      	subs	r2, r2, r3
 800be80:	2308      	movs	r3, #8
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	429a      	cmp	r2, r3
 800be86:	d916      	bls.n	800beb6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be88:	697a      	ldr	r2, [r7, #20]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	18d3      	adds	r3, r2, r3
 800be8e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	2207      	movs	r2, #7
 800be94:	4013      	ands	r3, r2
 800be96:	d001      	beq.n	800be9c <pvPortMalloc+0xcc>
 800be98:	b672      	cpsid	i
 800be9a:	e7fe      	b.n	800be9a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	1ad2      	subs	r2, r2, r3
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	0018      	movs	r0, r3
 800beb2:	f000 f8e7 	bl	800c084 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800beb6:	4b18      	ldr	r3, [pc, #96]	; (800bf18 <pvPortMalloc+0x148>)
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	1ad2      	subs	r2, r2, r3
 800bec0:	4b15      	ldr	r3, [pc, #84]	; (800bf18 <pvPortMalloc+0x148>)
 800bec2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bec4:	4b14      	ldr	r3, [pc, #80]	; (800bf18 <pvPortMalloc+0x148>)
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	4b15      	ldr	r3, [pc, #84]	; (800bf20 <pvPortMalloc+0x150>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	429a      	cmp	r2, r3
 800bece:	d203      	bcs.n	800bed8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bed0:	4b11      	ldr	r3, [pc, #68]	; (800bf18 <pvPortMalloc+0x148>)
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	4b12      	ldr	r3, [pc, #72]	; (800bf20 <pvPortMalloc+0x150>)
 800bed6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	685a      	ldr	r2, [r3, #4]
 800bedc:	4b0d      	ldr	r3, [pc, #52]	; (800bf14 <pvPortMalloc+0x144>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	431a      	orrs	r2, r3
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800beec:	4b0d      	ldr	r3, [pc, #52]	; (800bf24 <pvPortMalloc+0x154>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	4b0c      	ldr	r3, [pc, #48]	; (800bf24 <pvPortMalloc+0x154>)
 800bef4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bef6:	f7fe feeb 	bl	800acd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2207      	movs	r2, #7
 800befe:	4013      	ands	r3, r2
 800bf00:	d001      	beq.n	800bf06 <pvPortMalloc+0x136>
 800bf02:	b672      	cpsid	i
 800bf04:	e7fe      	b.n	800bf04 <pvPortMalloc+0x134>
	return pvReturn;
 800bf06:	68fb      	ldr	r3, [r7, #12]
}
 800bf08:	0018      	movs	r0, r3
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	b006      	add	sp, #24
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	20001ea4 	.word	0x20001ea4
 800bf14:	20001eb8 	.word	0x20001eb8
 800bf18:	20001ea8 	.word	0x20001ea8
 800bf1c:	20001e9c 	.word	0x20001e9c
 800bf20:	20001eac 	.word	0x20001eac
 800bf24:	20001eb0 	.word	0x20001eb0

0800bf28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d03a      	beq.n	800bfb0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf3a:	2308      	movs	r3, #8
 800bf3c:	425b      	negs	r3, r3
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	18d3      	adds	r3, r2, r3
 800bf42:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	685a      	ldr	r2, [r3, #4]
 800bf4c:	4b1a      	ldr	r3, [pc, #104]	; (800bfb8 <vPortFree+0x90>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4013      	ands	r3, r2
 800bf52:	d101      	bne.n	800bf58 <vPortFree+0x30>
 800bf54:	b672      	cpsid	i
 800bf56:	e7fe      	b.n	800bf56 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d001      	beq.n	800bf64 <vPortFree+0x3c>
 800bf60:	b672      	cpsid	i
 800bf62:	e7fe      	b.n	800bf62 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	4b13      	ldr	r3, [pc, #76]	; (800bfb8 <vPortFree+0x90>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	d01f      	beq.n	800bfb0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d11b      	bne.n	800bfb0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	4b0e      	ldr	r3, [pc, #56]	; (800bfb8 <vPortFree+0x90>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	43db      	mvns	r3, r3
 800bf82:	401a      	ands	r2, r3
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf88:	f7fe fe96 	bl	800acb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	4b0a      	ldr	r3, [pc, #40]	; (800bfbc <vPortFree+0x94>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	18d2      	adds	r2, r2, r3
 800bf96:	4b09      	ldr	r3, [pc, #36]	; (800bfbc <vPortFree+0x94>)
 800bf98:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	0018      	movs	r0, r3
 800bf9e:	f000 f871 	bl	800c084 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bfa2:	4b07      	ldr	r3, [pc, #28]	; (800bfc0 <vPortFree+0x98>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	4b05      	ldr	r3, [pc, #20]	; (800bfc0 <vPortFree+0x98>)
 800bfaa:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800bfac:	f7fe fe90 	bl	800acd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bfb0:	46c0      	nop			; (mov r8, r8)
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	b004      	add	sp, #16
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20001eb8 	.word	0x20001eb8
 800bfbc:	20001ea8 	.word	0x20001ea8
 800bfc0:	20001eb4 	.word	0x20001eb4

0800bfc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bfca:	23c0      	movs	r3, #192	; 0xc0
 800bfcc:	011b      	lsls	r3, r3, #4
 800bfce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bfd0:	4b26      	ldr	r3, [pc, #152]	; (800c06c <prvHeapInit+0xa8>)
 800bfd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2207      	movs	r2, #7
 800bfd8:	4013      	ands	r3, r2
 800bfda:	d00c      	beq.n	800bff6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	3307      	adds	r3, #7
 800bfe0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2207      	movs	r2, #7
 800bfe6:	4393      	bics	r3, r2
 800bfe8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bfea:	68ba      	ldr	r2, [r7, #8]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	1ad2      	subs	r2, r2, r3
 800bff0:	4b1e      	ldr	r3, [pc, #120]	; (800c06c <prvHeapInit+0xa8>)
 800bff2:	18d3      	adds	r3, r2, r3
 800bff4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bffa:	4b1d      	ldr	r3, [pc, #116]	; (800c070 <prvHeapInit+0xac>)
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c000:	4b1b      	ldr	r3, [pc, #108]	; (800c070 <prvHeapInit+0xac>)
 800c002:	2200      	movs	r2, #0
 800c004:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	18d3      	adds	r3, r2, r3
 800c00c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c00e:	2208      	movs	r2, #8
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	1a9b      	subs	r3, r3, r2
 800c014:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2207      	movs	r2, #7
 800c01a:	4393      	bics	r3, r2
 800c01c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	4b14      	ldr	r3, [pc, #80]	; (800c074 <prvHeapInit+0xb0>)
 800c022:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800c024:	4b13      	ldr	r3, [pc, #76]	; (800c074 <prvHeapInit+0xb0>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2200      	movs	r2, #0
 800c02a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c02c:	4b11      	ldr	r3, [pc, #68]	; (800c074 <prvHeapInit+0xb0>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2200      	movs	r2, #0
 800c032:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	1ad2      	subs	r2, r2, r3
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c042:	4b0c      	ldr	r3, [pc, #48]	; (800c074 <prvHeapInit+0xb0>)
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	685a      	ldr	r2, [r3, #4]
 800c04e:	4b0a      	ldr	r3, [pc, #40]	; (800c078 <prvHeapInit+0xb4>)
 800c050:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	685a      	ldr	r2, [r3, #4]
 800c056:	4b09      	ldr	r3, [pc, #36]	; (800c07c <prvHeapInit+0xb8>)
 800c058:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c05a:	4b09      	ldr	r3, [pc, #36]	; (800c080 <prvHeapInit+0xbc>)
 800c05c:	2280      	movs	r2, #128	; 0x80
 800c05e:	0612      	lsls	r2, r2, #24
 800c060:	601a      	str	r2, [r3, #0]
}
 800c062:	46c0      	nop			; (mov r8, r8)
 800c064:	46bd      	mov	sp, r7
 800c066:	b004      	add	sp, #16
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	46c0      	nop			; (mov r8, r8)
 800c06c:	2000129c 	.word	0x2000129c
 800c070:	20001e9c 	.word	0x20001e9c
 800c074:	20001ea4 	.word	0x20001ea4
 800c078:	20001eac 	.word	0x20001eac
 800c07c:	20001ea8 	.word	0x20001ea8
 800c080:	20001eb8 	.word	0x20001eb8

0800c084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c08c:	4b27      	ldr	r3, [pc, #156]	; (800c12c <prvInsertBlockIntoFreeList+0xa8>)
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	e002      	b.n	800c098 <prvInsertBlockIntoFreeList+0x14>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	60fb      	str	r3, [r7, #12]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d8f7      	bhi.n	800c092 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	18d3      	adds	r3, r2, r3
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d108      	bne.n	800c0c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	685a      	ldr	r2, [r3, #4]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	18d2      	adds	r2, r2, r3
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	18d2      	adds	r2, r2, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d118      	bne.n	800c10c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	4b14      	ldr	r3, [pc, #80]	; (800c130 <prvInsertBlockIntoFreeList+0xac>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d00d      	beq.n	800c102 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	685a      	ldr	r2, [r3, #4]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	18d2      	adds	r2, r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	601a      	str	r2, [r3, #0]
 800c100:	e008      	b.n	800c114 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c102:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <prvInsertBlockIntoFreeList+0xac>)
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	e003      	b.n	800c114 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d002      	beq.n	800c122 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c122:	46c0      	nop			; (mov r8, r8)
 800c124:	46bd      	mov	sp, r7
 800c126:	b004      	add	sp, #16
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	46c0      	nop			; (mov r8, r8)
 800c12c:	20001e9c 	.word	0x20001e9c
 800c130:	20001ea4 	.word	0x20001ea4

0800c134 <atoi>:
 800c134:	b510      	push	{r4, lr}
 800c136:	220a      	movs	r2, #10
 800c138:	2100      	movs	r1, #0
 800c13a:	f000 fecf 	bl	800cedc <strtol>
 800c13e:	bd10      	pop	{r4, pc}

0800c140 <__errno>:
 800c140:	4b01      	ldr	r3, [pc, #4]	; (800c148 <__errno+0x8>)
 800c142:	6818      	ldr	r0, [r3, #0]
 800c144:	4770      	bx	lr
 800c146:	46c0      	nop			; (mov r8, r8)
 800c148:	20000010 	.word	0x20000010

0800c14c <__libc_init_array>:
 800c14c:	b570      	push	{r4, r5, r6, lr}
 800c14e:	2600      	movs	r6, #0
 800c150:	4d0c      	ldr	r5, [pc, #48]	; (800c184 <__libc_init_array+0x38>)
 800c152:	4c0d      	ldr	r4, [pc, #52]	; (800c188 <__libc_init_array+0x3c>)
 800c154:	1b64      	subs	r4, r4, r5
 800c156:	10a4      	asrs	r4, r4, #2
 800c158:	42a6      	cmp	r6, r4
 800c15a:	d109      	bne.n	800c170 <__libc_init_array+0x24>
 800c15c:	2600      	movs	r6, #0
 800c15e:	f003 fabb 	bl	800f6d8 <_init>
 800c162:	4d0a      	ldr	r5, [pc, #40]	; (800c18c <__libc_init_array+0x40>)
 800c164:	4c0a      	ldr	r4, [pc, #40]	; (800c190 <__libc_init_array+0x44>)
 800c166:	1b64      	subs	r4, r4, r5
 800c168:	10a4      	asrs	r4, r4, #2
 800c16a:	42a6      	cmp	r6, r4
 800c16c:	d105      	bne.n	800c17a <__libc_init_array+0x2e>
 800c16e:	bd70      	pop	{r4, r5, r6, pc}
 800c170:	00b3      	lsls	r3, r6, #2
 800c172:	58eb      	ldr	r3, [r5, r3]
 800c174:	4798      	blx	r3
 800c176:	3601      	adds	r6, #1
 800c178:	e7ee      	b.n	800c158 <__libc_init_array+0xc>
 800c17a:	00b3      	lsls	r3, r6, #2
 800c17c:	58eb      	ldr	r3, [r5, r3]
 800c17e:	4798      	blx	r3
 800c180:	3601      	adds	r6, #1
 800c182:	e7f2      	b.n	800c16a <__libc_init_array+0x1e>
 800c184:	0800fee4 	.word	0x0800fee4
 800c188:	0800fee4 	.word	0x0800fee4
 800c18c:	0800fee4 	.word	0x0800fee4
 800c190:	0800fee8 	.word	0x0800fee8

0800c194 <malloc>:
 800c194:	b510      	push	{r4, lr}
 800c196:	4b03      	ldr	r3, [pc, #12]	; (800c1a4 <malloc+0x10>)
 800c198:	0001      	movs	r1, r0
 800c19a:	6818      	ldr	r0, [r3, #0]
 800c19c:	f000 f882 	bl	800c2a4 <_malloc_r>
 800c1a0:	bd10      	pop	{r4, pc}
 800c1a2:	46c0      	nop			; (mov r8, r8)
 800c1a4:	20000010 	.word	0x20000010

0800c1a8 <memcpy>:
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	b510      	push	{r4, lr}
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d100      	bne.n	800c1b2 <memcpy+0xa>
 800c1b0:	bd10      	pop	{r4, pc}
 800c1b2:	5ccc      	ldrb	r4, [r1, r3]
 800c1b4:	54c4      	strb	r4, [r0, r3]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	e7f8      	b.n	800c1ac <memcpy+0x4>

0800c1ba <memset>:
 800c1ba:	0003      	movs	r3, r0
 800c1bc:	1882      	adds	r2, r0, r2
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d100      	bne.n	800c1c4 <memset+0xa>
 800c1c2:	4770      	bx	lr
 800c1c4:	7019      	strb	r1, [r3, #0]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	e7f9      	b.n	800c1be <memset+0x4>
	...

0800c1cc <_free_r>:
 800c1cc:	b570      	push	{r4, r5, r6, lr}
 800c1ce:	0005      	movs	r5, r0
 800c1d0:	2900      	cmp	r1, #0
 800c1d2:	d010      	beq.n	800c1f6 <_free_r+0x2a>
 800c1d4:	1f0c      	subs	r4, r1, #4
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	da00      	bge.n	800c1de <_free_r+0x12>
 800c1dc:	18e4      	adds	r4, r4, r3
 800c1de:	0028      	movs	r0, r5
 800c1e0:	f001 fd6c 	bl	800dcbc <__malloc_lock>
 800c1e4:	4a1d      	ldr	r2, [pc, #116]	; (800c25c <_free_r+0x90>)
 800c1e6:	6813      	ldr	r3, [r2, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d105      	bne.n	800c1f8 <_free_r+0x2c>
 800c1ec:	6063      	str	r3, [r4, #4]
 800c1ee:	6014      	str	r4, [r2, #0]
 800c1f0:	0028      	movs	r0, r5
 800c1f2:	f001 fd6b 	bl	800dccc <__malloc_unlock>
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}
 800c1f8:	42a3      	cmp	r3, r4
 800c1fa:	d908      	bls.n	800c20e <_free_r+0x42>
 800c1fc:	6821      	ldr	r1, [r4, #0]
 800c1fe:	1860      	adds	r0, r4, r1
 800c200:	4283      	cmp	r3, r0
 800c202:	d1f3      	bne.n	800c1ec <_free_r+0x20>
 800c204:	6818      	ldr	r0, [r3, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	1841      	adds	r1, r0, r1
 800c20a:	6021      	str	r1, [r4, #0]
 800c20c:	e7ee      	b.n	800c1ec <_free_r+0x20>
 800c20e:	001a      	movs	r2, r3
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d001      	beq.n	800c21a <_free_r+0x4e>
 800c216:	42a3      	cmp	r3, r4
 800c218:	d9f9      	bls.n	800c20e <_free_r+0x42>
 800c21a:	6811      	ldr	r1, [r2, #0]
 800c21c:	1850      	adds	r0, r2, r1
 800c21e:	42a0      	cmp	r0, r4
 800c220:	d10b      	bne.n	800c23a <_free_r+0x6e>
 800c222:	6820      	ldr	r0, [r4, #0]
 800c224:	1809      	adds	r1, r1, r0
 800c226:	1850      	adds	r0, r2, r1
 800c228:	6011      	str	r1, [r2, #0]
 800c22a:	4283      	cmp	r3, r0
 800c22c:	d1e0      	bne.n	800c1f0 <_free_r+0x24>
 800c22e:	6818      	ldr	r0, [r3, #0]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	1841      	adds	r1, r0, r1
 800c234:	6011      	str	r1, [r2, #0]
 800c236:	6053      	str	r3, [r2, #4]
 800c238:	e7da      	b.n	800c1f0 <_free_r+0x24>
 800c23a:	42a0      	cmp	r0, r4
 800c23c:	d902      	bls.n	800c244 <_free_r+0x78>
 800c23e:	230c      	movs	r3, #12
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	e7d5      	b.n	800c1f0 <_free_r+0x24>
 800c244:	6821      	ldr	r1, [r4, #0]
 800c246:	1860      	adds	r0, r4, r1
 800c248:	4283      	cmp	r3, r0
 800c24a:	d103      	bne.n	800c254 <_free_r+0x88>
 800c24c:	6818      	ldr	r0, [r3, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	1841      	adds	r1, r0, r1
 800c252:	6021      	str	r1, [r4, #0]
 800c254:	6063      	str	r3, [r4, #4]
 800c256:	6054      	str	r4, [r2, #4]
 800c258:	e7ca      	b.n	800c1f0 <_free_r+0x24>
 800c25a:	46c0      	nop			; (mov r8, r8)
 800c25c:	20001ebc 	.word	0x20001ebc

0800c260 <sbrk_aligned>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	4e0f      	ldr	r6, [pc, #60]	; (800c2a0 <sbrk_aligned+0x40>)
 800c264:	000d      	movs	r5, r1
 800c266:	6831      	ldr	r1, [r6, #0]
 800c268:	0004      	movs	r4, r0
 800c26a:	2900      	cmp	r1, #0
 800c26c:	d102      	bne.n	800c274 <sbrk_aligned+0x14>
 800c26e:	f000 fcfd 	bl	800cc6c <_sbrk_r>
 800c272:	6030      	str	r0, [r6, #0]
 800c274:	0029      	movs	r1, r5
 800c276:	0020      	movs	r0, r4
 800c278:	f000 fcf8 	bl	800cc6c <_sbrk_r>
 800c27c:	1c43      	adds	r3, r0, #1
 800c27e:	d00a      	beq.n	800c296 <sbrk_aligned+0x36>
 800c280:	2303      	movs	r3, #3
 800c282:	1cc5      	adds	r5, r0, #3
 800c284:	439d      	bics	r5, r3
 800c286:	42a8      	cmp	r0, r5
 800c288:	d007      	beq.n	800c29a <sbrk_aligned+0x3a>
 800c28a:	1a29      	subs	r1, r5, r0
 800c28c:	0020      	movs	r0, r4
 800c28e:	f000 fced 	bl	800cc6c <_sbrk_r>
 800c292:	1c43      	adds	r3, r0, #1
 800c294:	d101      	bne.n	800c29a <sbrk_aligned+0x3a>
 800c296:	2501      	movs	r5, #1
 800c298:	426d      	negs	r5, r5
 800c29a:	0028      	movs	r0, r5
 800c29c:	bd70      	pop	{r4, r5, r6, pc}
 800c29e:	46c0      	nop			; (mov r8, r8)
 800c2a0:	20001ec0 	.word	0x20001ec0

0800c2a4 <_malloc_r>:
 800c2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2a6:	2203      	movs	r2, #3
 800c2a8:	1ccb      	adds	r3, r1, #3
 800c2aa:	4393      	bics	r3, r2
 800c2ac:	3308      	adds	r3, #8
 800c2ae:	0006      	movs	r6, r0
 800c2b0:	001f      	movs	r7, r3
 800c2b2:	2b0c      	cmp	r3, #12
 800c2b4:	d232      	bcs.n	800c31c <_malloc_r+0x78>
 800c2b6:	270c      	movs	r7, #12
 800c2b8:	42b9      	cmp	r1, r7
 800c2ba:	d831      	bhi.n	800c320 <_malloc_r+0x7c>
 800c2bc:	0030      	movs	r0, r6
 800c2be:	f001 fcfd 	bl	800dcbc <__malloc_lock>
 800c2c2:	4d32      	ldr	r5, [pc, #200]	; (800c38c <_malloc_r+0xe8>)
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	001c      	movs	r4, r3
 800c2c8:	2c00      	cmp	r4, #0
 800c2ca:	d12e      	bne.n	800c32a <_malloc_r+0x86>
 800c2cc:	0039      	movs	r1, r7
 800c2ce:	0030      	movs	r0, r6
 800c2d0:	f7ff ffc6 	bl	800c260 <sbrk_aligned>
 800c2d4:	0004      	movs	r4, r0
 800c2d6:	1c43      	adds	r3, r0, #1
 800c2d8:	d11e      	bne.n	800c318 <_malloc_r+0x74>
 800c2da:	682c      	ldr	r4, [r5, #0]
 800c2dc:	0025      	movs	r5, r4
 800c2de:	2d00      	cmp	r5, #0
 800c2e0:	d14a      	bne.n	800c378 <_malloc_r+0xd4>
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	0029      	movs	r1, r5
 800c2e6:	18e3      	adds	r3, r4, r3
 800c2e8:	0030      	movs	r0, r6
 800c2ea:	9301      	str	r3, [sp, #4]
 800c2ec:	f000 fcbe 	bl	800cc6c <_sbrk_r>
 800c2f0:	9b01      	ldr	r3, [sp, #4]
 800c2f2:	4283      	cmp	r3, r0
 800c2f4:	d143      	bne.n	800c37e <_malloc_r+0xda>
 800c2f6:	6823      	ldr	r3, [r4, #0]
 800c2f8:	3703      	adds	r7, #3
 800c2fa:	1aff      	subs	r7, r7, r3
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	439f      	bics	r7, r3
 800c300:	3708      	adds	r7, #8
 800c302:	2f0c      	cmp	r7, #12
 800c304:	d200      	bcs.n	800c308 <_malloc_r+0x64>
 800c306:	270c      	movs	r7, #12
 800c308:	0039      	movs	r1, r7
 800c30a:	0030      	movs	r0, r6
 800c30c:	f7ff ffa8 	bl	800c260 <sbrk_aligned>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d034      	beq.n	800c37e <_malloc_r+0xda>
 800c314:	6823      	ldr	r3, [r4, #0]
 800c316:	19df      	adds	r7, r3, r7
 800c318:	6027      	str	r7, [r4, #0]
 800c31a:	e013      	b.n	800c344 <_malloc_r+0xa0>
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	dacb      	bge.n	800c2b8 <_malloc_r+0x14>
 800c320:	230c      	movs	r3, #12
 800c322:	2500      	movs	r5, #0
 800c324:	6033      	str	r3, [r6, #0]
 800c326:	0028      	movs	r0, r5
 800c328:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c32a:	6822      	ldr	r2, [r4, #0]
 800c32c:	1bd1      	subs	r1, r2, r7
 800c32e:	d420      	bmi.n	800c372 <_malloc_r+0xce>
 800c330:	290b      	cmp	r1, #11
 800c332:	d917      	bls.n	800c364 <_malloc_r+0xc0>
 800c334:	19e2      	adds	r2, r4, r7
 800c336:	6027      	str	r7, [r4, #0]
 800c338:	42a3      	cmp	r3, r4
 800c33a:	d111      	bne.n	800c360 <_malloc_r+0xbc>
 800c33c:	602a      	str	r2, [r5, #0]
 800c33e:	6863      	ldr	r3, [r4, #4]
 800c340:	6011      	str	r1, [r2, #0]
 800c342:	6053      	str	r3, [r2, #4]
 800c344:	0030      	movs	r0, r6
 800c346:	0025      	movs	r5, r4
 800c348:	f001 fcc0 	bl	800dccc <__malloc_unlock>
 800c34c:	2207      	movs	r2, #7
 800c34e:	350b      	adds	r5, #11
 800c350:	1d23      	adds	r3, r4, #4
 800c352:	4395      	bics	r5, r2
 800c354:	1aea      	subs	r2, r5, r3
 800c356:	429d      	cmp	r5, r3
 800c358:	d0e5      	beq.n	800c326 <_malloc_r+0x82>
 800c35a:	1b5b      	subs	r3, r3, r5
 800c35c:	50a3      	str	r3, [r4, r2]
 800c35e:	e7e2      	b.n	800c326 <_malloc_r+0x82>
 800c360:	605a      	str	r2, [r3, #4]
 800c362:	e7ec      	b.n	800c33e <_malloc_r+0x9a>
 800c364:	6862      	ldr	r2, [r4, #4]
 800c366:	42a3      	cmp	r3, r4
 800c368:	d101      	bne.n	800c36e <_malloc_r+0xca>
 800c36a:	602a      	str	r2, [r5, #0]
 800c36c:	e7ea      	b.n	800c344 <_malloc_r+0xa0>
 800c36e:	605a      	str	r2, [r3, #4]
 800c370:	e7e8      	b.n	800c344 <_malloc_r+0xa0>
 800c372:	0023      	movs	r3, r4
 800c374:	6864      	ldr	r4, [r4, #4]
 800c376:	e7a7      	b.n	800c2c8 <_malloc_r+0x24>
 800c378:	002c      	movs	r4, r5
 800c37a:	686d      	ldr	r5, [r5, #4]
 800c37c:	e7af      	b.n	800c2de <_malloc_r+0x3a>
 800c37e:	230c      	movs	r3, #12
 800c380:	0030      	movs	r0, r6
 800c382:	6033      	str	r3, [r6, #0]
 800c384:	f001 fca2 	bl	800dccc <__malloc_unlock>
 800c388:	e7cd      	b.n	800c326 <_malloc_r+0x82>
 800c38a:	46c0      	nop			; (mov r8, r8)
 800c38c:	20001ebc 	.word	0x20001ebc

0800c390 <__cvt>:
 800c390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c392:	001e      	movs	r6, r3
 800c394:	2300      	movs	r3, #0
 800c396:	0014      	movs	r4, r2
 800c398:	b08b      	sub	sp, #44	; 0x2c
 800c39a:	429e      	cmp	r6, r3
 800c39c:	da04      	bge.n	800c3a8 <__cvt+0x18>
 800c39e:	2180      	movs	r1, #128	; 0x80
 800c3a0:	0609      	lsls	r1, r1, #24
 800c3a2:	1873      	adds	r3, r6, r1
 800c3a4:	001e      	movs	r6, r3
 800c3a6:	232d      	movs	r3, #45	; 0x2d
 800c3a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c3ac:	7013      	strb	r3, [r2, #0]
 800c3ae:	2320      	movs	r3, #32
 800c3b0:	2203      	movs	r2, #3
 800c3b2:	439f      	bics	r7, r3
 800c3b4:	2f46      	cmp	r7, #70	; 0x46
 800c3b6:	d007      	beq.n	800c3c8 <__cvt+0x38>
 800c3b8:	003b      	movs	r3, r7
 800c3ba:	3b45      	subs	r3, #69	; 0x45
 800c3bc:	4259      	negs	r1, r3
 800c3be:	414b      	adcs	r3, r1
 800c3c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c3c2:	3a01      	subs	r2, #1
 800c3c4:	18cb      	adds	r3, r1, r3
 800c3c6:	9310      	str	r3, [sp, #64]	; 0x40
 800c3c8:	ab09      	add	r3, sp, #36	; 0x24
 800c3ca:	9304      	str	r3, [sp, #16]
 800c3cc:	ab08      	add	r3, sp, #32
 800c3ce:	9303      	str	r3, [sp, #12]
 800c3d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3d2:	9200      	str	r2, [sp, #0]
 800c3d4:	9302      	str	r3, [sp, #8]
 800c3d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3d8:	0022      	movs	r2, r4
 800c3da:	9301      	str	r3, [sp, #4]
 800c3dc:	0033      	movs	r3, r6
 800c3de:	f000 fe33 	bl	800d048 <_dtoa_r>
 800c3e2:	0005      	movs	r5, r0
 800c3e4:	2f47      	cmp	r7, #71	; 0x47
 800c3e6:	d102      	bne.n	800c3ee <__cvt+0x5e>
 800c3e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3ea:	07db      	lsls	r3, r3, #31
 800c3ec:	d528      	bpl.n	800c440 <__cvt+0xb0>
 800c3ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3f0:	18eb      	adds	r3, r5, r3
 800c3f2:	9307      	str	r3, [sp, #28]
 800c3f4:	2f46      	cmp	r7, #70	; 0x46
 800c3f6:	d114      	bne.n	800c422 <__cvt+0x92>
 800c3f8:	782b      	ldrb	r3, [r5, #0]
 800c3fa:	2b30      	cmp	r3, #48	; 0x30
 800c3fc:	d10c      	bne.n	800c418 <__cvt+0x88>
 800c3fe:	2200      	movs	r2, #0
 800c400:	2300      	movs	r3, #0
 800c402:	0020      	movs	r0, r4
 800c404:	0031      	movs	r1, r6
 800c406:	f7f4 f82b 	bl	8000460 <__aeabi_dcmpeq>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d104      	bne.n	800c418 <__cvt+0x88>
 800c40e:	2301      	movs	r3, #1
 800c410:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c412:	1a9b      	subs	r3, r3, r2
 800c414:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c41a:	9a07      	ldr	r2, [sp, #28]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	18d3      	adds	r3, r2, r3
 800c420:	9307      	str	r3, [sp, #28]
 800c422:	2200      	movs	r2, #0
 800c424:	2300      	movs	r3, #0
 800c426:	0020      	movs	r0, r4
 800c428:	0031      	movs	r1, r6
 800c42a:	f7f4 f819 	bl	8000460 <__aeabi_dcmpeq>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d001      	beq.n	800c436 <__cvt+0xa6>
 800c432:	9b07      	ldr	r3, [sp, #28]
 800c434:	9309      	str	r3, [sp, #36]	; 0x24
 800c436:	2230      	movs	r2, #48	; 0x30
 800c438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c43a:	9907      	ldr	r1, [sp, #28]
 800c43c:	428b      	cmp	r3, r1
 800c43e:	d306      	bcc.n	800c44e <__cvt+0xbe>
 800c440:	0028      	movs	r0, r5
 800c442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c444:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c446:	1b5b      	subs	r3, r3, r5
 800c448:	6013      	str	r3, [r2, #0]
 800c44a:	b00b      	add	sp, #44	; 0x2c
 800c44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c44e:	1c59      	adds	r1, r3, #1
 800c450:	9109      	str	r1, [sp, #36]	; 0x24
 800c452:	701a      	strb	r2, [r3, #0]
 800c454:	e7f0      	b.n	800c438 <__cvt+0xa8>

0800c456 <__exponent>:
 800c456:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c458:	1c83      	adds	r3, r0, #2
 800c45a:	b087      	sub	sp, #28
 800c45c:	9303      	str	r3, [sp, #12]
 800c45e:	0005      	movs	r5, r0
 800c460:	000c      	movs	r4, r1
 800c462:	232b      	movs	r3, #43	; 0x2b
 800c464:	7002      	strb	r2, [r0, #0]
 800c466:	2900      	cmp	r1, #0
 800c468:	da01      	bge.n	800c46e <__exponent+0x18>
 800c46a:	424c      	negs	r4, r1
 800c46c:	3302      	adds	r3, #2
 800c46e:	706b      	strb	r3, [r5, #1]
 800c470:	2c09      	cmp	r4, #9
 800c472:	dd31      	ble.n	800c4d8 <__exponent+0x82>
 800c474:	270a      	movs	r7, #10
 800c476:	ab04      	add	r3, sp, #16
 800c478:	1dde      	adds	r6, r3, #7
 800c47a:	0020      	movs	r0, r4
 800c47c:	0039      	movs	r1, r7
 800c47e:	9601      	str	r6, [sp, #4]
 800c480:	f7f3 ffd8 	bl	8000434 <__aeabi_idivmod>
 800c484:	3e01      	subs	r6, #1
 800c486:	3130      	adds	r1, #48	; 0x30
 800c488:	0020      	movs	r0, r4
 800c48a:	7031      	strb	r1, [r6, #0]
 800c48c:	0039      	movs	r1, r7
 800c48e:	9402      	str	r4, [sp, #8]
 800c490:	f7f3 feea 	bl	8000268 <__divsi3>
 800c494:	9b02      	ldr	r3, [sp, #8]
 800c496:	0004      	movs	r4, r0
 800c498:	2b63      	cmp	r3, #99	; 0x63
 800c49a:	dcee      	bgt.n	800c47a <__exponent+0x24>
 800c49c:	9b01      	ldr	r3, [sp, #4]
 800c49e:	3430      	adds	r4, #48	; 0x30
 800c4a0:	1e9a      	subs	r2, r3, #2
 800c4a2:	0013      	movs	r3, r2
 800c4a4:	9903      	ldr	r1, [sp, #12]
 800c4a6:	7014      	strb	r4, [r2, #0]
 800c4a8:	a804      	add	r0, sp, #16
 800c4aa:	3007      	adds	r0, #7
 800c4ac:	4298      	cmp	r0, r3
 800c4ae:	d80e      	bhi.n	800c4ce <__exponent+0x78>
 800c4b0:	ab04      	add	r3, sp, #16
 800c4b2:	3307      	adds	r3, #7
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d804      	bhi.n	800c4c4 <__exponent+0x6e>
 800c4ba:	ab04      	add	r3, sp, #16
 800c4bc:	3009      	adds	r0, #9
 800c4be:	18c0      	adds	r0, r0, r3
 800c4c0:	9b01      	ldr	r3, [sp, #4]
 800c4c2:	1ac0      	subs	r0, r0, r3
 800c4c4:	9b03      	ldr	r3, [sp, #12]
 800c4c6:	1818      	adds	r0, r3, r0
 800c4c8:	1b40      	subs	r0, r0, r5
 800c4ca:	b007      	add	sp, #28
 800c4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ce:	7818      	ldrb	r0, [r3, #0]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	7008      	strb	r0, [r1, #0]
 800c4d4:	3101      	adds	r1, #1
 800c4d6:	e7e7      	b.n	800c4a8 <__exponent+0x52>
 800c4d8:	2330      	movs	r3, #48	; 0x30
 800c4da:	18e4      	adds	r4, r4, r3
 800c4dc:	70ab      	strb	r3, [r5, #2]
 800c4de:	1d28      	adds	r0, r5, #4
 800c4e0:	70ec      	strb	r4, [r5, #3]
 800c4e2:	e7f1      	b.n	800c4c8 <__exponent+0x72>

0800c4e4 <_printf_float>:
 800c4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e6:	b095      	sub	sp, #84	; 0x54
 800c4e8:	000c      	movs	r4, r1
 800c4ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ec:	001e      	movs	r6, r3
 800c4ee:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c4f0:	0007      	movs	r7, r0
 800c4f2:	f001 fbd3 	bl	800dc9c <_localeconv_r>
 800c4f6:	6803      	ldr	r3, [r0, #0]
 800c4f8:	0018      	movs	r0, r3
 800c4fa:	930c      	str	r3, [sp, #48]	; 0x30
 800c4fc:	f7f3 fe0e 	bl	800011c <strlen>
 800c500:	2300      	movs	r3, #0
 800c502:	9312      	str	r3, [sp, #72]	; 0x48
 800c504:	7e23      	ldrb	r3, [r4, #24]
 800c506:	2207      	movs	r2, #7
 800c508:	930a      	str	r3, [sp, #40]	; 0x28
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	900e      	str	r0, [sp, #56]	; 0x38
 800c50e:	930d      	str	r3, [sp, #52]	; 0x34
 800c510:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c512:	682b      	ldr	r3, [r5, #0]
 800c514:	05c9      	lsls	r1, r1, #23
 800c516:	d547      	bpl.n	800c5a8 <_printf_float+0xc4>
 800c518:	189b      	adds	r3, r3, r2
 800c51a:	4393      	bics	r3, r2
 800c51c:	001a      	movs	r2, r3
 800c51e:	3208      	adds	r2, #8
 800c520:	602a      	str	r2, [r5, #0]
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	64a2      	str	r2, [r4, #72]	; 0x48
 800c528:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c52a:	2201      	movs	r2, #1
 800c52c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c52e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800c530:	930b      	str	r3, [sp, #44]	; 0x2c
 800c532:	006b      	lsls	r3, r5, #1
 800c534:	085b      	lsrs	r3, r3, #1
 800c536:	930f      	str	r3, [sp, #60]	; 0x3c
 800c538:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c53a:	4ba7      	ldr	r3, [pc, #668]	; (800c7d8 <_printf_float+0x2f4>)
 800c53c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c53e:	4252      	negs	r2, r2
 800c540:	f7f6 fce8 	bl	8002f14 <__aeabi_dcmpun>
 800c544:	2800      	cmp	r0, #0
 800c546:	d131      	bne.n	800c5ac <_printf_float+0xc8>
 800c548:	2201      	movs	r2, #1
 800c54a:	4ba3      	ldr	r3, [pc, #652]	; (800c7d8 <_printf_float+0x2f4>)
 800c54c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c54e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c550:	4252      	negs	r2, r2
 800c552:	f7f3 ff95 	bl	8000480 <__aeabi_dcmple>
 800c556:	2800      	cmp	r0, #0
 800c558:	d128      	bne.n	800c5ac <_printf_float+0xc8>
 800c55a:	2200      	movs	r2, #0
 800c55c:	2300      	movs	r3, #0
 800c55e:	0029      	movs	r1, r5
 800c560:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c562:	f7f3 ff83 	bl	800046c <__aeabi_dcmplt>
 800c566:	2800      	cmp	r0, #0
 800c568:	d003      	beq.n	800c572 <_printf_float+0x8e>
 800c56a:	0023      	movs	r3, r4
 800c56c:	222d      	movs	r2, #45	; 0x2d
 800c56e:	3343      	adds	r3, #67	; 0x43
 800c570:	701a      	strb	r2, [r3, #0]
 800c572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c574:	4d99      	ldr	r5, [pc, #612]	; (800c7dc <_printf_float+0x2f8>)
 800c576:	2b47      	cmp	r3, #71	; 0x47
 800c578:	d900      	bls.n	800c57c <_printf_float+0x98>
 800c57a:	4d99      	ldr	r5, [pc, #612]	; (800c7e0 <_printf_float+0x2fc>)
 800c57c:	2303      	movs	r3, #3
 800c57e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c580:	6123      	str	r3, [r4, #16]
 800c582:	3301      	adds	r3, #1
 800c584:	439a      	bics	r2, r3
 800c586:	2300      	movs	r3, #0
 800c588:	6022      	str	r2, [r4, #0]
 800c58a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c58e:	0021      	movs	r1, r4
 800c590:	0038      	movs	r0, r7
 800c592:	9600      	str	r6, [sp, #0]
 800c594:	aa13      	add	r2, sp, #76	; 0x4c
 800c596:	f000 f9e7 	bl	800c968 <_printf_common>
 800c59a:	1c43      	adds	r3, r0, #1
 800c59c:	d000      	beq.n	800c5a0 <_printf_float+0xbc>
 800c59e:	e0a2      	b.n	800c6e6 <_printf_float+0x202>
 800c5a0:	2001      	movs	r0, #1
 800c5a2:	4240      	negs	r0, r0
 800c5a4:	b015      	add	sp, #84	; 0x54
 800c5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a8:	3307      	adds	r3, #7
 800c5aa:	e7b6      	b.n	800c51a <_printf_float+0x36>
 800c5ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5ae:	002b      	movs	r3, r5
 800c5b0:	0010      	movs	r0, r2
 800c5b2:	0029      	movs	r1, r5
 800c5b4:	f7f6 fcae 	bl	8002f14 <__aeabi_dcmpun>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d00b      	beq.n	800c5d4 <_printf_float+0xf0>
 800c5bc:	2d00      	cmp	r5, #0
 800c5be:	da03      	bge.n	800c5c8 <_printf_float+0xe4>
 800c5c0:	0023      	movs	r3, r4
 800c5c2:	222d      	movs	r2, #45	; 0x2d
 800c5c4:	3343      	adds	r3, #67	; 0x43
 800c5c6:	701a      	strb	r2, [r3, #0]
 800c5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ca:	4d86      	ldr	r5, [pc, #536]	; (800c7e4 <_printf_float+0x300>)
 800c5cc:	2b47      	cmp	r3, #71	; 0x47
 800c5ce:	d9d5      	bls.n	800c57c <_printf_float+0x98>
 800c5d0:	4d85      	ldr	r5, [pc, #532]	; (800c7e8 <_printf_float+0x304>)
 800c5d2:	e7d3      	b.n	800c57c <_printf_float+0x98>
 800c5d4:	2220      	movs	r2, #32
 800c5d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c5d8:	6863      	ldr	r3, [r4, #4]
 800c5da:	4391      	bics	r1, r2
 800c5dc:	910f      	str	r1, [sp, #60]	; 0x3c
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	d149      	bne.n	800c676 <_printf_float+0x192>
 800c5e2:	3307      	adds	r3, #7
 800c5e4:	6063      	str	r3, [r4, #4]
 800c5e6:	2380      	movs	r3, #128	; 0x80
 800c5e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5ea:	00db      	lsls	r3, r3, #3
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	9206      	str	r2, [sp, #24]
 800c5f2:	aa12      	add	r2, sp, #72	; 0x48
 800c5f4:	9205      	str	r2, [sp, #20]
 800c5f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5f8:	a908      	add	r1, sp, #32
 800c5fa:	9204      	str	r2, [sp, #16]
 800c5fc:	aa11      	add	r2, sp, #68	; 0x44
 800c5fe:	9203      	str	r2, [sp, #12]
 800c600:	2223      	movs	r2, #35	; 0x23
 800c602:	6023      	str	r3, [r4, #0]
 800c604:	9301      	str	r3, [sp, #4]
 800c606:	6863      	ldr	r3, [r4, #4]
 800c608:	1852      	adds	r2, r2, r1
 800c60a:	9202      	str	r2, [sp, #8]
 800c60c:	9300      	str	r3, [sp, #0]
 800c60e:	0038      	movs	r0, r7
 800c610:	002b      	movs	r3, r5
 800c612:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c614:	f7ff febc 	bl	800c390 <__cvt>
 800c618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c61a:	0005      	movs	r5, r0
 800c61c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c61e:	2b47      	cmp	r3, #71	; 0x47
 800c620:	d108      	bne.n	800c634 <_printf_float+0x150>
 800c622:	1ccb      	adds	r3, r1, #3
 800c624:	db02      	blt.n	800c62c <_printf_float+0x148>
 800c626:	6863      	ldr	r3, [r4, #4]
 800c628:	4299      	cmp	r1, r3
 800c62a:	dd48      	ble.n	800c6be <_printf_float+0x1da>
 800c62c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c62e:	3b02      	subs	r3, #2
 800c630:	b2db      	uxtb	r3, r3
 800c632:	930a      	str	r3, [sp, #40]	; 0x28
 800c634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c636:	2b65      	cmp	r3, #101	; 0x65
 800c638:	d824      	bhi.n	800c684 <_printf_float+0x1a0>
 800c63a:	0020      	movs	r0, r4
 800c63c:	001a      	movs	r2, r3
 800c63e:	3901      	subs	r1, #1
 800c640:	3050      	adds	r0, #80	; 0x50
 800c642:	9111      	str	r1, [sp, #68]	; 0x44
 800c644:	f7ff ff07 	bl	800c456 <__exponent>
 800c648:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c64a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c64c:	1813      	adds	r3, r2, r0
 800c64e:	6123      	str	r3, [r4, #16]
 800c650:	2a01      	cmp	r2, #1
 800c652:	dc02      	bgt.n	800c65a <_printf_float+0x176>
 800c654:	6822      	ldr	r2, [r4, #0]
 800c656:	07d2      	lsls	r2, r2, #31
 800c658:	d501      	bpl.n	800c65e <_printf_float+0x17a>
 800c65a:	3301      	adds	r3, #1
 800c65c:	6123      	str	r3, [r4, #16]
 800c65e:	2323      	movs	r3, #35	; 0x23
 800c660:	aa08      	add	r2, sp, #32
 800c662:	189b      	adds	r3, r3, r2
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d100      	bne.n	800c66c <_printf_float+0x188>
 800c66a:	e78f      	b.n	800c58c <_printf_float+0xa8>
 800c66c:	0023      	movs	r3, r4
 800c66e:	222d      	movs	r2, #45	; 0x2d
 800c670:	3343      	adds	r3, #67	; 0x43
 800c672:	701a      	strb	r2, [r3, #0]
 800c674:	e78a      	b.n	800c58c <_printf_float+0xa8>
 800c676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c678:	2a47      	cmp	r2, #71	; 0x47
 800c67a:	d1b4      	bne.n	800c5e6 <_printf_float+0x102>
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1b2      	bne.n	800c5e6 <_printf_float+0x102>
 800c680:	3301      	adds	r3, #1
 800c682:	e7af      	b.n	800c5e4 <_printf_float+0x100>
 800c684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c686:	2b66      	cmp	r3, #102	; 0x66
 800c688:	d11b      	bne.n	800c6c2 <_printf_float+0x1de>
 800c68a:	6863      	ldr	r3, [r4, #4]
 800c68c:	2900      	cmp	r1, #0
 800c68e:	dd0d      	ble.n	800c6ac <_printf_float+0x1c8>
 800c690:	6121      	str	r1, [r4, #16]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d102      	bne.n	800c69c <_printf_float+0x1b8>
 800c696:	6822      	ldr	r2, [r4, #0]
 800c698:	07d2      	lsls	r2, r2, #31
 800c69a:	d502      	bpl.n	800c6a2 <_printf_float+0x1be>
 800c69c:	3301      	adds	r3, #1
 800c69e:	1859      	adds	r1, r3, r1
 800c6a0:	6121      	str	r1, [r4, #16]
 800c6a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6a4:	65a3      	str	r3, [r4, #88]	; 0x58
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6aa:	e7d8      	b.n	800c65e <_printf_float+0x17a>
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d103      	bne.n	800c6b8 <_printf_float+0x1d4>
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	6821      	ldr	r1, [r4, #0]
 800c6b4:	4211      	tst	r1, r2
 800c6b6:	d000      	beq.n	800c6ba <_printf_float+0x1d6>
 800c6b8:	1c9a      	adds	r2, r3, #2
 800c6ba:	6122      	str	r2, [r4, #16]
 800c6bc:	e7f1      	b.n	800c6a2 <_printf_float+0x1be>
 800c6be:	2367      	movs	r3, #103	; 0x67
 800c6c0:	930a      	str	r3, [sp, #40]	; 0x28
 800c6c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	db06      	blt.n	800c6d8 <_printf_float+0x1f4>
 800c6ca:	6822      	ldr	r2, [r4, #0]
 800c6cc:	6123      	str	r3, [r4, #16]
 800c6ce:	07d2      	lsls	r2, r2, #31
 800c6d0:	d5e7      	bpl.n	800c6a2 <_printf_float+0x1be>
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	6123      	str	r3, [r4, #16]
 800c6d6:	e7e4      	b.n	800c6a2 <_printf_float+0x1be>
 800c6d8:	2101      	movs	r1, #1
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	dc01      	bgt.n	800c6e2 <_printf_float+0x1fe>
 800c6de:	1849      	adds	r1, r1, r1
 800c6e0:	1ac9      	subs	r1, r1, r3
 800c6e2:	1852      	adds	r2, r2, r1
 800c6e4:	e7e9      	b.n	800c6ba <_printf_float+0x1d6>
 800c6e6:	6822      	ldr	r2, [r4, #0]
 800c6e8:	0553      	lsls	r3, r2, #21
 800c6ea:	d407      	bmi.n	800c6fc <_printf_float+0x218>
 800c6ec:	6923      	ldr	r3, [r4, #16]
 800c6ee:	002a      	movs	r2, r5
 800c6f0:	0038      	movs	r0, r7
 800c6f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6f4:	47b0      	blx	r6
 800c6f6:	1c43      	adds	r3, r0, #1
 800c6f8:	d128      	bne.n	800c74c <_printf_float+0x268>
 800c6fa:	e751      	b.n	800c5a0 <_printf_float+0xbc>
 800c6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6fe:	2b65      	cmp	r3, #101	; 0x65
 800c700:	d800      	bhi.n	800c704 <_printf_float+0x220>
 800c702:	e0e1      	b.n	800c8c8 <_printf_float+0x3e4>
 800c704:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c706:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c708:	2200      	movs	r2, #0
 800c70a:	2300      	movs	r3, #0
 800c70c:	f7f3 fea8 	bl	8000460 <__aeabi_dcmpeq>
 800c710:	2800      	cmp	r0, #0
 800c712:	d031      	beq.n	800c778 <_printf_float+0x294>
 800c714:	2301      	movs	r3, #1
 800c716:	0038      	movs	r0, r7
 800c718:	4a34      	ldr	r2, [pc, #208]	; (800c7ec <_printf_float+0x308>)
 800c71a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c71c:	47b0      	blx	r6
 800c71e:	1c43      	adds	r3, r0, #1
 800c720:	d100      	bne.n	800c724 <_printf_float+0x240>
 800c722:	e73d      	b.n	800c5a0 <_printf_float+0xbc>
 800c724:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c726:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c728:	4293      	cmp	r3, r2
 800c72a:	db02      	blt.n	800c732 <_printf_float+0x24e>
 800c72c:	6823      	ldr	r3, [r4, #0]
 800c72e:	07db      	lsls	r3, r3, #31
 800c730:	d50c      	bpl.n	800c74c <_printf_float+0x268>
 800c732:	0038      	movs	r0, r7
 800c734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c738:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c73a:	47b0      	blx	r6
 800c73c:	2500      	movs	r5, #0
 800c73e:	1c43      	adds	r3, r0, #1
 800c740:	d100      	bne.n	800c744 <_printf_float+0x260>
 800c742:	e72d      	b.n	800c5a0 <_printf_float+0xbc>
 800c744:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c746:	3b01      	subs	r3, #1
 800c748:	42ab      	cmp	r3, r5
 800c74a:	dc0a      	bgt.n	800c762 <_printf_float+0x27e>
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	079b      	lsls	r3, r3, #30
 800c750:	d500      	bpl.n	800c754 <_printf_float+0x270>
 800c752:	e106      	b.n	800c962 <_printf_float+0x47e>
 800c754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c756:	68e0      	ldr	r0, [r4, #12]
 800c758:	4298      	cmp	r0, r3
 800c75a:	db00      	blt.n	800c75e <_printf_float+0x27a>
 800c75c:	e722      	b.n	800c5a4 <_printf_float+0xc0>
 800c75e:	0018      	movs	r0, r3
 800c760:	e720      	b.n	800c5a4 <_printf_float+0xc0>
 800c762:	0022      	movs	r2, r4
 800c764:	2301      	movs	r3, #1
 800c766:	0038      	movs	r0, r7
 800c768:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c76a:	321a      	adds	r2, #26
 800c76c:	47b0      	blx	r6
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	d100      	bne.n	800c774 <_printf_float+0x290>
 800c772:	e715      	b.n	800c5a0 <_printf_float+0xbc>
 800c774:	3501      	adds	r5, #1
 800c776:	e7e5      	b.n	800c744 <_printf_float+0x260>
 800c778:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	dc38      	bgt.n	800c7f0 <_printf_float+0x30c>
 800c77e:	2301      	movs	r3, #1
 800c780:	0038      	movs	r0, r7
 800c782:	4a1a      	ldr	r2, [pc, #104]	; (800c7ec <_printf_float+0x308>)
 800c784:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c786:	47b0      	blx	r6
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d100      	bne.n	800c78e <_printf_float+0x2aa>
 800c78c:	e708      	b.n	800c5a0 <_printf_float+0xbc>
 800c78e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c790:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c792:	4313      	orrs	r3, r2
 800c794:	d102      	bne.n	800c79c <_printf_float+0x2b8>
 800c796:	6823      	ldr	r3, [r4, #0]
 800c798:	07db      	lsls	r3, r3, #31
 800c79a:	d5d7      	bpl.n	800c74c <_printf_float+0x268>
 800c79c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c79e:	0038      	movs	r0, r7
 800c7a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7a4:	47b0      	blx	r6
 800c7a6:	1c43      	adds	r3, r0, #1
 800c7a8:	d100      	bne.n	800c7ac <_printf_float+0x2c8>
 800c7aa:	e6f9      	b.n	800c5a0 <_printf_float+0xbc>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c7b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7b4:	425b      	negs	r3, r3
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	dc01      	bgt.n	800c7be <_printf_float+0x2da>
 800c7ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7bc:	e797      	b.n	800c6ee <_printf_float+0x20a>
 800c7be:	0022      	movs	r2, r4
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	0038      	movs	r0, r7
 800c7c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7c6:	321a      	adds	r2, #26
 800c7c8:	47b0      	blx	r6
 800c7ca:	1c43      	adds	r3, r0, #1
 800c7cc:	d100      	bne.n	800c7d0 <_printf_float+0x2ec>
 800c7ce:	e6e7      	b.n	800c5a0 <_printf_float+0xbc>
 800c7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	e7eb      	b.n	800c7ae <_printf_float+0x2ca>
 800c7d6:	46c0      	nop			; (mov r8, r8)
 800c7d8:	7fefffff 	.word	0x7fefffff
 800c7dc:	0800faa4 	.word	0x0800faa4
 800c7e0:	0800faa8 	.word	0x0800faa8
 800c7e4:	0800faac 	.word	0x0800faac
 800c7e8:	0800fab0 	.word	0x0800fab0
 800c7ec:	0800fab4 	.word	0x0800fab4
 800c7f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7f4:	920a      	str	r2, [sp, #40]	; 0x28
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	dd00      	ble.n	800c7fc <_printf_float+0x318>
 800c7fa:	930a      	str	r3, [sp, #40]	; 0x28
 800c7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	dc3c      	bgt.n	800c87c <_printf_float+0x398>
 800c802:	2300      	movs	r3, #0
 800c804:	930d      	str	r3, [sp, #52]	; 0x34
 800c806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c808:	43db      	mvns	r3, r3
 800c80a:	17db      	asrs	r3, r3, #31
 800c80c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c80e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c812:	930b      	str	r3, [sp, #44]	; 0x2c
 800c814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c816:	4013      	ands	r3, r2
 800c818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c81a:	1ad3      	subs	r3, r2, r3
 800c81c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c81e:	4293      	cmp	r3, r2
 800c820:	dc34      	bgt.n	800c88c <_printf_float+0x3a8>
 800c822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c826:	4293      	cmp	r3, r2
 800c828:	db3d      	blt.n	800c8a6 <_printf_float+0x3c2>
 800c82a:	6823      	ldr	r3, [r4, #0]
 800c82c:	07db      	lsls	r3, r3, #31
 800c82e:	d43a      	bmi.n	800c8a6 <_printf_float+0x3c2>
 800c830:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c834:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	1a52      	subs	r2, r2, r1
 800c83a:	920a      	str	r2, [sp, #40]	; 0x28
 800c83c:	429a      	cmp	r2, r3
 800c83e:	dd00      	ble.n	800c842 <_printf_float+0x35e>
 800c840:	930a      	str	r3, [sp, #40]	; 0x28
 800c842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c844:	2b00      	cmp	r3, #0
 800c846:	dc36      	bgt.n	800c8b6 <_printf_float+0x3d2>
 800c848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c84a:	2500      	movs	r5, #0
 800c84c:	43db      	mvns	r3, r3
 800c84e:	17db      	asrs	r3, r3, #31
 800c850:	930b      	str	r3, [sp, #44]	; 0x2c
 800c852:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c856:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c858:	1a9b      	subs	r3, r3, r2
 800c85a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c85c:	400a      	ands	r2, r1
 800c85e:	1a9b      	subs	r3, r3, r2
 800c860:	42ab      	cmp	r3, r5
 800c862:	dc00      	bgt.n	800c866 <_printf_float+0x382>
 800c864:	e772      	b.n	800c74c <_printf_float+0x268>
 800c866:	0022      	movs	r2, r4
 800c868:	2301      	movs	r3, #1
 800c86a:	0038      	movs	r0, r7
 800c86c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c86e:	321a      	adds	r2, #26
 800c870:	47b0      	blx	r6
 800c872:	1c43      	adds	r3, r0, #1
 800c874:	d100      	bne.n	800c878 <_printf_float+0x394>
 800c876:	e693      	b.n	800c5a0 <_printf_float+0xbc>
 800c878:	3501      	adds	r5, #1
 800c87a:	e7ea      	b.n	800c852 <_printf_float+0x36e>
 800c87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c87e:	002a      	movs	r2, r5
 800c880:	0038      	movs	r0, r7
 800c882:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c884:	47b0      	blx	r6
 800c886:	1c43      	adds	r3, r0, #1
 800c888:	d1bb      	bne.n	800c802 <_printf_float+0x31e>
 800c88a:	e689      	b.n	800c5a0 <_printf_float+0xbc>
 800c88c:	0022      	movs	r2, r4
 800c88e:	2301      	movs	r3, #1
 800c890:	0038      	movs	r0, r7
 800c892:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c894:	321a      	adds	r2, #26
 800c896:	47b0      	blx	r6
 800c898:	1c43      	adds	r3, r0, #1
 800c89a:	d100      	bne.n	800c89e <_printf_float+0x3ba>
 800c89c:	e680      	b.n	800c5a0 <_printf_float+0xbc>
 800c89e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	930d      	str	r3, [sp, #52]	; 0x34
 800c8a4:	e7b3      	b.n	800c80e <_printf_float+0x32a>
 800c8a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8a8:	0038      	movs	r0, r7
 800c8aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8ae:	47b0      	blx	r6
 800c8b0:	1c43      	adds	r3, r0, #1
 800c8b2:	d1bd      	bne.n	800c830 <_printf_float+0x34c>
 800c8b4:	e674      	b.n	800c5a0 <_printf_float+0xbc>
 800c8b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8b8:	0038      	movs	r0, r7
 800c8ba:	18ea      	adds	r2, r5, r3
 800c8bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8c0:	47b0      	blx	r6
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	d1c0      	bne.n	800c848 <_printf_float+0x364>
 800c8c6:	e66b      	b.n	800c5a0 <_printf_float+0xbc>
 800c8c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	dc02      	bgt.n	800c8d4 <_printf_float+0x3f0>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	421a      	tst	r2, r3
 800c8d2:	d034      	beq.n	800c93e <_printf_float+0x45a>
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	002a      	movs	r2, r5
 800c8d8:	0038      	movs	r0, r7
 800c8da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8dc:	47b0      	blx	r6
 800c8de:	1c43      	adds	r3, r0, #1
 800c8e0:	d100      	bne.n	800c8e4 <_printf_float+0x400>
 800c8e2:	e65d      	b.n	800c5a0 <_printf_float+0xbc>
 800c8e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8e6:	0038      	movs	r0, r7
 800c8e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8ec:	47b0      	blx	r6
 800c8ee:	1c43      	adds	r3, r0, #1
 800c8f0:	d100      	bne.n	800c8f4 <_printf_float+0x410>
 800c8f2:	e655      	b.n	800c5a0 <_printf_float+0xbc>
 800c8f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c8f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	f7f3 fdb0 	bl	8000460 <__aeabi_dcmpeq>
 800c900:	2800      	cmp	r0, #0
 800c902:	d11a      	bne.n	800c93a <_printf_float+0x456>
 800c904:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c906:	1c6a      	adds	r2, r5, #1
 800c908:	3b01      	subs	r3, #1
 800c90a:	0038      	movs	r0, r7
 800c90c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c90e:	47b0      	blx	r6
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	d10e      	bne.n	800c932 <_printf_float+0x44e>
 800c914:	e644      	b.n	800c5a0 <_printf_float+0xbc>
 800c916:	0022      	movs	r2, r4
 800c918:	2301      	movs	r3, #1
 800c91a:	0038      	movs	r0, r7
 800c91c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c91e:	321a      	adds	r2, #26
 800c920:	47b0      	blx	r6
 800c922:	1c43      	adds	r3, r0, #1
 800c924:	d100      	bne.n	800c928 <_printf_float+0x444>
 800c926:	e63b      	b.n	800c5a0 <_printf_float+0xbc>
 800c928:	3501      	adds	r5, #1
 800c92a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c92c:	3b01      	subs	r3, #1
 800c92e:	42ab      	cmp	r3, r5
 800c930:	dcf1      	bgt.n	800c916 <_printf_float+0x432>
 800c932:	0022      	movs	r2, r4
 800c934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c936:	3250      	adds	r2, #80	; 0x50
 800c938:	e6da      	b.n	800c6f0 <_printf_float+0x20c>
 800c93a:	2500      	movs	r5, #0
 800c93c:	e7f5      	b.n	800c92a <_printf_float+0x446>
 800c93e:	002a      	movs	r2, r5
 800c940:	e7e3      	b.n	800c90a <_printf_float+0x426>
 800c942:	0022      	movs	r2, r4
 800c944:	2301      	movs	r3, #1
 800c946:	0038      	movs	r0, r7
 800c948:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c94a:	3219      	adds	r2, #25
 800c94c:	47b0      	blx	r6
 800c94e:	1c43      	adds	r3, r0, #1
 800c950:	d100      	bne.n	800c954 <_printf_float+0x470>
 800c952:	e625      	b.n	800c5a0 <_printf_float+0xbc>
 800c954:	3501      	adds	r5, #1
 800c956:	68e3      	ldr	r3, [r4, #12]
 800c958:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c95a:	1a9b      	subs	r3, r3, r2
 800c95c:	42ab      	cmp	r3, r5
 800c95e:	dcf0      	bgt.n	800c942 <_printf_float+0x45e>
 800c960:	e6f8      	b.n	800c754 <_printf_float+0x270>
 800c962:	2500      	movs	r5, #0
 800c964:	e7f7      	b.n	800c956 <_printf_float+0x472>
 800c966:	46c0      	nop			; (mov r8, r8)

0800c968 <_printf_common>:
 800c968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c96a:	0015      	movs	r5, r2
 800c96c:	9301      	str	r3, [sp, #4]
 800c96e:	688a      	ldr	r2, [r1, #8]
 800c970:	690b      	ldr	r3, [r1, #16]
 800c972:	000c      	movs	r4, r1
 800c974:	9000      	str	r0, [sp, #0]
 800c976:	4293      	cmp	r3, r2
 800c978:	da00      	bge.n	800c97c <_printf_common+0x14>
 800c97a:	0013      	movs	r3, r2
 800c97c:	0022      	movs	r2, r4
 800c97e:	602b      	str	r3, [r5, #0]
 800c980:	3243      	adds	r2, #67	; 0x43
 800c982:	7812      	ldrb	r2, [r2, #0]
 800c984:	2a00      	cmp	r2, #0
 800c986:	d001      	beq.n	800c98c <_printf_common+0x24>
 800c988:	3301      	adds	r3, #1
 800c98a:	602b      	str	r3, [r5, #0]
 800c98c:	6823      	ldr	r3, [r4, #0]
 800c98e:	069b      	lsls	r3, r3, #26
 800c990:	d502      	bpl.n	800c998 <_printf_common+0x30>
 800c992:	682b      	ldr	r3, [r5, #0]
 800c994:	3302      	adds	r3, #2
 800c996:	602b      	str	r3, [r5, #0]
 800c998:	6822      	ldr	r2, [r4, #0]
 800c99a:	2306      	movs	r3, #6
 800c99c:	0017      	movs	r7, r2
 800c99e:	401f      	ands	r7, r3
 800c9a0:	421a      	tst	r2, r3
 800c9a2:	d027      	beq.n	800c9f4 <_printf_common+0x8c>
 800c9a4:	0023      	movs	r3, r4
 800c9a6:	3343      	adds	r3, #67	; 0x43
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	1e5a      	subs	r2, r3, #1
 800c9ac:	4193      	sbcs	r3, r2
 800c9ae:	6822      	ldr	r2, [r4, #0]
 800c9b0:	0692      	lsls	r2, r2, #26
 800c9b2:	d430      	bmi.n	800ca16 <_printf_common+0xae>
 800c9b4:	0022      	movs	r2, r4
 800c9b6:	9901      	ldr	r1, [sp, #4]
 800c9b8:	9800      	ldr	r0, [sp, #0]
 800c9ba:	9e08      	ldr	r6, [sp, #32]
 800c9bc:	3243      	adds	r2, #67	; 0x43
 800c9be:	47b0      	blx	r6
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d025      	beq.n	800ca10 <_printf_common+0xa8>
 800c9c4:	2306      	movs	r3, #6
 800c9c6:	6820      	ldr	r0, [r4, #0]
 800c9c8:	682a      	ldr	r2, [r5, #0]
 800c9ca:	68e1      	ldr	r1, [r4, #12]
 800c9cc:	2500      	movs	r5, #0
 800c9ce:	4003      	ands	r3, r0
 800c9d0:	2b04      	cmp	r3, #4
 800c9d2:	d103      	bne.n	800c9dc <_printf_common+0x74>
 800c9d4:	1a8d      	subs	r5, r1, r2
 800c9d6:	43eb      	mvns	r3, r5
 800c9d8:	17db      	asrs	r3, r3, #31
 800c9da:	401d      	ands	r5, r3
 800c9dc:	68a3      	ldr	r3, [r4, #8]
 800c9de:	6922      	ldr	r2, [r4, #16]
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	dd01      	ble.n	800c9e8 <_printf_common+0x80>
 800c9e4:	1a9b      	subs	r3, r3, r2
 800c9e6:	18ed      	adds	r5, r5, r3
 800c9e8:	2700      	movs	r7, #0
 800c9ea:	42bd      	cmp	r5, r7
 800c9ec:	d120      	bne.n	800ca30 <_printf_common+0xc8>
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	e010      	b.n	800ca14 <_printf_common+0xac>
 800c9f2:	3701      	adds	r7, #1
 800c9f4:	68e3      	ldr	r3, [r4, #12]
 800c9f6:	682a      	ldr	r2, [r5, #0]
 800c9f8:	1a9b      	subs	r3, r3, r2
 800c9fa:	42bb      	cmp	r3, r7
 800c9fc:	ddd2      	ble.n	800c9a4 <_printf_common+0x3c>
 800c9fe:	0022      	movs	r2, r4
 800ca00:	2301      	movs	r3, #1
 800ca02:	9901      	ldr	r1, [sp, #4]
 800ca04:	9800      	ldr	r0, [sp, #0]
 800ca06:	9e08      	ldr	r6, [sp, #32]
 800ca08:	3219      	adds	r2, #25
 800ca0a:	47b0      	blx	r6
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d1f0      	bne.n	800c9f2 <_printf_common+0x8a>
 800ca10:	2001      	movs	r0, #1
 800ca12:	4240      	negs	r0, r0
 800ca14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca16:	2030      	movs	r0, #48	; 0x30
 800ca18:	18e1      	adds	r1, r4, r3
 800ca1a:	3143      	adds	r1, #67	; 0x43
 800ca1c:	7008      	strb	r0, [r1, #0]
 800ca1e:	0021      	movs	r1, r4
 800ca20:	1c5a      	adds	r2, r3, #1
 800ca22:	3145      	adds	r1, #69	; 0x45
 800ca24:	7809      	ldrb	r1, [r1, #0]
 800ca26:	18a2      	adds	r2, r4, r2
 800ca28:	3243      	adds	r2, #67	; 0x43
 800ca2a:	3302      	adds	r3, #2
 800ca2c:	7011      	strb	r1, [r2, #0]
 800ca2e:	e7c1      	b.n	800c9b4 <_printf_common+0x4c>
 800ca30:	0022      	movs	r2, r4
 800ca32:	2301      	movs	r3, #1
 800ca34:	9901      	ldr	r1, [sp, #4]
 800ca36:	9800      	ldr	r0, [sp, #0]
 800ca38:	9e08      	ldr	r6, [sp, #32]
 800ca3a:	321a      	adds	r2, #26
 800ca3c:	47b0      	blx	r6
 800ca3e:	1c43      	adds	r3, r0, #1
 800ca40:	d0e6      	beq.n	800ca10 <_printf_common+0xa8>
 800ca42:	3701      	adds	r7, #1
 800ca44:	e7d1      	b.n	800c9ea <_printf_common+0x82>
	...

0800ca48 <_printf_i>:
 800ca48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca4a:	b08b      	sub	sp, #44	; 0x2c
 800ca4c:	9206      	str	r2, [sp, #24]
 800ca4e:	000a      	movs	r2, r1
 800ca50:	3243      	adds	r2, #67	; 0x43
 800ca52:	9307      	str	r3, [sp, #28]
 800ca54:	9005      	str	r0, [sp, #20]
 800ca56:	9204      	str	r2, [sp, #16]
 800ca58:	7e0a      	ldrb	r2, [r1, #24]
 800ca5a:	000c      	movs	r4, r1
 800ca5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca5e:	2a78      	cmp	r2, #120	; 0x78
 800ca60:	d807      	bhi.n	800ca72 <_printf_i+0x2a>
 800ca62:	2a62      	cmp	r2, #98	; 0x62
 800ca64:	d809      	bhi.n	800ca7a <_printf_i+0x32>
 800ca66:	2a00      	cmp	r2, #0
 800ca68:	d100      	bne.n	800ca6c <_printf_i+0x24>
 800ca6a:	e0c1      	b.n	800cbf0 <_printf_i+0x1a8>
 800ca6c:	2a58      	cmp	r2, #88	; 0x58
 800ca6e:	d100      	bne.n	800ca72 <_printf_i+0x2a>
 800ca70:	e08c      	b.n	800cb8c <_printf_i+0x144>
 800ca72:	0026      	movs	r6, r4
 800ca74:	3642      	adds	r6, #66	; 0x42
 800ca76:	7032      	strb	r2, [r6, #0]
 800ca78:	e022      	b.n	800cac0 <_printf_i+0x78>
 800ca7a:	0010      	movs	r0, r2
 800ca7c:	3863      	subs	r0, #99	; 0x63
 800ca7e:	2815      	cmp	r0, #21
 800ca80:	d8f7      	bhi.n	800ca72 <_printf_i+0x2a>
 800ca82:	f7f3 fb5d 	bl	8000140 <__gnu_thumb1_case_shi>
 800ca86:	0016      	.short	0x0016
 800ca88:	fff6001f 	.word	0xfff6001f
 800ca8c:	fff6fff6 	.word	0xfff6fff6
 800ca90:	001ffff6 	.word	0x001ffff6
 800ca94:	fff6fff6 	.word	0xfff6fff6
 800ca98:	fff6fff6 	.word	0xfff6fff6
 800ca9c:	003600a8 	.word	0x003600a8
 800caa0:	fff6009a 	.word	0xfff6009a
 800caa4:	00b9fff6 	.word	0x00b9fff6
 800caa8:	0036fff6 	.word	0x0036fff6
 800caac:	fff6fff6 	.word	0xfff6fff6
 800cab0:	009e      	.short	0x009e
 800cab2:	0026      	movs	r6, r4
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	3642      	adds	r6, #66	; 0x42
 800cab8:	1d11      	adds	r1, r2, #4
 800caba:	6019      	str	r1, [r3, #0]
 800cabc:	6813      	ldr	r3, [r2, #0]
 800cabe:	7033      	strb	r3, [r6, #0]
 800cac0:	2301      	movs	r3, #1
 800cac2:	e0a7      	b.n	800cc14 <_printf_i+0x1cc>
 800cac4:	6808      	ldr	r0, [r1, #0]
 800cac6:	6819      	ldr	r1, [r3, #0]
 800cac8:	1d0a      	adds	r2, r1, #4
 800caca:	0605      	lsls	r5, r0, #24
 800cacc:	d50b      	bpl.n	800cae6 <_printf_i+0x9e>
 800cace:	680d      	ldr	r5, [r1, #0]
 800cad0:	601a      	str	r2, [r3, #0]
 800cad2:	2d00      	cmp	r5, #0
 800cad4:	da03      	bge.n	800cade <_printf_i+0x96>
 800cad6:	232d      	movs	r3, #45	; 0x2d
 800cad8:	9a04      	ldr	r2, [sp, #16]
 800cada:	426d      	negs	r5, r5
 800cadc:	7013      	strb	r3, [r2, #0]
 800cade:	4b61      	ldr	r3, [pc, #388]	; (800cc64 <_printf_i+0x21c>)
 800cae0:	270a      	movs	r7, #10
 800cae2:	9303      	str	r3, [sp, #12]
 800cae4:	e01b      	b.n	800cb1e <_printf_i+0xd6>
 800cae6:	680d      	ldr	r5, [r1, #0]
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	0641      	lsls	r1, r0, #25
 800caec:	d5f1      	bpl.n	800cad2 <_printf_i+0x8a>
 800caee:	b22d      	sxth	r5, r5
 800caf0:	e7ef      	b.n	800cad2 <_printf_i+0x8a>
 800caf2:	680d      	ldr	r5, [r1, #0]
 800caf4:	6819      	ldr	r1, [r3, #0]
 800caf6:	1d08      	adds	r0, r1, #4
 800caf8:	6018      	str	r0, [r3, #0]
 800cafa:	062e      	lsls	r6, r5, #24
 800cafc:	d501      	bpl.n	800cb02 <_printf_i+0xba>
 800cafe:	680d      	ldr	r5, [r1, #0]
 800cb00:	e003      	b.n	800cb0a <_printf_i+0xc2>
 800cb02:	066d      	lsls	r5, r5, #25
 800cb04:	d5fb      	bpl.n	800cafe <_printf_i+0xb6>
 800cb06:	680d      	ldr	r5, [r1, #0]
 800cb08:	b2ad      	uxth	r5, r5
 800cb0a:	4b56      	ldr	r3, [pc, #344]	; (800cc64 <_printf_i+0x21c>)
 800cb0c:	2708      	movs	r7, #8
 800cb0e:	9303      	str	r3, [sp, #12]
 800cb10:	2a6f      	cmp	r2, #111	; 0x6f
 800cb12:	d000      	beq.n	800cb16 <_printf_i+0xce>
 800cb14:	3702      	adds	r7, #2
 800cb16:	0023      	movs	r3, r4
 800cb18:	2200      	movs	r2, #0
 800cb1a:	3343      	adds	r3, #67	; 0x43
 800cb1c:	701a      	strb	r2, [r3, #0]
 800cb1e:	6863      	ldr	r3, [r4, #4]
 800cb20:	60a3      	str	r3, [r4, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	db03      	blt.n	800cb2e <_printf_i+0xe6>
 800cb26:	2204      	movs	r2, #4
 800cb28:	6821      	ldr	r1, [r4, #0]
 800cb2a:	4391      	bics	r1, r2
 800cb2c:	6021      	str	r1, [r4, #0]
 800cb2e:	2d00      	cmp	r5, #0
 800cb30:	d102      	bne.n	800cb38 <_printf_i+0xf0>
 800cb32:	9e04      	ldr	r6, [sp, #16]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00c      	beq.n	800cb52 <_printf_i+0x10a>
 800cb38:	9e04      	ldr	r6, [sp, #16]
 800cb3a:	0028      	movs	r0, r5
 800cb3c:	0039      	movs	r1, r7
 800cb3e:	f7f3 fb8f 	bl	8000260 <__aeabi_uidivmod>
 800cb42:	9b03      	ldr	r3, [sp, #12]
 800cb44:	3e01      	subs	r6, #1
 800cb46:	5c5b      	ldrb	r3, [r3, r1]
 800cb48:	7033      	strb	r3, [r6, #0]
 800cb4a:	002b      	movs	r3, r5
 800cb4c:	0005      	movs	r5, r0
 800cb4e:	429f      	cmp	r7, r3
 800cb50:	d9f3      	bls.n	800cb3a <_printf_i+0xf2>
 800cb52:	2f08      	cmp	r7, #8
 800cb54:	d109      	bne.n	800cb6a <_printf_i+0x122>
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	07db      	lsls	r3, r3, #31
 800cb5a:	d506      	bpl.n	800cb6a <_printf_i+0x122>
 800cb5c:	6863      	ldr	r3, [r4, #4]
 800cb5e:	6922      	ldr	r2, [r4, #16]
 800cb60:	4293      	cmp	r3, r2
 800cb62:	dc02      	bgt.n	800cb6a <_printf_i+0x122>
 800cb64:	2330      	movs	r3, #48	; 0x30
 800cb66:	3e01      	subs	r6, #1
 800cb68:	7033      	strb	r3, [r6, #0]
 800cb6a:	9b04      	ldr	r3, [sp, #16]
 800cb6c:	1b9b      	subs	r3, r3, r6
 800cb6e:	6123      	str	r3, [r4, #16]
 800cb70:	9b07      	ldr	r3, [sp, #28]
 800cb72:	0021      	movs	r1, r4
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	9805      	ldr	r0, [sp, #20]
 800cb78:	9b06      	ldr	r3, [sp, #24]
 800cb7a:	aa09      	add	r2, sp, #36	; 0x24
 800cb7c:	f7ff fef4 	bl	800c968 <_printf_common>
 800cb80:	1c43      	adds	r3, r0, #1
 800cb82:	d14c      	bne.n	800cc1e <_printf_i+0x1d6>
 800cb84:	2001      	movs	r0, #1
 800cb86:	4240      	negs	r0, r0
 800cb88:	b00b      	add	sp, #44	; 0x2c
 800cb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb8c:	3145      	adds	r1, #69	; 0x45
 800cb8e:	700a      	strb	r2, [r1, #0]
 800cb90:	4a34      	ldr	r2, [pc, #208]	; (800cc64 <_printf_i+0x21c>)
 800cb92:	9203      	str	r2, [sp, #12]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	6821      	ldr	r1, [r4, #0]
 800cb98:	ca20      	ldmia	r2!, {r5}
 800cb9a:	601a      	str	r2, [r3, #0]
 800cb9c:	0608      	lsls	r0, r1, #24
 800cb9e:	d516      	bpl.n	800cbce <_printf_i+0x186>
 800cba0:	07cb      	lsls	r3, r1, #31
 800cba2:	d502      	bpl.n	800cbaa <_printf_i+0x162>
 800cba4:	2320      	movs	r3, #32
 800cba6:	4319      	orrs	r1, r3
 800cba8:	6021      	str	r1, [r4, #0]
 800cbaa:	2710      	movs	r7, #16
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	d1b2      	bne.n	800cb16 <_printf_i+0xce>
 800cbb0:	2320      	movs	r3, #32
 800cbb2:	6822      	ldr	r2, [r4, #0]
 800cbb4:	439a      	bics	r2, r3
 800cbb6:	6022      	str	r2, [r4, #0]
 800cbb8:	e7ad      	b.n	800cb16 <_printf_i+0xce>
 800cbba:	2220      	movs	r2, #32
 800cbbc:	6809      	ldr	r1, [r1, #0]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	6022      	str	r2, [r4, #0]
 800cbc2:	0022      	movs	r2, r4
 800cbc4:	2178      	movs	r1, #120	; 0x78
 800cbc6:	3245      	adds	r2, #69	; 0x45
 800cbc8:	7011      	strb	r1, [r2, #0]
 800cbca:	4a27      	ldr	r2, [pc, #156]	; (800cc68 <_printf_i+0x220>)
 800cbcc:	e7e1      	b.n	800cb92 <_printf_i+0x14a>
 800cbce:	0648      	lsls	r0, r1, #25
 800cbd0:	d5e6      	bpl.n	800cba0 <_printf_i+0x158>
 800cbd2:	b2ad      	uxth	r5, r5
 800cbd4:	e7e4      	b.n	800cba0 <_printf_i+0x158>
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	680d      	ldr	r5, [r1, #0]
 800cbda:	1d10      	adds	r0, r2, #4
 800cbdc:	6949      	ldr	r1, [r1, #20]
 800cbde:	6018      	str	r0, [r3, #0]
 800cbe0:	6813      	ldr	r3, [r2, #0]
 800cbe2:	062e      	lsls	r6, r5, #24
 800cbe4:	d501      	bpl.n	800cbea <_printf_i+0x1a2>
 800cbe6:	6019      	str	r1, [r3, #0]
 800cbe8:	e002      	b.n	800cbf0 <_printf_i+0x1a8>
 800cbea:	066d      	lsls	r5, r5, #25
 800cbec:	d5fb      	bpl.n	800cbe6 <_printf_i+0x19e>
 800cbee:	8019      	strh	r1, [r3, #0]
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	9e04      	ldr	r6, [sp, #16]
 800cbf4:	6123      	str	r3, [r4, #16]
 800cbf6:	e7bb      	b.n	800cb70 <_printf_i+0x128>
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	1d11      	adds	r1, r2, #4
 800cbfc:	6019      	str	r1, [r3, #0]
 800cbfe:	6816      	ldr	r6, [r2, #0]
 800cc00:	2100      	movs	r1, #0
 800cc02:	0030      	movs	r0, r6
 800cc04:	6862      	ldr	r2, [r4, #4]
 800cc06:	f001 f84d 	bl	800dca4 <memchr>
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	d001      	beq.n	800cc12 <_printf_i+0x1ca>
 800cc0e:	1b80      	subs	r0, r0, r6
 800cc10:	6060      	str	r0, [r4, #4]
 800cc12:	6863      	ldr	r3, [r4, #4]
 800cc14:	6123      	str	r3, [r4, #16]
 800cc16:	2300      	movs	r3, #0
 800cc18:	9a04      	ldr	r2, [sp, #16]
 800cc1a:	7013      	strb	r3, [r2, #0]
 800cc1c:	e7a8      	b.n	800cb70 <_printf_i+0x128>
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	0032      	movs	r2, r6
 800cc22:	9906      	ldr	r1, [sp, #24]
 800cc24:	9805      	ldr	r0, [sp, #20]
 800cc26:	9d07      	ldr	r5, [sp, #28]
 800cc28:	47a8      	blx	r5
 800cc2a:	1c43      	adds	r3, r0, #1
 800cc2c:	d0aa      	beq.n	800cb84 <_printf_i+0x13c>
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	079b      	lsls	r3, r3, #30
 800cc32:	d415      	bmi.n	800cc60 <_printf_i+0x218>
 800cc34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc36:	68e0      	ldr	r0, [r4, #12]
 800cc38:	4298      	cmp	r0, r3
 800cc3a:	daa5      	bge.n	800cb88 <_printf_i+0x140>
 800cc3c:	0018      	movs	r0, r3
 800cc3e:	e7a3      	b.n	800cb88 <_printf_i+0x140>
 800cc40:	0022      	movs	r2, r4
 800cc42:	2301      	movs	r3, #1
 800cc44:	9906      	ldr	r1, [sp, #24]
 800cc46:	9805      	ldr	r0, [sp, #20]
 800cc48:	9e07      	ldr	r6, [sp, #28]
 800cc4a:	3219      	adds	r2, #25
 800cc4c:	47b0      	blx	r6
 800cc4e:	1c43      	adds	r3, r0, #1
 800cc50:	d098      	beq.n	800cb84 <_printf_i+0x13c>
 800cc52:	3501      	adds	r5, #1
 800cc54:	68e3      	ldr	r3, [r4, #12]
 800cc56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc58:	1a9b      	subs	r3, r3, r2
 800cc5a:	42ab      	cmp	r3, r5
 800cc5c:	dcf0      	bgt.n	800cc40 <_printf_i+0x1f8>
 800cc5e:	e7e9      	b.n	800cc34 <_printf_i+0x1ec>
 800cc60:	2500      	movs	r5, #0
 800cc62:	e7f7      	b.n	800cc54 <_printf_i+0x20c>
 800cc64:	0800fab6 	.word	0x0800fab6
 800cc68:	0800fac7 	.word	0x0800fac7

0800cc6c <_sbrk_r>:
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	b570      	push	{r4, r5, r6, lr}
 800cc70:	4d06      	ldr	r5, [pc, #24]	; (800cc8c <_sbrk_r+0x20>)
 800cc72:	0004      	movs	r4, r0
 800cc74:	0008      	movs	r0, r1
 800cc76:	602b      	str	r3, [r5, #0]
 800cc78:	f7f8 f9a8 	bl	8004fcc <_sbrk>
 800cc7c:	1c43      	adds	r3, r0, #1
 800cc7e:	d103      	bne.n	800cc88 <_sbrk_r+0x1c>
 800cc80:	682b      	ldr	r3, [r5, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d000      	beq.n	800cc88 <_sbrk_r+0x1c>
 800cc86:	6023      	str	r3, [r4, #0]
 800cc88:	bd70      	pop	{r4, r5, r6, pc}
 800cc8a:	46c0      	nop			; (mov r8, r8)
 800cc8c:	20001ec4 	.word	0x20001ec4

0800cc90 <sniprintf>:
 800cc90:	b40c      	push	{r2, r3}
 800cc92:	b530      	push	{r4, r5, lr}
 800cc94:	4b17      	ldr	r3, [pc, #92]	; (800ccf4 <sniprintf+0x64>)
 800cc96:	000c      	movs	r4, r1
 800cc98:	681d      	ldr	r5, [r3, #0]
 800cc9a:	b09d      	sub	sp, #116	; 0x74
 800cc9c:	2900      	cmp	r1, #0
 800cc9e:	da08      	bge.n	800ccb2 <sniprintf+0x22>
 800cca0:	238b      	movs	r3, #139	; 0x8b
 800cca2:	2001      	movs	r0, #1
 800cca4:	602b      	str	r3, [r5, #0]
 800cca6:	4240      	negs	r0, r0
 800cca8:	b01d      	add	sp, #116	; 0x74
 800ccaa:	bc30      	pop	{r4, r5}
 800ccac:	bc08      	pop	{r3}
 800ccae:	b002      	add	sp, #8
 800ccb0:	4718      	bx	r3
 800ccb2:	2382      	movs	r3, #130	; 0x82
 800ccb4:	466a      	mov	r2, sp
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	8293      	strh	r3, [r2, #20]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	9002      	str	r0, [sp, #8]
 800ccbe:	9006      	str	r0, [sp, #24]
 800ccc0:	4299      	cmp	r1, r3
 800ccc2:	d000      	beq.n	800ccc6 <sniprintf+0x36>
 800ccc4:	1e4b      	subs	r3, r1, #1
 800ccc6:	9304      	str	r3, [sp, #16]
 800ccc8:	9307      	str	r3, [sp, #28]
 800ccca:	2301      	movs	r3, #1
 800cccc:	466a      	mov	r2, sp
 800ccce:	425b      	negs	r3, r3
 800ccd0:	82d3      	strh	r3, [r2, #22]
 800ccd2:	0028      	movs	r0, r5
 800ccd4:	ab21      	add	r3, sp, #132	; 0x84
 800ccd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ccd8:	a902      	add	r1, sp, #8
 800ccda:	9301      	str	r3, [sp, #4]
 800ccdc:	f001 fc28 	bl	800e530 <_svfiprintf_r>
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	da01      	bge.n	800cce8 <sniprintf+0x58>
 800cce4:	238b      	movs	r3, #139	; 0x8b
 800cce6:	602b      	str	r3, [r5, #0]
 800cce8:	2c00      	cmp	r4, #0
 800ccea:	d0dd      	beq.n	800cca8 <sniprintf+0x18>
 800ccec:	2300      	movs	r3, #0
 800ccee:	9a02      	ldr	r2, [sp, #8]
 800ccf0:	7013      	strb	r3, [r2, #0]
 800ccf2:	e7d9      	b.n	800cca8 <sniprintf+0x18>
 800ccf4:	20000010 	.word	0x20000010

0800ccf8 <strtok>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	4b16      	ldr	r3, [pc, #88]	; (800cd54 <strtok+0x5c>)
 800ccfc:	0005      	movs	r5, r0
 800ccfe:	681f      	ldr	r7, [r3, #0]
 800cd00:	000e      	movs	r6, r1
 800cd02:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800cd04:	2c00      	cmp	r4, #0
 800cd06:	d11d      	bne.n	800cd44 <strtok+0x4c>
 800cd08:	2050      	movs	r0, #80	; 0x50
 800cd0a:	f7ff fa43 	bl	800c194 <malloc>
 800cd0e:	1e02      	subs	r2, r0, #0
 800cd10:	65b8      	str	r0, [r7, #88]	; 0x58
 800cd12:	d104      	bne.n	800cd1e <strtok+0x26>
 800cd14:	2157      	movs	r1, #87	; 0x57
 800cd16:	4b10      	ldr	r3, [pc, #64]	; (800cd58 <strtok+0x60>)
 800cd18:	4810      	ldr	r0, [pc, #64]	; (800cd5c <strtok+0x64>)
 800cd1a:	f000 f8eb 	bl	800cef4 <__assert_func>
 800cd1e:	6004      	str	r4, [r0, #0]
 800cd20:	6044      	str	r4, [r0, #4]
 800cd22:	6084      	str	r4, [r0, #8]
 800cd24:	60c4      	str	r4, [r0, #12]
 800cd26:	6104      	str	r4, [r0, #16]
 800cd28:	6144      	str	r4, [r0, #20]
 800cd2a:	6184      	str	r4, [r0, #24]
 800cd2c:	6284      	str	r4, [r0, #40]	; 0x28
 800cd2e:	62c4      	str	r4, [r0, #44]	; 0x2c
 800cd30:	6304      	str	r4, [r0, #48]	; 0x30
 800cd32:	6344      	str	r4, [r0, #52]	; 0x34
 800cd34:	6384      	str	r4, [r0, #56]	; 0x38
 800cd36:	63c4      	str	r4, [r0, #60]	; 0x3c
 800cd38:	6404      	str	r4, [r0, #64]	; 0x40
 800cd3a:	6444      	str	r4, [r0, #68]	; 0x44
 800cd3c:	6484      	str	r4, [r0, #72]	; 0x48
 800cd3e:	64c4      	str	r4, [r0, #76]	; 0x4c
 800cd40:	7704      	strb	r4, [r0, #28]
 800cd42:	6244      	str	r4, [r0, #36]	; 0x24
 800cd44:	0031      	movs	r1, r6
 800cd46:	0028      	movs	r0, r5
 800cd48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	f000 f808 	bl	800cd60 <__strtok_r>
 800cd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd52:	46c0      	nop			; (mov r8, r8)
 800cd54:	20000010 	.word	0x20000010
 800cd58:	0800fad8 	.word	0x0800fad8
 800cd5c:	0800faef 	.word	0x0800faef

0800cd60 <__strtok_r>:
 800cd60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd62:	2800      	cmp	r0, #0
 800cd64:	d102      	bne.n	800cd6c <__strtok_r+0xc>
 800cd66:	6810      	ldr	r0, [r2, #0]
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d013      	beq.n	800cd94 <__strtok_r+0x34>
 800cd6c:	0004      	movs	r4, r0
 800cd6e:	0020      	movs	r0, r4
 800cd70:	000e      	movs	r6, r1
 800cd72:	7805      	ldrb	r5, [r0, #0]
 800cd74:	3401      	adds	r4, #1
 800cd76:	7837      	ldrb	r7, [r6, #0]
 800cd78:	2f00      	cmp	r7, #0
 800cd7a:	d104      	bne.n	800cd86 <__strtok_r+0x26>
 800cd7c:	2d00      	cmp	r5, #0
 800cd7e:	d10f      	bne.n	800cda0 <__strtok_r+0x40>
 800cd80:	0028      	movs	r0, r5
 800cd82:	6015      	str	r5, [r2, #0]
 800cd84:	e006      	b.n	800cd94 <__strtok_r+0x34>
 800cd86:	3601      	adds	r6, #1
 800cd88:	42bd      	cmp	r5, r7
 800cd8a:	d1f4      	bne.n	800cd76 <__strtok_r+0x16>
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d1ee      	bne.n	800cd6e <__strtok_r+0xe>
 800cd90:	6014      	str	r4, [r2, #0]
 800cd92:	7003      	strb	r3, [r0, #0]
 800cd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd96:	002f      	movs	r7, r5
 800cd98:	e00f      	b.n	800cdba <__strtok_r+0x5a>
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	2e00      	cmp	r6, #0
 800cd9e:	d104      	bne.n	800cdaa <__strtok_r+0x4a>
 800cda0:	0023      	movs	r3, r4
 800cda2:	3401      	adds	r4, #1
 800cda4:	781d      	ldrb	r5, [r3, #0]
 800cda6:	0027      	movs	r7, r4
 800cda8:	000b      	movs	r3, r1
 800cdaa:	781e      	ldrb	r6, [r3, #0]
 800cdac:	42b5      	cmp	r5, r6
 800cdae:	d1f4      	bne.n	800cd9a <__strtok_r+0x3a>
 800cdb0:	2d00      	cmp	r5, #0
 800cdb2:	d0f0      	beq.n	800cd96 <__strtok_r+0x36>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	3c01      	subs	r4, #1
 800cdb8:	7023      	strb	r3, [r4, #0]
 800cdba:	6017      	str	r7, [r2, #0]
 800cdbc:	e7ea      	b.n	800cd94 <__strtok_r+0x34>
	...

0800cdc0 <_strtol_l.constprop.0>:
 800cdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdc2:	b087      	sub	sp, #28
 800cdc4:	001e      	movs	r6, r3
 800cdc6:	9005      	str	r0, [sp, #20]
 800cdc8:	9101      	str	r1, [sp, #4]
 800cdca:	9202      	str	r2, [sp, #8]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d045      	beq.n	800ce5c <_strtol_l.constprop.0+0x9c>
 800cdd0:	000b      	movs	r3, r1
 800cdd2:	2e24      	cmp	r6, #36	; 0x24
 800cdd4:	d842      	bhi.n	800ce5c <_strtol_l.constprop.0+0x9c>
 800cdd6:	4a3f      	ldr	r2, [pc, #252]	; (800ced4 <_strtol_l.constprop.0+0x114>)
 800cdd8:	2108      	movs	r1, #8
 800cdda:	4694      	mov	ip, r2
 800cddc:	001a      	movs	r2, r3
 800cdde:	4660      	mov	r0, ip
 800cde0:	7814      	ldrb	r4, [r2, #0]
 800cde2:	3301      	adds	r3, #1
 800cde4:	5d00      	ldrb	r0, [r0, r4]
 800cde6:	001d      	movs	r5, r3
 800cde8:	0007      	movs	r7, r0
 800cdea:	400f      	ands	r7, r1
 800cdec:	4208      	tst	r0, r1
 800cdee:	d1f5      	bne.n	800cddc <_strtol_l.constprop.0+0x1c>
 800cdf0:	2c2d      	cmp	r4, #45	; 0x2d
 800cdf2:	d13a      	bne.n	800ce6a <_strtol_l.constprop.0+0xaa>
 800cdf4:	2701      	movs	r7, #1
 800cdf6:	781c      	ldrb	r4, [r3, #0]
 800cdf8:	1c95      	adds	r5, r2, #2
 800cdfa:	2e00      	cmp	r6, #0
 800cdfc:	d065      	beq.n	800ceca <_strtol_l.constprop.0+0x10a>
 800cdfe:	2e10      	cmp	r6, #16
 800ce00:	d109      	bne.n	800ce16 <_strtol_l.constprop.0+0x56>
 800ce02:	2c30      	cmp	r4, #48	; 0x30
 800ce04:	d107      	bne.n	800ce16 <_strtol_l.constprop.0+0x56>
 800ce06:	2220      	movs	r2, #32
 800ce08:	782b      	ldrb	r3, [r5, #0]
 800ce0a:	4393      	bics	r3, r2
 800ce0c:	2b58      	cmp	r3, #88	; 0x58
 800ce0e:	d157      	bne.n	800cec0 <_strtol_l.constprop.0+0x100>
 800ce10:	2610      	movs	r6, #16
 800ce12:	786c      	ldrb	r4, [r5, #1]
 800ce14:	3502      	adds	r5, #2
 800ce16:	4b30      	ldr	r3, [pc, #192]	; (800ced8 <_strtol_l.constprop.0+0x118>)
 800ce18:	0031      	movs	r1, r6
 800ce1a:	18fb      	adds	r3, r7, r3
 800ce1c:	0018      	movs	r0, r3
 800ce1e:	9303      	str	r3, [sp, #12]
 800ce20:	f7f3 fa1e 	bl	8000260 <__aeabi_uidivmod>
 800ce24:	2300      	movs	r3, #0
 800ce26:	2201      	movs	r2, #1
 800ce28:	4684      	mov	ip, r0
 800ce2a:	0018      	movs	r0, r3
 800ce2c:	9104      	str	r1, [sp, #16]
 800ce2e:	4252      	negs	r2, r2
 800ce30:	0021      	movs	r1, r4
 800ce32:	3930      	subs	r1, #48	; 0x30
 800ce34:	2909      	cmp	r1, #9
 800ce36:	d81d      	bhi.n	800ce74 <_strtol_l.constprop.0+0xb4>
 800ce38:	000c      	movs	r4, r1
 800ce3a:	42a6      	cmp	r6, r4
 800ce3c:	dd28      	ble.n	800ce90 <_strtol_l.constprop.0+0xd0>
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	db24      	blt.n	800ce8c <_strtol_l.constprop.0+0xcc>
 800ce42:	0013      	movs	r3, r2
 800ce44:	4584      	cmp	ip, r0
 800ce46:	d306      	bcc.n	800ce56 <_strtol_l.constprop.0+0x96>
 800ce48:	d102      	bne.n	800ce50 <_strtol_l.constprop.0+0x90>
 800ce4a:	9904      	ldr	r1, [sp, #16]
 800ce4c:	42a1      	cmp	r1, r4
 800ce4e:	db02      	blt.n	800ce56 <_strtol_l.constprop.0+0x96>
 800ce50:	2301      	movs	r3, #1
 800ce52:	4370      	muls	r0, r6
 800ce54:	1820      	adds	r0, r4, r0
 800ce56:	782c      	ldrb	r4, [r5, #0]
 800ce58:	3501      	adds	r5, #1
 800ce5a:	e7e9      	b.n	800ce30 <_strtol_l.constprop.0+0x70>
 800ce5c:	f7ff f970 	bl	800c140 <__errno>
 800ce60:	2316      	movs	r3, #22
 800ce62:	6003      	str	r3, [r0, #0]
 800ce64:	2000      	movs	r0, #0
 800ce66:	b007      	add	sp, #28
 800ce68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce6a:	2c2b      	cmp	r4, #43	; 0x2b
 800ce6c:	d1c5      	bne.n	800cdfa <_strtol_l.constprop.0+0x3a>
 800ce6e:	781c      	ldrb	r4, [r3, #0]
 800ce70:	1c95      	adds	r5, r2, #2
 800ce72:	e7c2      	b.n	800cdfa <_strtol_l.constprop.0+0x3a>
 800ce74:	0021      	movs	r1, r4
 800ce76:	3941      	subs	r1, #65	; 0x41
 800ce78:	2919      	cmp	r1, #25
 800ce7a:	d801      	bhi.n	800ce80 <_strtol_l.constprop.0+0xc0>
 800ce7c:	3c37      	subs	r4, #55	; 0x37
 800ce7e:	e7dc      	b.n	800ce3a <_strtol_l.constprop.0+0x7a>
 800ce80:	0021      	movs	r1, r4
 800ce82:	3961      	subs	r1, #97	; 0x61
 800ce84:	2919      	cmp	r1, #25
 800ce86:	d803      	bhi.n	800ce90 <_strtol_l.constprop.0+0xd0>
 800ce88:	3c57      	subs	r4, #87	; 0x57
 800ce8a:	e7d6      	b.n	800ce3a <_strtol_l.constprop.0+0x7a>
 800ce8c:	0013      	movs	r3, r2
 800ce8e:	e7e2      	b.n	800ce56 <_strtol_l.constprop.0+0x96>
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	da09      	bge.n	800cea8 <_strtol_l.constprop.0+0xe8>
 800ce94:	2322      	movs	r3, #34	; 0x22
 800ce96:	9a05      	ldr	r2, [sp, #20]
 800ce98:	9803      	ldr	r0, [sp, #12]
 800ce9a:	6013      	str	r3, [r2, #0]
 800ce9c:	9b02      	ldr	r3, [sp, #8]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d0e1      	beq.n	800ce66 <_strtol_l.constprop.0+0xa6>
 800cea2:	1e6b      	subs	r3, r5, #1
 800cea4:	9301      	str	r3, [sp, #4]
 800cea6:	e007      	b.n	800ceb8 <_strtol_l.constprop.0+0xf8>
 800cea8:	2f00      	cmp	r7, #0
 800ceaa:	d000      	beq.n	800ceae <_strtol_l.constprop.0+0xee>
 800ceac:	4240      	negs	r0, r0
 800ceae:	9a02      	ldr	r2, [sp, #8]
 800ceb0:	2a00      	cmp	r2, #0
 800ceb2:	d0d8      	beq.n	800ce66 <_strtol_l.constprop.0+0xa6>
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1f4      	bne.n	800cea2 <_strtol_l.constprop.0+0xe2>
 800ceb8:	9b02      	ldr	r3, [sp, #8]
 800ceba:	9a01      	ldr	r2, [sp, #4]
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	e7d2      	b.n	800ce66 <_strtol_l.constprop.0+0xa6>
 800cec0:	2430      	movs	r4, #48	; 0x30
 800cec2:	2e00      	cmp	r6, #0
 800cec4:	d1a7      	bne.n	800ce16 <_strtol_l.constprop.0+0x56>
 800cec6:	3608      	adds	r6, #8
 800cec8:	e7a5      	b.n	800ce16 <_strtol_l.constprop.0+0x56>
 800ceca:	2c30      	cmp	r4, #48	; 0x30
 800cecc:	d09b      	beq.n	800ce06 <_strtol_l.constprop.0+0x46>
 800cece:	260a      	movs	r6, #10
 800ced0:	e7a1      	b.n	800ce16 <_strtol_l.constprop.0+0x56>
 800ced2:	46c0      	nop			; (mov r8, r8)
 800ced4:	0800fb89 	.word	0x0800fb89
 800ced8:	7fffffff 	.word	0x7fffffff

0800cedc <strtol>:
 800cedc:	b510      	push	{r4, lr}
 800cede:	0013      	movs	r3, r2
 800cee0:	000a      	movs	r2, r1
 800cee2:	0001      	movs	r1, r0
 800cee4:	4802      	ldr	r0, [pc, #8]	; (800cef0 <strtol+0x14>)
 800cee6:	6800      	ldr	r0, [r0, #0]
 800cee8:	f7ff ff6a 	bl	800cdc0 <_strtol_l.constprop.0>
 800ceec:	bd10      	pop	{r4, pc}
 800ceee:	46c0      	nop			; (mov r8, r8)
 800cef0:	20000010 	.word	0x20000010

0800cef4 <__assert_func>:
 800cef4:	b530      	push	{r4, r5, lr}
 800cef6:	0014      	movs	r4, r2
 800cef8:	001a      	movs	r2, r3
 800cefa:	4b09      	ldr	r3, [pc, #36]	; (800cf20 <__assert_func+0x2c>)
 800cefc:	0005      	movs	r5, r0
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	b085      	sub	sp, #20
 800cf02:	68d8      	ldr	r0, [r3, #12]
 800cf04:	4b07      	ldr	r3, [pc, #28]	; (800cf24 <__assert_func+0x30>)
 800cf06:	2c00      	cmp	r4, #0
 800cf08:	d101      	bne.n	800cf0e <__assert_func+0x1a>
 800cf0a:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <__assert_func+0x34>)
 800cf0c:	001c      	movs	r4, r3
 800cf0e:	9301      	str	r3, [sp, #4]
 800cf10:	9100      	str	r1, [sp, #0]
 800cf12:	002b      	movs	r3, r5
 800cf14:	4905      	ldr	r1, [pc, #20]	; (800cf2c <__assert_func+0x38>)
 800cf16:	9402      	str	r4, [sp, #8]
 800cf18:	f000 feb0 	bl	800dc7c <fiprintf>
 800cf1c:	f001 fe38 	bl	800eb90 <abort>
 800cf20:	20000010 	.word	0x20000010
 800cf24:	0800fb4c 	.word	0x0800fb4c
 800cf28:	0800fb87 	.word	0x0800fb87
 800cf2c:	0800fb59 	.word	0x0800fb59

0800cf30 <quorem>:
 800cf30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf32:	0006      	movs	r6, r0
 800cf34:	690b      	ldr	r3, [r1, #16]
 800cf36:	6932      	ldr	r2, [r6, #16]
 800cf38:	b087      	sub	sp, #28
 800cf3a:	2000      	movs	r0, #0
 800cf3c:	9103      	str	r1, [sp, #12]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	db65      	blt.n	800d00e <quorem+0xde>
 800cf42:	3b01      	subs	r3, #1
 800cf44:	009c      	lsls	r4, r3, #2
 800cf46:	9300      	str	r3, [sp, #0]
 800cf48:	000b      	movs	r3, r1
 800cf4a:	3314      	adds	r3, #20
 800cf4c:	9305      	str	r3, [sp, #20]
 800cf4e:	191b      	adds	r3, r3, r4
 800cf50:	9304      	str	r3, [sp, #16]
 800cf52:	0033      	movs	r3, r6
 800cf54:	3314      	adds	r3, #20
 800cf56:	9302      	str	r3, [sp, #8]
 800cf58:	191c      	adds	r4, r3, r4
 800cf5a:	9b04      	ldr	r3, [sp, #16]
 800cf5c:	6827      	ldr	r7, [r4, #0]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	0038      	movs	r0, r7
 800cf62:	1c5d      	adds	r5, r3, #1
 800cf64:	0029      	movs	r1, r5
 800cf66:	9301      	str	r3, [sp, #4]
 800cf68:	f7f3 f8f4 	bl	8000154 <__udivsi3>
 800cf6c:	9001      	str	r0, [sp, #4]
 800cf6e:	42af      	cmp	r7, r5
 800cf70:	d324      	bcc.n	800cfbc <quorem+0x8c>
 800cf72:	2500      	movs	r5, #0
 800cf74:	46ac      	mov	ip, r5
 800cf76:	9802      	ldr	r0, [sp, #8]
 800cf78:	9f05      	ldr	r7, [sp, #20]
 800cf7a:	cf08      	ldmia	r7!, {r3}
 800cf7c:	9a01      	ldr	r2, [sp, #4]
 800cf7e:	b299      	uxth	r1, r3
 800cf80:	4351      	muls	r1, r2
 800cf82:	0c1b      	lsrs	r3, r3, #16
 800cf84:	4353      	muls	r3, r2
 800cf86:	1949      	adds	r1, r1, r5
 800cf88:	0c0a      	lsrs	r2, r1, #16
 800cf8a:	189b      	adds	r3, r3, r2
 800cf8c:	6802      	ldr	r2, [r0, #0]
 800cf8e:	b289      	uxth	r1, r1
 800cf90:	b292      	uxth	r2, r2
 800cf92:	4462      	add	r2, ip
 800cf94:	1a52      	subs	r2, r2, r1
 800cf96:	6801      	ldr	r1, [r0, #0]
 800cf98:	0c1d      	lsrs	r5, r3, #16
 800cf9a:	0c09      	lsrs	r1, r1, #16
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	1acb      	subs	r3, r1, r3
 800cfa0:	1411      	asrs	r1, r2, #16
 800cfa2:	185b      	adds	r3, r3, r1
 800cfa4:	1419      	asrs	r1, r3, #16
 800cfa6:	b292      	uxth	r2, r2
 800cfa8:	041b      	lsls	r3, r3, #16
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	9b04      	ldr	r3, [sp, #16]
 800cfae:	468c      	mov	ip, r1
 800cfb0:	c004      	stmia	r0!, {r2}
 800cfb2:	42bb      	cmp	r3, r7
 800cfb4:	d2e1      	bcs.n	800cf7a <quorem+0x4a>
 800cfb6:	6823      	ldr	r3, [r4, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d030      	beq.n	800d01e <quorem+0xee>
 800cfbc:	0030      	movs	r0, r6
 800cfbe:	9903      	ldr	r1, [sp, #12]
 800cfc0:	f001 f910 	bl	800e1e4 <__mcmp>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	db21      	blt.n	800d00c <quorem+0xdc>
 800cfc8:	0030      	movs	r0, r6
 800cfca:	2400      	movs	r4, #0
 800cfcc:	9b01      	ldr	r3, [sp, #4]
 800cfce:	9903      	ldr	r1, [sp, #12]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	9301      	str	r3, [sp, #4]
 800cfd4:	3014      	adds	r0, #20
 800cfd6:	3114      	adds	r1, #20
 800cfd8:	6803      	ldr	r3, [r0, #0]
 800cfda:	c920      	ldmia	r1!, {r5}
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	1914      	adds	r4, r2, r4
 800cfe0:	b2aa      	uxth	r2, r5
 800cfe2:	1aa2      	subs	r2, r4, r2
 800cfe4:	0c1b      	lsrs	r3, r3, #16
 800cfe6:	0c2d      	lsrs	r5, r5, #16
 800cfe8:	1414      	asrs	r4, r2, #16
 800cfea:	1b5b      	subs	r3, r3, r5
 800cfec:	191b      	adds	r3, r3, r4
 800cfee:	141c      	asrs	r4, r3, #16
 800cff0:	b292      	uxth	r2, r2
 800cff2:	041b      	lsls	r3, r3, #16
 800cff4:	4313      	orrs	r3, r2
 800cff6:	c008      	stmia	r0!, {r3}
 800cff8:	9b04      	ldr	r3, [sp, #16]
 800cffa:	428b      	cmp	r3, r1
 800cffc:	d2ec      	bcs.n	800cfd8 <quorem+0xa8>
 800cffe:	9b00      	ldr	r3, [sp, #0]
 800d000:	9a02      	ldr	r2, [sp, #8]
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	18d3      	adds	r3, r2, r3
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	2a00      	cmp	r2, #0
 800d00a:	d015      	beq.n	800d038 <quorem+0x108>
 800d00c:	9801      	ldr	r0, [sp, #4]
 800d00e:	b007      	add	sp, #28
 800d010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d012:	6823      	ldr	r3, [r4, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d106      	bne.n	800d026 <quorem+0xf6>
 800d018:	9b00      	ldr	r3, [sp, #0]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	9b02      	ldr	r3, [sp, #8]
 800d020:	3c04      	subs	r4, #4
 800d022:	42a3      	cmp	r3, r4
 800d024:	d3f5      	bcc.n	800d012 <quorem+0xe2>
 800d026:	9b00      	ldr	r3, [sp, #0]
 800d028:	6133      	str	r3, [r6, #16]
 800d02a:	e7c7      	b.n	800cfbc <quorem+0x8c>
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	2a00      	cmp	r2, #0
 800d030:	d106      	bne.n	800d040 <quorem+0x110>
 800d032:	9a00      	ldr	r2, [sp, #0]
 800d034:	3a01      	subs	r2, #1
 800d036:	9200      	str	r2, [sp, #0]
 800d038:	9a02      	ldr	r2, [sp, #8]
 800d03a:	3b04      	subs	r3, #4
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d3f5      	bcc.n	800d02c <quorem+0xfc>
 800d040:	9b00      	ldr	r3, [sp, #0]
 800d042:	6133      	str	r3, [r6, #16]
 800d044:	e7e2      	b.n	800d00c <quorem+0xdc>
	...

0800d048 <_dtoa_r>:
 800d048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d04a:	b09d      	sub	sp, #116	; 0x74
 800d04c:	9202      	str	r2, [sp, #8]
 800d04e:	9303      	str	r3, [sp, #12]
 800d050:	9b02      	ldr	r3, [sp, #8]
 800d052:	9c03      	ldr	r4, [sp, #12]
 800d054:	9308      	str	r3, [sp, #32]
 800d056:	9409      	str	r4, [sp, #36]	; 0x24
 800d058:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d05a:	0007      	movs	r7, r0
 800d05c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800d05e:	2c00      	cmp	r4, #0
 800d060:	d10e      	bne.n	800d080 <_dtoa_r+0x38>
 800d062:	2010      	movs	r0, #16
 800d064:	f7ff f896 	bl	800c194 <malloc>
 800d068:	1e02      	subs	r2, r0, #0
 800d06a:	6278      	str	r0, [r7, #36]	; 0x24
 800d06c:	d104      	bne.n	800d078 <_dtoa_r+0x30>
 800d06e:	21ea      	movs	r1, #234	; 0xea
 800d070:	4bc7      	ldr	r3, [pc, #796]	; (800d390 <_dtoa_r+0x348>)
 800d072:	48c8      	ldr	r0, [pc, #800]	; (800d394 <_dtoa_r+0x34c>)
 800d074:	f7ff ff3e 	bl	800cef4 <__assert_func>
 800d078:	6044      	str	r4, [r0, #4]
 800d07a:	6084      	str	r4, [r0, #8]
 800d07c:	6004      	str	r4, [r0, #0]
 800d07e:	60c4      	str	r4, [r0, #12]
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	6819      	ldr	r1, [r3, #0]
 800d084:	2900      	cmp	r1, #0
 800d086:	d00a      	beq.n	800d09e <_dtoa_r+0x56>
 800d088:	685a      	ldr	r2, [r3, #4]
 800d08a:	2301      	movs	r3, #1
 800d08c:	4093      	lsls	r3, r2
 800d08e:	604a      	str	r2, [r1, #4]
 800d090:	608b      	str	r3, [r1, #8]
 800d092:	0038      	movs	r0, r7
 800d094:	f000 fe66 	bl	800dd64 <_Bfree>
 800d098:	2200      	movs	r2, #0
 800d09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	9b03      	ldr	r3, [sp, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	da20      	bge.n	800d0e6 <_dtoa_r+0x9e>
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	602b      	str	r3, [r5, #0]
 800d0a8:	9b03      	ldr	r3, [sp, #12]
 800d0aa:	005b      	lsls	r3, r3, #1
 800d0ac:	085b      	lsrs	r3, r3, #1
 800d0ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d0b2:	4bb9      	ldr	r3, [pc, #740]	; (800d398 <_dtoa_r+0x350>)
 800d0b4:	4ab8      	ldr	r2, [pc, #736]	; (800d398 <_dtoa_r+0x350>)
 800d0b6:	402b      	ands	r3, r5
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d117      	bne.n	800d0ec <_dtoa_r+0xa4>
 800d0bc:	4bb7      	ldr	r3, [pc, #732]	; (800d39c <_dtoa_r+0x354>)
 800d0be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d0c0:	0328      	lsls	r0, r5, #12
 800d0c2:	6013      	str	r3, [r2, #0]
 800d0c4:	9b02      	ldr	r3, [sp, #8]
 800d0c6:	0b00      	lsrs	r0, r0, #12
 800d0c8:	4318      	orrs	r0, r3
 800d0ca:	d101      	bne.n	800d0d0 <_dtoa_r+0x88>
 800d0cc:	f000 fdbf 	bl	800dc4e <_dtoa_r+0xc06>
 800d0d0:	48b3      	ldr	r0, [pc, #716]	; (800d3a0 <_dtoa_r+0x358>)
 800d0d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d0d4:	9006      	str	r0, [sp, #24]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d002      	beq.n	800d0e0 <_dtoa_r+0x98>
 800d0da:	4bb2      	ldr	r3, [pc, #712]	; (800d3a4 <_dtoa_r+0x35c>)
 800d0dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	9806      	ldr	r0, [sp, #24]
 800d0e2:	b01d      	add	sp, #116	; 0x74
 800d0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	602b      	str	r3, [r5, #0]
 800d0ea:	e7e1      	b.n	800d0b0 <_dtoa_r+0x68>
 800d0ec:	9b08      	ldr	r3, [sp, #32]
 800d0ee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d0f0:	9312      	str	r3, [sp, #72]	; 0x48
 800d0f2:	9413      	str	r4, [sp, #76]	; 0x4c
 800d0f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d0f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	f7f3 f9b0 	bl	8000460 <__aeabi_dcmpeq>
 800d100:	1e04      	subs	r4, r0, #0
 800d102:	d009      	beq.n	800d118 <_dtoa_r+0xd0>
 800d104:	2301      	movs	r3, #1
 800d106:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d108:	6013      	str	r3, [r2, #0]
 800d10a:	4ba7      	ldr	r3, [pc, #668]	; (800d3a8 <_dtoa_r+0x360>)
 800d10c:	9306      	str	r3, [sp, #24]
 800d10e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d110:	2b00      	cmp	r3, #0
 800d112:	d0e5      	beq.n	800d0e0 <_dtoa_r+0x98>
 800d114:	4ba5      	ldr	r3, [pc, #660]	; (800d3ac <_dtoa_r+0x364>)
 800d116:	e7e1      	b.n	800d0dc <_dtoa_r+0x94>
 800d118:	ab1a      	add	r3, sp, #104	; 0x68
 800d11a:	9301      	str	r3, [sp, #4]
 800d11c:	ab1b      	add	r3, sp, #108	; 0x6c
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	0038      	movs	r0, r7
 800d122:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d126:	f001 f911 	bl	800e34c <__d2b>
 800d12a:	006e      	lsls	r6, r5, #1
 800d12c:	9005      	str	r0, [sp, #20]
 800d12e:	0d76      	lsrs	r6, r6, #21
 800d130:	d100      	bne.n	800d134 <_dtoa_r+0xec>
 800d132:	e07c      	b.n	800d22e <_dtoa_r+0x1e6>
 800d134:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d136:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d138:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d13a:	4a9d      	ldr	r2, [pc, #628]	; (800d3b0 <_dtoa_r+0x368>)
 800d13c:	031b      	lsls	r3, r3, #12
 800d13e:	0b1b      	lsrs	r3, r3, #12
 800d140:	431a      	orrs	r2, r3
 800d142:	0011      	movs	r1, r2
 800d144:	4b9b      	ldr	r3, [pc, #620]	; (800d3b4 <_dtoa_r+0x36c>)
 800d146:	9418      	str	r4, [sp, #96]	; 0x60
 800d148:	18f6      	adds	r6, r6, r3
 800d14a:	2200      	movs	r2, #0
 800d14c:	4b9a      	ldr	r3, [pc, #616]	; (800d3b8 <_dtoa_r+0x370>)
 800d14e:	f7f5 fb4f 	bl	80027f0 <__aeabi_dsub>
 800d152:	4a9a      	ldr	r2, [pc, #616]	; (800d3bc <_dtoa_r+0x374>)
 800d154:	4b9a      	ldr	r3, [pc, #616]	; (800d3c0 <_dtoa_r+0x378>)
 800d156:	f7f5 f8df 	bl	8002318 <__aeabi_dmul>
 800d15a:	4a9a      	ldr	r2, [pc, #616]	; (800d3c4 <_dtoa_r+0x37c>)
 800d15c:	4b9a      	ldr	r3, [pc, #616]	; (800d3c8 <_dtoa_r+0x380>)
 800d15e:	f7f4 f99d 	bl	800149c <__aeabi_dadd>
 800d162:	0004      	movs	r4, r0
 800d164:	0030      	movs	r0, r6
 800d166:	000d      	movs	r5, r1
 800d168:	f7f5 ff28 	bl	8002fbc <__aeabi_i2d>
 800d16c:	4a97      	ldr	r2, [pc, #604]	; (800d3cc <_dtoa_r+0x384>)
 800d16e:	4b98      	ldr	r3, [pc, #608]	; (800d3d0 <_dtoa_r+0x388>)
 800d170:	f7f5 f8d2 	bl	8002318 <__aeabi_dmul>
 800d174:	0002      	movs	r2, r0
 800d176:	000b      	movs	r3, r1
 800d178:	0020      	movs	r0, r4
 800d17a:	0029      	movs	r1, r5
 800d17c:	f7f4 f98e 	bl	800149c <__aeabi_dadd>
 800d180:	0004      	movs	r4, r0
 800d182:	000d      	movs	r5, r1
 800d184:	f7f5 fee4 	bl	8002f50 <__aeabi_d2iz>
 800d188:	2200      	movs	r2, #0
 800d18a:	9002      	str	r0, [sp, #8]
 800d18c:	2300      	movs	r3, #0
 800d18e:	0020      	movs	r0, r4
 800d190:	0029      	movs	r1, r5
 800d192:	f7f3 f96b 	bl	800046c <__aeabi_dcmplt>
 800d196:	2800      	cmp	r0, #0
 800d198:	d00b      	beq.n	800d1b2 <_dtoa_r+0x16a>
 800d19a:	9802      	ldr	r0, [sp, #8]
 800d19c:	f7f5 ff0e 	bl	8002fbc <__aeabi_i2d>
 800d1a0:	002b      	movs	r3, r5
 800d1a2:	0022      	movs	r2, r4
 800d1a4:	f7f3 f95c 	bl	8000460 <__aeabi_dcmpeq>
 800d1a8:	4243      	negs	r3, r0
 800d1aa:	4158      	adcs	r0, r3
 800d1ac:	9b02      	ldr	r3, [sp, #8]
 800d1ae:	1a1b      	subs	r3, r3, r0
 800d1b0:	9302      	str	r3, [sp, #8]
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	9316      	str	r3, [sp, #88]	; 0x58
 800d1b6:	9b02      	ldr	r3, [sp, #8]
 800d1b8:	2b16      	cmp	r3, #22
 800d1ba:	d80f      	bhi.n	800d1dc <_dtoa_r+0x194>
 800d1bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d1be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d1c0:	00da      	lsls	r2, r3, #3
 800d1c2:	4b84      	ldr	r3, [pc, #528]	; (800d3d4 <_dtoa_r+0x38c>)
 800d1c4:	189b      	adds	r3, r3, r2
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	f7f3 f94f 	bl	800046c <__aeabi_dcmplt>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d049      	beq.n	800d266 <_dtoa_r+0x21e>
 800d1d2:	9b02      	ldr	r3, [sp, #8]
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	9302      	str	r3, [sp, #8]
 800d1d8:	2300      	movs	r3, #0
 800d1da:	9316      	str	r3, [sp, #88]	; 0x58
 800d1dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d1de:	1b9e      	subs	r6, r3, r6
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	930a      	str	r3, [sp, #40]	; 0x28
 800d1e4:	0033      	movs	r3, r6
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	930d      	str	r3, [sp, #52]	; 0x34
 800d1ea:	d504      	bpl.n	800d1f6 <_dtoa_r+0x1ae>
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	1b9b      	subs	r3, r3, r6
 800d1f0:	930a      	str	r3, [sp, #40]	; 0x28
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	930d      	str	r3, [sp, #52]	; 0x34
 800d1f6:	9b02      	ldr	r3, [sp, #8]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	db36      	blt.n	800d26a <_dtoa_r+0x222>
 800d1fc:	9a02      	ldr	r2, [sp, #8]
 800d1fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d200:	4694      	mov	ip, r2
 800d202:	4463      	add	r3, ip
 800d204:	930d      	str	r3, [sp, #52]	; 0x34
 800d206:	2300      	movs	r3, #0
 800d208:	9215      	str	r2, [sp, #84]	; 0x54
 800d20a:	930e      	str	r3, [sp, #56]	; 0x38
 800d20c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d20e:	2401      	movs	r4, #1
 800d210:	2b09      	cmp	r3, #9
 800d212:	d864      	bhi.n	800d2de <_dtoa_r+0x296>
 800d214:	2b05      	cmp	r3, #5
 800d216:	dd02      	ble.n	800d21e <_dtoa_r+0x1d6>
 800d218:	2400      	movs	r4, #0
 800d21a:	3b04      	subs	r3, #4
 800d21c:	9322      	str	r3, [sp, #136]	; 0x88
 800d21e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d220:	1e98      	subs	r0, r3, #2
 800d222:	2803      	cmp	r0, #3
 800d224:	d864      	bhi.n	800d2f0 <_dtoa_r+0x2a8>
 800d226:	f7f2 ff81 	bl	800012c <__gnu_thumb1_case_uqi>
 800d22a:	3829      	.short	0x3829
 800d22c:	5836      	.short	0x5836
 800d22e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d230:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d232:	189e      	adds	r6, r3, r2
 800d234:	4b68      	ldr	r3, [pc, #416]	; (800d3d8 <_dtoa_r+0x390>)
 800d236:	18f2      	adds	r2, r6, r3
 800d238:	2a20      	cmp	r2, #32
 800d23a:	dd0f      	ble.n	800d25c <_dtoa_r+0x214>
 800d23c:	2340      	movs	r3, #64	; 0x40
 800d23e:	1a9b      	subs	r3, r3, r2
 800d240:	409d      	lsls	r5, r3
 800d242:	4b66      	ldr	r3, [pc, #408]	; (800d3dc <_dtoa_r+0x394>)
 800d244:	9802      	ldr	r0, [sp, #8]
 800d246:	18f3      	adds	r3, r6, r3
 800d248:	40d8      	lsrs	r0, r3
 800d24a:	4328      	orrs	r0, r5
 800d24c:	f7f5 fee6 	bl	800301c <__aeabi_ui2d>
 800d250:	2301      	movs	r3, #1
 800d252:	4c63      	ldr	r4, [pc, #396]	; (800d3e0 <_dtoa_r+0x398>)
 800d254:	3e01      	subs	r6, #1
 800d256:	1909      	adds	r1, r1, r4
 800d258:	9318      	str	r3, [sp, #96]	; 0x60
 800d25a:	e776      	b.n	800d14a <_dtoa_r+0x102>
 800d25c:	2320      	movs	r3, #32
 800d25e:	9802      	ldr	r0, [sp, #8]
 800d260:	1a9b      	subs	r3, r3, r2
 800d262:	4098      	lsls	r0, r3
 800d264:	e7f2      	b.n	800d24c <_dtoa_r+0x204>
 800d266:	9016      	str	r0, [sp, #88]	; 0x58
 800d268:	e7b8      	b.n	800d1dc <_dtoa_r+0x194>
 800d26a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d26c:	9a02      	ldr	r2, [sp, #8]
 800d26e:	1a9b      	subs	r3, r3, r2
 800d270:	930a      	str	r3, [sp, #40]	; 0x28
 800d272:	4253      	negs	r3, r2
 800d274:	930e      	str	r3, [sp, #56]	; 0x38
 800d276:	2300      	movs	r3, #0
 800d278:	9315      	str	r3, [sp, #84]	; 0x54
 800d27a:	e7c7      	b.n	800d20c <_dtoa_r+0x1c4>
 800d27c:	2300      	movs	r3, #0
 800d27e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d280:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d282:	930c      	str	r3, [sp, #48]	; 0x30
 800d284:	9307      	str	r3, [sp, #28]
 800d286:	2b00      	cmp	r3, #0
 800d288:	dc13      	bgt.n	800d2b2 <_dtoa_r+0x26a>
 800d28a:	2301      	movs	r3, #1
 800d28c:	001a      	movs	r2, r3
 800d28e:	930c      	str	r3, [sp, #48]	; 0x30
 800d290:	9307      	str	r3, [sp, #28]
 800d292:	9223      	str	r2, [sp, #140]	; 0x8c
 800d294:	e00d      	b.n	800d2b2 <_dtoa_r+0x26a>
 800d296:	2301      	movs	r3, #1
 800d298:	e7f1      	b.n	800d27e <_dtoa_r+0x236>
 800d29a:	2300      	movs	r3, #0
 800d29c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d29e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2a0:	4694      	mov	ip, r2
 800d2a2:	9b02      	ldr	r3, [sp, #8]
 800d2a4:	4463      	add	r3, ip
 800d2a6:	930c      	str	r3, [sp, #48]	; 0x30
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	9307      	str	r3, [sp, #28]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	dc00      	bgt.n	800d2b2 <_dtoa_r+0x26a>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2b6:	6042      	str	r2, [r0, #4]
 800d2b8:	3204      	adds	r2, #4
 800d2ba:	0015      	movs	r5, r2
 800d2bc:	3514      	adds	r5, #20
 800d2be:	6841      	ldr	r1, [r0, #4]
 800d2c0:	429d      	cmp	r5, r3
 800d2c2:	d919      	bls.n	800d2f8 <_dtoa_r+0x2b0>
 800d2c4:	0038      	movs	r0, r7
 800d2c6:	f000 fd09 	bl	800dcdc <_Balloc>
 800d2ca:	9006      	str	r0, [sp, #24]
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d117      	bne.n	800d300 <_dtoa_r+0x2b8>
 800d2d0:	21d5      	movs	r1, #213	; 0xd5
 800d2d2:	0002      	movs	r2, r0
 800d2d4:	4b43      	ldr	r3, [pc, #268]	; (800d3e4 <_dtoa_r+0x39c>)
 800d2d6:	0049      	lsls	r1, r1, #1
 800d2d8:	e6cb      	b.n	800d072 <_dtoa_r+0x2a>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e7de      	b.n	800d29c <_dtoa_r+0x254>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	940f      	str	r4, [sp, #60]	; 0x3c
 800d2e2:	9322      	str	r3, [sp, #136]	; 0x88
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	930c      	str	r3, [sp, #48]	; 0x30
 800d2e8:	9307      	str	r3, [sp, #28]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	3313      	adds	r3, #19
 800d2ee:	e7d0      	b.n	800d292 <_dtoa_r+0x24a>
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2f4:	3b02      	subs	r3, #2
 800d2f6:	e7f6      	b.n	800d2e6 <_dtoa_r+0x29e>
 800d2f8:	3101      	adds	r1, #1
 800d2fa:	6041      	str	r1, [r0, #4]
 800d2fc:	0052      	lsls	r2, r2, #1
 800d2fe:	e7dc      	b.n	800d2ba <_dtoa_r+0x272>
 800d300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d302:	9a06      	ldr	r2, [sp, #24]
 800d304:	601a      	str	r2, [r3, #0]
 800d306:	9b07      	ldr	r3, [sp, #28]
 800d308:	2b0e      	cmp	r3, #14
 800d30a:	d900      	bls.n	800d30e <_dtoa_r+0x2c6>
 800d30c:	e0eb      	b.n	800d4e6 <_dtoa_r+0x49e>
 800d30e:	2c00      	cmp	r4, #0
 800d310:	d100      	bne.n	800d314 <_dtoa_r+0x2cc>
 800d312:	e0e8      	b.n	800d4e6 <_dtoa_r+0x49e>
 800d314:	9b02      	ldr	r3, [sp, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	dd68      	ble.n	800d3ec <_dtoa_r+0x3a4>
 800d31a:	001a      	movs	r2, r3
 800d31c:	210f      	movs	r1, #15
 800d31e:	4b2d      	ldr	r3, [pc, #180]	; (800d3d4 <_dtoa_r+0x38c>)
 800d320:	400a      	ands	r2, r1
 800d322:	00d2      	lsls	r2, r2, #3
 800d324:	189b      	adds	r3, r3, r2
 800d326:	681d      	ldr	r5, [r3, #0]
 800d328:	685e      	ldr	r6, [r3, #4]
 800d32a:	9b02      	ldr	r3, [sp, #8]
 800d32c:	111c      	asrs	r4, r3, #4
 800d32e:	2302      	movs	r3, #2
 800d330:	9310      	str	r3, [sp, #64]	; 0x40
 800d332:	9b02      	ldr	r3, [sp, #8]
 800d334:	05db      	lsls	r3, r3, #23
 800d336:	d50b      	bpl.n	800d350 <_dtoa_r+0x308>
 800d338:	4b2b      	ldr	r3, [pc, #172]	; (800d3e8 <_dtoa_r+0x3a0>)
 800d33a:	400c      	ands	r4, r1
 800d33c:	6a1a      	ldr	r2, [r3, #32]
 800d33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d340:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d342:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d344:	f7f4 fbe6 	bl	8001b14 <__aeabi_ddiv>
 800d348:	2303      	movs	r3, #3
 800d34a:	9008      	str	r0, [sp, #32]
 800d34c:	9109      	str	r1, [sp, #36]	; 0x24
 800d34e:	9310      	str	r3, [sp, #64]	; 0x40
 800d350:	4b25      	ldr	r3, [pc, #148]	; (800d3e8 <_dtoa_r+0x3a0>)
 800d352:	9314      	str	r3, [sp, #80]	; 0x50
 800d354:	2c00      	cmp	r4, #0
 800d356:	d108      	bne.n	800d36a <_dtoa_r+0x322>
 800d358:	9808      	ldr	r0, [sp, #32]
 800d35a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d35c:	002a      	movs	r2, r5
 800d35e:	0033      	movs	r3, r6
 800d360:	f7f4 fbd8 	bl	8001b14 <__aeabi_ddiv>
 800d364:	9008      	str	r0, [sp, #32]
 800d366:	9109      	str	r1, [sp, #36]	; 0x24
 800d368:	e05c      	b.n	800d424 <_dtoa_r+0x3dc>
 800d36a:	2301      	movs	r3, #1
 800d36c:	421c      	tst	r4, r3
 800d36e:	d00b      	beq.n	800d388 <_dtoa_r+0x340>
 800d370:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d372:	0028      	movs	r0, r5
 800d374:	3301      	adds	r3, #1
 800d376:	9310      	str	r3, [sp, #64]	; 0x40
 800d378:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d37a:	0031      	movs	r1, r6
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	f7f4 ffca 	bl	8002318 <__aeabi_dmul>
 800d384:	0005      	movs	r5, r0
 800d386:	000e      	movs	r6, r1
 800d388:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d38a:	1064      	asrs	r4, r4, #1
 800d38c:	3308      	adds	r3, #8
 800d38e:	e7e0      	b.n	800d352 <_dtoa_r+0x30a>
 800d390:	0800fad8 	.word	0x0800fad8
 800d394:	0800fc96 	.word	0x0800fc96
 800d398:	7ff00000 	.word	0x7ff00000
 800d39c:	0000270f 	.word	0x0000270f
 800d3a0:	0800fc92 	.word	0x0800fc92
 800d3a4:	0800fc95 	.word	0x0800fc95
 800d3a8:	0800fab4 	.word	0x0800fab4
 800d3ac:	0800fab5 	.word	0x0800fab5
 800d3b0:	3ff00000 	.word	0x3ff00000
 800d3b4:	fffffc01 	.word	0xfffffc01
 800d3b8:	3ff80000 	.word	0x3ff80000
 800d3bc:	636f4361 	.word	0x636f4361
 800d3c0:	3fd287a7 	.word	0x3fd287a7
 800d3c4:	8b60c8b3 	.word	0x8b60c8b3
 800d3c8:	3fc68a28 	.word	0x3fc68a28
 800d3cc:	509f79fb 	.word	0x509f79fb
 800d3d0:	3fd34413 	.word	0x3fd34413
 800d3d4:	0800fd88 	.word	0x0800fd88
 800d3d8:	00000432 	.word	0x00000432
 800d3dc:	00000412 	.word	0x00000412
 800d3e0:	fe100000 	.word	0xfe100000
 800d3e4:	0800fcf1 	.word	0x0800fcf1
 800d3e8:	0800fd60 	.word	0x0800fd60
 800d3ec:	2302      	movs	r3, #2
 800d3ee:	9310      	str	r3, [sp, #64]	; 0x40
 800d3f0:	9b02      	ldr	r3, [sp, #8]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d016      	beq.n	800d424 <_dtoa_r+0x3dc>
 800d3f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d3f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d3fa:	425c      	negs	r4, r3
 800d3fc:	230f      	movs	r3, #15
 800d3fe:	4ab6      	ldr	r2, [pc, #728]	; (800d6d8 <_dtoa_r+0x690>)
 800d400:	4023      	ands	r3, r4
 800d402:	00db      	lsls	r3, r3, #3
 800d404:	18d3      	adds	r3, r2, r3
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	f7f4 ff85 	bl	8002318 <__aeabi_dmul>
 800d40e:	2601      	movs	r6, #1
 800d410:	2300      	movs	r3, #0
 800d412:	9008      	str	r0, [sp, #32]
 800d414:	9109      	str	r1, [sp, #36]	; 0x24
 800d416:	4db1      	ldr	r5, [pc, #708]	; (800d6dc <_dtoa_r+0x694>)
 800d418:	1124      	asrs	r4, r4, #4
 800d41a:	2c00      	cmp	r4, #0
 800d41c:	d000      	beq.n	800d420 <_dtoa_r+0x3d8>
 800d41e:	e094      	b.n	800d54a <_dtoa_r+0x502>
 800d420:	2b00      	cmp	r3, #0
 800d422:	d19f      	bne.n	800d364 <_dtoa_r+0x31c>
 800d424:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d426:	2b00      	cmp	r3, #0
 800d428:	d100      	bne.n	800d42c <_dtoa_r+0x3e4>
 800d42a:	e09b      	b.n	800d564 <_dtoa_r+0x51c>
 800d42c:	9c08      	ldr	r4, [sp, #32]
 800d42e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d430:	2200      	movs	r2, #0
 800d432:	0020      	movs	r0, r4
 800d434:	0029      	movs	r1, r5
 800d436:	4baa      	ldr	r3, [pc, #680]	; (800d6e0 <_dtoa_r+0x698>)
 800d438:	f7f3 f818 	bl	800046c <__aeabi_dcmplt>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d100      	bne.n	800d442 <_dtoa_r+0x3fa>
 800d440:	e090      	b.n	800d564 <_dtoa_r+0x51c>
 800d442:	9b07      	ldr	r3, [sp, #28]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d100      	bne.n	800d44a <_dtoa_r+0x402>
 800d448:	e08c      	b.n	800d564 <_dtoa_r+0x51c>
 800d44a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	dd46      	ble.n	800d4de <_dtoa_r+0x496>
 800d450:	9b02      	ldr	r3, [sp, #8]
 800d452:	2200      	movs	r2, #0
 800d454:	0020      	movs	r0, r4
 800d456:	0029      	movs	r1, r5
 800d458:	1e5e      	subs	r6, r3, #1
 800d45a:	4ba2      	ldr	r3, [pc, #648]	; (800d6e4 <_dtoa_r+0x69c>)
 800d45c:	f7f4 ff5c 	bl	8002318 <__aeabi_dmul>
 800d460:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d462:	9008      	str	r0, [sp, #32]
 800d464:	9109      	str	r1, [sp, #36]	; 0x24
 800d466:	3301      	adds	r3, #1
 800d468:	9310      	str	r3, [sp, #64]	; 0x40
 800d46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d46c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d46e:	9c08      	ldr	r4, [sp, #32]
 800d470:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d472:	9314      	str	r3, [sp, #80]	; 0x50
 800d474:	f7f5 fda2 	bl	8002fbc <__aeabi_i2d>
 800d478:	0022      	movs	r2, r4
 800d47a:	002b      	movs	r3, r5
 800d47c:	f7f4 ff4c 	bl	8002318 <__aeabi_dmul>
 800d480:	2200      	movs	r2, #0
 800d482:	4b99      	ldr	r3, [pc, #612]	; (800d6e8 <_dtoa_r+0x6a0>)
 800d484:	f7f4 f80a 	bl	800149c <__aeabi_dadd>
 800d488:	9010      	str	r0, [sp, #64]	; 0x40
 800d48a:	9111      	str	r1, [sp, #68]	; 0x44
 800d48c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d48e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d490:	9208      	str	r2, [sp, #32]
 800d492:	9309      	str	r3, [sp, #36]	; 0x24
 800d494:	4a95      	ldr	r2, [pc, #596]	; (800d6ec <_dtoa_r+0x6a4>)
 800d496:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d498:	4694      	mov	ip, r2
 800d49a:	4463      	add	r3, ip
 800d49c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d49e:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d161      	bne.n	800d56a <_dtoa_r+0x522>
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	0020      	movs	r0, r4
 800d4aa:	0029      	movs	r1, r5
 800d4ac:	4b90      	ldr	r3, [pc, #576]	; (800d6f0 <_dtoa_r+0x6a8>)
 800d4ae:	f7f5 f99f 	bl	80027f0 <__aeabi_dsub>
 800d4b2:	9a08      	ldr	r2, [sp, #32]
 800d4b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4b6:	0004      	movs	r4, r0
 800d4b8:	000d      	movs	r5, r1
 800d4ba:	f7f2 ffeb 	bl	8000494 <__aeabi_dcmpgt>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d000      	beq.n	800d4c4 <_dtoa_r+0x47c>
 800d4c2:	e2af      	b.n	800da24 <_dtoa_r+0x9dc>
 800d4c4:	488b      	ldr	r0, [pc, #556]	; (800d6f4 <_dtoa_r+0x6ac>)
 800d4c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d4c8:	4684      	mov	ip, r0
 800d4ca:	4461      	add	r1, ip
 800d4cc:	000b      	movs	r3, r1
 800d4ce:	0020      	movs	r0, r4
 800d4d0:	0029      	movs	r1, r5
 800d4d2:	9a08      	ldr	r2, [sp, #32]
 800d4d4:	f7f2 ffca 	bl	800046c <__aeabi_dcmplt>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	d000      	beq.n	800d4de <_dtoa_r+0x496>
 800d4dc:	e29f      	b.n	800da1e <_dtoa_r+0x9d6>
 800d4de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d4e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800d4e2:	9308      	str	r3, [sp, #32]
 800d4e4:	9409      	str	r4, [sp, #36]	; 0x24
 800d4e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	da00      	bge.n	800d4ee <_dtoa_r+0x4a6>
 800d4ec:	e172      	b.n	800d7d4 <_dtoa_r+0x78c>
 800d4ee:	9a02      	ldr	r2, [sp, #8]
 800d4f0:	2a0e      	cmp	r2, #14
 800d4f2:	dd00      	ble.n	800d4f6 <_dtoa_r+0x4ae>
 800d4f4:	e16e      	b.n	800d7d4 <_dtoa_r+0x78c>
 800d4f6:	4b78      	ldr	r3, [pc, #480]	; (800d6d8 <_dtoa_r+0x690>)
 800d4f8:	00d2      	lsls	r2, r2, #3
 800d4fa:	189b      	adds	r3, r3, r2
 800d4fc:	685c      	ldr	r4, [r3, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	930a      	str	r3, [sp, #40]	; 0x28
 800d502:	940b      	str	r4, [sp, #44]	; 0x2c
 800d504:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d506:	2b00      	cmp	r3, #0
 800d508:	db00      	blt.n	800d50c <_dtoa_r+0x4c4>
 800d50a:	e0f7      	b.n	800d6fc <_dtoa_r+0x6b4>
 800d50c:	9b07      	ldr	r3, [sp, #28]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	dd00      	ble.n	800d514 <_dtoa_r+0x4cc>
 800d512:	e0f3      	b.n	800d6fc <_dtoa_r+0x6b4>
 800d514:	d000      	beq.n	800d518 <_dtoa_r+0x4d0>
 800d516:	e282      	b.n	800da1e <_dtoa_r+0x9d6>
 800d518:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d51a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d51c:	2200      	movs	r2, #0
 800d51e:	4b74      	ldr	r3, [pc, #464]	; (800d6f0 <_dtoa_r+0x6a8>)
 800d520:	f7f4 fefa 	bl	8002318 <__aeabi_dmul>
 800d524:	9a08      	ldr	r2, [sp, #32]
 800d526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d528:	f7f2 ffbe 	bl	80004a8 <__aeabi_dcmpge>
 800d52c:	9e07      	ldr	r6, [sp, #28]
 800d52e:	0035      	movs	r5, r6
 800d530:	2800      	cmp	r0, #0
 800d532:	d000      	beq.n	800d536 <_dtoa_r+0x4ee>
 800d534:	e259      	b.n	800d9ea <_dtoa_r+0x9a2>
 800d536:	9b06      	ldr	r3, [sp, #24]
 800d538:	9a06      	ldr	r2, [sp, #24]
 800d53a:	3301      	adds	r3, #1
 800d53c:	9308      	str	r3, [sp, #32]
 800d53e:	2331      	movs	r3, #49	; 0x31
 800d540:	7013      	strb	r3, [r2, #0]
 800d542:	9b02      	ldr	r3, [sp, #8]
 800d544:	3301      	adds	r3, #1
 800d546:	9302      	str	r3, [sp, #8]
 800d548:	e254      	b.n	800d9f4 <_dtoa_r+0x9ac>
 800d54a:	4234      	tst	r4, r6
 800d54c:	d007      	beq.n	800d55e <_dtoa_r+0x516>
 800d54e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d550:	3301      	adds	r3, #1
 800d552:	9310      	str	r3, [sp, #64]	; 0x40
 800d554:	682a      	ldr	r2, [r5, #0]
 800d556:	686b      	ldr	r3, [r5, #4]
 800d558:	f7f4 fede 	bl	8002318 <__aeabi_dmul>
 800d55c:	0033      	movs	r3, r6
 800d55e:	1064      	asrs	r4, r4, #1
 800d560:	3508      	adds	r5, #8
 800d562:	e75a      	b.n	800d41a <_dtoa_r+0x3d2>
 800d564:	9e02      	ldr	r6, [sp, #8]
 800d566:	9b07      	ldr	r3, [sp, #28]
 800d568:	e780      	b.n	800d46c <_dtoa_r+0x424>
 800d56a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d56c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d56e:	1e5a      	subs	r2, r3, #1
 800d570:	4b59      	ldr	r3, [pc, #356]	; (800d6d8 <_dtoa_r+0x690>)
 800d572:	00d2      	lsls	r2, r2, #3
 800d574:	189b      	adds	r3, r3, r2
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	2900      	cmp	r1, #0
 800d57c:	d051      	beq.n	800d622 <_dtoa_r+0x5da>
 800d57e:	2000      	movs	r0, #0
 800d580:	495d      	ldr	r1, [pc, #372]	; (800d6f8 <_dtoa_r+0x6b0>)
 800d582:	f7f4 fac7 	bl	8001b14 <__aeabi_ddiv>
 800d586:	9a08      	ldr	r2, [sp, #32]
 800d588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d58a:	f7f5 f931 	bl	80027f0 <__aeabi_dsub>
 800d58e:	9a06      	ldr	r2, [sp, #24]
 800d590:	9b06      	ldr	r3, [sp, #24]
 800d592:	4694      	mov	ip, r2
 800d594:	9317      	str	r3, [sp, #92]	; 0x5c
 800d596:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d598:	9010      	str	r0, [sp, #64]	; 0x40
 800d59a:	9111      	str	r1, [sp, #68]	; 0x44
 800d59c:	4463      	add	r3, ip
 800d59e:	9319      	str	r3, [sp, #100]	; 0x64
 800d5a0:	0029      	movs	r1, r5
 800d5a2:	0020      	movs	r0, r4
 800d5a4:	f7f5 fcd4 	bl	8002f50 <__aeabi_d2iz>
 800d5a8:	9014      	str	r0, [sp, #80]	; 0x50
 800d5aa:	f7f5 fd07 	bl	8002fbc <__aeabi_i2d>
 800d5ae:	0002      	movs	r2, r0
 800d5b0:	000b      	movs	r3, r1
 800d5b2:	0020      	movs	r0, r4
 800d5b4:	0029      	movs	r1, r5
 800d5b6:	f7f5 f91b 	bl	80027f0 <__aeabi_dsub>
 800d5ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5be:	3301      	adds	r3, #1
 800d5c0:	9308      	str	r3, [sp, #32]
 800d5c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d5c4:	0004      	movs	r4, r0
 800d5c6:	3330      	adds	r3, #48	; 0x30
 800d5c8:	7013      	strb	r3, [r2, #0]
 800d5ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d5cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5ce:	000d      	movs	r5, r1
 800d5d0:	f7f2 ff4c 	bl	800046c <__aeabi_dcmplt>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d175      	bne.n	800d6c4 <_dtoa_r+0x67c>
 800d5d8:	0022      	movs	r2, r4
 800d5da:	002b      	movs	r3, r5
 800d5dc:	2000      	movs	r0, #0
 800d5de:	4940      	ldr	r1, [pc, #256]	; (800d6e0 <_dtoa_r+0x698>)
 800d5e0:	f7f5 f906 	bl	80027f0 <__aeabi_dsub>
 800d5e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d5e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5e8:	f7f2 ff40 	bl	800046c <__aeabi_dcmplt>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d000      	beq.n	800d5f2 <_dtoa_r+0x5aa>
 800d5f0:	e0d2      	b.n	800d798 <_dtoa_r+0x750>
 800d5f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d5f4:	9a08      	ldr	r2, [sp, #32]
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d100      	bne.n	800d5fc <_dtoa_r+0x5b4>
 800d5fa:	e770      	b.n	800d4de <_dtoa_r+0x496>
 800d5fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d5fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d600:	2200      	movs	r2, #0
 800d602:	4b38      	ldr	r3, [pc, #224]	; (800d6e4 <_dtoa_r+0x69c>)
 800d604:	f7f4 fe88 	bl	8002318 <__aeabi_dmul>
 800d608:	4b36      	ldr	r3, [pc, #216]	; (800d6e4 <_dtoa_r+0x69c>)
 800d60a:	9010      	str	r0, [sp, #64]	; 0x40
 800d60c:	9111      	str	r1, [sp, #68]	; 0x44
 800d60e:	2200      	movs	r2, #0
 800d610:	0020      	movs	r0, r4
 800d612:	0029      	movs	r1, r5
 800d614:	f7f4 fe80 	bl	8002318 <__aeabi_dmul>
 800d618:	9b08      	ldr	r3, [sp, #32]
 800d61a:	0004      	movs	r4, r0
 800d61c:	000d      	movs	r5, r1
 800d61e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d620:	e7be      	b.n	800d5a0 <_dtoa_r+0x558>
 800d622:	9808      	ldr	r0, [sp, #32]
 800d624:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d626:	f7f4 fe77 	bl	8002318 <__aeabi_dmul>
 800d62a:	9a06      	ldr	r2, [sp, #24]
 800d62c:	9b06      	ldr	r3, [sp, #24]
 800d62e:	4694      	mov	ip, r2
 800d630:	9308      	str	r3, [sp, #32]
 800d632:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d634:	9010      	str	r0, [sp, #64]	; 0x40
 800d636:	9111      	str	r1, [sp, #68]	; 0x44
 800d638:	4463      	add	r3, ip
 800d63a:	9319      	str	r3, [sp, #100]	; 0x64
 800d63c:	0029      	movs	r1, r5
 800d63e:	0020      	movs	r0, r4
 800d640:	f7f5 fc86 	bl	8002f50 <__aeabi_d2iz>
 800d644:	9017      	str	r0, [sp, #92]	; 0x5c
 800d646:	f7f5 fcb9 	bl	8002fbc <__aeabi_i2d>
 800d64a:	0002      	movs	r2, r0
 800d64c:	000b      	movs	r3, r1
 800d64e:	0020      	movs	r0, r4
 800d650:	0029      	movs	r1, r5
 800d652:	f7f5 f8cd 	bl	80027f0 <__aeabi_dsub>
 800d656:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d658:	9a08      	ldr	r2, [sp, #32]
 800d65a:	3330      	adds	r3, #48	; 0x30
 800d65c:	7013      	strb	r3, [r2, #0]
 800d65e:	0013      	movs	r3, r2
 800d660:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d662:	3301      	adds	r3, #1
 800d664:	0004      	movs	r4, r0
 800d666:	000d      	movs	r5, r1
 800d668:	9308      	str	r3, [sp, #32]
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d12c      	bne.n	800d6c8 <_dtoa_r+0x680>
 800d66e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d670:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d672:	9a06      	ldr	r2, [sp, #24]
 800d674:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d676:	4694      	mov	ip, r2
 800d678:	4463      	add	r3, ip
 800d67a:	2200      	movs	r2, #0
 800d67c:	9308      	str	r3, [sp, #32]
 800d67e:	4b1e      	ldr	r3, [pc, #120]	; (800d6f8 <_dtoa_r+0x6b0>)
 800d680:	f7f3 ff0c 	bl	800149c <__aeabi_dadd>
 800d684:	0002      	movs	r2, r0
 800d686:	000b      	movs	r3, r1
 800d688:	0020      	movs	r0, r4
 800d68a:	0029      	movs	r1, r5
 800d68c:	f7f2 ff02 	bl	8000494 <__aeabi_dcmpgt>
 800d690:	2800      	cmp	r0, #0
 800d692:	d000      	beq.n	800d696 <_dtoa_r+0x64e>
 800d694:	e080      	b.n	800d798 <_dtoa_r+0x750>
 800d696:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d69a:	2000      	movs	r0, #0
 800d69c:	4916      	ldr	r1, [pc, #88]	; (800d6f8 <_dtoa_r+0x6b0>)
 800d69e:	f7f5 f8a7 	bl	80027f0 <__aeabi_dsub>
 800d6a2:	0002      	movs	r2, r0
 800d6a4:	000b      	movs	r3, r1
 800d6a6:	0020      	movs	r0, r4
 800d6a8:	0029      	movs	r1, r5
 800d6aa:	f7f2 fedf 	bl	800046c <__aeabi_dcmplt>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d100      	bne.n	800d6b4 <_dtoa_r+0x66c>
 800d6b2:	e714      	b.n	800d4de <_dtoa_r+0x496>
 800d6b4:	9b08      	ldr	r3, [sp, #32]
 800d6b6:	001a      	movs	r2, r3
 800d6b8:	3a01      	subs	r2, #1
 800d6ba:	9208      	str	r2, [sp, #32]
 800d6bc:	7812      	ldrb	r2, [r2, #0]
 800d6be:	2a30      	cmp	r2, #48	; 0x30
 800d6c0:	d0f8      	beq.n	800d6b4 <_dtoa_r+0x66c>
 800d6c2:	9308      	str	r3, [sp, #32]
 800d6c4:	9602      	str	r6, [sp, #8]
 800d6c6:	e055      	b.n	800d774 <_dtoa_r+0x72c>
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	4b06      	ldr	r3, [pc, #24]	; (800d6e4 <_dtoa_r+0x69c>)
 800d6cc:	f7f4 fe24 	bl	8002318 <__aeabi_dmul>
 800d6d0:	0004      	movs	r4, r0
 800d6d2:	000d      	movs	r5, r1
 800d6d4:	e7b2      	b.n	800d63c <_dtoa_r+0x5f4>
 800d6d6:	46c0      	nop			; (mov r8, r8)
 800d6d8:	0800fd88 	.word	0x0800fd88
 800d6dc:	0800fd60 	.word	0x0800fd60
 800d6e0:	3ff00000 	.word	0x3ff00000
 800d6e4:	40240000 	.word	0x40240000
 800d6e8:	401c0000 	.word	0x401c0000
 800d6ec:	fcc00000 	.word	0xfcc00000
 800d6f0:	40140000 	.word	0x40140000
 800d6f4:	7cc00000 	.word	0x7cc00000
 800d6f8:	3fe00000 	.word	0x3fe00000
 800d6fc:	9b07      	ldr	r3, [sp, #28]
 800d6fe:	9e06      	ldr	r6, [sp, #24]
 800d700:	3b01      	subs	r3, #1
 800d702:	199b      	adds	r3, r3, r6
 800d704:	930c      	str	r3, [sp, #48]	; 0x30
 800d706:	9c08      	ldr	r4, [sp, #32]
 800d708:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d70a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d70c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d70e:	0020      	movs	r0, r4
 800d710:	0029      	movs	r1, r5
 800d712:	f7f4 f9ff 	bl	8001b14 <__aeabi_ddiv>
 800d716:	f7f5 fc1b 	bl	8002f50 <__aeabi_d2iz>
 800d71a:	9007      	str	r0, [sp, #28]
 800d71c:	f7f5 fc4e 	bl	8002fbc <__aeabi_i2d>
 800d720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d724:	f7f4 fdf8 	bl	8002318 <__aeabi_dmul>
 800d728:	0002      	movs	r2, r0
 800d72a:	000b      	movs	r3, r1
 800d72c:	0020      	movs	r0, r4
 800d72e:	0029      	movs	r1, r5
 800d730:	f7f5 f85e 	bl	80027f0 <__aeabi_dsub>
 800d734:	0033      	movs	r3, r6
 800d736:	9a07      	ldr	r2, [sp, #28]
 800d738:	3601      	adds	r6, #1
 800d73a:	3230      	adds	r2, #48	; 0x30
 800d73c:	701a      	strb	r2, [r3, #0]
 800d73e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d740:	9608      	str	r6, [sp, #32]
 800d742:	429a      	cmp	r2, r3
 800d744:	d139      	bne.n	800d7ba <_dtoa_r+0x772>
 800d746:	0002      	movs	r2, r0
 800d748:	000b      	movs	r3, r1
 800d74a:	f7f3 fea7 	bl	800149c <__aeabi_dadd>
 800d74e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d752:	0004      	movs	r4, r0
 800d754:	000d      	movs	r5, r1
 800d756:	f7f2 fe9d 	bl	8000494 <__aeabi_dcmpgt>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d11b      	bne.n	800d796 <_dtoa_r+0x74e>
 800d75e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d762:	0020      	movs	r0, r4
 800d764:	0029      	movs	r1, r5
 800d766:	f7f2 fe7b 	bl	8000460 <__aeabi_dcmpeq>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d002      	beq.n	800d774 <_dtoa_r+0x72c>
 800d76e:	9b07      	ldr	r3, [sp, #28]
 800d770:	07db      	lsls	r3, r3, #31
 800d772:	d410      	bmi.n	800d796 <_dtoa_r+0x74e>
 800d774:	0038      	movs	r0, r7
 800d776:	9905      	ldr	r1, [sp, #20]
 800d778:	f000 faf4 	bl	800dd64 <_Bfree>
 800d77c:	2300      	movs	r3, #0
 800d77e:	9a08      	ldr	r2, [sp, #32]
 800d780:	9802      	ldr	r0, [sp, #8]
 800d782:	7013      	strb	r3, [r2, #0]
 800d784:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d786:	3001      	adds	r0, #1
 800d788:	6018      	str	r0, [r3, #0]
 800d78a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d100      	bne.n	800d792 <_dtoa_r+0x74a>
 800d790:	e4a6      	b.n	800d0e0 <_dtoa_r+0x98>
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	e4a4      	b.n	800d0e0 <_dtoa_r+0x98>
 800d796:	9e02      	ldr	r6, [sp, #8]
 800d798:	9b08      	ldr	r3, [sp, #32]
 800d79a:	9308      	str	r3, [sp, #32]
 800d79c:	3b01      	subs	r3, #1
 800d79e:	781a      	ldrb	r2, [r3, #0]
 800d7a0:	2a39      	cmp	r2, #57	; 0x39
 800d7a2:	d106      	bne.n	800d7b2 <_dtoa_r+0x76a>
 800d7a4:	9a06      	ldr	r2, [sp, #24]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d1f7      	bne.n	800d79a <_dtoa_r+0x752>
 800d7aa:	2230      	movs	r2, #48	; 0x30
 800d7ac:	9906      	ldr	r1, [sp, #24]
 800d7ae:	3601      	adds	r6, #1
 800d7b0:	700a      	strb	r2, [r1, #0]
 800d7b2:	781a      	ldrb	r2, [r3, #0]
 800d7b4:	3201      	adds	r2, #1
 800d7b6:	701a      	strb	r2, [r3, #0]
 800d7b8:	e784      	b.n	800d6c4 <_dtoa_r+0x67c>
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	4baa      	ldr	r3, [pc, #680]	; (800da68 <_dtoa_r+0xa20>)
 800d7be:	f7f4 fdab 	bl	8002318 <__aeabi_dmul>
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	0004      	movs	r4, r0
 800d7c8:	000d      	movs	r5, r1
 800d7ca:	f7f2 fe49 	bl	8000460 <__aeabi_dcmpeq>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d09b      	beq.n	800d70a <_dtoa_r+0x6c2>
 800d7d2:	e7cf      	b.n	800d774 <_dtoa_r+0x72c>
 800d7d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d7d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d7d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d7da:	2d00      	cmp	r5, #0
 800d7dc:	d012      	beq.n	800d804 <_dtoa_r+0x7bc>
 800d7de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d7e0:	2a01      	cmp	r2, #1
 800d7e2:	dc66      	bgt.n	800d8b2 <_dtoa_r+0x86a>
 800d7e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d7e6:	2a00      	cmp	r2, #0
 800d7e8:	d05d      	beq.n	800d8a6 <_dtoa_r+0x85e>
 800d7ea:	4aa0      	ldr	r2, [pc, #640]	; (800da6c <_dtoa_r+0xa24>)
 800d7ec:	189b      	adds	r3, r3, r2
 800d7ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	18d2      	adds	r2, r2, r3
 800d7f4:	920a      	str	r2, [sp, #40]	; 0x28
 800d7f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7f8:	0038      	movs	r0, r7
 800d7fa:	18d3      	adds	r3, r2, r3
 800d7fc:	930d      	str	r3, [sp, #52]	; 0x34
 800d7fe:	f000 fb61 	bl	800dec4 <__i2b>
 800d802:	0005      	movs	r5, r0
 800d804:	2c00      	cmp	r4, #0
 800d806:	dd0e      	ble.n	800d826 <_dtoa_r+0x7de>
 800d808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	dd0b      	ble.n	800d826 <_dtoa_r+0x7de>
 800d80e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d810:	0023      	movs	r3, r4
 800d812:	4294      	cmp	r4, r2
 800d814:	dd00      	ble.n	800d818 <_dtoa_r+0x7d0>
 800d816:	0013      	movs	r3, r2
 800d818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d81a:	1ae4      	subs	r4, r4, r3
 800d81c:	1ad2      	subs	r2, r2, r3
 800d81e:	920a      	str	r2, [sp, #40]	; 0x28
 800d820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	930d      	str	r3, [sp, #52]	; 0x34
 800d826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d01f      	beq.n	800d86c <_dtoa_r+0x824>
 800d82c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d054      	beq.n	800d8dc <_dtoa_r+0x894>
 800d832:	2e00      	cmp	r6, #0
 800d834:	dd11      	ble.n	800d85a <_dtoa_r+0x812>
 800d836:	0029      	movs	r1, r5
 800d838:	0032      	movs	r2, r6
 800d83a:	0038      	movs	r0, r7
 800d83c:	f000 fc08 	bl	800e050 <__pow5mult>
 800d840:	9a05      	ldr	r2, [sp, #20]
 800d842:	0001      	movs	r1, r0
 800d844:	0005      	movs	r5, r0
 800d846:	0038      	movs	r0, r7
 800d848:	f000 fb52 	bl	800def0 <__multiply>
 800d84c:	9905      	ldr	r1, [sp, #20]
 800d84e:	9014      	str	r0, [sp, #80]	; 0x50
 800d850:	0038      	movs	r0, r7
 800d852:	f000 fa87 	bl	800dd64 <_Bfree>
 800d856:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d858:	9305      	str	r3, [sp, #20]
 800d85a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d85c:	1b9a      	subs	r2, r3, r6
 800d85e:	42b3      	cmp	r3, r6
 800d860:	d004      	beq.n	800d86c <_dtoa_r+0x824>
 800d862:	0038      	movs	r0, r7
 800d864:	9905      	ldr	r1, [sp, #20]
 800d866:	f000 fbf3 	bl	800e050 <__pow5mult>
 800d86a:	9005      	str	r0, [sp, #20]
 800d86c:	2101      	movs	r1, #1
 800d86e:	0038      	movs	r0, r7
 800d870:	f000 fb28 	bl	800dec4 <__i2b>
 800d874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d876:	0006      	movs	r6, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	dd31      	ble.n	800d8e0 <_dtoa_r+0x898>
 800d87c:	001a      	movs	r2, r3
 800d87e:	0001      	movs	r1, r0
 800d880:	0038      	movs	r0, r7
 800d882:	f000 fbe5 	bl	800e050 <__pow5mult>
 800d886:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d888:	0006      	movs	r6, r0
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	dd2d      	ble.n	800d8ea <_dtoa_r+0x8a2>
 800d88e:	2300      	movs	r3, #0
 800d890:	930e      	str	r3, [sp, #56]	; 0x38
 800d892:	6933      	ldr	r3, [r6, #16]
 800d894:	3303      	adds	r3, #3
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	18f3      	adds	r3, r6, r3
 800d89a:	6858      	ldr	r0, [r3, #4]
 800d89c:	f000 faca 	bl	800de34 <__hi0bits>
 800d8a0:	2320      	movs	r3, #32
 800d8a2:	1a18      	subs	r0, r3, r0
 800d8a4:	e039      	b.n	800d91a <_dtoa_r+0x8d2>
 800d8a6:	2336      	movs	r3, #54	; 0x36
 800d8a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d8aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d8ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d8ae:	1a9b      	subs	r3, r3, r2
 800d8b0:	e79d      	b.n	800d7ee <_dtoa_r+0x7a6>
 800d8b2:	9b07      	ldr	r3, [sp, #28]
 800d8b4:	1e5e      	subs	r6, r3, #1
 800d8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8b8:	42b3      	cmp	r3, r6
 800d8ba:	db07      	blt.n	800d8cc <_dtoa_r+0x884>
 800d8bc:	1b9e      	subs	r6, r3, r6
 800d8be:	9b07      	ldr	r3, [sp, #28]
 800d8c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	da93      	bge.n	800d7ee <_dtoa_r+0x7a6>
 800d8c6:	1ae4      	subs	r4, r4, r3
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	e790      	b.n	800d7ee <_dtoa_r+0x7a6>
 800d8cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d8d0:	1af3      	subs	r3, r6, r3
 800d8d2:	18d3      	adds	r3, r2, r3
 800d8d4:	960e      	str	r6, [sp, #56]	; 0x38
 800d8d6:	9315      	str	r3, [sp, #84]	; 0x54
 800d8d8:	2600      	movs	r6, #0
 800d8da:	e7f0      	b.n	800d8be <_dtoa_r+0x876>
 800d8dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8de:	e7c0      	b.n	800d862 <_dtoa_r+0x81a>
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	930e      	str	r3, [sp, #56]	; 0x38
 800d8e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	dc13      	bgt.n	800d912 <_dtoa_r+0x8ca>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	930e      	str	r3, [sp, #56]	; 0x38
 800d8ee:	9b08      	ldr	r3, [sp, #32]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d10e      	bne.n	800d912 <_dtoa_r+0x8ca>
 800d8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8f6:	031b      	lsls	r3, r3, #12
 800d8f8:	d10b      	bne.n	800d912 <_dtoa_r+0x8ca>
 800d8fa:	4b5d      	ldr	r3, [pc, #372]	; (800da70 <_dtoa_r+0xa28>)
 800d8fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8fe:	4213      	tst	r3, r2
 800d900:	d007      	beq.n	800d912 <_dtoa_r+0x8ca>
 800d902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d904:	3301      	adds	r3, #1
 800d906:	930a      	str	r3, [sp, #40]	; 0x28
 800d908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d90a:	3301      	adds	r3, #1
 800d90c:	930d      	str	r3, [sp, #52]	; 0x34
 800d90e:	2301      	movs	r3, #1
 800d910:	930e      	str	r3, [sp, #56]	; 0x38
 800d912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d914:	2001      	movs	r0, #1
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1bb      	bne.n	800d892 <_dtoa_r+0x84a>
 800d91a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d91c:	221f      	movs	r2, #31
 800d91e:	1818      	adds	r0, r3, r0
 800d920:	0003      	movs	r3, r0
 800d922:	4013      	ands	r3, r2
 800d924:	4210      	tst	r0, r2
 800d926:	d046      	beq.n	800d9b6 <_dtoa_r+0x96e>
 800d928:	3201      	adds	r2, #1
 800d92a:	1ad2      	subs	r2, r2, r3
 800d92c:	2a04      	cmp	r2, #4
 800d92e:	dd3f      	ble.n	800d9b0 <_dtoa_r+0x968>
 800d930:	221c      	movs	r2, #28
 800d932:	1ad3      	subs	r3, r2, r3
 800d934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d936:	18e4      	adds	r4, r4, r3
 800d938:	18d2      	adds	r2, r2, r3
 800d93a:	920a      	str	r2, [sp, #40]	; 0x28
 800d93c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d93e:	18d3      	adds	r3, r2, r3
 800d940:	930d      	str	r3, [sp, #52]	; 0x34
 800d942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d944:	2b00      	cmp	r3, #0
 800d946:	dd05      	ble.n	800d954 <_dtoa_r+0x90c>
 800d948:	001a      	movs	r2, r3
 800d94a:	0038      	movs	r0, r7
 800d94c:	9905      	ldr	r1, [sp, #20]
 800d94e:	f000 fbdb 	bl	800e108 <__lshift>
 800d952:	9005      	str	r0, [sp, #20]
 800d954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d956:	2b00      	cmp	r3, #0
 800d958:	dd05      	ble.n	800d966 <_dtoa_r+0x91e>
 800d95a:	0031      	movs	r1, r6
 800d95c:	001a      	movs	r2, r3
 800d95e:	0038      	movs	r0, r7
 800d960:	f000 fbd2 	bl	800e108 <__lshift>
 800d964:	0006      	movs	r6, r0
 800d966:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d026      	beq.n	800d9ba <_dtoa_r+0x972>
 800d96c:	0031      	movs	r1, r6
 800d96e:	9805      	ldr	r0, [sp, #20]
 800d970:	f000 fc38 	bl	800e1e4 <__mcmp>
 800d974:	2800      	cmp	r0, #0
 800d976:	da20      	bge.n	800d9ba <_dtoa_r+0x972>
 800d978:	9b02      	ldr	r3, [sp, #8]
 800d97a:	220a      	movs	r2, #10
 800d97c:	3b01      	subs	r3, #1
 800d97e:	9302      	str	r3, [sp, #8]
 800d980:	0038      	movs	r0, r7
 800d982:	2300      	movs	r3, #0
 800d984:	9905      	ldr	r1, [sp, #20]
 800d986:	f000 fa11 	bl	800ddac <__multadd>
 800d98a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d98c:	9005      	str	r0, [sp, #20]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d100      	bne.n	800d994 <_dtoa_r+0x94c>
 800d992:	e166      	b.n	800dc62 <_dtoa_r+0xc1a>
 800d994:	2300      	movs	r3, #0
 800d996:	0029      	movs	r1, r5
 800d998:	220a      	movs	r2, #10
 800d99a:	0038      	movs	r0, r7
 800d99c:	f000 fa06 	bl	800ddac <__multadd>
 800d9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9a2:	0005      	movs	r5, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	dc47      	bgt.n	800da38 <_dtoa_r+0x9f0>
 800d9a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d9aa:	2b02      	cmp	r3, #2
 800d9ac:	dc0d      	bgt.n	800d9ca <_dtoa_r+0x982>
 800d9ae:	e043      	b.n	800da38 <_dtoa_r+0x9f0>
 800d9b0:	2a04      	cmp	r2, #4
 800d9b2:	d0c6      	beq.n	800d942 <_dtoa_r+0x8fa>
 800d9b4:	0013      	movs	r3, r2
 800d9b6:	331c      	adds	r3, #28
 800d9b8:	e7bc      	b.n	800d934 <_dtoa_r+0x8ec>
 800d9ba:	9b07      	ldr	r3, [sp, #28]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	dc35      	bgt.n	800da2c <_dtoa_r+0x9e4>
 800d9c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	dd32      	ble.n	800da2c <_dtoa_r+0x9e4>
 800d9c6:	9b07      	ldr	r3, [sp, #28]
 800d9c8:	930c      	str	r3, [sp, #48]	; 0x30
 800d9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d10c      	bne.n	800d9ea <_dtoa_r+0x9a2>
 800d9d0:	0031      	movs	r1, r6
 800d9d2:	2205      	movs	r2, #5
 800d9d4:	0038      	movs	r0, r7
 800d9d6:	f000 f9e9 	bl	800ddac <__multadd>
 800d9da:	0006      	movs	r6, r0
 800d9dc:	0001      	movs	r1, r0
 800d9de:	9805      	ldr	r0, [sp, #20]
 800d9e0:	f000 fc00 	bl	800e1e4 <__mcmp>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	dd00      	ble.n	800d9ea <_dtoa_r+0x9a2>
 800d9e8:	e5a5      	b.n	800d536 <_dtoa_r+0x4ee>
 800d9ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d9ec:	43db      	mvns	r3, r3
 800d9ee:	9302      	str	r3, [sp, #8]
 800d9f0:	9b06      	ldr	r3, [sp, #24]
 800d9f2:	9308      	str	r3, [sp, #32]
 800d9f4:	2400      	movs	r4, #0
 800d9f6:	0031      	movs	r1, r6
 800d9f8:	0038      	movs	r0, r7
 800d9fa:	f000 f9b3 	bl	800dd64 <_Bfree>
 800d9fe:	2d00      	cmp	r5, #0
 800da00:	d100      	bne.n	800da04 <_dtoa_r+0x9bc>
 800da02:	e6b7      	b.n	800d774 <_dtoa_r+0x72c>
 800da04:	2c00      	cmp	r4, #0
 800da06:	d005      	beq.n	800da14 <_dtoa_r+0x9cc>
 800da08:	42ac      	cmp	r4, r5
 800da0a:	d003      	beq.n	800da14 <_dtoa_r+0x9cc>
 800da0c:	0021      	movs	r1, r4
 800da0e:	0038      	movs	r0, r7
 800da10:	f000 f9a8 	bl	800dd64 <_Bfree>
 800da14:	0029      	movs	r1, r5
 800da16:	0038      	movs	r0, r7
 800da18:	f000 f9a4 	bl	800dd64 <_Bfree>
 800da1c:	e6aa      	b.n	800d774 <_dtoa_r+0x72c>
 800da1e:	2600      	movs	r6, #0
 800da20:	0035      	movs	r5, r6
 800da22:	e7e2      	b.n	800d9ea <_dtoa_r+0x9a2>
 800da24:	9602      	str	r6, [sp, #8]
 800da26:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800da28:	0035      	movs	r5, r6
 800da2a:	e584      	b.n	800d536 <_dtoa_r+0x4ee>
 800da2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d100      	bne.n	800da34 <_dtoa_r+0x9ec>
 800da32:	e0ce      	b.n	800dbd2 <_dtoa_r+0xb8a>
 800da34:	9b07      	ldr	r3, [sp, #28]
 800da36:	930c      	str	r3, [sp, #48]	; 0x30
 800da38:	2c00      	cmp	r4, #0
 800da3a:	dd05      	ble.n	800da48 <_dtoa_r+0xa00>
 800da3c:	0029      	movs	r1, r5
 800da3e:	0022      	movs	r2, r4
 800da40:	0038      	movs	r0, r7
 800da42:	f000 fb61 	bl	800e108 <__lshift>
 800da46:	0005      	movs	r5, r0
 800da48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da4a:	0028      	movs	r0, r5
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d022      	beq.n	800da96 <_dtoa_r+0xa4e>
 800da50:	0038      	movs	r0, r7
 800da52:	6869      	ldr	r1, [r5, #4]
 800da54:	f000 f942 	bl	800dcdc <_Balloc>
 800da58:	1e04      	subs	r4, r0, #0
 800da5a:	d10f      	bne.n	800da7c <_dtoa_r+0xa34>
 800da5c:	0002      	movs	r2, r0
 800da5e:	4b05      	ldr	r3, [pc, #20]	; (800da74 <_dtoa_r+0xa2c>)
 800da60:	4905      	ldr	r1, [pc, #20]	; (800da78 <_dtoa_r+0xa30>)
 800da62:	f7ff fb06 	bl	800d072 <_dtoa_r+0x2a>
 800da66:	46c0      	nop			; (mov r8, r8)
 800da68:	40240000 	.word	0x40240000
 800da6c:	00000433 	.word	0x00000433
 800da70:	7ff00000 	.word	0x7ff00000
 800da74:	0800fcf1 	.word	0x0800fcf1
 800da78:	000002ea 	.word	0x000002ea
 800da7c:	0029      	movs	r1, r5
 800da7e:	692b      	ldr	r3, [r5, #16]
 800da80:	310c      	adds	r1, #12
 800da82:	1c9a      	adds	r2, r3, #2
 800da84:	0092      	lsls	r2, r2, #2
 800da86:	300c      	adds	r0, #12
 800da88:	f7fe fb8e 	bl	800c1a8 <memcpy>
 800da8c:	2201      	movs	r2, #1
 800da8e:	0021      	movs	r1, r4
 800da90:	0038      	movs	r0, r7
 800da92:	f000 fb39 	bl	800e108 <__lshift>
 800da96:	9b06      	ldr	r3, [sp, #24]
 800da98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da9a:	930a      	str	r3, [sp, #40]	; 0x28
 800da9c:	3b01      	subs	r3, #1
 800da9e:	189b      	adds	r3, r3, r2
 800daa0:	2201      	movs	r2, #1
 800daa2:	002c      	movs	r4, r5
 800daa4:	0005      	movs	r5, r0
 800daa6:	9314      	str	r3, [sp, #80]	; 0x50
 800daa8:	9b08      	ldr	r3, [sp, #32]
 800daaa:	4013      	ands	r3, r2
 800daac:	930f      	str	r3, [sp, #60]	; 0x3c
 800daae:	0031      	movs	r1, r6
 800dab0:	9805      	ldr	r0, [sp, #20]
 800dab2:	f7ff fa3d 	bl	800cf30 <quorem>
 800dab6:	0003      	movs	r3, r0
 800dab8:	0021      	movs	r1, r4
 800daba:	3330      	adds	r3, #48	; 0x30
 800dabc:	900d      	str	r0, [sp, #52]	; 0x34
 800dabe:	9805      	ldr	r0, [sp, #20]
 800dac0:	9307      	str	r3, [sp, #28]
 800dac2:	f000 fb8f 	bl	800e1e4 <__mcmp>
 800dac6:	002a      	movs	r2, r5
 800dac8:	900e      	str	r0, [sp, #56]	; 0x38
 800daca:	0031      	movs	r1, r6
 800dacc:	0038      	movs	r0, r7
 800dace:	f000 fba5 	bl	800e21c <__mdiff>
 800dad2:	68c3      	ldr	r3, [r0, #12]
 800dad4:	9008      	str	r0, [sp, #32]
 800dad6:	9310      	str	r3, [sp, #64]	; 0x40
 800dad8:	2301      	movs	r3, #1
 800dada:	930c      	str	r3, [sp, #48]	; 0x30
 800dadc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d104      	bne.n	800daec <_dtoa_r+0xaa4>
 800dae2:	0001      	movs	r1, r0
 800dae4:	9805      	ldr	r0, [sp, #20]
 800dae6:	f000 fb7d 	bl	800e1e4 <__mcmp>
 800daea:	900c      	str	r0, [sp, #48]	; 0x30
 800daec:	0038      	movs	r0, r7
 800daee:	9908      	ldr	r1, [sp, #32]
 800daf0:	f000 f938 	bl	800dd64 <_Bfree>
 800daf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800daf8:	3301      	adds	r3, #1
 800dafa:	9308      	str	r3, [sp, #32]
 800dafc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dafe:	4313      	orrs	r3, r2
 800db00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db02:	4313      	orrs	r3, r2
 800db04:	d10c      	bne.n	800db20 <_dtoa_r+0xad8>
 800db06:	9b07      	ldr	r3, [sp, #28]
 800db08:	2b39      	cmp	r3, #57	; 0x39
 800db0a:	d026      	beq.n	800db5a <_dtoa_r+0xb12>
 800db0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db0e:	2b00      	cmp	r3, #0
 800db10:	dd02      	ble.n	800db18 <_dtoa_r+0xad0>
 800db12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db14:	3331      	adds	r3, #49	; 0x31
 800db16:	9307      	str	r3, [sp, #28]
 800db18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db1a:	9a07      	ldr	r2, [sp, #28]
 800db1c:	701a      	strb	r2, [r3, #0]
 800db1e:	e76a      	b.n	800d9f6 <_dtoa_r+0x9ae>
 800db20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db22:	2b00      	cmp	r3, #0
 800db24:	db04      	blt.n	800db30 <_dtoa_r+0xae8>
 800db26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800db28:	4313      	orrs	r3, r2
 800db2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db2c:	4313      	orrs	r3, r2
 800db2e:	d11f      	bne.n	800db70 <_dtoa_r+0xb28>
 800db30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db32:	2b00      	cmp	r3, #0
 800db34:	ddf0      	ble.n	800db18 <_dtoa_r+0xad0>
 800db36:	9905      	ldr	r1, [sp, #20]
 800db38:	2201      	movs	r2, #1
 800db3a:	0038      	movs	r0, r7
 800db3c:	f000 fae4 	bl	800e108 <__lshift>
 800db40:	0031      	movs	r1, r6
 800db42:	9005      	str	r0, [sp, #20]
 800db44:	f000 fb4e 	bl	800e1e4 <__mcmp>
 800db48:	2800      	cmp	r0, #0
 800db4a:	dc03      	bgt.n	800db54 <_dtoa_r+0xb0c>
 800db4c:	d1e4      	bne.n	800db18 <_dtoa_r+0xad0>
 800db4e:	9b07      	ldr	r3, [sp, #28]
 800db50:	07db      	lsls	r3, r3, #31
 800db52:	d5e1      	bpl.n	800db18 <_dtoa_r+0xad0>
 800db54:	9b07      	ldr	r3, [sp, #28]
 800db56:	2b39      	cmp	r3, #57	; 0x39
 800db58:	d1db      	bne.n	800db12 <_dtoa_r+0xaca>
 800db5a:	2339      	movs	r3, #57	; 0x39
 800db5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db5e:	7013      	strb	r3, [r2, #0]
 800db60:	9b08      	ldr	r3, [sp, #32]
 800db62:	9308      	str	r3, [sp, #32]
 800db64:	3b01      	subs	r3, #1
 800db66:	781a      	ldrb	r2, [r3, #0]
 800db68:	2a39      	cmp	r2, #57	; 0x39
 800db6a:	d068      	beq.n	800dc3e <_dtoa_r+0xbf6>
 800db6c:	3201      	adds	r2, #1
 800db6e:	e7d5      	b.n	800db1c <_dtoa_r+0xad4>
 800db70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db72:	2b00      	cmp	r3, #0
 800db74:	dd07      	ble.n	800db86 <_dtoa_r+0xb3e>
 800db76:	9b07      	ldr	r3, [sp, #28]
 800db78:	2b39      	cmp	r3, #57	; 0x39
 800db7a:	d0ee      	beq.n	800db5a <_dtoa_r+0xb12>
 800db7c:	9b07      	ldr	r3, [sp, #28]
 800db7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db80:	3301      	adds	r3, #1
 800db82:	7013      	strb	r3, [r2, #0]
 800db84:	e737      	b.n	800d9f6 <_dtoa_r+0x9ae>
 800db86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db88:	9a07      	ldr	r2, [sp, #28]
 800db8a:	701a      	strb	r2, [r3, #0]
 800db8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db90:	4293      	cmp	r3, r2
 800db92:	d03e      	beq.n	800dc12 <_dtoa_r+0xbca>
 800db94:	2300      	movs	r3, #0
 800db96:	220a      	movs	r2, #10
 800db98:	9905      	ldr	r1, [sp, #20]
 800db9a:	0038      	movs	r0, r7
 800db9c:	f000 f906 	bl	800ddac <__multadd>
 800dba0:	2300      	movs	r3, #0
 800dba2:	9005      	str	r0, [sp, #20]
 800dba4:	220a      	movs	r2, #10
 800dba6:	0021      	movs	r1, r4
 800dba8:	0038      	movs	r0, r7
 800dbaa:	42ac      	cmp	r4, r5
 800dbac:	d106      	bne.n	800dbbc <_dtoa_r+0xb74>
 800dbae:	f000 f8fd 	bl	800ddac <__multadd>
 800dbb2:	0004      	movs	r4, r0
 800dbb4:	0005      	movs	r5, r0
 800dbb6:	9b08      	ldr	r3, [sp, #32]
 800dbb8:	930a      	str	r3, [sp, #40]	; 0x28
 800dbba:	e778      	b.n	800daae <_dtoa_r+0xa66>
 800dbbc:	f000 f8f6 	bl	800ddac <__multadd>
 800dbc0:	0029      	movs	r1, r5
 800dbc2:	0004      	movs	r4, r0
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	220a      	movs	r2, #10
 800dbc8:	0038      	movs	r0, r7
 800dbca:	f000 f8ef 	bl	800ddac <__multadd>
 800dbce:	0005      	movs	r5, r0
 800dbd0:	e7f1      	b.n	800dbb6 <_dtoa_r+0xb6e>
 800dbd2:	9b07      	ldr	r3, [sp, #28]
 800dbd4:	930c      	str	r3, [sp, #48]	; 0x30
 800dbd6:	2400      	movs	r4, #0
 800dbd8:	0031      	movs	r1, r6
 800dbda:	9805      	ldr	r0, [sp, #20]
 800dbdc:	f7ff f9a8 	bl	800cf30 <quorem>
 800dbe0:	9b06      	ldr	r3, [sp, #24]
 800dbe2:	3030      	adds	r0, #48	; 0x30
 800dbe4:	5518      	strb	r0, [r3, r4]
 800dbe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbe8:	3401      	adds	r4, #1
 800dbea:	9007      	str	r0, [sp, #28]
 800dbec:	42a3      	cmp	r3, r4
 800dbee:	dd07      	ble.n	800dc00 <_dtoa_r+0xbb8>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	220a      	movs	r2, #10
 800dbf4:	0038      	movs	r0, r7
 800dbf6:	9905      	ldr	r1, [sp, #20]
 800dbf8:	f000 f8d8 	bl	800ddac <__multadd>
 800dbfc:	9005      	str	r0, [sp, #20]
 800dbfe:	e7eb      	b.n	800dbd8 <_dtoa_r+0xb90>
 800dc00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc02:	2001      	movs	r0, #1
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	dd00      	ble.n	800dc0a <_dtoa_r+0xbc2>
 800dc08:	0018      	movs	r0, r3
 800dc0a:	2400      	movs	r4, #0
 800dc0c:	9b06      	ldr	r3, [sp, #24]
 800dc0e:	181b      	adds	r3, r3, r0
 800dc10:	9308      	str	r3, [sp, #32]
 800dc12:	9905      	ldr	r1, [sp, #20]
 800dc14:	2201      	movs	r2, #1
 800dc16:	0038      	movs	r0, r7
 800dc18:	f000 fa76 	bl	800e108 <__lshift>
 800dc1c:	0031      	movs	r1, r6
 800dc1e:	9005      	str	r0, [sp, #20]
 800dc20:	f000 fae0 	bl	800e1e4 <__mcmp>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	dc9b      	bgt.n	800db60 <_dtoa_r+0xb18>
 800dc28:	d102      	bne.n	800dc30 <_dtoa_r+0xbe8>
 800dc2a:	9b07      	ldr	r3, [sp, #28]
 800dc2c:	07db      	lsls	r3, r3, #31
 800dc2e:	d497      	bmi.n	800db60 <_dtoa_r+0xb18>
 800dc30:	9b08      	ldr	r3, [sp, #32]
 800dc32:	9308      	str	r3, [sp, #32]
 800dc34:	3b01      	subs	r3, #1
 800dc36:	781a      	ldrb	r2, [r3, #0]
 800dc38:	2a30      	cmp	r2, #48	; 0x30
 800dc3a:	d0fa      	beq.n	800dc32 <_dtoa_r+0xbea>
 800dc3c:	e6db      	b.n	800d9f6 <_dtoa_r+0x9ae>
 800dc3e:	9a06      	ldr	r2, [sp, #24]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d18e      	bne.n	800db62 <_dtoa_r+0xb1a>
 800dc44:	9b02      	ldr	r3, [sp, #8]
 800dc46:	3301      	adds	r3, #1
 800dc48:	9302      	str	r3, [sp, #8]
 800dc4a:	2331      	movs	r3, #49	; 0x31
 800dc4c:	e799      	b.n	800db82 <_dtoa_r+0xb3a>
 800dc4e:	4b09      	ldr	r3, [pc, #36]	; (800dc74 <_dtoa_r+0xc2c>)
 800dc50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800dc52:	9306      	str	r3, [sp, #24]
 800dc54:	4b08      	ldr	r3, [pc, #32]	; (800dc78 <_dtoa_r+0xc30>)
 800dc56:	2a00      	cmp	r2, #0
 800dc58:	d001      	beq.n	800dc5e <_dtoa_r+0xc16>
 800dc5a:	f7ff fa3f 	bl	800d0dc <_dtoa_r+0x94>
 800dc5e:	f7ff fa3f 	bl	800d0e0 <_dtoa_r+0x98>
 800dc62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	dcb6      	bgt.n	800dbd6 <_dtoa_r+0xb8e>
 800dc68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	dd00      	ble.n	800dc70 <_dtoa_r+0xc28>
 800dc6e:	e6ac      	b.n	800d9ca <_dtoa_r+0x982>
 800dc70:	e7b1      	b.n	800dbd6 <_dtoa_r+0xb8e>
 800dc72:	46c0      	nop			; (mov r8, r8)
 800dc74:	0800fc89 	.word	0x0800fc89
 800dc78:	0800fc91 	.word	0x0800fc91

0800dc7c <fiprintf>:
 800dc7c:	b40e      	push	{r1, r2, r3}
 800dc7e:	b503      	push	{r0, r1, lr}
 800dc80:	0001      	movs	r1, r0
 800dc82:	ab03      	add	r3, sp, #12
 800dc84:	4804      	ldr	r0, [pc, #16]	; (800dc98 <fiprintf+0x1c>)
 800dc86:	cb04      	ldmia	r3!, {r2}
 800dc88:	6800      	ldr	r0, [r0, #0]
 800dc8a:	9301      	str	r3, [sp, #4]
 800dc8c:	f000 fd78 	bl	800e780 <_vfiprintf_r>
 800dc90:	b002      	add	sp, #8
 800dc92:	bc08      	pop	{r3}
 800dc94:	b003      	add	sp, #12
 800dc96:	4718      	bx	r3
 800dc98:	20000010 	.word	0x20000010

0800dc9c <_localeconv_r>:
 800dc9c:	4800      	ldr	r0, [pc, #0]	; (800dca0 <_localeconv_r+0x4>)
 800dc9e:	4770      	bx	lr
 800dca0:	20000164 	.word	0x20000164

0800dca4 <memchr>:
 800dca4:	b2c9      	uxtb	r1, r1
 800dca6:	1882      	adds	r2, r0, r2
 800dca8:	4290      	cmp	r0, r2
 800dcaa:	d101      	bne.n	800dcb0 <memchr+0xc>
 800dcac:	2000      	movs	r0, #0
 800dcae:	4770      	bx	lr
 800dcb0:	7803      	ldrb	r3, [r0, #0]
 800dcb2:	428b      	cmp	r3, r1
 800dcb4:	d0fb      	beq.n	800dcae <memchr+0xa>
 800dcb6:	3001      	adds	r0, #1
 800dcb8:	e7f6      	b.n	800dca8 <memchr+0x4>
	...

0800dcbc <__malloc_lock>:
 800dcbc:	b510      	push	{r4, lr}
 800dcbe:	4802      	ldr	r0, [pc, #8]	; (800dcc8 <__malloc_lock+0xc>)
 800dcc0:	f001 f93d 	bl	800ef3e <__retarget_lock_acquire_recursive>
 800dcc4:	bd10      	pop	{r4, pc}
 800dcc6:	46c0      	nop			; (mov r8, r8)
 800dcc8:	20001ec8 	.word	0x20001ec8

0800dccc <__malloc_unlock>:
 800dccc:	b510      	push	{r4, lr}
 800dcce:	4802      	ldr	r0, [pc, #8]	; (800dcd8 <__malloc_unlock+0xc>)
 800dcd0:	f001 f936 	bl	800ef40 <__retarget_lock_release_recursive>
 800dcd4:	bd10      	pop	{r4, pc}
 800dcd6:	46c0      	nop			; (mov r8, r8)
 800dcd8:	20001ec8 	.word	0x20001ec8

0800dcdc <_Balloc>:
 800dcdc:	b570      	push	{r4, r5, r6, lr}
 800dcde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dce0:	0006      	movs	r6, r0
 800dce2:	000c      	movs	r4, r1
 800dce4:	2d00      	cmp	r5, #0
 800dce6:	d10e      	bne.n	800dd06 <_Balloc+0x2a>
 800dce8:	2010      	movs	r0, #16
 800dcea:	f7fe fa53 	bl	800c194 <malloc>
 800dcee:	1e02      	subs	r2, r0, #0
 800dcf0:	6270      	str	r0, [r6, #36]	; 0x24
 800dcf2:	d104      	bne.n	800dcfe <_Balloc+0x22>
 800dcf4:	2166      	movs	r1, #102	; 0x66
 800dcf6:	4b19      	ldr	r3, [pc, #100]	; (800dd5c <_Balloc+0x80>)
 800dcf8:	4819      	ldr	r0, [pc, #100]	; (800dd60 <_Balloc+0x84>)
 800dcfa:	f7ff f8fb 	bl	800cef4 <__assert_func>
 800dcfe:	6045      	str	r5, [r0, #4]
 800dd00:	6085      	str	r5, [r0, #8]
 800dd02:	6005      	str	r5, [r0, #0]
 800dd04:	60c5      	str	r5, [r0, #12]
 800dd06:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800dd08:	68eb      	ldr	r3, [r5, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d013      	beq.n	800dd36 <_Balloc+0x5a>
 800dd0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd10:	00a2      	lsls	r2, r4, #2
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	189b      	adds	r3, r3, r2
 800dd16:	6818      	ldr	r0, [r3, #0]
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	d118      	bne.n	800dd4e <_Balloc+0x72>
 800dd1c:	2101      	movs	r1, #1
 800dd1e:	000d      	movs	r5, r1
 800dd20:	40a5      	lsls	r5, r4
 800dd22:	1d6a      	adds	r2, r5, #5
 800dd24:	0030      	movs	r0, r6
 800dd26:	0092      	lsls	r2, r2, #2
 800dd28:	f000 fb74 	bl	800e414 <_calloc_r>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	d00c      	beq.n	800dd4a <_Balloc+0x6e>
 800dd30:	6044      	str	r4, [r0, #4]
 800dd32:	6085      	str	r5, [r0, #8]
 800dd34:	e00d      	b.n	800dd52 <_Balloc+0x76>
 800dd36:	2221      	movs	r2, #33	; 0x21
 800dd38:	2104      	movs	r1, #4
 800dd3a:	0030      	movs	r0, r6
 800dd3c:	f000 fb6a 	bl	800e414 <_calloc_r>
 800dd40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd42:	60e8      	str	r0, [r5, #12]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d1e1      	bne.n	800dd0e <_Balloc+0x32>
 800dd4a:	2000      	movs	r0, #0
 800dd4c:	bd70      	pop	{r4, r5, r6, pc}
 800dd4e:	6802      	ldr	r2, [r0, #0]
 800dd50:	601a      	str	r2, [r3, #0]
 800dd52:	2300      	movs	r3, #0
 800dd54:	6103      	str	r3, [r0, #16]
 800dd56:	60c3      	str	r3, [r0, #12]
 800dd58:	e7f8      	b.n	800dd4c <_Balloc+0x70>
 800dd5a:	46c0      	nop			; (mov r8, r8)
 800dd5c:	0800fad8 	.word	0x0800fad8
 800dd60:	0800fd02 	.word	0x0800fd02

0800dd64 <_Bfree>:
 800dd64:	b570      	push	{r4, r5, r6, lr}
 800dd66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd68:	0005      	movs	r5, r0
 800dd6a:	000c      	movs	r4, r1
 800dd6c:	2e00      	cmp	r6, #0
 800dd6e:	d10e      	bne.n	800dd8e <_Bfree+0x2a>
 800dd70:	2010      	movs	r0, #16
 800dd72:	f7fe fa0f 	bl	800c194 <malloc>
 800dd76:	1e02      	subs	r2, r0, #0
 800dd78:	6268      	str	r0, [r5, #36]	; 0x24
 800dd7a:	d104      	bne.n	800dd86 <_Bfree+0x22>
 800dd7c:	218a      	movs	r1, #138	; 0x8a
 800dd7e:	4b09      	ldr	r3, [pc, #36]	; (800dda4 <_Bfree+0x40>)
 800dd80:	4809      	ldr	r0, [pc, #36]	; (800dda8 <_Bfree+0x44>)
 800dd82:	f7ff f8b7 	bl	800cef4 <__assert_func>
 800dd86:	6046      	str	r6, [r0, #4]
 800dd88:	6086      	str	r6, [r0, #8]
 800dd8a:	6006      	str	r6, [r0, #0]
 800dd8c:	60c6      	str	r6, [r0, #12]
 800dd8e:	2c00      	cmp	r4, #0
 800dd90:	d007      	beq.n	800dda2 <_Bfree+0x3e>
 800dd92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dd94:	6862      	ldr	r2, [r4, #4]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	0092      	lsls	r2, r2, #2
 800dd9a:	189b      	adds	r3, r3, r2
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	6022      	str	r2, [r4, #0]
 800dda0:	601c      	str	r4, [r3, #0]
 800dda2:	bd70      	pop	{r4, r5, r6, pc}
 800dda4:	0800fad8 	.word	0x0800fad8
 800dda8:	0800fd02 	.word	0x0800fd02

0800ddac <__multadd>:
 800ddac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddae:	000e      	movs	r6, r1
 800ddb0:	9001      	str	r0, [sp, #4]
 800ddb2:	000c      	movs	r4, r1
 800ddb4:	001d      	movs	r5, r3
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	690f      	ldr	r7, [r1, #16]
 800ddba:	3614      	adds	r6, #20
 800ddbc:	6833      	ldr	r3, [r6, #0]
 800ddbe:	3001      	adds	r0, #1
 800ddc0:	b299      	uxth	r1, r3
 800ddc2:	4351      	muls	r1, r2
 800ddc4:	0c1b      	lsrs	r3, r3, #16
 800ddc6:	4353      	muls	r3, r2
 800ddc8:	1949      	adds	r1, r1, r5
 800ddca:	0c0d      	lsrs	r5, r1, #16
 800ddcc:	195b      	adds	r3, r3, r5
 800ddce:	0c1d      	lsrs	r5, r3, #16
 800ddd0:	b289      	uxth	r1, r1
 800ddd2:	041b      	lsls	r3, r3, #16
 800ddd4:	185b      	adds	r3, r3, r1
 800ddd6:	c608      	stmia	r6!, {r3}
 800ddd8:	4287      	cmp	r7, r0
 800ddda:	dcef      	bgt.n	800ddbc <__multadd+0x10>
 800dddc:	2d00      	cmp	r5, #0
 800ddde:	d022      	beq.n	800de26 <__multadd+0x7a>
 800dde0:	68a3      	ldr	r3, [r4, #8]
 800dde2:	42bb      	cmp	r3, r7
 800dde4:	dc19      	bgt.n	800de1a <__multadd+0x6e>
 800dde6:	6863      	ldr	r3, [r4, #4]
 800dde8:	9801      	ldr	r0, [sp, #4]
 800ddea:	1c59      	adds	r1, r3, #1
 800ddec:	f7ff ff76 	bl	800dcdc <_Balloc>
 800ddf0:	1e06      	subs	r6, r0, #0
 800ddf2:	d105      	bne.n	800de00 <__multadd+0x54>
 800ddf4:	0002      	movs	r2, r0
 800ddf6:	21b5      	movs	r1, #181	; 0xb5
 800ddf8:	4b0c      	ldr	r3, [pc, #48]	; (800de2c <__multadd+0x80>)
 800ddfa:	480d      	ldr	r0, [pc, #52]	; (800de30 <__multadd+0x84>)
 800ddfc:	f7ff f87a 	bl	800cef4 <__assert_func>
 800de00:	0021      	movs	r1, r4
 800de02:	6923      	ldr	r3, [r4, #16]
 800de04:	310c      	adds	r1, #12
 800de06:	1c9a      	adds	r2, r3, #2
 800de08:	0092      	lsls	r2, r2, #2
 800de0a:	300c      	adds	r0, #12
 800de0c:	f7fe f9cc 	bl	800c1a8 <memcpy>
 800de10:	0021      	movs	r1, r4
 800de12:	9801      	ldr	r0, [sp, #4]
 800de14:	f7ff ffa6 	bl	800dd64 <_Bfree>
 800de18:	0034      	movs	r4, r6
 800de1a:	1d3b      	adds	r3, r7, #4
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	18e3      	adds	r3, r4, r3
 800de20:	605d      	str	r5, [r3, #4]
 800de22:	1c7b      	adds	r3, r7, #1
 800de24:	6123      	str	r3, [r4, #16]
 800de26:	0020      	movs	r0, r4
 800de28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800de2a:	46c0      	nop			; (mov r8, r8)
 800de2c:	0800fcf1 	.word	0x0800fcf1
 800de30:	0800fd02 	.word	0x0800fd02

0800de34 <__hi0bits>:
 800de34:	0003      	movs	r3, r0
 800de36:	0c02      	lsrs	r2, r0, #16
 800de38:	2000      	movs	r0, #0
 800de3a:	4282      	cmp	r2, r0
 800de3c:	d101      	bne.n	800de42 <__hi0bits+0xe>
 800de3e:	041b      	lsls	r3, r3, #16
 800de40:	3010      	adds	r0, #16
 800de42:	0e1a      	lsrs	r2, r3, #24
 800de44:	d101      	bne.n	800de4a <__hi0bits+0x16>
 800de46:	3008      	adds	r0, #8
 800de48:	021b      	lsls	r3, r3, #8
 800de4a:	0f1a      	lsrs	r2, r3, #28
 800de4c:	d101      	bne.n	800de52 <__hi0bits+0x1e>
 800de4e:	3004      	adds	r0, #4
 800de50:	011b      	lsls	r3, r3, #4
 800de52:	0f9a      	lsrs	r2, r3, #30
 800de54:	d101      	bne.n	800de5a <__hi0bits+0x26>
 800de56:	3002      	adds	r0, #2
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	db03      	blt.n	800de66 <__hi0bits+0x32>
 800de5e:	3001      	adds	r0, #1
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	d400      	bmi.n	800de66 <__hi0bits+0x32>
 800de64:	2020      	movs	r0, #32
 800de66:	4770      	bx	lr

0800de68 <__lo0bits>:
 800de68:	6803      	ldr	r3, [r0, #0]
 800de6a:	0002      	movs	r2, r0
 800de6c:	2107      	movs	r1, #7
 800de6e:	0018      	movs	r0, r3
 800de70:	4008      	ands	r0, r1
 800de72:	420b      	tst	r3, r1
 800de74:	d00d      	beq.n	800de92 <__lo0bits+0x2a>
 800de76:	3906      	subs	r1, #6
 800de78:	2000      	movs	r0, #0
 800de7a:	420b      	tst	r3, r1
 800de7c:	d105      	bne.n	800de8a <__lo0bits+0x22>
 800de7e:	3002      	adds	r0, #2
 800de80:	4203      	tst	r3, r0
 800de82:	d003      	beq.n	800de8c <__lo0bits+0x24>
 800de84:	40cb      	lsrs	r3, r1
 800de86:	0008      	movs	r0, r1
 800de88:	6013      	str	r3, [r2, #0]
 800de8a:	4770      	bx	lr
 800de8c:	089b      	lsrs	r3, r3, #2
 800de8e:	6013      	str	r3, [r2, #0]
 800de90:	e7fb      	b.n	800de8a <__lo0bits+0x22>
 800de92:	b299      	uxth	r1, r3
 800de94:	2900      	cmp	r1, #0
 800de96:	d101      	bne.n	800de9c <__lo0bits+0x34>
 800de98:	2010      	movs	r0, #16
 800de9a:	0c1b      	lsrs	r3, r3, #16
 800de9c:	b2d9      	uxtb	r1, r3
 800de9e:	2900      	cmp	r1, #0
 800dea0:	d101      	bne.n	800dea6 <__lo0bits+0x3e>
 800dea2:	3008      	adds	r0, #8
 800dea4:	0a1b      	lsrs	r3, r3, #8
 800dea6:	0719      	lsls	r1, r3, #28
 800dea8:	d101      	bne.n	800deae <__lo0bits+0x46>
 800deaa:	3004      	adds	r0, #4
 800deac:	091b      	lsrs	r3, r3, #4
 800deae:	0799      	lsls	r1, r3, #30
 800deb0:	d101      	bne.n	800deb6 <__lo0bits+0x4e>
 800deb2:	3002      	adds	r0, #2
 800deb4:	089b      	lsrs	r3, r3, #2
 800deb6:	07d9      	lsls	r1, r3, #31
 800deb8:	d4e9      	bmi.n	800de8e <__lo0bits+0x26>
 800deba:	3001      	adds	r0, #1
 800debc:	085b      	lsrs	r3, r3, #1
 800debe:	d1e6      	bne.n	800de8e <__lo0bits+0x26>
 800dec0:	2020      	movs	r0, #32
 800dec2:	e7e2      	b.n	800de8a <__lo0bits+0x22>

0800dec4 <__i2b>:
 800dec4:	b510      	push	{r4, lr}
 800dec6:	000c      	movs	r4, r1
 800dec8:	2101      	movs	r1, #1
 800deca:	f7ff ff07 	bl	800dcdc <_Balloc>
 800dece:	2800      	cmp	r0, #0
 800ded0:	d106      	bne.n	800dee0 <__i2b+0x1c>
 800ded2:	21a0      	movs	r1, #160	; 0xa0
 800ded4:	0002      	movs	r2, r0
 800ded6:	4b04      	ldr	r3, [pc, #16]	; (800dee8 <__i2b+0x24>)
 800ded8:	4804      	ldr	r0, [pc, #16]	; (800deec <__i2b+0x28>)
 800deda:	0049      	lsls	r1, r1, #1
 800dedc:	f7ff f80a 	bl	800cef4 <__assert_func>
 800dee0:	2301      	movs	r3, #1
 800dee2:	6144      	str	r4, [r0, #20]
 800dee4:	6103      	str	r3, [r0, #16]
 800dee6:	bd10      	pop	{r4, pc}
 800dee8:	0800fcf1 	.word	0x0800fcf1
 800deec:	0800fd02 	.word	0x0800fd02

0800def0 <__multiply>:
 800def0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800def2:	690b      	ldr	r3, [r1, #16]
 800def4:	0014      	movs	r4, r2
 800def6:	6912      	ldr	r2, [r2, #16]
 800def8:	000d      	movs	r5, r1
 800defa:	b089      	sub	sp, #36	; 0x24
 800defc:	4293      	cmp	r3, r2
 800defe:	da01      	bge.n	800df04 <__multiply+0x14>
 800df00:	0025      	movs	r5, r4
 800df02:	000c      	movs	r4, r1
 800df04:	692f      	ldr	r7, [r5, #16]
 800df06:	6926      	ldr	r6, [r4, #16]
 800df08:	6869      	ldr	r1, [r5, #4]
 800df0a:	19bb      	adds	r3, r7, r6
 800df0c:	9302      	str	r3, [sp, #8]
 800df0e:	68ab      	ldr	r3, [r5, #8]
 800df10:	19ba      	adds	r2, r7, r6
 800df12:	4293      	cmp	r3, r2
 800df14:	da00      	bge.n	800df18 <__multiply+0x28>
 800df16:	3101      	adds	r1, #1
 800df18:	f7ff fee0 	bl	800dcdc <_Balloc>
 800df1c:	9001      	str	r0, [sp, #4]
 800df1e:	2800      	cmp	r0, #0
 800df20:	d106      	bne.n	800df30 <__multiply+0x40>
 800df22:	215e      	movs	r1, #94	; 0x5e
 800df24:	0002      	movs	r2, r0
 800df26:	4b48      	ldr	r3, [pc, #288]	; (800e048 <__multiply+0x158>)
 800df28:	4848      	ldr	r0, [pc, #288]	; (800e04c <__multiply+0x15c>)
 800df2a:	31ff      	adds	r1, #255	; 0xff
 800df2c:	f7fe ffe2 	bl	800cef4 <__assert_func>
 800df30:	9b01      	ldr	r3, [sp, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	3314      	adds	r3, #20
 800df36:	469c      	mov	ip, r3
 800df38:	19bb      	adds	r3, r7, r6
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	4463      	add	r3, ip
 800df3e:	9303      	str	r3, [sp, #12]
 800df40:	4663      	mov	r3, ip
 800df42:	9903      	ldr	r1, [sp, #12]
 800df44:	428b      	cmp	r3, r1
 800df46:	d32c      	bcc.n	800dfa2 <__multiply+0xb2>
 800df48:	002b      	movs	r3, r5
 800df4a:	0022      	movs	r2, r4
 800df4c:	3314      	adds	r3, #20
 800df4e:	00bf      	lsls	r7, r7, #2
 800df50:	3214      	adds	r2, #20
 800df52:	9306      	str	r3, [sp, #24]
 800df54:	00b6      	lsls	r6, r6, #2
 800df56:	19db      	adds	r3, r3, r7
 800df58:	9304      	str	r3, [sp, #16]
 800df5a:	1993      	adds	r3, r2, r6
 800df5c:	9307      	str	r3, [sp, #28]
 800df5e:	2304      	movs	r3, #4
 800df60:	9305      	str	r3, [sp, #20]
 800df62:	002b      	movs	r3, r5
 800df64:	9904      	ldr	r1, [sp, #16]
 800df66:	3315      	adds	r3, #21
 800df68:	9200      	str	r2, [sp, #0]
 800df6a:	4299      	cmp	r1, r3
 800df6c:	d305      	bcc.n	800df7a <__multiply+0x8a>
 800df6e:	1b4b      	subs	r3, r1, r5
 800df70:	3b15      	subs	r3, #21
 800df72:	089b      	lsrs	r3, r3, #2
 800df74:	3301      	adds	r3, #1
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	9305      	str	r3, [sp, #20]
 800df7a:	9b07      	ldr	r3, [sp, #28]
 800df7c:	9a00      	ldr	r2, [sp, #0]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d311      	bcc.n	800dfa6 <__multiply+0xb6>
 800df82:	9b02      	ldr	r3, [sp, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	dd06      	ble.n	800df96 <__multiply+0xa6>
 800df88:	9b03      	ldr	r3, [sp, #12]
 800df8a:	3b04      	subs	r3, #4
 800df8c:	9303      	str	r3, [sp, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d053      	beq.n	800e03e <__multiply+0x14e>
 800df96:	9b01      	ldr	r3, [sp, #4]
 800df98:	9a02      	ldr	r2, [sp, #8]
 800df9a:	0018      	movs	r0, r3
 800df9c:	611a      	str	r2, [r3, #16]
 800df9e:	b009      	add	sp, #36	; 0x24
 800dfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfa2:	c304      	stmia	r3!, {r2}
 800dfa4:	e7cd      	b.n	800df42 <__multiply+0x52>
 800dfa6:	9b00      	ldr	r3, [sp, #0]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	b298      	uxth	r0, r3
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d01b      	beq.n	800dfe8 <__multiply+0xf8>
 800dfb0:	4667      	mov	r7, ip
 800dfb2:	2400      	movs	r4, #0
 800dfb4:	9e06      	ldr	r6, [sp, #24]
 800dfb6:	ce02      	ldmia	r6!, {r1}
 800dfb8:	683a      	ldr	r2, [r7, #0]
 800dfba:	b28b      	uxth	r3, r1
 800dfbc:	4343      	muls	r3, r0
 800dfbe:	b292      	uxth	r2, r2
 800dfc0:	189b      	adds	r3, r3, r2
 800dfc2:	191b      	adds	r3, r3, r4
 800dfc4:	0c0c      	lsrs	r4, r1, #16
 800dfc6:	4344      	muls	r4, r0
 800dfc8:	683a      	ldr	r2, [r7, #0]
 800dfca:	0c11      	lsrs	r1, r2, #16
 800dfcc:	1861      	adds	r1, r4, r1
 800dfce:	0c1c      	lsrs	r4, r3, #16
 800dfd0:	1909      	adds	r1, r1, r4
 800dfd2:	0c0c      	lsrs	r4, r1, #16
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	0409      	lsls	r1, r1, #16
 800dfd8:	430b      	orrs	r3, r1
 800dfda:	c708      	stmia	r7!, {r3}
 800dfdc:	9b04      	ldr	r3, [sp, #16]
 800dfde:	42b3      	cmp	r3, r6
 800dfe0:	d8e9      	bhi.n	800dfb6 <__multiply+0xc6>
 800dfe2:	4663      	mov	r3, ip
 800dfe4:	9a05      	ldr	r2, [sp, #20]
 800dfe6:	509c      	str	r4, [r3, r2]
 800dfe8:	9b00      	ldr	r3, [sp, #0]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	0c1e      	lsrs	r6, r3, #16
 800dfee:	d020      	beq.n	800e032 <__multiply+0x142>
 800dff0:	4663      	mov	r3, ip
 800dff2:	002c      	movs	r4, r5
 800dff4:	4660      	mov	r0, ip
 800dff6:	2700      	movs	r7, #0
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	3414      	adds	r4, #20
 800dffc:	6822      	ldr	r2, [r4, #0]
 800dffe:	b29b      	uxth	r3, r3
 800e000:	b291      	uxth	r1, r2
 800e002:	4371      	muls	r1, r6
 800e004:	6802      	ldr	r2, [r0, #0]
 800e006:	0c12      	lsrs	r2, r2, #16
 800e008:	1889      	adds	r1, r1, r2
 800e00a:	19cf      	adds	r7, r1, r7
 800e00c:	0439      	lsls	r1, r7, #16
 800e00e:	430b      	orrs	r3, r1
 800e010:	6003      	str	r3, [r0, #0]
 800e012:	cc02      	ldmia	r4!, {r1}
 800e014:	6843      	ldr	r3, [r0, #4]
 800e016:	0c09      	lsrs	r1, r1, #16
 800e018:	4371      	muls	r1, r6
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	0c3f      	lsrs	r7, r7, #16
 800e01e:	18cb      	adds	r3, r1, r3
 800e020:	9a04      	ldr	r2, [sp, #16]
 800e022:	19db      	adds	r3, r3, r7
 800e024:	0c1f      	lsrs	r7, r3, #16
 800e026:	3004      	adds	r0, #4
 800e028:	42a2      	cmp	r2, r4
 800e02a:	d8e7      	bhi.n	800dffc <__multiply+0x10c>
 800e02c:	4662      	mov	r2, ip
 800e02e:	9905      	ldr	r1, [sp, #20]
 800e030:	5053      	str	r3, [r2, r1]
 800e032:	9b00      	ldr	r3, [sp, #0]
 800e034:	3304      	adds	r3, #4
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	2304      	movs	r3, #4
 800e03a:	449c      	add	ip, r3
 800e03c:	e79d      	b.n	800df7a <__multiply+0x8a>
 800e03e:	9b02      	ldr	r3, [sp, #8]
 800e040:	3b01      	subs	r3, #1
 800e042:	9302      	str	r3, [sp, #8]
 800e044:	e79d      	b.n	800df82 <__multiply+0x92>
 800e046:	46c0      	nop			; (mov r8, r8)
 800e048:	0800fcf1 	.word	0x0800fcf1
 800e04c:	0800fd02 	.word	0x0800fd02

0800e050 <__pow5mult>:
 800e050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e052:	2303      	movs	r3, #3
 800e054:	0015      	movs	r5, r2
 800e056:	0007      	movs	r7, r0
 800e058:	000e      	movs	r6, r1
 800e05a:	401a      	ands	r2, r3
 800e05c:	421d      	tst	r5, r3
 800e05e:	d008      	beq.n	800e072 <__pow5mult+0x22>
 800e060:	4925      	ldr	r1, [pc, #148]	; (800e0f8 <__pow5mult+0xa8>)
 800e062:	3a01      	subs	r2, #1
 800e064:	0092      	lsls	r2, r2, #2
 800e066:	5852      	ldr	r2, [r2, r1]
 800e068:	2300      	movs	r3, #0
 800e06a:	0031      	movs	r1, r6
 800e06c:	f7ff fe9e 	bl	800ddac <__multadd>
 800e070:	0006      	movs	r6, r0
 800e072:	10ad      	asrs	r5, r5, #2
 800e074:	d03d      	beq.n	800e0f2 <__pow5mult+0xa2>
 800e076:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e078:	2c00      	cmp	r4, #0
 800e07a:	d10f      	bne.n	800e09c <__pow5mult+0x4c>
 800e07c:	2010      	movs	r0, #16
 800e07e:	f7fe f889 	bl	800c194 <malloc>
 800e082:	1e02      	subs	r2, r0, #0
 800e084:	6278      	str	r0, [r7, #36]	; 0x24
 800e086:	d105      	bne.n	800e094 <__pow5mult+0x44>
 800e088:	21d7      	movs	r1, #215	; 0xd7
 800e08a:	4b1c      	ldr	r3, [pc, #112]	; (800e0fc <__pow5mult+0xac>)
 800e08c:	481c      	ldr	r0, [pc, #112]	; (800e100 <__pow5mult+0xb0>)
 800e08e:	0049      	lsls	r1, r1, #1
 800e090:	f7fe ff30 	bl	800cef4 <__assert_func>
 800e094:	6044      	str	r4, [r0, #4]
 800e096:	6084      	str	r4, [r0, #8]
 800e098:	6004      	str	r4, [r0, #0]
 800e09a:	60c4      	str	r4, [r0, #12]
 800e09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09e:	689c      	ldr	r4, [r3, #8]
 800e0a0:	9301      	str	r3, [sp, #4]
 800e0a2:	2c00      	cmp	r4, #0
 800e0a4:	d108      	bne.n	800e0b8 <__pow5mult+0x68>
 800e0a6:	0038      	movs	r0, r7
 800e0a8:	4916      	ldr	r1, [pc, #88]	; (800e104 <__pow5mult+0xb4>)
 800e0aa:	f7ff ff0b 	bl	800dec4 <__i2b>
 800e0ae:	9b01      	ldr	r3, [sp, #4]
 800e0b0:	0004      	movs	r4, r0
 800e0b2:	6098      	str	r0, [r3, #8]
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	6003      	str	r3, [r0, #0]
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	421d      	tst	r5, r3
 800e0bc:	d00a      	beq.n	800e0d4 <__pow5mult+0x84>
 800e0be:	0031      	movs	r1, r6
 800e0c0:	0022      	movs	r2, r4
 800e0c2:	0038      	movs	r0, r7
 800e0c4:	f7ff ff14 	bl	800def0 <__multiply>
 800e0c8:	0031      	movs	r1, r6
 800e0ca:	9001      	str	r0, [sp, #4]
 800e0cc:	0038      	movs	r0, r7
 800e0ce:	f7ff fe49 	bl	800dd64 <_Bfree>
 800e0d2:	9e01      	ldr	r6, [sp, #4]
 800e0d4:	106d      	asrs	r5, r5, #1
 800e0d6:	d00c      	beq.n	800e0f2 <__pow5mult+0xa2>
 800e0d8:	6820      	ldr	r0, [r4, #0]
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d107      	bne.n	800e0ee <__pow5mult+0x9e>
 800e0de:	0022      	movs	r2, r4
 800e0e0:	0021      	movs	r1, r4
 800e0e2:	0038      	movs	r0, r7
 800e0e4:	f7ff ff04 	bl	800def0 <__multiply>
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	6020      	str	r0, [r4, #0]
 800e0ec:	6003      	str	r3, [r0, #0]
 800e0ee:	0004      	movs	r4, r0
 800e0f0:	e7e2      	b.n	800e0b8 <__pow5mult+0x68>
 800e0f2:	0030      	movs	r0, r6
 800e0f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e0f6:	46c0      	nop			; (mov r8, r8)
 800e0f8:	0800fe50 	.word	0x0800fe50
 800e0fc:	0800fad8 	.word	0x0800fad8
 800e100:	0800fd02 	.word	0x0800fd02
 800e104:	00000271 	.word	0x00000271

0800e108 <__lshift>:
 800e108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e10a:	000c      	movs	r4, r1
 800e10c:	0017      	movs	r7, r2
 800e10e:	6923      	ldr	r3, [r4, #16]
 800e110:	1155      	asrs	r5, r2, #5
 800e112:	b087      	sub	sp, #28
 800e114:	18eb      	adds	r3, r5, r3
 800e116:	9302      	str	r3, [sp, #8]
 800e118:	3301      	adds	r3, #1
 800e11a:	9301      	str	r3, [sp, #4]
 800e11c:	6849      	ldr	r1, [r1, #4]
 800e11e:	68a3      	ldr	r3, [r4, #8]
 800e120:	9004      	str	r0, [sp, #16]
 800e122:	9a01      	ldr	r2, [sp, #4]
 800e124:	4293      	cmp	r3, r2
 800e126:	db10      	blt.n	800e14a <__lshift+0x42>
 800e128:	9804      	ldr	r0, [sp, #16]
 800e12a:	f7ff fdd7 	bl	800dcdc <_Balloc>
 800e12e:	2300      	movs	r3, #0
 800e130:	0002      	movs	r2, r0
 800e132:	0006      	movs	r6, r0
 800e134:	0019      	movs	r1, r3
 800e136:	3214      	adds	r2, #20
 800e138:	4298      	cmp	r0, r3
 800e13a:	d10c      	bne.n	800e156 <__lshift+0x4e>
 800e13c:	21da      	movs	r1, #218	; 0xda
 800e13e:	0002      	movs	r2, r0
 800e140:	4b26      	ldr	r3, [pc, #152]	; (800e1dc <__lshift+0xd4>)
 800e142:	4827      	ldr	r0, [pc, #156]	; (800e1e0 <__lshift+0xd8>)
 800e144:	31ff      	adds	r1, #255	; 0xff
 800e146:	f7fe fed5 	bl	800cef4 <__assert_func>
 800e14a:	3101      	adds	r1, #1
 800e14c:	005b      	lsls	r3, r3, #1
 800e14e:	e7e8      	b.n	800e122 <__lshift+0x1a>
 800e150:	0098      	lsls	r0, r3, #2
 800e152:	5011      	str	r1, [r2, r0]
 800e154:	3301      	adds	r3, #1
 800e156:	42ab      	cmp	r3, r5
 800e158:	dbfa      	blt.n	800e150 <__lshift+0x48>
 800e15a:	43eb      	mvns	r3, r5
 800e15c:	17db      	asrs	r3, r3, #31
 800e15e:	401d      	ands	r5, r3
 800e160:	211f      	movs	r1, #31
 800e162:	0023      	movs	r3, r4
 800e164:	0038      	movs	r0, r7
 800e166:	00ad      	lsls	r5, r5, #2
 800e168:	1955      	adds	r5, r2, r5
 800e16a:	6922      	ldr	r2, [r4, #16]
 800e16c:	3314      	adds	r3, #20
 800e16e:	0092      	lsls	r2, r2, #2
 800e170:	4008      	ands	r0, r1
 800e172:	4684      	mov	ip, r0
 800e174:	189a      	adds	r2, r3, r2
 800e176:	420f      	tst	r7, r1
 800e178:	d02a      	beq.n	800e1d0 <__lshift+0xc8>
 800e17a:	3101      	adds	r1, #1
 800e17c:	1a09      	subs	r1, r1, r0
 800e17e:	9105      	str	r1, [sp, #20]
 800e180:	2100      	movs	r1, #0
 800e182:	9503      	str	r5, [sp, #12]
 800e184:	4667      	mov	r7, ip
 800e186:	6818      	ldr	r0, [r3, #0]
 800e188:	40b8      	lsls	r0, r7
 800e18a:	4301      	orrs	r1, r0
 800e18c:	9803      	ldr	r0, [sp, #12]
 800e18e:	c002      	stmia	r0!, {r1}
 800e190:	cb02      	ldmia	r3!, {r1}
 800e192:	9003      	str	r0, [sp, #12]
 800e194:	9805      	ldr	r0, [sp, #20]
 800e196:	40c1      	lsrs	r1, r0
 800e198:	429a      	cmp	r2, r3
 800e19a:	d8f3      	bhi.n	800e184 <__lshift+0x7c>
 800e19c:	0020      	movs	r0, r4
 800e19e:	3015      	adds	r0, #21
 800e1a0:	2304      	movs	r3, #4
 800e1a2:	4282      	cmp	r2, r0
 800e1a4:	d304      	bcc.n	800e1b0 <__lshift+0xa8>
 800e1a6:	1b13      	subs	r3, r2, r4
 800e1a8:	3b15      	subs	r3, #21
 800e1aa:	089b      	lsrs	r3, r3, #2
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	50e9      	str	r1, [r5, r3]
 800e1b2:	2900      	cmp	r1, #0
 800e1b4:	d002      	beq.n	800e1bc <__lshift+0xb4>
 800e1b6:	9b02      	ldr	r3, [sp, #8]
 800e1b8:	3302      	adds	r3, #2
 800e1ba:	9301      	str	r3, [sp, #4]
 800e1bc:	9b01      	ldr	r3, [sp, #4]
 800e1be:	9804      	ldr	r0, [sp, #16]
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	0021      	movs	r1, r4
 800e1c4:	6133      	str	r3, [r6, #16]
 800e1c6:	f7ff fdcd 	bl	800dd64 <_Bfree>
 800e1ca:	0030      	movs	r0, r6
 800e1cc:	b007      	add	sp, #28
 800e1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1d0:	cb02      	ldmia	r3!, {r1}
 800e1d2:	c502      	stmia	r5!, {r1}
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d8fb      	bhi.n	800e1d0 <__lshift+0xc8>
 800e1d8:	e7f0      	b.n	800e1bc <__lshift+0xb4>
 800e1da:	46c0      	nop			; (mov r8, r8)
 800e1dc:	0800fcf1 	.word	0x0800fcf1
 800e1e0:	0800fd02 	.word	0x0800fd02

0800e1e4 <__mcmp>:
 800e1e4:	6902      	ldr	r2, [r0, #16]
 800e1e6:	690b      	ldr	r3, [r1, #16]
 800e1e8:	b530      	push	{r4, r5, lr}
 800e1ea:	0004      	movs	r4, r0
 800e1ec:	1ad0      	subs	r0, r2, r3
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d10d      	bne.n	800e20e <__mcmp+0x2a>
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	3414      	adds	r4, #20
 800e1f6:	3114      	adds	r1, #20
 800e1f8:	18e2      	adds	r2, r4, r3
 800e1fa:	18c9      	adds	r1, r1, r3
 800e1fc:	3a04      	subs	r2, #4
 800e1fe:	3904      	subs	r1, #4
 800e200:	6815      	ldr	r5, [r2, #0]
 800e202:	680b      	ldr	r3, [r1, #0]
 800e204:	429d      	cmp	r5, r3
 800e206:	d003      	beq.n	800e210 <__mcmp+0x2c>
 800e208:	2001      	movs	r0, #1
 800e20a:	429d      	cmp	r5, r3
 800e20c:	d303      	bcc.n	800e216 <__mcmp+0x32>
 800e20e:	bd30      	pop	{r4, r5, pc}
 800e210:	4294      	cmp	r4, r2
 800e212:	d3f3      	bcc.n	800e1fc <__mcmp+0x18>
 800e214:	e7fb      	b.n	800e20e <__mcmp+0x2a>
 800e216:	4240      	negs	r0, r0
 800e218:	e7f9      	b.n	800e20e <__mcmp+0x2a>
	...

0800e21c <__mdiff>:
 800e21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e21e:	000e      	movs	r6, r1
 800e220:	0007      	movs	r7, r0
 800e222:	0011      	movs	r1, r2
 800e224:	0030      	movs	r0, r6
 800e226:	b087      	sub	sp, #28
 800e228:	0014      	movs	r4, r2
 800e22a:	f7ff ffdb 	bl	800e1e4 <__mcmp>
 800e22e:	1e05      	subs	r5, r0, #0
 800e230:	d110      	bne.n	800e254 <__mdiff+0x38>
 800e232:	0001      	movs	r1, r0
 800e234:	0038      	movs	r0, r7
 800e236:	f7ff fd51 	bl	800dcdc <_Balloc>
 800e23a:	1e02      	subs	r2, r0, #0
 800e23c:	d104      	bne.n	800e248 <__mdiff+0x2c>
 800e23e:	4b40      	ldr	r3, [pc, #256]	; (800e340 <__mdiff+0x124>)
 800e240:	4940      	ldr	r1, [pc, #256]	; (800e344 <__mdiff+0x128>)
 800e242:	4841      	ldr	r0, [pc, #260]	; (800e348 <__mdiff+0x12c>)
 800e244:	f7fe fe56 	bl	800cef4 <__assert_func>
 800e248:	2301      	movs	r3, #1
 800e24a:	6145      	str	r5, [r0, #20]
 800e24c:	6103      	str	r3, [r0, #16]
 800e24e:	0010      	movs	r0, r2
 800e250:	b007      	add	sp, #28
 800e252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e254:	2301      	movs	r3, #1
 800e256:	9301      	str	r3, [sp, #4]
 800e258:	2800      	cmp	r0, #0
 800e25a:	db04      	blt.n	800e266 <__mdiff+0x4a>
 800e25c:	0023      	movs	r3, r4
 800e25e:	0034      	movs	r4, r6
 800e260:	001e      	movs	r6, r3
 800e262:	2300      	movs	r3, #0
 800e264:	9301      	str	r3, [sp, #4]
 800e266:	0038      	movs	r0, r7
 800e268:	6861      	ldr	r1, [r4, #4]
 800e26a:	f7ff fd37 	bl	800dcdc <_Balloc>
 800e26e:	1e02      	subs	r2, r0, #0
 800e270:	d103      	bne.n	800e27a <__mdiff+0x5e>
 800e272:	2190      	movs	r1, #144	; 0x90
 800e274:	4b32      	ldr	r3, [pc, #200]	; (800e340 <__mdiff+0x124>)
 800e276:	0089      	lsls	r1, r1, #2
 800e278:	e7e3      	b.n	800e242 <__mdiff+0x26>
 800e27a:	9b01      	ldr	r3, [sp, #4]
 800e27c:	2700      	movs	r7, #0
 800e27e:	60c3      	str	r3, [r0, #12]
 800e280:	6920      	ldr	r0, [r4, #16]
 800e282:	3414      	adds	r4, #20
 800e284:	9401      	str	r4, [sp, #4]
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	0084      	lsls	r4, r0, #2
 800e28a:	191b      	adds	r3, r3, r4
 800e28c:	0034      	movs	r4, r6
 800e28e:	9302      	str	r3, [sp, #8]
 800e290:	6933      	ldr	r3, [r6, #16]
 800e292:	3414      	adds	r4, #20
 800e294:	0099      	lsls	r1, r3, #2
 800e296:	1863      	adds	r3, r4, r1
 800e298:	9303      	str	r3, [sp, #12]
 800e29a:	0013      	movs	r3, r2
 800e29c:	3314      	adds	r3, #20
 800e29e:	469c      	mov	ip, r3
 800e2a0:	9305      	str	r3, [sp, #20]
 800e2a2:	9b01      	ldr	r3, [sp, #4]
 800e2a4:	9304      	str	r3, [sp, #16]
 800e2a6:	9b04      	ldr	r3, [sp, #16]
 800e2a8:	cc02      	ldmia	r4!, {r1}
 800e2aa:	cb20      	ldmia	r3!, {r5}
 800e2ac:	9304      	str	r3, [sp, #16]
 800e2ae:	b2ab      	uxth	r3, r5
 800e2b0:	19df      	adds	r7, r3, r7
 800e2b2:	b28b      	uxth	r3, r1
 800e2b4:	1afb      	subs	r3, r7, r3
 800e2b6:	0c09      	lsrs	r1, r1, #16
 800e2b8:	0c2d      	lsrs	r5, r5, #16
 800e2ba:	1a6d      	subs	r5, r5, r1
 800e2bc:	1419      	asrs	r1, r3, #16
 800e2be:	186d      	adds	r5, r5, r1
 800e2c0:	4661      	mov	r1, ip
 800e2c2:	142f      	asrs	r7, r5, #16
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	042d      	lsls	r5, r5, #16
 800e2c8:	432b      	orrs	r3, r5
 800e2ca:	c108      	stmia	r1!, {r3}
 800e2cc:	9b03      	ldr	r3, [sp, #12]
 800e2ce:	468c      	mov	ip, r1
 800e2d0:	42a3      	cmp	r3, r4
 800e2d2:	d8e8      	bhi.n	800e2a6 <__mdiff+0x8a>
 800e2d4:	0031      	movs	r1, r6
 800e2d6:	9c03      	ldr	r4, [sp, #12]
 800e2d8:	3115      	adds	r1, #21
 800e2da:	2304      	movs	r3, #4
 800e2dc:	428c      	cmp	r4, r1
 800e2de:	d304      	bcc.n	800e2ea <__mdiff+0xce>
 800e2e0:	1ba3      	subs	r3, r4, r6
 800e2e2:	3b15      	subs	r3, #21
 800e2e4:	089b      	lsrs	r3, r3, #2
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	9901      	ldr	r1, [sp, #4]
 800e2ec:	18cc      	adds	r4, r1, r3
 800e2ee:	9905      	ldr	r1, [sp, #20]
 800e2f0:	0026      	movs	r6, r4
 800e2f2:	18cb      	adds	r3, r1, r3
 800e2f4:	469c      	mov	ip, r3
 800e2f6:	9902      	ldr	r1, [sp, #8]
 800e2f8:	428e      	cmp	r6, r1
 800e2fa:	d310      	bcc.n	800e31e <__mdiff+0x102>
 800e2fc:	9e02      	ldr	r6, [sp, #8]
 800e2fe:	1ee1      	subs	r1, r4, #3
 800e300:	2500      	movs	r5, #0
 800e302:	428e      	cmp	r6, r1
 800e304:	d304      	bcc.n	800e310 <__mdiff+0xf4>
 800e306:	0031      	movs	r1, r6
 800e308:	3103      	adds	r1, #3
 800e30a:	1b0c      	subs	r4, r1, r4
 800e30c:	08a4      	lsrs	r4, r4, #2
 800e30e:	00a5      	lsls	r5, r4, #2
 800e310:	195b      	adds	r3, r3, r5
 800e312:	3b04      	subs	r3, #4
 800e314:	6819      	ldr	r1, [r3, #0]
 800e316:	2900      	cmp	r1, #0
 800e318:	d00f      	beq.n	800e33a <__mdiff+0x11e>
 800e31a:	6110      	str	r0, [r2, #16]
 800e31c:	e797      	b.n	800e24e <__mdiff+0x32>
 800e31e:	ce02      	ldmia	r6!, {r1}
 800e320:	b28d      	uxth	r5, r1
 800e322:	19ed      	adds	r5, r5, r7
 800e324:	0c0f      	lsrs	r7, r1, #16
 800e326:	1429      	asrs	r1, r5, #16
 800e328:	1879      	adds	r1, r7, r1
 800e32a:	140f      	asrs	r7, r1, #16
 800e32c:	b2ad      	uxth	r5, r5
 800e32e:	0409      	lsls	r1, r1, #16
 800e330:	430d      	orrs	r5, r1
 800e332:	4661      	mov	r1, ip
 800e334:	c120      	stmia	r1!, {r5}
 800e336:	468c      	mov	ip, r1
 800e338:	e7dd      	b.n	800e2f6 <__mdiff+0xda>
 800e33a:	3801      	subs	r0, #1
 800e33c:	e7e9      	b.n	800e312 <__mdiff+0xf6>
 800e33e:	46c0      	nop			; (mov r8, r8)
 800e340:	0800fcf1 	.word	0x0800fcf1
 800e344:	00000232 	.word	0x00000232
 800e348:	0800fd02 	.word	0x0800fd02

0800e34c <__d2b>:
 800e34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e34e:	2101      	movs	r1, #1
 800e350:	0014      	movs	r4, r2
 800e352:	001e      	movs	r6, r3
 800e354:	9f08      	ldr	r7, [sp, #32]
 800e356:	f7ff fcc1 	bl	800dcdc <_Balloc>
 800e35a:	1e05      	subs	r5, r0, #0
 800e35c:	d105      	bne.n	800e36a <__d2b+0x1e>
 800e35e:	0002      	movs	r2, r0
 800e360:	4b26      	ldr	r3, [pc, #152]	; (800e3fc <__d2b+0xb0>)
 800e362:	4927      	ldr	r1, [pc, #156]	; (800e400 <__d2b+0xb4>)
 800e364:	4827      	ldr	r0, [pc, #156]	; (800e404 <__d2b+0xb8>)
 800e366:	f7fe fdc5 	bl	800cef4 <__assert_func>
 800e36a:	0333      	lsls	r3, r6, #12
 800e36c:	0076      	lsls	r6, r6, #1
 800e36e:	0b1b      	lsrs	r3, r3, #12
 800e370:	0d76      	lsrs	r6, r6, #21
 800e372:	d124      	bne.n	800e3be <__d2b+0x72>
 800e374:	9301      	str	r3, [sp, #4]
 800e376:	2c00      	cmp	r4, #0
 800e378:	d027      	beq.n	800e3ca <__d2b+0x7e>
 800e37a:	4668      	mov	r0, sp
 800e37c:	9400      	str	r4, [sp, #0]
 800e37e:	f7ff fd73 	bl	800de68 <__lo0bits>
 800e382:	9c00      	ldr	r4, [sp, #0]
 800e384:	2800      	cmp	r0, #0
 800e386:	d01e      	beq.n	800e3c6 <__d2b+0x7a>
 800e388:	9b01      	ldr	r3, [sp, #4]
 800e38a:	2120      	movs	r1, #32
 800e38c:	001a      	movs	r2, r3
 800e38e:	1a09      	subs	r1, r1, r0
 800e390:	408a      	lsls	r2, r1
 800e392:	40c3      	lsrs	r3, r0
 800e394:	4322      	orrs	r2, r4
 800e396:	616a      	str	r2, [r5, #20]
 800e398:	9301      	str	r3, [sp, #4]
 800e39a:	9c01      	ldr	r4, [sp, #4]
 800e39c:	61ac      	str	r4, [r5, #24]
 800e39e:	1e63      	subs	r3, r4, #1
 800e3a0:	419c      	sbcs	r4, r3
 800e3a2:	3401      	adds	r4, #1
 800e3a4:	612c      	str	r4, [r5, #16]
 800e3a6:	2e00      	cmp	r6, #0
 800e3a8:	d018      	beq.n	800e3dc <__d2b+0x90>
 800e3aa:	4b17      	ldr	r3, [pc, #92]	; (800e408 <__d2b+0xbc>)
 800e3ac:	18f6      	adds	r6, r6, r3
 800e3ae:	2335      	movs	r3, #53	; 0x35
 800e3b0:	1836      	adds	r6, r6, r0
 800e3b2:	1a18      	subs	r0, r3, r0
 800e3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3b6:	603e      	str	r6, [r7, #0]
 800e3b8:	6018      	str	r0, [r3, #0]
 800e3ba:	0028      	movs	r0, r5
 800e3bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e3be:	2280      	movs	r2, #128	; 0x80
 800e3c0:	0352      	lsls	r2, r2, #13
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	e7d6      	b.n	800e374 <__d2b+0x28>
 800e3c6:	616c      	str	r4, [r5, #20]
 800e3c8:	e7e7      	b.n	800e39a <__d2b+0x4e>
 800e3ca:	a801      	add	r0, sp, #4
 800e3cc:	f7ff fd4c 	bl	800de68 <__lo0bits>
 800e3d0:	2401      	movs	r4, #1
 800e3d2:	9b01      	ldr	r3, [sp, #4]
 800e3d4:	612c      	str	r4, [r5, #16]
 800e3d6:	616b      	str	r3, [r5, #20]
 800e3d8:	3020      	adds	r0, #32
 800e3da:	e7e4      	b.n	800e3a6 <__d2b+0x5a>
 800e3dc:	4b0b      	ldr	r3, [pc, #44]	; (800e40c <__d2b+0xc0>)
 800e3de:	18c0      	adds	r0, r0, r3
 800e3e0:	4b0b      	ldr	r3, [pc, #44]	; (800e410 <__d2b+0xc4>)
 800e3e2:	6038      	str	r0, [r7, #0]
 800e3e4:	18e3      	adds	r3, r4, r3
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	18eb      	adds	r3, r5, r3
 800e3ea:	6958      	ldr	r0, [r3, #20]
 800e3ec:	f7ff fd22 	bl	800de34 <__hi0bits>
 800e3f0:	0164      	lsls	r4, r4, #5
 800e3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f4:	1a24      	subs	r4, r4, r0
 800e3f6:	601c      	str	r4, [r3, #0]
 800e3f8:	e7df      	b.n	800e3ba <__d2b+0x6e>
 800e3fa:	46c0      	nop			; (mov r8, r8)
 800e3fc:	0800fcf1 	.word	0x0800fcf1
 800e400:	0000030a 	.word	0x0000030a
 800e404:	0800fd02 	.word	0x0800fd02
 800e408:	fffffbcd 	.word	0xfffffbcd
 800e40c:	fffffbce 	.word	0xfffffbce
 800e410:	3fffffff 	.word	0x3fffffff

0800e414 <_calloc_r>:
 800e414:	b570      	push	{r4, r5, r6, lr}
 800e416:	0c13      	lsrs	r3, r2, #16
 800e418:	0c0d      	lsrs	r5, r1, #16
 800e41a:	d11e      	bne.n	800e45a <_calloc_r+0x46>
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10c      	bne.n	800e43a <_calloc_r+0x26>
 800e420:	b289      	uxth	r1, r1
 800e422:	b294      	uxth	r4, r2
 800e424:	434c      	muls	r4, r1
 800e426:	0021      	movs	r1, r4
 800e428:	f7fd ff3c 	bl	800c2a4 <_malloc_r>
 800e42c:	1e05      	subs	r5, r0, #0
 800e42e:	d01b      	beq.n	800e468 <_calloc_r+0x54>
 800e430:	0022      	movs	r2, r4
 800e432:	2100      	movs	r1, #0
 800e434:	f7fd fec1 	bl	800c1ba <memset>
 800e438:	e016      	b.n	800e468 <_calloc_r+0x54>
 800e43a:	1c1d      	adds	r5, r3, #0
 800e43c:	1c0b      	adds	r3, r1, #0
 800e43e:	b292      	uxth	r2, r2
 800e440:	b289      	uxth	r1, r1
 800e442:	b29c      	uxth	r4, r3
 800e444:	4351      	muls	r1, r2
 800e446:	b2ab      	uxth	r3, r5
 800e448:	4363      	muls	r3, r4
 800e44a:	0c0c      	lsrs	r4, r1, #16
 800e44c:	191c      	adds	r4, r3, r4
 800e44e:	0c22      	lsrs	r2, r4, #16
 800e450:	d107      	bne.n	800e462 <_calloc_r+0x4e>
 800e452:	0424      	lsls	r4, r4, #16
 800e454:	b289      	uxth	r1, r1
 800e456:	430c      	orrs	r4, r1
 800e458:	e7e5      	b.n	800e426 <_calloc_r+0x12>
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <_calloc_r+0x4e>
 800e45e:	1c13      	adds	r3, r2, #0
 800e460:	e7ed      	b.n	800e43e <_calloc_r+0x2a>
 800e462:	230c      	movs	r3, #12
 800e464:	2500      	movs	r5, #0
 800e466:	6003      	str	r3, [r0, #0]
 800e468:	0028      	movs	r0, r5
 800e46a:	bd70      	pop	{r4, r5, r6, pc}

0800e46c <__ssputs_r>:
 800e46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e46e:	688e      	ldr	r6, [r1, #8]
 800e470:	b085      	sub	sp, #20
 800e472:	0007      	movs	r7, r0
 800e474:	000c      	movs	r4, r1
 800e476:	9203      	str	r2, [sp, #12]
 800e478:	9301      	str	r3, [sp, #4]
 800e47a:	429e      	cmp	r6, r3
 800e47c:	d83c      	bhi.n	800e4f8 <__ssputs_r+0x8c>
 800e47e:	2390      	movs	r3, #144	; 0x90
 800e480:	898a      	ldrh	r2, [r1, #12]
 800e482:	00db      	lsls	r3, r3, #3
 800e484:	421a      	tst	r2, r3
 800e486:	d034      	beq.n	800e4f2 <__ssputs_r+0x86>
 800e488:	6909      	ldr	r1, [r1, #16]
 800e48a:	6823      	ldr	r3, [r4, #0]
 800e48c:	6960      	ldr	r0, [r4, #20]
 800e48e:	1a5b      	subs	r3, r3, r1
 800e490:	9302      	str	r3, [sp, #8]
 800e492:	2303      	movs	r3, #3
 800e494:	4343      	muls	r3, r0
 800e496:	0fdd      	lsrs	r5, r3, #31
 800e498:	18ed      	adds	r5, r5, r3
 800e49a:	9b01      	ldr	r3, [sp, #4]
 800e49c:	9802      	ldr	r0, [sp, #8]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	181b      	adds	r3, r3, r0
 800e4a2:	106d      	asrs	r5, r5, #1
 800e4a4:	42ab      	cmp	r3, r5
 800e4a6:	d900      	bls.n	800e4aa <__ssputs_r+0x3e>
 800e4a8:	001d      	movs	r5, r3
 800e4aa:	0553      	lsls	r3, r2, #21
 800e4ac:	d532      	bpl.n	800e514 <__ssputs_r+0xa8>
 800e4ae:	0029      	movs	r1, r5
 800e4b0:	0038      	movs	r0, r7
 800e4b2:	f7fd fef7 	bl	800c2a4 <_malloc_r>
 800e4b6:	1e06      	subs	r6, r0, #0
 800e4b8:	d109      	bne.n	800e4ce <__ssputs_r+0x62>
 800e4ba:	230c      	movs	r3, #12
 800e4bc:	603b      	str	r3, [r7, #0]
 800e4be:	2340      	movs	r3, #64	; 0x40
 800e4c0:	2001      	movs	r0, #1
 800e4c2:	89a2      	ldrh	r2, [r4, #12]
 800e4c4:	4240      	negs	r0, r0
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	81a3      	strh	r3, [r4, #12]
 800e4ca:	b005      	add	sp, #20
 800e4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4ce:	9a02      	ldr	r2, [sp, #8]
 800e4d0:	6921      	ldr	r1, [r4, #16]
 800e4d2:	f7fd fe69 	bl	800c1a8 <memcpy>
 800e4d6:	89a3      	ldrh	r3, [r4, #12]
 800e4d8:	4a14      	ldr	r2, [pc, #80]	; (800e52c <__ssputs_r+0xc0>)
 800e4da:	401a      	ands	r2, r3
 800e4dc:	2380      	movs	r3, #128	; 0x80
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	81a3      	strh	r3, [r4, #12]
 800e4e2:	9b02      	ldr	r3, [sp, #8]
 800e4e4:	6126      	str	r6, [r4, #16]
 800e4e6:	18f6      	adds	r6, r6, r3
 800e4e8:	6026      	str	r6, [r4, #0]
 800e4ea:	6165      	str	r5, [r4, #20]
 800e4ec:	9e01      	ldr	r6, [sp, #4]
 800e4ee:	1aed      	subs	r5, r5, r3
 800e4f0:	60a5      	str	r5, [r4, #8]
 800e4f2:	9b01      	ldr	r3, [sp, #4]
 800e4f4:	429e      	cmp	r6, r3
 800e4f6:	d900      	bls.n	800e4fa <__ssputs_r+0x8e>
 800e4f8:	9e01      	ldr	r6, [sp, #4]
 800e4fa:	0032      	movs	r2, r6
 800e4fc:	9903      	ldr	r1, [sp, #12]
 800e4fe:	6820      	ldr	r0, [r4, #0]
 800e500:	f000 fd9e 	bl	800f040 <memmove>
 800e504:	68a3      	ldr	r3, [r4, #8]
 800e506:	2000      	movs	r0, #0
 800e508:	1b9b      	subs	r3, r3, r6
 800e50a:	60a3      	str	r3, [r4, #8]
 800e50c:	6823      	ldr	r3, [r4, #0]
 800e50e:	199e      	adds	r6, r3, r6
 800e510:	6026      	str	r6, [r4, #0]
 800e512:	e7da      	b.n	800e4ca <__ssputs_r+0x5e>
 800e514:	002a      	movs	r2, r5
 800e516:	0038      	movs	r0, r7
 800e518:	f000 fda5 	bl	800f066 <_realloc_r>
 800e51c:	1e06      	subs	r6, r0, #0
 800e51e:	d1e0      	bne.n	800e4e2 <__ssputs_r+0x76>
 800e520:	0038      	movs	r0, r7
 800e522:	6921      	ldr	r1, [r4, #16]
 800e524:	f7fd fe52 	bl	800c1cc <_free_r>
 800e528:	e7c7      	b.n	800e4ba <__ssputs_r+0x4e>
 800e52a:	46c0      	nop			; (mov r8, r8)
 800e52c:	fffffb7f 	.word	0xfffffb7f

0800e530 <_svfiprintf_r>:
 800e530:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e532:	b0a1      	sub	sp, #132	; 0x84
 800e534:	9003      	str	r0, [sp, #12]
 800e536:	001d      	movs	r5, r3
 800e538:	898b      	ldrh	r3, [r1, #12]
 800e53a:	000f      	movs	r7, r1
 800e53c:	0016      	movs	r6, r2
 800e53e:	061b      	lsls	r3, r3, #24
 800e540:	d511      	bpl.n	800e566 <_svfiprintf_r+0x36>
 800e542:	690b      	ldr	r3, [r1, #16]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d10e      	bne.n	800e566 <_svfiprintf_r+0x36>
 800e548:	2140      	movs	r1, #64	; 0x40
 800e54a:	f7fd feab 	bl	800c2a4 <_malloc_r>
 800e54e:	6038      	str	r0, [r7, #0]
 800e550:	6138      	str	r0, [r7, #16]
 800e552:	2800      	cmp	r0, #0
 800e554:	d105      	bne.n	800e562 <_svfiprintf_r+0x32>
 800e556:	230c      	movs	r3, #12
 800e558:	9a03      	ldr	r2, [sp, #12]
 800e55a:	3801      	subs	r0, #1
 800e55c:	6013      	str	r3, [r2, #0]
 800e55e:	b021      	add	sp, #132	; 0x84
 800e560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e562:	2340      	movs	r3, #64	; 0x40
 800e564:	617b      	str	r3, [r7, #20]
 800e566:	2300      	movs	r3, #0
 800e568:	ac08      	add	r4, sp, #32
 800e56a:	6163      	str	r3, [r4, #20]
 800e56c:	3320      	adds	r3, #32
 800e56e:	7663      	strb	r3, [r4, #25]
 800e570:	3310      	adds	r3, #16
 800e572:	76a3      	strb	r3, [r4, #26]
 800e574:	9507      	str	r5, [sp, #28]
 800e576:	0035      	movs	r5, r6
 800e578:	782b      	ldrb	r3, [r5, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d001      	beq.n	800e582 <_svfiprintf_r+0x52>
 800e57e:	2b25      	cmp	r3, #37	; 0x25
 800e580:	d147      	bne.n	800e612 <_svfiprintf_r+0xe2>
 800e582:	1bab      	subs	r3, r5, r6
 800e584:	9305      	str	r3, [sp, #20]
 800e586:	42b5      	cmp	r5, r6
 800e588:	d00c      	beq.n	800e5a4 <_svfiprintf_r+0x74>
 800e58a:	0032      	movs	r2, r6
 800e58c:	0039      	movs	r1, r7
 800e58e:	9803      	ldr	r0, [sp, #12]
 800e590:	f7ff ff6c 	bl	800e46c <__ssputs_r>
 800e594:	1c43      	adds	r3, r0, #1
 800e596:	d100      	bne.n	800e59a <_svfiprintf_r+0x6a>
 800e598:	e0ae      	b.n	800e6f8 <_svfiprintf_r+0x1c8>
 800e59a:	6962      	ldr	r2, [r4, #20]
 800e59c:	9b05      	ldr	r3, [sp, #20]
 800e59e:	4694      	mov	ip, r2
 800e5a0:	4463      	add	r3, ip
 800e5a2:	6163      	str	r3, [r4, #20]
 800e5a4:	782b      	ldrb	r3, [r5, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d100      	bne.n	800e5ac <_svfiprintf_r+0x7c>
 800e5aa:	e0a5      	b.n	800e6f8 <_svfiprintf_r+0x1c8>
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	4252      	negs	r2, r2
 800e5b2:	6062      	str	r2, [r4, #4]
 800e5b4:	a904      	add	r1, sp, #16
 800e5b6:	3254      	adds	r2, #84	; 0x54
 800e5b8:	1852      	adds	r2, r2, r1
 800e5ba:	1c6e      	adds	r6, r5, #1
 800e5bc:	6023      	str	r3, [r4, #0]
 800e5be:	60e3      	str	r3, [r4, #12]
 800e5c0:	60a3      	str	r3, [r4, #8]
 800e5c2:	7013      	strb	r3, [r2, #0]
 800e5c4:	65a3      	str	r3, [r4, #88]	; 0x58
 800e5c6:	2205      	movs	r2, #5
 800e5c8:	7831      	ldrb	r1, [r6, #0]
 800e5ca:	4854      	ldr	r0, [pc, #336]	; (800e71c <_svfiprintf_r+0x1ec>)
 800e5cc:	f7ff fb6a 	bl	800dca4 <memchr>
 800e5d0:	1c75      	adds	r5, r6, #1
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	d11f      	bne.n	800e616 <_svfiprintf_r+0xe6>
 800e5d6:	6822      	ldr	r2, [r4, #0]
 800e5d8:	06d3      	lsls	r3, r2, #27
 800e5da:	d504      	bpl.n	800e5e6 <_svfiprintf_r+0xb6>
 800e5dc:	2353      	movs	r3, #83	; 0x53
 800e5de:	a904      	add	r1, sp, #16
 800e5e0:	185b      	adds	r3, r3, r1
 800e5e2:	2120      	movs	r1, #32
 800e5e4:	7019      	strb	r1, [r3, #0]
 800e5e6:	0713      	lsls	r3, r2, #28
 800e5e8:	d504      	bpl.n	800e5f4 <_svfiprintf_r+0xc4>
 800e5ea:	2353      	movs	r3, #83	; 0x53
 800e5ec:	a904      	add	r1, sp, #16
 800e5ee:	185b      	adds	r3, r3, r1
 800e5f0:	212b      	movs	r1, #43	; 0x2b
 800e5f2:	7019      	strb	r1, [r3, #0]
 800e5f4:	7833      	ldrb	r3, [r6, #0]
 800e5f6:	2b2a      	cmp	r3, #42	; 0x2a
 800e5f8:	d016      	beq.n	800e628 <_svfiprintf_r+0xf8>
 800e5fa:	0035      	movs	r5, r6
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	200a      	movs	r0, #10
 800e600:	68e3      	ldr	r3, [r4, #12]
 800e602:	782a      	ldrb	r2, [r5, #0]
 800e604:	1c6e      	adds	r6, r5, #1
 800e606:	3a30      	subs	r2, #48	; 0x30
 800e608:	2a09      	cmp	r2, #9
 800e60a:	d94e      	bls.n	800e6aa <_svfiprintf_r+0x17a>
 800e60c:	2900      	cmp	r1, #0
 800e60e:	d111      	bne.n	800e634 <_svfiprintf_r+0x104>
 800e610:	e017      	b.n	800e642 <_svfiprintf_r+0x112>
 800e612:	3501      	adds	r5, #1
 800e614:	e7b0      	b.n	800e578 <_svfiprintf_r+0x48>
 800e616:	4b41      	ldr	r3, [pc, #260]	; (800e71c <_svfiprintf_r+0x1ec>)
 800e618:	6822      	ldr	r2, [r4, #0]
 800e61a:	1ac0      	subs	r0, r0, r3
 800e61c:	2301      	movs	r3, #1
 800e61e:	4083      	lsls	r3, r0
 800e620:	4313      	orrs	r3, r2
 800e622:	002e      	movs	r6, r5
 800e624:	6023      	str	r3, [r4, #0]
 800e626:	e7ce      	b.n	800e5c6 <_svfiprintf_r+0x96>
 800e628:	9b07      	ldr	r3, [sp, #28]
 800e62a:	1d19      	adds	r1, r3, #4
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	9107      	str	r1, [sp, #28]
 800e630:	2b00      	cmp	r3, #0
 800e632:	db01      	blt.n	800e638 <_svfiprintf_r+0x108>
 800e634:	930b      	str	r3, [sp, #44]	; 0x2c
 800e636:	e004      	b.n	800e642 <_svfiprintf_r+0x112>
 800e638:	425b      	negs	r3, r3
 800e63a:	60e3      	str	r3, [r4, #12]
 800e63c:	2302      	movs	r3, #2
 800e63e:	4313      	orrs	r3, r2
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	782b      	ldrb	r3, [r5, #0]
 800e644:	2b2e      	cmp	r3, #46	; 0x2e
 800e646:	d10a      	bne.n	800e65e <_svfiprintf_r+0x12e>
 800e648:	786b      	ldrb	r3, [r5, #1]
 800e64a:	2b2a      	cmp	r3, #42	; 0x2a
 800e64c:	d135      	bne.n	800e6ba <_svfiprintf_r+0x18a>
 800e64e:	9b07      	ldr	r3, [sp, #28]
 800e650:	3502      	adds	r5, #2
 800e652:	1d1a      	adds	r2, r3, #4
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	9207      	str	r2, [sp, #28]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	db2b      	blt.n	800e6b4 <_svfiprintf_r+0x184>
 800e65c:	9309      	str	r3, [sp, #36]	; 0x24
 800e65e:	4e30      	ldr	r6, [pc, #192]	; (800e720 <_svfiprintf_r+0x1f0>)
 800e660:	2203      	movs	r2, #3
 800e662:	0030      	movs	r0, r6
 800e664:	7829      	ldrb	r1, [r5, #0]
 800e666:	f7ff fb1d 	bl	800dca4 <memchr>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d006      	beq.n	800e67c <_svfiprintf_r+0x14c>
 800e66e:	2340      	movs	r3, #64	; 0x40
 800e670:	1b80      	subs	r0, r0, r6
 800e672:	4083      	lsls	r3, r0
 800e674:	6822      	ldr	r2, [r4, #0]
 800e676:	3501      	adds	r5, #1
 800e678:	4313      	orrs	r3, r2
 800e67a:	6023      	str	r3, [r4, #0]
 800e67c:	7829      	ldrb	r1, [r5, #0]
 800e67e:	2206      	movs	r2, #6
 800e680:	4828      	ldr	r0, [pc, #160]	; (800e724 <_svfiprintf_r+0x1f4>)
 800e682:	1c6e      	adds	r6, r5, #1
 800e684:	7621      	strb	r1, [r4, #24]
 800e686:	f7ff fb0d 	bl	800dca4 <memchr>
 800e68a:	2800      	cmp	r0, #0
 800e68c:	d03c      	beq.n	800e708 <_svfiprintf_r+0x1d8>
 800e68e:	4b26      	ldr	r3, [pc, #152]	; (800e728 <_svfiprintf_r+0x1f8>)
 800e690:	2b00      	cmp	r3, #0
 800e692:	d125      	bne.n	800e6e0 <_svfiprintf_r+0x1b0>
 800e694:	2207      	movs	r2, #7
 800e696:	9b07      	ldr	r3, [sp, #28]
 800e698:	3307      	adds	r3, #7
 800e69a:	4393      	bics	r3, r2
 800e69c:	3308      	adds	r3, #8
 800e69e:	9307      	str	r3, [sp, #28]
 800e6a0:	6963      	ldr	r3, [r4, #20]
 800e6a2:	9a04      	ldr	r2, [sp, #16]
 800e6a4:	189b      	adds	r3, r3, r2
 800e6a6:	6163      	str	r3, [r4, #20]
 800e6a8:	e765      	b.n	800e576 <_svfiprintf_r+0x46>
 800e6aa:	4343      	muls	r3, r0
 800e6ac:	0035      	movs	r5, r6
 800e6ae:	2101      	movs	r1, #1
 800e6b0:	189b      	adds	r3, r3, r2
 800e6b2:	e7a6      	b.n	800e602 <_svfiprintf_r+0xd2>
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	425b      	negs	r3, r3
 800e6b8:	e7d0      	b.n	800e65c <_svfiprintf_r+0x12c>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	200a      	movs	r0, #10
 800e6be:	001a      	movs	r2, r3
 800e6c0:	3501      	adds	r5, #1
 800e6c2:	6063      	str	r3, [r4, #4]
 800e6c4:	7829      	ldrb	r1, [r5, #0]
 800e6c6:	1c6e      	adds	r6, r5, #1
 800e6c8:	3930      	subs	r1, #48	; 0x30
 800e6ca:	2909      	cmp	r1, #9
 800e6cc:	d903      	bls.n	800e6d6 <_svfiprintf_r+0x1a6>
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d0c5      	beq.n	800e65e <_svfiprintf_r+0x12e>
 800e6d2:	9209      	str	r2, [sp, #36]	; 0x24
 800e6d4:	e7c3      	b.n	800e65e <_svfiprintf_r+0x12e>
 800e6d6:	4342      	muls	r2, r0
 800e6d8:	0035      	movs	r5, r6
 800e6da:	2301      	movs	r3, #1
 800e6dc:	1852      	adds	r2, r2, r1
 800e6de:	e7f1      	b.n	800e6c4 <_svfiprintf_r+0x194>
 800e6e0:	ab07      	add	r3, sp, #28
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	003a      	movs	r2, r7
 800e6e6:	0021      	movs	r1, r4
 800e6e8:	4b10      	ldr	r3, [pc, #64]	; (800e72c <_svfiprintf_r+0x1fc>)
 800e6ea:	9803      	ldr	r0, [sp, #12]
 800e6ec:	f7fd fefa 	bl	800c4e4 <_printf_float>
 800e6f0:	9004      	str	r0, [sp, #16]
 800e6f2:	9b04      	ldr	r3, [sp, #16]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	d1d3      	bne.n	800e6a0 <_svfiprintf_r+0x170>
 800e6f8:	89bb      	ldrh	r3, [r7, #12]
 800e6fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e6fc:	065b      	lsls	r3, r3, #25
 800e6fe:	d400      	bmi.n	800e702 <_svfiprintf_r+0x1d2>
 800e700:	e72d      	b.n	800e55e <_svfiprintf_r+0x2e>
 800e702:	2001      	movs	r0, #1
 800e704:	4240      	negs	r0, r0
 800e706:	e72a      	b.n	800e55e <_svfiprintf_r+0x2e>
 800e708:	ab07      	add	r3, sp, #28
 800e70a:	9300      	str	r3, [sp, #0]
 800e70c:	003a      	movs	r2, r7
 800e70e:	0021      	movs	r1, r4
 800e710:	4b06      	ldr	r3, [pc, #24]	; (800e72c <_svfiprintf_r+0x1fc>)
 800e712:	9803      	ldr	r0, [sp, #12]
 800e714:	f7fe f998 	bl	800ca48 <_printf_i>
 800e718:	e7ea      	b.n	800e6f0 <_svfiprintf_r+0x1c0>
 800e71a:	46c0      	nop			; (mov r8, r8)
 800e71c:	0800fe5c 	.word	0x0800fe5c
 800e720:	0800fe62 	.word	0x0800fe62
 800e724:	0800fe66 	.word	0x0800fe66
 800e728:	0800c4e5 	.word	0x0800c4e5
 800e72c:	0800e46d 	.word	0x0800e46d

0800e730 <__sfputc_r>:
 800e730:	6893      	ldr	r3, [r2, #8]
 800e732:	b510      	push	{r4, lr}
 800e734:	3b01      	subs	r3, #1
 800e736:	6093      	str	r3, [r2, #8]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	da04      	bge.n	800e746 <__sfputc_r+0x16>
 800e73c:	6994      	ldr	r4, [r2, #24]
 800e73e:	42a3      	cmp	r3, r4
 800e740:	db07      	blt.n	800e752 <__sfputc_r+0x22>
 800e742:	290a      	cmp	r1, #10
 800e744:	d005      	beq.n	800e752 <__sfputc_r+0x22>
 800e746:	6813      	ldr	r3, [r2, #0]
 800e748:	1c58      	adds	r0, r3, #1
 800e74a:	6010      	str	r0, [r2, #0]
 800e74c:	7019      	strb	r1, [r3, #0]
 800e74e:	0008      	movs	r0, r1
 800e750:	bd10      	pop	{r4, pc}
 800e752:	f000 f94f 	bl	800e9f4 <__swbuf_r>
 800e756:	0001      	movs	r1, r0
 800e758:	e7f9      	b.n	800e74e <__sfputc_r+0x1e>

0800e75a <__sfputs_r>:
 800e75a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75c:	0006      	movs	r6, r0
 800e75e:	000f      	movs	r7, r1
 800e760:	0014      	movs	r4, r2
 800e762:	18d5      	adds	r5, r2, r3
 800e764:	42ac      	cmp	r4, r5
 800e766:	d101      	bne.n	800e76c <__sfputs_r+0x12>
 800e768:	2000      	movs	r0, #0
 800e76a:	e007      	b.n	800e77c <__sfputs_r+0x22>
 800e76c:	7821      	ldrb	r1, [r4, #0]
 800e76e:	003a      	movs	r2, r7
 800e770:	0030      	movs	r0, r6
 800e772:	f7ff ffdd 	bl	800e730 <__sfputc_r>
 800e776:	3401      	adds	r4, #1
 800e778:	1c43      	adds	r3, r0, #1
 800e77a:	d1f3      	bne.n	800e764 <__sfputs_r+0xa>
 800e77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e780 <_vfiprintf_r>:
 800e780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e782:	b0a1      	sub	sp, #132	; 0x84
 800e784:	0006      	movs	r6, r0
 800e786:	000c      	movs	r4, r1
 800e788:	001f      	movs	r7, r3
 800e78a:	9203      	str	r2, [sp, #12]
 800e78c:	2800      	cmp	r0, #0
 800e78e:	d004      	beq.n	800e79a <_vfiprintf_r+0x1a>
 800e790:	6983      	ldr	r3, [r0, #24]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d101      	bne.n	800e79a <_vfiprintf_r+0x1a>
 800e796:	f000 fb31 	bl	800edfc <__sinit>
 800e79a:	4b8e      	ldr	r3, [pc, #568]	; (800e9d4 <_vfiprintf_r+0x254>)
 800e79c:	429c      	cmp	r4, r3
 800e79e:	d11c      	bne.n	800e7da <_vfiprintf_r+0x5a>
 800e7a0:	6874      	ldr	r4, [r6, #4]
 800e7a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7a4:	07db      	lsls	r3, r3, #31
 800e7a6:	d405      	bmi.n	800e7b4 <_vfiprintf_r+0x34>
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	059b      	lsls	r3, r3, #22
 800e7ac:	d402      	bmi.n	800e7b4 <_vfiprintf_r+0x34>
 800e7ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7b0:	f000 fbc5 	bl	800ef3e <__retarget_lock_acquire_recursive>
 800e7b4:	89a3      	ldrh	r3, [r4, #12]
 800e7b6:	071b      	lsls	r3, r3, #28
 800e7b8:	d502      	bpl.n	800e7c0 <_vfiprintf_r+0x40>
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d11d      	bne.n	800e7fc <_vfiprintf_r+0x7c>
 800e7c0:	0021      	movs	r1, r4
 800e7c2:	0030      	movs	r0, r6
 800e7c4:	f000 f96c 	bl	800eaa0 <__swsetup_r>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d017      	beq.n	800e7fc <_vfiprintf_r+0x7c>
 800e7cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7ce:	07db      	lsls	r3, r3, #31
 800e7d0:	d50d      	bpl.n	800e7ee <_vfiprintf_r+0x6e>
 800e7d2:	2001      	movs	r0, #1
 800e7d4:	4240      	negs	r0, r0
 800e7d6:	b021      	add	sp, #132	; 0x84
 800e7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7da:	4b7f      	ldr	r3, [pc, #508]	; (800e9d8 <_vfiprintf_r+0x258>)
 800e7dc:	429c      	cmp	r4, r3
 800e7de:	d101      	bne.n	800e7e4 <_vfiprintf_r+0x64>
 800e7e0:	68b4      	ldr	r4, [r6, #8]
 800e7e2:	e7de      	b.n	800e7a2 <_vfiprintf_r+0x22>
 800e7e4:	4b7d      	ldr	r3, [pc, #500]	; (800e9dc <_vfiprintf_r+0x25c>)
 800e7e6:	429c      	cmp	r4, r3
 800e7e8:	d1db      	bne.n	800e7a2 <_vfiprintf_r+0x22>
 800e7ea:	68f4      	ldr	r4, [r6, #12]
 800e7ec:	e7d9      	b.n	800e7a2 <_vfiprintf_r+0x22>
 800e7ee:	89a3      	ldrh	r3, [r4, #12]
 800e7f0:	059b      	lsls	r3, r3, #22
 800e7f2:	d4ee      	bmi.n	800e7d2 <_vfiprintf_r+0x52>
 800e7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7f6:	f000 fba3 	bl	800ef40 <__retarget_lock_release_recursive>
 800e7fa:	e7ea      	b.n	800e7d2 <_vfiprintf_r+0x52>
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	ad08      	add	r5, sp, #32
 800e800:	616b      	str	r3, [r5, #20]
 800e802:	3320      	adds	r3, #32
 800e804:	766b      	strb	r3, [r5, #25]
 800e806:	3310      	adds	r3, #16
 800e808:	76ab      	strb	r3, [r5, #26]
 800e80a:	9707      	str	r7, [sp, #28]
 800e80c:	9f03      	ldr	r7, [sp, #12]
 800e80e:	783b      	ldrb	r3, [r7, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d001      	beq.n	800e818 <_vfiprintf_r+0x98>
 800e814:	2b25      	cmp	r3, #37	; 0x25
 800e816:	d14e      	bne.n	800e8b6 <_vfiprintf_r+0x136>
 800e818:	9b03      	ldr	r3, [sp, #12]
 800e81a:	1afb      	subs	r3, r7, r3
 800e81c:	9305      	str	r3, [sp, #20]
 800e81e:	9b03      	ldr	r3, [sp, #12]
 800e820:	429f      	cmp	r7, r3
 800e822:	d00d      	beq.n	800e840 <_vfiprintf_r+0xc0>
 800e824:	9b05      	ldr	r3, [sp, #20]
 800e826:	0021      	movs	r1, r4
 800e828:	0030      	movs	r0, r6
 800e82a:	9a03      	ldr	r2, [sp, #12]
 800e82c:	f7ff ff95 	bl	800e75a <__sfputs_r>
 800e830:	1c43      	adds	r3, r0, #1
 800e832:	d100      	bne.n	800e836 <_vfiprintf_r+0xb6>
 800e834:	e0b5      	b.n	800e9a2 <_vfiprintf_r+0x222>
 800e836:	696a      	ldr	r2, [r5, #20]
 800e838:	9b05      	ldr	r3, [sp, #20]
 800e83a:	4694      	mov	ip, r2
 800e83c:	4463      	add	r3, ip
 800e83e:	616b      	str	r3, [r5, #20]
 800e840:	783b      	ldrb	r3, [r7, #0]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d100      	bne.n	800e848 <_vfiprintf_r+0xc8>
 800e846:	e0ac      	b.n	800e9a2 <_vfiprintf_r+0x222>
 800e848:	2201      	movs	r2, #1
 800e84a:	1c7b      	adds	r3, r7, #1
 800e84c:	9303      	str	r3, [sp, #12]
 800e84e:	2300      	movs	r3, #0
 800e850:	4252      	negs	r2, r2
 800e852:	606a      	str	r2, [r5, #4]
 800e854:	a904      	add	r1, sp, #16
 800e856:	3254      	adds	r2, #84	; 0x54
 800e858:	1852      	adds	r2, r2, r1
 800e85a:	602b      	str	r3, [r5, #0]
 800e85c:	60eb      	str	r3, [r5, #12]
 800e85e:	60ab      	str	r3, [r5, #8]
 800e860:	7013      	strb	r3, [r2, #0]
 800e862:	65ab      	str	r3, [r5, #88]	; 0x58
 800e864:	9b03      	ldr	r3, [sp, #12]
 800e866:	2205      	movs	r2, #5
 800e868:	7819      	ldrb	r1, [r3, #0]
 800e86a:	485d      	ldr	r0, [pc, #372]	; (800e9e0 <_vfiprintf_r+0x260>)
 800e86c:	f7ff fa1a 	bl	800dca4 <memchr>
 800e870:	9b03      	ldr	r3, [sp, #12]
 800e872:	1c5f      	adds	r7, r3, #1
 800e874:	2800      	cmp	r0, #0
 800e876:	d120      	bne.n	800e8ba <_vfiprintf_r+0x13a>
 800e878:	682a      	ldr	r2, [r5, #0]
 800e87a:	06d3      	lsls	r3, r2, #27
 800e87c:	d504      	bpl.n	800e888 <_vfiprintf_r+0x108>
 800e87e:	2353      	movs	r3, #83	; 0x53
 800e880:	a904      	add	r1, sp, #16
 800e882:	185b      	adds	r3, r3, r1
 800e884:	2120      	movs	r1, #32
 800e886:	7019      	strb	r1, [r3, #0]
 800e888:	0713      	lsls	r3, r2, #28
 800e88a:	d504      	bpl.n	800e896 <_vfiprintf_r+0x116>
 800e88c:	2353      	movs	r3, #83	; 0x53
 800e88e:	a904      	add	r1, sp, #16
 800e890:	185b      	adds	r3, r3, r1
 800e892:	212b      	movs	r1, #43	; 0x2b
 800e894:	7019      	strb	r1, [r3, #0]
 800e896:	9b03      	ldr	r3, [sp, #12]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	2b2a      	cmp	r3, #42	; 0x2a
 800e89c:	d016      	beq.n	800e8cc <_vfiprintf_r+0x14c>
 800e89e:	2100      	movs	r1, #0
 800e8a0:	68eb      	ldr	r3, [r5, #12]
 800e8a2:	9f03      	ldr	r7, [sp, #12]
 800e8a4:	783a      	ldrb	r2, [r7, #0]
 800e8a6:	1c78      	adds	r0, r7, #1
 800e8a8:	3a30      	subs	r2, #48	; 0x30
 800e8aa:	4684      	mov	ip, r0
 800e8ac:	2a09      	cmp	r2, #9
 800e8ae:	d94f      	bls.n	800e950 <_vfiprintf_r+0x1d0>
 800e8b0:	2900      	cmp	r1, #0
 800e8b2:	d111      	bne.n	800e8d8 <_vfiprintf_r+0x158>
 800e8b4:	e017      	b.n	800e8e6 <_vfiprintf_r+0x166>
 800e8b6:	3701      	adds	r7, #1
 800e8b8:	e7a9      	b.n	800e80e <_vfiprintf_r+0x8e>
 800e8ba:	4b49      	ldr	r3, [pc, #292]	; (800e9e0 <_vfiprintf_r+0x260>)
 800e8bc:	682a      	ldr	r2, [r5, #0]
 800e8be:	1ac0      	subs	r0, r0, r3
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	4083      	lsls	r3, r0
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	602b      	str	r3, [r5, #0]
 800e8c8:	9703      	str	r7, [sp, #12]
 800e8ca:	e7cb      	b.n	800e864 <_vfiprintf_r+0xe4>
 800e8cc:	9b07      	ldr	r3, [sp, #28]
 800e8ce:	1d19      	adds	r1, r3, #4
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	9107      	str	r1, [sp, #28]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	db01      	blt.n	800e8dc <_vfiprintf_r+0x15c>
 800e8d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8da:	e004      	b.n	800e8e6 <_vfiprintf_r+0x166>
 800e8dc:	425b      	negs	r3, r3
 800e8de:	60eb      	str	r3, [r5, #12]
 800e8e0:	2302      	movs	r3, #2
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	602b      	str	r3, [r5, #0]
 800e8e6:	783b      	ldrb	r3, [r7, #0]
 800e8e8:	2b2e      	cmp	r3, #46	; 0x2e
 800e8ea:	d10a      	bne.n	800e902 <_vfiprintf_r+0x182>
 800e8ec:	787b      	ldrb	r3, [r7, #1]
 800e8ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e8f0:	d137      	bne.n	800e962 <_vfiprintf_r+0x1e2>
 800e8f2:	9b07      	ldr	r3, [sp, #28]
 800e8f4:	3702      	adds	r7, #2
 800e8f6:	1d1a      	adds	r2, r3, #4
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	9207      	str	r2, [sp, #28]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	db2d      	blt.n	800e95c <_vfiprintf_r+0x1dc>
 800e900:	9309      	str	r3, [sp, #36]	; 0x24
 800e902:	2203      	movs	r2, #3
 800e904:	7839      	ldrb	r1, [r7, #0]
 800e906:	4837      	ldr	r0, [pc, #220]	; (800e9e4 <_vfiprintf_r+0x264>)
 800e908:	f7ff f9cc 	bl	800dca4 <memchr>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d007      	beq.n	800e920 <_vfiprintf_r+0x1a0>
 800e910:	4b34      	ldr	r3, [pc, #208]	; (800e9e4 <_vfiprintf_r+0x264>)
 800e912:	682a      	ldr	r2, [r5, #0]
 800e914:	1ac0      	subs	r0, r0, r3
 800e916:	2340      	movs	r3, #64	; 0x40
 800e918:	4083      	lsls	r3, r0
 800e91a:	4313      	orrs	r3, r2
 800e91c:	3701      	adds	r7, #1
 800e91e:	602b      	str	r3, [r5, #0]
 800e920:	7839      	ldrb	r1, [r7, #0]
 800e922:	1c7b      	adds	r3, r7, #1
 800e924:	2206      	movs	r2, #6
 800e926:	4830      	ldr	r0, [pc, #192]	; (800e9e8 <_vfiprintf_r+0x268>)
 800e928:	9303      	str	r3, [sp, #12]
 800e92a:	7629      	strb	r1, [r5, #24]
 800e92c:	f7ff f9ba 	bl	800dca4 <memchr>
 800e930:	2800      	cmp	r0, #0
 800e932:	d045      	beq.n	800e9c0 <_vfiprintf_r+0x240>
 800e934:	4b2d      	ldr	r3, [pc, #180]	; (800e9ec <_vfiprintf_r+0x26c>)
 800e936:	2b00      	cmp	r3, #0
 800e938:	d127      	bne.n	800e98a <_vfiprintf_r+0x20a>
 800e93a:	2207      	movs	r2, #7
 800e93c:	9b07      	ldr	r3, [sp, #28]
 800e93e:	3307      	adds	r3, #7
 800e940:	4393      	bics	r3, r2
 800e942:	3308      	adds	r3, #8
 800e944:	9307      	str	r3, [sp, #28]
 800e946:	696b      	ldr	r3, [r5, #20]
 800e948:	9a04      	ldr	r2, [sp, #16]
 800e94a:	189b      	adds	r3, r3, r2
 800e94c:	616b      	str	r3, [r5, #20]
 800e94e:	e75d      	b.n	800e80c <_vfiprintf_r+0x8c>
 800e950:	210a      	movs	r1, #10
 800e952:	434b      	muls	r3, r1
 800e954:	4667      	mov	r7, ip
 800e956:	189b      	adds	r3, r3, r2
 800e958:	3909      	subs	r1, #9
 800e95a:	e7a3      	b.n	800e8a4 <_vfiprintf_r+0x124>
 800e95c:	2301      	movs	r3, #1
 800e95e:	425b      	negs	r3, r3
 800e960:	e7ce      	b.n	800e900 <_vfiprintf_r+0x180>
 800e962:	2300      	movs	r3, #0
 800e964:	001a      	movs	r2, r3
 800e966:	3701      	adds	r7, #1
 800e968:	606b      	str	r3, [r5, #4]
 800e96a:	7839      	ldrb	r1, [r7, #0]
 800e96c:	1c78      	adds	r0, r7, #1
 800e96e:	3930      	subs	r1, #48	; 0x30
 800e970:	4684      	mov	ip, r0
 800e972:	2909      	cmp	r1, #9
 800e974:	d903      	bls.n	800e97e <_vfiprintf_r+0x1fe>
 800e976:	2b00      	cmp	r3, #0
 800e978:	d0c3      	beq.n	800e902 <_vfiprintf_r+0x182>
 800e97a:	9209      	str	r2, [sp, #36]	; 0x24
 800e97c:	e7c1      	b.n	800e902 <_vfiprintf_r+0x182>
 800e97e:	230a      	movs	r3, #10
 800e980:	435a      	muls	r2, r3
 800e982:	4667      	mov	r7, ip
 800e984:	1852      	adds	r2, r2, r1
 800e986:	3b09      	subs	r3, #9
 800e988:	e7ef      	b.n	800e96a <_vfiprintf_r+0x1ea>
 800e98a:	ab07      	add	r3, sp, #28
 800e98c:	9300      	str	r3, [sp, #0]
 800e98e:	0022      	movs	r2, r4
 800e990:	0029      	movs	r1, r5
 800e992:	0030      	movs	r0, r6
 800e994:	4b16      	ldr	r3, [pc, #88]	; (800e9f0 <_vfiprintf_r+0x270>)
 800e996:	f7fd fda5 	bl	800c4e4 <_printf_float>
 800e99a:	9004      	str	r0, [sp, #16]
 800e99c:	9b04      	ldr	r3, [sp, #16]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	d1d1      	bne.n	800e946 <_vfiprintf_r+0x1c6>
 800e9a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9a4:	07db      	lsls	r3, r3, #31
 800e9a6:	d405      	bmi.n	800e9b4 <_vfiprintf_r+0x234>
 800e9a8:	89a3      	ldrh	r3, [r4, #12]
 800e9aa:	059b      	lsls	r3, r3, #22
 800e9ac:	d402      	bmi.n	800e9b4 <_vfiprintf_r+0x234>
 800e9ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9b0:	f000 fac6 	bl	800ef40 <__retarget_lock_release_recursive>
 800e9b4:	89a3      	ldrh	r3, [r4, #12]
 800e9b6:	065b      	lsls	r3, r3, #25
 800e9b8:	d500      	bpl.n	800e9bc <_vfiprintf_r+0x23c>
 800e9ba:	e70a      	b.n	800e7d2 <_vfiprintf_r+0x52>
 800e9bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e9be:	e70a      	b.n	800e7d6 <_vfiprintf_r+0x56>
 800e9c0:	ab07      	add	r3, sp, #28
 800e9c2:	9300      	str	r3, [sp, #0]
 800e9c4:	0022      	movs	r2, r4
 800e9c6:	0029      	movs	r1, r5
 800e9c8:	0030      	movs	r0, r6
 800e9ca:	4b09      	ldr	r3, [pc, #36]	; (800e9f0 <_vfiprintf_r+0x270>)
 800e9cc:	f7fe f83c 	bl	800ca48 <_printf_i>
 800e9d0:	e7e3      	b.n	800e99a <_vfiprintf_r+0x21a>
 800e9d2:	46c0      	nop			; (mov r8, r8)
 800e9d4:	0800fe90 	.word	0x0800fe90
 800e9d8:	0800feb0 	.word	0x0800feb0
 800e9dc:	0800fe70 	.word	0x0800fe70
 800e9e0:	0800fe5c 	.word	0x0800fe5c
 800e9e4:	0800fe62 	.word	0x0800fe62
 800e9e8:	0800fe66 	.word	0x0800fe66
 800e9ec:	0800c4e5 	.word	0x0800c4e5
 800e9f0:	0800e75b 	.word	0x0800e75b

0800e9f4 <__swbuf_r>:
 800e9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9f6:	0005      	movs	r5, r0
 800e9f8:	000e      	movs	r6, r1
 800e9fa:	0014      	movs	r4, r2
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	d004      	beq.n	800ea0a <__swbuf_r+0x16>
 800ea00:	6983      	ldr	r3, [r0, #24]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <__swbuf_r+0x16>
 800ea06:	f000 f9f9 	bl	800edfc <__sinit>
 800ea0a:	4b22      	ldr	r3, [pc, #136]	; (800ea94 <__swbuf_r+0xa0>)
 800ea0c:	429c      	cmp	r4, r3
 800ea0e:	d12e      	bne.n	800ea6e <__swbuf_r+0x7a>
 800ea10:	686c      	ldr	r4, [r5, #4]
 800ea12:	69a3      	ldr	r3, [r4, #24]
 800ea14:	60a3      	str	r3, [r4, #8]
 800ea16:	89a3      	ldrh	r3, [r4, #12]
 800ea18:	071b      	lsls	r3, r3, #28
 800ea1a:	d532      	bpl.n	800ea82 <__swbuf_r+0x8e>
 800ea1c:	6923      	ldr	r3, [r4, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d02f      	beq.n	800ea82 <__swbuf_r+0x8e>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	6922      	ldr	r2, [r4, #16]
 800ea26:	b2f7      	uxtb	r7, r6
 800ea28:	1a98      	subs	r0, r3, r2
 800ea2a:	6963      	ldr	r3, [r4, #20]
 800ea2c:	b2f6      	uxtb	r6, r6
 800ea2e:	4283      	cmp	r3, r0
 800ea30:	dc05      	bgt.n	800ea3e <__swbuf_r+0x4a>
 800ea32:	0021      	movs	r1, r4
 800ea34:	0028      	movs	r0, r5
 800ea36:	f000 f93f 	bl	800ecb8 <_fflush_r>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d127      	bne.n	800ea8e <__swbuf_r+0x9a>
 800ea3e:	68a3      	ldr	r3, [r4, #8]
 800ea40:	3001      	adds	r0, #1
 800ea42:	3b01      	subs	r3, #1
 800ea44:	60a3      	str	r3, [r4, #8]
 800ea46:	6823      	ldr	r3, [r4, #0]
 800ea48:	1c5a      	adds	r2, r3, #1
 800ea4a:	6022      	str	r2, [r4, #0]
 800ea4c:	701f      	strb	r7, [r3, #0]
 800ea4e:	6963      	ldr	r3, [r4, #20]
 800ea50:	4283      	cmp	r3, r0
 800ea52:	d004      	beq.n	800ea5e <__swbuf_r+0x6a>
 800ea54:	89a3      	ldrh	r3, [r4, #12]
 800ea56:	07db      	lsls	r3, r3, #31
 800ea58:	d507      	bpl.n	800ea6a <__swbuf_r+0x76>
 800ea5a:	2e0a      	cmp	r6, #10
 800ea5c:	d105      	bne.n	800ea6a <__swbuf_r+0x76>
 800ea5e:	0021      	movs	r1, r4
 800ea60:	0028      	movs	r0, r5
 800ea62:	f000 f929 	bl	800ecb8 <_fflush_r>
 800ea66:	2800      	cmp	r0, #0
 800ea68:	d111      	bne.n	800ea8e <__swbuf_r+0x9a>
 800ea6a:	0030      	movs	r0, r6
 800ea6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea6e:	4b0a      	ldr	r3, [pc, #40]	; (800ea98 <__swbuf_r+0xa4>)
 800ea70:	429c      	cmp	r4, r3
 800ea72:	d101      	bne.n	800ea78 <__swbuf_r+0x84>
 800ea74:	68ac      	ldr	r4, [r5, #8]
 800ea76:	e7cc      	b.n	800ea12 <__swbuf_r+0x1e>
 800ea78:	4b08      	ldr	r3, [pc, #32]	; (800ea9c <__swbuf_r+0xa8>)
 800ea7a:	429c      	cmp	r4, r3
 800ea7c:	d1c9      	bne.n	800ea12 <__swbuf_r+0x1e>
 800ea7e:	68ec      	ldr	r4, [r5, #12]
 800ea80:	e7c7      	b.n	800ea12 <__swbuf_r+0x1e>
 800ea82:	0021      	movs	r1, r4
 800ea84:	0028      	movs	r0, r5
 800ea86:	f000 f80b 	bl	800eaa0 <__swsetup_r>
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	d0c9      	beq.n	800ea22 <__swbuf_r+0x2e>
 800ea8e:	2601      	movs	r6, #1
 800ea90:	4276      	negs	r6, r6
 800ea92:	e7ea      	b.n	800ea6a <__swbuf_r+0x76>
 800ea94:	0800fe90 	.word	0x0800fe90
 800ea98:	0800feb0 	.word	0x0800feb0
 800ea9c:	0800fe70 	.word	0x0800fe70

0800eaa0 <__swsetup_r>:
 800eaa0:	4b37      	ldr	r3, [pc, #220]	; (800eb80 <__swsetup_r+0xe0>)
 800eaa2:	b570      	push	{r4, r5, r6, lr}
 800eaa4:	681d      	ldr	r5, [r3, #0]
 800eaa6:	0006      	movs	r6, r0
 800eaa8:	000c      	movs	r4, r1
 800eaaa:	2d00      	cmp	r5, #0
 800eaac:	d005      	beq.n	800eaba <__swsetup_r+0x1a>
 800eaae:	69ab      	ldr	r3, [r5, #24]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d102      	bne.n	800eaba <__swsetup_r+0x1a>
 800eab4:	0028      	movs	r0, r5
 800eab6:	f000 f9a1 	bl	800edfc <__sinit>
 800eaba:	4b32      	ldr	r3, [pc, #200]	; (800eb84 <__swsetup_r+0xe4>)
 800eabc:	429c      	cmp	r4, r3
 800eabe:	d10f      	bne.n	800eae0 <__swsetup_r+0x40>
 800eac0:	686c      	ldr	r4, [r5, #4]
 800eac2:	230c      	movs	r3, #12
 800eac4:	5ee2      	ldrsh	r2, [r4, r3]
 800eac6:	b293      	uxth	r3, r2
 800eac8:	0711      	lsls	r1, r2, #28
 800eaca:	d42d      	bmi.n	800eb28 <__swsetup_r+0x88>
 800eacc:	06d9      	lsls	r1, r3, #27
 800eace:	d411      	bmi.n	800eaf4 <__swsetup_r+0x54>
 800ead0:	2309      	movs	r3, #9
 800ead2:	2001      	movs	r0, #1
 800ead4:	6033      	str	r3, [r6, #0]
 800ead6:	3337      	adds	r3, #55	; 0x37
 800ead8:	4313      	orrs	r3, r2
 800eada:	81a3      	strh	r3, [r4, #12]
 800eadc:	4240      	negs	r0, r0
 800eade:	bd70      	pop	{r4, r5, r6, pc}
 800eae0:	4b29      	ldr	r3, [pc, #164]	; (800eb88 <__swsetup_r+0xe8>)
 800eae2:	429c      	cmp	r4, r3
 800eae4:	d101      	bne.n	800eaea <__swsetup_r+0x4a>
 800eae6:	68ac      	ldr	r4, [r5, #8]
 800eae8:	e7eb      	b.n	800eac2 <__swsetup_r+0x22>
 800eaea:	4b28      	ldr	r3, [pc, #160]	; (800eb8c <__swsetup_r+0xec>)
 800eaec:	429c      	cmp	r4, r3
 800eaee:	d1e8      	bne.n	800eac2 <__swsetup_r+0x22>
 800eaf0:	68ec      	ldr	r4, [r5, #12]
 800eaf2:	e7e6      	b.n	800eac2 <__swsetup_r+0x22>
 800eaf4:	075b      	lsls	r3, r3, #29
 800eaf6:	d513      	bpl.n	800eb20 <__swsetup_r+0x80>
 800eaf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eafa:	2900      	cmp	r1, #0
 800eafc:	d008      	beq.n	800eb10 <__swsetup_r+0x70>
 800eafe:	0023      	movs	r3, r4
 800eb00:	3344      	adds	r3, #68	; 0x44
 800eb02:	4299      	cmp	r1, r3
 800eb04:	d002      	beq.n	800eb0c <__swsetup_r+0x6c>
 800eb06:	0030      	movs	r0, r6
 800eb08:	f7fd fb60 	bl	800c1cc <_free_r>
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	6363      	str	r3, [r4, #52]	; 0x34
 800eb10:	2224      	movs	r2, #36	; 0x24
 800eb12:	89a3      	ldrh	r3, [r4, #12]
 800eb14:	4393      	bics	r3, r2
 800eb16:	81a3      	strh	r3, [r4, #12]
 800eb18:	2300      	movs	r3, #0
 800eb1a:	6063      	str	r3, [r4, #4]
 800eb1c:	6923      	ldr	r3, [r4, #16]
 800eb1e:	6023      	str	r3, [r4, #0]
 800eb20:	2308      	movs	r3, #8
 800eb22:	89a2      	ldrh	r2, [r4, #12]
 800eb24:	4313      	orrs	r3, r2
 800eb26:	81a3      	strh	r3, [r4, #12]
 800eb28:	6923      	ldr	r3, [r4, #16]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d10b      	bne.n	800eb46 <__swsetup_r+0xa6>
 800eb2e:	21a0      	movs	r1, #160	; 0xa0
 800eb30:	2280      	movs	r2, #128	; 0x80
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	0089      	lsls	r1, r1, #2
 800eb36:	0092      	lsls	r2, r2, #2
 800eb38:	400b      	ands	r3, r1
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d003      	beq.n	800eb46 <__swsetup_r+0xa6>
 800eb3e:	0021      	movs	r1, r4
 800eb40:	0030      	movs	r0, r6
 800eb42:	f000 fa27 	bl	800ef94 <__smakebuf_r>
 800eb46:	220c      	movs	r2, #12
 800eb48:	5ea3      	ldrsh	r3, [r4, r2]
 800eb4a:	2001      	movs	r0, #1
 800eb4c:	001a      	movs	r2, r3
 800eb4e:	b299      	uxth	r1, r3
 800eb50:	4002      	ands	r2, r0
 800eb52:	4203      	tst	r3, r0
 800eb54:	d00f      	beq.n	800eb76 <__swsetup_r+0xd6>
 800eb56:	2200      	movs	r2, #0
 800eb58:	60a2      	str	r2, [r4, #8]
 800eb5a:	6962      	ldr	r2, [r4, #20]
 800eb5c:	4252      	negs	r2, r2
 800eb5e:	61a2      	str	r2, [r4, #24]
 800eb60:	2000      	movs	r0, #0
 800eb62:	6922      	ldr	r2, [r4, #16]
 800eb64:	4282      	cmp	r2, r0
 800eb66:	d1ba      	bne.n	800eade <__swsetup_r+0x3e>
 800eb68:	060a      	lsls	r2, r1, #24
 800eb6a:	d5b8      	bpl.n	800eade <__swsetup_r+0x3e>
 800eb6c:	2240      	movs	r2, #64	; 0x40
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	81a3      	strh	r3, [r4, #12]
 800eb72:	3801      	subs	r0, #1
 800eb74:	e7b3      	b.n	800eade <__swsetup_r+0x3e>
 800eb76:	0788      	lsls	r0, r1, #30
 800eb78:	d400      	bmi.n	800eb7c <__swsetup_r+0xdc>
 800eb7a:	6962      	ldr	r2, [r4, #20]
 800eb7c:	60a2      	str	r2, [r4, #8]
 800eb7e:	e7ef      	b.n	800eb60 <__swsetup_r+0xc0>
 800eb80:	20000010 	.word	0x20000010
 800eb84:	0800fe90 	.word	0x0800fe90
 800eb88:	0800feb0 	.word	0x0800feb0
 800eb8c:	0800fe70 	.word	0x0800fe70

0800eb90 <abort>:
 800eb90:	2006      	movs	r0, #6
 800eb92:	b510      	push	{r4, lr}
 800eb94:	f000 fac0 	bl	800f118 <raise>
 800eb98:	2001      	movs	r0, #1
 800eb9a:	f7f6 f9a5 	bl	8004ee8 <_exit>
	...

0800eba0 <__sflush_r>:
 800eba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eba2:	898b      	ldrh	r3, [r1, #12]
 800eba4:	0005      	movs	r5, r0
 800eba6:	000c      	movs	r4, r1
 800eba8:	071a      	lsls	r2, r3, #28
 800ebaa:	d45f      	bmi.n	800ec6c <__sflush_r+0xcc>
 800ebac:	684a      	ldr	r2, [r1, #4]
 800ebae:	2a00      	cmp	r2, #0
 800ebb0:	dc04      	bgt.n	800ebbc <__sflush_r+0x1c>
 800ebb2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ebb4:	2a00      	cmp	r2, #0
 800ebb6:	dc01      	bgt.n	800ebbc <__sflush_r+0x1c>
 800ebb8:	2000      	movs	r0, #0
 800ebba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ebbc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ebbe:	2f00      	cmp	r7, #0
 800ebc0:	d0fa      	beq.n	800ebb8 <__sflush_r+0x18>
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	2180      	movs	r1, #128	; 0x80
 800ebc6:	682e      	ldr	r6, [r5, #0]
 800ebc8:	602a      	str	r2, [r5, #0]
 800ebca:	001a      	movs	r2, r3
 800ebcc:	0149      	lsls	r1, r1, #5
 800ebce:	400a      	ands	r2, r1
 800ebd0:	420b      	tst	r3, r1
 800ebd2:	d034      	beq.n	800ec3e <__sflush_r+0x9e>
 800ebd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebd6:	89a3      	ldrh	r3, [r4, #12]
 800ebd8:	075b      	lsls	r3, r3, #29
 800ebda:	d506      	bpl.n	800ebea <__sflush_r+0x4a>
 800ebdc:	6863      	ldr	r3, [r4, #4]
 800ebde:	1ac0      	subs	r0, r0, r3
 800ebe0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d001      	beq.n	800ebea <__sflush_r+0x4a>
 800ebe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebe8:	1ac0      	subs	r0, r0, r3
 800ebea:	0002      	movs	r2, r0
 800ebec:	6a21      	ldr	r1, [r4, #32]
 800ebee:	2300      	movs	r3, #0
 800ebf0:	0028      	movs	r0, r5
 800ebf2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ebf4:	47b8      	blx	r7
 800ebf6:	89a1      	ldrh	r1, [r4, #12]
 800ebf8:	1c43      	adds	r3, r0, #1
 800ebfa:	d106      	bne.n	800ec0a <__sflush_r+0x6a>
 800ebfc:	682b      	ldr	r3, [r5, #0]
 800ebfe:	2b1d      	cmp	r3, #29
 800ec00:	d831      	bhi.n	800ec66 <__sflush_r+0xc6>
 800ec02:	4a2c      	ldr	r2, [pc, #176]	; (800ecb4 <__sflush_r+0x114>)
 800ec04:	40da      	lsrs	r2, r3
 800ec06:	07d3      	lsls	r3, r2, #31
 800ec08:	d52d      	bpl.n	800ec66 <__sflush_r+0xc6>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	6063      	str	r3, [r4, #4]
 800ec0e:	6923      	ldr	r3, [r4, #16]
 800ec10:	6023      	str	r3, [r4, #0]
 800ec12:	04cb      	lsls	r3, r1, #19
 800ec14:	d505      	bpl.n	800ec22 <__sflush_r+0x82>
 800ec16:	1c43      	adds	r3, r0, #1
 800ec18:	d102      	bne.n	800ec20 <__sflush_r+0x80>
 800ec1a:	682b      	ldr	r3, [r5, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d100      	bne.n	800ec22 <__sflush_r+0x82>
 800ec20:	6560      	str	r0, [r4, #84]	; 0x54
 800ec22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec24:	602e      	str	r6, [r5, #0]
 800ec26:	2900      	cmp	r1, #0
 800ec28:	d0c6      	beq.n	800ebb8 <__sflush_r+0x18>
 800ec2a:	0023      	movs	r3, r4
 800ec2c:	3344      	adds	r3, #68	; 0x44
 800ec2e:	4299      	cmp	r1, r3
 800ec30:	d002      	beq.n	800ec38 <__sflush_r+0x98>
 800ec32:	0028      	movs	r0, r5
 800ec34:	f7fd faca 	bl	800c1cc <_free_r>
 800ec38:	2000      	movs	r0, #0
 800ec3a:	6360      	str	r0, [r4, #52]	; 0x34
 800ec3c:	e7bd      	b.n	800ebba <__sflush_r+0x1a>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	0028      	movs	r0, r5
 800ec42:	6a21      	ldr	r1, [r4, #32]
 800ec44:	47b8      	blx	r7
 800ec46:	1c43      	adds	r3, r0, #1
 800ec48:	d1c5      	bne.n	800ebd6 <__sflush_r+0x36>
 800ec4a:	682b      	ldr	r3, [r5, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d0c2      	beq.n	800ebd6 <__sflush_r+0x36>
 800ec50:	2b1d      	cmp	r3, #29
 800ec52:	d001      	beq.n	800ec58 <__sflush_r+0xb8>
 800ec54:	2b16      	cmp	r3, #22
 800ec56:	d101      	bne.n	800ec5c <__sflush_r+0xbc>
 800ec58:	602e      	str	r6, [r5, #0]
 800ec5a:	e7ad      	b.n	800ebb8 <__sflush_r+0x18>
 800ec5c:	2340      	movs	r3, #64	; 0x40
 800ec5e:	89a2      	ldrh	r2, [r4, #12]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	81a3      	strh	r3, [r4, #12]
 800ec64:	e7a9      	b.n	800ebba <__sflush_r+0x1a>
 800ec66:	2340      	movs	r3, #64	; 0x40
 800ec68:	430b      	orrs	r3, r1
 800ec6a:	e7fa      	b.n	800ec62 <__sflush_r+0xc2>
 800ec6c:	690f      	ldr	r7, [r1, #16]
 800ec6e:	2f00      	cmp	r7, #0
 800ec70:	d0a2      	beq.n	800ebb8 <__sflush_r+0x18>
 800ec72:	680a      	ldr	r2, [r1, #0]
 800ec74:	600f      	str	r7, [r1, #0]
 800ec76:	1bd2      	subs	r2, r2, r7
 800ec78:	9201      	str	r2, [sp, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	079b      	lsls	r3, r3, #30
 800ec7e:	d100      	bne.n	800ec82 <__sflush_r+0xe2>
 800ec80:	694a      	ldr	r2, [r1, #20]
 800ec82:	60a2      	str	r2, [r4, #8]
 800ec84:	9b01      	ldr	r3, [sp, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	dc00      	bgt.n	800ec8c <__sflush_r+0xec>
 800ec8a:	e795      	b.n	800ebb8 <__sflush_r+0x18>
 800ec8c:	003a      	movs	r2, r7
 800ec8e:	0028      	movs	r0, r5
 800ec90:	9b01      	ldr	r3, [sp, #4]
 800ec92:	6a21      	ldr	r1, [r4, #32]
 800ec94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec96:	47b0      	blx	r6
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	dc06      	bgt.n	800ecaa <__sflush_r+0x10a>
 800ec9c:	2340      	movs	r3, #64	; 0x40
 800ec9e:	2001      	movs	r0, #1
 800eca0:	89a2      	ldrh	r2, [r4, #12]
 800eca2:	4240      	negs	r0, r0
 800eca4:	4313      	orrs	r3, r2
 800eca6:	81a3      	strh	r3, [r4, #12]
 800eca8:	e787      	b.n	800ebba <__sflush_r+0x1a>
 800ecaa:	9b01      	ldr	r3, [sp, #4]
 800ecac:	183f      	adds	r7, r7, r0
 800ecae:	1a1b      	subs	r3, r3, r0
 800ecb0:	9301      	str	r3, [sp, #4]
 800ecb2:	e7e7      	b.n	800ec84 <__sflush_r+0xe4>
 800ecb4:	20400001 	.word	0x20400001

0800ecb8 <_fflush_r>:
 800ecb8:	690b      	ldr	r3, [r1, #16]
 800ecba:	b570      	push	{r4, r5, r6, lr}
 800ecbc:	0005      	movs	r5, r0
 800ecbe:	000c      	movs	r4, r1
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d102      	bne.n	800ecca <_fflush_r+0x12>
 800ecc4:	2500      	movs	r5, #0
 800ecc6:	0028      	movs	r0, r5
 800ecc8:	bd70      	pop	{r4, r5, r6, pc}
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d004      	beq.n	800ecd8 <_fflush_r+0x20>
 800ecce:	6983      	ldr	r3, [r0, #24]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d101      	bne.n	800ecd8 <_fflush_r+0x20>
 800ecd4:	f000 f892 	bl	800edfc <__sinit>
 800ecd8:	4b14      	ldr	r3, [pc, #80]	; (800ed2c <_fflush_r+0x74>)
 800ecda:	429c      	cmp	r4, r3
 800ecdc:	d11b      	bne.n	800ed16 <_fflush_r+0x5e>
 800ecde:	686c      	ldr	r4, [r5, #4]
 800ece0:	220c      	movs	r2, #12
 800ece2:	5ea3      	ldrsh	r3, [r4, r2]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d0ed      	beq.n	800ecc4 <_fflush_r+0xc>
 800ece8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecea:	07d2      	lsls	r2, r2, #31
 800ecec:	d404      	bmi.n	800ecf8 <_fflush_r+0x40>
 800ecee:	059b      	lsls	r3, r3, #22
 800ecf0:	d402      	bmi.n	800ecf8 <_fflush_r+0x40>
 800ecf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecf4:	f000 f923 	bl	800ef3e <__retarget_lock_acquire_recursive>
 800ecf8:	0028      	movs	r0, r5
 800ecfa:	0021      	movs	r1, r4
 800ecfc:	f7ff ff50 	bl	800eba0 <__sflush_r>
 800ed00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed02:	0005      	movs	r5, r0
 800ed04:	07db      	lsls	r3, r3, #31
 800ed06:	d4de      	bmi.n	800ecc6 <_fflush_r+0xe>
 800ed08:	89a3      	ldrh	r3, [r4, #12]
 800ed0a:	059b      	lsls	r3, r3, #22
 800ed0c:	d4db      	bmi.n	800ecc6 <_fflush_r+0xe>
 800ed0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed10:	f000 f916 	bl	800ef40 <__retarget_lock_release_recursive>
 800ed14:	e7d7      	b.n	800ecc6 <_fflush_r+0xe>
 800ed16:	4b06      	ldr	r3, [pc, #24]	; (800ed30 <_fflush_r+0x78>)
 800ed18:	429c      	cmp	r4, r3
 800ed1a:	d101      	bne.n	800ed20 <_fflush_r+0x68>
 800ed1c:	68ac      	ldr	r4, [r5, #8]
 800ed1e:	e7df      	b.n	800ece0 <_fflush_r+0x28>
 800ed20:	4b04      	ldr	r3, [pc, #16]	; (800ed34 <_fflush_r+0x7c>)
 800ed22:	429c      	cmp	r4, r3
 800ed24:	d1dc      	bne.n	800ece0 <_fflush_r+0x28>
 800ed26:	68ec      	ldr	r4, [r5, #12]
 800ed28:	e7da      	b.n	800ece0 <_fflush_r+0x28>
 800ed2a:	46c0      	nop			; (mov r8, r8)
 800ed2c:	0800fe90 	.word	0x0800fe90
 800ed30:	0800feb0 	.word	0x0800feb0
 800ed34:	0800fe70 	.word	0x0800fe70

0800ed38 <std>:
 800ed38:	2300      	movs	r3, #0
 800ed3a:	b510      	push	{r4, lr}
 800ed3c:	0004      	movs	r4, r0
 800ed3e:	6003      	str	r3, [r0, #0]
 800ed40:	6043      	str	r3, [r0, #4]
 800ed42:	6083      	str	r3, [r0, #8]
 800ed44:	8181      	strh	r1, [r0, #12]
 800ed46:	6643      	str	r3, [r0, #100]	; 0x64
 800ed48:	0019      	movs	r1, r3
 800ed4a:	81c2      	strh	r2, [r0, #14]
 800ed4c:	6103      	str	r3, [r0, #16]
 800ed4e:	6143      	str	r3, [r0, #20]
 800ed50:	6183      	str	r3, [r0, #24]
 800ed52:	2208      	movs	r2, #8
 800ed54:	305c      	adds	r0, #92	; 0x5c
 800ed56:	f7fd fa30 	bl	800c1ba <memset>
 800ed5a:	4b05      	ldr	r3, [pc, #20]	; (800ed70 <std+0x38>)
 800ed5c:	6224      	str	r4, [r4, #32]
 800ed5e:	6263      	str	r3, [r4, #36]	; 0x24
 800ed60:	4b04      	ldr	r3, [pc, #16]	; (800ed74 <std+0x3c>)
 800ed62:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed64:	4b04      	ldr	r3, [pc, #16]	; (800ed78 <std+0x40>)
 800ed66:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed68:	4b04      	ldr	r3, [pc, #16]	; (800ed7c <std+0x44>)
 800ed6a:	6323      	str	r3, [r4, #48]	; 0x30
 800ed6c:	bd10      	pop	{r4, pc}
 800ed6e:	46c0      	nop			; (mov r8, r8)
 800ed70:	0800f159 	.word	0x0800f159
 800ed74:	0800f181 	.word	0x0800f181
 800ed78:	0800f1b9 	.word	0x0800f1b9
 800ed7c:	0800f1e5 	.word	0x0800f1e5

0800ed80 <_cleanup_r>:
 800ed80:	b510      	push	{r4, lr}
 800ed82:	4902      	ldr	r1, [pc, #8]	; (800ed8c <_cleanup_r+0xc>)
 800ed84:	f000 f8ba 	bl	800eefc <_fwalk_reent>
 800ed88:	bd10      	pop	{r4, pc}
 800ed8a:	46c0      	nop			; (mov r8, r8)
 800ed8c:	0800ecb9 	.word	0x0800ecb9

0800ed90 <__sfmoreglue>:
 800ed90:	b570      	push	{r4, r5, r6, lr}
 800ed92:	2568      	movs	r5, #104	; 0x68
 800ed94:	1e4a      	subs	r2, r1, #1
 800ed96:	4355      	muls	r5, r2
 800ed98:	000e      	movs	r6, r1
 800ed9a:	0029      	movs	r1, r5
 800ed9c:	3174      	adds	r1, #116	; 0x74
 800ed9e:	f7fd fa81 	bl	800c2a4 <_malloc_r>
 800eda2:	1e04      	subs	r4, r0, #0
 800eda4:	d008      	beq.n	800edb8 <__sfmoreglue+0x28>
 800eda6:	2100      	movs	r1, #0
 800eda8:	002a      	movs	r2, r5
 800edaa:	6001      	str	r1, [r0, #0]
 800edac:	6046      	str	r6, [r0, #4]
 800edae:	300c      	adds	r0, #12
 800edb0:	60a0      	str	r0, [r4, #8]
 800edb2:	3268      	adds	r2, #104	; 0x68
 800edb4:	f7fd fa01 	bl	800c1ba <memset>
 800edb8:	0020      	movs	r0, r4
 800edba:	bd70      	pop	{r4, r5, r6, pc}

0800edbc <__sfp_lock_acquire>:
 800edbc:	b510      	push	{r4, lr}
 800edbe:	4802      	ldr	r0, [pc, #8]	; (800edc8 <__sfp_lock_acquire+0xc>)
 800edc0:	f000 f8bd 	bl	800ef3e <__retarget_lock_acquire_recursive>
 800edc4:	bd10      	pop	{r4, pc}
 800edc6:	46c0      	nop			; (mov r8, r8)
 800edc8:	20001ec9 	.word	0x20001ec9

0800edcc <__sfp_lock_release>:
 800edcc:	b510      	push	{r4, lr}
 800edce:	4802      	ldr	r0, [pc, #8]	; (800edd8 <__sfp_lock_release+0xc>)
 800edd0:	f000 f8b6 	bl	800ef40 <__retarget_lock_release_recursive>
 800edd4:	bd10      	pop	{r4, pc}
 800edd6:	46c0      	nop			; (mov r8, r8)
 800edd8:	20001ec9 	.word	0x20001ec9

0800eddc <__sinit_lock_acquire>:
 800eddc:	b510      	push	{r4, lr}
 800edde:	4802      	ldr	r0, [pc, #8]	; (800ede8 <__sinit_lock_acquire+0xc>)
 800ede0:	f000 f8ad 	bl	800ef3e <__retarget_lock_acquire_recursive>
 800ede4:	bd10      	pop	{r4, pc}
 800ede6:	46c0      	nop			; (mov r8, r8)
 800ede8:	20001eca 	.word	0x20001eca

0800edec <__sinit_lock_release>:
 800edec:	b510      	push	{r4, lr}
 800edee:	4802      	ldr	r0, [pc, #8]	; (800edf8 <__sinit_lock_release+0xc>)
 800edf0:	f000 f8a6 	bl	800ef40 <__retarget_lock_release_recursive>
 800edf4:	bd10      	pop	{r4, pc}
 800edf6:	46c0      	nop			; (mov r8, r8)
 800edf8:	20001eca 	.word	0x20001eca

0800edfc <__sinit>:
 800edfc:	b513      	push	{r0, r1, r4, lr}
 800edfe:	0004      	movs	r4, r0
 800ee00:	f7ff ffec 	bl	800eddc <__sinit_lock_acquire>
 800ee04:	69a3      	ldr	r3, [r4, #24]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d002      	beq.n	800ee10 <__sinit+0x14>
 800ee0a:	f7ff ffef 	bl	800edec <__sinit_lock_release>
 800ee0e:	bd13      	pop	{r0, r1, r4, pc}
 800ee10:	64a3      	str	r3, [r4, #72]	; 0x48
 800ee12:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ee14:	6523      	str	r3, [r4, #80]	; 0x50
 800ee16:	4b13      	ldr	r3, [pc, #76]	; (800ee64 <__sinit+0x68>)
 800ee18:	4a13      	ldr	r2, [pc, #76]	; (800ee68 <__sinit+0x6c>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee1e:	9301      	str	r3, [sp, #4]
 800ee20:	42a3      	cmp	r3, r4
 800ee22:	d101      	bne.n	800ee28 <__sinit+0x2c>
 800ee24:	2301      	movs	r3, #1
 800ee26:	61a3      	str	r3, [r4, #24]
 800ee28:	0020      	movs	r0, r4
 800ee2a:	f000 f81f 	bl	800ee6c <__sfp>
 800ee2e:	6060      	str	r0, [r4, #4]
 800ee30:	0020      	movs	r0, r4
 800ee32:	f000 f81b 	bl	800ee6c <__sfp>
 800ee36:	60a0      	str	r0, [r4, #8]
 800ee38:	0020      	movs	r0, r4
 800ee3a:	f000 f817 	bl	800ee6c <__sfp>
 800ee3e:	2200      	movs	r2, #0
 800ee40:	2104      	movs	r1, #4
 800ee42:	60e0      	str	r0, [r4, #12]
 800ee44:	6860      	ldr	r0, [r4, #4]
 800ee46:	f7ff ff77 	bl	800ed38 <std>
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	2109      	movs	r1, #9
 800ee4e:	68a0      	ldr	r0, [r4, #8]
 800ee50:	f7ff ff72 	bl	800ed38 <std>
 800ee54:	2202      	movs	r2, #2
 800ee56:	2112      	movs	r1, #18
 800ee58:	68e0      	ldr	r0, [r4, #12]
 800ee5a:	f7ff ff6d 	bl	800ed38 <std>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	61a3      	str	r3, [r4, #24]
 800ee62:	e7d2      	b.n	800ee0a <__sinit+0xe>
 800ee64:	0800faa0 	.word	0x0800faa0
 800ee68:	0800ed81 	.word	0x0800ed81

0800ee6c <__sfp>:
 800ee6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6e:	0007      	movs	r7, r0
 800ee70:	f7ff ffa4 	bl	800edbc <__sfp_lock_acquire>
 800ee74:	4b1f      	ldr	r3, [pc, #124]	; (800eef4 <__sfp+0x88>)
 800ee76:	681e      	ldr	r6, [r3, #0]
 800ee78:	69b3      	ldr	r3, [r6, #24]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d102      	bne.n	800ee84 <__sfp+0x18>
 800ee7e:	0030      	movs	r0, r6
 800ee80:	f7ff ffbc 	bl	800edfc <__sinit>
 800ee84:	3648      	adds	r6, #72	; 0x48
 800ee86:	68b4      	ldr	r4, [r6, #8]
 800ee88:	6873      	ldr	r3, [r6, #4]
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	d504      	bpl.n	800ee98 <__sfp+0x2c>
 800ee8e:	6833      	ldr	r3, [r6, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d022      	beq.n	800eeda <__sfp+0x6e>
 800ee94:	6836      	ldr	r6, [r6, #0]
 800ee96:	e7f6      	b.n	800ee86 <__sfp+0x1a>
 800ee98:	220c      	movs	r2, #12
 800ee9a:	5ea5      	ldrsh	r5, [r4, r2]
 800ee9c:	2d00      	cmp	r5, #0
 800ee9e:	d11a      	bne.n	800eed6 <__sfp+0x6a>
 800eea0:	0020      	movs	r0, r4
 800eea2:	4b15      	ldr	r3, [pc, #84]	; (800eef8 <__sfp+0x8c>)
 800eea4:	3058      	adds	r0, #88	; 0x58
 800eea6:	60e3      	str	r3, [r4, #12]
 800eea8:	6665      	str	r5, [r4, #100]	; 0x64
 800eeaa:	f000 f847 	bl	800ef3c <__retarget_lock_init_recursive>
 800eeae:	f7ff ff8d 	bl	800edcc <__sfp_lock_release>
 800eeb2:	0020      	movs	r0, r4
 800eeb4:	2208      	movs	r2, #8
 800eeb6:	0029      	movs	r1, r5
 800eeb8:	6025      	str	r5, [r4, #0]
 800eeba:	60a5      	str	r5, [r4, #8]
 800eebc:	6065      	str	r5, [r4, #4]
 800eebe:	6125      	str	r5, [r4, #16]
 800eec0:	6165      	str	r5, [r4, #20]
 800eec2:	61a5      	str	r5, [r4, #24]
 800eec4:	305c      	adds	r0, #92	; 0x5c
 800eec6:	f7fd f978 	bl	800c1ba <memset>
 800eeca:	6365      	str	r5, [r4, #52]	; 0x34
 800eecc:	63a5      	str	r5, [r4, #56]	; 0x38
 800eece:	64a5      	str	r5, [r4, #72]	; 0x48
 800eed0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800eed2:	0020      	movs	r0, r4
 800eed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eed6:	3468      	adds	r4, #104	; 0x68
 800eed8:	e7d7      	b.n	800ee8a <__sfp+0x1e>
 800eeda:	2104      	movs	r1, #4
 800eedc:	0038      	movs	r0, r7
 800eede:	f7ff ff57 	bl	800ed90 <__sfmoreglue>
 800eee2:	1e04      	subs	r4, r0, #0
 800eee4:	6030      	str	r0, [r6, #0]
 800eee6:	d1d5      	bne.n	800ee94 <__sfp+0x28>
 800eee8:	f7ff ff70 	bl	800edcc <__sfp_lock_release>
 800eeec:	230c      	movs	r3, #12
 800eeee:	603b      	str	r3, [r7, #0]
 800eef0:	e7ef      	b.n	800eed2 <__sfp+0x66>
 800eef2:	46c0      	nop			; (mov r8, r8)
 800eef4:	0800faa0 	.word	0x0800faa0
 800eef8:	ffff0001 	.word	0xffff0001

0800eefc <_fwalk_reent>:
 800eefc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eefe:	0004      	movs	r4, r0
 800ef00:	0006      	movs	r6, r0
 800ef02:	2700      	movs	r7, #0
 800ef04:	9101      	str	r1, [sp, #4]
 800ef06:	3448      	adds	r4, #72	; 0x48
 800ef08:	6863      	ldr	r3, [r4, #4]
 800ef0a:	68a5      	ldr	r5, [r4, #8]
 800ef0c:	9300      	str	r3, [sp, #0]
 800ef0e:	9b00      	ldr	r3, [sp, #0]
 800ef10:	3b01      	subs	r3, #1
 800ef12:	9300      	str	r3, [sp, #0]
 800ef14:	d504      	bpl.n	800ef20 <_fwalk_reent+0x24>
 800ef16:	6824      	ldr	r4, [r4, #0]
 800ef18:	2c00      	cmp	r4, #0
 800ef1a:	d1f5      	bne.n	800ef08 <_fwalk_reent+0xc>
 800ef1c:	0038      	movs	r0, r7
 800ef1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ef20:	89ab      	ldrh	r3, [r5, #12]
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d908      	bls.n	800ef38 <_fwalk_reent+0x3c>
 800ef26:	220e      	movs	r2, #14
 800ef28:	5eab      	ldrsh	r3, [r5, r2]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	d004      	beq.n	800ef38 <_fwalk_reent+0x3c>
 800ef2e:	0029      	movs	r1, r5
 800ef30:	0030      	movs	r0, r6
 800ef32:	9b01      	ldr	r3, [sp, #4]
 800ef34:	4798      	blx	r3
 800ef36:	4307      	orrs	r7, r0
 800ef38:	3568      	adds	r5, #104	; 0x68
 800ef3a:	e7e8      	b.n	800ef0e <_fwalk_reent+0x12>

0800ef3c <__retarget_lock_init_recursive>:
 800ef3c:	4770      	bx	lr

0800ef3e <__retarget_lock_acquire_recursive>:
 800ef3e:	4770      	bx	lr

0800ef40 <__retarget_lock_release_recursive>:
 800ef40:	4770      	bx	lr
	...

0800ef44 <__swhatbuf_r>:
 800ef44:	b570      	push	{r4, r5, r6, lr}
 800ef46:	000e      	movs	r6, r1
 800ef48:	001d      	movs	r5, r3
 800ef4a:	230e      	movs	r3, #14
 800ef4c:	5ec9      	ldrsh	r1, [r1, r3]
 800ef4e:	0014      	movs	r4, r2
 800ef50:	b096      	sub	sp, #88	; 0x58
 800ef52:	2900      	cmp	r1, #0
 800ef54:	da08      	bge.n	800ef68 <__swhatbuf_r+0x24>
 800ef56:	220c      	movs	r2, #12
 800ef58:	5eb3      	ldrsh	r3, [r6, r2]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	602a      	str	r2, [r5, #0]
 800ef5e:	061b      	lsls	r3, r3, #24
 800ef60:	d411      	bmi.n	800ef86 <__swhatbuf_r+0x42>
 800ef62:	2380      	movs	r3, #128	; 0x80
 800ef64:	00db      	lsls	r3, r3, #3
 800ef66:	e00f      	b.n	800ef88 <__swhatbuf_r+0x44>
 800ef68:	466a      	mov	r2, sp
 800ef6a:	f000 f975 	bl	800f258 <_fstat_r>
 800ef6e:	2800      	cmp	r0, #0
 800ef70:	dbf1      	blt.n	800ef56 <__swhatbuf_r+0x12>
 800ef72:	23f0      	movs	r3, #240	; 0xf0
 800ef74:	9901      	ldr	r1, [sp, #4]
 800ef76:	021b      	lsls	r3, r3, #8
 800ef78:	4019      	ands	r1, r3
 800ef7a:	4b05      	ldr	r3, [pc, #20]	; (800ef90 <__swhatbuf_r+0x4c>)
 800ef7c:	18c9      	adds	r1, r1, r3
 800ef7e:	424b      	negs	r3, r1
 800ef80:	4159      	adcs	r1, r3
 800ef82:	6029      	str	r1, [r5, #0]
 800ef84:	e7ed      	b.n	800ef62 <__swhatbuf_r+0x1e>
 800ef86:	2340      	movs	r3, #64	; 0x40
 800ef88:	2000      	movs	r0, #0
 800ef8a:	6023      	str	r3, [r4, #0]
 800ef8c:	b016      	add	sp, #88	; 0x58
 800ef8e:	bd70      	pop	{r4, r5, r6, pc}
 800ef90:	ffffe000 	.word	0xffffe000

0800ef94 <__smakebuf_r>:
 800ef94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef96:	2602      	movs	r6, #2
 800ef98:	898b      	ldrh	r3, [r1, #12]
 800ef9a:	0005      	movs	r5, r0
 800ef9c:	000c      	movs	r4, r1
 800ef9e:	4233      	tst	r3, r6
 800efa0:	d006      	beq.n	800efb0 <__smakebuf_r+0x1c>
 800efa2:	0023      	movs	r3, r4
 800efa4:	3347      	adds	r3, #71	; 0x47
 800efa6:	6023      	str	r3, [r4, #0]
 800efa8:	6123      	str	r3, [r4, #16]
 800efaa:	2301      	movs	r3, #1
 800efac:	6163      	str	r3, [r4, #20]
 800efae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800efb0:	466a      	mov	r2, sp
 800efb2:	ab01      	add	r3, sp, #4
 800efb4:	f7ff ffc6 	bl	800ef44 <__swhatbuf_r>
 800efb8:	9900      	ldr	r1, [sp, #0]
 800efba:	0007      	movs	r7, r0
 800efbc:	0028      	movs	r0, r5
 800efbe:	f7fd f971 	bl	800c2a4 <_malloc_r>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	d108      	bne.n	800efd8 <__smakebuf_r+0x44>
 800efc6:	220c      	movs	r2, #12
 800efc8:	5ea3      	ldrsh	r3, [r4, r2]
 800efca:	059a      	lsls	r2, r3, #22
 800efcc:	d4ef      	bmi.n	800efae <__smakebuf_r+0x1a>
 800efce:	2203      	movs	r2, #3
 800efd0:	4393      	bics	r3, r2
 800efd2:	431e      	orrs	r6, r3
 800efd4:	81a6      	strh	r6, [r4, #12]
 800efd6:	e7e4      	b.n	800efa2 <__smakebuf_r+0xe>
 800efd8:	4b0f      	ldr	r3, [pc, #60]	; (800f018 <__smakebuf_r+0x84>)
 800efda:	62ab      	str	r3, [r5, #40]	; 0x28
 800efdc:	2380      	movs	r3, #128	; 0x80
 800efde:	89a2      	ldrh	r2, [r4, #12]
 800efe0:	6020      	str	r0, [r4, #0]
 800efe2:	4313      	orrs	r3, r2
 800efe4:	81a3      	strh	r3, [r4, #12]
 800efe6:	9b00      	ldr	r3, [sp, #0]
 800efe8:	6120      	str	r0, [r4, #16]
 800efea:	6163      	str	r3, [r4, #20]
 800efec:	9b01      	ldr	r3, [sp, #4]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00d      	beq.n	800f00e <__smakebuf_r+0x7a>
 800eff2:	0028      	movs	r0, r5
 800eff4:	230e      	movs	r3, #14
 800eff6:	5ee1      	ldrsh	r1, [r4, r3]
 800eff8:	f000 f940 	bl	800f27c <_isatty_r>
 800effc:	2800      	cmp	r0, #0
 800effe:	d006      	beq.n	800f00e <__smakebuf_r+0x7a>
 800f000:	2203      	movs	r2, #3
 800f002:	89a3      	ldrh	r3, [r4, #12]
 800f004:	4393      	bics	r3, r2
 800f006:	001a      	movs	r2, r3
 800f008:	2301      	movs	r3, #1
 800f00a:	4313      	orrs	r3, r2
 800f00c:	81a3      	strh	r3, [r4, #12]
 800f00e:	89a0      	ldrh	r0, [r4, #12]
 800f010:	4307      	orrs	r7, r0
 800f012:	81a7      	strh	r7, [r4, #12]
 800f014:	e7cb      	b.n	800efae <__smakebuf_r+0x1a>
 800f016:	46c0      	nop			; (mov r8, r8)
 800f018:	0800ed81 	.word	0x0800ed81

0800f01c <__ascii_mbtowc>:
 800f01c:	b082      	sub	sp, #8
 800f01e:	2900      	cmp	r1, #0
 800f020:	d100      	bne.n	800f024 <__ascii_mbtowc+0x8>
 800f022:	a901      	add	r1, sp, #4
 800f024:	1e10      	subs	r0, r2, #0
 800f026:	d006      	beq.n	800f036 <__ascii_mbtowc+0x1a>
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d006      	beq.n	800f03a <__ascii_mbtowc+0x1e>
 800f02c:	7813      	ldrb	r3, [r2, #0]
 800f02e:	600b      	str	r3, [r1, #0]
 800f030:	7810      	ldrb	r0, [r2, #0]
 800f032:	1e43      	subs	r3, r0, #1
 800f034:	4198      	sbcs	r0, r3
 800f036:	b002      	add	sp, #8
 800f038:	4770      	bx	lr
 800f03a:	2002      	movs	r0, #2
 800f03c:	4240      	negs	r0, r0
 800f03e:	e7fa      	b.n	800f036 <__ascii_mbtowc+0x1a>

0800f040 <memmove>:
 800f040:	b510      	push	{r4, lr}
 800f042:	4288      	cmp	r0, r1
 800f044:	d902      	bls.n	800f04c <memmove+0xc>
 800f046:	188b      	adds	r3, r1, r2
 800f048:	4298      	cmp	r0, r3
 800f04a:	d303      	bcc.n	800f054 <memmove+0x14>
 800f04c:	2300      	movs	r3, #0
 800f04e:	e007      	b.n	800f060 <memmove+0x20>
 800f050:	5c8b      	ldrb	r3, [r1, r2]
 800f052:	5483      	strb	r3, [r0, r2]
 800f054:	3a01      	subs	r2, #1
 800f056:	d2fb      	bcs.n	800f050 <memmove+0x10>
 800f058:	bd10      	pop	{r4, pc}
 800f05a:	5ccc      	ldrb	r4, [r1, r3]
 800f05c:	54c4      	strb	r4, [r0, r3]
 800f05e:	3301      	adds	r3, #1
 800f060:	429a      	cmp	r2, r3
 800f062:	d1fa      	bne.n	800f05a <memmove+0x1a>
 800f064:	e7f8      	b.n	800f058 <memmove+0x18>

0800f066 <_realloc_r>:
 800f066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f068:	0007      	movs	r7, r0
 800f06a:	000e      	movs	r6, r1
 800f06c:	0014      	movs	r4, r2
 800f06e:	2900      	cmp	r1, #0
 800f070:	d105      	bne.n	800f07e <_realloc_r+0x18>
 800f072:	0011      	movs	r1, r2
 800f074:	f7fd f916 	bl	800c2a4 <_malloc_r>
 800f078:	0005      	movs	r5, r0
 800f07a:	0028      	movs	r0, r5
 800f07c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f07e:	2a00      	cmp	r2, #0
 800f080:	d103      	bne.n	800f08a <_realloc_r+0x24>
 800f082:	f7fd f8a3 	bl	800c1cc <_free_r>
 800f086:	0025      	movs	r5, r4
 800f088:	e7f7      	b.n	800f07a <_realloc_r+0x14>
 800f08a:	f000 f91d 	bl	800f2c8 <_malloc_usable_size_r>
 800f08e:	9001      	str	r0, [sp, #4]
 800f090:	4284      	cmp	r4, r0
 800f092:	d803      	bhi.n	800f09c <_realloc_r+0x36>
 800f094:	0035      	movs	r5, r6
 800f096:	0843      	lsrs	r3, r0, #1
 800f098:	42a3      	cmp	r3, r4
 800f09a:	d3ee      	bcc.n	800f07a <_realloc_r+0x14>
 800f09c:	0021      	movs	r1, r4
 800f09e:	0038      	movs	r0, r7
 800f0a0:	f7fd f900 	bl	800c2a4 <_malloc_r>
 800f0a4:	1e05      	subs	r5, r0, #0
 800f0a6:	d0e8      	beq.n	800f07a <_realloc_r+0x14>
 800f0a8:	9b01      	ldr	r3, [sp, #4]
 800f0aa:	0022      	movs	r2, r4
 800f0ac:	429c      	cmp	r4, r3
 800f0ae:	d900      	bls.n	800f0b2 <_realloc_r+0x4c>
 800f0b0:	001a      	movs	r2, r3
 800f0b2:	0031      	movs	r1, r6
 800f0b4:	0028      	movs	r0, r5
 800f0b6:	f7fd f877 	bl	800c1a8 <memcpy>
 800f0ba:	0031      	movs	r1, r6
 800f0bc:	0038      	movs	r0, r7
 800f0be:	f7fd f885 	bl	800c1cc <_free_r>
 800f0c2:	e7da      	b.n	800f07a <_realloc_r+0x14>

0800f0c4 <_raise_r>:
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	0004      	movs	r4, r0
 800f0c8:	000d      	movs	r5, r1
 800f0ca:	291f      	cmp	r1, #31
 800f0cc:	d904      	bls.n	800f0d8 <_raise_r+0x14>
 800f0ce:	2316      	movs	r3, #22
 800f0d0:	6003      	str	r3, [r0, #0]
 800f0d2:	2001      	movs	r0, #1
 800f0d4:	4240      	negs	r0, r0
 800f0d6:	bd70      	pop	{r4, r5, r6, pc}
 800f0d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d004      	beq.n	800f0e8 <_raise_r+0x24>
 800f0de:	008a      	lsls	r2, r1, #2
 800f0e0:	189b      	adds	r3, r3, r2
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	2a00      	cmp	r2, #0
 800f0e6:	d108      	bne.n	800f0fa <_raise_r+0x36>
 800f0e8:	0020      	movs	r0, r4
 800f0ea:	f000 f831 	bl	800f150 <_getpid_r>
 800f0ee:	002a      	movs	r2, r5
 800f0f0:	0001      	movs	r1, r0
 800f0f2:	0020      	movs	r0, r4
 800f0f4:	f000 f81a 	bl	800f12c <_kill_r>
 800f0f8:	e7ed      	b.n	800f0d6 <_raise_r+0x12>
 800f0fa:	2000      	movs	r0, #0
 800f0fc:	2a01      	cmp	r2, #1
 800f0fe:	d0ea      	beq.n	800f0d6 <_raise_r+0x12>
 800f100:	1c51      	adds	r1, r2, #1
 800f102:	d103      	bne.n	800f10c <_raise_r+0x48>
 800f104:	2316      	movs	r3, #22
 800f106:	3001      	adds	r0, #1
 800f108:	6023      	str	r3, [r4, #0]
 800f10a:	e7e4      	b.n	800f0d6 <_raise_r+0x12>
 800f10c:	2400      	movs	r4, #0
 800f10e:	0028      	movs	r0, r5
 800f110:	601c      	str	r4, [r3, #0]
 800f112:	4790      	blx	r2
 800f114:	0020      	movs	r0, r4
 800f116:	e7de      	b.n	800f0d6 <_raise_r+0x12>

0800f118 <raise>:
 800f118:	b510      	push	{r4, lr}
 800f11a:	4b03      	ldr	r3, [pc, #12]	; (800f128 <raise+0x10>)
 800f11c:	0001      	movs	r1, r0
 800f11e:	6818      	ldr	r0, [r3, #0]
 800f120:	f7ff ffd0 	bl	800f0c4 <_raise_r>
 800f124:	bd10      	pop	{r4, pc}
 800f126:	46c0      	nop			; (mov r8, r8)
 800f128:	20000010 	.word	0x20000010

0800f12c <_kill_r>:
 800f12c:	2300      	movs	r3, #0
 800f12e:	b570      	push	{r4, r5, r6, lr}
 800f130:	4d06      	ldr	r5, [pc, #24]	; (800f14c <_kill_r+0x20>)
 800f132:	0004      	movs	r4, r0
 800f134:	0008      	movs	r0, r1
 800f136:	0011      	movs	r1, r2
 800f138:	602b      	str	r3, [r5, #0]
 800f13a:	f7f5 fec5 	bl	8004ec8 <_kill>
 800f13e:	1c43      	adds	r3, r0, #1
 800f140:	d103      	bne.n	800f14a <_kill_r+0x1e>
 800f142:	682b      	ldr	r3, [r5, #0]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d000      	beq.n	800f14a <_kill_r+0x1e>
 800f148:	6023      	str	r3, [r4, #0]
 800f14a:	bd70      	pop	{r4, r5, r6, pc}
 800f14c:	20001ec4 	.word	0x20001ec4

0800f150 <_getpid_r>:
 800f150:	b510      	push	{r4, lr}
 800f152:	f7f5 feb3 	bl	8004ebc <_getpid>
 800f156:	bd10      	pop	{r4, pc}

0800f158 <__sread>:
 800f158:	b570      	push	{r4, r5, r6, lr}
 800f15a:	000c      	movs	r4, r1
 800f15c:	250e      	movs	r5, #14
 800f15e:	5f49      	ldrsh	r1, [r1, r5]
 800f160:	f000 f8ba 	bl	800f2d8 <_read_r>
 800f164:	2800      	cmp	r0, #0
 800f166:	db03      	blt.n	800f170 <__sread+0x18>
 800f168:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f16a:	181b      	adds	r3, r3, r0
 800f16c:	6563      	str	r3, [r4, #84]	; 0x54
 800f16e:	bd70      	pop	{r4, r5, r6, pc}
 800f170:	89a3      	ldrh	r3, [r4, #12]
 800f172:	4a02      	ldr	r2, [pc, #8]	; (800f17c <__sread+0x24>)
 800f174:	4013      	ands	r3, r2
 800f176:	81a3      	strh	r3, [r4, #12]
 800f178:	e7f9      	b.n	800f16e <__sread+0x16>
 800f17a:	46c0      	nop			; (mov r8, r8)
 800f17c:	ffffefff 	.word	0xffffefff

0800f180 <__swrite>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	001f      	movs	r7, r3
 800f184:	898b      	ldrh	r3, [r1, #12]
 800f186:	0005      	movs	r5, r0
 800f188:	000c      	movs	r4, r1
 800f18a:	0016      	movs	r6, r2
 800f18c:	05db      	lsls	r3, r3, #23
 800f18e:	d505      	bpl.n	800f19c <__swrite+0x1c>
 800f190:	230e      	movs	r3, #14
 800f192:	5ec9      	ldrsh	r1, [r1, r3]
 800f194:	2200      	movs	r2, #0
 800f196:	2302      	movs	r3, #2
 800f198:	f000 f882 	bl	800f2a0 <_lseek_r>
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	4a05      	ldr	r2, [pc, #20]	; (800f1b4 <__swrite+0x34>)
 800f1a0:	0028      	movs	r0, r5
 800f1a2:	4013      	ands	r3, r2
 800f1a4:	81a3      	strh	r3, [r4, #12]
 800f1a6:	0032      	movs	r2, r6
 800f1a8:	230e      	movs	r3, #14
 800f1aa:	5ee1      	ldrsh	r1, [r4, r3]
 800f1ac:	003b      	movs	r3, r7
 800f1ae:	f000 f82d 	bl	800f20c <_write_r>
 800f1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1b4:	ffffefff 	.word	0xffffefff

0800f1b8 <__sseek>:
 800f1b8:	b570      	push	{r4, r5, r6, lr}
 800f1ba:	000c      	movs	r4, r1
 800f1bc:	250e      	movs	r5, #14
 800f1be:	5f49      	ldrsh	r1, [r1, r5]
 800f1c0:	f000 f86e 	bl	800f2a0 <_lseek_r>
 800f1c4:	89a3      	ldrh	r3, [r4, #12]
 800f1c6:	1c42      	adds	r2, r0, #1
 800f1c8:	d103      	bne.n	800f1d2 <__sseek+0x1a>
 800f1ca:	4a05      	ldr	r2, [pc, #20]	; (800f1e0 <__sseek+0x28>)
 800f1cc:	4013      	ands	r3, r2
 800f1ce:	81a3      	strh	r3, [r4, #12]
 800f1d0:	bd70      	pop	{r4, r5, r6, pc}
 800f1d2:	2280      	movs	r2, #128	; 0x80
 800f1d4:	0152      	lsls	r2, r2, #5
 800f1d6:	4313      	orrs	r3, r2
 800f1d8:	81a3      	strh	r3, [r4, #12]
 800f1da:	6560      	str	r0, [r4, #84]	; 0x54
 800f1dc:	e7f8      	b.n	800f1d0 <__sseek+0x18>
 800f1de:	46c0      	nop			; (mov r8, r8)
 800f1e0:	ffffefff 	.word	0xffffefff

0800f1e4 <__sclose>:
 800f1e4:	b510      	push	{r4, lr}
 800f1e6:	230e      	movs	r3, #14
 800f1e8:	5ec9      	ldrsh	r1, [r1, r3]
 800f1ea:	f000 f823 	bl	800f234 <_close_r>
 800f1ee:	bd10      	pop	{r4, pc}

0800f1f0 <__ascii_wctomb>:
 800f1f0:	0003      	movs	r3, r0
 800f1f2:	1e08      	subs	r0, r1, #0
 800f1f4:	d005      	beq.n	800f202 <__ascii_wctomb+0x12>
 800f1f6:	2aff      	cmp	r2, #255	; 0xff
 800f1f8:	d904      	bls.n	800f204 <__ascii_wctomb+0x14>
 800f1fa:	228a      	movs	r2, #138	; 0x8a
 800f1fc:	2001      	movs	r0, #1
 800f1fe:	601a      	str	r2, [r3, #0]
 800f200:	4240      	negs	r0, r0
 800f202:	4770      	bx	lr
 800f204:	2001      	movs	r0, #1
 800f206:	700a      	strb	r2, [r1, #0]
 800f208:	e7fb      	b.n	800f202 <__ascii_wctomb+0x12>
	...

0800f20c <_write_r>:
 800f20c:	b570      	push	{r4, r5, r6, lr}
 800f20e:	0004      	movs	r4, r0
 800f210:	0008      	movs	r0, r1
 800f212:	0011      	movs	r1, r2
 800f214:	001a      	movs	r2, r3
 800f216:	2300      	movs	r3, #0
 800f218:	4d05      	ldr	r5, [pc, #20]	; (800f230 <_write_r+0x24>)
 800f21a:	602b      	str	r3, [r5, #0]
 800f21c:	f7f5 fe8d 	bl	8004f3a <_write>
 800f220:	1c43      	adds	r3, r0, #1
 800f222:	d103      	bne.n	800f22c <_write_r+0x20>
 800f224:	682b      	ldr	r3, [r5, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d000      	beq.n	800f22c <_write_r+0x20>
 800f22a:	6023      	str	r3, [r4, #0]
 800f22c:	bd70      	pop	{r4, r5, r6, pc}
 800f22e:	46c0      	nop			; (mov r8, r8)
 800f230:	20001ec4 	.word	0x20001ec4

0800f234 <_close_r>:
 800f234:	2300      	movs	r3, #0
 800f236:	b570      	push	{r4, r5, r6, lr}
 800f238:	4d06      	ldr	r5, [pc, #24]	; (800f254 <_close_r+0x20>)
 800f23a:	0004      	movs	r4, r0
 800f23c:	0008      	movs	r0, r1
 800f23e:	602b      	str	r3, [r5, #0]
 800f240:	f7f5 fe97 	bl	8004f72 <_close>
 800f244:	1c43      	adds	r3, r0, #1
 800f246:	d103      	bne.n	800f250 <_close_r+0x1c>
 800f248:	682b      	ldr	r3, [r5, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d000      	beq.n	800f250 <_close_r+0x1c>
 800f24e:	6023      	str	r3, [r4, #0]
 800f250:	bd70      	pop	{r4, r5, r6, pc}
 800f252:	46c0      	nop			; (mov r8, r8)
 800f254:	20001ec4 	.word	0x20001ec4

0800f258 <_fstat_r>:
 800f258:	2300      	movs	r3, #0
 800f25a:	b570      	push	{r4, r5, r6, lr}
 800f25c:	4d06      	ldr	r5, [pc, #24]	; (800f278 <_fstat_r+0x20>)
 800f25e:	0004      	movs	r4, r0
 800f260:	0008      	movs	r0, r1
 800f262:	0011      	movs	r1, r2
 800f264:	602b      	str	r3, [r5, #0]
 800f266:	f7f5 fe8e 	bl	8004f86 <_fstat>
 800f26a:	1c43      	adds	r3, r0, #1
 800f26c:	d103      	bne.n	800f276 <_fstat_r+0x1e>
 800f26e:	682b      	ldr	r3, [r5, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d000      	beq.n	800f276 <_fstat_r+0x1e>
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	bd70      	pop	{r4, r5, r6, pc}
 800f278:	20001ec4 	.word	0x20001ec4

0800f27c <_isatty_r>:
 800f27c:	2300      	movs	r3, #0
 800f27e:	b570      	push	{r4, r5, r6, lr}
 800f280:	4d06      	ldr	r5, [pc, #24]	; (800f29c <_isatty_r+0x20>)
 800f282:	0004      	movs	r4, r0
 800f284:	0008      	movs	r0, r1
 800f286:	602b      	str	r3, [r5, #0]
 800f288:	f7f5 fe8b 	bl	8004fa2 <_isatty>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	d103      	bne.n	800f298 <_isatty_r+0x1c>
 800f290:	682b      	ldr	r3, [r5, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d000      	beq.n	800f298 <_isatty_r+0x1c>
 800f296:	6023      	str	r3, [r4, #0]
 800f298:	bd70      	pop	{r4, r5, r6, pc}
 800f29a:	46c0      	nop			; (mov r8, r8)
 800f29c:	20001ec4 	.word	0x20001ec4

0800f2a0 <_lseek_r>:
 800f2a0:	b570      	push	{r4, r5, r6, lr}
 800f2a2:	0004      	movs	r4, r0
 800f2a4:	0008      	movs	r0, r1
 800f2a6:	0011      	movs	r1, r2
 800f2a8:	001a      	movs	r2, r3
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	4d05      	ldr	r5, [pc, #20]	; (800f2c4 <_lseek_r+0x24>)
 800f2ae:	602b      	str	r3, [r5, #0]
 800f2b0:	f7f5 fe80 	bl	8004fb4 <_lseek>
 800f2b4:	1c43      	adds	r3, r0, #1
 800f2b6:	d103      	bne.n	800f2c0 <_lseek_r+0x20>
 800f2b8:	682b      	ldr	r3, [r5, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d000      	beq.n	800f2c0 <_lseek_r+0x20>
 800f2be:	6023      	str	r3, [r4, #0]
 800f2c0:	bd70      	pop	{r4, r5, r6, pc}
 800f2c2:	46c0      	nop			; (mov r8, r8)
 800f2c4:	20001ec4 	.word	0x20001ec4

0800f2c8 <_malloc_usable_size_r>:
 800f2c8:	1f0b      	subs	r3, r1, #4
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	1f18      	subs	r0, r3, #4
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	da01      	bge.n	800f2d6 <_malloc_usable_size_r+0xe>
 800f2d2:	580b      	ldr	r3, [r1, r0]
 800f2d4:	18c0      	adds	r0, r0, r3
 800f2d6:	4770      	bx	lr

0800f2d8 <_read_r>:
 800f2d8:	b570      	push	{r4, r5, r6, lr}
 800f2da:	0004      	movs	r4, r0
 800f2dc:	0008      	movs	r0, r1
 800f2de:	0011      	movs	r1, r2
 800f2e0:	001a      	movs	r2, r3
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	4d05      	ldr	r5, [pc, #20]	; (800f2fc <_read_r+0x24>)
 800f2e6:	602b      	str	r3, [r5, #0]
 800f2e8:	f7f5 fe0a 	bl	8004f00 <_read>
 800f2ec:	1c43      	adds	r3, r0, #1
 800f2ee:	d103      	bne.n	800f2f8 <_read_r+0x20>
 800f2f0:	682b      	ldr	r3, [r5, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d000      	beq.n	800f2f8 <_read_r+0x20>
 800f2f6:	6023      	str	r3, [r4, #0]
 800f2f8:	bd70      	pop	{r4, r5, r6, pc}
 800f2fa:	46c0      	nop			; (mov r8, r8)
 800f2fc:	20001ec4 	.word	0x20001ec4

0800f300 <log>:
 800f300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f302:	0004      	movs	r4, r0
 800f304:	000d      	movs	r5, r1
 800f306:	f000 f831 	bl	800f36c <__ieee754_log>
 800f30a:	0022      	movs	r2, r4
 800f30c:	0006      	movs	r6, r0
 800f30e:	000f      	movs	r7, r1
 800f310:	002b      	movs	r3, r5
 800f312:	0020      	movs	r0, r4
 800f314:	0029      	movs	r1, r5
 800f316:	f7f3 fdfd 	bl	8002f14 <__aeabi_dcmpun>
 800f31a:	2800      	cmp	r0, #0
 800f31c:	d115      	bne.n	800f34a <log+0x4a>
 800f31e:	2200      	movs	r2, #0
 800f320:	2300      	movs	r3, #0
 800f322:	0020      	movs	r0, r4
 800f324:	0029      	movs	r1, r5
 800f326:	f7f1 f8b5 	bl	8000494 <__aeabi_dcmpgt>
 800f32a:	2800      	cmp	r0, #0
 800f32c:	d10d      	bne.n	800f34a <log+0x4a>
 800f32e:	2200      	movs	r2, #0
 800f330:	2300      	movs	r3, #0
 800f332:	0020      	movs	r0, r4
 800f334:	0029      	movs	r1, r5
 800f336:	f7f1 f893 	bl	8000460 <__aeabi_dcmpeq>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d008      	beq.n	800f350 <log+0x50>
 800f33e:	f7fc feff 	bl	800c140 <__errno>
 800f342:	2322      	movs	r3, #34	; 0x22
 800f344:	2600      	movs	r6, #0
 800f346:	4f07      	ldr	r7, [pc, #28]	; (800f364 <log+0x64>)
 800f348:	6003      	str	r3, [r0, #0]
 800f34a:	0030      	movs	r0, r6
 800f34c:	0039      	movs	r1, r7
 800f34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f350:	f7fc fef6 	bl	800c140 <__errno>
 800f354:	2321      	movs	r3, #33	; 0x21
 800f356:	6003      	str	r3, [r0, #0]
 800f358:	4803      	ldr	r0, [pc, #12]	; (800f368 <log+0x68>)
 800f35a:	f000 f9b7 	bl	800f6cc <nan>
 800f35e:	0006      	movs	r6, r0
 800f360:	000f      	movs	r7, r1
 800f362:	e7f2      	b.n	800f34a <log+0x4a>
 800f364:	fff00000 	.word	0xfff00000
 800f368:	0800fb87 	.word	0x0800fb87

0800f36c <__ieee754_log>:
 800f36c:	2280      	movs	r2, #128	; 0x80
 800f36e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f370:	000b      	movs	r3, r1
 800f372:	b08d      	sub	sp, #52	; 0x34
 800f374:	0352      	lsls	r2, r2, #13
 800f376:	4291      	cmp	r1, r2
 800f378:	da22      	bge.n	800f3c0 <__ieee754_log+0x54>
 800f37a:	004a      	lsls	r2, r1, #1
 800f37c:	0852      	lsrs	r2, r2, #1
 800f37e:	4302      	orrs	r2, r0
 800f380:	d107      	bne.n	800f392 <__ieee754_log+0x26>
 800f382:	2200      	movs	r2, #0
 800f384:	2300      	movs	r3, #0
 800f386:	2000      	movs	r0, #0
 800f388:	49b3      	ldr	r1, [pc, #716]	; (800f658 <__ieee754_log+0x2ec>)
 800f38a:	f7f2 fbc3 	bl	8001b14 <__aeabi_ddiv>
 800f38e:	b00d      	add	sp, #52	; 0x34
 800f390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f392:	2900      	cmp	r1, #0
 800f394:	da05      	bge.n	800f3a2 <__ieee754_log+0x36>
 800f396:	0002      	movs	r2, r0
 800f398:	f7f3 fa2a 	bl	80027f0 <__aeabi_dsub>
 800f39c:	2200      	movs	r2, #0
 800f39e:	2300      	movs	r3, #0
 800f3a0:	e7f3      	b.n	800f38a <__ieee754_log+0x1e>
 800f3a2:	4bae      	ldr	r3, [pc, #696]	; (800f65c <__ieee754_log+0x2f0>)
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	f7f2 ffb7 	bl	8002318 <__aeabi_dmul>
 800f3aa:	2436      	movs	r4, #54	; 0x36
 800f3ac:	000b      	movs	r3, r1
 800f3ae:	4264      	negs	r4, r4
 800f3b0:	4aab      	ldr	r2, [pc, #684]	; (800f660 <__ieee754_log+0x2f4>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	dd06      	ble.n	800f3c4 <__ieee754_log+0x58>
 800f3b6:	0002      	movs	r2, r0
 800f3b8:	000b      	movs	r3, r1
 800f3ba:	f7f2 f86f 	bl	800149c <__aeabi_dadd>
 800f3be:	e7e6      	b.n	800f38e <__ieee754_log+0x22>
 800f3c0:	2400      	movs	r4, #0
 800f3c2:	e7f5      	b.n	800f3b0 <__ieee754_log+0x44>
 800f3c4:	4da7      	ldr	r5, [pc, #668]	; (800f664 <__ieee754_log+0x2f8>)
 800f3c6:	151a      	asrs	r2, r3, #20
 800f3c8:	1952      	adds	r2, r2, r5
 800f3ca:	1912      	adds	r2, r2, r4
 800f3cc:	031b      	lsls	r3, r3, #12
 800f3ce:	4ca6      	ldr	r4, [pc, #664]	; (800f668 <__ieee754_log+0x2fc>)
 800f3d0:	0b1b      	lsrs	r3, r3, #12
 800f3d2:	9302      	str	r3, [sp, #8]
 800f3d4:	191c      	adds	r4, r3, r4
 800f3d6:	2380      	movs	r3, #128	; 0x80
 800f3d8:	035b      	lsls	r3, r3, #13
 800f3da:	4023      	ands	r3, r4
 800f3dc:	4ca3      	ldr	r4, [pc, #652]	; (800f66c <__ieee754_log+0x300>)
 800f3de:	9d02      	ldr	r5, [sp, #8]
 800f3e0:	405c      	eors	r4, r3
 800f3e2:	151b      	asrs	r3, r3, #20
 800f3e4:	189b      	adds	r3, r3, r2
 800f3e6:	4325      	orrs	r5, r4
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	0029      	movs	r1, r5
 800f3ee:	4b9f      	ldr	r3, [pc, #636]	; (800f66c <__ieee754_log+0x300>)
 800f3f0:	f7f3 f9fe 	bl	80027f0 <__aeabi_dsub>
 800f3f4:	9b02      	ldr	r3, [sp, #8]
 800f3f6:	0006      	movs	r6, r0
 800f3f8:	3302      	adds	r3, #2
 800f3fa:	031b      	lsls	r3, r3, #12
 800f3fc:	000f      	movs	r7, r1
 800f3fe:	2200      	movs	r2, #0
 800f400:	0b1b      	lsrs	r3, r3, #12
 800f402:	2b02      	cmp	r3, #2
 800f404:	dc64      	bgt.n	800f4d0 <__ieee754_log+0x164>
 800f406:	2300      	movs	r3, #0
 800f408:	f7f1 f82a 	bl	8000460 <__aeabi_dcmpeq>
 800f40c:	2800      	cmp	r0, #0
 800f40e:	d019      	beq.n	800f444 <__ieee754_log+0xd8>
 800f410:	9b00      	ldr	r3, [sp, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d100      	bne.n	800f418 <__ieee754_log+0xac>
 800f416:	e11c      	b.n	800f652 <__ieee754_log+0x2e6>
 800f418:	0018      	movs	r0, r3
 800f41a:	f7f3 fdcf 	bl	8002fbc <__aeabi_i2d>
 800f41e:	4a94      	ldr	r2, [pc, #592]	; (800f670 <__ieee754_log+0x304>)
 800f420:	4b94      	ldr	r3, [pc, #592]	; (800f674 <__ieee754_log+0x308>)
 800f422:	0004      	movs	r4, r0
 800f424:	000d      	movs	r5, r1
 800f426:	f7f2 ff77 	bl	8002318 <__aeabi_dmul>
 800f42a:	4a93      	ldr	r2, [pc, #588]	; (800f678 <__ieee754_log+0x30c>)
 800f42c:	0006      	movs	r6, r0
 800f42e:	000f      	movs	r7, r1
 800f430:	4b92      	ldr	r3, [pc, #584]	; (800f67c <__ieee754_log+0x310>)
 800f432:	0020      	movs	r0, r4
 800f434:	0029      	movs	r1, r5
 800f436:	f7f2 ff6f 	bl	8002318 <__aeabi_dmul>
 800f43a:	0002      	movs	r2, r0
 800f43c:	000b      	movs	r3, r1
 800f43e:	0030      	movs	r0, r6
 800f440:	0039      	movs	r1, r7
 800f442:	e7ba      	b.n	800f3ba <__ieee754_log+0x4e>
 800f444:	4a8e      	ldr	r2, [pc, #568]	; (800f680 <__ieee754_log+0x314>)
 800f446:	4b8f      	ldr	r3, [pc, #572]	; (800f684 <__ieee754_log+0x318>)
 800f448:	0030      	movs	r0, r6
 800f44a:	0039      	movs	r1, r7
 800f44c:	f7f2 ff64 	bl	8002318 <__aeabi_dmul>
 800f450:	0002      	movs	r2, r0
 800f452:	000b      	movs	r3, r1
 800f454:	2000      	movs	r0, #0
 800f456:	498c      	ldr	r1, [pc, #560]	; (800f688 <__ieee754_log+0x31c>)
 800f458:	f7f3 f9ca 	bl	80027f0 <__aeabi_dsub>
 800f45c:	0032      	movs	r2, r6
 800f45e:	0004      	movs	r4, r0
 800f460:	000d      	movs	r5, r1
 800f462:	003b      	movs	r3, r7
 800f464:	0030      	movs	r0, r6
 800f466:	0039      	movs	r1, r7
 800f468:	f7f2 ff56 	bl	8002318 <__aeabi_dmul>
 800f46c:	000b      	movs	r3, r1
 800f46e:	0002      	movs	r2, r0
 800f470:	0029      	movs	r1, r5
 800f472:	0020      	movs	r0, r4
 800f474:	f7f2 ff50 	bl	8002318 <__aeabi_dmul>
 800f478:	9b00      	ldr	r3, [sp, #0]
 800f47a:	9002      	str	r0, [sp, #8]
 800f47c:	9103      	str	r1, [sp, #12]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d106      	bne.n	800f490 <__ieee754_log+0x124>
 800f482:	0002      	movs	r2, r0
 800f484:	000b      	movs	r3, r1
 800f486:	0030      	movs	r0, r6
 800f488:	0039      	movs	r1, r7
 800f48a:	f7f3 f9b1 	bl	80027f0 <__aeabi_dsub>
 800f48e:	e77e      	b.n	800f38e <__ieee754_log+0x22>
 800f490:	9800      	ldr	r0, [sp, #0]
 800f492:	f7f3 fd93 	bl	8002fbc <__aeabi_i2d>
 800f496:	4a76      	ldr	r2, [pc, #472]	; (800f670 <__ieee754_log+0x304>)
 800f498:	4b76      	ldr	r3, [pc, #472]	; (800f674 <__ieee754_log+0x308>)
 800f49a:	0004      	movs	r4, r0
 800f49c:	000d      	movs	r5, r1
 800f49e:	f7f2 ff3b 	bl	8002318 <__aeabi_dmul>
 800f4a2:	4a75      	ldr	r2, [pc, #468]	; (800f678 <__ieee754_log+0x30c>)
 800f4a4:	9000      	str	r0, [sp, #0]
 800f4a6:	9101      	str	r1, [sp, #4]
 800f4a8:	4b74      	ldr	r3, [pc, #464]	; (800f67c <__ieee754_log+0x310>)
 800f4aa:	0020      	movs	r0, r4
 800f4ac:	0029      	movs	r1, r5
 800f4ae:	f7f2 ff33 	bl	8002318 <__aeabi_dmul>
 800f4b2:	0002      	movs	r2, r0
 800f4b4:	000b      	movs	r3, r1
 800f4b6:	9802      	ldr	r0, [sp, #8]
 800f4b8:	9903      	ldr	r1, [sp, #12]
 800f4ba:	f7f3 f999 	bl	80027f0 <__aeabi_dsub>
 800f4be:	0032      	movs	r2, r6
 800f4c0:	003b      	movs	r3, r7
 800f4c2:	f7f3 f995 	bl	80027f0 <__aeabi_dsub>
 800f4c6:	0002      	movs	r2, r0
 800f4c8:	000b      	movs	r3, r1
 800f4ca:	9800      	ldr	r0, [sp, #0]
 800f4cc:	9901      	ldr	r1, [sp, #4]
 800f4ce:	e7dc      	b.n	800f48a <__ieee754_log+0x11e>
 800f4d0:	2380      	movs	r3, #128	; 0x80
 800f4d2:	05db      	lsls	r3, r3, #23
 800f4d4:	f7f1 ffe2 	bl	800149c <__aeabi_dadd>
 800f4d8:	0002      	movs	r2, r0
 800f4da:	000b      	movs	r3, r1
 800f4dc:	0030      	movs	r0, r6
 800f4de:	0039      	movs	r1, r7
 800f4e0:	f7f2 fb18 	bl	8001b14 <__aeabi_ddiv>
 800f4e4:	9004      	str	r0, [sp, #16]
 800f4e6:	9105      	str	r1, [sp, #20]
 800f4e8:	9800      	ldr	r0, [sp, #0]
 800f4ea:	f7f3 fd67 	bl	8002fbc <__aeabi_i2d>
 800f4ee:	9a04      	ldr	r2, [sp, #16]
 800f4f0:	9b05      	ldr	r3, [sp, #20]
 800f4f2:	9006      	str	r0, [sp, #24]
 800f4f4:	9107      	str	r1, [sp, #28]
 800f4f6:	0010      	movs	r0, r2
 800f4f8:	0019      	movs	r1, r3
 800f4fa:	f7f2 ff0d 	bl	8002318 <__aeabi_dmul>
 800f4fe:	4a63      	ldr	r2, [pc, #396]	; (800f68c <__ieee754_log+0x320>)
 800f500:	9b02      	ldr	r3, [sp, #8]
 800f502:	4694      	mov	ip, r2
 800f504:	4463      	add	r3, ip
 800f506:	0002      	movs	r2, r0
 800f508:	930b      	str	r3, [sp, #44]	; 0x2c
 800f50a:	000b      	movs	r3, r1
 800f50c:	9008      	str	r0, [sp, #32]
 800f50e:	9109      	str	r1, [sp, #36]	; 0x24
 800f510:	f7f2 ff02 	bl	8002318 <__aeabi_dmul>
 800f514:	0004      	movs	r4, r0
 800f516:	000d      	movs	r5, r1
 800f518:	4a5d      	ldr	r2, [pc, #372]	; (800f690 <__ieee754_log+0x324>)
 800f51a:	4b5e      	ldr	r3, [pc, #376]	; (800f694 <__ieee754_log+0x328>)
 800f51c:	f7f2 fefc 	bl	8002318 <__aeabi_dmul>
 800f520:	4a5d      	ldr	r2, [pc, #372]	; (800f698 <__ieee754_log+0x32c>)
 800f522:	4b5e      	ldr	r3, [pc, #376]	; (800f69c <__ieee754_log+0x330>)
 800f524:	f7f1 ffba 	bl	800149c <__aeabi_dadd>
 800f528:	0022      	movs	r2, r4
 800f52a:	002b      	movs	r3, r5
 800f52c:	f7f2 fef4 	bl	8002318 <__aeabi_dmul>
 800f530:	4a5b      	ldr	r2, [pc, #364]	; (800f6a0 <__ieee754_log+0x334>)
 800f532:	4b5c      	ldr	r3, [pc, #368]	; (800f6a4 <__ieee754_log+0x338>)
 800f534:	f7f1 ffb2 	bl	800149c <__aeabi_dadd>
 800f538:	0022      	movs	r2, r4
 800f53a:	002b      	movs	r3, r5
 800f53c:	f7f2 feec 	bl	8002318 <__aeabi_dmul>
 800f540:	4a59      	ldr	r2, [pc, #356]	; (800f6a8 <__ieee754_log+0x33c>)
 800f542:	4b5a      	ldr	r3, [pc, #360]	; (800f6ac <__ieee754_log+0x340>)
 800f544:	f7f1 ffaa 	bl	800149c <__aeabi_dadd>
 800f548:	9a08      	ldr	r2, [sp, #32]
 800f54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f54c:	f7f2 fee4 	bl	8002318 <__aeabi_dmul>
 800f550:	4a57      	ldr	r2, [pc, #348]	; (800f6b0 <__ieee754_log+0x344>)
 800f552:	9008      	str	r0, [sp, #32]
 800f554:	9109      	str	r1, [sp, #36]	; 0x24
 800f556:	4b57      	ldr	r3, [pc, #348]	; (800f6b4 <__ieee754_log+0x348>)
 800f558:	0020      	movs	r0, r4
 800f55a:	0029      	movs	r1, r5
 800f55c:	f7f2 fedc 	bl	8002318 <__aeabi_dmul>
 800f560:	4a55      	ldr	r2, [pc, #340]	; (800f6b8 <__ieee754_log+0x34c>)
 800f562:	4b56      	ldr	r3, [pc, #344]	; (800f6bc <__ieee754_log+0x350>)
 800f564:	f7f1 ff9a 	bl	800149c <__aeabi_dadd>
 800f568:	0022      	movs	r2, r4
 800f56a:	002b      	movs	r3, r5
 800f56c:	f7f2 fed4 	bl	8002318 <__aeabi_dmul>
 800f570:	4a53      	ldr	r2, [pc, #332]	; (800f6c0 <__ieee754_log+0x354>)
 800f572:	4b54      	ldr	r3, [pc, #336]	; (800f6c4 <__ieee754_log+0x358>)
 800f574:	f7f1 ff92 	bl	800149c <__aeabi_dadd>
 800f578:	0022      	movs	r2, r4
 800f57a:	002b      	movs	r3, r5
 800f57c:	f7f2 fecc 	bl	8002318 <__aeabi_dmul>
 800f580:	0002      	movs	r2, r0
 800f582:	000b      	movs	r3, r1
 800f584:	9808      	ldr	r0, [sp, #32]
 800f586:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f588:	f7f1 ff88 	bl	800149c <__aeabi_dadd>
 800f58c:	9a02      	ldr	r2, [sp, #8]
 800f58e:	4b4e      	ldr	r3, [pc, #312]	; (800f6c8 <__ieee754_log+0x35c>)
 800f590:	0004      	movs	r4, r0
 800f592:	1a9b      	subs	r3, r3, r2
 800f594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f596:	000d      	movs	r5, r1
 800f598:	4313      	orrs	r3, r2
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	dd34      	ble.n	800f608 <__ieee754_log+0x29c>
 800f59e:	2200      	movs	r2, #0
 800f5a0:	4b39      	ldr	r3, [pc, #228]	; (800f688 <__ieee754_log+0x31c>)
 800f5a2:	0030      	movs	r0, r6
 800f5a4:	0039      	movs	r1, r7
 800f5a6:	f7f2 feb7 	bl	8002318 <__aeabi_dmul>
 800f5aa:	0032      	movs	r2, r6
 800f5ac:	003b      	movs	r3, r7
 800f5ae:	f7f2 feb3 	bl	8002318 <__aeabi_dmul>
 800f5b2:	0002      	movs	r2, r0
 800f5b4:	000b      	movs	r3, r1
 800f5b6:	9002      	str	r0, [sp, #8]
 800f5b8:	9103      	str	r1, [sp, #12]
 800f5ba:	0020      	movs	r0, r4
 800f5bc:	0029      	movs	r1, r5
 800f5be:	f7f1 ff6d 	bl	800149c <__aeabi_dadd>
 800f5c2:	9a04      	ldr	r2, [sp, #16]
 800f5c4:	9b05      	ldr	r3, [sp, #20]
 800f5c6:	f7f2 fea7 	bl	8002318 <__aeabi_dmul>
 800f5ca:	9b00      	ldr	r3, [sp, #0]
 800f5cc:	0004      	movs	r4, r0
 800f5ce:	000d      	movs	r5, r1
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d106      	bne.n	800f5e2 <__ieee754_log+0x276>
 800f5d4:	0002      	movs	r2, r0
 800f5d6:	000b      	movs	r3, r1
 800f5d8:	9802      	ldr	r0, [sp, #8]
 800f5da:	9903      	ldr	r1, [sp, #12]
 800f5dc:	f7f3 f908 	bl	80027f0 <__aeabi_dsub>
 800f5e0:	e74f      	b.n	800f482 <__ieee754_log+0x116>
 800f5e2:	4a23      	ldr	r2, [pc, #140]	; (800f670 <__ieee754_log+0x304>)
 800f5e4:	4b23      	ldr	r3, [pc, #140]	; (800f674 <__ieee754_log+0x308>)
 800f5e6:	9806      	ldr	r0, [sp, #24]
 800f5e8:	9907      	ldr	r1, [sp, #28]
 800f5ea:	f7f2 fe95 	bl	8002318 <__aeabi_dmul>
 800f5ee:	4a22      	ldr	r2, [pc, #136]	; (800f678 <__ieee754_log+0x30c>)
 800f5f0:	9000      	str	r0, [sp, #0]
 800f5f2:	9101      	str	r1, [sp, #4]
 800f5f4:	9806      	ldr	r0, [sp, #24]
 800f5f6:	9907      	ldr	r1, [sp, #28]
 800f5f8:	4b20      	ldr	r3, [pc, #128]	; (800f67c <__ieee754_log+0x310>)
 800f5fa:	f7f2 fe8d 	bl	8002318 <__aeabi_dmul>
 800f5fe:	0022      	movs	r2, r4
 800f600:	002b      	movs	r3, r5
 800f602:	f7f1 ff4b 	bl	800149c <__aeabi_dadd>
 800f606:	e754      	b.n	800f4b2 <__ieee754_log+0x146>
 800f608:	0002      	movs	r2, r0
 800f60a:	000b      	movs	r3, r1
 800f60c:	0030      	movs	r0, r6
 800f60e:	0039      	movs	r1, r7
 800f610:	f7f3 f8ee 	bl	80027f0 <__aeabi_dsub>
 800f614:	9a04      	ldr	r2, [sp, #16]
 800f616:	9b05      	ldr	r3, [sp, #20]
 800f618:	f7f2 fe7e 	bl	8002318 <__aeabi_dmul>
 800f61c:	9b00      	ldr	r3, [sp, #0]
 800f61e:	0004      	movs	r4, r0
 800f620:	000d      	movs	r5, r1
 800f622:	2b00      	cmp	r3, #0
 800f624:	d102      	bne.n	800f62c <__ieee754_log+0x2c0>
 800f626:	0002      	movs	r2, r0
 800f628:	000b      	movs	r3, r1
 800f62a:	e72c      	b.n	800f486 <__ieee754_log+0x11a>
 800f62c:	4a10      	ldr	r2, [pc, #64]	; (800f670 <__ieee754_log+0x304>)
 800f62e:	4b11      	ldr	r3, [pc, #68]	; (800f674 <__ieee754_log+0x308>)
 800f630:	9806      	ldr	r0, [sp, #24]
 800f632:	9907      	ldr	r1, [sp, #28]
 800f634:	f7f2 fe70 	bl	8002318 <__aeabi_dmul>
 800f638:	4a0f      	ldr	r2, [pc, #60]	; (800f678 <__ieee754_log+0x30c>)
 800f63a:	9000      	str	r0, [sp, #0]
 800f63c:	9101      	str	r1, [sp, #4]
 800f63e:	9806      	ldr	r0, [sp, #24]
 800f640:	9907      	ldr	r1, [sp, #28]
 800f642:	4b0e      	ldr	r3, [pc, #56]	; (800f67c <__ieee754_log+0x310>)
 800f644:	f7f2 fe68 	bl	8002318 <__aeabi_dmul>
 800f648:	0002      	movs	r2, r0
 800f64a:	000b      	movs	r3, r1
 800f64c:	0020      	movs	r0, r4
 800f64e:	0029      	movs	r1, r5
 800f650:	e733      	b.n	800f4ba <__ieee754_log+0x14e>
 800f652:	2000      	movs	r0, #0
 800f654:	2100      	movs	r1, #0
 800f656:	e69a      	b.n	800f38e <__ieee754_log+0x22>
 800f658:	c3500000 	.word	0xc3500000
 800f65c:	43500000 	.word	0x43500000
 800f660:	7fefffff 	.word	0x7fefffff
 800f664:	fffffc01 	.word	0xfffffc01
 800f668:	00095f64 	.word	0x00095f64
 800f66c:	3ff00000 	.word	0x3ff00000
 800f670:	fee00000 	.word	0xfee00000
 800f674:	3fe62e42 	.word	0x3fe62e42
 800f678:	35793c76 	.word	0x35793c76
 800f67c:	3dea39ef 	.word	0x3dea39ef
 800f680:	55555555 	.word	0x55555555
 800f684:	3fd55555 	.word	0x3fd55555
 800f688:	3fe00000 	.word	0x3fe00000
 800f68c:	fff9eb86 	.word	0xfff9eb86
 800f690:	df3e5244 	.word	0xdf3e5244
 800f694:	3fc2f112 	.word	0x3fc2f112
 800f698:	96cb03de 	.word	0x96cb03de
 800f69c:	3fc74664 	.word	0x3fc74664
 800f6a0:	94229359 	.word	0x94229359
 800f6a4:	3fd24924 	.word	0x3fd24924
 800f6a8:	55555593 	.word	0x55555593
 800f6ac:	3fe55555 	.word	0x3fe55555
 800f6b0:	d078c69f 	.word	0xd078c69f
 800f6b4:	3fc39a09 	.word	0x3fc39a09
 800f6b8:	1d8e78af 	.word	0x1d8e78af
 800f6bc:	3fcc71c5 	.word	0x3fcc71c5
 800f6c0:	9997fa04 	.word	0x9997fa04
 800f6c4:	3fd99999 	.word	0x3fd99999
 800f6c8:	0006b851 	.word	0x0006b851

0800f6cc <nan>:
 800f6cc:	2000      	movs	r0, #0
 800f6ce:	4901      	ldr	r1, [pc, #4]	; (800f6d4 <nan+0x8>)
 800f6d0:	4770      	bx	lr
 800f6d2:	46c0      	nop			; (mov r8, r8)
 800f6d4:	7ff80000 	.word	0x7ff80000

0800f6d8 <_init>:
 800f6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6da:	46c0      	nop			; (mov r8, r8)
 800f6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6de:	bc08      	pop	{r3}
 800f6e0:	469e      	mov	lr, r3
 800f6e2:	4770      	bx	lr

0800f6e4 <_fini>:
 800f6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6e6:	46c0      	nop			; (mov r8, r8)
 800f6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ea:	bc08      	pop	{r3}
 800f6ec:	469e      	mov	lr, r3
 800f6ee:	4770      	bx	lr
