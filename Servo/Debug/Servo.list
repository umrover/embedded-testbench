
Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c14  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ddc  08003ddc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ddc  08003ddc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ddc  08003ddc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ddc  08003ddc  00013ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000080  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a544  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001903  00000000  00000000  0002a5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002bee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000908  00000000  00000000  0002c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002017a  00000000  00000000  0002d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c9e8  00000000  00000000  0004d34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4690  00000000  00000000  00059d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e3c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b40  00000000  00000000  0011e414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003d94 	.word	0x08003d94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08003d94 	.word	0x08003d94

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr
 80007e4:	0000      	movs	r0, r0
	...

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fb27 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f841 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f6:	f000 f92f 	bl	8000a58 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007fa:	f000 f89d 	bl	8000938 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Servo* myServo = new_servo(&htim1, TIM_CHANNEL_1, &(TIM1->CCR1));
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <main+0x88>)
 8000800:	2100      	movs	r1, #0
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <main+0x8c>)
 8000804:	f000 f9a5 	bl	8000b52 <new_servo>
 8000808:	6078      	str	r0, [r7, #4]
  initialize_servo(myServo, 20.0);
 800080a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8000850 <main+0x68>
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 f9e6 	bl	8000be0 <initialize_servo>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  set_servo_angle(myServo, 90);
 8000814:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8000858 <main+0x70>
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 f9b5 	bl	8000b88 <set_servo_angle>
	  HAL_Delay(1000);
 800081e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000822:	f000 fb73 	bl	8000f0c <HAL_Delay>
	  set_servo_angle(myServo,  0);
 8000826:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8000860 <main+0x78>
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 f9ac 	bl	8000b88 <set_servo_angle>
	  HAL_Delay(1000);
 8000830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000834:	f000 fb6a 	bl	8000f0c <HAL_Delay>
	  set_servo_angle(myServo, -90);
 8000838:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8000868 <main+0x80>
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f9a3 	bl	8000b88 <set_servo_angle>
	  HAL_Delay(1000);
 8000842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000846:	f000 fb61 	bl	8000f0c <HAL_Delay>
	  set_servo_angle(myServo, 90);
 800084a:	e7e3      	b.n	8000814 <main+0x2c>
 800084c:	f3af 8000 	nop.w
 8000850:	00000000 	.word	0x00000000
 8000854:	40340000 	.word	0x40340000
 8000858:	00000000 	.word	0x00000000
 800085c:	40568000 	.word	0x40568000
	...
 800086c:	c0568000 	.word	0xc0568000
 8000870:	40012c34 	.word	0x40012c34
 8000874:	2000008c 	.word	0x2000008c

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b0a6      	sub	sp, #152	; 0x98
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000882:	2228      	movs	r2, #40	; 0x28
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f003 f9ca 	bl	8003c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2258      	movs	r2, #88	; 0x58
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 f9bc 	bl	8003c20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a8:	2302      	movs	r3, #2
 80008aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ac:	2301      	movs	r3, #1
 80008ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b0:	2310      	movs	r3, #16
 80008b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fdc4 	bl	8001464 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008e2:	f000 f931 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2302      	movs	r3, #2
 80008ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000900:	2102      	movs	r1, #2
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fe02 	bl	800250c <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800090e:	f000 f91b 	bl	8000b48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000916:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f001 ffda 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800092a:	f000 f90d 	bl	8000b48 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3798      	adds	r7, #152	; 0x98
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b096      	sub	sp, #88	; 0x58
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	222c      	movs	r2, #44	; 0x2c
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f003 f95b 	bl	8003c20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096a:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <MX_TIM1_Init+0x118>)
 800096c:	4a39      	ldr	r2, [pc, #228]	; (8000a54 <MX_TIM1_Init+0x11c>)
 800096e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8000970:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <MX_TIM1_Init+0x118>)
 8000972:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000976:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <MX_TIM1_Init+0x118>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800097e:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <MX_TIM1_Init+0x118>)
 8000980:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000984:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <MX_TIM1_Init+0x118>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098c:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <MX_TIM1_Init+0x118>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <MX_TIM1_Init+0x118>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000998:	482d      	ldr	r0, [pc, #180]	; (8000a50 <MX_TIM1_Init+0x118>)
 800099a:	f002 f9bb 	bl	8002d14 <HAL_TIM_PWM_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80009a4:	f000 f8d0 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009b8:	4619      	mov	r1, r3
 80009ba:	4825      	ldr	r0, [pc, #148]	; (8000a50 <MX_TIM1_Init+0x118>)
 80009bc:	f002 ffec 	bl	8003998 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80009c6:	f000 f8bf 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ca:	2360      	movs	r3, #96	; 0x60
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d2:	2300      	movs	r3, #0
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <MX_TIM1_Init+0x118>)
 80009f0:	f002 faf4 	bl	8002fdc <HAL_TIM_PWM_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80009fa:	f000 f8a5 	bl	8000b48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4619      	mov	r1, r3
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <MX_TIM1_Init+0x118>)
 8000a34:	f003 f83c 	bl	8003ab0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000a3e:	f000 f883 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a42:	4803      	ldr	r0, [pc, #12]	; (8000a50 <MX_TIM1_Init+0x118>)
 8000a44:	f000 f928 	bl	8000c98 <HAL_TIM_MspPostInit>

}
 8000a48:	bf00      	nop
 8000a4a:	3758      	adds	r7, #88	; 0x58
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000008c 	.word	0x2000008c
 8000a54:	40012c00 	.word	0x40012c00

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a33      	ldr	r2, [pc, #204]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000a74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a78:	6153      	str	r3, [r2, #20]
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a2d      	ldr	r2, [pc, #180]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a90:	6153      	str	r3, [r2, #20]
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a27      	ldr	r2, [pc, #156]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	6153      	str	r3, [r2, #20]
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac0:	6153      	str	r3, [r2, #20]
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_GPIO_Init+0xe8>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f000 fcad 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4814      	ldr	r0, [pc, #80]	; (8000b44 <MX_GPIO_Init+0xec>)
 8000af2:	f000 fb15 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000af6:	230c      	movs	r3, #12
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b06:	2307      	movs	r3, #7
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f000 fb04 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b18:	2320      	movs	r3, #32
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f000 faf5 	bl	8001120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000800 	.word	0x48000800

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>

08000b52 <new_servo>:
#include "servo.h"

Servo* new_servo(TIM_HandleTypeDef* timer, uint32_t channel, uint32_t *output) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]

	Servo* servo = (Servo*) malloc(sizeof(Servo));
 8000b5e:	200c      	movs	r0, #12
 8000b60:	f003 f856 	bl	8003c10 <malloc>
 8000b64:	4603      	mov	r3, r0
 8000b66:	617b      	str	r3, [r7, #20]
	servo->timer = timer;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	601a      	str	r2, [r3, #0]
	servo->channel = channel;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	68ba      	ldr	r2, [r7, #8]
 8000b72:	605a      	str	r2, [r3, #4]
	servo->output = output;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	609a      	str	r2, [r3, #8]
	return servo;
 8000b7a:	697b      	ldr	r3, [r7, #20]

}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	0000      	movs	r0, r0
	...

08000b88 <set_servo_angle>:


void set_servo_angle(Servo* servo, double angle) {
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	ed87 0b00 	vstr	d0, [r7]
	*(servo->output) = (uint32_t) (((5.0/9) * angle) + 150.0);//(uint32_t) (2.0/1.8 * angle);
 8000b94:	a30e      	add	r3, pc, #56	; (adr r3, 8000bd0 <set_servo_angle+0x48>)
 8000b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b9e:	f7ff fb1b 	bl	80001d8 <__aeabi_dmul>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	4619      	mov	r1, r3
 8000baa:	a30b      	add	r3, pc, #44	; (adr r3, 8000bd8 <set_servo_angle+0x50>)
 8000bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb0:	f7ff fc42 	bl	8000438 <__adddf3>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	4610      	mov	r0, r2
 8000bba:	4619      	mov	r1, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	689c      	ldr	r4, [r3, #8]
 8000bc0:	f7ff fdf0 	bl	80007a4 <__aeabi_d2uiz>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	6023      	str	r3, [r4, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	71c71c72 	.word	0x71c71c72
 8000bd4:	3fe1c71c 	.word	0x3fe1c71c
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	4062c000 	.word	0x4062c000

08000be0 <initialize_servo>:

void initialize_servo(Servo* servo, double angle) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	ed87 0b00 	vstr	d0, [r7]
	HAL_TIM_PWM_Start(servo->timer, servo->channel);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	f002 f8e4 	bl	8002dc4 <HAL_TIM_PWM_Start>
	set_servo_angle(servo, angle);
 8000bfc:	ed97 0b00 	vldr	d0, [r7]
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f7ff ffc1 	bl	8000b88 <set_servo_angle>
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x44>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x44>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6193      	str	r3, [r2, #24]
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x44>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x44>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x44>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	61d3      	str	r3, [r2, #28]
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x44>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c46:	2007      	movs	r0, #7
 8000c48:	f000 fa36 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_TIM_PWM_MspInit+0x38>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d10b      	bne.n	8000c82 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c74:	6193      	str	r3, [r2, #24]
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40012c00 	.word	0x40012c00
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <HAL_TIM_MspPostInit+0x64>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d11b      	bne.n	8000cf2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_TIM_MspPostInit+0x68>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_TIM_MspPostInit+0x68>)
 8000cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_TIM_MspPostInit+0x68>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_TIM_MspPostInit+0x6c>)
 8000cee:	f000 fa17 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3720      	adds	r7, #32
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40012c00 	.word	0x40012c00
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48000800 	.word	0x48000800

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f8ba 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_sbrk>:
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
 8000d8c:	f002 ff16 	bl	8003bbc <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20010000 	.word	0x20010000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	200000d8 	.word	0x200000d8
 8000dc4:	200000f0 	.word	0x200000f0

08000dc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df0:	f7ff ffea 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	; (8000e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f002 fed5 	bl	8003bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1e:	f7ff fce3 	bl	80007e8 <main>

08000e22 <LoopForever>:

LoopForever:
    b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e30:	08003de4 	.word	0x08003de4
  ldr r2, =_sbss
 8000e34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e38:	200000f0 	.word	0x200000f0

08000e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_2_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_Init+0x28>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_Init+0x28>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 f931 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f808 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff fed8 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40022000 	.word	0x40022000

08000e6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f93b 	bl	8001106 <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea8:	f000 f911 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	200000dc 	.word	0x200000dc

08000ef4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200000dc 	.word	0x200000dc

08000f0c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff47 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff5c 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffb0 	bl	8001074 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e160      	b.n	80013f2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8152 	beq.w	80013ec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_Init+0x40>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	f003 0201 	and.w	r2, r3, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d017      	beq.n	80011fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d123      	bne.n	8001252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	6939      	ldr	r1, [r7, #16]
 800124e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0203 	and.w	r2, r3, #3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80ac 	beq.w	80013ec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	4b5e      	ldr	r3, [pc, #376]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a5d      	ldr	r2, [pc, #372]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ac:	4a59      	ldr	r2, [pc, #356]	; (8001414 <HAL_GPIO_Init+0x2f4>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012d6:	d025      	beq.n	8001324 <HAL_GPIO_Init+0x204>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a4f      	ldr	r2, [pc, #316]	; (8001418 <HAL_GPIO_Init+0x2f8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d01f      	beq.n	8001320 <HAL_GPIO_Init+0x200>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4e      	ldr	r2, [pc, #312]	; (800141c <HAL_GPIO_Init+0x2fc>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d019      	beq.n	800131c <HAL_GPIO_Init+0x1fc>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4d      	ldr	r2, [pc, #308]	; (8001420 <HAL_GPIO_Init+0x300>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1f8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <HAL_GPIO_Init+0x304>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1f4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4b      	ldr	r2, [pc, #300]	; (8001428 <HAL_GPIO_Init+0x308>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1f0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a4a      	ldr	r2, [pc, #296]	; (800142c <HAL_GPIO_Init+0x30c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1ec>
 8001308:	2306      	movs	r3, #6
 800130a:	e00c      	b.n	8001326 <HAL_GPIO_Init+0x206>
 800130c:	2307      	movs	r3, #7
 800130e:	e00a      	b.n	8001326 <HAL_GPIO_Init+0x206>
 8001310:	2305      	movs	r3, #5
 8001312:	e008      	b.n	8001326 <HAL_GPIO_Init+0x206>
 8001314:	2304      	movs	r3, #4
 8001316:	e006      	b.n	8001326 <HAL_GPIO_Init+0x206>
 8001318:	2303      	movs	r3, #3
 800131a:	e004      	b.n	8001326 <HAL_GPIO_Init+0x206>
 800131c:	2302      	movs	r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x206>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <HAL_GPIO_Init+0x206>
 8001324:	2300      	movs	r3, #0
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	f002 0203 	and.w	r2, r2, #3
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	4093      	lsls	r3, r2
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001336:	4937      	ldr	r1, [pc, #220]	; (8001414 <HAL_GPIO_Init+0x2f4>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001344:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <HAL_GPIO_Init+0x310>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001368:	4a31      	ldr	r2, [pc, #196]	; (8001430 <HAL_GPIO_Init+0x310>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_GPIO_Init+0x310>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001392:	4a27      	ldr	r2, [pc, #156]	; (8001430 <HAL_GPIO_Init+0x310>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001398:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_GPIO_Init+0x310>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013bc:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <HAL_GPIO_Init+0x310>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_GPIO_Init+0x310>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <HAL_GPIO_Init+0x310>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	3301      	adds	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f47f ae97 	bne.w	8001130 <HAL_GPIO_Init+0x10>
  }
}
 8001402:	bf00      	nop
 8001404:	bf00      	nop
 8001406:	371c      	adds	r7, #28
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000
 8001418:	48000400 	.word	0x48000400
 800141c:	48000800 	.word	0x48000800
 8001420:	48000c00 	.word	0x48000c00
 8001424:	48001000 	.word	0x48001000
 8001428:	48001400 	.word	0x48001400
 800142c:	48001800 	.word	0x48001800
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001450:	e002      	b.n	8001458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800146a:	af00      	add	r7, sp, #0
 800146c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001470:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001474:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	f001 b83a 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 816f 	beq.w	800177e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014a0:	4bb5      	ldr	r3, [pc, #724]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d00c      	beq.n	80014c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ac:	4bb2      	ldr	r3, [pc, #712]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d15c      	bne.n	8001572 <HAL_RCC_OscConfig+0x10e>
 80014b8:	4baf      	ldr	r3, [pc, #700]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c4:	d155      	bne.n	8001572 <HAL_RCC_OscConfig+0x10e>
 80014c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	095b      	lsrs	r3, r3, #5
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d102      	bne.n	80014f8 <HAL_RCC_OscConfig+0x94>
 80014f2:	4ba1      	ldr	r3, [pc, #644]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	e015      	b.n	8001524 <HAL_RCC_OscConfig+0xc0>
 80014f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800150c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001510:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001514:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001520:	4b95      	ldr	r3, [pc, #596]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001528:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800152c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001530:	fa92 f2a2 	rbit	r2, r2
 8001534:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001538:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800153c:	fab2 f282 	clz	r2, r2
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	f042 0220 	orr.w	r2, r2, #32
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f002 021f 	and.w	r2, r2, #31
 800154c:	2101      	movs	r1, #1
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8111 	beq.w	800177c <HAL_RCC_OscConfig+0x318>
 800155a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 8108 	bne.w	800177c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	f000 bfc6 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001576:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x12e>
 8001584:	4b7c      	ldr	r3, [pc, #496]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a7b      	ldr	r2, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 800158a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e036      	b.n	8001600 <HAL_RCC_OscConfig+0x19c>
 8001592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001596:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x158>
 80015a2:	4b75      	ldr	r3, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a74      	ldr	r2, [pc, #464]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b72      	ldr	r3, [pc, #456]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a71      	ldr	r2, [pc, #452]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e021      	b.n	8001600 <HAL_RCC_OscConfig+0x19c>
 80015bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x184>
 80015ce:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a69      	ldr	r2, [pc, #420]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b67      	ldr	r3, [pc, #412]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a66      	ldr	r2, [pc, #408]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0x19c>
 80015e8:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a62      	ldr	r2, [pc, #392]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b60      	ldr	r3, [pc, #384]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a5f      	ldr	r2, [pc, #380]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 80015fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fe:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001604:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d059      	beq.n	80016c4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fc70 	bl	8000ef4 <HAL_GetTick>
 8001614:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161a:	f7ff fc6b 	bl	8000ef4 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d902      	bls.n	8001630 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	f000 bf67 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 8001630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001634:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001644:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d102      	bne.n	8001662 <HAL_RCC_OscConfig+0x1fe>
 800165c:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	e015      	b.n	800168e <HAL_RCC_OscConfig+0x22a>
 8001662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001666:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001676:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800167e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001692:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001696:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800169a:	fa92 f2a2 	rbit	r2, r2
 800169e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80016a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016a6:	fab2 f282 	clz	r2, r2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	f042 0220 	orr.w	r2, r2, #32
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	f002 021f 	and.w	r2, r2, #31
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0ab      	beq.n	800161a <HAL_RCC_OscConfig+0x1b6>
 80016c2:	e05c      	b.n	800177e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc16 	bl	8000ef4 <HAL_GetTick>
 80016c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ce:	f7ff fc11 	bl	8000ef4 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d902      	bls.n	80016e4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	f000 bf0d 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 80016e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80016f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d102      	bne.n	8001716 <HAL_RCC_OscConfig+0x2b2>
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x2de>
 8001716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800172a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001732:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001746:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800174a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800174e:	fa92 f2a2 	rbit	r2, r2
 8001752:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001756:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800175a:	fab2 f282 	clz	r2, r2
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	f042 0220 	orr.w	r2, r2, #32
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	f002 021f 	and.w	r2, r2, #31
 800176a:	2101      	movs	r1, #1
 800176c:	fa01 f202 	lsl.w	r2, r1, r2
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ab      	bne.n	80016ce <HAL_RCC_OscConfig+0x26a>
 8001776:	e002      	b.n	800177e <HAL_RCC_OscConfig+0x31a>
 8001778:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001782:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 817f 	beq.w	8001a92 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001794:	4ba7      	ldr	r3, [pc, #668]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00c      	beq.n	80017ba <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017a0:	4ba4      	ldr	r3, [pc, #656]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d173      	bne.n	8001894 <HAL_RCC_OscConfig+0x430>
 80017ac:	4ba1      	ldr	r3, [pc, #644]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80017b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017b8:	d16c      	bne.n	8001894 <HAL_RCC_OscConfig+0x430>
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80017cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d102      	bne.n	80017ea <HAL_RCC_OscConfig+0x386>
 80017e4:	4b93      	ldr	r3, [pc, #588]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	e013      	b.n	8001812 <HAL_RCC_OscConfig+0x3ae>
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80017fc:	2302      	movs	r3, #2
 80017fe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001802:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800180e:	4b89      	ldr	r3, [pc, #548]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	2202      	movs	r2, #2
 8001814:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001818:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800181c:	fa92 f2a2 	rbit	r2, r2
 8001820:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001824:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001828:	fab2 f282 	clz	r2, r2
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f042 0220 	orr.w	r2, r2, #32
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	f002 021f 	and.w	r2, r2, #31
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f202 	lsl.w	r2, r1, r2
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00a      	beq.n	800185a <HAL_RCC_OscConfig+0x3f6>
 8001844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001848:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d002      	beq.n	800185a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	f000 be52 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b76      	ldr	r3, [pc, #472]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001866:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	21f8      	movs	r1, #248	; 0xf8
 8001870:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001878:	fa91 f1a1 	rbit	r1, r1
 800187c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001880:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001884:	fab1 f181 	clz	r1, r1
 8001888:	b2c9      	uxtb	r1, r1
 800188a:	408b      	lsls	r3, r1
 800188c:	4969      	ldr	r1, [pc, #420]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	e0fe      	b.n	8001a92 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001898:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8088 	beq.w	80019b6 <HAL_RCC_OscConfig+0x552>
 80018a6:	2301      	movs	r3, #1
 80018a8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80018b8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	461a      	mov	r2, r3
 80018ce:	2301      	movs	r3, #1
 80018d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb0f 	bl	8000ef4 <HAL_GetTick>
 80018d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff fb0a 	bl	8000ef4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d902      	bls.n	80018f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	f000 be06 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001904:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <HAL_RCC_OscConfig+0x4be>
 800191c:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e013      	b.n	800194a <HAL_RCC_OscConfig+0x4e6>
 8001922:	2302      	movs	r3, #2
 8001924:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800193a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001946:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	2202      	movs	r2, #2
 800194c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001950:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001954:	fa92 f2a2 	rbit	r2, r2
 8001958:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800195c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001960:	fab2 f282 	clz	r2, r2
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f042 0220 	orr.w	r2, r2, #32
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f002 021f 	and.w	r2, r2, #31
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0af      	beq.n	80018dc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001988:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	21f8      	movs	r1, #248	; 0xf8
 8001992:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800199a:	fa91 f1a1 	rbit	r1, r1
 800199e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80019a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019a6:	fab1 f181 	clz	r1, r1
 80019aa:	b2c9      	uxtb	r1, r1
 80019ac:	408b      	lsls	r3, r1
 80019ae:	4921      	ldr	r1, [pc, #132]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
 80019b4:	e06d      	b.n	8001a92 <HAL_RCC_OscConfig+0x62e>
 80019b6:	2301      	movs	r3, #1
 80019b8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80019c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	461a      	mov	r2, r3
 80019de:	2300      	movs	r3, #0
 80019e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fa87 	bl	8000ef4 <HAL_GetTick>
 80019e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fa82 	bl	8000ef4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d902      	bls.n	8001a02 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	f000 bd7e 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 8001a02:	2302      	movs	r3, #2
 8001a04:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001a14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5d4>
 8001a2c:	4b01      	ldr	r3, [pc, #4]	; (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	e016      	b.n	8001a60 <HAL_RCC_OscConfig+0x5fc>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a5c:	4bbf      	ldr	r3, [pc, #764]	; (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	2202      	movs	r2, #2
 8001a62:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a66:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a6a:	fa92 f2a2 	rbit	r2, r2
 8001a6e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001a72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a76:	fab2 f282 	clz	r2, r2
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f042 0220 	orr.w	r2, r2, #32
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f002 021f 	and.w	r2, r2, #31
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ac      	bne.n	80019ec <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8113 	beq.w	8001cce <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d07c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x74e>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001aca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4ba2      	ldr	r3, [pc, #648]	; (8001d60 <HAL_RCC_OscConfig+0x8fc>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	461a      	mov	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fa07 	bl	8000ef4 <HAL_GetTick>
 8001ae6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff fa02 	bl	8000ef4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d902      	bls.n	8001b02 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	f000 bcfe 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 8001b02:	2302      	movs	r3, #2
 8001b04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b22:	2202      	movs	r2, #2
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f2a3 	rbit	r2, r3
 8001b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b46:	2202      	movs	r2, #2
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	4b7e      	ldr	r3, [pc, #504]	; (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b6e:	2102      	movs	r1, #2
 8001b70:	6019      	str	r1, [r3, #0]
 8001b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	fa93 f1a3 	rbit	r1, r3
 8001b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b88:	6019      	str	r1, [r3, #0]
  return result;
 8001b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d09d      	beq.n	8001aec <HAL_RCC_OscConfig+0x688>
 8001bb0:	e08d      	b.n	8001cce <HAL_RCC_OscConfig+0x86a>
 8001bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f2a3 	rbit	r2, r3
 8001bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bd4:	601a      	str	r2, [r3, #0]
  return result;
 8001bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bde:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b5d      	ldr	r3, [pc, #372]	; (8001d60 <HAL_RCC_OscConfig+0x8fc>)
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f97e 	bl	8000ef4 <HAL_GetTick>
 8001bf8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f979 	bl	8000ef4 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d902      	bls.n	8001c14 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	f000 bc75 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 8001c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c40:	2202      	movs	r2, #2
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c64:	2202      	movs	r2, #2
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c7e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	6019      	str	r1, [r3, #0]
 8001c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c94:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	fa93 f1a3 	rbit	r1, r3
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ca6:	6019      	str	r1, [r3, #0]
  return result;
 8001ca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d197      	bne.n	8001bfe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 81a5 	beq.w	800202e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d116      	bne.n	8001d24 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	61d3      	str	r3, [r2, #28]
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d1c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_RCC_OscConfig+0x900>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d121      	bne.n	8001d74 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_RCC_OscConfig+0x900>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <HAL_RCC_OscConfig+0x900>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff f8da 	bl	8000ef4 <HAL_GetTick>
 8001d40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	e010      	b.n	8001d68 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff f8d5 	bl	8000ef4 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d908      	bls.n	8001d68 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e3d1      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	10908120 	.word	0x10908120
 8001d64:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b8d      	ldr	r3, [pc, #564]	; (8001fa0 <HAL_RCC_OscConfig+0xb3c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0e8      	beq.n	8001d46 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x92e>
 8001d84:	4b87      	ldr	r3, [pc, #540]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a86      	ldr	r2, [pc, #536]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	e035      	b.n	8001dfe <HAL_RCC_OscConfig+0x99a>
 8001d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x958>
 8001da2:	4b80      	ldr	r3, [pc, #512]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a7f      	ldr	r2, [pc, #508]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	4b7d      	ldr	r3, [pc, #500]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a7c      	ldr	r2, [pc, #496]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	e020      	b.n	8001dfe <HAL_RCC_OscConfig+0x99a>
 8001dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x982>
 8001dcc:	4b75      	ldr	r3, [pc, #468]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a74      	ldr	r2, [pc, #464]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	4b72      	ldr	r3, [pc, #456]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a71      	ldr	r2, [pc, #452]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0x99a>
 8001de6:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a6e      	ldr	r2, [pc, #440]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a6b      	ldr	r2, [pc, #428]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8081 	beq.w	8001f12 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7ff f870 	bl	8000ef4 <HAL_GetTick>
 8001e14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	e00b      	b.n	8001e32 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff f86b 	bl	8000ef4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e365      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 8001e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e36:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e5e:	2202      	movs	r2, #2
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f2a3 	rbit	r2, r3
 8001e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e74:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e78:	601a      	str	r2, [r3, #0]
  return result;
 8001e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d102      	bne.n	8001e9e <HAL_RCC_OscConfig+0xa3a>
 8001e98:	4b42      	ldr	r3, [pc, #264]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	e013      	b.n	8001ec6 <HAL_RCC_OscConfig+0xa62>
 8001e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ece:	2102      	movs	r1, #2
 8001ed0:	6011      	str	r1, [r2, #0]
 8001ed2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ed6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	fa92 f1a2 	rbit	r1, r2
 8001ee0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ee4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001ee8:	6011      	str	r1, [r2, #0]
  return result;
 8001eea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eee:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f002 021f 	and.w	r2, r2, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d084      	beq.n	8001e1a <HAL_RCC_OscConfig+0x9b6>
 8001f10:	e083      	b.n	800201a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7fe ffef 	bl	8000ef4 <HAL_GetTick>
 8001f16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe ffea 	bl	8000ef4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e2e4      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 8001f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f38:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f44:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	fa93 f2a3 	rbit	r2, r3
 8001f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f60:	2202      	movs	r2, #2
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fa93 f2a3 	rbit	r2, r3
 8001f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f76:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f7a:	601a      	str	r2, [r3, #0]
  return result;
 8001f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f80:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f84:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d106      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xb44>
 8001f9a:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	e017      	b.n	8001fd0 <HAL_RCC_OscConfig+0xb6c>
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	fa93 f2a3 	rbit	r2, r3
 8001fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	4bb3      	ldr	r3, [pc, #716]	; (800229c <HAL_RCC_OscConfig+0xe38>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fd4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fd8:	2102      	movs	r1, #2
 8001fda:	6011      	str	r1, [r2, #0]
 8001fdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fe0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	fa92 f1a2 	rbit	r1, r2
 8001fea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fee:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ff2:	6011      	str	r1, [r2, #0]
  return result;
 8001ff4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ff8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	fab2 f282 	clz	r2, r2
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f002 021f 	and.w	r2, r2, #31
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f202 	lsl.w	r2, r1, r2
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d180      	bne.n	8001f1c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800201a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b9e      	ldr	r3, [pc, #632]	; (800229c <HAL_RCC_OscConfig+0xe38>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4a9d      	ldr	r2, [pc, #628]	; (800229c <HAL_RCC_OscConfig+0xe38>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002032:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 825e 	beq.w	80024fc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002040:	4b96      	ldr	r3, [pc, #600]	; (800229c <HAL_RCC_OscConfig+0xe38>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	f000 821f 	beq.w	800248c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002052:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b02      	cmp	r3, #2
 800205c:	f040 8170 	bne.w	8002340 <HAL_RCC_OscConfig+0xedc>
 8002060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002064:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800206c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002072:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fa93 f2a3 	rbit	r2, r3
 800207c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002080:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002084:	601a      	str	r2, [r3, #0]
  return result;
 8002086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800208e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800209a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	461a      	mov	r2, r3
 80020a2:	2300      	movs	r3, #0
 80020a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7fe ff25 	bl	8000ef4 <HAL_GetTick>
 80020aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	e009      	b.n	80020c4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b0:	f7fe ff20 	bl	8000ef4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e21c      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 80020c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	fa93 f2a3 	rbit	r2, r3
 80020e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020e8:	601a      	str	r2, [r3, #0]
  return result;
 80020ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d102      	bne.n	800210e <HAL_RCC_OscConfig+0xcaa>
 8002108:	4b64      	ldr	r3, [pc, #400]	; (800229c <HAL_RCC_OscConfig+0xe38>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	e027      	b.n	800215e <HAL_RCC_OscConfig+0xcfa>
 800210e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002112:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002120:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fa93 f2a3 	rbit	r2, r3
 800212a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002138:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800213c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002146:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002154:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	4b50      	ldr	r3, [pc, #320]	; (800229c <HAL_RCC_OscConfig+0xe38>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002162:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002166:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800216a:	6011      	str	r1, [r2, #0]
 800216c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002170:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	fa92 f1a2 	rbit	r1, r2
 800217a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800217e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002182:	6011      	str	r1, [r2, #0]
  return result;
 8002184:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002188:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	fab2 f282 	clz	r2, r2
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f042 0220 	orr.w	r2, r2, #32
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f002 021f 	and.w	r2, r2, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d182      	bne.n	80020b0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021aa:	4b3c      	ldr	r3, [pc, #240]	; (800229c <HAL_RCC_OscConfig+0xe38>)
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	f023 020f 	bic.w	r2, r3, #15
 80021b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	4937      	ldr	r1, [pc, #220]	; (800229c <HAL_RCC_OscConfig+0xe38>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80021c4:	4b35      	ldr	r3, [pc, #212]	; (800229c <HAL_RCC_OscConfig+0xe38>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80021cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a19      	ldr	r1, [r3, #32]
 80021d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	492d      	ldr	r1, [pc, #180]	; (800229c <HAL_RCC_OscConfig+0xe38>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002210:	601a      	str	r2, [r3, #0]
  return result;
 8002212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002216:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800221a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002226:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	461a      	mov	r2, r3
 800222e:	2301      	movs	r3, #1
 8002230:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe fe5f 	bl	8000ef4 <HAL_GetTick>
 8002236:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800223a:	e009      	b.n	8002250 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fe5a 	bl	8000ef4 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e156      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800225c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002262:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002270:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002274:	601a      	str	r2, [r3, #0]
  return result;
 8002276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800227e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_RCC_OscConfig+0xe3c>
 8002294:	4b01      	ldr	r3, [pc, #4]	; (800229c <HAL_RCC_OscConfig+0xe38>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	e02a      	b.n	80022f0 <HAL_RCC_OscConfig+0xe8c>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80022ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	fa93 f2a3 	rbit	r2, r3
 80022e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	4b86      	ldr	r3, [pc, #536]	; (8002508 <HAL_RCC_OscConfig+0x10a4>)
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022f4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022fc:	6011      	str	r1, [r2, #0]
 80022fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002302:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	fa92 f1a2 	rbit	r1, r2
 800230c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002310:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002314:	6011      	str	r1, [r2, #0]
  return result;
 8002316:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800231a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	fab2 f282 	clz	r2, r2
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f042 0220 	orr.w	r2, r2, #32
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	f002 021f 	and.w	r2, r2, #31
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f202 	lsl.w	r2, r1, r2
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	f43f af7f 	beq.w	800223c <HAL_RCC_OscConfig+0xdd8>
 800233e:	e0dd      	b.n	80024fc <HAL_RCC_OscConfig+0x1098>
 8002340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002344:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800234c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002352:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002360:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002364:	601a      	str	r2, [r3, #0]
  return result;
 8002366:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800236e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800237a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	461a      	mov	r2, r3
 8002382:	2300      	movs	r3, #0
 8002384:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe fdb5 	bl	8000ef4 <HAL_GetTick>
 800238a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	e009      	b.n	80023a4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fdb0 	bl	8000ef4 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0ac      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 80023a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80023c8:	601a      	str	r2, [r3, #0]
  return result;
 80023ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80023d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d102      	bne.n	80023ee <HAL_RCC_OscConfig+0xf8a>
 80023e8:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCC_OscConfig+0x10a4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	e027      	b.n	800243e <HAL_RCC_OscConfig+0xfda>
 80023ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002400:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	fa93 f2a3 	rbit	r2, r3
 800240a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002418:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800241c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002426:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	fa93 f2a3 	rbit	r2, r3
 8002430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002434:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_RCC_OscConfig+0x10a4>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002442:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002446:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800244a:	6011      	str	r1, [r2, #0]
 800244c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002450:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	fa92 f1a2 	rbit	r1, r2
 800245a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800245e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002462:	6011      	str	r1, [r2, #0]
  return result;
 8002464:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002468:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	fab2 f282 	clz	r2, r2
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f042 0220 	orr.w	r2, r2, #32
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f002 021f 	and.w	r2, r2, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f202 	lsl.w	r2, r1, r2
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d182      	bne.n	8002390 <HAL_RCC_OscConfig+0xf2c>
 800248a:	e037      	b.n	80024fc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002490:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e02e      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCC_OscConfig+0x10a4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <HAL_RCC_OscConfig+0x10a4>)
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80024b4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80024b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d117      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80024cc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024dc:	429a      	cmp	r2, r3
 80024de:	d10b      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80024e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024e4:	f003 020f 	and.w	r2, r3, #15
 80024e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b09e      	sub	sp, #120	; 0x78
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e162      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002524:	4b90      	ldr	r3, [pc, #576]	; (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d910      	bls.n	8002554 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b8d      	ldr	r3, [pc, #564]	; (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 0207 	bic.w	r2, r3, #7
 800253a:	498b      	ldr	r1, [pc, #556]	; (8002768 <HAL_RCC_ClockConfig+0x25c>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b89      	ldr	r3, [pc, #548]	; (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e14a      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002560:	4b82      	ldr	r3, [pc, #520]	; (800276c <HAL_RCC_ClockConfig+0x260>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	497f      	ldr	r1, [pc, #508]	; (800276c <HAL_RCC_ClockConfig+0x260>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80dc 	beq.w	8002738 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d13c      	bne.n	8002602 <HAL_RCC_ClockConfig+0xf6>
 8002588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d102      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xa6>
 80025ac:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCC_ClockConfig+0x260>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	e00f      	b.n	80025d2 <HAL_RCC_ClockConfig+0xc6>
 80025b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	667b      	str	r3, [r7, #100]	; 0x64
 80025c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c4:	663b      	str	r3, [r7, #96]	; 0x60
 80025c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <HAL_RCC_ClockConfig+0x260>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80025d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025da:	fa92 f2a2 	rbit	r2, r2
 80025de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025e2:	fab2 f282 	clz	r2, r2
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f042 0220 	orr.w	r2, r2, #32
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	f002 021f 	and.w	r2, r2, #31
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d17b      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0f3      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d13c      	bne.n	8002684 <HAL_RCC_ClockConfig+0x178>
 800260a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800260e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_RCC_ClockConfig+0x128>
 800262e:	4b4f      	ldr	r3, [pc, #316]	; (800276c <HAL_RCC_ClockConfig+0x260>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	e00f      	b.n	8002654 <HAL_RCC_ClockConfig+0x148>
 8002634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002638:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
 8002642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002646:	643b      	str	r3, [r7, #64]	; 0x40
 8002648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002650:	4b46      	ldr	r3, [pc, #280]	; (800276c <HAL_RCC_ClockConfig+0x260>)
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002658:	63ba      	str	r2, [r7, #56]	; 0x38
 800265a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800265c:	fa92 f2a2 	rbit	r2, r2
 8002660:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f002 021f 	and.w	r2, r2, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d13a      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0b2      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
 8002684:	2302      	movs	r3, #2
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d102      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1a0>
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <HAL_RCC_ClockConfig+0x260>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	e00d      	b.n	80026c8 <HAL_RCC_ClockConfig+0x1bc>
 80026ac:	2302      	movs	r3, #2
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
 80026b8:	2302      	movs	r3, #2
 80026ba:	623b      	str	r3, [r7, #32]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_RCC_ClockConfig+0x260>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	2202      	movs	r2, #2
 80026ca:	61ba      	str	r2, [r7, #24]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	fa92 f2a2 	rbit	r2, r2
 80026d2:	617a      	str	r2, [r7, #20]
  return result;
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	fab2 f282 	clz	r2, r2
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	f042 0220 	orr.w	r2, r2, #32
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	f002 021f 	and.w	r2, r2, #31
 80026e6:	2101      	movs	r1, #1
 80026e8:	fa01 f202 	lsl.w	r2, r1, r2
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e079      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f6:	4b1d      	ldr	r3, [pc, #116]	; (800276c <HAL_RCC_ClockConfig+0x260>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	491a      	ldr	r1, [pc, #104]	; (800276c <HAL_RCC_ClockConfig+0x260>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002708:	f7fe fbf4 	bl	8000ef4 <HAL_GetTick>
 800270c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7fe fbf0 	bl	8000ef4 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e061      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_ClockConfig+0x260>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 020c 	and.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d1eb      	bne.n	8002710 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_ClockConfig+0x25c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d214      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 0207 	bic.w	r2, r3, #7
 800274e:	4906      	ldr	r1, [pc, #24]	; (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e040      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
 8002768:	40022000 	.word	0x40022000
 800276c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_RCC_ClockConfig+0x2e8>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	491a      	ldr	r1, [pc, #104]	; (80027f4 <HAL_RCC_ClockConfig+0x2e8>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <HAL_RCC_ClockConfig+0x2e8>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4912      	ldr	r1, [pc, #72]	; (80027f4 <HAL_RCC_ClockConfig+0x2e8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027ae:	f000 f829 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80027b2:	4601      	mov	r1, r0
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_RCC_ClockConfig+0x2e8>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027bc:	22f0      	movs	r2, #240	; 0xf0
 80027be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	fa92 f2a2 	rbit	r2, r2
 80027c6:	60fa      	str	r2, [r7, #12]
  return result;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	fab2 f282 	clz	r2, r2
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	40d3      	lsrs	r3, r2
 80027d2:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x2ec>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	fa21 f303 	lsr.w	r3, r1, r3
 80027da:	4a08      	ldr	r2, [pc, #32]	; (80027fc <HAL_RCC_ClockConfig+0x2f0>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_RCC_ClockConfig+0x2f4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fb42 	bl	8000e6c <HAL_InitTick>
  
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3778      	adds	r7, #120	; 0x78
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08003dac 	.word	0x08003dac
 80027fc:	20000000 	.word	0x20000000
 8002800:	20000004 	.word	0x20000004

08002804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b08b      	sub	sp, #44	; 0x2c
 8002808:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	2300      	movs	r3, #0
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x30>
 800282e:	2b08      	cmp	r3, #8
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x36>
 8002832:	e03f      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002836:	623b      	str	r3, [r7, #32]
      break;
 8002838:	e03f      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002840:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002844:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	fa92 f2a2 	rbit	r2, r2
 800284c:	607a      	str	r2, [r7, #4]
  return result;
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	fab2 f282 	clz	r2, r2
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	40d3      	lsrs	r3, r2
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800285a:	5cd3      	ldrb	r3, [r2, r3]
 800285c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800285e:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	220f      	movs	r2, #15
 8002868:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	fa92 f2a2 	rbit	r2, r2
 8002870:	60fa      	str	r2, [r7, #12]
  return result;
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	fab2 f282 	clz	r2, r2
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	40d3      	lsrs	r3, r2
 800287c:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800288c:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	fbb2 f2f3 	udiv	r2, r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
 800289c:	e007      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800289e:	4a0b      	ldr	r2, [pc, #44]	; (80028cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fb02 f303 	mul.w	r3, r2, r3
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	623b      	str	r3, [r7, #32]
      break;
 80028b2:	e002      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80028b6:	623b      	str	r3, [r7, #32]
      break;
 80028b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ba:	6a3b      	ldr	r3, [r7, #32]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	372c      	adds	r7, #44	; 0x2c
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40021000 	.word	0x40021000
 80028cc:	007a1200 	.word	0x007a1200
 80028d0:	08003dbc 	.word	0x08003dbc
 80028d4:	08003dcc 	.word	0x08003dcc

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b092      	sub	sp, #72	; 0x48
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80d4 	beq.w	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fc:	4b4e      	ldr	r3, [pc, #312]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10e      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	4a4a      	ldr	r2, [pc, #296]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002912:	61d3      	str	r3, [r2, #28]
 8002914:	4b48      	ldr	r3, [pc, #288]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002920:	2301      	movs	r3, #1
 8002922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	4b45      	ldr	r3, [pc, #276]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d118      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002932:	4b42      	ldr	r3, [pc, #264]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a41      	ldr	r2, [pc, #260]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293e:	f7fe fad9 	bl	8000ef4 <HAL_GetTick>
 8002942:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	e008      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7fe fad5 	bl	8000ef4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b64      	cmp	r3, #100	; 0x64
 8002952:	d901      	bls.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1d6      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002964:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800296e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8084 	beq.w	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002980:	429a      	cmp	r2, r3
 8002982:	d07c      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002984:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	461a      	mov	r2, r3
 80029ae:	2301      	movs	r3, #1
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	461a      	mov	r2, r3
 80029d2:	2300      	movs	r3, #0
 80029d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029d6:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d04b      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe fa85 	bl	8000ef4 <HAL_GetTick>
 80029ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fa81 	bl	8000ef4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e180      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a04:	2302      	movs	r3, #2
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a10:	2302      	movs	r3, #2
 8002a12:	623b      	str	r3, [r7, #32]
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d108      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a32:	4b01      	ldr	r3, [pc, #4]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	e00d      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	10908100 	.word	0x10908100
 8002a44:	2302      	movs	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	4b9a      	ldr	r3, [pc, #616]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2202      	movs	r2, #2
 8002a56:	613a      	str	r2, [r7, #16]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	fa92 f2a2 	rbit	r2, r2
 8002a5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	fab2 f282 	clz	r2, r2
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f002 021f 	and.w	r2, r2, #31
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0b7      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a7e:	4b8f      	ldr	r3, [pc, #572]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	498c      	ldr	r1, [pc, #560]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a98:	4b88      	ldr	r3, [pc, #544]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	4a87      	ldr	r2, [pc, #540]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ab0:	4b82      	ldr	r3, [pc, #520]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f023 0203 	bic.w	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	497f      	ldr	r1, [pc, #508]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ace:	4b7b      	ldr	r3, [pc, #492]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4978      	ldr	r1, [pc, #480]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aec:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	4970      	ldr	r1, [pc, #448]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b0a:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f023 0210 	bic.w	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4969      	ldr	r1, [pc, #420]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b28:	4b64      	ldr	r3, [pc, #400]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	4961      	ldr	r1, [pc, #388]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b46:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f023 0220 	bic.w	r2, r3, #32
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	495a      	ldr	r1, [pc, #360]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b64:	4b55      	ldr	r3, [pc, #340]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	4952      	ldr	r1, [pc, #328]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b82:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	494b      	ldr	r1, [pc, #300]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ba0:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	4943      	ldr	r1, [pc, #268]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	493c      	ldr	r1, [pc, #240]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bdc:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	4934      	ldr	r1, [pc, #208]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002bfa:	4b30      	ldr	r3, [pc, #192]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	492d      	ldr	r1, [pc, #180]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	4925      	ldr	r1, [pc, #148]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c36:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	491e      	ldr	r1, [pc, #120]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	490f      	ldr	r1, [pc, #60]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	4907      	ldr	r1, [pc, #28]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002cae:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	e002      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc2:	4913      	ldr	r1, [pc, #76]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	490b      	ldr	r1, [pc, #44]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfe:	4904      	ldr	r1, [pc, #16]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3748      	adds	r7, #72	; 0x48
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000

08002d14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e049      	b.n	8002dba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd ff8c 	bl	8000c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4610      	mov	r0, r2
 8002d54:	f000 fa56 	bl	8003204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_TIM_PWM_Start+0x24>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e03c      	b.n	8002e62 <HAL_TIM_PWM_Start+0x9e>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d109      	bne.n	8002e02 <HAL_TIM_PWM_Start+0x3e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	bf14      	ite	ne
 8002dfa:	2301      	movne	r3, #1
 8002dfc:	2300      	moveq	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	e02f      	b.n	8002e62 <HAL_TIM_PWM_Start+0x9e>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d109      	bne.n	8002e1c <HAL_TIM_PWM_Start+0x58>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e022      	b.n	8002e62 <HAL_TIM_PWM_Start+0x9e>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d109      	bne.n	8002e36 <HAL_TIM_PWM_Start+0x72>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	e015      	b.n	8002e62 <HAL_TIM_PWM_Start+0x9e>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d109      	bne.n	8002e50 <HAL_TIM_PWM_Start+0x8c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e008      	b.n	8002e62 <HAL_TIM_PWM_Start+0x9e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0a1      	b.n	8002fae <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <HAL_TIM_PWM_Start+0xb6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e78:	e023      	b.n	8002ec2 <HAL_TIM_PWM_Start+0xfe>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_PWM_Start+0xc6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e88:	e01b      	b.n	8002ec2 <HAL_TIM_PWM_Start+0xfe>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_PWM_Start+0xd6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e98:	e013      	b.n	8002ec2 <HAL_TIM_PWM_Start+0xfe>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b0c      	cmp	r3, #12
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_PWM_Start+0xe6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ea8:	e00b      	b.n	8002ec2 <HAL_TIM_PWM_Start+0xfe>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_PWM_Start+0xf6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb8:	e003      	b.n	8002ec2 <HAL_TIM_PWM_Start+0xfe>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	6839      	ldr	r1, [r7, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fd3e 	bl	800394c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a38      	ldr	r2, [pc, #224]	; (8002fb8 <HAL_TIM_PWM_Start+0x1f4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d018      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x148>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a37      	ldr	r2, [pc, #220]	; (8002fbc <HAL_TIM_PWM_Start+0x1f8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d013      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x148>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a35      	ldr	r2, [pc, #212]	; (8002fc0 <HAL_TIM_PWM_Start+0x1fc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00e      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x148>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a34      	ldr	r2, [pc, #208]	; (8002fc4 <HAL_TIM_PWM_Start+0x200>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d009      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x148>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a32      	ldr	r2, [pc, #200]	; (8002fc8 <HAL_TIM_PWM_Start+0x204>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x148>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a31      	ldr	r2, [pc, #196]	; (8002fcc <HAL_TIM_PWM_Start+0x208>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d101      	bne.n	8002f10 <HAL_TIM_PWM_Start+0x14c>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_TIM_PWM_Start+0x14e>
 8002f10:	2300      	movs	r3, #0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <HAL_TIM_PWM_Start+0x1f4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d01d      	beq.n	8002f6c <HAL_TIM_PWM_Start+0x1a8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f38:	d018      	beq.n	8002f6c <HAL_TIM_PWM_Start+0x1a8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <HAL_TIM_PWM_Start+0x20c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d013      	beq.n	8002f6c <HAL_TIM_PWM_Start+0x1a8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <HAL_TIM_PWM_Start+0x210>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00e      	beq.n	8002f6c <HAL_TIM_PWM_Start+0x1a8>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <HAL_TIM_PWM_Start+0x1f8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d009      	beq.n	8002f6c <HAL_TIM_PWM_Start+0x1a8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <HAL_TIM_PWM_Start+0x1fc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <HAL_TIM_PWM_Start+0x1a8>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <HAL_TIM_PWM_Start+0x208>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d115      	bne.n	8002f98 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_TIM_PWM_Start+0x214>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b06      	cmp	r3, #6
 8002f7c:	d015      	beq.n	8002faa <HAL_TIM_PWM_Start+0x1e6>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d011      	beq.n	8002faa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f96:	e008      	b.n	8002faa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e000      	b.n	8002fac <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002faa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40013400 	.word	0x40013400
 8002fc0:	40014000 	.word	0x40014000
 8002fc4:	40014400 	.word	0x40014400
 8002fc8:	40014800 	.word	0x40014800
 8002fcc:	40015000 	.word	0x40015000
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	00010007 	.word	0x00010007

08002fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e0ff      	b.n	80031fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b14      	cmp	r3, #20
 8003006:	f200 80f0 	bhi.w	80031ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	08003065 	.word	0x08003065
 8003014:	080031eb 	.word	0x080031eb
 8003018:	080031eb 	.word	0x080031eb
 800301c:	080031eb 	.word	0x080031eb
 8003020:	080030a5 	.word	0x080030a5
 8003024:	080031eb 	.word	0x080031eb
 8003028:	080031eb 	.word	0x080031eb
 800302c:	080031eb 	.word	0x080031eb
 8003030:	080030e7 	.word	0x080030e7
 8003034:	080031eb 	.word	0x080031eb
 8003038:	080031eb 	.word	0x080031eb
 800303c:	080031eb 	.word	0x080031eb
 8003040:	08003127 	.word	0x08003127
 8003044:	080031eb 	.word	0x080031eb
 8003048:	080031eb 	.word	0x080031eb
 800304c:	080031eb 	.word	0x080031eb
 8003050:	08003169 	.word	0x08003169
 8003054:	080031eb 	.word	0x080031eb
 8003058:	080031eb 	.word	0x080031eb
 800305c:	080031eb 	.word	0x080031eb
 8003060:	080031a9 	.word	0x080031a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f968 	bl	8003340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0208 	orr.w	r2, r2, #8
 800307e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0204 	bic.w	r2, r2, #4
 800308e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6999      	ldr	r1, [r3, #24]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	619a      	str	r2, [r3, #24]
      break;
 80030a2:	e0a5      	b.n	80031f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f9e2 	bl	8003474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6999      	ldr	r1, [r3, #24]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	021a      	lsls	r2, r3, #8
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	619a      	str	r2, [r3, #24]
      break;
 80030e4:	e084      	b.n	80031f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fa55 	bl	800359c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0208 	orr.w	r2, r2, #8
 8003100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0204 	bic.w	r2, r2, #4
 8003110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69d9      	ldr	r1, [r3, #28]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	61da      	str	r2, [r3, #28]
      break;
 8003124:	e064      	b.n	80031f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fac7 	bl	80036c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69d9      	ldr	r1, [r3, #28]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	021a      	lsls	r2, r3, #8
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	61da      	str	r2, [r3, #28]
      break;
 8003166:	e043      	b.n	80031f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fb16 	bl	80037a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0208 	orr.w	r2, r2, #8
 8003182:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0204 	bic.w	r2, r2, #4
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031a6:	e023      	b.n	80031f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fb60 	bl	8003874 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	021a      	lsls	r2, r3, #8
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031e8:	e002      	b.n	80031f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
      break;
 80031ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop

08003204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a42      	ldr	r2, [pc, #264]	; (8003320 <TIM_Base_SetConfig+0x11c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003222:	d00f      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3f      	ldr	r2, [pc, #252]	; (8003324 <TIM_Base_SetConfig+0x120>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00b      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3e      	ldr	r2, [pc, #248]	; (8003328 <TIM_Base_SetConfig+0x124>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d007      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3d      	ldr	r2, [pc, #244]	; (800332c <TIM_Base_SetConfig+0x128>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3c      	ldr	r2, [pc, #240]	; (8003330 <TIM_Base_SetConfig+0x12c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d108      	bne.n	8003256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a31      	ldr	r2, [pc, #196]	; (8003320 <TIM_Base_SetConfig+0x11c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01f      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d01b      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a2e      	ldr	r2, [pc, #184]	; (8003324 <TIM_Base_SetConfig+0x120>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d017      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <TIM_Base_SetConfig+0x124>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2c      	ldr	r2, [pc, #176]	; (800332c <TIM_Base_SetConfig+0x128>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00f      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2c      	ldr	r2, [pc, #176]	; (8003334 <TIM_Base_SetConfig+0x130>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2b      	ldr	r2, [pc, #172]	; (8003338 <TIM_Base_SetConfig+0x134>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2a      	ldr	r2, [pc, #168]	; (800333c <TIM_Base_SetConfig+0x138>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a25      	ldr	r2, [pc, #148]	; (8003330 <TIM_Base_SetConfig+0x12c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a12      	ldr	r2, [pc, #72]	; (8003320 <TIM_Base_SetConfig+0x11c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <TIM_Base_SetConfig+0x100>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a13      	ldr	r2, [pc, #76]	; (800332c <TIM_Base_SetConfig+0x128>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00f      	beq.n	8003304 <TIM_Base_SetConfig+0x100>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <TIM_Base_SetConfig+0x130>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00b      	beq.n	8003304 <TIM_Base_SetConfig+0x100>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a12      	ldr	r2, [pc, #72]	; (8003338 <TIM_Base_SetConfig+0x134>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d007      	beq.n	8003304 <TIM_Base_SetConfig+0x100>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a11      	ldr	r2, [pc, #68]	; (800333c <TIM_Base_SetConfig+0x138>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d003      	beq.n	8003304 <TIM_Base_SetConfig+0x100>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <TIM_Base_SetConfig+0x12c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d103      	bne.n	800330c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	615a      	str	r2, [r3, #20]
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800
 800332c:	40013400 	.word	0x40013400
 8003330:	40015000 	.word	0x40015000
 8003334:	40014000 	.word	0x40014000
 8003338:	40014400 	.word	0x40014400
 800333c:	40014800 	.word	0x40014800

08003340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f023 0201 	bic.w	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f023 0302 	bic.w	r3, r3, #2
 800338c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a30      	ldr	r2, [pc, #192]	; (800345c <TIM_OC1_SetConfig+0x11c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <TIM_OC1_SetConfig+0x88>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a2f      	ldr	r2, [pc, #188]	; (8003460 <TIM_OC1_SetConfig+0x120>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00f      	beq.n	80033c8 <TIM_OC1_SetConfig+0x88>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a2e      	ldr	r2, [pc, #184]	; (8003464 <TIM_OC1_SetConfig+0x124>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00b      	beq.n	80033c8 <TIM_OC1_SetConfig+0x88>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a2d      	ldr	r2, [pc, #180]	; (8003468 <TIM_OC1_SetConfig+0x128>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d007      	beq.n	80033c8 <TIM_OC1_SetConfig+0x88>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a2c      	ldr	r2, [pc, #176]	; (800346c <TIM_OC1_SetConfig+0x12c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d003      	beq.n	80033c8 <TIM_OC1_SetConfig+0x88>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <TIM_OC1_SetConfig+0x130>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10c      	bne.n	80033e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0308 	bic.w	r3, r3, #8
 80033ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <TIM_OC1_SetConfig+0x11c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <TIM_OC1_SetConfig+0xd2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <TIM_OC1_SetConfig+0x120>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00f      	beq.n	8003412 <TIM_OC1_SetConfig+0xd2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1b      	ldr	r2, [pc, #108]	; (8003464 <TIM_OC1_SetConfig+0x124>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00b      	beq.n	8003412 <TIM_OC1_SetConfig+0xd2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <TIM_OC1_SetConfig+0x128>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d007      	beq.n	8003412 <TIM_OC1_SetConfig+0xd2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <TIM_OC1_SetConfig+0x12c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <TIM_OC1_SetConfig+0xd2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a18      	ldr	r2, [pc, #96]	; (8003470 <TIM_OC1_SetConfig+0x130>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d111      	bne.n	8003436 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	621a      	str	r2, [r3, #32]
}
 8003450:	bf00      	nop
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40013400 	.word	0x40013400
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800
 8003470:	40015000 	.word	0x40015000

08003474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f023 0210 	bic.w	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f023 0320 	bic.w	r3, r3, #32
 80034c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <TIM_OC2_SetConfig+0x110>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d007      	beq.n	80034e8 <TIM_OC2_SetConfig+0x74>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <TIM_OC2_SetConfig+0x114>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d003      	beq.n	80034e8 <TIM_OC2_SetConfig+0x74>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a2a      	ldr	r2, [pc, #168]	; (800358c <TIM_OC2_SetConfig+0x118>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d10d      	bne.n	8003504 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <TIM_OC2_SetConfig+0x110>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <TIM_OC2_SetConfig+0xc0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <TIM_OC2_SetConfig+0x114>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00f      	beq.n	8003534 <TIM_OC2_SetConfig+0xc0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <TIM_OC2_SetConfig+0x11c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00b      	beq.n	8003534 <TIM_OC2_SetConfig+0xc0>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <TIM_OC2_SetConfig+0x120>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_OC2_SetConfig+0xc0>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a1c      	ldr	r2, [pc, #112]	; (8003598 <TIM_OC2_SetConfig+0x124>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_OC2_SetConfig+0xc0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a17      	ldr	r2, [pc, #92]	; (800358c <TIM_OC2_SetConfig+0x118>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d113      	bne.n	800355c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800353a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003542:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40013400 	.word	0x40013400
 800358c:	40015000 	.word	0x40015000
 8003590:	40014000 	.word	0x40014000
 8003594:	40014400 	.word	0x40014400
 8003598:	40014800 	.word	0x40014800

0800359c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a2b      	ldr	r2, [pc, #172]	; (80036a8 <TIM_OC3_SetConfig+0x10c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <TIM_OC3_SetConfig+0x72>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <TIM_OC3_SetConfig+0x110>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <TIM_OC3_SetConfig+0x72>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a29      	ldr	r2, [pc, #164]	; (80036b0 <TIM_OC3_SetConfig+0x114>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d10d      	bne.n	800362a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003628:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <TIM_OC3_SetConfig+0x10c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <TIM_OC3_SetConfig+0xbe>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <TIM_OC3_SetConfig+0x110>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00f      	beq.n	800365a <TIM_OC3_SetConfig+0xbe>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <TIM_OC3_SetConfig+0x118>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_OC3_SetConfig+0xbe>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <TIM_OC3_SetConfig+0x11c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_OC3_SetConfig+0xbe>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <TIM_OC3_SetConfig+0x120>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_OC3_SetConfig+0xbe>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <TIM_OC3_SetConfig+0x114>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d113      	bne.n	8003682 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	621a      	str	r2, [r3, #32]
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40013400 	.word	0x40013400
 80036b0:	40015000 	.word	0x40015000
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40014400 	.word	0x40014400
 80036bc:	40014800 	.word	0x40014800

080036c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800370e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	031b      	lsls	r3, r3, #12
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a1a      	ldr	r2, [pc, #104]	; (8003788 <TIM_OC4_SetConfig+0xc8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d013      	beq.n	800374c <TIM_OC4_SetConfig+0x8c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a19      	ldr	r2, [pc, #100]	; (800378c <TIM_OC4_SetConfig+0xcc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00f      	beq.n	800374c <TIM_OC4_SetConfig+0x8c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a18      	ldr	r2, [pc, #96]	; (8003790 <TIM_OC4_SetConfig+0xd0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00b      	beq.n	800374c <TIM_OC4_SetConfig+0x8c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a17      	ldr	r2, [pc, #92]	; (8003794 <TIM_OC4_SetConfig+0xd4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <TIM_OC4_SetConfig+0x8c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a16      	ldr	r2, [pc, #88]	; (8003798 <TIM_OC4_SetConfig+0xd8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_OC4_SetConfig+0x8c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a15      	ldr	r2, [pc, #84]	; (800379c <TIM_OC4_SetConfig+0xdc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d109      	bne.n	8003760 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40013400 	.word	0x40013400
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800
 800379c:	40015000 	.word	0x40015000

080037a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	041b      	lsls	r3, r3, #16
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a19      	ldr	r2, [pc, #100]	; (800385c <TIM_OC5_SetConfig+0xbc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <TIM_OC5_SetConfig+0x82>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a18      	ldr	r2, [pc, #96]	; (8003860 <TIM_OC5_SetConfig+0xc0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00f      	beq.n	8003822 <TIM_OC5_SetConfig+0x82>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a17      	ldr	r2, [pc, #92]	; (8003864 <TIM_OC5_SetConfig+0xc4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00b      	beq.n	8003822 <TIM_OC5_SetConfig+0x82>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a16      	ldr	r2, [pc, #88]	; (8003868 <TIM_OC5_SetConfig+0xc8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d007      	beq.n	8003822 <TIM_OC5_SetConfig+0x82>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a15      	ldr	r2, [pc, #84]	; (800386c <TIM_OC5_SetConfig+0xcc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d003      	beq.n	8003822 <TIM_OC5_SetConfig+0x82>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a14      	ldr	r2, [pc, #80]	; (8003870 <TIM_OC5_SetConfig+0xd0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d109      	bne.n	8003836 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40013400 	.word	0x40013400
 8003864:	40014000 	.word	0x40014000
 8003868:	40014400 	.word	0x40014400
 800386c:	40014800 	.word	0x40014800
 8003870:	40015000 	.word	0x40015000

08003874 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	051b      	lsls	r3, r3, #20
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <TIM_OC6_SetConfig+0xc0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <TIM_OC6_SetConfig+0x84>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a19      	ldr	r2, [pc, #100]	; (8003938 <TIM_OC6_SetConfig+0xc4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00f      	beq.n	80038f8 <TIM_OC6_SetConfig+0x84>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a18      	ldr	r2, [pc, #96]	; (800393c <TIM_OC6_SetConfig+0xc8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00b      	beq.n	80038f8 <TIM_OC6_SetConfig+0x84>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a17      	ldr	r2, [pc, #92]	; (8003940 <TIM_OC6_SetConfig+0xcc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <TIM_OC6_SetConfig+0x84>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a16      	ldr	r2, [pc, #88]	; (8003944 <TIM_OC6_SetConfig+0xd0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_OC6_SetConfig+0x84>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a15      	ldr	r2, [pc, #84]	; (8003948 <TIM_OC6_SetConfig+0xd4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d109      	bne.n	800390c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	029b      	lsls	r3, r3, #10
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40013400 	.word	0x40013400
 800393c:	40014000 	.word	0x40014000
 8003940:	40014400 	.word	0x40014400
 8003944:	40014800 	.word	0x40014800
 8003948:	40015000 	.word	0x40015000

0800394c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	2201      	movs	r2, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	43db      	mvns	r3, r3
 800396e:	401a      	ands	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e06d      	b.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a30      	ldr	r2, [pc, #192]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d009      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2f      	ldr	r2, [pc, #188]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d004      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2d      	ldr	r2, [pc, #180]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d108      	bne.n	8003a00 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d01d      	beq.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2c:	d018      	beq.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00e      	beq.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d009      	beq.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a16      	ldr	r2, [pc, #88]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a11      	ldr	r2, [pc, #68]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d10c      	bne.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40013400 	.word	0x40013400
 8003aa0:	40015000 	.word	0x40015000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40014000 	.word	0x40014000

08003ab0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e06a      	b.n	8003ba2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a19      	ldr	r2, [pc, #100]	; (8003bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d115      	bne.n	8003b90 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	051b      	lsls	r3, r3, #20
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40013400 	.word	0x40013400
 8003bb8:	40015000 	.word	0x40015000

08003bbc <__errno>:
 8003bbc:	4b01      	ldr	r3, [pc, #4]	; (8003bc4 <__errno+0x8>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	2000000c 	.word	0x2000000c

08003bc8 <__libc_init_array>:
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	4d0d      	ldr	r5, [pc, #52]	; (8003c00 <__libc_init_array+0x38>)
 8003bcc:	4c0d      	ldr	r4, [pc, #52]	; (8003c04 <__libc_init_array+0x3c>)
 8003bce:	1b64      	subs	r4, r4, r5
 8003bd0:	10a4      	asrs	r4, r4, #2
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	42a6      	cmp	r6, r4
 8003bd6:	d109      	bne.n	8003bec <__libc_init_array+0x24>
 8003bd8:	4d0b      	ldr	r5, [pc, #44]	; (8003c08 <__libc_init_array+0x40>)
 8003bda:	4c0c      	ldr	r4, [pc, #48]	; (8003c0c <__libc_init_array+0x44>)
 8003bdc:	f000 f8da 	bl	8003d94 <_init>
 8003be0:	1b64      	subs	r4, r4, r5
 8003be2:	10a4      	asrs	r4, r4, #2
 8003be4:	2600      	movs	r6, #0
 8003be6:	42a6      	cmp	r6, r4
 8003be8:	d105      	bne.n	8003bf6 <__libc_init_array+0x2e>
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
 8003bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf0:	4798      	blx	r3
 8003bf2:	3601      	adds	r6, #1
 8003bf4:	e7ee      	b.n	8003bd4 <__libc_init_array+0xc>
 8003bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfa:	4798      	blx	r3
 8003bfc:	3601      	adds	r6, #1
 8003bfe:	e7f2      	b.n	8003be6 <__libc_init_array+0x1e>
 8003c00:	08003ddc 	.word	0x08003ddc
 8003c04:	08003ddc 	.word	0x08003ddc
 8003c08:	08003ddc 	.word	0x08003ddc
 8003c0c:	08003de0 	.word	0x08003de0

08003c10 <malloc>:
 8003c10:	4b02      	ldr	r3, [pc, #8]	; (8003c1c <malloc+0xc>)
 8003c12:	4601      	mov	r1, r0
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	f000 b82b 	b.w	8003c70 <_malloc_r>
 8003c1a:	bf00      	nop
 8003c1c:	2000000c 	.word	0x2000000c

08003c20 <memset>:
 8003c20:	4402      	add	r2, r0
 8003c22:	4603      	mov	r3, r0
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d100      	bne.n	8003c2a <memset+0xa>
 8003c28:	4770      	bx	lr
 8003c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c2e:	e7f9      	b.n	8003c24 <memset+0x4>

08003c30 <sbrk_aligned>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	4e0e      	ldr	r6, [pc, #56]	; (8003c6c <sbrk_aligned+0x3c>)
 8003c34:	460c      	mov	r4, r1
 8003c36:	6831      	ldr	r1, [r6, #0]
 8003c38:	4605      	mov	r5, r0
 8003c3a:	b911      	cbnz	r1, 8003c42 <sbrk_aligned+0x12>
 8003c3c:	f000 f88c 	bl	8003d58 <_sbrk_r>
 8003c40:	6030      	str	r0, [r6, #0]
 8003c42:	4621      	mov	r1, r4
 8003c44:	4628      	mov	r0, r5
 8003c46:	f000 f887 	bl	8003d58 <_sbrk_r>
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	d00a      	beq.n	8003c64 <sbrk_aligned+0x34>
 8003c4e:	1cc4      	adds	r4, r0, #3
 8003c50:	f024 0403 	bic.w	r4, r4, #3
 8003c54:	42a0      	cmp	r0, r4
 8003c56:	d007      	beq.n	8003c68 <sbrk_aligned+0x38>
 8003c58:	1a21      	subs	r1, r4, r0
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f000 f87c 	bl	8003d58 <_sbrk_r>
 8003c60:	3001      	adds	r0, #1
 8003c62:	d101      	bne.n	8003c68 <sbrk_aligned+0x38>
 8003c64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003c68:	4620      	mov	r0, r4
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	200000e4 	.word	0x200000e4

08003c70 <_malloc_r>:
 8003c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c74:	1ccd      	adds	r5, r1, #3
 8003c76:	f025 0503 	bic.w	r5, r5, #3
 8003c7a:	3508      	adds	r5, #8
 8003c7c:	2d0c      	cmp	r5, #12
 8003c7e:	bf38      	it	cc
 8003c80:	250c      	movcc	r5, #12
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	4607      	mov	r7, r0
 8003c86:	db01      	blt.n	8003c8c <_malloc_r+0x1c>
 8003c88:	42a9      	cmp	r1, r5
 8003c8a:	d905      	bls.n	8003c98 <_malloc_r+0x28>
 8003c8c:	230c      	movs	r3, #12
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	2600      	movs	r6, #0
 8003c92:	4630      	mov	r0, r6
 8003c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c98:	4e2e      	ldr	r6, [pc, #184]	; (8003d54 <_malloc_r+0xe4>)
 8003c9a:	f000 f86d 	bl	8003d78 <__malloc_lock>
 8003c9e:	6833      	ldr	r3, [r6, #0]
 8003ca0:	461c      	mov	r4, r3
 8003ca2:	bb34      	cbnz	r4, 8003cf2 <_malloc_r+0x82>
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	4638      	mov	r0, r7
 8003ca8:	f7ff ffc2 	bl	8003c30 <sbrk_aligned>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	4604      	mov	r4, r0
 8003cb0:	d14d      	bne.n	8003d4e <_malloc_r+0xde>
 8003cb2:	6834      	ldr	r4, [r6, #0]
 8003cb4:	4626      	mov	r6, r4
 8003cb6:	2e00      	cmp	r6, #0
 8003cb8:	d140      	bne.n	8003d3c <_malloc_r+0xcc>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	4631      	mov	r1, r6
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	eb04 0803 	add.w	r8, r4, r3
 8003cc4:	f000 f848 	bl	8003d58 <_sbrk_r>
 8003cc8:	4580      	cmp	r8, r0
 8003cca:	d13a      	bne.n	8003d42 <_malloc_r+0xd2>
 8003ccc:	6821      	ldr	r1, [r4, #0]
 8003cce:	3503      	adds	r5, #3
 8003cd0:	1a6d      	subs	r5, r5, r1
 8003cd2:	f025 0503 	bic.w	r5, r5, #3
 8003cd6:	3508      	adds	r5, #8
 8003cd8:	2d0c      	cmp	r5, #12
 8003cda:	bf38      	it	cc
 8003cdc:	250c      	movcc	r5, #12
 8003cde:	4629      	mov	r1, r5
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	f7ff ffa5 	bl	8003c30 <sbrk_aligned>
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d02b      	beq.n	8003d42 <_malloc_r+0xd2>
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	442b      	add	r3, r5
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	e00e      	b.n	8003d10 <_malloc_r+0xa0>
 8003cf2:	6822      	ldr	r2, [r4, #0]
 8003cf4:	1b52      	subs	r2, r2, r5
 8003cf6:	d41e      	bmi.n	8003d36 <_malloc_r+0xc6>
 8003cf8:	2a0b      	cmp	r2, #11
 8003cfa:	d916      	bls.n	8003d2a <_malloc_r+0xba>
 8003cfc:	1961      	adds	r1, r4, r5
 8003cfe:	42a3      	cmp	r3, r4
 8003d00:	6025      	str	r5, [r4, #0]
 8003d02:	bf18      	it	ne
 8003d04:	6059      	strne	r1, [r3, #4]
 8003d06:	6863      	ldr	r3, [r4, #4]
 8003d08:	bf08      	it	eq
 8003d0a:	6031      	streq	r1, [r6, #0]
 8003d0c:	5162      	str	r2, [r4, r5]
 8003d0e:	604b      	str	r3, [r1, #4]
 8003d10:	4638      	mov	r0, r7
 8003d12:	f104 060b 	add.w	r6, r4, #11
 8003d16:	f000 f835 	bl	8003d84 <__malloc_unlock>
 8003d1a:	f026 0607 	bic.w	r6, r6, #7
 8003d1e:	1d23      	adds	r3, r4, #4
 8003d20:	1af2      	subs	r2, r6, r3
 8003d22:	d0b6      	beq.n	8003c92 <_malloc_r+0x22>
 8003d24:	1b9b      	subs	r3, r3, r6
 8003d26:	50a3      	str	r3, [r4, r2]
 8003d28:	e7b3      	b.n	8003c92 <_malloc_r+0x22>
 8003d2a:	6862      	ldr	r2, [r4, #4]
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	bf0c      	ite	eq
 8003d30:	6032      	streq	r2, [r6, #0]
 8003d32:	605a      	strne	r2, [r3, #4]
 8003d34:	e7ec      	b.n	8003d10 <_malloc_r+0xa0>
 8003d36:	4623      	mov	r3, r4
 8003d38:	6864      	ldr	r4, [r4, #4]
 8003d3a:	e7b2      	b.n	8003ca2 <_malloc_r+0x32>
 8003d3c:	4634      	mov	r4, r6
 8003d3e:	6876      	ldr	r6, [r6, #4]
 8003d40:	e7b9      	b.n	8003cb6 <_malloc_r+0x46>
 8003d42:	230c      	movs	r3, #12
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4638      	mov	r0, r7
 8003d48:	f000 f81c 	bl	8003d84 <__malloc_unlock>
 8003d4c:	e7a1      	b.n	8003c92 <_malloc_r+0x22>
 8003d4e:	6025      	str	r5, [r4, #0]
 8003d50:	e7de      	b.n	8003d10 <_malloc_r+0xa0>
 8003d52:	bf00      	nop
 8003d54:	200000e0 	.word	0x200000e0

08003d58 <_sbrk_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	4d06      	ldr	r5, [pc, #24]	; (8003d74 <_sbrk_r+0x1c>)
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	4604      	mov	r4, r0
 8003d60:	4608      	mov	r0, r1
 8003d62:	602b      	str	r3, [r5, #0]
 8003d64:	f7fc fffa 	bl	8000d5c <_sbrk>
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	d102      	bne.n	8003d72 <_sbrk_r+0x1a>
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	b103      	cbz	r3, 8003d72 <_sbrk_r+0x1a>
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	bd38      	pop	{r3, r4, r5, pc}
 8003d74:	200000e8 	.word	0x200000e8

08003d78 <__malloc_lock>:
 8003d78:	4801      	ldr	r0, [pc, #4]	; (8003d80 <__malloc_lock+0x8>)
 8003d7a:	f000 b809 	b.w	8003d90 <__retarget_lock_acquire_recursive>
 8003d7e:	bf00      	nop
 8003d80:	200000ec 	.word	0x200000ec

08003d84 <__malloc_unlock>:
 8003d84:	4801      	ldr	r0, [pc, #4]	; (8003d8c <__malloc_unlock+0x8>)
 8003d86:	f000 b804 	b.w	8003d92 <__retarget_lock_release_recursive>
 8003d8a:	bf00      	nop
 8003d8c:	200000ec 	.word	0x200000ec

08003d90 <__retarget_lock_acquire_recursive>:
 8003d90:	4770      	bx	lr

08003d92 <__retarget_lock_release_recursive>:
 8003d92:	4770      	bx	lr

08003d94 <_init>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr

08003da0 <_fini>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr
