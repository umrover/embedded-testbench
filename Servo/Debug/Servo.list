
Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a8  080037a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080037a8  080037a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037a8  080037a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000084  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a534  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000191d  00000000  00000000  0002a5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000908  00000000  00000000  0002c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020186  00000000  00000000  0002d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c7d6  00000000  00000000  0004d366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4677  00000000  00000000  00059b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e1b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a3c  00000000  00000000  0011e204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003760 	.word	0x08003760

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08003760 	.word	0x08003760

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fb18 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f84c 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f93a 	bl	8000458 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001e4:	f000 f8a8 	bl	8000338 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  servo = new_servo(&htim1, TIM_CHANNEL_1, &(TIM1->CCR1));
 80001e8:	4a20      	ldr	r2, [pc, #128]	; (800026c <main+0x98>)
 80001ea:	2100      	movs	r1, #0
 80001ec:	4820      	ldr	r0, [pc, #128]	; (8000270 <main+0x9c>)
 80001ee:	f000 f9b0 	bl	8000552 <new_servo>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a1f      	ldr	r2, [pc, #124]	; (8000274 <main+0xa0>)
 80001f6:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initialize_servo(servo, 0);
 80001f8:	4b1e      	ldr	r3, [pc, #120]	; (8000274 <main+0xa0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f9c0 	bl	8000584 <initialize_servo>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 8000204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000208:	f000 fb66 	bl	80008d8 <HAL_Delay>
	set_servo_angle(servo, 10);
 800020c:	4b19      	ldr	r3, [pc, #100]	; (8000274 <main+0xa0>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	210a      	movs	r1, #10
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f9cc 	bl	80005b0 <set_servo_angle>
	HAL_Delay(500);
 8000218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021c:	f000 fb5c 	bl	80008d8 <HAL_Delay>
	set_servo_angle(servo, 45);
 8000220:	4b14      	ldr	r3, [pc, #80]	; (8000274 <main+0xa0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	212d      	movs	r1, #45	; 0x2d
 8000226:	4618      	mov	r0, r3
 8000228:	f000 f9c2 	bl	80005b0 <set_servo_angle>
	HAL_Delay(500);
 800022c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000230:	f000 fb52 	bl	80008d8 <HAL_Delay>
	set_servo_angle(servo, 60);
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <main+0xa0>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	213c      	movs	r1, #60	; 0x3c
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f9b8 	bl	80005b0 <set_servo_angle>
	HAL_Delay(500);
 8000240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000244:	f000 fb48 	bl	80008d8 <HAL_Delay>
	set_servo_angle(servo, 180);
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <main+0xa0>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	21b4      	movs	r1, #180	; 0xb4
 800024e:	4618      	mov	r0, r3
 8000250:	f000 f9ae 	bl	80005b0 <set_servo_angle>
	HAL_Delay(500);
 8000254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000258:	f000 fb3e 	bl	80008d8 <HAL_Delay>
	set_servo_angle(servo, 0);
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <main+0xa0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f9a4 	bl	80005b0 <set_servo_angle>
	HAL_Delay(1000);
 8000268:	e7cc      	b.n	8000204 <main+0x30>
 800026a:	bf00      	nop
 800026c:	40012c34 	.word	0x40012c34
 8000270:	2000008c 	.word	0x2000008c
 8000274:	200000d8 	.word	0x200000d8

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b0a6      	sub	sp, #152	; 0x98
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 f9b0 	bl	80035ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2258      	movs	r2, #88	; 0x58
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 f9a2 	bl	80035ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a8:	2302      	movs	r3, #2
 80002aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b0:	2310      	movs	r3, #16
 80002b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fdaa 	bl	8000e30 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e2:	f000 f931 	bl	8000548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	2302      	movs	r3, #2
 80002ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000300:	2102      	movs	r1, #2
 8000302:	4618      	mov	r0, r3
 8000304:	f001 fde8 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800030e:	f000 f91b 	bl	8000548 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000316:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000318:	2300      	movs	r3, #0
 800031a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4618      	mov	r0, r3
 8000320:	f001 ffc0 	bl	80022a4 <HAL_RCCEx_PeriphCLKConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800032a:	f000 f90d 	bl	8000548 <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3798      	adds	r7, #152	; 0x98
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b096      	sub	sp, #88	; 0x58
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800034a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]
 800035a:	615a      	str	r2, [r3, #20]
 800035c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	222c      	movs	r2, #44	; 0x2c
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f003 f941 	bl	80035ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800036a:	4b39      	ldr	r3, [pc, #228]	; (8000450 <MX_TIM1_Init+0x118>)
 800036c:	4a39      	ldr	r2, [pc, #228]	; (8000454 <MX_TIM1_Init+0x11c>)
 800036e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000370:	4b37      	ldr	r3, [pc, #220]	; (8000450 <MX_TIM1_Init+0x118>)
 8000372:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000376:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000378:	4b35      	ldr	r3, [pc, #212]	; (8000450 <MX_TIM1_Init+0x118>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 800037e:	4b34      	ldr	r3, [pc, #208]	; (8000450 <MX_TIM1_Init+0x118>)
 8000380:	22c7      	movs	r2, #199	; 0xc7
 8000382:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000384:	4b32      	ldr	r3, [pc, #200]	; (8000450 <MX_TIM1_Init+0x118>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800038a:	4b31      	ldr	r3, [pc, #196]	; (8000450 <MX_TIM1_Init+0x118>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000390:	4b2f      	ldr	r3, [pc, #188]	; (8000450 <MX_TIM1_Init+0x118>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000396:	482e      	ldr	r0, [pc, #184]	; (8000450 <MX_TIM1_Init+0x118>)
 8000398:	f002 f9a2 	bl	80026e0 <HAL_TIM_PWM_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80003a2:	f000 f8d1 	bl	8000548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a6:	2300      	movs	r3, #0
 80003a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003aa:	2300      	movs	r3, #0
 80003ac:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003b6:	4619      	mov	r1, r3
 80003b8:	4825      	ldr	r0, [pc, #148]	; (8000450 <MX_TIM1_Init+0x118>)
 80003ba:	f002 ffd3 	bl	8003364 <HAL_TIMEx_MasterConfigSynchronization>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80003c4:	f000 f8c0 	bl	8000548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c8:	2360      	movs	r3, #96	; 0x60
 80003ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003d0:	2300      	movs	r3, #0
 80003d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003d4:	2300      	movs	r3, #0
 80003d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003d8:	2300      	movs	r3, #0
 80003da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003dc:	2300      	movs	r3, #0
 80003de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003e0:	2300      	movs	r3, #0
 80003e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003e8:	2200      	movs	r2, #0
 80003ea:	4619      	mov	r1, r3
 80003ec:	4818      	ldr	r0, [pc, #96]	; (8000450 <MX_TIM1_Init+0x118>)
 80003ee:	f002 fadb 	bl	80029a8 <HAL_TIM_PWM_ConfigChannel>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003f8:	f000 f8a6 	bl	8000548 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000414:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800041e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000422:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4619      	mov	r1, r3
 8000430:	4807      	ldr	r0, [pc, #28]	; (8000450 <MX_TIM1_Init+0x118>)
 8000432:	f003 f823 	bl	800347c <HAL_TIMEx_ConfigBreakDeadTime>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800043c:	f000 f884 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <MX_TIM1_Init+0x118>)
 8000442:	f000 f90f 	bl	8000664 <HAL_TIM_MspPostInit>

}
 8000446:	bf00      	nop
 8000448:	3758      	adds	r7, #88	; 0x58
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	2000008c 	.word	0x2000008c
 8000454:	40012c00 	.word	0x40012c00

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b08a      	sub	sp, #40	; 0x28
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0314 	add.w	r3, r7, #20
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046e:	4b34      	ldr	r3, [pc, #208]	; (8000540 <MX_GPIO_Init+0xe8>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a33      	ldr	r2, [pc, #204]	; (8000540 <MX_GPIO_Init+0xe8>)
 8000474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b31      	ldr	r3, [pc, #196]	; (8000540 <MX_GPIO_Init+0xe8>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000482:	613b      	str	r3, [r7, #16]
 8000484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000486:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <MX_GPIO_Init+0xe8>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a2d      	ldr	r2, [pc, #180]	; (8000540 <MX_GPIO_Init+0xe8>)
 800048c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b2b      	ldr	r3, [pc, #172]	; (8000540 <MX_GPIO_Init+0xe8>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b28      	ldr	r3, [pc, #160]	; (8000540 <MX_GPIO_Init+0xe8>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a27      	ldr	r2, [pc, #156]	; (8000540 <MX_GPIO_Init+0xe8>)
 80004a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b25      	ldr	r3, [pc, #148]	; (8000540 <MX_GPIO_Init+0xe8>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b6:	4b22      	ldr	r3, [pc, #136]	; (8000540 <MX_GPIO_Init+0xe8>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a21      	ldr	r2, [pc, #132]	; (8000540 <MX_GPIO_Init+0xe8>)
 80004bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <MX_GPIO_Init+0xe8>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2120      	movs	r1, #32
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f000 fc93 	bl	8000e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4619      	mov	r1, r3
 80004f0:	4814      	ldr	r0, [pc, #80]	; (8000544 <MX_GPIO_Init+0xec>)
 80004f2:	f000 fafb 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004f6:	230c      	movs	r3, #12
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2300      	movs	r3, #0
 8000504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000506:	2307      	movs	r3, #7
 8000508:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f000 faea 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000518:	2320      	movs	r3, #32
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	4619      	mov	r1, r3
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f000 fadb 	bl	8000aec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000536:	bf00      	nop
 8000538:	3728      	adds	r7, #40	; 0x28
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000
 8000544:	48000800 	.word	0x48000800

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054c:	b672      	cpsid	i
}
 800054e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	e7fe      	b.n	8000550 <Error_Handler+0x8>

08000552 <new_servo>:


#include "servo.h"

Servo *new_servo(TIM_HandleTypeDef* _timer, uint32_t _channel, uint32_t* _output)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
	Servo *servo = (Servo*) malloc(sizeof(Servo));
 800055e:	200c      	movs	r0, #12
 8000560:	f003 f83c 	bl	80035dc <malloc>
 8000564:	4603      	mov	r3, r0
 8000566:	617b      	str	r3, [r7, #20]
	servo->timer = _timer;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	601a      	str	r2, [r3, #0]
	servo->channel = _channel;
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	605a      	str	r2, [r3, #4]
	servo->output = _output;
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	609a      	str	r2, [r3, #8]
    return servo;
 800057a:	697b      	ldr	r3, [r7, #20]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <initialize_servo>:


void initialize_servo(Servo* servo, uint32_t initial_angle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(servo->timer, servo->channel);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	4619      	mov	r1, r3
 8000598:	4610      	mov	r0, r2
 800059a:	f002 f8f9 	bl	8002790 <HAL_TIM_PWM_Start>
	set_servo_angle(servo, initial_angle);
 800059e:	6839      	ldr	r1, [r7, #0]
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 f805 	bl	80005b0 <set_servo_angle>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <set_servo_angle>:


void set_servo_angle(Servo *servo, uint32_t angle)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
    *(servo->output) = (angle/18)+10; // 20 ticks * 0.1ms/tick = 2ms -> 180 degrees
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <set_servo_angle+0x28>)
 80005be:	fba2 2303 	umull	r2, r3, r2, r3
 80005c2:	089a      	lsrs	r2, r3, #2
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	320a      	adds	r2, #10
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	38e38e39 	.word	0x38e38e39

080005dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_MspInit+0x44>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <HAL_MspInit+0x44>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_MspInit+0x44>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_MspInit+0x44>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <HAL_MspInit+0x44>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_MspInit+0x44>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000612:	2007      	movs	r0, #7
 8000614:	f000 fa36 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0a      	ldr	r2, [pc, #40]	; (800065c <HAL_TIM_PWM_MspInit+0x38>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d10b      	bne.n	800064e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_TIM_PWM_MspInit+0x3c>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a09      	ldr	r2, [pc, #36]	; (8000660 <HAL_TIM_PWM_MspInit+0x3c>)
 800063c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <HAL_TIM_PWM_MspInit+0x3c>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40012c00 	.word	0x40012c00
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <HAL_TIM_MspPostInit+0x64>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d11b      	bne.n	80006be <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <HAL_TIM_MspPostInit+0x68>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a10      	ldr	r2, [pc, #64]	; (80006cc <HAL_TIM_MspPostInit+0x68>)
 800068c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <HAL_TIM_MspPostInit+0x68>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069e:	2301      	movs	r3, #1
 80006a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <HAL_TIM_MspPostInit+0x6c>)
 80006ba:	f000 fa17 	bl	8000aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40012c00 	.word	0x40012c00
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000800 	.word	0x48000800

080006d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <NMI_Handler+0x4>

080006da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <HardFault_Handler+0x4>

080006e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <MemManage_Handler+0x4>

080006e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <BusFault_Handler+0x4>

080006ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <UsageFault_Handler+0x4>

080006f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000720:	f000 f8ba 	bl	8000898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <_sbrk+0x5c>)
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <_sbrk+0x60>)
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <_sbrk+0x64>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <_sbrk+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <_sbrk+0x64>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	429a      	cmp	r2, r3
 8000756:	d207      	bcs.n	8000768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000758:	f002 ff16 	bl	8003588 <__errno>
 800075c:	4603      	mov	r3, r0
 800075e:	220c      	movs	r2, #12
 8000760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	e009      	b.n	800077c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <_sbrk+0x64>)
 8000778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800077a:	68fb      	ldr	r3, [r7, #12]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20010000 	.word	0x20010000
 8000788:	00000400 	.word	0x00000400
 800078c:	200000dc 	.word	0x200000dc
 8000790:	200000f8 	.word	0x200000f8

08000794 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <SystemInit+0x20>)
 800079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800079e:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <SystemInit+0x20>)
 80007a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007bc:	f7ff ffea 	bl	8000794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	; (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	; (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e6:	f002 fed5 	bl	8003594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ea:	f7ff fcf3 	bl	80001d4 <main>

080007ee <LoopForever>:

LoopForever:
    b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007fc:	080037b0 	.word	0x080037b0
  ldr r2, =_sbss
 8000800:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000804:	200000f4 	.word	0x200000f4

08000808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC1_2_IRQHandler>
	...

0800080c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_Init+0x28>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <HAL_Init+0x28>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 f931 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 f808 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000828:	f7ff fed8 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40022000 	.word	0x40022000

08000838 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_InitTick+0x54>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_InitTick+0x58>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f93b 	bl	8000ad2 <HAL_SYSTICK_Config>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e00e      	b.n	8000884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d80a      	bhi.n	8000882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086c:	2200      	movs	r2, #0
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f000 f911 	bl	8000a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000878:	4a06      	ldr	r2, [pc, #24]	; (8000894 <HAL_InitTick+0x5c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e000      	b.n	8000884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	20000008 	.word	0x20000008
 8000894:	20000004 	.word	0x20000004

08000898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_IncTick+0x20>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_IncTick+0x24>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_IncTick+0x24>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008
 80008bc:	200000e0 	.word	0x200000e0

080008c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <HAL_GetTick+0x14>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	200000e0 	.word	0x200000e0

080008d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff ffee 	bl	80008c0 <HAL_GetTick>
 80008e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f0:	d005      	beq.n	80008fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_Delay+0x44>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008fe:	bf00      	nop
 8000900:	f7ff ffde 	bl	80008c0 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f7      	bhi.n	8000900 <HAL_Delay+0x28>
  {
  }
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	; (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	; 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a50:	d301      	bcc.n	8000a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00f      	b.n	8000a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <SysTick_Config+0x40>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5e:	210f      	movs	r1, #15
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f7ff ff8e 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SysTick_Config+0x40>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SysTick_Config+0x40>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff47 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aac:	f7ff ff5c 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6978      	ldr	r0, [r7, #20]
 8000ab8:	f7ff ff8e 	bl	80009d8 <NVIC_EncodePriority>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff5d 	bl	8000984 <__NVIC_SetPriority>
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff ffb0 	bl	8000a40 <SysTick_Config>
 8000ae0:	4603      	mov	r3, r0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	e160      	b.n	8000dbe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	fa01 f303 	lsl.w	r3, r1, r3
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f000 8152 	beq.w	8000db8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d005      	beq.n	8000b2c <HAL_GPIO_Init+0x40>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d130      	bne.n	8000b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	2203      	movs	r2, #3
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b62:	2201      	movs	r2, #1
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	091b      	lsrs	r3, r3, #4
 8000b78:	f003 0201 	and.w	r2, r3, #1
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d017      	beq.n	8000bca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d123      	bne.n	8000c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	08da      	lsrs	r2, r3, #3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3208      	adds	r2, #8
 8000bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	220f      	movs	r2, #15
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	691a      	ldr	r2, [r3, #16]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	08da      	lsrs	r2, r3, #3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3208      	adds	r2, #8
 8000c18:	6939      	ldr	r1, [r7, #16]
 8000c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0203 	and.w	r2, r3, #3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 80ac 	beq.w	8000db8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c60:	4b5e      	ldr	r3, [pc, #376]	; (8000ddc <HAL_GPIO_Init+0x2f0>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a5d      	ldr	r2, [pc, #372]	; (8000ddc <HAL_GPIO_Init+0x2f0>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b5b      	ldr	r3, [pc, #364]	; (8000ddc <HAL_GPIO_Init+0x2f0>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c78:	4a59      	ldr	r2, [pc, #356]	; (8000de0 <HAL_GPIO_Init+0x2f4>)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	3302      	adds	r3, #2
 8000c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	220f      	movs	r2, #15
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ca2:	d025      	beq.n	8000cf0 <HAL_GPIO_Init+0x204>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a4f      	ldr	r2, [pc, #316]	; (8000de4 <HAL_GPIO_Init+0x2f8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d01f      	beq.n	8000cec <HAL_GPIO_Init+0x200>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a4e      	ldr	r2, [pc, #312]	; (8000de8 <HAL_GPIO_Init+0x2fc>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d019      	beq.n	8000ce8 <HAL_GPIO_Init+0x1fc>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a4d      	ldr	r2, [pc, #308]	; (8000dec <HAL_GPIO_Init+0x300>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d013      	beq.n	8000ce4 <HAL_GPIO_Init+0x1f8>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a4c      	ldr	r2, [pc, #304]	; (8000df0 <HAL_GPIO_Init+0x304>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d00d      	beq.n	8000ce0 <HAL_GPIO_Init+0x1f4>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a4b      	ldr	r2, [pc, #300]	; (8000df4 <HAL_GPIO_Init+0x308>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d007      	beq.n	8000cdc <HAL_GPIO_Init+0x1f0>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a4a      	ldr	r2, [pc, #296]	; (8000df8 <HAL_GPIO_Init+0x30c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d101      	bne.n	8000cd8 <HAL_GPIO_Init+0x1ec>
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	e00c      	b.n	8000cf2 <HAL_GPIO_Init+0x206>
 8000cd8:	2307      	movs	r3, #7
 8000cda:	e00a      	b.n	8000cf2 <HAL_GPIO_Init+0x206>
 8000cdc:	2305      	movs	r3, #5
 8000cde:	e008      	b.n	8000cf2 <HAL_GPIO_Init+0x206>
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	e006      	b.n	8000cf2 <HAL_GPIO_Init+0x206>
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e004      	b.n	8000cf2 <HAL_GPIO_Init+0x206>
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e002      	b.n	8000cf2 <HAL_GPIO_Init+0x206>
 8000cec:	2301      	movs	r3, #1
 8000cee:	e000      	b.n	8000cf2 <HAL_GPIO_Init+0x206>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	f002 0203 	and.w	r2, r2, #3
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	4093      	lsls	r3, r2
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d02:	4937      	ldr	r1, [pc, #220]	; (8000de0 <HAL_GPIO_Init+0x2f4>)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d10:	4b3a      	ldr	r3, [pc, #232]	; (8000dfc <HAL_GPIO_Init+0x310>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d34:	4a31      	ldr	r2, [pc, #196]	; (8000dfc <HAL_GPIO_Init+0x310>)
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d3a:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <HAL_GPIO_Init+0x310>)
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d5e:	4a27      	ldr	r2, [pc, #156]	; (8000dfc <HAL_GPIO_Init+0x310>)
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <HAL_GPIO_Init+0x310>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d88:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <HAL_GPIO_Init+0x310>)
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_GPIO_Init+0x310>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <HAL_GPIO_Init+0x310>)
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f47f ae97 	bne.w	8000afc <HAL_GPIO_Init+0x10>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	371c      	adds	r7, #28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000
 8000de4:	48000400 	.word	0x48000400
 8000de8:	48000800 	.word	0x48000800
 8000dec:	48000c00 	.word	0x48000c00
 8000df0:	48001000 	.word	0x48001000
 8000df4:	48001400 	.word	0x48001400
 8000df8:	48001800 	.word	0x48001800
 8000dfc:	40010400 	.word	0x40010400

08000e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e10:	787b      	ldrb	r3, [r7, #1]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e1e:	887a      	ldrh	r2, [r7, #2]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e40:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	f001 b83a 	b.w	8001eca <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 816f 	beq.w	800114a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e6c:	4bb5      	ldr	r3, [pc, #724]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 030c 	and.w	r3, r3, #12
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d00c      	beq.n	8000e92 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e78:	4bb2      	ldr	r3, [pc, #712]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 030c 	and.w	r3, r3, #12
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d15c      	bne.n	8000f3e <HAL_RCC_OscConfig+0x10e>
 8000e84:	4baf      	ldr	r3, [pc, #700]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e90:	d155      	bne.n	8000f3e <HAL_RCC_OscConfig+0x10e>
 8000e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e96:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ea6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eaa:	fab3 f383 	clz	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	095b      	lsrs	r3, r3, #5
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d102      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x94>
 8000ebe:	4ba1      	ldr	r3, [pc, #644]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	e015      	b.n	8000ef0 <HAL_RCC_OscConfig+0xc0>
 8000ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ecc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000ed0:	fa93 f3a3 	rbit	r3, r3
 8000ed4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000edc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ee0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000ee4:	fa93 f3a3 	rbit	r3, r3
 8000ee8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000eec:	4b95      	ldr	r3, [pc, #596]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ef4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000ef8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000efc:	fa92 f2a2 	rbit	r2, r2
 8000f00:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000f04:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f08:	fab2 f282 	clz	r2, r2
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	f042 0220 	orr.w	r2, r2, #32
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	f002 021f 	and.w	r2, r2, #31
 8000f18:	2101      	movs	r1, #1
 8000f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 8111 	beq.w	8001148 <HAL_RCC_OscConfig+0x318>
 8000f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 8108 	bne.w	8001148 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f000 bfc6 	b.w	8001eca <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4e:	d106      	bne.n	8000f5e <HAL_RCC_OscConfig+0x12e>
 8000f50:	4b7c      	ldr	r3, [pc, #496]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a7b      	ldr	r2, [pc, #492]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e036      	b.n	8000fcc <HAL_RCC_OscConfig+0x19c>
 8000f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x158>
 8000f6e:	4b75      	ldr	r3, [pc, #468]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a74      	ldr	r2, [pc, #464]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b72      	ldr	r3, [pc, #456]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a71      	ldr	r2, [pc, #452]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e021      	b.n	8000fcc <HAL_RCC_OscConfig+0x19c>
 8000f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x184>
 8000f9a:	4b6a      	ldr	r3, [pc, #424]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a69      	ldr	r2, [pc, #420]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b67      	ldr	r3, [pc, #412]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a66      	ldr	r2, [pc, #408]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e00b      	b.n	8000fcc <HAL_RCC_OscConfig+0x19c>
 8000fb4:	4b63      	ldr	r3, [pc, #396]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a62      	ldr	r2, [pc, #392]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b60      	ldr	r3, [pc, #384]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a5f      	ldr	r2, [pc, #380]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d059      	beq.n	8001090 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fc70 	bl	80008c0 <HAL_GetTick>
 8000fe0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe4:	e00a      	b.n	8000ffc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fc6b 	bl	80008c0 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d902      	bls.n	8000ffc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	f000 bf67 	b.w	8001eca <HAL_RCC_OscConfig+0x109a>
 8000ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001000:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001010:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d102      	bne.n	800102e <HAL_RCC_OscConfig+0x1fe>
 8001028:	4b46      	ldr	r3, [pc, #280]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	e015      	b.n	800105a <HAL_RCC_OscConfig+0x22a>
 800102e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001032:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001046:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800104a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001056:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001062:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001066:	fa92 f2a2 	rbit	r2, r2
 800106a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800106e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001072:	fab2 f282 	clz	r2, r2
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	f042 0220 	orr.w	r2, r2, #32
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	f002 021f 	and.w	r2, r2, #31
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	4013      	ands	r3, r2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0ab      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x1b6>
 800108e:	e05c      	b.n	800114a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fc16 	bl	80008c0 <HAL_GetTick>
 8001094:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001098:	e00a      	b.n	80010b0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109a:	f7ff fc11 	bl	80008c0 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d902      	bls.n	80010b0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	f000 bf0d 	b.w	8001eca <HAL_RCC_OscConfig+0x109a>
 80010b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80010c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c8:	fab3 f383 	clz	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d102      	bne.n	80010e2 <HAL_RCC_OscConfig+0x2b2>
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	e015      	b.n	800110e <HAL_RCC_OscConfig+0x2de>
 80010e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80010f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001112:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001116:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800111a:	fa92 f2a2 	rbit	r2, r2
 800111e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001122:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	f042 0220 	orr.w	r2, r2, #32
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	f002 021f 	and.w	r2, r2, #31
 8001136:	2101      	movs	r1, #1
 8001138:	fa01 f202 	lsl.w	r2, r1, r2
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1ab      	bne.n	800109a <HAL_RCC_OscConfig+0x26a>
 8001142:	e002      	b.n	800114a <HAL_RCC_OscConfig+0x31a>
 8001144:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800114e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 817f 	beq.w	800145e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001160:	4ba7      	ldr	r3, [pc, #668]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00c      	beq.n	8001186 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800116c:	4ba4      	ldr	r3, [pc, #656]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b08      	cmp	r3, #8
 8001176:	d173      	bne.n	8001260 <HAL_RCC_OscConfig+0x430>
 8001178:	4ba1      	ldr	r3, [pc, #644]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001184:	d16c      	bne.n	8001260 <HAL_RCC_OscConfig+0x430>
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001190:	fa93 f3a3 	rbit	r3, r3
 8001194:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001198:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119c:	fab3 f383 	clz	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d102      	bne.n	80011b6 <HAL_RCC_OscConfig+0x386>
 80011b0:	4b93      	ldr	r3, [pc, #588]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	e013      	b.n	80011de <HAL_RCC_OscConfig+0x3ae>
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80011c8:	2302      	movs	r3, #2
 80011ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011da:	4b89      	ldr	r3, [pc, #548]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	2202      	movs	r2, #2
 80011e0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80011e4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80011e8:	fa92 f2a2 	rbit	r2, r2
 80011ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80011f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011f4:	fab2 f282 	clz	r2, r2
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	f042 0220 	orr.w	r2, r2, #32
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f002 021f 	and.w	r2, r2, #31
 8001204:	2101      	movs	r1, #1
 8001206:	fa01 f202 	lsl.w	r2, r1, r2
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00a      	beq.n	8001226 <HAL_RCC_OscConfig+0x3f6>
 8001210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001214:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d002      	beq.n	8001226 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	f000 be52 	b.w	8001eca <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b76      	ldr	r3, [pc, #472]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001232:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	21f8      	movs	r1, #248	; 0xf8
 800123c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001240:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001244:	fa91 f1a1 	rbit	r1, r1
 8001248:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800124c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001250:	fab1 f181 	clz	r1, r1
 8001254:	b2c9      	uxtb	r1, r1
 8001256:	408b      	lsls	r3, r1
 8001258:	4969      	ldr	r1, [pc, #420]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 800125a:	4313      	orrs	r3, r2
 800125c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125e:	e0fe      	b.n	800145e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001264:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 8088 	beq.w	8001382 <HAL_RCC_OscConfig+0x552>
 8001272:	2301      	movs	r3, #1
 8001274:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001278:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001284:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001288:	fab3 f383 	clz	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001292:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	461a      	mov	r2, r3
 800129a:	2301      	movs	r3, #1
 800129c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fb0f 	bl	80008c0 <HAL_GetTick>
 80012a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	e00a      	b.n	80012be <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff fb0a 	bl	80008c0 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d902      	bls.n	80012be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	f000 be06 	b.w	8001eca <HAL_RCC_OscConfig+0x109a>
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80012d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d102      	bne.n	80012ee <HAL_RCC_OscConfig+0x4be>
 80012e8:	4b45      	ldr	r3, [pc, #276]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	e013      	b.n	8001316 <HAL_RCC_OscConfig+0x4e6>
 80012ee:	2302      	movs	r3, #2
 80012f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001306:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	2202      	movs	r2, #2
 8001318:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800131c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001320:	fa92 f2a2 	rbit	r2, r2
 8001324:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001328:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800132c:	fab2 f282 	clz	r2, r2
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	f042 0220 	orr.w	r2, r2, #32
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	f002 021f 	and.w	r2, r2, #31
 800133c:	2101      	movs	r1, #1
 800133e:	fa01 f202 	lsl.w	r2, r1, r2
 8001342:	4013      	ands	r3, r2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0af      	beq.n	80012a8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001354:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	21f8      	movs	r1, #248	; 0xf8
 800135e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001366:	fa91 f1a1 	rbit	r1, r1
 800136a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800136e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001372:	fab1 f181 	clz	r1, r1
 8001376:	b2c9      	uxtb	r1, r1
 8001378:	408b      	lsls	r3, r1
 800137a:	4921      	ldr	r1, [pc, #132]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e06d      	b.n	800145e <HAL_RCC_OscConfig+0x62e>
 8001382:	2301      	movs	r3, #1
 8001384:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001394:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001398:	fab3 f383 	clz	r3, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	461a      	mov	r2, r3
 80013aa:	2300      	movs	r3, #0
 80013ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fa87 	bl	80008c0 <HAL_GetTick>
 80013b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	e00a      	b.n	80013ce <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b8:	f7ff fa82 	bl	80008c0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d902      	bls.n	80013ce <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	f000 bd7e 	b.w	8001eca <HAL_RCC_OscConfig+0x109a>
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80013e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e4:	fab3 f383 	clz	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d105      	bne.n	8001404 <HAL_RCC_OscConfig+0x5d4>
 80013f8:	4b01      	ldr	r3, [pc, #4]	; (8001400 <HAL_RCC_OscConfig+0x5d0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	e016      	b.n	800142c <HAL_RCC_OscConfig+0x5fc>
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800141c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001428:	4bbf      	ldr	r3, [pc, #764]	; (8001728 <HAL_RCC_OscConfig+0x8f8>)
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	2202      	movs	r2, #2
 800142e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001432:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001436:	fa92 f2a2 	rbit	r2, r2
 800143a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800143e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001442:	fab2 f282 	clz	r2, r2
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	f042 0220 	orr.w	r2, r2, #32
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	f002 021f 	and.w	r2, r2, #31
 8001452:	2101      	movs	r1, #1
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1ac      	bne.n	80013b8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001462:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8113 	beq.w	800169a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001478:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d07c      	beq.n	800157e <HAL_RCC_OscConfig+0x74e>
 8001484:	2301      	movs	r3, #1
 8001486:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001496:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	fab3 f383 	clz	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	4ba2      	ldr	r3, [pc, #648]	; (800172c <HAL_RCC_OscConfig+0x8fc>)
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	461a      	mov	r2, r3
 80014aa:	2301      	movs	r3, #1
 80014ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fa07 	bl	80008c0 <HAL_GetTick>
 80014b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fa02 	bl	80008c0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d902      	bls.n	80014ce <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	f000 bcfe 	b.w	8001eca <HAL_RCC_OscConfig+0x109a>
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014d8:	fa93 f2a3 	rbit	r2, r3
 80014dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014ee:	2202      	movs	r2, #2
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	fa93 f2a3 	rbit	r2, r3
 8001500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800150e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001512:	2202      	movs	r2, #2
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	fa93 f2a3 	rbit	r2, r3
 8001524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001528:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800152c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	4b7e      	ldr	r3, [pc, #504]	; (8001728 <HAL_RCC_OscConfig+0x8f8>)
 8001530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001536:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800153a:	2102      	movs	r1, #2
 800153c:	6019      	str	r1, [r3, #0]
 800153e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001542:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f1a3 	rbit	r1, r3
 800154c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001550:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001554:	6019      	str	r1, [r3, #0]
  return result;
 8001556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fab3 f383 	clz	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d09d      	beq.n	80014b8 <HAL_RCC_OscConfig+0x688>
 800157c:	e08d      	b.n	800169a <HAL_RCC_OscConfig+0x86a>
 800157e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001582:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f2a3 	rbit	r2, r3
 8001598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800159c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015a0:	601a      	str	r2, [r3, #0]
  return result;
 80015a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b5d      	ldr	r3, [pc, #372]	; (800172c <HAL_RCC_OscConfig+0x8fc>)
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	461a      	mov	r2, r3
 80015bc:	2300      	movs	r3, #0
 80015be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7ff f97e 	bl	80008c0 <HAL_GetTick>
 80015c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	e00a      	b.n	80015e0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff f979 	bl	80008c0 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d902      	bls.n	80015e0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	f000 bc75 	b.w	8001eca <HAL_RCC_OscConfig+0x109a>
 80015e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015e8:	2202      	movs	r2, #2
 80015ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	fa93 f2a3 	rbit	r2, r3
 80015fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001608:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800160c:	2202      	movs	r2, #2
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	fa93 f2a3 	rbit	r2, r3
 800161e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001630:	2202      	movs	r2, #2
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001638:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	fa93 f2a3 	rbit	r2, r3
 8001642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001646:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800164a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_RCC_OscConfig+0x8f8>)
 800164e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001654:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001658:	2102      	movs	r1, #2
 800165a:	6019      	str	r1, [r3, #0]
 800165c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001660:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f1a3 	rbit	r1, r3
 800166a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800166e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001672:	6019      	str	r1, [r3, #0]
  return result;
 8001674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001678:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	fab3 f383 	clz	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d197      	bne.n	80015ca <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 81a5 	beq.w	80019fa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_RCC_OscConfig+0x8f8>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d116      	bne.n	80016f0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_RCC_OscConfig+0x8f8>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a18      	ldr	r2, [pc, #96]	; (8001728 <HAL_RCC_OscConfig+0x8f8>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_RCC_OscConfig+0x8f8>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_RCC_OscConfig+0x900>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d121      	bne.n	8001740 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_RCC_OscConfig+0x900>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_RCC_OscConfig+0x900>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001708:	f7ff f8da 	bl	80008c0 <HAL_GetTick>
 800170c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	e010      	b.n	8001734 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff f8d5 	bl	80008c0 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d908      	bls.n	8001734 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e3d1      	b.n	8001eca <HAL_RCC_OscConfig+0x109a>
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	10908120 	.word	0x10908120
 8001730:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b8d      	ldr	r3, [pc, #564]	; (800196c <HAL_RCC_OscConfig+0xb3c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0e8      	beq.n	8001712 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001744:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x92e>
 8001750:	4b87      	ldr	r3, [pc, #540]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4a86      	ldr	r2, [pc, #536]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6213      	str	r3, [r2, #32]
 800175c:	e035      	b.n	80017ca <HAL_RCC_OscConfig+0x99a>
 800175e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001762:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x958>
 800176e:	4b80      	ldr	r3, [pc, #512]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4a7f      	ldr	r2, [pc, #508]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6213      	str	r3, [r2, #32]
 800177a:	4b7d      	ldr	r3, [pc, #500]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a7c      	ldr	r2, [pc, #496]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	e020      	b.n	80017ca <HAL_RCC_OscConfig+0x99a>
 8001788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d10c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x982>
 8001798:	4b75      	ldr	r3, [pc, #468]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a74      	ldr	r2, [pc, #464]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6213      	str	r3, [r2, #32]
 80017a4:	4b72      	ldr	r3, [pc, #456]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a71      	ldr	r2, [pc, #452]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	e00b      	b.n	80017ca <HAL_RCC_OscConfig+0x99a>
 80017b2:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a6e      	ldr	r2, [pc, #440]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	6213      	str	r3, [r2, #32]
 80017be:	4b6c      	ldr	r3, [pc, #432]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a6b      	ldr	r2, [pc, #428]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8081 	beq.w	80018de <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff f870 	bl	80008c0 <HAL_GetTick>
 80017e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	e00b      	b.n	80017fe <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff f86b 	bl	80008c0 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e365      	b.n	8001eca <HAL_RCC_OscConfig+0x109a>
 80017fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001802:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001806:	2202      	movs	r2, #2
 8001808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	fa93 f2a3 	rbit	r2, r3
 8001818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001826:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800182a:	2202      	movs	r2, #2
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001832:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	fa93 f2a3 	rbit	r2, r3
 800183c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001840:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001844:	601a      	str	r2, [r3, #0]
  return result;
 8001846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800184e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d102      	bne.n	800186a <HAL_RCC_OscConfig+0xa3a>
 8001864:	4b42      	ldr	r3, [pc, #264]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	e013      	b.n	8001892 <HAL_RCC_OscConfig+0xa62>
 800186a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001872:	2202      	movs	r2, #2
 8001874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fa93 f2a3 	rbit	r2, r3
 8001884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001888:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	4b38      	ldr	r3, [pc, #224]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001896:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800189a:	2102      	movs	r1, #2
 800189c:	6011      	str	r1, [r2, #0]
 800189e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	fa92 f1a2 	rbit	r1, r2
 80018ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018b0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80018b4:	6011      	str	r1, [r2, #0]
  return result;
 80018b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018ba:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	fab2 f282 	clz	r2, r2
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	f002 021f 	and.w	r2, r2, #31
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d084      	beq.n	80017e6 <HAL_RCC_OscConfig+0x9b6>
 80018dc:	e083      	b.n	80019e6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7fe ffef 	bl	80008c0 <HAL_GetTick>
 80018e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7fe ffea 	bl	80008c0 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e2e4      	b.n	8001eca <HAL_RCC_OscConfig+0x109a>
 8001900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001904:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001908:	2202      	movs	r2, #2
 800190a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001910:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	fa93 f2a3 	rbit	r2, r3
 800191a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001928:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800192c:	2202      	movs	r2, #2
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001934:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	fa93 f2a3 	rbit	r2, r3
 800193e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001942:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001946:	601a      	str	r2, [r3, #0]
  return result;
 8001948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001950:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	095b      	lsrs	r3, r3, #5
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d106      	bne.n	8001974 <HAL_RCC_OscConfig+0xb44>
 8001966:	4b02      	ldr	r3, [pc, #8]	; (8001970 <HAL_RCC_OscConfig+0xb40>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	e017      	b.n	800199c <HAL_RCC_OscConfig+0xb6c>
 800196c:	40007000 	.word	0x40007000
 8001970:	40021000 	.word	0x40021000
 8001974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001978:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800197c:	2202      	movs	r2, #2
 800197e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001984:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	fa93 f2a3 	rbit	r2, r3
 800198e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001992:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	4bb3      	ldr	r3, [pc, #716]	; (8001c68 <HAL_RCC_OscConfig+0xe38>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019a0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019a4:	2102      	movs	r1, #2
 80019a6:	6011      	str	r1, [r2, #0]
 80019a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	fa92 f1a2 	rbit	r1, r2
 80019b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019ba:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80019be:	6011      	str	r1, [r2, #0]
  return result;
 80019c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019c4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	fab2 f282 	clz	r2, r2
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f002 021f 	and.w	r2, r2, #31
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d180      	bne.n	80018e8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019e6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d105      	bne.n	80019fa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ee:	4b9e      	ldr	r3, [pc, #632]	; (8001c68 <HAL_RCC_OscConfig+0xe38>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a9d      	ldr	r2, [pc, #628]	; (8001c68 <HAL_RCC_OscConfig+0xe38>)
 80019f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 825e 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0c:	4b96      	ldr	r3, [pc, #600]	; (8001c68 <HAL_RCC_OscConfig+0xe38>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	f000 821f 	beq.w	8001e58 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	f040 8170 	bne.w	8001d0c <HAL_RCC_OscConfig+0xedc>
 8001a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f2a3 	rbit	r2, r3
 8001a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a50:	601a      	str	r2, [r3, #0]
  return result;
 8001a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a56:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a5a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2300      	movs	r3, #0
 8001a70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7fe ff25 	bl	80008c0 <HAL_GetTick>
 8001a76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	e009      	b.n	8001a90 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7fe ff20 	bl	80008c0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e21c      	b.n	8001eca <HAL_RCC_OscConfig+0x109a>
 8001a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a94:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f2a3 	rbit	r2, r3
 8001aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ab4:	601a      	str	r2, [r3, #0]
  return result;
 8001ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001abe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d102      	bne.n	8001ada <HAL_RCC_OscConfig+0xcaa>
 8001ad4:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <HAL_RCC_OscConfig+0xe38>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	e027      	b.n	8001b2a <HAL_RCC_OscConfig+0xcfa>
 8001ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ade:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aec:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f2a3 	rbit	r2, r3
 8001af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b04:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b12:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b20:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_OscConfig+0xe38>)
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b2e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b36:	6011      	str	r1, [r2, #0]
 8001b38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b3c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	fa92 f1a2 	rbit	r1, r2
 8001b46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b4a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001b4e:	6011      	str	r1, [r2, #0]
  return result;
 8001b50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b54:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	fab2 f282 	clz	r2, r2
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f042 0220 	orr.w	r2, r2, #32
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f002 021f 	and.w	r2, r2, #31
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d182      	bne.n	8001a7c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b76:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <HAL_RCC_OscConfig+0xe38>)
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	f023 020f 	bic.w	r2, r3, #15
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	4937      	ldr	r1, [pc, #220]	; (8001c68 <HAL_RCC_OscConfig+0xe38>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001b90:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <HAL_RCC_OscConfig+0xe38>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a19      	ldr	r1, [r3, #32]
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	492d      	ldr	r1, [pc, #180]	; (8001c68 <HAL_RCC_OscConfig+0xe38>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
 8001bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bbc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	fa93 f2a3 	rbit	r2, r3
 8001bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bdc:	601a      	str	r2, [r3, #0]
  return result;
 8001bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001be6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fe5f 	bl	80008c0 <HAL_GetTick>
 8001c02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c06:	e009      	b.n	8001c1c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c08:	f7fe fe5a 	bl	80008c0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e156      	b.n	8001eca <HAL_RCC_OscConfig+0x109a>
 8001c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c20:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c40:	601a      	str	r2, [r3, #0]
  return result;
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_RCC_OscConfig+0xe3c>
 8001c60:	4b01      	ldr	r3, [pc, #4]	; (8001c68 <HAL_RCC_OscConfig+0xe38>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	e02a      	b.n	8001cbc <HAL_RCC_OscConfig+0xe8c>
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c70:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	fa93 f2a3 	rbit	r2, r3
 8001c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c96:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	4b86      	ldr	r3, [pc, #536]	; (8001ed4 <HAL_RCC_OscConfig+0x10a4>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cc0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc8:	6011      	str	r1, [r2, #0]
 8001cca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	fa92 f1a2 	rbit	r1, r2
 8001cd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cdc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001ce0:	6011      	str	r1, [r2, #0]
  return result;
 8001ce2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ce6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	fab2 f282 	clz	r2, r2
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f002 021f 	and.w	r2, r2, #31
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f43f af7f 	beq.w	8001c08 <HAL_RCC_OscConfig+0xdd8>
 8001d0a:	e0dd      	b.n	8001ec8 <HAL_RCC_OscConfig+0x1098>
 8001d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d10:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	fa93 f2a3 	rbit	r2, r3
 8001d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d30:	601a      	str	r2, [r3, #0]
  return result;
 8001d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d36:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d3a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2300      	movs	r3, #0
 8001d50:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7fe fdb5 	bl	80008c0 <HAL_GetTick>
 8001d56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5a:	e009      	b.n	8001d70 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe fdb0 	bl	80008c0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e0ac      	b.n	8001eca <HAL_RCC_OscConfig+0x109a>
 8001d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d90:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d94:	601a      	str	r2, [r3, #0]
  return result;
 8001d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_OscConfig+0xf8a>
 8001db4:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_RCC_OscConfig+0x10a4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	e027      	b.n	8001e0a <HAL_RCC_OscConfig+0xfda>
 8001dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbe:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001dc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dcc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	fa93 f2a3 	rbit	r2, r3
 8001dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001de8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	fa93 f2a3 	rbit	r2, r3
 8001dfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e00:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_RCC_OscConfig+0x10a4>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e0e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e16:	6011      	str	r1, [r2, #0]
 8001e18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e1c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	fa92 f1a2 	rbit	r1, r2
 8001e26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e2a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001e2e:	6011      	str	r1, [r2, #0]
  return result;
 8001e30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e34:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	fab2 f282 	clz	r2, r2
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f042 0220 	orr.w	r2, r2, #32
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f002 021f 	and.w	r2, r2, #31
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d182      	bne.n	8001d5c <HAL_RCC_OscConfig+0xf2c>
 8001e56:	e037      	b.n	8001ec8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e02e      	b.n	8001eca <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_OscConfig+0x10a4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_RCC_OscConfig+0x10a4>)
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e80:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d117      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e98:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb0:	f003 020f 	and.w	r2, r3, #15
 8001eb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b09e      	sub	sp, #120	; 0x78
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e162      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b90      	ldr	r3, [pc, #576]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b8d      	ldr	r3, [pc, #564]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0207 	bic.w	r2, r3, #7
 8001f06:	498b      	ldr	r1, [pc, #556]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b89      	ldr	r3, [pc, #548]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e14a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b82      	ldr	r3, [pc, #520]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	497f      	ldr	r1, [pc, #508]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80dc 	beq.w	8002104 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d13c      	bne.n	8001fce <HAL_RCC_ClockConfig+0xf6>
 8001f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xa6>
 8001f78:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	e00f      	b.n	8001f9e <HAL_RCC_ClockConfig+0xc6>
 8001f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f90:	663b      	str	r3, [r7, #96]	; 0x60
 8001f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f9a:	4b67      	ldr	r3, [pc, #412]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fa2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fa6:	fa92 f2a2 	rbit	r2, r2
 8001faa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fae:	fab2 f282 	clz	r2, r2
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f002 021f 	and.w	r2, r2, #31
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d17b      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0f3      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d13c      	bne.n	8002050 <HAL_RCC_ClockConfig+0x178>
 8001fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_ClockConfig+0x128>
 8001ffa:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e00f      	b.n	8002020 <HAL_RCC_ClockConfig+0x148>
 8002000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002004:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	647b      	str	r3, [r7, #68]	; 0x44
 800200e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
 8002014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800201c:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002024:	63ba      	str	r2, [r7, #56]	; 0x38
 8002026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800202e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f042 0220 	orr.w	r2, r2, #32
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f002 021f 	and.w	r2, r2, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d13a      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b2      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
 8002050:	2302      	movs	r3, #2
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d102      	bne.n	8002078 <HAL_RCC_ClockConfig+0x1a0>
 8002072:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	e00d      	b.n	8002094 <HAL_RCC_ClockConfig+0x1bc>
 8002078:	2302      	movs	r3, #2
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	2302      	movs	r3, #2
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	2202      	movs	r2, #2
 8002096:	61ba      	str	r2, [r7, #24]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	fa92 f2a2 	rbit	r2, r2
 800209e:	617a      	str	r2, [r7, #20]
  return result;
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	fab2 f282 	clz	r2, r2
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f042 0220 	orr.w	r2, r2, #32
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f002 021f 	and.w	r2, r2, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f202 	lsl.w	r2, r1, r2
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e079      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f023 0203 	bic.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	491a      	ldr	r1, [pc, #104]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d4:	f7fe fbf4 	bl	80008c0 <HAL_GetTick>
 80020d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020dc:	f7fe fbf0 	bl	80008c0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e061      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 020c 	and.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	429a      	cmp	r2, r3
 8002102:	d1eb      	bne.n	80020dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d214      	bcs.n	800213c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 0207 	bic.w	r2, r3, #7
 800211a:	4906      	ldr	r1, [pc, #24]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e040      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
 8002134:	40022000 	.word	0x40022000
 8002138:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCC_ClockConfig+0x2e8>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	491a      	ldr	r1, [pc, #104]	; (80021c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4912      	ldr	r1, [pc, #72]	; (80021c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800217a:	f000 f829 	bl	80021d0 <HAL_RCC_GetSysClockFreq>
 800217e:	4601      	mov	r1, r0
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002188:	22f0      	movs	r2, #240	; 0xf0
 800218a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	fa92 f2a2 	rbit	r2, r2
 8002192:	60fa      	str	r2, [r7, #12]
  return result;
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	fab2 f282 	clz	r2, r2
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	40d3      	lsrs	r3, r2
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x2ec>)
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
 80021a2:	fa21 f303 	lsr.w	r3, r1, r3
 80021a6:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <HAL_RCC_ClockConfig+0x2f0>)
 80021a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_RCC_ClockConfig+0x2f4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fb42 	bl	8000838 <HAL_InitTick>
  
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3778      	adds	r7, #120	; 0x78
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08003778 	.word	0x08003778
 80021c8:	20000000 	.word	0x20000000
 80021cc:	20000004 	.word	0x20000004

080021d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b08b      	sub	sp, #44	; 0x2c
 80021d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021ea:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d002      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x30>
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d003      	beq.n	8002206 <HAL_RCC_GetSysClockFreq+0x36>
 80021fe:	e03f      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002202:	623b      	str	r3, [r7, #32]
      break;
 8002204:	e03f      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800220c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002210:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	fa92 f2a2 	rbit	r2, r2
 8002218:	607a      	str	r2, [r7, #4]
  return result;
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	fab2 f282 	clz	r2, r2
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	40d3      	lsrs	r3, r2
 8002224:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_RCC_GetSysClockFreq+0xc4>)
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	220f      	movs	r2, #15
 8002234:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	fa92 f2a2 	rbit	r2, r2
 800223c:	60fa      	str	r2, [r7, #12]
  return result;
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	fab2 f282 	clz	r2, r2
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	40d3      	lsrs	r3, r2
 8002248:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002258:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <HAL_RCC_GetSysClockFreq+0xc8>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
 8002268:	e007      	b.n	800227a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_RCC_GetSysClockFreq+0xc8>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	623b      	str	r3, [r7, #32]
      break;
 800227e:	e002      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002282:	623b      	str	r3, [r7, #32]
      break;
 8002284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002286:	6a3b      	ldr	r3, [r7, #32]
}
 8002288:	4618      	mov	r0, r3
 800228a:	372c      	adds	r7, #44	; 0x2c
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40021000 	.word	0x40021000
 8002298:	007a1200 	.word	0x007a1200
 800229c:	08003788 	.word	0x08003788
 80022a0:	08003798 	.word	0x08003798

080022a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b092      	sub	sp, #72	; 0x48
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80d4 	beq.w	8002470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c8:	4b4e      	ldr	r3, [pc, #312]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10e      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	4a4a      	ldr	r2, [pc, #296]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022de:	61d3      	str	r3, [r2, #28]
 80022e0:	4b48      	ldr	r3, [pc, #288]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f2:	4b45      	ldr	r3, [pc, #276]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d118      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fe:	4b42      	ldr	r3, [pc, #264]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a41      	ldr	r2, [pc, #260]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002308:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7fe fad9 	bl	80008c0 <HAL_GetTick>
 800230e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	e008      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002312:	f7fe fad5 	bl	80008c0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	; 0x64
 800231e:	d901      	bls.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1d6      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	4b38      	ldr	r3, [pc, #224]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002330:	4b34      	ldr	r3, [pc, #208]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002338:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800233a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8084 	beq.w	800244a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800234c:	429a      	cmp	r2, r3
 800234e:	d07c      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002350:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800235a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	461a      	mov	r2, r3
 800237a:	2301      	movs	r3, #1
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002382:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	461a      	mov	r2, r3
 800239e:	2300      	movs	r3, #0
 80023a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023a2:	4a18      	ldr	r2, [pc, #96]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d04b      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7fe fa85 	bl	80008c0 <HAL_GetTick>
 80023b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fa81 	bl	80008c0 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e180      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80023d0:	2302      	movs	r3, #2
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
 80023dc:	2302      	movs	r3, #2
 80023de:	623b      	str	r3, [r7, #32]
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	61fb      	str	r3, [r7, #28]
  return result;
 80023e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d108      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023fe:	4b01      	ldr	r3, [pc, #4]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	e00d      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002404:	40021000 	.word	0x40021000
 8002408:	40007000 	.word	0x40007000
 800240c:	10908100 	.word	0x10908100
 8002410:	2302      	movs	r3, #2
 8002412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	4b9a      	ldr	r3, [pc, #616]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2202      	movs	r2, #2
 8002422:	613a      	str	r2, [r7, #16]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	fa92 f2a2 	rbit	r2, r2
 800242a:	60fa      	str	r2, [r7, #12]
  return result;
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	fab2 f282 	clz	r2, r2
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	f002 021f 	and.w	r2, r2, #31
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f202 	lsl.w	r2, r1, r2
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0b7      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800244a:	4b8f      	ldr	r3, [pc, #572]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	498c      	ldr	r1, [pc, #560]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800245c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	4a87      	ldr	r2, [pc, #540]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800247c:	4b82      	ldr	r3, [pc, #520]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	f023 0203 	bic.w	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	497f      	ldr	r1, [pc, #508]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800249a:	4b7b      	ldr	r3, [pc, #492]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4978      	ldr	r1, [pc, #480]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b8:	4b73      	ldr	r3, [pc, #460]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	4970      	ldr	r1, [pc, #448]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024d6:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f023 0210 	bic.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4969      	ldr	r1, [pc, #420]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024f4:	4b64      	ldr	r3, [pc, #400]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	4961      	ldr	r1, [pc, #388]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002512:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f023 0220 	bic.w	r2, r3, #32
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	495a      	ldr	r1, [pc, #360]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002530:	4b55      	ldr	r3, [pc, #340]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	4952      	ldr	r1, [pc, #328]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800254e:	4b4e      	ldr	r3, [pc, #312]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	494b      	ldr	r1, [pc, #300]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800256c:	4b46      	ldr	r3, [pc, #280]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4943      	ldr	r1, [pc, #268]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800258a:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	493c      	ldr	r1, [pc, #240]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025a8:	4b37      	ldr	r3, [pc, #220]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	4934      	ldr	r1, [pc, #208]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	492d      	ldr	r1, [pc, #180]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f0:	4925      	ldr	r1, [pc, #148]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	491e      	ldr	r1, [pc, #120]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	4916      	ldr	r1, [pc, #88]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	490f      	ldr	r1, [pc, #60]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00c      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800267a:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	e002      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268e:	4913      	ldr	r1, [pc, #76]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002690:	4313      	orrs	r3, r2
 8002692:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ac:	490b      	ldr	r1, [pc, #44]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ca:	4904      	ldr	r1, [pc, #16]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3748      	adds	r7, #72	; 0x48
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e049      	b.n	8002786 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fd ff8c 	bl	8000624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3304      	adds	r3, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f000 fa56 	bl	8002bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <HAL_TIM_PWM_Start+0x24>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e03c      	b.n	800282e <HAL_TIM_PWM_Start+0x9e>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d109      	bne.n	80027ce <HAL_TIM_PWM_Start+0x3e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e02f      	b.n	800282e <HAL_TIM_PWM_Start+0x9e>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d109      	bne.n	80027e8 <HAL_TIM_PWM_Start+0x58>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e022      	b.n	800282e <HAL_TIM_PWM_Start+0x9e>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d109      	bne.n	8002802 <HAL_TIM_PWM_Start+0x72>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	e015      	b.n	800282e <HAL_TIM_PWM_Start+0x9e>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b10      	cmp	r3, #16
 8002806:	d109      	bne.n	800281c <HAL_TIM_PWM_Start+0x8c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e008      	b.n	800282e <HAL_TIM_PWM_Start+0x9e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	bf14      	ite	ne
 8002828:	2301      	movne	r3, #1
 800282a:	2300      	moveq	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e0a1      	b.n	800297a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <HAL_TIM_PWM_Start+0xb6>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002844:	e023      	b.n	800288e <HAL_TIM_PWM_Start+0xfe>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d104      	bne.n	8002856 <HAL_TIM_PWM_Start+0xc6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002854:	e01b      	b.n	800288e <HAL_TIM_PWM_Start+0xfe>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d104      	bne.n	8002866 <HAL_TIM_PWM_Start+0xd6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002864:	e013      	b.n	800288e <HAL_TIM_PWM_Start+0xfe>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b0c      	cmp	r3, #12
 800286a:	d104      	bne.n	8002876 <HAL_TIM_PWM_Start+0xe6>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002874:	e00b      	b.n	800288e <HAL_TIM_PWM_Start+0xfe>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b10      	cmp	r3, #16
 800287a:	d104      	bne.n	8002886 <HAL_TIM_PWM_Start+0xf6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002884:	e003      	b.n	800288e <HAL_TIM_PWM_Start+0xfe>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2202      	movs	r2, #2
 800288a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2201      	movs	r2, #1
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fd3e 	bl	8003318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a38      	ldr	r2, [pc, #224]	; (8002984 <HAL_TIM_PWM_Start+0x1f4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d018      	beq.n	80028d8 <HAL_TIM_PWM_Start+0x148>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a37      	ldr	r2, [pc, #220]	; (8002988 <HAL_TIM_PWM_Start+0x1f8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <HAL_TIM_PWM_Start+0x148>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a35      	ldr	r2, [pc, #212]	; (800298c <HAL_TIM_PWM_Start+0x1fc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00e      	beq.n	80028d8 <HAL_TIM_PWM_Start+0x148>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a34      	ldr	r2, [pc, #208]	; (8002990 <HAL_TIM_PWM_Start+0x200>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d009      	beq.n	80028d8 <HAL_TIM_PWM_Start+0x148>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a32      	ldr	r2, [pc, #200]	; (8002994 <HAL_TIM_PWM_Start+0x204>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_TIM_PWM_Start+0x148>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a31      	ldr	r2, [pc, #196]	; (8002998 <HAL_TIM_PWM_Start+0x208>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_TIM_PWM_Start+0x14c>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_TIM_PWM_Start+0x14e>
 80028dc:	2300      	movs	r3, #0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a23      	ldr	r2, [pc, #140]	; (8002984 <HAL_TIM_PWM_Start+0x1f4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d01d      	beq.n	8002938 <HAL_TIM_PWM_Start+0x1a8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d018      	beq.n	8002938 <HAL_TIM_PWM_Start+0x1a8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a24      	ldr	r2, [pc, #144]	; (800299c <HAL_TIM_PWM_Start+0x20c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_TIM_PWM_Start+0x1a8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <HAL_TIM_PWM_Start+0x210>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00e      	beq.n	8002938 <HAL_TIM_PWM_Start+0x1a8>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1a      	ldr	r2, [pc, #104]	; (8002988 <HAL_TIM_PWM_Start+0x1f8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d009      	beq.n	8002938 <HAL_TIM_PWM_Start+0x1a8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_TIM_PWM_Start+0x1fc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d004      	beq.n	8002938 <HAL_TIM_PWM_Start+0x1a8>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_TIM_PWM_Start+0x208>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d115      	bne.n	8002964 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_TIM_PWM_Start+0x214>)
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b06      	cmp	r3, #6
 8002948:	d015      	beq.n	8002976 <HAL_TIM_PWM_Start+0x1e6>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002950:	d011      	beq.n	8002976 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002962:	e008      	b.n	8002976 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e000      	b.n	8002978 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40013400 	.word	0x40013400
 800298c:	40014000 	.word	0x40014000
 8002990:	40014400 	.word	0x40014400
 8002994:	40014800 	.word	0x40014800
 8002998:	40015000 	.word	0x40015000
 800299c:	40000400 	.word	0x40000400
 80029a0:	40000800 	.word	0x40000800
 80029a4:	00010007 	.word	0x00010007

080029a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e0ff      	b.n	8002bc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b14      	cmp	r3, #20
 80029d2:	f200 80f0 	bhi.w	8002bb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80029d6:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	08002a31 	.word	0x08002a31
 80029e0:	08002bb7 	.word	0x08002bb7
 80029e4:	08002bb7 	.word	0x08002bb7
 80029e8:	08002bb7 	.word	0x08002bb7
 80029ec:	08002a71 	.word	0x08002a71
 80029f0:	08002bb7 	.word	0x08002bb7
 80029f4:	08002bb7 	.word	0x08002bb7
 80029f8:	08002bb7 	.word	0x08002bb7
 80029fc:	08002ab3 	.word	0x08002ab3
 8002a00:	08002bb7 	.word	0x08002bb7
 8002a04:	08002bb7 	.word	0x08002bb7
 8002a08:	08002bb7 	.word	0x08002bb7
 8002a0c:	08002af3 	.word	0x08002af3
 8002a10:	08002bb7 	.word	0x08002bb7
 8002a14:	08002bb7 	.word	0x08002bb7
 8002a18:	08002bb7 	.word	0x08002bb7
 8002a1c:	08002b35 	.word	0x08002b35
 8002a20:	08002bb7 	.word	0x08002bb7
 8002a24:	08002bb7 	.word	0x08002bb7
 8002a28:	08002bb7 	.word	0x08002bb7
 8002a2c:	08002b75 	.word	0x08002b75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f968 	bl	8002d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0208 	orr.w	r2, r2, #8
 8002a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6999      	ldr	r1, [r3, #24]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	619a      	str	r2, [r3, #24]
      break;
 8002a6e:	e0a5      	b.n	8002bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f9e2 	bl	8002e40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6999      	ldr	r1, [r3, #24]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	021a      	lsls	r2, r3, #8
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	619a      	str	r2, [r3, #24]
      break;
 8002ab0:	e084      	b.n	8002bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fa55 	bl	8002f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0208 	orr.w	r2, r2, #8
 8002acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0204 	bic.w	r2, r2, #4
 8002adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69d9      	ldr	r1, [r3, #28]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	61da      	str	r2, [r3, #28]
      break;
 8002af0:	e064      	b.n	8002bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fac7 	bl	800308c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69d9      	ldr	r1, [r3, #28]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	021a      	lsls	r2, r3, #8
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	61da      	str	r2, [r3, #28]
      break;
 8002b32:	e043      	b.n	8002bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fb16 	bl	800316c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0208 	orr.w	r2, r2, #8
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0204 	bic.w	r2, r2, #4
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b72:	e023      	b.n	8002bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fb60 	bl	8003240 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	021a      	lsls	r2, r3, #8
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bb4:	e002      	b.n	8002bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop

08002bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a42      	ldr	r2, [pc, #264]	; (8002cec <TIM_Base_SetConfig+0x11c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d013      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bee:	d00f      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3f      	ldr	r2, [pc, #252]	; (8002cf0 <TIM_Base_SetConfig+0x120>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00b      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3e      	ldr	r2, [pc, #248]	; (8002cf4 <TIM_Base_SetConfig+0x124>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3d      	ldr	r2, [pc, #244]	; (8002cf8 <TIM_Base_SetConfig+0x128>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_Base_SetConfig+0x40>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3c      	ldr	r2, [pc, #240]	; (8002cfc <TIM_Base_SetConfig+0x12c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d108      	bne.n	8002c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a31      	ldr	r2, [pc, #196]	; (8002cec <TIM_Base_SetConfig+0x11c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01f      	beq.n	8002c6a <TIM_Base_SetConfig+0x9a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c30:	d01b      	beq.n	8002c6a <TIM_Base_SetConfig+0x9a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2e      	ldr	r2, [pc, #184]	; (8002cf0 <TIM_Base_SetConfig+0x120>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d017      	beq.n	8002c6a <TIM_Base_SetConfig+0x9a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2d      	ldr	r2, [pc, #180]	; (8002cf4 <TIM_Base_SetConfig+0x124>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <TIM_Base_SetConfig+0x9a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <TIM_Base_SetConfig+0x128>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00f      	beq.n	8002c6a <TIM_Base_SetConfig+0x9a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a2c      	ldr	r2, [pc, #176]	; (8002d00 <TIM_Base_SetConfig+0x130>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00b      	beq.n	8002c6a <TIM_Base_SetConfig+0x9a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <TIM_Base_SetConfig+0x134>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <TIM_Base_SetConfig+0x9a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <TIM_Base_SetConfig+0x138>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d003      	beq.n	8002c6a <TIM_Base_SetConfig+0x9a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <TIM_Base_SetConfig+0x12c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d108      	bne.n	8002c7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a12      	ldr	r2, [pc, #72]	; (8002cec <TIM_Base_SetConfig+0x11c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <TIM_Base_SetConfig+0x100>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <TIM_Base_SetConfig+0x128>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00f      	beq.n	8002cd0 <TIM_Base_SetConfig+0x100>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <TIM_Base_SetConfig+0x130>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <TIM_Base_SetConfig+0x100>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <TIM_Base_SetConfig+0x134>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <TIM_Base_SetConfig+0x100>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <TIM_Base_SetConfig+0x138>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0x100>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a0c      	ldr	r2, [pc, #48]	; (8002cfc <TIM_Base_SetConfig+0x12c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d103      	bne.n	8002cd8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	615a      	str	r2, [r3, #20]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40013400 	.word	0x40013400
 8002cfc:	40015000 	.word	0x40015000
 8002d00:	40014000 	.word	0x40014000
 8002d04:	40014400 	.word	0x40014400
 8002d08:	40014800 	.word	0x40014800

08002d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f023 0201 	bic.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0303 	bic.w	r3, r3, #3
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f023 0302 	bic.w	r3, r3, #2
 8002d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a30      	ldr	r2, [pc, #192]	; (8002e28 <TIM_OC1_SetConfig+0x11c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <TIM_OC1_SetConfig+0x88>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <TIM_OC1_SetConfig+0x120>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00f      	beq.n	8002d94 <TIM_OC1_SetConfig+0x88>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a2e      	ldr	r2, [pc, #184]	; (8002e30 <TIM_OC1_SetConfig+0x124>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00b      	beq.n	8002d94 <TIM_OC1_SetConfig+0x88>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a2d      	ldr	r2, [pc, #180]	; (8002e34 <TIM_OC1_SetConfig+0x128>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d007      	beq.n	8002d94 <TIM_OC1_SetConfig+0x88>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a2c      	ldr	r2, [pc, #176]	; (8002e38 <TIM_OC1_SetConfig+0x12c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <TIM_OC1_SetConfig+0x88>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a2b      	ldr	r2, [pc, #172]	; (8002e3c <TIM_OC1_SetConfig+0x130>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d10c      	bne.n	8002dae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0308 	bic.w	r3, r3, #8
 8002d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f023 0304 	bic.w	r3, r3, #4
 8002dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a1d      	ldr	r2, [pc, #116]	; (8002e28 <TIM_OC1_SetConfig+0x11c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <TIM_OC1_SetConfig+0xd2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <TIM_OC1_SetConfig+0x120>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00f      	beq.n	8002dde <TIM_OC1_SetConfig+0xd2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <TIM_OC1_SetConfig+0x124>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00b      	beq.n	8002dde <TIM_OC1_SetConfig+0xd2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1a      	ldr	r2, [pc, #104]	; (8002e34 <TIM_OC1_SetConfig+0x128>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <TIM_OC1_SetConfig+0xd2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <TIM_OC1_SetConfig+0x12c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d003      	beq.n	8002dde <TIM_OC1_SetConfig+0xd2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <TIM_OC1_SetConfig+0x130>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d111      	bne.n	8002e02 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	621a      	str	r2, [r3, #32]
}
 8002e1c:	bf00      	nop
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40012c00 	.word	0x40012c00
 8002e2c:	40013400 	.word	0x40013400
 8002e30:	40014000 	.word	0x40014000
 8002e34:	40014400 	.word	0x40014400
 8002e38:	40014800 	.word	0x40014800
 8002e3c:	40015000 	.word	0x40015000

08002e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f023 0210 	bic.w	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f023 0320 	bic.w	r3, r3, #32
 8002e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a2c      	ldr	r2, [pc, #176]	; (8002f50 <TIM_OC2_SetConfig+0x110>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d007      	beq.n	8002eb4 <TIM_OC2_SetConfig+0x74>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a2b      	ldr	r2, [pc, #172]	; (8002f54 <TIM_OC2_SetConfig+0x114>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_OC2_SetConfig+0x74>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <TIM_OC2_SetConfig+0x118>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d10d      	bne.n	8002ed0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <TIM_OC2_SetConfig+0x110>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <TIM_OC2_SetConfig+0xc0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a1e      	ldr	r2, [pc, #120]	; (8002f54 <TIM_OC2_SetConfig+0x114>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00f      	beq.n	8002f00 <TIM_OC2_SetConfig+0xc0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <TIM_OC2_SetConfig+0x11c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00b      	beq.n	8002f00 <TIM_OC2_SetConfig+0xc0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <TIM_OC2_SetConfig+0x120>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d007      	beq.n	8002f00 <TIM_OC2_SetConfig+0xc0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <TIM_OC2_SetConfig+0x124>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d003      	beq.n	8002f00 <TIM_OC2_SetConfig+0xc0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <TIM_OC2_SetConfig+0x118>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d113      	bne.n	8002f28 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f06:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f0e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	621a      	str	r2, [r3, #32]
}
 8002f42:	bf00      	nop
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40013400 	.word	0x40013400
 8002f58:	40015000 	.word	0x40015000
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800

08002f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <TIM_OC3_SetConfig+0x10c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <TIM_OC3_SetConfig+0x72>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2a      	ldr	r2, [pc, #168]	; (8003078 <TIM_OC3_SetConfig+0x110>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <TIM_OC3_SetConfig+0x72>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a29      	ldr	r2, [pc, #164]	; (800307c <TIM_OC3_SetConfig+0x114>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10d      	bne.n	8002ff6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <TIM_OC3_SetConfig+0x10c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <TIM_OC3_SetConfig+0xbe>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <TIM_OC3_SetConfig+0x110>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00f      	beq.n	8003026 <TIM_OC3_SetConfig+0xbe>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <TIM_OC3_SetConfig+0x118>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00b      	beq.n	8003026 <TIM_OC3_SetConfig+0xbe>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <TIM_OC3_SetConfig+0x11c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <TIM_OC3_SetConfig+0xbe>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <TIM_OC3_SetConfig+0x120>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d003      	beq.n	8003026 <TIM_OC3_SetConfig+0xbe>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a16      	ldr	r2, [pc, #88]	; (800307c <TIM_OC3_SetConfig+0x114>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d113      	bne.n	800304e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800302c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	621a      	str	r2, [r3, #32]
}
 8003068:	bf00      	nop
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40013400 	.word	0x40013400
 800307c:	40015000 	.word	0x40015000
 8003080:	40014000 	.word	0x40014000
 8003084:	40014400 	.word	0x40014400
 8003088:	40014800 	.word	0x40014800

0800308c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	031b      	lsls	r3, r3, #12
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <TIM_OC4_SetConfig+0xc8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <TIM_OC4_SetConfig+0x8c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a19      	ldr	r2, [pc, #100]	; (8003158 <TIM_OC4_SetConfig+0xcc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00f      	beq.n	8003118 <TIM_OC4_SetConfig+0x8c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a18      	ldr	r2, [pc, #96]	; (800315c <TIM_OC4_SetConfig+0xd0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00b      	beq.n	8003118 <TIM_OC4_SetConfig+0x8c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a17      	ldr	r2, [pc, #92]	; (8003160 <TIM_OC4_SetConfig+0xd4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <TIM_OC4_SetConfig+0x8c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a16      	ldr	r2, [pc, #88]	; (8003164 <TIM_OC4_SetConfig+0xd8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_OC4_SetConfig+0x8c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a15      	ldr	r2, [pc, #84]	; (8003168 <TIM_OC4_SetConfig+0xdc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d109      	bne.n	800312c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800311e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	019b      	lsls	r3, r3, #6
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	621a      	str	r2, [r3, #32]
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40013400 	.word	0x40013400
 800315c:	40014000 	.word	0x40014000
 8003160:	40014400 	.word	0x40014400
 8003164:	40014800 	.word	0x40014800
 8003168:	40015000 	.word	0x40015000

0800316c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a19      	ldr	r2, [pc, #100]	; (8003228 <TIM_OC5_SetConfig+0xbc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <TIM_OC5_SetConfig+0x82>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a18      	ldr	r2, [pc, #96]	; (800322c <TIM_OC5_SetConfig+0xc0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00f      	beq.n	80031ee <TIM_OC5_SetConfig+0x82>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a17      	ldr	r2, [pc, #92]	; (8003230 <TIM_OC5_SetConfig+0xc4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00b      	beq.n	80031ee <TIM_OC5_SetConfig+0x82>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a16      	ldr	r2, [pc, #88]	; (8003234 <TIM_OC5_SetConfig+0xc8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_OC5_SetConfig+0x82>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a15      	ldr	r2, [pc, #84]	; (8003238 <TIM_OC5_SetConfig+0xcc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <TIM_OC5_SetConfig+0x82>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <TIM_OC5_SetConfig+0xd0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d109      	bne.n	8003202 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	621a      	str	r2, [r3, #32]
}
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40013400 	.word	0x40013400
 8003230:	40014000 	.word	0x40014000
 8003234:	40014400 	.word	0x40014400
 8003238:	40014800 	.word	0x40014800
 800323c:	40015000 	.word	0x40015000

08003240 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800326e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	051b      	lsls	r3, r3, #20
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <TIM_OC6_SetConfig+0xc0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <TIM_OC6_SetConfig+0x84>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a19      	ldr	r2, [pc, #100]	; (8003304 <TIM_OC6_SetConfig+0xc4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00f      	beq.n	80032c4 <TIM_OC6_SetConfig+0x84>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a18      	ldr	r2, [pc, #96]	; (8003308 <TIM_OC6_SetConfig+0xc8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_OC6_SetConfig+0x84>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a17      	ldr	r2, [pc, #92]	; (800330c <TIM_OC6_SetConfig+0xcc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <TIM_OC6_SetConfig+0x84>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a16      	ldr	r2, [pc, #88]	; (8003310 <TIM_OC6_SetConfig+0xd0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_OC6_SetConfig+0x84>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a15      	ldr	r2, [pc, #84]	; (8003314 <TIM_OC6_SetConfig+0xd4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d109      	bne.n	80032d8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	029b      	lsls	r3, r3, #10
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40013400 	.word	0x40013400
 8003308:	40014000 	.word	0x40014000
 800330c:	40014400 	.word	0x40014400
 8003310:	40014800 	.word	0x40014800
 8003314:	40015000 	.word	0x40015000

08003318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2201      	movs	r2, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a1a      	ldr	r2, [r3, #32]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003378:	2302      	movs	r3, #2
 800337a:	e06d      	b.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a30      	ldr	r2, [pc, #192]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d009      	beq.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2f      	ldr	r2, [pc, #188]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d004      	beq.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2d      	ldr	r2, [pc, #180]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d01d      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f8:	d018      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d013      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00e      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d009      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a11      	ldr	r2, [pc, #68]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d10c      	bne.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003432:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	4313      	orrs	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40013400 	.word	0x40013400
 800346c:	40015000 	.word	0x40015000
 8003470:	40000400 	.word	0x40000400
 8003474:	40000800 	.word	0x40000800
 8003478:	40014000 	.word	0x40014000

0800347c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003494:	2302      	movs	r3, #2
 8003496:	e06a      	b.n	800356e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d009      	beq.n	8003530 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a17      	ldr	r2, [pc, #92]	; (8003580 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d115      	bne.n	800355c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	051b      	lsls	r3, r3, #20
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40013400 	.word	0x40013400
 8003584:	40015000 	.word	0x40015000

08003588 <__errno>:
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <__errno+0x8>)
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	2000000c 	.word	0x2000000c

08003594 <__libc_init_array>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	4d0d      	ldr	r5, [pc, #52]	; (80035cc <__libc_init_array+0x38>)
 8003598:	4c0d      	ldr	r4, [pc, #52]	; (80035d0 <__libc_init_array+0x3c>)
 800359a:	1b64      	subs	r4, r4, r5
 800359c:	10a4      	asrs	r4, r4, #2
 800359e:	2600      	movs	r6, #0
 80035a0:	42a6      	cmp	r6, r4
 80035a2:	d109      	bne.n	80035b8 <__libc_init_array+0x24>
 80035a4:	4d0b      	ldr	r5, [pc, #44]	; (80035d4 <__libc_init_array+0x40>)
 80035a6:	4c0c      	ldr	r4, [pc, #48]	; (80035d8 <__libc_init_array+0x44>)
 80035a8:	f000 f8da 	bl	8003760 <_init>
 80035ac:	1b64      	subs	r4, r4, r5
 80035ae:	10a4      	asrs	r4, r4, #2
 80035b0:	2600      	movs	r6, #0
 80035b2:	42a6      	cmp	r6, r4
 80035b4:	d105      	bne.n	80035c2 <__libc_init_array+0x2e>
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035bc:	4798      	blx	r3
 80035be:	3601      	adds	r6, #1
 80035c0:	e7ee      	b.n	80035a0 <__libc_init_array+0xc>
 80035c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c6:	4798      	blx	r3
 80035c8:	3601      	adds	r6, #1
 80035ca:	e7f2      	b.n	80035b2 <__libc_init_array+0x1e>
 80035cc:	080037a8 	.word	0x080037a8
 80035d0:	080037a8 	.word	0x080037a8
 80035d4:	080037a8 	.word	0x080037a8
 80035d8:	080037ac 	.word	0x080037ac

080035dc <malloc>:
 80035dc:	4b02      	ldr	r3, [pc, #8]	; (80035e8 <malloc+0xc>)
 80035de:	4601      	mov	r1, r0
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	f000 b82b 	b.w	800363c <_malloc_r>
 80035e6:	bf00      	nop
 80035e8:	2000000c 	.word	0x2000000c

080035ec <memset>:
 80035ec:	4402      	add	r2, r0
 80035ee:	4603      	mov	r3, r0
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d100      	bne.n	80035f6 <memset+0xa>
 80035f4:	4770      	bx	lr
 80035f6:	f803 1b01 	strb.w	r1, [r3], #1
 80035fa:	e7f9      	b.n	80035f0 <memset+0x4>

080035fc <sbrk_aligned>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	4e0e      	ldr	r6, [pc, #56]	; (8003638 <sbrk_aligned+0x3c>)
 8003600:	460c      	mov	r4, r1
 8003602:	6831      	ldr	r1, [r6, #0]
 8003604:	4605      	mov	r5, r0
 8003606:	b911      	cbnz	r1, 800360e <sbrk_aligned+0x12>
 8003608:	f000 f88c 	bl	8003724 <_sbrk_r>
 800360c:	6030      	str	r0, [r6, #0]
 800360e:	4621      	mov	r1, r4
 8003610:	4628      	mov	r0, r5
 8003612:	f000 f887 	bl	8003724 <_sbrk_r>
 8003616:	1c43      	adds	r3, r0, #1
 8003618:	d00a      	beq.n	8003630 <sbrk_aligned+0x34>
 800361a:	1cc4      	adds	r4, r0, #3
 800361c:	f024 0403 	bic.w	r4, r4, #3
 8003620:	42a0      	cmp	r0, r4
 8003622:	d007      	beq.n	8003634 <sbrk_aligned+0x38>
 8003624:	1a21      	subs	r1, r4, r0
 8003626:	4628      	mov	r0, r5
 8003628:	f000 f87c 	bl	8003724 <_sbrk_r>
 800362c:	3001      	adds	r0, #1
 800362e:	d101      	bne.n	8003634 <sbrk_aligned+0x38>
 8003630:	f04f 34ff 	mov.w	r4, #4294967295
 8003634:	4620      	mov	r0, r4
 8003636:	bd70      	pop	{r4, r5, r6, pc}
 8003638:	200000e8 	.word	0x200000e8

0800363c <_malloc_r>:
 800363c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003640:	1ccd      	adds	r5, r1, #3
 8003642:	f025 0503 	bic.w	r5, r5, #3
 8003646:	3508      	adds	r5, #8
 8003648:	2d0c      	cmp	r5, #12
 800364a:	bf38      	it	cc
 800364c:	250c      	movcc	r5, #12
 800364e:	2d00      	cmp	r5, #0
 8003650:	4607      	mov	r7, r0
 8003652:	db01      	blt.n	8003658 <_malloc_r+0x1c>
 8003654:	42a9      	cmp	r1, r5
 8003656:	d905      	bls.n	8003664 <_malloc_r+0x28>
 8003658:	230c      	movs	r3, #12
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	2600      	movs	r6, #0
 800365e:	4630      	mov	r0, r6
 8003660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003664:	4e2e      	ldr	r6, [pc, #184]	; (8003720 <_malloc_r+0xe4>)
 8003666:	f000 f86d 	bl	8003744 <__malloc_lock>
 800366a:	6833      	ldr	r3, [r6, #0]
 800366c:	461c      	mov	r4, r3
 800366e:	bb34      	cbnz	r4, 80036be <_malloc_r+0x82>
 8003670:	4629      	mov	r1, r5
 8003672:	4638      	mov	r0, r7
 8003674:	f7ff ffc2 	bl	80035fc <sbrk_aligned>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	4604      	mov	r4, r0
 800367c:	d14d      	bne.n	800371a <_malloc_r+0xde>
 800367e:	6834      	ldr	r4, [r6, #0]
 8003680:	4626      	mov	r6, r4
 8003682:	2e00      	cmp	r6, #0
 8003684:	d140      	bne.n	8003708 <_malloc_r+0xcc>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	4631      	mov	r1, r6
 800368a:	4638      	mov	r0, r7
 800368c:	eb04 0803 	add.w	r8, r4, r3
 8003690:	f000 f848 	bl	8003724 <_sbrk_r>
 8003694:	4580      	cmp	r8, r0
 8003696:	d13a      	bne.n	800370e <_malloc_r+0xd2>
 8003698:	6821      	ldr	r1, [r4, #0]
 800369a:	3503      	adds	r5, #3
 800369c:	1a6d      	subs	r5, r5, r1
 800369e:	f025 0503 	bic.w	r5, r5, #3
 80036a2:	3508      	adds	r5, #8
 80036a4:	2d0c      	cmp	r5, #12
 80036a6:	bf38      	it	cc
 80036a8:	250c      	movcc	r5, #12
 80036aa:	4629      	mov	r1, r5
 80036ac:	4638      	mov	r0, r7
 80036ae:	f7ff ffa5 	bl	80035fc <sbrk_aligned>
 80036b2:	3001      	adds	r0, #1
 80036b4:	d02b      	beq.n	800370e <_malloc_r+0xd2>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	442b      	add	r3, r5
 80036ba:	6023      	str	r3, [r4, #0]
 80036bc:	e00e      	b.n	80036dc <_malloc_r+0xa0>
 80036be:	6822      	ldr	r2, [r4, #0]
 80036c0:	1b52      	subs	r2, r2, r5
 80036c2:	d41e      	bmi.n	8003702 <_malloc_r+0xc6>
 80036c4:	2a0b      	cmp	r2, #11
 80036c6:	d916      	bls.n	80036f6 <_malloc_r+0xba>
 80036c8:	1961      	adds	r1, r4, r5
 80036ca:	42a3      	cmp	r3, r4
 80036cc:	6025      	str	r5, [r4, #0]
 80036ce:	bf18      	it	ne
 80036d0:	6059      	strne	r1, [r3, #4]
 80036d2:	6863      	ldr	r3, [r4, #4]
 80036d4:	bf08      	it	eq
 80036d6:	6031      	streq	r1, [r6, #0]
 80036d8:	5162      	str	r2, [r4, r5]
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	4638      	mov	r0, r7
 80036de:	f104 060b 	add.w	r6, r4, #11
 80036e2:	f000 f835 	bl	8003750 <__malloc_unlock>
 80036e6:	f026 0607 	bic.w	r6, r6, #7
 80036ea:	1d23      	adds	r3, r4, #4
 80036ec:	1af2      	subs	r2, r6, r3
 80036ee:	d0b6      	beq.n	800365e <_malloc_r+0x22>
 80036f0:	1b9b      	subs	r3, r3, r6
 80036f2:	50a3      	str	r3, [r4, r2]
 80036f4:	e7b3      	b.n	800365e <_malloc_r+0x22>
 80036f6:	6862      	ldr	r2, [r4, #4]
 80036f8:	42a3      	cmp	r3, r4
 80036fa:	bf0c      	ite	eq
 80036fc:	6032      	streq	r2, [r6, #0]
 80036fe:	605a      	strne	r2, [r3, #4]
 8003700:	e7ec      	b.n	80036dc <_malloc_r+0xa0>
 8003702:	4623      	mov	r3, r4
 8003704:	6864      	ldr	r4, [r4, #4]
 8003706:	e7b2      	b.n	800366e <_malloc_r+0x32>
 8003708:	4634      	mov	r4, r6
 800370a:	6876      	ldr	r6, [r6, #4]
 800370c:	e7b9      	b.n	8003682 <_malloc_r+0x46>
 800370e:	230c      	movs	r3, #12
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	4638      	mov	r0, r7
 8003714:	f000 f81c 	bl	8003750 <__malloc_unlock>
 8003718:	e7a1      	b.n	800365e <_malloc_r+0x22>
 800371a:	6025      	str	r5, [r4, #0]
 800371c:	e7de      	b.n	80036dc <_malloc_r+0xa0>
 800371e:	bf00      	nop
 8003720:	200000e4 	.word	0x200000e4

08003724 <_sbrk_r>:
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	4d06      	ldr	r5, [pc, #24]	; (8003740 <_sbrk_r+0x1c>)
 8003728:	2300      	movs	r3, #0
 800372a:	4604      	mov	r4, r0
 800372c:	4608      	mov	r0, r1
 800372e:	602b      	str	r3, [r5, #0]
 8003730:	f7fc fffa 	bl	8000728 <_sbrk>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	d102      	bne.n	800373e <_sbrk_r+0x1a>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	b103      	cbz	r3, 800373e <_sbrk_r+0x1a>
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	bd38      	pop	{r3, r4, r5, pc}
 8003740:	200000ec 	.word	0x200000ec

08003744 <__malloc_lock>:
 8003744:	4801      	ldr	r0, [pc, #4]	; (800374c <__malloc_lock+0x8>)
 8003746:	f000 b809 	b.w	800375c <__retarget_lock_acquire_recursive>
 800374a:	bf00      	nop
 800374c:	200000f0 	.word	0x200000f0

08003750 <__malloc_unlock>:
 8003750:	4801      	ldr	r0, [pc, #4]	; (8003758 <__malloc_unlock+0x8>)
 8003752:	f000 b804 	b.w	800375e <__retarget_lock_release_recursive>
 8003756:	bf00      	nop
 8003758:	200000f0 	.word	0x200000f0

0800375c <__retarget_lock_acquire_recursive>:
 800375c:	4770      	bx	lr

0800375e <__retarget_lock_release_recursive>:
 800375e:	4770      	bx	lr

08003760 <_init>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr

0800376c <_fini>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr
