
motor-mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be4  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006db4  08006db4  00016db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dec  08006dec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006dec  08006dec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dec  08006dec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dec  08006dec  00016dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006df0  08006df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000074  08006e68  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08006e68  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d4c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f1  00000000  00000000  00030de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  000336e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00034600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001302b  00000000  00000000  00035408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135cd  00000000  00000000  00048433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ba23  00000000  00000000  0005ba00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7423  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000411c  00000000  00000000  000c7474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d9c 	.word	0x08006d9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006d9c 	.word	0x08006d9c

08000210 <__aeabi_frsub>:
 8000210:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__addsf3>
 8000216:	bf00      	nop

08000218 <__aeabi_fsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800021c <__addsf3>:
 800021c:	0042      	lsls	r2, r0, #1
 800021e:	bf1f      	itttt	ne
 8000220:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000224:	ea92 0f03 	teqne	r2, r3
 8000228:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800022c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000230:	d06a      	beq.n	8000308 <__addsf3+0xec>
 8000232:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000236:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800023a:	bfc1      	itttt	gt
 800023c:	18d2      	addgt	r2, r2, r3
 800023e:	4041      	eorgt	r1, r0
 8000240:	4048      	eorgt	r0, r1
 8000242:	4041      	eorgt	r1, r0
 8000244:	bfb8      	it	lt
 8000246:	425b      	neglt	r3, r3
 8000248:	2b19      	cmp	r3, #25
 800024a:	bf88      	it	hi
 800024c:	4770      	bxhi	lr
 800024e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000252:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800025a:	bf18      	it	ne
 800025c:	4240      	negne	r0, r0
 800025e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000262:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000266:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800026a:	bf18      	it	ne
 800026c:	4249      	negne	r1, r1
 800026e:	ea92 0f03 	teq	r2, r3
 8000272:	d03f      	beq.n	80002f4 <__addsf3+0xd8>
 8000274:	f1a2 0201 	sub.w	r2, r2, #1
 8000278:	fa41 fc03 	asr.w	ip, r1, r3
 800027c:	eb10 000c 	adds.w	r0, r0, ip
 8000280:	f1c3 0320 	rsb	r3, r3, #32
 8000284:	fa01 f103 	lsl.w	r1, r1, r3
 8000288:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028c:	d502      	bpl.n	8000294 <__addsf3+0x78>
 800028e:	4249      	negs	r1, r1
 8000290:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000294:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000298:	d313      	bcc.n	80002c2 <__addsf3+0xa6>
 800029a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800029e:	d306      	bcc.n	80002ae <__addsf3+0x92>
 80002a0:	0840      	lsrs	r0, r0, #1
 80002a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002a6:	f102 0201 	add.w	r2, r2, #1
 80002aa:	2afe      	cmp	r2, #254	; 0xfe
 80002ac:	d251      	bcs.n	8000352 <__addsf3+0x136>
 80002ae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002b6:	bf08      	it	eq
 80002b8:	f020 0001 	biceq.w	r0, r0, #1
 80002bc:	ea40 0003 	orr.w	r0, r0, r3
 80002c0:	4770      	bx	lr
 80002c2:	0049      	lsls	r1, r1, #1
 80002c4:	eb40 0000 	adc.w	r0, r0, r0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002d0:	d2ed      	bcs.n	80002ae <__addsf3+0x92>
 80002d2:	fab0 fc80 	clz	ip, r0
 80002d6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002da:	ebb2 020c 	subs.w	r2, r2, ip
 80002de:	fa00 f00c 	lsl.w	r0, r0, ip
 80002e2:	bfaa      	itet	ge
 80002e4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002e8:	4252      	neglt	r2, r2
 80002ea:	4318      	orrge	r0, r3
 80002ec:	bfbc      	itt	lt
 80002ee:	40d0      	lsrlt	r0, r2
 80002f0:	4318      	orrlt	r0, r3
 80002f2:	4770      	bx	lr
 80002f4:	f092 0f00 	teq	r2, #0
 80002f8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002fc:	bf06      	itte	eq
 80002fe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000302:	3201      	addeq	r2, #1
 8000304:	3b01      	subne	r3, #1
 8000306:	e7b5      	b.n	8000274 <__addsf3+0x58>
 8000308:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800030c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000310:	bf18      	it	ne
 8000312:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000316:	d021      	beq.n	800035c <__addsf3+0x140>
 8000318:	ea92 0f03 	teq	r2, r3
 800031c:	d004      	beq.n	8000328 <__addsf3+0x10c>
 800031e:	f092 0f00 	teq	r2, #0
 8000322:	bf08      	it	eq
 8000324:	4608      	moveq	r0, r1
 8000326:	4770      	bx	lr
 8000328:	ea90 0f01 	teq	r0, r1
 800032c:	bf1c      	itt	ne
 800032e:	2000      	movne	r0, #0
 8000330:	4770      	bxne	lr
 8000332:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000336:	d104      	bne.n	8000342 <__addsf3+0x126>
 8000338:	0040      	lsls	r0, r0, #1
 800033a:	bf28      	it	cs
 800033c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000346:	bf3c      	itt	cc
 8000348:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800034c:	4770      	bxcc	lr
 800034e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000352:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000356:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800035a:	4770      	bx	lr
 800035c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000360:	bf16      	itet	ne
 8000362:	4608      	movne	r0, r1
 8000364:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000368:	4601      	movne	r1, r0
 800036a:	0242      	lsls	r2, r0, #9
 800036c:	bf06      	itte	eq
 800036e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000372:	ea90 0f01 	teqeq	r0, r1
 8000376:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800037a:	4770      	bx	lr

0800037c <__aeabi_ui2f>:
 800037c:	f04f 0300 	mov.w	r3, #0
 8000380:	e004      	b.n	800038c <__aeabi_i2f+0x8>
 8000382:	bf00      	nop

08000384 <__aeabi_i2f>:
 8000384:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000388:	bf48      	it	mi
 800038a:	4240      	negmi	r0, r0
 800038c:	ea5f 0c00 	movs.w	ip, r0
 8000390:	bf08      	it	eq
 8000392:	4770      	bxeq	lr
 8000394:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000398:	4601      	mov	r1, r0
 800039a:	f04f 0000 	mov.w	r0, #0
 800039e:	e01c      	b.n	80003da <__aeabi_l2f+0x2a>

080003a0 <__aeabi_ul2f>:
 80003a0:	ea50 0201 	orrs.w	r2, r0, r1
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f04f 0300 	mov.w	r3, #0
 80003ac:	e00a      	b.n	80003c4 <__aeabi_l2f+0x14>
 80003ae:	bf00      	nop

080003b0 <__aeabi_l2f>:
 80003b0:	ea50 0201 	orrs.w	r2, r0, r1
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003bc:	d502      	bpl.n	80003c4 <__aeabi_l2f+0x14>
 80003be:	4240      	negs	r0, r0
 80003c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003c4:	ea5f 0c01 	movs.w	ip, r1
 80003c8:	bf02      	ittt	eq
 80003ca:	4684      	moveq	ip, r0
 80003cc:	4601      	moveq	r1, r0
 80003ce:	2000      	moveq	r0, #0
 80003d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003d4:	bf08      	it	eq
 80003d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003de:	fabc f28c 	clz	r2, ip
 80003e2:	3a08      	subs	r2, #8
 80003e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003e8:	db10      	blt.n	800040c <__aeabi_l2f+0x5c>
 80003ea:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ee:	4463      	add	r3, ip
 80003f0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003f4:	f1c2 0220 	rsb	r2, r2, #32
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	fa20 f202 	lsr.w	r2, r0, r2
 8000400:	eb43 0002 	adc.w	r0, r3, r2
 8000404:	bf08      	it	eq
 8000406:	f020 0001 	biceq.w	r0, r0, #1
 800040a:	4770      	bx	lr
 800040c:	f102 0220 	add.w	r2, r2, #32
 8000410:	fa01 fc02 	lsl.w	ip, r1, r2
 8000414:	f1c2 0220 	rsb	r2, r2, #32
 8000418:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800041c:	fa21 f202 	lsr.w	r2, r1, r2
 8000420:	eb43 0002 	adc.w	r0, r3, r2
 8000424:	bf08      	it	eq
 8000426:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042a:	4770      	bx	lr

0800042c <__aeabi_fmul>:
 800042c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000430:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000434:	bf1e      	ittt	ne
 8000436:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800043a:	ea92 0f0c 	teqne	r2, ip
 800043e:	ea93 0f0c 	teqne	r3, ip
 8000442:	d06f      	beq.n	8000524 <__aeabi_fmul+0xf8>
 8000444:	441a      	add	r2, r3
 8000446:	ea80 0c01 	eor.w	ip, r0, r1
 800044a:	0240      	lsls	r0, r0, #9
 800044c:	bf18      	it	ne
 800044e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000452:	d01e      	beq.n	8000492 <__aeabi_fmul+0x66>
 8000454:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000458:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800045c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000460:	fba0 3101 	umull	r3, r1, r0, r1
 8000464:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000468:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800046c:	bf3e      	ittt	cc
 800046e:	0049      	lslcc	r1, r1, #1
 8000470:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000474:	005b      	lslcc	r3, r3, #1
 8000476:	ea40 0001 	orr.w	r0, r0, r1
 800047a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800047e:	2afd      	cmp	r2, #253	; 0xfd
 8000480:	d81d      	bhi.n	80004be <__aeabi_fmul+0x92>
 8000482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000486:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800048a:	bf08      	it	eq
 800048c:	f020 0001 	biceq.w	r0, r0, #1
 8000490:	4770      	bx	lr
 8000492:	f090 0f00 	teq	r0, #0
 8000496:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800049a:	bf08      	it	eq
 800049c:	0249      	lsleq	r1, r1, #9
 800049e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004a2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004a6:	3a7f      	subs	r2, #127	; 0x7f
 80004a8:	bfc2      	ittt	gt
 80004aa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004ae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004b2:	4770      	bxgt	lr
 80004b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004b8:	f04f 0300 	mov.w	r3, #0
 80004bc:	3a01      	subs	r2, #1
 80004be:	dc5d      	bgt.n	800057c <__aeabi_fmul+0x150>
 80004c0:	f112 0f19 	cmn.w	r2, #25
 80004c4:	bfdc      	itt	le
 80004c6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ca:	4770      	bxle	lr
 80004cc:	f1c2 0200 	rsb	r2, r2, #0
 80004d0:	0041      	lsls	r1, r0, #1
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	f1c2 0220 	rsb	r2, r2, #32
 80004da:	fa00 fc02 	lsl.w	ip, r0, r2
 80004de:	ea5f 0031 	movs.w	r0, r1, rrx
 80004e2:	f140 0000 	adc.w	r0, r0, #0
 80004e6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004ea:	bf08      	it	eq
 80004ec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f0:	4770      	bx	lr
 80004f2:	f092 0f00 	teq	r2, #0
 80004f6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004fa:	bf02      	ittt	eq
 80004fc:	0040      	lsleq	r0, r0, #1
 80004fe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000502:	3a01      	subeq	r2, #1
 8000504:	d0f9      	beq.n	80004fa <__aeabi_fmul+0xce>
 8000506:	ea40 000c 	orr.w	r0, r0, ip
 800050a:	f093 0f00 	teq	r3, #0
 800050e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000512:	bf02      	ittt	eq
 8000514:	0049      	lsleq	r1, r1, #1
 8000516:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800051a:	3b01      	subeq	r3, #1
 800051c:	d0f9      	beq.n	8000512 <__aeabi_fmul+0xe6>
 800051e:	ea41 010c 	orr.w	r1, r1, ip
 8000522:	e78f      	b.n	8000444 <__aeabi_fmul+0x18>
 8000524:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000528:	ea92 0f0c 	teq	r2, ip
 800052c:	bf18      	it	ne
 800052e:	ea93 0f0c 	teqne	r3, ip
 8000532:	d00a      	beq.n	800054a <__aeabi_fmul+0x11e>
 8000534:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000538:	bf18      	it	ne
 800053a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800053e:	d1d8      	bne.n	80004f2 <__aeabi_fmul+0xc6>
 8000540:	ea80 0001 	eor.w	r0, r0, r1
 8000544:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000548:	4770      	bx	lr
 800054a:	f090 0f00 	teq	r0, #0
 800054e:	bf17      	itett	ne
 8000550:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000554:	4608      	moveq	r0, r1
 8000556:	f091 0f00 	teqne	r1, #0
 800055a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800055e:	d014      	beq.n	800058a <__aeabi_fmul+0x15e>
 8000560:	ea92 0f0c 	teq	r2, ip
 8000564:	d101      	bne.n	800056a <__aeabi_fmul+0x13e>
 8000566:	0242      	lsls	r2, r0, #9
 8000568:	d10f      	bne.n	800058a <__aeabi_fmul+0x15e>
 800056a:	ea93 0f0c 	teq	r3, ip
 800056e:	d103      	bne.n	8000578 <__aeabi_fmul+0x14c>
 8000570:	024b      	lsls	r3, r1, #9
 8000572:	bf18      	it	ne
 8000574:	4608      	movne	r0, r1
 8000576:	d108      	bne.n	800058a <__aeabi_fmul+0x15e>
 8000578:	ea80 0001 	eor.w	r0, r0, r1
 800057c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000580:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000584:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000588:	4770      	bx	lr
 800058a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800058e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000592:	4770      	bx	lr

08000594 <__aeabi_fdiv>:
 8000594:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000598:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800059c:	bf1e      	ittt	ne
 800059e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005a2:	ea92 0f0c 	teqne	r2, ip
 80005a6:	ea93 0f0c 	teqne	r3, ip
 80005aa:	d069      	beq.n	8000680 <__aeabi_fdiv+0xec>
 80005ac:	eba2 0203 	sub.w	r2, r2, r3
 80005b0:	ea80 0c01 	eor.w	ip, r0, r1
 80005b4:	0249      	lsls	r1, r1, #9
 80005b6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ba:	d037      	beq.n	800062c <__aeabi_fdiv+0x98>
 80005bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005c0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005c4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005cc:	428b      	cmp	r3, r1
 80005ce:	bf38      	it	cc
 80005d0:	005b      	lslcc	r3, r3, #1
 80005d2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005d6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005da:	428b      	cmp	r3, r1
 80005dc:	bf24      	itt	cs
 80005de:	1a5b      	subcs	r3, r3, r1
 80005e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80005e4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005e8:	bf24      	itt	cs
 80005ea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005ee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005f2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005f6:	bf24      	itt	cs
 80005f8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000600:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000604:	bf24      	itt	cs
 8000606:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800060a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	bf18      	it	ne
 8000612:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000616:	d1e0      	bne.n	80005da <__aeabi_fdiv+0x46>
 8000618:	2afd      	cmp	r2, #253	; 0xfd
 800061a:	f63f af50 	bhi.w	80004be <__aeabi_fmul+0x92>
 800061e:	428b      	cmp	r3, r1
 8000620:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000624:	bf08      	it	eq
 8000626:	f020 0001 	biceq.w	r0, r0, #1
 800062a:	4770      	bx	lr
 800062c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000630:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000634:	327f      	adds	r2, #127	; 0x7f
 8000636:	bfc2      	ittt	gt
 8000638:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800063c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000640:	4770      	bxgt	lr
 8000642:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	3a01      	subs	r2, #1
 800064c:	e737      	b.n	80004be <__aeabi_fmul+0x92>
 800064e:	f092 0f00 	teq	r2, #0
 8000652:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000656:	bf02      	ittt	eq
 8000658:	0040      	lsleq	r0, r0, #1
 800065a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800065e:	3a01      	subeq	r2, #1
 8000660:	d0f9      	beq.n	8000656 <__aeabi_fdiv+0xc2>
 8000662:	ea40 000c 	orr.w	r0, r0, ip
 8000666:	f093 0f00 	teq	r3, #0
 800066a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800066e:	bf02      	ittt	eq
 8000670:	0049      	lsleq	r1, r1, #1
 8000672:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000676:	3b01      	subeq	r3, #1
 8000678:	d0f9      	beq.n	800066e <__aeabi_fdiv+0xda>
 800067a:	ea41 010c 	orr.w	r1, r1, ip
 800067e:	e795      	b.n	80005ac <__aeabi_fdiv+0x18>
 8000680:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000684:	ea92 0f0c 	teq	r2, ip
 8000688:	d108      	bne.n	800069c <__aeabi_fdiv+0x108>
 800068a:	0242      	lsls	r2, r0, #9
 800068c:	f47f af7d 	bne.w	800058a <__aeabi_fmul+0x15e>
 8000690:	ea93 0f0c 	teq	r3, ip
 8000694:	f47f af70 	bne.w	8000578 <__aeabi_fmul+0x14c>
 8000698:	4608      	mov	r0, r1
 800069a:	e776      	b.n	800058a <__aeabi_fmul+0x15e>
 800069c:	ea93 0f0c 	teq	r3, ip
 80006a0:	d104      	bne.n	80006ac <__aeabi_fdiv+0x118>
 80006a2:	024b      	lsls	r3, r1, #9
 80006a4:	f43f af4c 	beq.w	8000540 <__aeabi_fmul+0x114>
 80006a8:	4608      	mov	r0, r1
 80006aa:	e76e      	b.n	800058a <__aeabi_fmul+0x15e>
 80006ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006b0:	bf18      	it	ne
 80006b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006b6:	d1ca      	bne.n	800064e <__aeabi_fdiv+0xba>
 80006b8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006bc:	f47f af5c 	bne.w	8000578 <__aeabi_fmul+0x14c>
 80006c0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006c4:	f47f af3c 	bne.w	8000540 <__aeabi_fmul+0x114>
 80006c8:	e75f      	b.n	800058a <__aeabi_fmul+0x15e>
 80006ca:	bf00      	nop

080006cc <__gesf2>:
 80006cc:	f04f 3cff 	mov.w	ip, #4294967295
 80006d0:	e006      	b.n	80006e0 <__cmpsf2+0x4>
 80006d2:	bf00      	nop

080006d4 <__lesf2>:
 80006d4:	f04f 0c01 	mov.w	ip, #1
 80006d8:	e002      	b.n	80006e0 <__cmpsf2+0x4>
 80006da:	bf00      	nop

080006dc <__cmpsf2>:
 80006dc:	f04f 0c01 	mov.w	ip, #1
 80006e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006f0:	bf18      	it	ne
 80006f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f6:	d011      	beq.n	800071c <__cmpsf2+0x40>
 80006f8:	b001      	add	sp, #4
 80006fa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80006fe:	bf18      	it	ne
 8000700:	ea90 0f01 	teqne	r0, r1
 8000704:	bf58      	it	pl
 8000706:	ebb2 0003 	subspl.w	r0, r2, r3
 800070a:	bf88      	it	hi
 800070c:	17c8      	asrhi	r0, r1, #31
 800070e:	bf38      	it	cc
 8000710:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000714:	bf18      	it	ne
 8000716:	f040 0001 	orrne.w	r0, r0, #1
 800071a:	4770      	bx	lr
 800071c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000720:	d102      	bne.n	8000728 <__cmpsf2+0x4c>
 8000722:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000726:	d105      	bne.n	8000734 <__cmpsf2+0x58>
 8000728:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800072c:	d1e4      	bne.n	80006f8 <__cmpsf2+0x1c>
 800072e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000732:	d0e1      	beq.n	80006f8 <__cmpsf2+0x1c>
 8000734:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop

0800073c <__aeabi_cfrcmple>:
 800073c:	4684      	mov	ip, r0
 800073e:	4608      	mov	r0, r1
 8000740:	4661      	mov	r1, ip
 8000742:	e7ff      	b.n	8000744 <__aeabi_cfcmpeq>

08000744 <__aeabi_cfcmpeq>:
 8000744:	b50f      	push	{r0, r1, r2, r3, lr}
 8000746:	f7ff ffc9 	bl	80006dc <__cmpsf2>
 800074a:	2800      	cmp	r0, #0
 800074c:	bf48      	it	mi
 800074e:	f110 0f00 	cmnmi.w	r0, #0
 8000752:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000754 <__aeabi_fcmpeq>:
 8000754:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000758:	f7ff fff4 	bl	8000744 <__aeabi_cfcmpeq>
 800075c:	bf0c      	ite	eq
 800075e:	2001      	moveq	r0, #1
 8000760:	2000      	movne	r0, #0
 8000762:	f85d fb08 	ldr.w	pc, [sp], #8
 8000766:	bf00      	nop

08000768 <__aeabi_fcmplt>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff ffea 	bl	8000744 <__aeabi_cfcmpeq>
 8000770:	bf34      	ite	cc
 8000772:	2001      	movcc	r0, #1
 8000774:	2000      	movcs	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_fcmple>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffe0 	bl	8000744 <__aeabi_cfcmpeq>
 8000784:	bf94      	ite	ls
 8000786:	2001      	movls	r0, #1
 8000788:	2000      	movhi	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_fcmpge>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffd2 	bl	800073c <__aeabi_cfrcmple>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_fcmpgt>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffc8 	bl	800073c <__aeabi_cfrcmple>
 80007ac:	bf34      	ite	cc
 80007ae:	2001      	movcc	r0, #1
 80007b0:	2000      	movcs	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_f2uiz>:
 80007b8:	0042      	lsls	r2, r0, #1
 80007ba:	d20e      	bcs.n	80007da <__aeabi_f2uiz+0x22>
 80007bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007c0:	d30b      	bcc.n	80007da <__aeabi_f2uiz+0x22>
 80007c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007ca:	d409      	bmi.n	80007e0 <__aeabi_f2uiz+0x28>
 80007cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d4:	fa23 f002 	lsr.w	r0, r3, r2
 80007d8:	4770      	bx	lr
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	4770      	bx	lr
 80007e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007e4:	d101      	bne.n	80007ea <__aeabi_f2uiz+0x32>
 80007e6:	0242      	lsls	r2, r0, #9
 80007e8:	d102      	bne.n	80007f0 <__aeabi_f2uiz+0x38>
 80007ea:	f04f 30ff 	mov.w	r0, #4294967295
 80007ee:	4770      	bx	lr
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <new_smbus>:
 *      Author: Raymond Liu
 */

#include "abs_enc_reading.h"

SMBus *new_smbus(I2C_HandleTypeDef *hi2c) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
    SMBus *smbus = malloc(sizeof(SMBus));
 8000800:	2024      	movs	r0, #36	; 0x24
 8000802:	f006 fa09 	bl	8006c18 <malloc>
 8000806:	4603      	mov	r3, r0
 8000808:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	601a      	str	r2, [r3, #0]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3305      	adds	r3, #5
 8000814:	221e      	movs	r2, #30
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f006 fa05 	bl	8006c28 <memset>
    return smbus;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <new_abs_encoder>:
	free(smbus->buf);
	free(smbus);
}

// A1/A2 is 1 if pin connected to power, 0 if pin connected to ground
AbsEncoder* new_abs_encoder(bool _valid, SMBus* i2cBus, uint8_t A1, uint8_t A2){
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6039      	str	r1, [r7, #0]
 8000830:	4611      	mov	r1, r2
 8000832:	461a      	mov	r2, r3
 8000834:	4603      	mov	r3, r0
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	460b      	mov	r3, r1
 800083a:	71bb      	strb	r3, [r7, #6]
 800083c:	4613      	mov	r3, r2
 800083e:	717b      	strb	r3, [r7, #5]
	AbsEncoder* abs_encoder = (AbsEncoder*) malloc(sizeof(AbsEncoder));
 8000840:	2010      	movs	r0, #16
 8000842:	f006 f9e9 	bl	8006c18 <malloc>
 8000846:	4603      	mov	r3, r0
 8000848:	60fb      	str	r3, [r7, #12]
    if (A1 && A2) abs_encoder->address = device_slave_address_both_power;
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d006      	beq.n	800085e <new_abs_encoder+0x36>
 8000850:	797b      	ldrb	r3, [r7, #5]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d003      	beq.n	800085e <new_abs_encoder+0x36>
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2243      	movs	r2, #67	; 0x43
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	e010      	b.n	8000880 <new_abs_encoder+0x58>
    else if (A1) abs_encoder->address = device_slave_address_a1_power;
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d003      	beq.n	800086c <new_abs_encoder+0x44>
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2241      	movs	r2, #65	; 0x41
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	e009      	b.n	8000880 <new_abs_encoder+0x58>
    else if (A2) abs_encoder->address = device_slave_address_a2_power;
 800086c:	797b      	ldrb	r3, [r7, #5]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d003      	beq.n	800087a <new_abs_encoder+0x52>
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2242      	movs	r2, #66	; 0x42
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	e002      	b.n	8000880 <new_abs_encoder+0x58>
    else abs_encoder->address = device_slave_address_none_power;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2240      	movs	r2, #64	; 0x40
 800087e:	605a      	str	r2, [r3, #4]
    abs_encoder->valid = _valid;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	701a      	strb	r2, [r3, #0]
    abs_encoder->i2cBus = i2cBus;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	683a      	ldr	r2, [r7, #0]
 800088a:	60da      	str	r2, [r3, #12]
    abs_encoder->angle_rad = 0;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f04f 0200 	mov.w	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
    return abs_encoder;
 8000894:	68fb      	ldr	r3, [r7, #12]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <abs_encoder_init>:

void del_encoder(AbsEncoder* abs_encoder){
    free(abs_encoder);
}

AbsEncoder* abs_encoder_init(bool valid, I2C_HandleTypeDef* abs_encoder_handle, uint8_t A1, uint8_t A2){
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	460b      	mov	r3, r1
 80008b0:	71bb      	strb	r3, [r7, #6]
 80008b2:	4613      	mov	r3, r2
 80008b4:	717b      	strb	r3, [r7, #5]
	SMBus* i2cBus = new_smbus(abs_encoder_handle);
 80008b6:	6838      	ldr	r0, [r7, #0]
 80008b8:	f7ff ff9e 	bl	80007f8 <new_smbus>
 80008bc:	60f8      	str	r0, [r7, #12]
	return new_abs_encoder(valid, i2cBus, A1, A2);
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	79ba      	ldrb	r2, [r7, #6]
 80008c2:	79f8      	ldrb	r0, [r7, #7]
 80008c4:	68f9      	ldr	r1, [r7, #12]
 80008c6:	f7ff ffaf 	bl	8000828 <new_abs_encoder>
 80008ca:	4603      	mov	r3, r0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <new_closed_loop_control>:
#include "closed_loop_control.h"

ClosedLoopControl *new_closed_loop_control(float _kP, float _kI, float _kD, float _kF) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	603b      	str	r3, [r7, #0]
	ClosedLoopControl *control = (ClosedLoopControl *) malloc(sizeof(ClosedLoopControl));
 80008e2:	2020      	movs	r0, #32
 80008e4:	f006 f998 	bl	8006c18 <malloc>
 80008e8:	4603      	mov	r3, r0
 80008ea:	617b      	str	r3, [r7, #20]

    control->kP = _kP;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	601a      	str	r2, [r3, #0]
    control->kI = _kI;
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	68ba      	ldr	r2, [r7, #8]
 80008f6:	605a      	str	r2, [r3, #4]
    control->kD = _kD;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	609a      	str	r2, [r3, #8]
    control->kF = _kF;
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	60da      	str	r2, [r3, #12]

    control->flag = 1;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	2201      	movs	r2, #1
 8000908:	771a      	strb	r2, [r3, #28]
    control->last_error = 0.0;
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	f04f 0200 	mov.w	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
    control->cum_integ = 0.0;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f04f 0200 	mov.w	r2, #0
 8000918:	619a      	str	r2, [r3, #24]

    return control;
 800091a:	697b      	ldr	r3, [r7, #20]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <calculate_pid>:

float calculate_pid(ClosedLoopControl *control, float target, float current) {
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
    if (control->flag) {
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	7f1b      	ldrb	r3, [r3, #28]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00a      	beq.n	800094e <calculate_pid+0x2a>
        control->last_error = target - current;
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	68b8      	ldr	r0, [r7, #8]
 800093c:	f7ff fc6c 	bl	8000218 <__aeabi_fsub>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	615a      	str	r2, [r3, #20]
        control->flag = 0;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2200      	movs	r2, #0
 800094c:	771a      	strb	r2, [r3, #28]
    }

    float error = target - current;
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	68b8      	ldr	r0, [r7, #8]
 8000952:	f7ff fc61 	bl	8000218 <__aeabi_fsub>
 8000956:	4603      	mov	r3, r0
 8000958:	61fb      	str	r3, [r7, #28]

    control->cum_integ += error * DT;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	699c      	ldr	r4, [r3, #24]
 800095e:	492b      	ldr	r1, [pc, #172]	; (8000a0c <calculate_pid+0xe8>)
 8000960:	69f8      	ldr	r0, [r7, #28]
 8000962:	f7ff fd63 	bl	800042c <__aeabi_fmul>
 8000966:	4603      	mov	r3, r0
 8000968:	4619      	mov	r1, r3
 800096a:	4620      	mov	r0, r4
 800096c:	f7ff fc56 	bl	800021c <__addsf3>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	619a      	str	r2, [r3, #24]
    float diff = (error - control->last_error) / DT;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4619      	mov	r1, r3
 800097e:	69f8      	ldr	r0, [r7, #28]
 8000980:	f7ff fc4a 	bl	8000218 <__aeabi_fsub>
 8000984:	4603      	mov	r3, r0
 8000986:	4921      	ldr	r1, [pc, #132]	; (8000a0c <calculate_pid+0xe8>)
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe03 	bl	8000594 <__aeabi_fdiv>
 800098e:	4603      	mov	r3, r0
 8000990:	61bb      	str	r3, [r7, #24]

    float output = control->kP * error + control->kI * control->cum_integ + control->kD * diff + signum(error) * control->kF;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	69f9      	ldr	r1, [r7, #28]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fd47 	bl	800042c <__aeabi_fmul>
 800099e:	4603      	mov	r3, r0
 80009a0:	461c      	mov	r4, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4619      	mov	r1, r3
 80009ac:	4610      	mov	r0, r2
 80009ae:	f7ff fd3d 	bl	800042c <__aeabi_fmul>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4619      	mov	r1, r3
 80009b6:	4620      	mov	r0, r4
 80009b8:	f7ff fc30 	bl	800021c <__addsf3>
 80009bc:	4603      	mov	r3, r0
 80009be:	461c      	mov	r4, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	69b9      	ldr	r1, [r7, #24]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fd30 	bl	800042c <__aeabi_fmul>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4620      	mov	r0, r4
 80009d2:	f7ff fc23 	bl	800021c <__addsf3>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461c      	mov	r4, r3
 80009da:	69f8      	ldr	r0, [r7, #28]
 80009dc:	f000 f818 	bl	8000a10 <signum>
 80009e0:	4602      	mov	r2, r0
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4610      	mov	r0, r2
 80009ea:	f7ff fd1f 	bl	800042c <__aeabi_fmul>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4619      	mov	r1, r3
 80009f2:	4620      	mov	r0, r4
 80009f4:	f7ff fc12 	bl	800021c <__addsf3>
 80009f8:	4603      	mov	r3, r0
 80009fa:	617b      	str	r3, [r7, #20]

    control->last_error = error;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	615a      	str	r2, [r3, #20]
    return output;
 8000a02:	697b      	ldr	r3, [r7, #20]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3724      	adds	r7, #36	; 0x24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd90      	pop	{r4, r7, pc}
 8000a0c:	3a83126f 	.word	0x3a83126f

08000a10 <signum>:

float signum(float num) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    if (num < 0) {
 8000a18:	f04f 0100 	mov.w	r1, #0
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff fea3 	bl	8000768 <__aeabi_fcmplt>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <signum+0x1c>
        return -1.0;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <signum+0x40>)
 8000a2a:	e00c      	b.n	8000a46 <signum+0x36>
    }
    if (num > 0) {
 8000a2c:	f04f 0100 	mov.w	r1, #0
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff feb7 	bl	80007a4 <__aeabi_fcmpgt>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d002      	beq.n	8000a42 <signum+0x32>
        return 1.0;
 8000a3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000a40:	e001      	b.n	8000a46 <signum+0x36>
    }
    return 0.0;
 8000a42:	f04f 0300 	mov.w	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	bf800000 	.word	0xbf800000

08000a54 <new_hbridge>:

#include "hbridge.h"


HBridge *new_hbridge(bool _valid, TIM_HandleTypeDef *_timer, uint32_t _channel, uint32_t *_out_register, uint32_t *_ARR, Pin *fwd,
                     Pin *bwd) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	4603      	mov	r3, r0
 8000a62:	73fb      	strb	r3, [r7, #15]
    HBridge *hbr = (HBridge *) malloc(sizeof(HBridge));
 8000a64:	2020      	movs	r0, #32
 8000a66:	f006 f8d7 	bl	8006c18 <malloc>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	617b      	str	r3, [r7, #20]
    hbr->valid = _valid;
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	7bfa      	ldrb	r2, [r7, #15]
 8000a72:	701a      	strb	r2, [r3, #0]
    hbr->timer = _timer;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	605a      	str	r2, [r3, #4]
    hbr->channel = _channel;
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
    hbr->out_register = _out_register;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	60da      	str	r2, [r3, #12]
    hbr->ARR = _ARR;
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	6a3a      	ldr	r2, [r7, #32]
 8000a8a:	611a      	str	r2, [r3, #16]
    hbr->forward_pin = fwd;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	615a      	str	r2, [r3, #20]
    hbr->backward_pin = bwd;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a96:	619a      	str	r2, [r3, #24]
    hbr->target_duty_cycle = 0;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]

    return hbr;
 8000a9e:	697b      	ldr	r3, [r7, #20]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <init_hbridge>:

void init_hbridge(HBridge *hbridge, float duty_cycle, bool direction_is_forward) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	71fb      	strb	r3, [r7, #7]
    HAL_TIM_PWM_Start(hbridge->timer, hbridge->channel);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	f005 f959 	bl	8005d78 <HAL_TIM_PWM_Start>
    change_hbridge_pwm(hbridge, duty_cycle);
 8000ac6:	68b9      	ldr	r1, [r7, #8]
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f000 f809 	bl	8000ae0 <change_hbridge_pwm>
    change_hbridge_dir_val(hbridge, direction_is_forward);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f000 f83c 	bl	8000b50 <change_hbridge_dir_val>
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <change_hbridge_pwm>:

void change_hbridge_pwm(HBridge *hbridge, float duty_cycle) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]

    // validate input duty cycle
    if (duty_cycle < 0.0) {
 8000aea:	f04f 0100 	mov.w	r1, #0
 8000aee:	6838      	ldr	r0, [r7, #0]
 8000af0:	f7ff fe3a 	bl	8000768 <__aeabi_fcmplt>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <change_hbridge_pwm+0x22>
        duty_cycle = 0.0;
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	e00a      	b.n	8000b18 <change_hbridge_pwm+0x38>
    } else if (duty_cycle > 1.0) {
 8000b02:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000b06:	6838      	ldr	r0, [r7, #0]
 8000b08:	f7ff fe4c 	bl	80007a4 <__aeabi_fcmpgt>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <change_hbridge_pwm+0x38>
        duty_cycle = 1.0;
 8000b12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b16:	603b      	str	r3, [r7, #0]
    }

    hbridge->target_duty_cycle = duty_cycle * (float) (*hbridge->ARR+1);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fc2b 	bl	800037c <__aeabi_ui2f>
 8000b26:	4603      	mov	r3, r0
 8000b28:	6839      	ldr	r1, [r7, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fc7e 	bl	800042c <__aeabi_fmul>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fe40 	bl	80007b8 <__aeabi_f2uiz>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	61da      	str	r2, [r3, #28]

    *(hbridge->out_register) = hbridge->target_duty_cycle;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	69d2      	ldr	r2, [r2, #28]
 8000b46:	601a      	str	r2, [r3, #0]

}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <change_hbridge_dir_val>:

void change_hbridge_dir_val(HBridge *hbridge, bool val) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	70fb      	strb	r3, [r7, #3]
    if (val) {
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00c      	beq.n	8000b7c <change_hbridge_dir_val+0x2c>
		write_pin_value(hbridge->backward_pin, 0);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 fcbd 	bl	80024e8 <write_pin_value>
    	write_pin_value(hbridge->forward_pin, 1);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	2101      	movs	r1, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 fcb7 	bl	80024e8 <write_pin_value>
    } else {
    	write_pin_value(hbridge->forward_pin, 0);
    	write_pin_value(hbridge->backward_pin, 1);
    }

}
 8000b7a:	e00b      	b.n	8000b94 <change_hbridge_dir_val+0x44>
    	write_pin_value(hbridge->forward_pin, 0);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fcb0 	bl	80024e8 <write_pin_value>
    	write_pin_value(hbridge->backward_pin, 1);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fcaa 	bl	80024e8 <write_pin_value>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <new_i2c_bus>:
};

// timeout ~half a second, prime number to avoid hitting unit testing reset bug again
int WATCHDOG_TIMEOUT = 443;

I2CBus *new_i2c_bus(I2C_HandleTypeDef *_i2c_bus_handle) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    I2CBus *bus = (I2CBus *) malloc(sizeof(I2CBus));
 8000ba4:	2028      	movs	r0, #40	; 0x28
 8000ba6:	f006 f837 	bl	8006c18 <malloc>
 8000baa:	4603      	mov	r3, r0
 8000bac:	60bb      	str	r3, [r7, #8]
    bus->i2c_bus_handle = _i2c_bus_handle;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
    bus->operation = UNKNOWN;
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	22ff      	movs	r2, #255	; 0xff
 8000bb8:	701a      	strb	r2, [r3, #0]
    bus->tick = 0x00;
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	845a      	strh	r2, [r3, #34]	; 0x22
    bus->motor_id = 0xFF;
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	22ff      	movs	r2, #255	; 0xff
 8000bc4:	705a      	strb	r2, [r3, #1]
    for(size_t i = 0 ; i < 32 ; ++i) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	e008      	b.n	8000bde <new_i2c_bus+0x42>
        bus->buffer[i] = 0x00;
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
    for(size_t i = 0 ; i < 32 ; ++i) {
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2b1f      	cmp	r3, #31
 8000be2:	d9f3      	bls.n	8000bcc <new_i2c_bus+0x30>
    }
    return bus;
 8000be4:	68bb      	ldr	r3, [r7, #8]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <CH_num_receive>:

uint8_t CH_num_receive(I2CBus *i2c_bus) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    switch (i2c_bus->operation) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b14      	cmp	r3, #20
 8000bfe:	dc31      	bgt.n	8000c64 <CH_num_receive+0x74>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db4c      	blt.n	8000c9e <CH_num_receive+0xae>
 8000c04:	2b14      	cmp	r3, #20
 8000c06:	d84a      	bhi.n	8000c9e <CH_num_receive+0xae>
 8000c08:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <CH_num_receive+0x20>)
 8000c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0e:	bf00      	nop
 8000c10:	08000c6b 	.word	0x08000c6b
 8000c14:	08000c6b 	.word	0x08000c6b
 8000c18:	08000c6f 	.word	0x08000c6f
 8000c1c:	08000c6f 	.word	0x08000c6f
 8000c20:	08000c73 	.word	0x08000c73
 8000c24:	08000c73 	.word	0x08000c73
 8000c28:	08000c77 	.word	0x08000c77
 8000c2c:	08000c7b 	.word	0x08000c7b
 8000c30:	08000c7f 	.word	0x08000c7f
 8000c34:	08000c83 	.word	0x08000c83
 8000c38:	08000c87 	.word	0x08000c87
 8000c3c:	08000c87 	.word	0x08000c87
 8000c40:	08000c8b 	.word	0x08000c8b
 8000c44:	08000c8b 	.word	0x08000c8b
 8000c48:	08000c8b 	.word	0x08000c8b
 8000c4c:	08000c8b 	.word	0x08000c8b
 8000c50:	08000c8f 	.word	0x08000c8f
 8000c54:	08000c8f 	.word	0x08000c8f
 8000c58:	08000c93 	.word	0x08000c93
 8000c5c:	08000c93 	.word	0x08000c93
 8000c60:	08000c97 	.word	0x08000c97
 8000c64:	2bff      	cmp	r3, #255	; 0xff
 8000c66:	d018      	beq.n	8000c9a <CH_num_receive+0xaa>
 8000c68:	e019      	b.n	8000c9e <CH_num_receive+0xae>
        case OFF:
        case ON:
            return 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e018      	b.n	8000ca0 <CH_num_receive+0xb0>
        case OPEN:
        case OPEN_PLUS:
            return 4;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	e016      	b.n	8000ca0 <CH_num_receive+0xb0>
        case CLOSED:
        case CLOSED_PLUS:
            return 8;
 8000c72:	2308      	movs	r3, #8
 8000c74:	e014      	b.n	8000ca0 <CH_num_receive+0xb0>
        case CONFIG_PWM:
            return 2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	e012      	b.n	8000ca0 <CH_num_receive+0xb0>
        case CONFIG_K:
            return 12;
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	e010      	b.n	8000ca0 <CH_num_receive+0xb0>
        case QUAD_ENC:
            return 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e00e      	b.n	8000ca0 <CH_num_receive+0xb0>
        case ADJUST:
            return 4;
 8000c82:	2304      	movs	r3, #4
 8000c84:	e00c      	b.n	8000ca0 <CH_num_receive+0xb0>
        case ABS_ENC:
        case IS_CALIBRATED:
        	return 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <CH_num_receive+0xb0>
        case ENABLE_LIMIT_A:
        case ENABLE_LIMIT_B:
        case ACTIVE_LIMIT_A:
        case ACTIVE_LIMIT_B:
        	return 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e008      	b.n	8000ca0 <CH_num_receive+0xb0>
        case COUNTS_LIMIT_A:
        case COUNTS_LIMIT_B:
        	return 4;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	e006      	b.n	8000ca0 <CH_num_receive+0xb0>
        case LIMIT_A:
        case LIMIT_B:
        	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e004      	b.n	8000ca0 <CH_num_receive+0xb0>
        case LIMIT_A_IS_FWD:
        	return 1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e002      	b.n	8000ca0 <CH_num_receive+0xb0>
        case UNKNOWN:
            return 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <CH_num_receive+0xb0>
    }
    return 0;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <CH_num_send>:

uint8_t CH_num_send(I2CBus *i2c_bus) {
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
    switch (i2c_bus->operation) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b14      	cmp	r3, #20
 8000cba:	dc31      	bgt.n	8000d20 <CH_num_send+0x74>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db4c      	blt.n	8000d5a <CH_num_send+0xae>
 8000cc0:	2b14      	cmp	r3, #20
 8000cc2:	d84a      	bhi.n	8000d5a <CH_num_send+0xae>
 8000cc4:	a201      	add	r2, pc, #4	; (adr r2, 8000ccc <CH_num_send+0x20>)
 8000cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cca:	bf00      	nop
 8000ccc:	08000d27 	.word	0x08000d27
 8000cd0:	08000d27 	.word	0x08000d27
 8000cd4:	08000d27 	.word	0x08000d27
 8000cd8:	08000d2b 	.word	0x08000d2b
 8000cdc:	08000d2f 	.word	0x08000d2f
 8000ce0:	08000d33 	.word	0x08000d33
 8000ce4:	08000d37 	.word	0x08000d37
 8000ce8:	08000d37 	.word	0x08000d37
 8000cec:	08000d3b 	.word	0x08000d3b
 8000cf0:	08000d3f 	.word	0x08000d3f
 8000cf4:	08000d43 	.word	0x08000d43
 8000cf8:	08000d47 	.word	0x08000d47
 8000cfc:	08000d4b 	.word	0x08000d4b
 8000d00:	08000d4b 	.word	0x08000d4b
 8000d04:	08000d4b 	.word	0x08000d4b
 8000d08:	08000d4b 	.word	0x08000d4b
 8000d0c:	08000d4b 	.word	0x08000d4b
 8000d10:	08000d4b 	.word	0x08000d4b
 8000d14:	08000d4f 	.word	0x08000d4f
 8000d18:	08000d4f 	.word	0x08000d4f
 8000d1c:	08000d53 	.word	0x08000d53
 8000d20:	2bff      	cmp	r3, #255	; 0xff
 8000d22:	d018      	beq.n	8000d56 <CH_num_send+0xaa>
 8000d24:	e019      	b.n	8000d5a <CH_num_send+0xae>
        case OFF:
        case ON:
        case OPEN:
            return 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e018      	b.n	8000d5c <CH_num_send+0xb0>
        case OPEN_PLUS:
            return 4;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	e016      	b.n	8000d5c <CH_num_send+0xb0>
        case CLOSED:
            return 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e014      	b.n	8000d5c <CH_num_send+0xb0>
        case CLOSED_PLUS:
            return 4;
 8000d32:	2304      	movs	r3, #4
 8000d34:	e012      	b.n	8000d5c <CH_num_send+0xb0>
        case CONFIG_PWM:
        case CONFIG_K:
            return 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e010      	b.n	8000d5c <CH_num_send+0xb0>
        case QUAD_ENC:
            return 4;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	e00e      	b.n	8000d5c <CH_num_send+0xb0>
        case ADJUST:
            return 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e00c      	b.n	8000d5c <CH_num_send+0xb0>
        case ABS_ENC:
            return 4;
 8000d42:	2304      	movs	r3, #4
 8000d44:	e00a      	b.n	8000d5c <CH_num_send+0xb0>
        case IS_CALIBRATED:
        	return 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e008      	b.n	8000d5c <CH_num_send+0xb0>
        case ENABLE_LIMIT_B:
        case ACTIVE_LIMIT_A:
        case ACTIVE_LIMIT_B:
        case COUNTS_LIMIT_A:
        case COUNTS_LIMIT_B:
        	return 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e006      	b.n	8000d5c <CH_num_send+0xb0>
        case LIMIT_A:
        case LIMIT_B:
        	return 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e004      	b.n	8000d5c <CH_num_send+0xb0>
        case LIMIT_A_IS_FWD:
        	return 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e002      	b.n	8000d5c <CH_num_send+0xb0>
        case UNKNOWN:
            return 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <CH_num_send+0xb0>
    }
    return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <CH_process_received>:


void CH_process_received(I2CBus *i2c_bus, Motor *motor) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
    switch (i2c_bus->operation) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b14      	cmp	r3, #20
 8000d78:	dc32      	bgt.n	8000de0 <CH_process_received+0x78>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f2c0 80c4 	blt.w	8000f08 <CH_process_received+0x1a0>
 8000d80:	2b14      	cmp	r3, #20
 8000d82:	f200 80c1 	bhi.w	8000f08 <CH_process_received+0x1a0>
 8000d86:	a201      	add	r2, pc, #4	; (adr r2, 8000d8c <CH_process_received+0x24>)
 8000d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8c:	08000de5 	.word	0x08000de5
 8000d90:	08000f09 	.word	0x08000f09
 8000d94:	08000df1 	.word	0x08000df1
 8000d98:	08000df1 	.word	0x08000df1
 8000d9c:	08000e05 	.word	0x08000e05
 8000da0:	08000e05 	.word	0x08000e05
 8000da4:	08000e29 	.word	0x08000e29
 8000da8:	08000e53 	.word	0x08000e53
 8000dac:	08000f09 	.word	0x08000f09
 8000db0:	08000e83 	.word	0x08000e83
 8000db4:	08000f09 	.word	0x08000f09
 8000db8:	08000f09 	.word	0x08000f09
 8000dbc:	08000e9b 	.word	0x08000e9b
 8000dc0:	08000eab 	.word	0x08000eab
 8000dc4:	08000ebb 	.word	0x08000ebb
 8000dc8:	08000ecb 	.word	0x08000ecb
 8000dcc:	08000edb 	.word	0x08000edb
 8000dd0:	08000eeb 	.word	0x08000eeb
 8000dd4:	08000f09 	.word	0x08000f09
 8000dd8:	08000f09 	.word	0x08000f09
 8000ddc:	08000efb 	.word	0x08000efb
 8000de0:	2bff      	cmp	r3, #255	; 0xff
        case LIMIT_A_IS_FWD:
        	memcpy(&(motor->limit_a_is_forward), i2c_bus->buffer, 1);

        	return;
        case UNKNOWN:
            return;
 8000de2:	e091      	b.n	8000f08 <CH_process_received+0x1a0>
            set_motor_speed(motor, 0.0f);
 8000de4:	f04f 0100 	mov.w	r1, #0
 8000de8:	6838      	ldr	r0, [r7, #0]
 8000dea:	f001 fa0c 	bl	8002206 <set_motor_speed>
            return;
 8000dee:	e08b      	b.n	8000f08 <CH_process_received+0x1a0>
            motor->using_open_loop_control = 1;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2201      	movs	r2, #1
 8000df4:	765a      	strb	r2, [r3, #25]
            memcpy(&(motor->desired_speed), i2c_bus->buffer, 4);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	3324      	adds	r3, #36	; 0x24
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	3202      	adds	r2, #2
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	601a      	str	r2, [r3, #0]
            return;
 8000e02:	e081      	b.n	8000f08 <CH_process_received+0x1a0>
            motor->using_open_loop_control = 0;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2200      	movs	r2, #0
 8000e08:	765a      	strb	r2, [r3, #25]
            memcpy(&(motor->control->kF), i2c_bus->buffer, 4);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	330c      	adds	r3, #12
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	3202      	adds	r2, #2
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	601a      	str	r2, [r3, #0]
            memcpy(&(motor->desired_counts), i2c_bus->buffer + 4, 4);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	3328      	adds	r3, #40	; 0x28
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	3202      	adds	r2, #2
 8000e20:	3204      	adds	r2, #4
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	601a      	str	r2, [r3, #0]
            return;
 8000e26:	e06f      	b.n	8000f08 <CH_process_received+0x1a0>
            int max = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
            memcpy(&(max), i2c_bus->buffer, 2);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3302      	adds	r3, #2
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	81bb      	strh	r3, [r7, #12]
            motor->max_pwm = ((float) max) / 100.0f;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff faa3 	bl	8000384 <__aeabi_i2f>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4933      	ldr	r1, [pc, #204]	; (8000f10 <CH_process_received+0x1a8>)
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fba6 	bl	8000594 <__aeabi_fdiv>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	621a      	str	r2, [r3, #32]
            return;
 8000e50:	e05a      	b.n	8000f08 <CH_process_received+0x1a0>
            memcpy(&(motor->control->kP), i2c_bus->buffer, 4);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	461a      	mov	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6013      	str	r3, [r2, #0]
            memcpy(&(motor->control->kI), i2c_bus->buffer + 4, 4);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	3304      	adds	r3, #4
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	3202      	adds	r2, #2
 8000e6a:	3204      	adds	r2, #4
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	601a      	str	r2, [r3, #0]
            memcpy(&(motor->control->kD), i2c_bus->buffer + 8, 4);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	3308      	adds	r3, #8
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	3202      	adds	r2, #2
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	601a      	str	r2, [r3, #0]
            return;
 8000e80:	e042      	b.n	8000f08 <CH_process_received+0x1a0>
            memcpy(&(motor->encoder->counts), i2c_bus->buffer, 4);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	330c      	adds	r3, #12
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	3202      	adds	r2, #2
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	601a      	str	r2, [r3, #0]
	    motor->is_calibrated = 1;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            return;
 8000e98:	e036      	b.n	8000f08 <CH_process_received+0x1a0>
        	memcpy(&(motor->limit_switch_a->enabled), i2c_bus->buffer, 1);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	3202      	adds	r2, #2
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	701a      	strb	r2, [r3, #0]
        	return;
 8000ea8:	e02e      	b.n	8000f08 <CH_process_received+0x1a0>
        	memcpy(&(motor->limit_switch_b->enabled), i2c_bus->buffer, 1);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	3304      	adds	r3, #4
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	3202      	adds	r2, #2
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	701a      	strb	r2, [r3, #0]
        	return;
 8000eb8:	e026      	b.n	8000f08 <CH_process_received+0x1a0>
        	memcpy(&(motor->limit_switch_a->active_high), i2c_bus->buffer, 1);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	3307      	adds	r3, #7
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	3202      	adds	r2, #2
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	701a      	strb	r2, [r3, #0]
        	return;
 8000ec8:	e01e      	b.n	8000f08 <CH_process_received+0x1a0>
        	memcpy(&(motor->limit_switch_b->active_high), i2c_bus->buffer, 1);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	3307      	adds	r3, #7
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	3202      	adds	r2, #2
 8000ed4:	7812      	ldrb	r2, [r2, #0]
 8000ed6:	701a      	strb	r2, [r3, #0]
        	return;
 8000ed8:	e016      	b.n	8000f08 <CH_process_received+0x1a0>
        	memcpy(&(motor->limit_switch_a->associated_count), i2c_bus->buffer, 4);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	3308      	adds	r3, #8
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	3202      	adds	r2, #2
 8000ee4:	6812      	ldr	r2, [r2, #0]
 8000ee6:	601a      	str	r2, [r3, #0]
        	return;
 8000ee8:	e00e      	b.n	8000f08 <CH_process_received+0x1a0>
        	memcpy(&(motor->limit_switch_b->associated_count), i2c_bus->buffer, 4);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	3308      	adds	r3, #8
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	3202      	adds	r2, #2
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	601a      	str	r2, [r3, #0]
        	return;
 8000ef8:	e006      	b.n	8000f08 <CH_process_received+0x1a0>
        	memcpy(&(motor->limit_a_is_forward), i2c_bus->buffer, 1);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	332e      	adds	r3, #46	; 0x2e
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	3202      	adds	r2, #2
 8000f02:	7812      	ldrb	r2, [r2, #0]
 8000f04:	701a      	strb	r2, [r3, #0]
        	return;
 8000f06:	bf00      	nop
    }
}
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	42c80000 	.word	0x42c80000

08000f14 <CH_prepare_send>:

void CH_prepare_send(I2CBus *i2c_bus, Motor *motor) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
    switch (i2c_bus->operation) {
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b14      	cmp	r3, #20
 8000f24:	dc30      	bgt.n	8000f88 <CH_prepare_send+0x74>
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db67      	blt.n	8000ffa <CH_prepare_send+0xe6>
 8000f2a:	2b14      	cmp	r3, #20
 8000f2c:	d865      	bhi.n	8000ffa <CH_prepare_send+0xe6>
 8000f2e:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <CH_prepare_send+0x20>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000ffb 	.word	0x08000ffb
 8000f38:	08000ffb 	.word	0x08000ffb
 8000f3c:	08000ffb 	.word	0x08000ffb
 8000f40:	08000f8d 	.word	0x08000f8d
 8000f44:	08000ffb 	.word	0x08000ffb
 8000f48:	08000f9d 	.word	0x08000f9d
 8000f4c:	08000ffb 	.word	0x08000ffb
 8000f50:	08000ffb 	.word	0x08000ffb
 8000f54:	08000fad 	.word	0x08000fad
 8000f58:	08000ffb 	.word	0x08000ffb
 8000f5c:	08000fbd 	.word	0x08000fbd
 8000f60:	08000fcd 	.word	0x08000fcd
 8000f64:	08000ffb 	.word	0x08000ffb
 8000f68:	08000ffb 	.word	0x08000ffb
 8000f6c:	08000ffb 	.word	0x08000ffb
 8000f70:	08000ffb 	.word	0x08000ffb
 8000f74:	08000ffb 	.word	0x08000ffb
 8000f78:	08000ffb 	.word	0x08000ffb
 8000f7c:	08000fdb 	.word	0x08000fdb
 8000f80:	08000feb 	.word	0x08000feb
 8000f84:	08000ffb 	.word	0x08000ffb
 8000f88:	2bff      	cmp	r3, #255	; 0xff
        case LIMIT_B:
        	memcpy(i2c_bus->buffer, &(motor->limit_switch_b->is_activated), 1);
        	return;
        case LIMIT_A_IS_FWD:
        case UNKNOWN:
            return;
 8000f8a:	e036      	b.n	8000ffa <CH_prepare_send+0xe6>
            memcpy(i2c_bus->buffer, &(motor->encoder->counts), 4);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3302      	adds	r3, #2
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	68d2      	ldr	r2, [r2, #12]
 8000f94:	320c      	adds	r2, #12
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	601a      	str	r2, [r3, #0]
            return;
 8000f9a:	e02e      	b.n	8000ffa <CH_prepare_send+0xe6>
            memcpy(i2c_bus->buffer, &(motor->encoder->counts), 4);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	68d2      	ldr	r2, [r2, #12]
 8000fa4:	320c      	adds	r2, #12
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	601a      	str	r2, [r3, #0]
            return;
 8000faa:	e026      	b.n	8000ffa <CH_prepare_send+0xe6>
            memcpy(i2c_bus->buffer, &(motor->encoder->counts), 4);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3302      	adds	r3, #2
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	68d2      	ldr	r2, [r2, #12]
 8000fb4:	320c      	adds	r2, #12
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	601a      	str	r2, [r3, #0]
            return;
 8000fba:	e01e      	b.n	8000ffa <CH_prepare_send+0xe6>
        	memcpy(i2c_bus->buffer, &(motor->abs_encoder->angle_rad), 4);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	6912      	ldr	r2, [r2, #16]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	601a      	str	r2, [r3, #0]
        	return;
 8000fca:	e016      	b.n	8000ffa <CH_prepare_send+0xe6>
            memcpy(i2c_bus->buffer, &(motor->is_calibrated), 1);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3302      	adds	r3, #2
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	322d      	adds	r2, #45	; 0x2d
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	701a      	strb	r2, [r3, #0]
            return;
 8000fd8:	e00f      	b.n	8000ffa <CH_prepare_send+0xe6>
        	memcpy(i2c_bus->buffer, &(motor->limit_switch_a->is_activated), 1);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3302      	adds	r3, #2
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	6852      	ldr	r2, [r2, #4]
 8000fe2:	3205      	adds	r2, #5
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	701a      	strb	r2, [r3, #0]
			return;
 8000fe8:	e007      	b.n	8000ffa <CH_prepare_send+0xe6>
        	memcpy(i2c_bus->buffer, &(motor->limit_switch_b->is_activated), 1);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3302      	adds	r3, #2
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	6892      	ldr	r2, [r2, #8]
 8000ff2:	3205      	adds	r2, #5
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	701a      	strb	r2, [r3, #0]
        	return;
 8000ff8:	bf00      	nop
    }
}
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <CH_reset>:

void CH_reset(I2CBus *i2c_bus, Motor *motors[], uint8_t num_motors) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	4613      	mov	r3, r2
 8001010:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_DeInit(i2c_bus->i2c_bus_handle);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	4618      	mov	r0, r3
 8001018:	f002 fbe8 	bl	80037ec <HAL_I2C_DeInit>
    i2c_bus->operation = UNKNOWN;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	22ff      	movs	r2, #255	; 0xff
 8001020:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < num_motors; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e011      	b.n	800104c <CH_reset+0x48>
        motors[i]->desired_speed = 0; // open loop setpoint
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
        motors[i]->using_open_loop_control = 1;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	4413      	add	r3, r2
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2201      	movs	r2, #1
 8001044:	765a      	strb	r2, [r3, #25]
    for (int i = 0; i < num_motors; ++i) {
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbe9      	blt.n	8001028 <CH_reset+0x24>
    }
    HAL_I2C_Init(i2c_bus->i2c_bus_handle);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fa83 	bl	8003564 <HAL_I2C_Init>
    HAL_I2C_EnableListen_IT(i2c_bus->i2c_bus_handle);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fcd5 	bl	8003a12 <HAL_I2C_EnableListen_IT>
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <CH_tick>:

void CH_tick(I2CBus *i2c_bus, Motor *motors[], uint8_t num_motors) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	71fb      	strb	r3, [r7, #7]
    i2c_bus->tick += 1;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001082:	3301      	adds	r3, #1
 8001084:	b29a      	uxth	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	845a      	strh	r2, [r3, #34]	; 0x22
    if (i2c_bus->tick >= WATCHDOG_TIMEOUT) {
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800108e:	461a      	mov	r2, r3
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <CH_tick+0x44>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	db08      	blt.n	80010aa <CH_tick+0x3a>
        i2c_bus->tick = 0;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	845a      	strh	r2, [r3, #34]	; 0x22
        CH_reset(i2c_bus, motors, num_motors);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	461a      	mov	r2, r3
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff ffad 	bl	8001004 <CH_reset>
    }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000000 	.word	0x20000000

080010b8 <new_limit_switch>:
#include "limit_switch.h"


LimitSwitch *new_limit_switch(uint8_t _valid, Pin *_pin) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
	LimitSwitch *limit_switch = (LimitSwitch *) malloc(sizeof(LimitSwitch));
 80010c4:	200c      	movs	r0, #12
 80010c6:	f005 fda7 	bl	8006c18 <malloc>
 80010ca:	4603      	mov	r3, r0
 80010cc:	60fb      	str	r3, [r7, #12]
	limit_switch->valid = _valid;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	719a      	strb	r2, [r3, #6]
	limit_switch->pin = _pin;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	601a      	str	r2, [r3, #0]
	limit_switch->enabled = 0;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	711a      	strb	r2, [r3, #4]
	limit_switch->is_activated = 0;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	715a      	strb	r2, [r3, #5]
	limit_switch->associated_count = 0;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
	limit_switch->active_high = 0;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	71da      	strb	r2, [r3, #7]
	return limit_switch;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <update_limit_switch>:

void update_limit_switch(LimitSwitch *limit_switch) {
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	// This suggests active low
	if (limit_switch->valid && limit_switch->enabled) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	799b      	ldrb	r3, [r3, #6]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d014      	beq.n	8001136 <update_limit_switch+0x3a>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	791b      	ldrb	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d010      	beq.n	8001136 <update_limit_switch+0x3a>
		limit_switch->is_activated = limit_switch->active_high == read_pin_value(limit_switch->pin);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	79dc      	ldrb	r4, [r3, #7]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f001 f9cd 	bl	80024bc <read_pin_value>
 8001122:	4603      	mov	r3, r0
 8001124:	429c      	cmp	r4, r3
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	715a      	strb	r2, [r3, #5]
 8001134:	e003      	b.n	800113e <update_limit_switch+0x42>
	}
	else {
		limit_switch->is_activated = 0;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	715a      	strb	r2, [r3, #5]
	}
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}
	...

08001148 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a2e      	ldr	r2, [pc, #184]	; (800120c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d155      	bne.n	8001204 <HAL_TIM_PeriodElapsedCallback+0xbc>

		CH_tick(i2c_bus, motors, NUM_MOTORS);
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2206      	movs	r2, #6
 800115e:	492d      	ldr	r1, [pc, #180]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff85 	bl	8001070 <CH_tick>

		for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	e048      	b.n	80011fe <HAL_TIM_PeriodElapsedCallback+0xb6>
			if (quad_encoders[i]->valid) {
 800116c:	4a2a      	ldr	r2, [pc, #168]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	7a1b      	ldrb	r3, [r3, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_TIM_PeriodElapsedCallback+0x40>
				update_quad_encoder(quad_encoders[i]);
 800117a:	4a27      	ldr	r2, [pc, #156]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	4618      	mov	r0, r3
 8001184:	f001 f9f1 	bl	800256a <update_quad_encoder>
			}
			if (forward_limit_switches[i]->valid) {
 8001188:	4a24      	ldr	r2, [pc, #144]	; (800121c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001190:	799b      	ldrb	r3, [r3, #6]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d006      	beq.n	80011a4 <HAL_TIM_PeriodElapsedCallback+0x5c>
				update_limit_switch(forward_limit_switches[i]);
 8001196:	4a21      	ldr	r2, [pc, #132]	; (800121c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ffac 	bl	80010fc <update_limit_switch>
			}
			if (backward_limit_switches[i]->valid) {
 80011a4:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	799b      	ldrb	r3, [r3, #6]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d006      	beq.n	80011c0 <HAL_TIM_PeriodElapsedCallback+0x78>
				update_limit_switch(backward_limit_switches[i]);
 80011b2:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff9e 	bl	80010fc <update_limit_switch>
			}
			if (motors[i]->valid) {
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	7e1b      	ldrb	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d014      	beq.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0xb0>
				update_motor_target(motors[i]);
 80011ce:	4a11      	ldr	r2, [pc, #68]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 ffff 	bl	80021da <update_motor_target>
				update_motor_speed(motors[i]);
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 f821 	bl	800222c <update_motor_speed>
				update_motor_limit_switches(motors[i]);
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 f910 	bl	8002418 <update_motor_limit_switches>
		for (size_t i = 0; i < NUM_MOTORS; ++i) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d9b3      	bls.n	800116c <HAL_TIM_PeriodElapsedCallback+0x24>
			}
		}
	}
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002a0 	.word	0x200002a0
 8001210:	200003f0 	.word	0x200003f0
 8001214:	200003d8 	.word	0x200003d8
 8001218:	20000390 	.word	0x20000390
 800121c:	20000360 	.word	0x20000360
 8001220:	20000378 	.word	0x20000378

08001224 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
 8001230:	4613      	mov	r3, r2
 8001232:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d10e      	bne.n	8001258 <HAL_I2C_AddrCallback+0x34>
		HAL_I2C_Slave_Seq_Receive_IT(i2c_bus->i2c_bus_handle, i2c_bus->buffer, 1, I2C_LAST_FRAME);
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_I2C_AddrCallback+0x94>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_I2C_AddrCallback+0x94>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	1c99      	adds	r1, r3, #2
 8001246:	2320      	movs	r3, #32
 8001248:	2201      	movs	r2, #1
 800124a:	f002 fb70 	bl	800392e <HAL_I2C_Slave_Seq_Receive_IT>
		i2c_bus->operation = UNKNOWN;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_I2C_AddrCallback+0x94>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	22ff      	movs	r2, #255	; 0xff
 8001254:	701a      	strb	r2, [r3, #0]
 8001256:	e026      	b.n	80012a6 <HAL_I2C_AddrCallback+0x82>
	} else {
		if (i2c_bus->motor_id < NUM_MOTORS) {
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_I2C_AddrCallback+0x94>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	2b05      	cmp	r3, #5
 8001260:	d80c      	bhi.n	800127c <HAL_I2C_AddrCallback+0x58>
			CH_prepare_send(i2c_bus, motors[i2c_bus->motor_id]);
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_I2C_AddrCallback+0x94>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_I2C_AddrCallback+0x94>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	4619      	mov	r1, r3
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_I2C_AddrCallback+0x98>)
 8001270:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001274:	4619      	mov	r1, r3
 8001276:	4610      	mov	r0, r2
 8001278:	f7ff fe4c 	bl	8000f14 <CH_prepare_send>
		}
		uint8_t bytes_to_send = CH_num_send(i2c_bus);
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_I2C_AddrCallback+0x94>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fd13 	bl	8000cac <CH_num_send>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
		if (bytes_to_send != 0) {
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00a      	beq.n	80012a6 <HAL_I2C_AddrCallback+0x82>
			HAL_I2C_Slave_Seq_Transmit_IT(i2c_bus->i2c_bus_handle, i2c_bus->buffer, bytes_to_send, I2C_LAST_FRAME);
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_I2C_AddrCallback+0x94>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_I2C_AddrCallback+0x94>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	1c99      	adds	r1, r3, #2
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	2320      	movs	r3, #32
 80012a2:	f002 fad2 	bl	800384a <HAL_I2C_Slave_Seq_Transmit_IT>
		}
	}

	i2c_bus->tick = 0;
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <HAL_I2C_AddrCallback+0x94>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2200      	movs	r2, #0
 80012ac:	845a      	strh	r2, [r3, #34]	; 0x22
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200003f0 	.word	0x200003f0
 80012bc:	200003d8 	.word	0x200003d8

080012c0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	if (i2c_bus->operation == UNKNOWN) {
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2bff      	cmp	r3, #255	; 0xff
 80012d0:	d139      	bne.n	8001346 <HAL_I2C_SlaveRxCpltCallback+0x86>
		i2c_bus->motor_id = (i2c_bus->buffer[0] >> 5) & 0x07;
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	789a      	ldrb	r2, [r3, #2]
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0952      	lsrs	r2, r2, #5
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	705a      	strb	r2, [r3, #1]
		i2c_bus->operation = i2c_bus->buffer[0] & 0x1F;
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	789a      	ldrb	r2, [r3, #2]
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f002 021f 	and.w	r2, r2, #31
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
		uint8_t bytes_to_recieve = CH_num_receive(i2c_bus);
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fc79 	bl	8000bf0 <CH_num_receive>
 80012fe:	4603      	mov	r3, r0
 8001300:	73fb      	strb	r3, [r7, #15]
		if (bytes_to_recieve != 0) {
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00b      	beq.n	8001320 <HAL_I2C_SlaveRxCpltCallback+0x60>
			HAL_I2C_Slave_Seq_Receive_IT(i2c_bus->i2c_bus_handle, i2c_bus->buffer, bytes_to_recieve, I2C_LAST_FRAME);
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	1c99      	adds	r1, r3, #2
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	b29a      	uxth	r2, r3
 8001318:	2320      	movs	r3, #32
 800131a:	f002 fb08 	bl	800392e <HAL_I2C_Slave_Seq_Receive_IT>
	} else {
		if (i2c_bus->motor_id < NUM_MOTORS) {
			CH_process_received(i2c_bus, motors[i2c_bus->motor_id]);
		}
	}
}
 800131e:	e024      	b.n	800136a <HAL_I2C_SlaveRxCpltCallback+0xaa>
			if (i2c_bus->motor_id < NUM_MOTORS) {
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	785b      	ldrb	r3, [r3, #1]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d81f      	bhi.n	800136a <HAL_I2C_SlaveRxCpltCallback+0xaa>
				CH_process_received(i2c_bus, motors[i2c_bus->motor_id]);
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	785b      	ldrb	r3, [r3, #1]
 8001334:	4619      	mov	r1, r3
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_I2C_SlaveRxCpltCallback+0xb8>)
 8001338:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f7ff fd12 	bl	8000d68 <CH_process_received>
}
 8001344:	e011      	b.n	800136a <HAL_I2C_SlaveRxCpltCallback+0xaa>
		if (i2c_bus->motor_id < NUM_MOTORS) {
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	785b      	ldrb	r3, [r3, #1]
 800134c:	2b05      	cmp	r3, #5
 800134e:	d80c      	bhi.n	800136a <HAL_I2C_SlaveRxCpltCallback+0xaa>
			CH_process_received(i2c_bus, motors[i2c_bus->motor_id]);
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	785b      	ldrb	r3, [r3, #1]
 800135a:	4619      	mov	r1, r3
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_I2C_SlaveRxCpltCallback+0xb8>)
 800135e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001362:	4619      	mov	r1, r3
 8001364:	4610      	mov	r0, r2
 8001366:	f7ff fcff 	bl	8000d68 <CH_process_received>
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200003f0 	.word	0x200003f0
 8001378:	200003d8 	.word	0x200003d8

0800137c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	CH_reset(i2c_bus, motors, NUM_MOTORS);
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_I2C_ErrorCallback+0x20>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2206      	movs	r2, #6
 800138a:	4905      	ldr	r1, [pc, #20]	; (80013a0 <HAL_I2C_ErrorCallback+0x24>)
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe39 	bl	8001004 <CH_reset>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200003f0 	.word	0x200003f0
 80013a0:	200003d8 	.word	0x200003d8

080013a4 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(i2c_bus->i2c_bus_handle);
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <HAL_I2C_ListenCpltCallback+0x1c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 fb2d 	bl	8003a12 <HAL_I2C_EnableListen_IT>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200003f0 	.word	0x200003f0

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	b08d      	sub	sp, #52	; 0x34
 80013c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ca:	f001 fc40 	bl	8002c4e <HAL_Init>

  /* USER CODE BEGIN Init */

	hbridge_forward_pins[0] = new_pin(MOTOR_DIR_0_GPIO_Port, MOTOR_DIR_0_Pin);
 80013ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d2:	489b      	ldr	r0, [pc, #620]	; (8001640 <main+0x27c>)
 80013d4:	f001 f85c 	bl	8002490 <new_pin>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a9a      	ldr	r2, [pc, #616]	; (8001644 <main+0x280>)
 80013dc:	6013      	str	r3, [r2, #0]
	hbridge_forward_pins[1] = new_pin(MOTOR_DIR_1_GPIO_Port, MOTOR_DIR_1_Pin);
 80013de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e2:	4897      	ldr	r0, [pc, #604]	; (8001640 <main+0x27c>)
 80013e4:	f001 f854 	bl	8002490 <new_pin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a96      	ldr	r2, [pc, #600]	; (8001644 <main+0x280>)
 80013ec:	6053      	str	r3, [r2, #4]
	hbridge_forward_pins[2] = new_pin(MOTOR_DIR_2_GPIO_Port, MOTOR_DIR_2_Pin);
 80013ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f2:	4895      	ldr	r0, [pc, #596]	; (8001648 <main+0x284>)
 80013f4:	f001 f84c 	bl	8002490 <new_pin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a92      	ldr	r2, [pc, #584]	; (8001644 <main+0x280>)
 80013fc:	6093      	str	r3, [r2, #8]
	hbridge_forward_pins[3] = new_pin(MOTOR_DIR_3_GPIO_Port, MOTOR_DIR_3_Pin);
 80013fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001402:	4891      	ldr	r0, [pc, #580]	; (8001648 <main+0x284>)
 8001404:	f001 f844 	bl	8002490 <new_pin>
 8001408:	4603      	mov	r3, r0
 800140a:	4a8e      	ldr	r2, [pc, #568]	; (8001644 <main+0x280>)
 800140c:	60d3      	str	r3, [r2, #12]
	hbridge_forward_pins[4] = new_pin(MOTOR_DIR_4_GPIO_Port, MOTOR_DIR_4_Pin);
 800140e:	2110      	movs	r1, #16
 8001410:	488e      	ldr	r0, [pc, #568]	; (800164c <main+0x288>)
 8001412:	f001 f83d 	bl	8002490 <new_pin>
 8001416:	4603      	mov	r3, r0
 8001418:	4a8a      	ldr	r2, [pc, #552]	; (8001644 <main+0x280>)
 800141a:	6113      	str	r3, [r2, #16]
	hbridge_forward_pins[5] = new_pin(MOTOR_DIR_5_GPIO_Port, MOTOR_DIR_5_Pin);
 800141c:	2110      	movs	r1, #16
 800141e:	488c      	ldr	r0, [pc, #560]	; (8001650 <main+0x28c>)
 8001420:	f001 f836 	bl	8002490 <new_pin>
 8001424:	4603      	mov	r3, r0
 8001426:	4a87      	ldr	r2, [pc, #540]	; (8001644 <main+0x280>)
 8001428:	6153      	str	r3, [r2, #20]

	hbridge_backward_pins[0] = new_pin(MOTOR_NDIR_0_GPIO_Port, MOTOR_NDIR_0_Pin);
 800142a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142e:	4884      	ldr	r0, [pc, #528]	; (8001640 <main+0x27c>)
 8001430:	f001 f82e 	bl	8002490 <new_pin>
 8001434:	4603      	mov	r3, r0
 8001436:	4a87      	ldr	r2, [pc, #540]	; (8001654 <main+0x290>)
 8001438:	6013      	str	r3, [r2, #0]
	hbridge_backward_pins[1] = new_pin(MOTOR_NDIR_1_GPIO_Port, MOTOR_NDIR_1_Pin);
 800143a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143e:	4880      	ldr	r0, [pc, #512]	; (8001640 <main+0x27c>)
 8001440:	f001 f826 	bl	8002490 <new_pin>
 8001444:	4603      	mov	r3, r0
 8001446:	4a83      	ldr	r2, [pc, #524]	; (8001654 <main+0x290>)
 8001448:	6053      	str	r3, [r2, #4]
	hbridge_backward_pins[2] = new_pin(MOTOR_NDIR_2_GPIO_Port, MOTOR_NDIR_2_Pin);
 800144a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144e:	487e      	ldr	r0, [pc, #504]	; (8001648 <main+0x284>)
 8001450:	f001 f81e 	bl	8002490 <new_pin>
 8001454:	4603      	mov	r3, r0
 8001456:	4a7f      	ldr	r2, [pc, #508]	; (8001654 <main+0x290>)
 8001458:	6093      	str	r3, [r2, #8]
	hbridge_backward_pins[3] = new_pin(MOTOR_NDIR_3_GPIO_Port, MOTOR_NDIR_3_Pin);
 800145a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800145e:	487a      	ldr	r0, [pc, #488]	; (8001648 <main+0x284>)
 8001460:	f001 f816 	bl	8002490 <new_pin>
 8001464:	4603      	mov	r3, r0
 8001466:	4a7b      	ldr	r2, [pc, #492]	; (8001654 <main+0x290>)
 8001468:	60d3      	str	r3, [r2, #12]
	hbridge_backward_pins[4] = new_pin(MOTOR_NDIR_4_GPIO_Port, MOTOR_NDIR_4_Pin);
 800146a:	2120      	movs	r1, #32
 800146c:	4877      	ldr	r0, [pc, #476]	; (800164c <main+0x288>)
 800146e:	f001 f80f 	bl	8002490 <new_pin>
 8001472:	4603      	mov	r3, r0
 8001474:	4a77      	ldr	r2, [pc, #476]	; (8001654 <main+0x290>)
 8001476:	6113      	str	r3, [r2, #16]
	hbridge_backward_pins[5] = new_pin(MOTOR_NDIR_5_GPIO_Port, MOTOR_NDIR_5_Pin);
 8001478:	2120      	movs	r1, #32
 800147a:	4875      	ldr	r0, [pc, #468]	; (8001650 <main+0x28c>)
 800147c:	f001 f808 	bl	8002490 <new_pin>
 8001480:	4603      	mov	r3, r0
 8001482:	4a74      	ldr	r2, [pc, #464]	; (8001654 <main+0x290>)
 8001484:	6153      	str	r3, [r2, #20]

	hbridges[0] = new_hbridge(1, &htim4, TIM_CHANNEL_1, &(TIM4->CCR1), &(TIM4->ARR), hbridge_forward_pins[0], hbridge_backward_pins[0]);
 8001486:	4b6f      	ldr	r3, [pc, #444]	; (8001644 <main+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a72      	ldr	r2, [pc, #456]	; (8001654 <main+0x290>)
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	9202      	str	r2, [sp, #8]
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	4b71      	ldr	r3, [pc, #452]	; (8001658 <main+0x294>)
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	4b71      	ldr	r3, [pc, #452]	; (800165c <main+0x298>)
 8001498:	2200      	movs	r2, #0
 800149a:	4971      	ldr	r1, [pc, #452]	; (8001660 <main+0x29c>)
 800149c:	2001      	movs	r0, #1
 800149e:	f7ff fad9 	bl	8000a54 <new_hbridge>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a6f      	ldr	r2, [pc, #444]	; (8001664 <main+0x2a0>)
 80014a6:	6013      	str	r3, [r2, #0]
	hbridges[1] = new_hbridge(1, &htim4, TIM_CHANNEL_2, &(TIM4->CCR2), &(TIM4->ARR), hbridge_forward_pins[1], hbridge_backward_pins[1]);
 80014a8:	4b66      	ldr	r3, [pc, #408]	; (8001644 <main+0x280>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a69      	ldr	r2, [pc, #420]	; (8001654 <main+0x290>)
 80014ae:	6852      	ldr	r2, [r2, #4]
 80014b0:	9202      	str	r2, [sp, #8]
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	4b68      	ldr	r3, [pc, #416]	; (8001658 <main+0x294>)
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	4b6b      	ldr	r3, [pc, #428]	; (8001668 <main+0x2a4>)
 80014ba:	2204      	movs	r2, #4
 80014bc:	4968      	ldr	r1, [pc, #416]	; (8001660 <main+0x29c>)
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff fac8 	bl	8000a54 <new_hbridge>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a67      	ldr	r2, [pc, #412]	; (8001664 <main+0x2a0>)
 80014c8:	6053      	str	r3, [r2, #4]
	hbridges[2] = new_hbridge(1, &htim4, TIM_CHANNEL_3, &(TIM4->CCR3), &(TIM4->ARR), hbridge_forward_pins[2], hbridge_backward_pins[2]);
 80014ca:	4b5e      	ldr	r3, [pc, #376]	; (8001644 <main+0x280>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	4a61      	ldr	r2, [pc, #388]	; (8001654 <main+0x290>)
 80014d0:	6892      	ldr	r2, [r2, #8]
 80014d2:	9202      	str	r2, [sp, #8]
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	4b60      	ldr	r3, [pc, #384]	; (8001658 <main+0x294>)
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	4b64      	ldr	r3, [pc, #400]	; (800166c <main+0x2a8>)
 80014dc:	2208      	movs	r2, #8
 80014de:	4960      	ldr	r1, [pc, #384]	; (8001660 <main+0x29c>)
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff fab7 	bl	8000a54 <new_hbridge>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a5e      	ldr	r2, [pc, #376]	; (8001664 <main+0x2a0>)
 80014ea:	6093      	str	r3, [r2, #8]
	hbridges[3] = new_hbridge(1, &htim4, TIM_CHANNEL_4, &(TIM4->CCR4), &(TIM4->ARR), hbridge_forward_pins[3], hbridge_backward_pins[3]);
 80014ec:	4b55      	ldr	r3, [pc, #340]	; (8001644 <main+0x280>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a58      	ldr	r2, [pc, #352]	; (8001654 <main+0x290>)
 80014f2:	68d2      	ldr	r2, [r2, #12]
 80014f4:	9202      	str	r2, [sp, #8]
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	4b57      	ldr	r3, [pc, #348]	; (8001658 <main+0x294>)
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <main+0x2ac>)
 80014fe:	220c      	movs	r2, #12
 8001500:	4957      	ldr	r1, [pc, #348]	; (8001660 <main+0x29c>)
 8001502:	2001      	movs	r0, #1
 8001504:	f7ff faa6 	bl	8000a54 <new_hbridge>
 8001508:	4603      	mov	r3, r0
 800150a:	4a56      	ldr	r2, [pc, #344]	; (8001664 <main+0x2a0>)
 800150c:	60d3      	str	r3, [r2, #12]
	hbridges[4] = new_hbridge(1, &htim15, TIM_CHANNEL_1, &(TIM15->CCR1), &(TIM15->ARR), hbridge_forward_pins[4], hbridge_backward_pins[4]);
 800150e:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <main+0x280>)
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	4a50      	ldr	r2, [pc, #320]	; (8001654 <main+0x290>)
 8001514:	6912      	ldr	r2, [r2, #16]
 8001516:	9202      	str	r2, [sp, #8]
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	4b56      	ldr	r3, [pc, #344]	; (8001674 <main+0x2b0>)
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	4b56      	ldr	r3, [pc, #344]	; (8001678 <main+0x2b4>)
 8001520:	2200      	movs	r2, #0
 8001522:	4956      	ldr	r1, [pc, #344]	; (800167c <main+0x2b8>)
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff fa95 	bl	8000a54 <new_hbridge>
 800152a:	4603      	mov	r3, r0
 800152c:	4a4d      	ldr	r2, [pc, #308]	; (8001664 <main+0x2a0>)
 800152e:	6113      	str	r3, [r2, #16]
	hbridges[5] = new_hbridge(1, &htim15, TIM_CHANNEL_2, &(TIM15->CCR2), &(TIM15->ARR), hbridge_forward_pins[5], hbridge_backward_pins[5]);
 8001530:	4b44      	ldr	r3, [pc, #272]	; (8001644 <main+0x280>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	4a47      	ldr	r2, [pc, #284]	; (8001654 <main+0x290>)
 8001536:	6952      	ldr	r2, [r2, #20]
 8001538:	9202      	str	r2, [sp, #8]
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <main+0x2b0>)
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4b4f      	ldr	r3, [pc, #316]	; (8001680 <main+0x2bc>)
 8001542:	2204      	movs	r2, #4
 8001544:	494d      	ldr	r1, [pc, #308]	; (800167c <main+0x2b8>)
 8001546:	2001      	movs	r0, #1
 8001548:	f7ff fa84 	bl	8000a54 <new_hbridge>
 800154c:	4603      	mov	r3, r0
 800154e:	4a45      	ldr	r2, [pc, #276]	; (8001664 <main+0x2a0>)
 8001550:	6153      	str	r3, [r2, #20]

	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e013      	b.n	8001580 <main+0x1bc>
		if (hbridges[i]->valid) {
 8001558:	4a42      	ldr	r2, [pc, #264]	; (8001664 <main+0x2a0>)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d009      	beq.n	800157a <main+0x1b6>
			init_hbridge(hbridges[i], 0.0f, true);
 8001566:	4a3f      	ldr	r2, [pc, #252]	; (8001664 <main+0x2a0>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	2201      	movs	r2, #1
 8001570:	f04f 0100 	mov.w	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fa97 	bl	8000aa8 <init_hbridge>
	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b05      	cmp	r3, #5
 8001584:	d9e8      	bls.n	8001558 <main+0x194>
		}
	}

	forward_limit_switch_pins[0] = new_pin(LIMIT_A_0_GPIO_Port, LIMIT_A_0_Pin);
 8001586:	2140      	movs	r1, #64	; 0x40
 8001588:	4831      	ldr	r0, [pc, #196]	; (8001650 <main+0x28c>)
 800158a:	f000 ff81 	bl	8002490 <new_pin>
 800158e:	4603      	mov	r3, r0
 8001590:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <main+0x2c0>)
 8001592:	6013      	str	r3, [r2, #0]
	forward_limit_switch_pins[1] = new_pin(LIMIT_A_1_GPIO_Port, LIMIT_A_1_Pin);
 8001594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001598:	482d      	ldr	r0, [pc, #180]	; (8001650 <main+0x28c>)
 800159a:	f000 ff79 	bl	8002490 <new_pin>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a38      	ldr	r2, [pc, #224]	; (8001684 <main+0x2c0>)
 80015a2:	6053      	str	r3, [r2, #4]
	forward_limit_switch_pins[2] = new_pin(LIMIT_A_2_GPIO_Port, LIMIT_A_2_Pin);
 80015a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a8:	4828      	ldr	r0, [pc, #160]	; (800164c <main+0x288>)
 80015aa:	f000 ff71 	bl	8002490 <new_pin>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a34      	ldr	r2, [pc, #208]	; (8001684 <main+0x2c0>)
 80015b2:	6093      	str	r3, [r2, #8]
	forward_limit_switch_pins[3] = new_pin(LIMIT_A_3_GPIO_Port, LIMIT_A_3_Pin);
 80015b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b8:	4824      	ldr	r0, [pc, #144]	; (800164c <main+0x288>)
 80015ba:	f000 ff69 	bl	8002490 <new_pin>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a30      	ldr	r2, [pc, #192]	; (8001684 <main+0x2c0>)
 80015c2:	60d3      	str	r3, [r2, #12]
	forward_limit_switch_pins[4] = new_pin(LIMIT_A_4_GPIO_Port, LIMIT_A_4_Pin);
 80015c4:	2101      	movs	r1, #1
 80015c6:	481e      	ldr	r0, [pc, #120]	; (8001640 <main+0x27c>)
 80015c8:	f000 ff62 	bl	8002490 <new_pin>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a2d      	ldr	r2, [pc, #180]	; (8001684 <main+0x2c0>)
 80015d0:	6113      	str	r3, [r2, #16]
	forward_limit_switch_pins[5] = new_pin(LIMIT_A_5_GPIO_Port, LIMIT_A_5_Pin);
 80015d2:	2104      	movs	r1, #4
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <main+0x27c>)
 80015d6:	f000 ff5b 	bl	8002490 <new_pin>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a29      	ldr	r2, [pc, #164]	; (8001684 <main+0x2c0>)
 80015de:	6153      	str	r3, [r2, #20]

	backward_limit_switch_pins[0] = new_pin(LIMIT_B_0_GPIO_Port, LIMIT_B_0_Pin);
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	481b      	ldr	r0, [pc, #108]	; (8001650 <main+0x28c>)
 80015e4:	f000 ff54 	bl	8002490 <new_pin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a27      	ldr	r2, [pc, #156]	; (8001688 <main+0x2c4>)
 80015ec:	6013      	str	r3, [r2, #0]
	backward_limit_switch_pins[1] = new_pin(LIMIT_B_1_GPIO_Port, LIMIT_B_1_Pin);
 80015ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f2:	4817      	ldr	r0, [pc, #92]	; (8001650 <main+0x28c>)
 80015f4:	f000 ff4c 	bl	8002490 <new_pin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a23      	ldr	r2, [pc, #140]	; (8001688 <main+0x2c4>)
 80015fc:	6053      	str	r3, [r2, #4]
	backward_limit_switch_pins[2] = new_pin(LIMIT_B_2_GPIO_Port, LIMIT_B_2_Pin);
 80015fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001602:	4812      	ldr	r0, [pc, #72]	; (800164c <main+0x288>)
 8001604:	f000 ff44 	bl	8002490 <new_pin>
 8001608:	4603      	mov	r3, r0
 800160a:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <main+0x2c4>)
 800160c:	6093      	str	r3, [r2, #8]
	backward_limit_switch_pins[3] = new_pin(LIMIT_B_3_GPIO_Port, LIMIT_B_3_Pin);
 800160e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <main+0x288>)
 8001614:	f000 ff3c 	bl	8002490 <new_pin>
 8001618:	4603      	mov	r3, r0
 800161a:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <main+0x2c4>)
 800161c:	60d3      	str	r3, [r2, #12]
	backward_limit_switch_pins[4] = new_pin(LIMIT_B_4_GPIO_Port, LIMIT_B_4_Pin);
 800161e:	2102      	movs	r1, #2
 8001620:	4807      	ldr	r0, [pc, #28]	; (8001640 <main+0x27c>)
 8001622:	f000 ff35 	bl	8002490 <new_pin>
 8001626:	4603      	mov	r3, r0
 8001628:	4a17      	ldr	r2, [pc, #92]	; (8001688 <main+0x2c4>)
 800162a:	6113      	str	r3, [r2, #16]
	backward_limit_switch_pins[5] = new_pin(LIMIT_B_5_GPIO_Port, LIMIT_B_5_Pin);
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	4817      	ldr	r0, [pc, #92]	; (800168c <main+0x2c8>)
 8001630:	f000 ff2e 	bl	8002490 <new_pin>
 8001634:	4603      	mov	r3, r0
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <main+0x2c4>)
 8001638:	6153      	str	r3, [r2, #20]

	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	e056      	b.n	80016ee <main+0x32a>
 8001640:	40010c00 	.word	0x40010c00
 8001644:	200002e8 	.word	0x200002e8
 8001648:	40011400 	.word	0x40011400
 800164c:	40010800 	.word	0x40010800
 8001650:	40011000 	.word	0x40011000
 8001654:	20000300 	.word	0x20000300
 8001658:	4000082c 	.word	0x4000082c
 800165c:	40000834 	.word	0x40000834
 8001660:	20000210 	.word	0x20000210
 8001664:	20000318 	.word	0x20000318
 8001668:	40000838 	.word	0x40000838
 800166c:	4000083c 	.word	0x4000083c
 8001670:	40000840 	.word	0x40000840
 8001674:	4001402c 	.word	0x4001402c
 8001678:	40014034 	.word	0x40014034
 800167c:	20000258 	.word	0x20000258
 8001680:	40014038 	.word	0x40014038
 8001684:	20000330 	.word	0x20000330
 8001688:	20000348 	.word	0x20000348
 800168c:	40011800 	.word	0x40011800
		forward_limit_switches[i] = new_limit_switch(
				forward_limit_switch_pins[i] != NULL,
 8001690:	4aa1      	ldr	r2, [pc, #644]	; (8001918 <main+0x554>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		forward_limit_switches[i] = new_limit_switch(
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf14      	ite	ne
 800169c:	2301      	movne	r3, #1
 800169e:	2300      	moveq	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	4a9c      	ldr	r2, [pc, #624]	; (8001918 <main+0x554>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff fd03 	bl	80010b8 <new_limit_switch>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4999      	ldr	r1, [pc, #612]	; (800191c <main+0x558>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				forward_limit_switch_pins[i]);
		backward_limit_switches[i] = new_limit_switch(
				backward_limit_switch_pins[i] != NULL,
 80016bc:	4a98      	ldr	r2, [pc, #608]	; (8001920 <main+0x55c>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		backward_limit_switches[i] = new_limit_switch(
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf14      	ite	ne
 80016c8:	2301      	movne	r3, #1
 80016ca:	2300      	moveq	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	4a93      	ldr	r2, [pc, #588]	; (8001920 <main+0x55c>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff fced 	bl	80010b8 <new_limit_switch>
 80016de:	4602      	mov	r2, r0
 80016e0:	4990      	ldr	r1, [pc, #576]	; (8001924 <main+0x560>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	3301      	adds	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d9cd      	bls.n	8001690 <main+0x2cc>
				backward_limit_switch_pins[i]);
	}

	quad_encoders[0] = new_quad_encoder(1, &htim1, TIM1);
 80016f4:	4a8c      	ldr	r2, [pc, #560]	; (8001928 <main+0x564>)
 80016f6:	498d      	ldr	r1, [pc, #564]	; (800192c <main+0x568>)
 80016f8:	2001      	movs	r0, #1
 80016fa:	f000 ff07 	bl	800250c <new_quad_encoder>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a8b      	ldr	r2, [pc, #556]	; (8001930 <main+0x56c>)
 8001702:	6013      	str	r3, [r2, #0]
	quad_encoders[1] = new_quad_encoder(1, &htim2, TIM2);
 8001704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001708:	498a      	ldr	r1, [pc, #552]	; (8001934 <main+0x570>)
 800170a:	2001      	movs	r0, #1
 800170c:	f000 fefe 	bl	800250c <new_quad_encoder>
 8001710:	4603      	mov	r3, r0
 8001712:	4a87      	ldr	r2, [pc, #540]	; (8001930 <main+0x56c>)
 8001714:	6053      	str	r3, [r2, #4]
	quad_encoders[2] = new_quad_encoder(1, &htim3, TIM3);
 8001716:	4a88      	ldr	r2, [pc, #544]	; (8001938 <main+0x574>)
 8001718:	4988      	ldr	r1, [pc, #544]	; (800193c <main+0x578>)
 800171a:	2001      	movs	r0, #1
 800171c:	f000 fef6 	bl	800250c <new_quad_encoder>
 8001720:	4603      	mov	r3, r0
 8001722:	4a83      	ldr	r2, [pc, #524]	; (8001930 <main+0x56c>)
 8001724:	6093      	str	r3, [r2, #8]

	// THE OTHER QUAD ENCODERS DO NOT EXIST. Only first value matters.
	quad_encoders[3] = new_quad_encoder(0, &htim1, TIM1);
 8001726:	4a80      	ldr	r2, [pc, #512]	; (8001928 <main+0x564>)
 8001728:	4980      	ldr	r1, [pc, #512]	; (800192c <main+0x568>)
 800172a:	2000      	movs	r0, #0
 800172c:	f000 feee 	bl	800250c <new_quad_encoder>
 8001730:	4603      	mov	r3, r0
 8001732:	4a7f      	ldr	r2, [pc, #508]	; (8001930 <main+0x56c>)
 8001734:	60d3      	str	r3, [r2, #12]
	quad_encoders[4] = new_quad_encoder(0, &htim1, TIM1);
 8001736:	4a7c      	ldr	r2, [pc, #496]	; (8001928 <main+0x564>)
 8001738:	497c      	ldr	r1, [pc, #496]	; (800192c <main+0x568>)
 800173a:	2000      	movs	r0, #0
 800173c:	f000 fee6 	bl	800250c <new_quad_encoder>
 8001740:	4603      	mov	r3, r0
 8001742:	4a7b      	ldr	r2, [pc, #492]	; (8001930 <main+0x56c>)
 8001744:	6113      	str	r3, [r2, #16]
	quad_encoders[5] = new_quad_encoder(0, &htim1, TIM1);
 8001746:	4a78      	ldr	r2, [pc, #480]	; (8001928 <main+0x564>)
 8001748:	4978      	ldr	r1, [pc, #480]	; (800192c <main+0x568>)
 800174a:	2000      	movs	r0, #0
 800174c:	f000 fede 	bl	800250c <new_quad_encoder>
 8001750:	4603      	mov	r3, r0
 8001752:	4a77      	ldr	r2, [pc, #476]	; (8001930 <main+0x56c>)
 8001754:	6153      	str	r3, [r2, #20]

	abs_encoders[0] = abs_encoder_init(1, &hi2c2, FALSE, FALSE);
 8001756:	2300      	movs	r3, #0
 8001758:	2200      	movs	r2, #0
 800175a:	4979      	ldr	r1, [pc, #484]	; (8001940 <main+0x57c>)
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff f89e 	bl	800089e <abs_encoder_init>
 8001762:	4603      	mov	r3, r0
 8001764:	4a77      	ldr	r2, [pc, #476]	; (8001944 <main+0x580>)
 8001766:	6013      	str	r3, [r2, #0]
	abs_encoders[1] = abs_encoder_init(1, &hi2c2, TRUE, TRUE);
 8001768:	2301      	movs	r3, #1
 800176a:	2201      	movs	r2, #1
 800176c:	4974      	ldr	r1, [pc, #464]	; (8001940 <main+0x57c>)
 800176e:	2001      	movs	r0, #1
 8001770:	f7ff f895 	bl	800089e <abs_encoder_init>
 8001774:	4603      	mov	r3, r0
 8001776:	4a73      	ldr	r2, [pc, #460]	; (8001944 <main+0x580>)
 8001778:	6053      	str	r3, [r2, #4]

	// THE OTHER ABS ENCODERS DO NOT EXIST. Only first value matters.
	abs_encoders[2] = abs_encoder_init(0, &hi2c2, FALSE, FALSE);
 800177a:	2300      	movs	r3, #0
 800177c:	2200      	movs	r2, #0
 800177e:	4970      	ldr	r1, [pc, #448]	; (8001940 <main+0x57c>)
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff f88c 	bl	800089e <abs_encoder_init>
 8001786:	4603      	mov	r3, r0
 8001788:	4a6e      	ldr	r2, [pc, #440]	; (8001944 <main+0x580>)
 800178a:	6093      	str	r3, [r2, #8]
	abs_encoders[3] = abs_encoder_init(0, &hi2c2, FALSE, FALSE);
 800178c:	2300      	movs	r3, #0
 800178e:	2200      	movs	r2, #0
 8001790:	496b      	ldr	r1, [pc, #428]	; (8001940 <main+0x57c>)
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff f883 	bl	800089e <abs_encoder_init>
 8001798:	4603      	mov	r3, r0
 800179a:	4a6a      	ldr	r2, [pc, #424]	; (8001944 <main+0x580>)
 800179c:	60d3      	str	r3, [r2, #12]
	abs_encoders[4] = abs_encoder_init(0, &hi2c2, FALSE, FALSE);
 800179e:	2300      	movs	r3, #0
 80017a0:	2200      	movs	r2, #0
 80017a2:	4967      	ldr	r1, [pc, #412]	; (8001940 <main+0x57c>)
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff f87a 	bl	800089e <abs_encoder_init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a65      	ldr	r2, [pc, #404]	; (8001944 <main+0x580>)
 80017ae:	6113      	str	r3, [r2, #16]
	abs_encoders[5] = abs_encoder_init(0, &hi2c2, FALSE, FALSE);
 80017b0:	2300      	movs	r3, #0
 80017b2:	2200      	movs	r2, #0
 80017b4:	4962      	ldr	r1, [pc, #392]	; (8001940 <main+0x57c>)
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff f871 	bl	800089e <abs_encoder_init>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a61      	ldr	r2, [pc, #388]	; (8001944 <main+0x580>)
 80017c0:	6153      	str	r3, [r2, #20]

	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e010      	b.n	80017ea <main+0x426>
		if (quad_encoders[i]->valid) {
 80017c8:	4a59      	ldr	r2, [pc, #356]	; (8001930 <main+0x56c>)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	7a1b      	ldrb	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <main+0x420>
			init_quad_encoder(quad_encoders[i]);
 80017d6:	4a56      	ldr	r2, [pc, #344]	; (8001930 <main+0x56c>)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 feb7 	bl	8002552 <init_quad_encoder>
	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3301      	adds	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d9eb      	bls.n	80017c8 <main+0x404>
		}
	}

	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e010      	b.n	8001818 <main+0x454>
		controls[i] = new_closed_loop_control(0.01f, 0.0f, 0.0f, 0.0f);
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0100 	mov.w	r1, #0
 8001802:	4851      	ldr	r0, [pc, #324]	; (8001948 <main+0x584>)
 8001804:	f7ff f866 	bl	80008d4 <new_closed_loop_control>
 8001808:	4602      	mov	r2, r0
 800180a:	4950      	ldr	r1, [pc, #320]	; (800194c <main+0x588>)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3301      	adds	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b05      	cmp	r3, #5
 800181c:	d9eb      	bls.n	80017f6 <main+0x432>
	}

	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	e031      	b.n	8001888 <main+0x4c4>
		motors[i] = new_motor(1, hbridges[i], forward_limit_switches[i], backward_limit_switches[i], quad_encoders[i], abs_encoders[i], controls[i]);
 8001824:	4a4a      	ldr	r2, [pc, #296]	; (8001950 <main+0x58c>)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800182c:	4a3b      	ldr	r2, [pc, #236]	; (800191c <main+0x558>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001834:	4a3b      	ldr	r2, [pc, #236]	; (8001924 <main+0x560>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800183c:	4a3c      	ldr	r2, [pc, #240]	; (8001930 <main+0x56c>)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	493f      	ldr	r1, [pc, #252]	; (8001944 <main+0x580>)
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800184c:	4e3f      	ldr	r6, [pc, #252]	; (800194c <main+0x588>)
 800184e:	68f9      	ldr	r1, [r7, #12]
 8001850:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8001854:	9102      	str	r1, [sp, #8]
 8001856:	9201      	str	r2, [sp, #4]
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	462b      	mov	r3, r5
 800185c:	4622      	mov	r2, r4
 800185e:	4601      	mov	r1, r0
 8001860:	2001      	movs	r0, #1
 8001862:	f000 fc54 	bl	800210e <new_motor>
 8001866:	4602      	mov	r2, r0
 8001868:	493a      	ldr	r1, [pc, #232]	; (8001954 <main+0x590>)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		init_motor(motors[i], 0.0f);
 8001870:	4a38      	ldr	r2, [pc, #224]	; (8001954 <main+0x590>)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	f04f 0100 	mov.w	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fc8b 	bl	8002198 <init_motor>
	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3301      	adds	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d9ca      	bls.n	8001824 <main+0x460>
	}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188e:	f000 f88f 	bl	80019b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001892:	f000 fb53 	bl	8001f3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001896:	f000 f8c7 	bl	8001a28 <MX_I2C1_Init>
  MX_TIM1_Init();
 800189a:	f000 f921 	bl	8001ae0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800189e:	f000 f977 	bl	8001b90 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018a2:	f000 f9c9 	bl	8001c38 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018a6:	f000 fa1b 	bl	8001ce0 <MX_TIM4_Init>
  MX_TIM15_Init();
 80018aa:	f000 fa93 	bl	8001dd4 <MX_TIM15_Init>
  MX_TIM16_Init();
 80018ae:	f000 fb1f 	bl	8001ef0 <MX_TIM16_Init>
  MX_I2C2_Init();
 80018b2:	f000 f8e7 	bl	8001a84 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	HAL_I2C_MspInit(&hi2c1);
 80018b6:	4828      	ldr	r0, [pc, #160]	; (8001958 <main+0x594>)
 80018b8:	f000 fec6 	bl	8002648 <HAL_I2C_MspInit>

	i2c_bus = new_i2c_bus(&hi2c1); // NOTE: hi2c1 orig
 80018bc:	4826      	ldr	r0, [pc, #152]	; (8001958 <main+0x594>)
 80018be:	f7ff f96d 	bl	8000b9c <new_i2c_bus>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a25      	ldr	r2, [pc, #148]	; (800195c <main+0x598>)
 80018c6:	6013      	str	r3, [r2, #0]
	absolute_enc_i2c_bus = new_i2c_bus(&hi2c1);
 80018c8:	4823      	ldr	r0, [pc, #140]	; (8001958 <main+0x594>)
 80018ca:	f7ff f967 	bl	8000b9c <new_i2c_bus>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a23      	ldr	r2, [pc, #140]	; (8001960 <main+0x59c>)
 80018d2:	6013      	str	r3, [r2, #0]

	// TODO - Make this better so you wouldn't have to update on both sides (make a variable/class)

	// Start up the H-Bridge PWMs
	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	e017      	b.n	800190a <main+0x546>
		if (hbridges[i]->valid) {
 80018da:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <main+0x58c>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <main+0x540>
			HAL_TIM_PWM_Start(hbridges[i]->timer, hbridges[i]->channel);
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <main+0x58c>)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4917      	ldr	r1, [pc, #92]	; (8001950 <main+0x58c>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f004 fa3a 	bl	8005d78 <HAL_TIM_PWM_Start>
	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	3301      	adds	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b05      	cmp	r3, #5
 800190e:	d9e4      	bls.n	80018da <main+0x516>
		}
	}

	// Start up the quadrature encoders
	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	e039      	b.n	800198a <main+0x5c6>
 8001916:	bf00      	nop
 8001918:	20000330 	.word	0x20000330
 800191c:	20000360 	.word	0x20000360
 8001920:	20000348 	.word	0x20000348
 8001924:	20000378 	.word	0x20000378
 8001928:	40012c00 	.word	0x40012c00
 800192c:	20000138 	.word	0x20000138
 8001930:	20000390 	.word	0x20000390
 8001934:	20000180 	.word	0x20000180
 8001938:	40000400 	.word	0x40000400
 800193c:	200001c8 	.word	0x200001c8
 8001940:	200000e4 	.word	0x200000e4
 8001944:	200003a8 	.word	0x200003a8
 8001948:	3c23d70a 	.word	0x3c23d70a
 800194c:	200003c0 	.word	0x200003c0
 8001950:	20000318 	.word	0x20000318
 8001954:	200003d8 	.word	0x200003d8
 8001958:	20000090 	.word	0x20000090
 800195c:	200003f0 	.word	0x200003f0
 8001960:	200003f4 	.word	0x200003f4
		if (quad_encoders[i]->valid) {
 8001964:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <main+0x5e0>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	7a1b      	ldrb	r3, [r3, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <main+0x5c0>
			HAL_TIM_Encoder_Start(quad_encoders[i]->htim, TIM_CHANNEL_ALL);
 8001972:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <main+0x5e0>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	213c      	movs	r1, #60	; 0x3c
 800197e:	4618      	mov	r0, r3
 8001980:	f004 fb5e 	bl	8006040 <HAL_TIM_Encoder_Start>
	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3301      	adds	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b05      	cmp	r3, #5
 800198e:	d9e9      	bls.n	8001964 <main+0x5a0>
		}
	}

	// Start the logic loop timer
	HAL_TIM_Base_Start_IT(&htim16);
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <main+0x5e4>)
 8001992:	f004 f947 	bl	8005c24 <HAL_TIM_Base_Start_IT>

	// Start the I2C interrupts
	HAL_I2C_EnableListen_IT(i2c_bus->i2c_bus_handle);
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <main+0x5e8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	4618      	mov	r0, r3
 800199e:	f002 f838 	bl	8003a12 <HAL_I2C_EnableListen_IT>
		while (1) {
			refresh_motor_absolute_encoder_value(motors[0]);
		}
	}

	while (1) {
 80019a2:	e7fe      	b.n	80019a2 <main+0x5de>
 80019a4:	20000390 	.word	0x20000390
 80019a8:	200002a0 	.word	0x200002a0
 80019ac:	200003f0 	.word	0x200003f0

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b090      	sub	sp, #64	; 0x40
 80019b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b6:	f107 0318 	add.w	r3, r7, #24
 80019ba:	2228      	movs	r2, #40	; 0x28
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f005 f932 	bl	8006c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d6:	2301      	movs	r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019da:	2310      	movs	r3, #16
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e2:	f107 0318 	add.w	r3, r7, #24
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fcf4 	bl	80053d4 <HAL_RCC_OscConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80019f2:	f000 fb87 	bl	8002104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f6:	230f      	movs	r3, #15
 80019f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 ff62 	bl	80058d8 <HAL_RCC_ClockConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a1a:	f000 fb73 	bl	8002104 <Error_Handler>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3740      	adds	r7, #64	; 0x40
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <MX_I2C1_Init+0x54>)
 8001a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_I2C1_Init+0x58>)
 8001a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 4;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a40:	2204      	movs	r2, #4
 8001a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a66:	f001 fd7d 	bl	8003564 <HAL_I2C_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a70:	f000 fb48 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000090 	.word	0x20000090
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	00061a80 	.word	0x00061a80

08001a84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <MX_I2C2_Init+0x50>)
 8001a8a:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <MX_I2C2_Init+0x54>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_I2C2_Init+0x50>)
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <MX_I2C2_Init+0x58>)
 8001a92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_I2C2_Init+0x50>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_I2C2_Init+0x50>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_I2C2_Init+0x50>)
 8001aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aa6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <MX_I2C2_Init+0x50>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_I2C2_Init+0x50>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <MX_I2C2_Init+0x50>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_I2C2_Init+0x50>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <MX_I2C2_Init+0x50>)
 8001ac2:	f001 fd4f 	bl	8003564 <HAL_I2C_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001acc:	f000 fb1a 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200000e4 	.word	0x200000e4
 8001ad8:	40005800 	.word	0x40005800
 8001adc:	000186a0 	.word	0x000186a0

08001ae0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	2224      	movs	r2, #36	; 0x24
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f005 f89a 	bl	8006c28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <MX_TIM1_Init+0xa8>)
 8001afe:	4a23      	ldr	r2, [pc, #140]	; (8001b8c <MX_TIM1_Init+0xac>)
 8001b00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <MX_TIM1_Init+0xa8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <MX_TIM1_Init+0xa8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <MX_TIM1_Init+0xa8>)
 8001b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <MX_TIM1_Init+0xa8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_TIM1_Init+0xa8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <MX_TIM1_Init+0xa8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b30:	2301      	movs	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = QUADRATURE_FILTER;
 8001b38:	2308      	movs	r3, #8
 8001b3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b40:	2301      	movs	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = QUADRATURE_FILTER;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	4619      	mov	r1, r3
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <MX_TIM1_Init+0xa8>)
 8001b54:	f004 f9d2 	bl	8005efc <HAL_TIM_Encoder_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b5e:	f000 fad1 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	; (8001b88 <MX_TIM1_Init+0xa8>)
 8001b70:	f004 ff5e 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001b7a:	f000 fac3 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	3730      	adds	r7, #48	; 0x30
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000138 	.word	0x20000138
 8001b8c:	40012c00 	.word	0x40012c00

08001b90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	; 0x30
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f005 f842 	bl	8006c28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <MX_TIM2_Init+0xa4>)
 8001bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <MX_TIM2_Init+0xa4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <MX_TIM2_Init+0xa4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <MX_TIM2_Init+0xa4>)
 8001bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_TIM2_Init+0xa4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_TIM2_Init+0xa4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = QUADRATURE_FILTER;
 8001be4:	2308      	movs	r3, #8
 8001be6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bec:	2301      	movs	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = QUADRATURE_FILTER;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480d      	ldr	r0, [pc, #52]	; (8001c34 <MX_TIM2_Init+0xa4>)
 8001c00:	f004 f97c 	bl	8005efc <HAL_TIM_Encoder_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c0a:	f000 fa7b 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4806      	ldr	r0, [pc, #24]	; (8001c34 <MX_TIM2_Init+0xa4>)
 8001c1c:	f004 ff08 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c26:	f000 fa6d 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	3730      	adds	r7, #48	; 0x30
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000180 	.word	0x20000180

08001c38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	2224      	movs	r2, #36	; 0x24
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 ffee 	bl	8006c28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <MX_TIM3_Init+0xa0>)
 8001c56:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <MX_TIM3_Init+0xa4>)
 8001c58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <MX_TIM3_Init+0xa0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_TIM3_Init+0xa0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <MX_TIM3_Init+0xa0>)
 8001c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <MX_TIM3_Init+0xa0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <MX_TIM3_Init+0xa0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c82:	2301      	movs	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = QUADRATURE_FILTER;
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c92:	2301      	movs	r3, #1
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = QUADRATURE_FILTER;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <MX_TIM3_Init+0xa0>)
 8001ca6:	f004 f929 	bl	8005efc <HAL_TIM_Encoder_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001cb0:	f000 fa28 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_TIM3_Init+0xa0>)
 8001cc2:	f004 feb5 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ccc:	f000 fa1a 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3730      	adds	r7, #48	; 0x30
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200001c8 	.word	0x200001c8
 8001cdc:	40000400 	.word	0x40000400

08001ce0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce6:	f107 0320 	add.w	r3, r7, #32
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	615a      	str	r2, [r3, #20]
 8001d00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d02:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001d04:	4a32      	ldr	r2, [pc, #200]	; (8001dd0 <MX_TIM4_Init+0xf0>)
 8001d06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8001d08:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001d14:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001d16:	2264      	movs	r2, #100	; 0x64
 8001d18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d26:	4829      	ldr	r0, [pc, #164]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001d28:	f003 ffd6 	bl	8005cd8 <HAL_TIM_PWM_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001d32:	f000 f9e7 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d3e:	f107 0320 	add.w	r3, r7, #32
 8001d42:	4619      	mov	r1, r3
 8001d44:	4821      	ldr	r0, [pc, #132]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001d46:	f004 fe73 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001d50:	f000 f9d8 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d54:	2360      	movs	r3, #96	; 0x60
 8001d56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2200      	movs	r2, #0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4818      	ldr	r0, [pc, #96]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001d6c:	f004 fafe 	bl	800636c <HAL_TIM_PWM_ConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d76:	f000 f9c5 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4812      	ldr	r0, [pc, #72]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001d82:	f004 faf3 	bl	800636c <HAL_TIM_PWM_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d8c:	f000 f9ba 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2208      	movs	r2, #8
 8001d94:	4619      	mov	r1, r3
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001d98:	f004 fae8 	bl	800636c <HAL_TIM_PWM_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001da2:	f000 f9af 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	220c      	movs	r2, #12
 8001daa:	4619      	mov	r1, r3
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001dae:	f004 fadd 	bl	800636c <HAL_TIM_PWM_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001db8:	f000 f9a4 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dbc:	4803      	ldr	r0, [pc, #12]	; (8001dcc <MX_TIM4_Init+0xec>)
 8001dbe:	f000 fe21 	bl	8002a04 <HAL_TIM_MspPostInit>

}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	; 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000210 	.word	0x20000210
 8001dd0:	40000800 	.word	0x40000800

08001dd4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b092      	sub	sp, #72	; 0x48
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
 8001df4:	615a      	str	r2, [r3, #20]
 8001df6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 ff12 	bl	8006c28 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001e06:	4a39      	ldr	r2, [pc, #228]	; (8001eec <MX_TIM15_Init+0x118>)
 8001e08:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3;
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100;
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001e18:	2264      	movs	r2, #100	; 0x64
 8001e1a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e22:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001e2e:	482e      	ldr	r0, [pc, #184]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001e30:	f003 ff52 	bl	8005cd8 <HAL_TIM_PWM_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM15_Init+0x6a>
  {
    Error_Handler();
 8001e3a:	f000 f963 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001e4e:	f004 fdef 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM15_Init+0x88>
  {
    Error_Handler();
 8001e58:	f000 f954 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5c:	2360      	movs	r3, #96	; 0x60
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4819      	ldr	r0, [pc, #100]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001e82:	f004 fa73 	bl	800636c <HAL_TIM_PWM_ConfigChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM15_Init+0xbc>
  {
    Error_Handler();
 8001e8c:	f000 f93a 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	2204      	movs	r2, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4813      	ldr	r0, [pc, #76]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001e9a:	f004 fa67 	bl	800636c <HAL_TIM_PWM_ConfigChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM15_Init+0xd4>
  {
    Error_Handler();
 8001ea4:	f000 f92e 	bl	8002104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001ecc:	f004 fe16 	bl	8006afc <HAL_TIMEx_ConfigBreakDeadTime>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM15_Init+0x106>
  {
    Error_Handler();
 8001ed6:	f000 f915 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001eda:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <MX_TIM15_Init+0x114>)
 8001edc:	f000 fd92 	bl	8002a04 <HAL_TIM_MspPostInit>

}
 8001ee0:	bf00      	nop
 8001ee2:	3748      	adds	r7, #72	; 0x48
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000258 	.word	0x20000258
 8001eec:	40014000 	.word	0x40014000

08001ef0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_TIM16_Init+0x44>)
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <MX_TIM16_Init+0x48>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_TIM16_Init+0x44>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_TIM16_Init+0x44>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = COUNTER_LOOP_PERIOD;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <MX_TIM16_Init+0x44>)
 8001f08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f0c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_TIM16_Init+0x44>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_TIM16_Init+0x44>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_TIM16_Init+0x44>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_TIM16_Init+0x44>)
 8001f22:	f003 fe2f 	bl	8005b84 <HAL_TIM_Base_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001f2c:	f000 f8ea 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200002a0 	.word	0x200002a0
 8001f38:	40014400 	.word	0x40014400

08001f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f42:	f107 0318 	add.w	r3, r7, #24
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	4b66      	ldr	r3, [pc, #408]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a65      	ldr	r2, [pc, #404]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b63      	ldr	r3, [pc, #396]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f68:	4b60      	ldr	r3, [pc, #384]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a5f      	ldr	r2, [pc, #380]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001f6e:	f043 0310 	orr.w	r3, r3, #16
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f80:	4b5a      	ldr	r3, [pc, #360]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	4a59      	ldr	r2, [pc, #356]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	6193      	str	r3, [r2, #24]
 8001f8c:	4b57      	ldr	r3, [pc, #348]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f98:	4b54      	ldr	r3, [pc, #336]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a53      	ldr	r2, [pc, #332]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b51      	ldr	r3, [pc, #324]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb0:	4b4e      	ldr	r3, [pc, #312]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a4d      	ldr	r2, [pc, #308]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001fb6:	f043 0320 	orr.w	r3, r3, #32
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <MX_GPIO_Init+0x1b0>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_DIR_4_Pin|MOTOR_NDIR_4_Pin, GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2130      	movs	r1, #48	; 0x30
 8001fcc:	4848      	ldr	r0, [pc, #288]	; (80020f0 <MX_GPIO_Init+0x1b4>)
 8001fce:	f001 fab0 	bl	8003532 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_DIR_5_Pin|MOTOR_NDIR_5_Pin, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2130      	movs	r1, #48	; 0x30
 8001fd6:	4847      	ldr	r0, [pc, #284]	; (80020f4 <MX_GPIO_Init+0x1b8>)
 8001fd8:	f001 faab 	bl	8003532 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_DIR_0_Pin|MOTOR_NDIR_0_Pin|MOTOR_DIR_1_Pin|MOTOR_NDIR_1_Pin
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f24f 0118 	movw	r1, #61464	; 0xf018
 8001fe2:	4845      	ldr	r0, [pc, #276]	; (80020f8 <MX_GPIO_Init+0x1bc>)
 8001fe4:	f001 faa5 	bl	8003532 <HAL_GPIO_WritePin>
                          |DEBUG_LED_1_Pin|DEBUG_LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR_DIR_2_Pin|MOTOR_NDIR_2_Pin|MOTOR_DIR_3_Pin|MOTOR_NDIR_3_Pin
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8001fee:	4843      	ldr	r0, [pc, #268]	; (80020fc <MX_GPIO_Init+0x1c0>)
 8001ff0:	f001 fa9f 	bl	8003532 <HAL_GPIO_WritePin>
                          |DEBUG_LED_3_Pin|DEBUG_LED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MOTOR_DIR_4_Pin MOTOR_NDIR_4_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_4_Pin|MOTOR_NDIR_4_Pin;
 8001ff4:	2330      	movs	r3, #48	; 0x30
 8001ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2302      	movs	r3, #2
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f107 0318 	add.w	r3, r7, #24
 8002008:	4619      	mov	r1, r3
 800200a:	4839      	ldr	r0, [pc, #228]	; (80020f0 <MX_GPIO_Init+0x1b4>)
 800200c:	f001 f83a 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_DIR_5_Pin MOTOR_NDIR_5_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_5_Pin|MOTOR_NDIR_5_Pin;
 8002010:	2330      	movs	r3, #48	; 0x30
 8002012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002014:	2301      	movs	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2302      	movs	r3, #2
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002020:	f107 0318 	add.w	r3, r7, #24
 8002024:	4619      	mov	r1, r3
 8002026:	4833      	ldr	r0, [pc, #204]	; (80020f4 <MX_GPIO_Init+0x1b8>)
 8002028:	f001 f82c 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_A_4_Pin LIMIT_B_4_Pin */
  GPIO_InitStruct.Pin = LIMIT_A_4_Pin|LIMIT_B_4_Pin;
 800202c:	2303      	movs	r3, #3
 800202e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002034:	2301      	movs	r3, #1
 8002036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	4619      	mov	r1, r3
 800203e:	482e      	ldr	r0, [pc, #184]	; (80020f8 <MX_GPIO_Init+0x1bc>)
 8002040:	f001 f820 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_A_5_Pin */
  GPIO_InitStruct.Pin = LIMIT_A_5_Pin;
 8002044:	2304      	movs	r3, #4
 8002046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIMIT_A_5_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 0318 	add.w	r3, r7, #24
 8002054:	4619      	mov	r1, r3
 8002056:	4828      	ldr	r0, [pc, #160]	; (80020f8 <MX_GPIO_Init+0x1bc>)
 8002058:	f001 f814 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_B_5_Pin */
  GPIO_InitStruct.Pin = LIMIT_B_5_Pin;
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002064:	2301      	movs	r3, #1
 8002066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIMIT_B_5_GPIO_Port, &GPIO_InitStruct);
 8002068:	f107 0318 	add.w	r3, r7, #24
 800206c:	4619      	mov	r1, r3
 800206e:	4824      	ldr	r0, [pc, #144]	; (8002100 <MX_GPIO_Init+0x1c4>)
 8002070:	f001 f808 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_DIR_0_Pin MOTOR_NDIR_0_Pin MOTOR_DIR_1_Pin MOTOR_NDIR_1_Pin
                           DEBUG_LED_1_Pin DEBUG_LED_0_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_0_Pin|MOTOR_NDIR_0_Pin|MOTOR_DIR_1_Pin|MOTOR_NDIR_1_Pin
 8002074:	f24f 0318 	movw	r3, #61464	; 0xf018
 8002078:	61bb      	str	r3, [r7, #24]
                          |DEBUG_LED_1_Pin|DEBUG_LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207a:	2301      	movs	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2302      	movs	r3, #2
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 0318 	add.w	r3, r7, #24
 800208a:	4619      	mov	r1, r3
 800208c:	481a      	ldr	r0, [pc, #104]	; (80020f8 <MX_GPIO_Init+0x1bc>)
 800208e:	f000 fff9 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_DIR_2_Pin MOTOR_NDIR_2_Pin MOTOR_DIR_3_Pin MOTOR_NDIR_3_Pin
                           DEBUG_LED_3_Pin DEBUG_LED_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_2_Pin|MOTOR_NDIR_2_Pin|MOTOR_DIR_3_Pin|MOTOR_NDIR_3_Pin
 8002092:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8002096:	61bb      	str	r3, [r7, #24]
                          |DEBUG_LED_3_Pin|DEBUG_LED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002098:	2301      	movs	r3, #1
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2302      	movs	r3, #2
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a4:	f107 0318 	add.w	r3, r7, #24
 80020a8:	4619      	mov	r1, r3
 80020aa:	4814      	ldr	r0, [pc, #80]	; (80020fc <MX_GPIO_Init+0x1c0>)
 80020ac:	f000 ffea 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_A_0_Pin LIMIT_B_0_Pin LIMIT_A_1_Pin LIMIT_B_1_Pin */
  GPIO_InitStruct.Pin = LIMIT_A_0_Pin|LIMIT_B_0_Pin|LIMIT_A_1_Pin|LIMIT_B_1_Pin;
 80020b0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80020b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020be:	f107 0318 	add.w	r3, r7, #24
 80020c2:	4619      	mov	r1, r3
 80020c4:	480b      	ldr	r0, [pc, #44]	; (80020f4 <MX_GPIO_Init+0x1b8>)
 80020c6:	f000 ffdd 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_A_2_Pin LIMIT_B_2_Pin LIMIT_A_3_Pin LIMIT_B_3_Pin */
  GPIO_InitStruct.Pin = LIMIT_A_2_Pin|LIMIT_B_2_Pin|LIMIT_A_3_Pin|LIMIT_B_3_Pin;
 80020ca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80020ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d4:	2301      	movs	r3, #1
 80020d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	f107 0318 	add.w	r3, r7, #24
 80020dc:	4619      	mov	r1, r3
 80020de:	4804      	ldr	r0, [pc, #16]	; (80020f0 <MX_GPIO_Init+0x1b4>)
 80020e0:	f000 ffd0 	bl	8003084 <HAL_GPIO_Init>

}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	; 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010800 	.word	0x40010800
 80020f4:	40011000 	.word	0x40011000
 80020f8:	40010c00 	.word	0x40010c00
 80020fc:	40011400 	.word	0x40011400
 8002100:	40011800 	.word	0x40011800

08002104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800210c:	e7fe      	b.n	800210c <Error_Handler+0x8>

0800210e <new_motor>:

#include "motor.h"

Motor *new_motor(bool _valid, HBridge *_hbridge, LimitSwitch *_limit_switch_a, LimitSwitch *_limit_switch_b, QuadEncoder *_encoder, AbsEncoder *_abs_encoder, ClosedLoopControl *_control) {
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	4603      	mov	r3, r0
 800211c:	73fb      	strb	r3, [r7, #15]
    Motor *motor = (Motor *) malloc(sizeof(Motor));
 800211e:	2030      	movs	r0, #48	; 0x30
 8002120:	f004 fd7a 	bl	8006c18 <malloc>
 8002124:	4603      	mov	r3, r0
 8002126:	617b      	str	r3, [r7, #20]
    motor->valid = _valid;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	761a      	strb	r2, [r3, #24]
    motor->hbridge = _hbridge;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	601a      	str	r2, [r3, #0]
    motor->limit_switch_a = _limit_switch_a;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	605a      	str	r2, [r3, #4]
    motor->limit_switch_b = _limit_switch_b;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	609a      	str	r2, [r3, #8]
    motor->encoder = _encoder;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	6a3a      	ldr	r2, [r7, #32]
 8002144:	60da      	str	r2, [r3, #12]
    motor->abs_encoder = _abs_encoder;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214a:	611a      	str	r2, [r3, #16]

    motor->control = _control;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002150:	615a      	str	r2, [r3, #20]
    motor->using_open_loop_control = 1;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2201      	movs	r2, #1
 8002156:	765a      	strb	r2, [r3, #25]
    motor->target_pwm = 0;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	61da      	str	r2, [r3, #28]
    motor->max_pwm = 1;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002166:	621a      	str	r2, [r3, #32]
    motor->desired_speed = 0;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	; 0x24
    motor->desired_counts = 0;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
    motor->limit_enabled = 1;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    motor->is_calibrated = 0;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    motor->limit_a_is_forward = 1;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    return motor;
 800218e:	697b      	ldr	r3, [r7, #20]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <init_motor>:

void init_motor(Motor *motor, float speed) {
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
    init_hbridge(motor->hbridge, speed, speed);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681c      	ldr	r4, [r3, #0]
 80021a6:	2301      	movs	r3, #1
 80021a8:	461d      	mov	r5, r3
 80021aa:	f04f 0100 	mov.w	r1, #0
 80021ae:	6838      	ldr	r0, [r7, #0]
 80021b0:	f7fe fad0 	bl	8000754 <__aeabi_fcmpeq>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <init_motor+0x26>
 80021ba:	2300      	movs	r3, #0
 80021bc:	461d      	mov	r5, r3
 80021be:	b2eb      	uxtb	r3, r5
 80021c0:	461a      	mov	r2, r3
 80021c2:	6839      	ldr	r1, [r7, #0]
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7fe fc6f 	bl	8000aa8 <init_hbridge>
    set_motor_speed(motor, speed);
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f81a 	bl	8002206 <set_motor_speed>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bdb0      	pop	{r4, r5, r7, pc}

080021da <update_motor_target>:

void update_motor_target(Motor *motor) {
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
	if (motor->using_open_loop_control) {
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7e5b      	ldrb	r3, [r3, #25]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <update_motor_target+0x1e>
		set_motor_speed(motor, motor->desired_speed);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f808 	bl	8002206 <set_motor_speed>
	}
	else {
        move_motor_to_target(motor);
    }
}
 80021f6:	e002      	b.n	80021fe <update_motor_target+0x24>
        move_motor_to_target(motor);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f8e7 	bl	80023cc <move_motor_to_target>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <set_motor_speed>:

// at_fwd_lim = 1 means lim switch activated
void set_motor_speed(Motor *motor, float speed) {
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
	motor->target_pwm = speed * motor->max_pwm;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f908 	bl	800042c <__aeabi_fmul>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	61da      	str	r2, [r3, #28]
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <update_motor_speed>:

void update_motor_speed(Motor *motor) {
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	if (!motor->hbridge->valid) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	f083 0301 	eor.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	f040 80bf 	bne.w	80023c4 <update_motor_speed+0x198>
		return;
	}
    // when speed is positive, motor goes from rev lim to fwd lim
	if (motor->limit_a_is_forward) {
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800224c:	2b00      	cmp	r3, #0
 800224e:	d061      	beq.n	8002314 <update_motor_speed+0xe8>
		if (motor->limit_switch_a->valid &&
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	799b      	ldrb	r3, [r3, #6]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01b      	beq.n	8002292 <update_motor_speed+0x66>
				motor->limit_switch_a->enabled &&
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	791b      	ldrb	r3, [r3, #4]
		if (motor->limit_switch_a->valid &&
 8002260:	2b00      	cmp	r3, #0
 8002262:	d016      	beq.n	8002292 <update_motor_speed+0x66>
				motor->limit_switch_a->is_activated &&
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	795b      	ldrb	r3, [r3, #5]
				motor->limit_switch_a->enabled &&
 800226a:	2b00      	cmp	r3, #0
 800226c:	d011      	beq.n	8002292 <update_motor_speed+0x66>
				(motor->target_pwm > 0.0f)) {
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
				motor->limit_switch_a->is_activated &&
 8002272:	f04f 0100 	mov.w	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fa94 	bl	80007a4 <__aeabi_fcmpgt>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <update_motor_speed+0x66>
			change_hbridge_pwm(motor->hbridge, 0.0f);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f04f 0100 	mov.w	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fc28 	bl	8000ae0 <change_hbridge_pwm>
 8002290:	e02a      	b.n	80022e8 <update_motor_speed+0xbc>
		}
		else if (motor->limit_switch_b->valid &&
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	799b      	ldrb	r3, [r3, #6]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01b      	beq.n	80022d4 <update_motor_speed+0xa8>
				motor->limit_switch_b->enabled &&
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	791b      	ldrb	r3, [r3, #4]
		else if (motor->limit_switch_b->valid &&
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d016      	beq.n	80022d4 <update_motor_speed+0xa8>
				motor->limit_switch_b->is_activated &&
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	795b      	ldrb	r3, [r3, #5]
				motor->limit_switch_b->enabled &&
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d011      	beq.n	80022d4 <update_motor_speed+0xa8>
				(motor->target_pwm < 0.0f)) {
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
				motor->limit_switch_b->is_activated &&
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fa55 	bl	8000768 <__aeabi_fcmplt>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d007      	beq.n	80022d4 <update_motor_speed+0xa8>
			change_hbridge_pwm(motor->hbridge, 0.0f);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f04f 0100 	mov.w	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fc07 	bl	8000ae0 <change_hbridge_pwm>
 80022d2:	e009      	b.n	80022e8 <update_motor_speed+0xbc>
		}
		else {
			change_hbridge_pwm(motor->hbridge, fabsf(motor->target_pwm));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022e0:	4619      	mov	r1, r3
 80022e2:	4610      	mov	r0, r2
 80022e4:	f7fe fbfc 	bl	8000ae0 <change_hbridge_pwm>
		}
		change_hbridge_dir_val(motor->hbridge, motor->target_pwm > 0.0f);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681c      	ldr	r4, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4615      	mov	r5, r2
 80022f4:	f04f 0100 	mov.w	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fa53 	bl	80007a4 <__aeabi_fcmpgt>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <update_motor_speed+0xdc>
 8002304:	2300      	movs	r3, #0
 8002306:	461d      	mov	r5, r3
 8002308:	b2eb      	uxtb	r3, r5
 800230a:	4619      	mov	r1, r3
 800230c:	4620      	mov	r0, r4
 800230e:	f7fe fc1f 	bl	8000b50 <change_hbridge_dir_val>
 8002312:	e058      	b.n	80023c6 <update_motor_speed+0x19a>
	}
	else {
		if (motor->limit_switch_a->valid && motor->limit_switch_a->is_activated && (motor->target_pwm < 0.0f)) {
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	799b      	ldrb	r3, [r3, #6]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d016      	beq.n	800234c <update_motor_speed+0x120>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	795b      	ldrb	r3, [r3, #5]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d011      	beq.n	800234c <update_motor_speed+0x120>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f04f 0100 	mov.w	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fa19 	bl	8000768 <__aeabi_fcmplt>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <update_motor_speed+0x120>
			change_hbridge_pwm(motor->hbridge, 0.0f);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f04f 0100 	mov.w	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fbcb 	bl	8000ae0 <change_hbridge_pwm>
 800234a:	e025      	b.n	8002398 <update_motor_speed+0x16c>
		}
		else if (motor->limit_switch_b->valid && motor->limit_switch_b->is_activated && (motor->target_pwm > 0.0f)) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	799b      	ldrb	r3, [r3, #6]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <update_motor_speed+0x158>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	795b      	ldrb	r3, [r3, #5]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d011      	beq.n	8002384 <update_motor_speed+0x158>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe fa1b 	bl	80007a4 <__aeabi_fcmpgt>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d007      	beq.n	8002384 <update_motor_speed+0x158>
			change_hbridge_pwm(motor->hbridge, 0.0f);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fbaf 	bl	8000ae0 <change_hbridge_pwm>
 8002382:	e009      	b.n	8002398 <update_motor_speed+0x16c>
		}
		else {
			change_hbridge_pwm(motor->hbridge, fabsf(motor->target_pwm));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f7fe fba4 	bl	8000ae0 <change_hbridge_pwm>
		}
		change_hbridge_dir_val(motor->hbridge, motor->target_pwm > 0.0f);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681c      	ldr	r4, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4615      	mov	r5, r2
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f9fb 	bl	80007a4 <__aeabi_fcmpgt>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <update_motor_speed+0x18c>
 80023b4:	2300      	movs	r3, #0
 80023b6:	461d      	mov	r5, r3
 80023b8:	b2eb      	uxtb	r3, r5
 80023ba:	4619      	mov	r1, r3
 80023bc:	4620      	mov	r0, r4
 80023be:	f7fe fbc7 	bl	8000b50 <change_hbridge_dir_val>
 80023c2:	e000      	b.n	80023c6 <update_motor_speed+0x19a>
		return;
 80023c4:	bf00      	nop
	}

}
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bdb0      	pop	{r4, r5, r7, pc}

080023cc <move_motor_to_target>:

void move_motor_to_target(Motor *motor) {
 80023cc:	b5b0      	push	{r4, r5, r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	if (motor->is_calibrated) {
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d018      	beq.n	8002410 <move_motor_to_target+0x44>
		// TODO there might be problems here
		float speed = calculate_pid(motor->control, motor->desired_counts, motor->encoder->counts);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695c      	ldr	r4, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fd ffcc 	bl	8000384 <__aeabi_i2f>
 80023ec:	4605      	mov	r5, r0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fd ffc5 	bl	8000384 <__aeabi_i2f>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4629      	mov	r1, r5
 8002400:	4620      	mov	r0, r4
 8002402:	f7fe fa8f 	bl	8000924 <calculate_pid>
 8002406:	60f8      	str	r0, [r7, #12]
		set_motor_speed(motor, speed);
 8002408:	68f9      	ldr	r1, [r7, #12]
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fefb 	bl	8002206 <set_motor_speed>
	}
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bdb0      	pop	{r4, r5, r7, pc}

08002418 <update_motor_limit_switches>:

// Changes encoder counts and sets the calibration status
void update_motor_limit_switches(Motor *motor) {
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	if (motor->limit_switch_a->valid &&
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	799b      	ldrb	r3, [r3, #6]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d014      	beq.n	8002454 <update_motor_limit_switches+0x3c>
			motor->limit_switch_a->enabled &&
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	791b      	ldrb	r3, [r3, #4]
	if (motor->limit_switch_a->valid &&
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00f      	beq.n	8002454 <update_motor_limit_switches+0x3c>
			motor->limit_switch_a->is_activated) {
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	795b      	ldrb	r3, [r3, #5]
			motor->limit_switch_a->enabled &&
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <update_motor_limit_switches+0x3c>
		motor->encoder->counts = motor->limit_switch_a->associated_count;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	6892      	ldr	r2, [r2, #8]
 8002448:	60da      	str	r2, [r3, #12]
		motor->is_calibrated = 1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			motor->limit_switch_b->is_activated) {
		motor->encoder->counts = motor->limit_switch_b->associated_count;
		motor->is_calibrated = 1;
	}

}
 8002452:	e018      	b.n	8002486 <update_motor_limit_switches+0x6e>
	} else if (motor->limit_switch_b->valid &&
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	799b      	ldrb	r3, [r3, #6]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d013      	beq.n	8002486 <update_motor_limit_switches+0x6e>
			motor->limit_switch_b->enabled &&
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	791b      	ldrb	r3, [r3, #4]
	} else if (motor->limit_switch_b->valid &&
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00e      	beq.n	8002486 <update_motor_limit_switches+0x6e>
			motor->limit_switch_b->is_activated) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	795b      	ldrb	r3, [r3, #5]
			motor->limit_switch_b->enabled &&
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <update_motor_limit_switches+0x6e>
		motor->encoder->counts = motor->limit_switch_b->associated_count;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	6892      	ldr	r2, [r2, #8]
 800247c:	60da      	str	r2, [r3, #12]
		motor->is_calibrated = 1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <new_pin>:
#include "pin.h"

Pin *new_pin(GPIO_TypeDef *_port, uint16_t _pin) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
    Pin *pin = (Pin *) malloc(sizeof(Pin));
 800249c:	2008      	movs	r0, #8
 800249e:	f004 fbbb 	bl	8006c18 <malloc>
 80024a2:	4603      	mov	r3, r0
 80024a4:	60fb      	str	r3, [r7, #12]
    pin->port = _port;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	601a      	str	r2, [r3, #0]
    pin->pin = _pin;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	809a      	strh	r2, [r3, #4]

    return pin;
 80024b2:	68fb      	ldr	r3, [r7, #12]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <read_pin_value>:

bool read_pin_value(Pin* pin) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(pin->port, pin->pin);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	889b      	ldrh	r3, [r3, #4]
 80024cc:	4619      	mov	r1, r3
 80024ce:	4610      	mov	r0, r2
 80024d0:	f001 f818 	bl	8003504 <HAL_GPIO_ReadPin>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf14      	ite	ne
 80024da:	2301      	movne	r3, #1
 80024dc:	2300      	moveq	r3, #0
 80024de:	b2db      	uxtb	r3, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <write_pin_value>:

void write_pin_value(Pin* pin, bool val) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(pin->port, pin->pin, val);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	889b      	ldrh	r3, [r3, #4]
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	4619      	mov	r1, r3
 8002500:	f001 f817 	bl	8003532 <HAL_GPIO_WritePin>
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <new_quad_encoder>:
#include "quad_encoder.h"

QuadEncoder *new_quad_encoder(bool _valid, TIM_HandleTypeDef *_htim, TIM_TypeDef *_tim) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	73fb      	strb	r3, [r7, #15]
    QuadEncoder *quad_encoder = (QuadEncoder *) malloc(sizeof(QuadEncoder));
 800251a:	2014      	movs	r0, #20
 800251c:	f004 fb7c 	bl	8006c18 <malloc>
 8002520:	4603      	mov	r3, r0
 8002522:	617b      	str	r3, [r7, #20]
    quad_encoder->valid = _valid;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	721a      	strb	r2, [r3, #8]
    quad_encoder->tim = _tim;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	605a      	str	r2, [r3, #4]
    quad_encoder->htim = _htim;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	601a      	str	r2, [r3, #0]
    quad_encoder->counts = 0;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2200      	movs	r2, #0
 800253a:	60da      	str	r2, [r3, #12]
    quad_encoder->counts_raw_prev = 0;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2200      	movs	r2, #0
 8002540:	821a      	strh	r2, [r3, #16]
    quad_encoder->counts_raw_now = 0;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	825a      	strh	r2, [r3, #18]
    return quad_encoder;
 8002548:	697b      	ldr	r3, [r7, #20]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <init_quad_encoder>:

void init_quad_encoder(QuadEncoder* quad_encoder) {
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
	set_encoder_counts(quad_encoder, 0);
 800255a:	2100      	movs	r1, #0
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f828 	bl	80025b2 <set_encoder_counts>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <update_quad_encoder>:

void update_quad_encoder(QuadEncoder* quad_encoder) {
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
	quad_encoder->counts_raw_now = quad_encoder->tim->CNT;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	b21a      	sxth	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	825a      	strh	r2, [r3, #18]
    quad_encoder->counts += (int16_t)(quad_encoder->counts_raw_now - quad_encoder->counts_raw_prev);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002588:	b291      	uxth	r1, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002590:	b292      	uxth	r2, r2
 8002592:	1a8a      	subs	r2, r1, r2
 8002594:	b292      	uxth	r2, r2
 8002596:	b212      	sxth	r2, r2
 8002598:	441a      	add	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60da      	str	r2, [r3, #12]
    quad_encoder->counts_raw_prev = quad_encoder->counts_raw_now;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	821a      	strh	r2, [r3, #16]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <set_encoder_counts>:

void set_encoder_counts(QuadEncoder *quad_encoder, int32_t counts) {
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
	quad_encoder->counts = 0;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
	quad_encoder->counts_raw_prev = quad_encoder->tim->CNT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	821a      	strh	r2, [r3, #16]
	quad_encoder->counts_raw_now = quad_encoder->tim->CNT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	b21a      	sxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	825a      	strh	r2, [r3, #18]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_MspInit+0x5c>)
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_MspInit+0x5c>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6193      	str	r3, [r2, #24]
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_MspInit+0x5c>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_MspInit+0x5c>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_MspInit+0x5c>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	61d3      	str	r3, [r2, #28]
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_MspInit+0x5c>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_MspInit+0x60>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_MspInit+0x60>)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	40021000 	.word	0x40021000
 8002644:	40010000 	.word	0x40010000

08002648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0318 	add.w	r3, r7, #24
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a3b      	ldr	r2, [pc, #236]	; (8002750 <HAL_I2C_MspInit+0x108>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d134      	bne.n	80026d2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002668:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a39      	ldr	r2, [pc, #228]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	6193      	str	r3, [r2, #24]
 8002674:	4b37      	ldr	r3, [pc, #220]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_TO_JETSON_SCL_Pin|I2C1_TO_JETSON_SDA_Pin;
 8002680:	23c0      	movs	r3, #192	; 0xc0
 8002682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002684:	2312      	movs	r3, #18
 8002686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268c:	f107 0318 	add.w	r3, r7, #24
 8002690:	4619      	mov	r1, r3
 8002692:	4831      	ldr	r0, [pc, #196]	; (8002758 <HAL_I2C_MspInit+0x110>)
 8002694:	f000 fcf6 	bl	8003084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002698:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4a2d      	ldr	r2, [pc, #180]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 800269e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026a2:	61d3      	str	r3, [r2, #28]
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2100      	movs	r1, #0
 80026b4:	201f      	movs	r0, #31
 80026b6:	f000 fc1e 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80026ba:	201f      	movs	r0, #31
 80026bc:	f000 fc37 	bl	8002f2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80026c0:	2200      	movs	r2, #0
 80026c2:	2100      	movs	r1, #0
 80026c4:	2020      	movs	r0, #32
 80026c6:	f000 fc16 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80026ca:	2020      	movs	r0, #32
 80026cc:	f000 fc2f 	bl	8002f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80026d0:	e039      	b.n	8002746 <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a21      	ldr	r2, [pc, #132]	; (800275c <HAL_I2C_MspInit+0x114>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d134      	bne.n	8002746 <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026fa:	2312      	movs	r3, #18
 80026fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 0318 	add.w	r3, r7, #24
 8002706:	4619      	mov	r1, r3
 8002708:	4813      	ldr	r0, [pc, #76]	; (8002758 <HAL_I2C_MspInit+0x110>)
 800270a:	f000 fcbb 	bl	8003084 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a10      	ldr	r2, [pc, #64]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 8002714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002718:	61d3      	str	r3, [r2, #28]
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_I2C_MspInit+0x10c>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	2021      	movs	r0, #33	; 0x21
 800272c:	f000 fbe3 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002730:	2021      	movs	r0, #33	; 0x21
 8002732:	f000 fbfc 	bl	8002f2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	2022      	movs	r0, #34	; 0x22
 800273c:	f000 fbdb 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002740:	2022      	movs	r0, #34	; 0x22
 8002742:	f000 fbf4 	bl	8002f2e <HAL_NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40005400 	.word	0x40005400
 8002754:	40021000 	.word	0x40021000
 8002758:	40010c00 	.word	0x40010c00
 800275c:	40005800 	.word	0x40005800

08002760 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1b      	ldr	r2, [pc, #108]	; (80027dc <HAL_I2C_MspDeInit+0x7c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d114      	bne.n	800279c <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_I2C_MspDeInit+0x80>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <HAL_I2C_MspDeInit+0x80>)
 8002778:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800277c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_TO_JETSON_SCL_GPIO_Port, I2C1_TO_JETSON_SCL_Pin);
 800277e:	2140      	movs	r1, #64	; 0x40
 8002780:	4818      	ldr	r0, [pc, #96]	; (80027e4 <HAL_I2C_MspDeInit+0x84>)
 8002782:	f000 fe03 	bl	800338c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_TO_JETSON_SDA_GPIO_Port, I2C1_TO_JETSON_SDA_Pin);
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	4816      	ldr	r0, [pc, #88]	; (80027e4 <HAL_I2C_MspDeInit+0x84>)
 800278a:	f000 fdff 	bl	800338c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800278e:	201f      	movs	r0, #31
 8002790:	f000 fbdb 	bl	8002f4a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002794:	2020      	movs	r0, #32
 8002796:	f000 fbd8 	bl	8002f4a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800279a:	e01a      	b.n	80027d2 <HAL_I2C_MspDeInit+0x72>
  else if(hi2c->Instance==I2C2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_I2C_MspDeInit+0x88>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d115      	bne.n	80027d2 <HAL_I2C_MspDeInit+0x72>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_I2C_MspDeInit+0x80>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <HAL_I2C_MspDeInit+0x80>)
 80027ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027b0:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80027b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027b6:	480b      	ldr	r0, [pc, #44]	; (80027e4 <HAL_I2C_MspDeInit+0x84>)
 80027b8:	f000 fde8 	bl	800338c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80027bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027c0:	4808      	ldr	r0, [pc, #32]	; (80027e4 <HAL_I2C_MspDeInit+0x84>)
 80027c2:	f000 fde3 	bl	800338c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80027c6:	2021      	movs	r0, #33	; 0x21
 80027c8:	f000 fbbf 	bl	8002f4a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80027cc:	2022      	movs	r0, #34	; 0x22
 80027ce:	f000 fbbc 	bl	8002f4a <HAL_NVIC_DisableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40005400 	.word	0x40005400
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010c00 	.word	0x40010c00
 80027e8:	40005800 	.word	0x40005800

080027ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08e      	sub	sp, #56	; 0x38
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a4d      	ldr	r2, [pc, #308]	; (800293c <HAL_TIM_Encoder_MspInit+0x150>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d13f      	bne.n	800288c <HAL_TIM_Encoder_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800280c:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a4b      	ldr	r2, [pc, #300]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 8002812:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b49      	ldr	r3, [pc, #292]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002820:	623b      	str	r3, [r7, #32]
 8002822:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002824:	4b46      	ldr	r3, [pc, #280]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a45      	ldr	r2, [pc, #276]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 800282a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800282e:	6193      	str	r3, [r2, #24]
 8002830:	4b43      	ldr	r3, [pc, #268]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QUAD_A_0_Pin|QUAD_B_0_Pin;
 800283c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002842:	2300      	movs	r3, #0
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800284a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284e:	4619      	mov	r1, r3
 8002850:	483c      	ldr	r0, [pc, #240]	; (8002944 <HAL_TIM_Encoder_MspInit+0x158>)
 8002852:	f000 fc17 	bl	8003084 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8002856:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <HAL_TIM_Encoder_MspInit+0x15c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
 800285c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002862:	637b      	str	r3, [r7, #52]	; 0x34
 8002864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002866:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002872:	637b      	str	r3, [r7, #52]	; 0x34
 8002874:	4a34      	ldr	r2, [pc, #208]	; (8002948 <HAL_TIM_Encoder_MspInit+0x15c>)
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002878:	6053      	str	r3, [r2, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2101      	movs	r1, #1
 800287e:	2019      	movs	r0, #25
 8002880:	f000 fb39 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002884:	2019      	movs	r0, #25
 8002886:	f000 fb52 	bl	8002f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800288a:	e052      	b.n	8002932 <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d124      	bne.n	80028e0 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002896:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a29      	ldr	r2, [pc, #164]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b27      	ldr	r3, [pc, #156]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	4a23      	ldr	r2, [pc, #140]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6193      	str	r3, [r2, #24]
 80028ba:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = QUAD_A_1_Pin|QUAD_B_1_Pin;
 80028c6:	2303      	movs	r3, #3
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ca:	2300      	movs	r3, #0
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d6:	4619      	mov	r1, r3
 80028d8:	481c      	ldr	r0, [pc, #112]	; (800294c <HAL_TIM_Encoder_MspInit+0x160>)
 80028da:	f000 fbd3 	bl	8003084 <HAL_GPIO_Init>
}
 80028de:	e028      	b.n	8002932 <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM3)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_TIM_Encoder_MspInit+0x164>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d123      	bne.n	8002932 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4a14      	ldr	r2, [pc, #80]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	61d3      	str	r3, [r2, #28]
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	6193      	str	r3, [r2, #24]
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_TIM_Encoder_MspInit+0x154>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = QUAD_A_2_Pin|QUAD_B_2_Pin;
 800291a:	23c0      	movs	r3, #192	; 0xc0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800291e:	2300      	movs	r3, #0
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292a:	4619      	mov	r1, r3
 800292c:	4807      	ldr	r0, [pc, #28]	; (800294c <HAL_TIM_Encoder_MspInit+0x160>)
 800292e:	f000 fba9 	bl	8003084 <HAL_GPIO_Init>
}
 8002932:	bf00      	nop
 8002934:	3738      	adds	r7, #56	; 0x38
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40021000 	.word	0x40021000
 8002944:	40011800 	.word	0x40011800
 8002948:	40010000 	.word	0x40010000
 800294c:	40010800 	.word	0x40010800
 8002950:	40000400 	.word	0x40000400

08002954 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a12      	ldr	r2, [pc, #72]	; (80029ac <HAL_TIM_PWM_MspInit+0x58>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10c      	bne.n	8002980 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4a11      	ldr	r2, [pc, #68]	; (80029b0 <HAL_TIM_PWM_MspInit+0x5c>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	61d3      	str	r3, [r2, #28]
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800297e:	e010      	b.n	80029a2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <HAL_TIM_PWM_MspInit+0x60>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10b      	bne.n	80029a2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_TIM_PWM_MspInit+0x5c>)
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6193      	str	r3, [r2, #24]
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	40000800 	.word	0x40000800
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40014000 	.word	0x40014000

080029b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <HAL_TIM_Base_MspInit+0x44>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d113      	bne.n	80029f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_TIM_Base_MspInit+0x48>)
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <HAL_TIM_Base_MspInit+0x48>)
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	6193      	str	r3, [r2, #24]
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_TIM_Base_MspInit+0x48>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2101      	movs	r1, #1
 80029e6:	2019      	movs	r0, #25
 80029e8:	f000 fa85 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80029ec:	2019      	movs	r0, #25
 80029ee:	f000 fa9e 	bl	8002f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40014400 	.word	0x40014400
 8002a00:	40021000 	.word	0x40021000

08002a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <HAL_TIM_MspPostInit+0xb4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d127      	bne.n	8002a74 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_TIM_MspPostInit+0xb8>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_TIM_MspPostInit+0xb8>)
 8002a2a:	f043 0320 	orr.w	r3, r3, #32
 8002a2e:	6193      	str	r3, [r2, #24]
 8002a30:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_TIM_MspPostInit+0xb8>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_0_Pin|MOTOR_PWM_1_Pin|MOTOR_PWM_2_Pin|MOTOR_PWM_3_Pin;
 8002a3c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2302      	movs	r3, #2
 8002a48:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	481b      	ldr	r0, [pc, #108]	; (8002ac0 <HAL_TIM_MspPostInit+0xbc>)
 8002a52:	f000 fb17 	bl	8003084 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_TIM_MspPostInit+0xc0>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <HAL_TIM_MspPostInit+0xc0>)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002a72:	e01c      	b.n	8002aae <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM15)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <HAL_TIM_MspPostInit+0xc4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d117      	bne.n	8002aae <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <HAL_TIM_MspPostInit+0xb8>)
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <HAL_TIM_MspPostInit+0xb8>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	6193      	str	r3, [r2, #24]
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <HAL_TIM_MspPostInit+0xb8>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_PWM_4_Pin|MOTOR_PWM_5_Pin;
 8002a96:	230c      	movs	r3, #12
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4808      	ldr	r0, [pc, #32]	; (8002acc <HAL_TIM_MspPostInit+0xc8>)
 8002aaa:	f000 faeb 	bl	8003084 <HAL_GPIO_Init>
}
 8002aae:	bf00      	nop
 8002ab0:	3728      	adds	r7, #40	; 0x28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40000800 	.word	0x40000800
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40011400 	.word	0x40011400
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40014000 	.word	0x40014000
 8002acc:	40010800 	.word	0x40010800

08002ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <NMI_Handler+0x4>

08002ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ada:	e7fe      	b.n	8002ada <HardFault_Handler+0x4>

08002adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <MemManage_Handler+0x4>

08002ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <BusFault_Handler+0x4>

08002ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <UsageFault_Handler+0x4>

08002aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b16:	f000 f8d7 	bl	8002cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b24:	4803      	ldr	r0, [pc, #12]	; (8002b34 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002b26:	f003 fb19 	bl	800615c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002b2a:	4803      	ldr	r0, [pc, #12]	; (8002b38 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002b2c:	f003 fb16 	bl	800615c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000138 	.word	0x20000138
 8002b38:	200002a0 	.word	0x200002a0

08002b3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <I2C1_EV_IRQHandler+0x10>)
 8002b42:	f000 ff9b 	bl	8003a7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000090 	.word	0x20000090

08002b50 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <I2C1_ER_IRQHandler+0x10>)
 8002b56:	f001 f902 	bl	8003d5e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000090 	.word	0x20000090

08002b64 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <I2C2_EV_IRQHandler+0x10>)
 8002b6a:	f000 ff87 	bl	8003a7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200000e4 	.word	0x200000e4

08002b78 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <I2C2_ER_IRQHandler+0x10>)
 8002b7e:	f001 f8ee 	bl	8003d5e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200000e4 	.word	0x200000e4

08002b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b94:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <_sbrk+0x5c>)
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <_sbrk+0x60>)
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <_sbrk+0x64>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <_sbrk+0x64>)
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <_sbrk+0x68>)
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <_sbrk+0x64>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d207      	bcs.n	8002bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bbc:	f004 f802 	bl	8006bc4 <__errno>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	220c      	movs	r2, #12
 8002bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	e009      	b.n	8002be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <_sbrk+0x64>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <_sbrk+0x64>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <_sbrk+0x64>)
 8002bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bde:	68fb      	ldr	r3, [r7, #12]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20002000 	.word	0x20002000
 8002bec:	00000400 	.word	0x00000400
 8002bf0:	200003f8 	.word	0x200003f8
 8002bf4:	20000410 	.word	0x20000410

08002bf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c04:	480c      	ldr	r0, [pc, #48]	; (8002c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c06:	490d      	ldr	r1, [pc, #52]	; (8002c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c08:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c0c:	e002      	b.n	8002c14 <LoopCopyDataInit>

08002c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c12:	3304      	adds	r3, #4

08002c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c18:	d3f9      	bcc.n	8002c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c1c:	4c0a      	ldr	r4, [pc, #40]	; (8002c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c20:	e001      	b.n	8002c26 <LoopFillZerobss>

08002c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c24:	3204      	adds	r2, #4

08002c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c28:	d3fb      	bcc.n	8002c22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c2a:	f7ff ffe5 	bl	8002bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2e:	f003 ffcf 	bl	8006bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c32:	f7fe fbc7 	bl	80013c4 <main>
  bx lr
 8002c36:	4770      	bx	lr
  ldr r0, =_sdata
 8002c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002c40:	08006df4 	.word	0x08006df4
  ldr r2, =_sbss
 8002c44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002c48:	20000410 	.word	0x20000410

08002c4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c4c:	e7fe      	b.n	8002c4c <ADC1_IRQHandler>

08002c4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c52:	2003      	movs	r0, #3
 8002c54:	f000 f944 	bl	8002ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c58:	200f      	movs	r0, #15
 8002c5a:	f000 f805 	bl	8002c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c5e:	f7ff fcc1 	bl	80025e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x54>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_InitTick+0x58>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f96d 	bl	8002f66 <HAL_SYSTICK_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00e      	b.n	8002cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b0f      	cmp	r3, #15
 8002c9a:	d80a      	bhi.n	8002cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f000 f927 	bl	8002ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <HAL_InitTick+0x5c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000004 	.word	0x20000004
 8002cc0:	2000000c 	.word	0x2000000c
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_IncTick+0x1c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a03      	ldr	r2, [pc, #12]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	2000000c 	.word	0x2000000c
 8002ce8:	200003fc 	.word	0x200003fc

08002cec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <HAL_GetTick+0x10>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	200003fc 	.word	0x200003fc

08002d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <__NVIC_GetPriorityGrouping+0x18>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	f003 0307 	and.w	r3, r3, #7
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	db0b      	blt.n	8002d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4906      	ldr	r1, [pc, #24]	; (8002d98 <__NVIC_EnableIRQ+0x34>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2001      	movs	r0, #1
 8002d86:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	db12      	blt.n	8002dd4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	490a      	ldr	r1, [pc, #40]	; (8002de0 <__NVIC_DisableIRQ+0x44>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc2:	3320      	adds	r3, #32
 8002dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002dc8:	f3bf 8f4f 	dsb	sy
}
 8002dcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002dce:	f3bf 8f6f 	isb	sy
}
 8002dd2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eac:	d301      	bcc.n	8002eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e00f      	b.n	8002ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <SysTick_Config+0x40>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eba:	210f      	movs	r1, #15
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	f7ff ff90 	bl	8002de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <SysTick_Config+0x40>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <SysTick_Config+0x40>)
 8002ecc:	2207      	movs	r2, #7
 8002ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	e000e010 	.word	0xe000e010

08002ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ff09 	bl	8002d00 <__NVIC_SetPriorityGrouping>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f08:	f7ff ff1e 	bl	8002d48 <__NVIC_GetPriorityGrouping>
 8002f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	6978      	ldr	r0, [r7, #20]
 8002f14:	f7ff ff90 	bl	8002e38 <NVIC_EncodePriority>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff5f 	bl	8002de4 <__NVIC_SetPriority>
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff11 	bl	8002d64 <__NVIC_EnableIRQ>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff1f 	bl	8002d9c <__NVIC_DisableIRQ>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ff94 	bl	8002e9c <SysTick_Config>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d005      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2204      	movs	r2, #4
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	e051      	b.n	8003046 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 020e 	bic.w	r2, r2, #14
 8002fb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a22      	ldr	r2, [pc, #136]	; (8003050 <HAL_DMA_Abort_IT+0xd0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d029      	beq.n	8003020 <HAL_DMA_Abort_IT+0xa0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a20      	ldr	r2, [pc, #128]	; (8003054 <HAL_DMA_Abort_IT+0xd4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d022      	beq.n	800301c <HAL_DMA_Abort_IT+0x9c>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <HAL_DMA_Abort_IT+0xd8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d01a      	beq.n	8003016 <HAL_DMA_Abort_IT+0x96>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	; (800305c <HAL_DMA_Abort_IT+0xdc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d012      	beq.n	8003010 <HAL_DMA_Abort_IT+0x90>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <HAL_DMA_Abort_IT+0xe0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00a      	beq.n	800300a <HAL_DMA_Abort_IT+0x8a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1a      	ldr	r2, [pc, #104]	; (8003064 <HAL_DMA_Abort_IT+0xe4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d102      	bne.n	8003004 <HAL_DMA_Abort_IT+0x84>
 8002ffe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003002:	e00e      	b.n	8003022 <HAL_DMA_Abort_IT+0xa2>
 8003004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003008:	e00b      	b.n	8003022 <HAL_DMA_Abort_IT+0xa2>
 800300a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800300e:	e008      	b.n	8003022 <HAL_DMA_Abort_IT+0xa2>
 8003010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003014:	e005      	b.n	8003022 <HAL_DMA_Abort_IT+0xa2>
 8003016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301a:	e002      	b.n	8003022 <HAL_DMA_Abort_IT+0xa2>
 800301c:	2310      	movs	r3, #16
 800301e:	e000      	b.n	8003022 <HAL_DMA_Abort_IT+0xa2>
 8003020:	2301      	movs	r3, #1
 8003022:	4a11      	ldr	r2, [pc, #68]	; (8003068 <HAL_DMA_Abort_IT+0xe8>)
 8003024:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
    } 
  }
  return status;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40020008 	.word	0x40020008
 8003054:	4002001c 	.word	0x4002001c
 8003058:	40020030 	.word	0x40020030
 800305c:	40020044 	.word	0x40020044
 8003060:	40020058 	.word	0x40020058
 8003064:	4002006c 	.word	0x4002006c
 8003068:	40020000 	.word	0x40020000

0800306c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003084:	b480      	push	{r7}
 8003086:	b08b      	sub	sp, #44	; 0x2c
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003096:	e169      	b.n	800336c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003098:	2201      	movs	r2, #1
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f040 8158 	bne.w	8003366 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4a9a      	ldr	r2, [pc, #616]	; (8003324 <HAL_GPIO_Init+0x2a0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d05e      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030c0:	4a98      	ldr	r2, [pc, #608]	; (8003324 <HAL_GPIO_Init+0x2a0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d875      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030c6:	4a98      	ldr	r2, [pc, #608]	; (8003328 <HAL_GPIO_Init+0x2a4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d058      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030cc:	4a96      	ldr	r2, [pc, #600]	; (8003328 <HAL_GPIO_Init+0x2a4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d86f      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030d2:	4a96      	ldr	r2, [pc, #600]	; (800332c <HAL_GPIO_Init+0x2a8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d052      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030d8:	4a94      	ldr	r2, [pc, #592]	; (800332c <HAL_GPIO_Init+0x2a8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d869      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030de:	4a94      	ldr	r2, [pc, #592]	; (8003330 <HAL_GPIO_Init+0x2ac>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d04c      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030e4:	4a92      	ldr	r2, [pc, #584]	; (8003330 <HAL_GPIO_Init+0x2ac>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d863      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030ea:	4a92      	ldr	r2, [pc, #584]	; (8003334 <HAL_GPIO_Init+0x2b0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d046      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030f0:	4a90      	ldr	r2, [pc, #576]	; (8003334 <HAL_GPIO_Init+0x2b0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d85d      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030f6:	2b12      	cmp	r3, #18
 80030f8:	d82a      	bhi.n	8003150 <HAL_GPIO_Init+0xcc>
 80030fa:	2b12      	cmp	r3, #18
 80030fc:	d859      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <HAL_GPIO_Init+0x80>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	0800317f 	.word	0x0800317f
 8003108:	08003159 	.word	0x08003159
 800310c:	0800316b 	.word	0x0800316b
 8003110:	080031ad 	.word	0x080031ad
 8003114:	080031b3 	.word	0x080031b3
 8003118:	080031b3 	.word	0x080031b3
 800311c:	080031b3 	.word	0x080031b3
 8003120:	080031b3 	.word	0x080031b3
 8003124:	080031b3 	.word	0x080031b3
 8003128:	080031b3 	.word	0x080031b3
 800312c:	080031b3 	.word	0x080031b3
 8003130:	080031b3 	.word	0x080031b3
 8003134:	080031b3 	.word	0x080031b3
 8003138:	080031b3 	.word	0x080031b3
 800313c:	080031b3 	.word	0x080031b3
 8003140:	080031b3 	.word	0x080031b3
 8003144:	080031b3 	.word	0x080031b3
 8003148:	08003161 	.word	0x08003161
 800314c:	08003175 	.word	0x08003175
 8003150:	4a79      	ldr	r2, [pc, #484]	; (8003338 <HAL_GPIO_Init+0x2b4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003156:	e02c      	b.n	80031b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	623b      	str	r3, [r7, #32]
          break;
 800315e:	e029      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	3304      	adds	r3, #4
 8003166:	623b      	str	r3, [r7, #32]
          break;
 8003168:	e024      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	3308      	adds	r3, #8
 8003170:	623b      	str	r3, [r7, #32]
          break;
 8003172:	e01f      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	330c      	adds	r3, #12
 800317a:	623b      	str	r3, [r7, #32]
          break;
 800317c:	e01a      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003186:	2304      	movs	r3, #4
 8003188:	623b      	str	r3, [r7, #32]
          break;
 800318a:	e013      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003194:	2308      	movs	r3, #8
 8003196:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	611a      	str	r2, [r3, #16]
          break;
 800319e:	e009      	b.n	80031b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031a0:	2308      	movs	r3, #8
 80031a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	615a      	str	r2, [r3, #20]
          break;
 80031aa:	e003      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
          break;
 80031b0:	e000      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          break;
 80031b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2bff      	cmp	r3, #255	; 0xff
 80031b8:	d801      	bhi.n	80031be <HAL_GPIO_Init+0x13a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	e001      	b.n	80031c2 <HAL_GPIO_Init+0x13e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2bff      	cmp	r3, #255	; 0xff
 80031c8:	d802      	bhi.n	80031d0 <HAL_GPIO_Init+0x14c>
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	e002      	b.n	80031d6 <HAL_GPIO_Init+0x152>
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	3b08      	subs	r3, #8
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	210f      	movs	r1, #15
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	fa01 f303 	lsl.w	r3, r1, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	6a39      	ldr	r1, [r7, #32]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	431a      	orrs	r2, r3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 80b1 	beq.w	8003366 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003204:	4b4d      	ldr	r3, [pc, #308]	; (800333c <HAL_GPIO_Init+0x2b8>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	4a4c      	ldr	r2, [pc, #304]	; (800333c <HAL_GPIO_Init+0x2b8>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6193      	str	r3, [r2, #24]
 8003210:	4b4a      	ldr	r3, [pc, #296]	; (800333c <HAL_GPIO_Init+0x2b8>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800321c:	4a48      	ldr	r2, [pc, #288]	; (8003340 <HAL_GPIO_Init+0x2bc>)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	220f      	movs	r2, #15
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a40      	ldr	r2, [pc, #256]	; (8003344 <HAL_GPIO_Init+0x2c0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d013      	beq.n	8003270 <HAL_GPIO_Init+0x1ec>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3f      	ldr	r2, [pc, #252]	; (8003348 <HAL_GPIO_Init+0x2c4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00d      	beq.n	800326c <HAL_GPIO_Init+0x1e8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3e      	ldr	r2, [pc, #248]	; (800334c <HAL_GPIO_Init+0x2c8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <HAL_GPIO_Init+0x1e4>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3d      	ldr	r2, [pc, #244]	; (8003350 <HAL_GPIO_Init+0x2cc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <HAL_GPIO_Init+0x1e0>
 8003260:	2303      	movs	r3, #3
 8003262:	e006      	b.n	8003272 <HAL_GPIO_Init+0x1ee>
 8003264:	2304      	movs	r3, #4
 8003266:	e004      	b.n	8003272 <HAL_GPIO_Init+0x1ee>
 8003268:	2302      	movs	r3, #2
 800326a:	e002      	b.n	8003272 <HAL_GPIO_Init+0x1ee>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_GPIO_Init+0x1ee>
 8003270:	2300      	movs	r3, #0
 8003272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003274:	f002 0203 	and.w	r2, r2, #3
 8003278:	0092      	lsls	r2, r2, #2
 800327a:	4093      	lsls	r3, r2
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003282:	492f      	ldr	r1, [pc, #188]	; (8003340 <HAL_GPIO_Init+0x2bc>)
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d006      	beq.n	80032aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800329c:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	492c      	ldr	r1, [pc, #176]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	600b      	str	r3, [r1, #0]
 80032a8:	e006      	b.n	80032b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032aa:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	4928      	ldr	r1, [pc, #160]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d006      	beq.n	80032d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032c4:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	4922      	ldr	r1, [pc, #136]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
 80032d0:	e006      	b.n	80032e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	43db      	mvns	r3, r3
 80032da:	491e      	ldr	r1, [pc, #120]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032dc:	4013      	ands	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	4918      	ldr	r1, [pc, #96]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032fa:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	43db      	mvns	r3, r3
 8003302:	4914      	ldr	r1, [pc, #80]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 8003304:	4013      	ands	r3, r2
 8003306:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d021      	beq.n	8003358 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	490e      	ldr	r1, [pc, #56]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	60cb      	str	r3, [r1, #12]
 8003320:	e021      	b.n	8003366 <HAL_GPIO_Init+0x2e2>
 8003322:	bf00      	nop
 8003324:	10320000 	.word	0x10320000
 8003328:	10310000 	.word	0x10310000
 800332c:	10220000 	.word	0x10220000
 8003330:	10210000 	.word	0x10210000
 8003334:	10120000 	.word	0x10120000
 8003338:	10110000 	.word	0x10110000
 800333c:	40021000 	.word	0x40021000
 8003340:	40010000 	.word	0x40010000
 8003344:	40010800 	.word	0x40010800
 8003348:	40010c00 	.word	0x40010c00
 800334c:	40011000 	.word	0x40011000
 8003350:	40011400 	.word	0x40011400
 8003354:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_GPIO_Init+0x304>)
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	43db      	mvns	r3, r3
 8003360:	4909      	ldr	r1, [pc, #36]	; (8003388 <HAL_GPIO_Init+0x304>)
 8003362:	4013      	ands	r3, r2
 8003364:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	3301      	adds	r3, #1
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	f47f ae8e 	bne.w	8003098 <HAL_GPIO_Init+0x14>
  }
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	372c      	adds	r7, #44	; 0x2c
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40010400 	.word	0x40010400

0800338c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	; 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800339a:	e09a      	b.n	80034d2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 808d 	beq.w	80034cc <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80033b2:	4a4e      	ldr	r2, [pc, #312]	; (80034ec <HAL_GPIO_DeInit+0x160>)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	3302      	adds	r3, #2
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4013      	ands	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a46      	ldr	r2, [pc, #280]	; (80034f0 <HAL_GPIO_DeInit+0x164>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d013      	beq.n	8003404 <HAL_GPIO_DeInit+0x78>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a45      	ldr	r2, [pc, #276]	; (80034f4 <HAL_GPIO_DeInit+0x168>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00d      	beq.n	8003400 <HAL_GPIO_DeInit+0x74>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a44      	ldr	r2, [pc, #272]	; (80034f8 <HAL_GPIO_DeInit+0x16c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <HAL_GPIO_DeInit+0x70>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a43      	ldr	r2, [pc, #268]	; (80034fc <HAL_GPIO_DeInit+0x170>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d101      	bne.n	80033f8 <HAL_GPIO_DeInit+0x6c>
 80033f4:	2303      	movs	r3, #3
 80033f6:	e006      	b.n	8003406 <HAL_GPIO_DeInit+0x7a>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e004      	b.n	8003406 <HAL_GPIO_DeInit+0x7a>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e002      	b.n	8003406 <HAL_GPIO_DeInit+0x7a>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <HAL_GPIO_DeInit+0x7a>
 8003404:	2300      	movs	r3, #0
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	f002 0203 	and.w	r2, r2, #3
 800340c:	0092      	lsls	r2, r2, #2
 800340e:	4093      	lsls	r3, r2
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	429a      	cmp	r2, r3
 8003414:	d132      	bne.n	800347c <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	220f      	movs	r2, #15
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003426:	4a31      	ldr	r2, [pc, #196]	; (80034ec <HAL_GPIO_DeInit+0x160>)
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	3302      	adds	r3, #2
 800342e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	43da      	mvns	r2, r3
 8003436:	482d      	ldr	r0, [pc, #180]	; (80034ec <HAL_GPIO_DeInit+0x160>)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	400a      	ands	r2, r1
 800343e:	3302      	adds	r3, #2
 8003440:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003444:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_GPIO_DeInit+0x174>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	43db      	mvns	r3, r3
 800344c:	492c      	ldr	r1, [pc, #176]	; (8003500 <HAL_GPIO_DeInit+0x174>)
 800344e:	4013      	ands	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003452:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_GPIO_DeInit+0x174>)
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	43db      	mvns	r3, r3
 800345a:	4929      	ldr	r1, [pc, #164]	; (8003500 <HAL_GPIO_DeInit+0x174>)
 800345c:	4013      	ands	r3, r2
 800345e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003460:	4b27      	ldr	r3, [pc, #156]	; (8003500 <HAL_GPIO_DeInit+0x174>)
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	43db      	mvns	r3, r3
 8003468:	4925      	ldr	r1, [pc, #148]	; (8003500 <HAL_GPIO_DeInit+0x174>)
 800346a:	4013      	ands	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_GPIO_DeInit+0x174>)
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	43db      	mvns	r3, r3
 8003476:	4922      	ldr	r1, [pc, #136]	; (8003500 <HAL_GPIO_DeInit+0x174>)
 8003478:	4013      	ands	r3, r2
 800347a:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2bff      	cmp	r3, #255	; 0xff
 8003480:	d801      	bhi.n	8003486 <HAL_GPIO_DeInit+0xfa>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	e001      	b.n	800348a <HAL_GPIO_DeInit+0xfe>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2bff      	cmp	r3, #255	; 0xff
 8003490:	d802      	bhi.n	8003498 <HAL_GPIO_DeInit+0x10c>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	e002      	b.n	800349e <HAL_GPIO_DeInit+0x112>
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	3b08      	subs	r3, #8
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	210f      	movs	r1, #15
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	401a      	ands	r2, r3
 80034b0:	2104      	movs	r1, #4
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	431a      	orrs	r2, r3
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	401a      	ands	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
    }

    position++;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	3301      	adds	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f47f af5e 	bne.w	800339c <HAL_GPIO_DeInit+0x10>
  }
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	40010000 	.word	0x40010000
 80034f0:	40010800 	.word	0x40010800
 80034f4:	40010c00 	.word	0x40010c00
 80034f8:	40011000 	.word	0x40011000
 80034fc:	40011400 	.word	0x40011400
 8003500:	40010400 	.word	0x40010400

08003504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	887b      	ldrh	r3, [r7, #2]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	e001      	b.n	8003526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003526:	7bfb      	ldrb	r3, [r7, #15]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	807b      	strh	r3, [r7, #2]
 800353e:	4613      	mov	r3, r2
 8003540:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003542:	787b      	ldrb	r3, [r7, #1]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003548:	887a      	ldrh	r2, [r7, #2]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800354e:	e003      	b.n	8003558 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003550:	887b      	ldrh	r3, [r7, #2]
 8003552:	041a      	lsls	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	611a      	str	r2, [r3, #16]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr
	...

08003564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e12b      	b.n	80037ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff f85c 	bl	8002648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035c8:	f002 faaa 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
 80035cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4a81      	ldr	r2, [pc, #516]	; (80037d8 <HAL_I2C_Init+0x274>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d807      	bhi.n	80035e8 <HAL_I2C_Init+0x84>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a80      	ldr	r2, [pc, #512]	; (80037dc <HAL_I2C_Init+0x278>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	bf94      	ite	ls
 80035e0:	2301      	movls	r3, #1
 80035e2:	2300      	movhi	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e006      	b.n	80035f6 <HAL_I2C_Init+0x92>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a7d      	ldr	r2, [pc, #500]	; (80037e0 <HAL_I2C_Init+0x27c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bf94      	ite	ls
 80035f0:	2301      	movls	r3, #1
 80035f2:	2300      	movhi	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0e7      	b.n	80037ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4a78      	ldr	r2, [pc, #480]	; (80037e4 <HAL_I2C_Init+0x280>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	0c9b      	lsrs	r3, r3, #18
 8003608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4a6a      	ldr	r2, [pc, #424]	; (80037d8 <HAL_I2C_Init+0x274>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d802      	bhi.n	8003638 <HAL_I2C_Init+0xd4>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	3301      	adds	r3, #1
 8003636:	e009      	b.n	800364c <HAL_I2C_Init+0xe8>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	4a69      	ldr	r2, [pc, #420]	; (80037e8 <HAL_I2C_Init+0x284>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	099b      	lsrs	r3, r3, #6
 800364a:	3301      	adds	r3, #1
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	430b      	orrs	r3, r1
 8003652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800365e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	495c      	ldr	r1, [pc, #368]	; (80037d8 <HAL_I2C_Init+0x274>)
 8003668:	428b      	cmp	r3, r1
 800366a:	d819      	bhi.n	80036a0 <HAL_I2C_Init+0x13c>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e59      	subs	r1, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fbb1 f3f3 	udiv	r3, r1, r3
 800367a:	1c59      	adds	r1, r3, #1
 800367c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003680:	400b      	ands	r3, r1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_I2C_Init+0x138>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1e59      	subs	r1, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fbb1 f3f3 	udiv	r3, r1, r3
 8003694:	3301      	adds	r3, #1
 8003696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369a:	e051      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 800369c:	2304      	movs	r3, #4
 800369e:	e04f      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_I2C_Init+0x168>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e012      	b.n	80036f2 <HAL_I2C_Init+0x18e>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	0099      	lsls	r1, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Init+0x196>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e022      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10e      	bne.n	8003720 <HAL_I2C_Init+0x1bc>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1e58      	subs	r0, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	440b      	add	r3, r1
 8003710:	fbb0 f3f3 	udiv	r3, r0, r3
 8003714:	3301      	adds	r3, #1
 8003716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	e00f      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e58      	subs	r0, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	0099      	lsls	r1, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	fbb0 f3f3 	udiv	r3, r0, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	6809      	ldr	r1, [r1, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800376e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6911      	ldr	r1, [r2, #16]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	000186a0 	.word	0x000186a0
 80037dc:	001e847f 	.word	0x001e847f
 80037e0:	003d08ff 	.word	0x003d08ff
 80037e4:	431bde83 	.word	0x431bde83
 80037e8:	10624dd3 	.word	0x10624dd3

080037ec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e021      	b.n	8003842 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2224      	movs	r2, #36	; 0x24
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0201 	bic.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fe ffa2 	bl	8002760 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800384a:	b480      	push	{r7}
 800384c:	b087      	sub	sp, #28
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003866:	2b28      	cmp	r3, #40	; 0x28
 8003868:	d15b      	bne.n	8003922 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e054      	b.n	8003924 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8003884:	2302      	movs	r3, #2
 8003886:	e04d      	b.n	8003924 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d007      	beq.n	80038ae <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038bc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2229      	movs	r2, #41	; 0x29
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	88fa      	ldrh	r2, [r7, #6]
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800391c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800392e:	b480      	push	{r7}
 8003930:	b087      	sub	sp, #28
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	4613      	mov	r3, r2
 800393c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800394a:	2b28      	cmp	r3, #40	; 0x28
 800394c:	d15b      	bne.n	8003a06 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e054      	b.n	8003a08 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8003968:	2302      	movs	r3, #2
 800396a:	e04d      	b.n	8003a08 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d007      	beq.n	8003992 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	222a      	movs	r2, #42	; 0x2a
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	88fa      	ldrh	r2, [r7, #6]
 80039c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003a00:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d124      	bne.n	8003a70 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2228      	movs	r2, #40	; 0x28
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d007      	beq.n	8003a4c <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a5a:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003a6a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d003      	beq.n	8003ab4 <HAL_I2C_EV_IRQHandler+0x38>
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	f040 80c1 	bne.w	8003c36 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <HAL_I2C_EV_IRQHandler+0x6e>
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ad4:	d003      	beq.n	8003ade <HAL_I2C_EV_IRQHandler+0x62>
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003adc:	d101      	bne.n	8003ae2 <HAL_I2C_EV_IRQHandler+0x66>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_I2C_EV_IRQHandler+0x68>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	f000 8132 	beq.w	8003d4e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00c      	beq.n	8003b0e <HAL_I2C_EV_IRQHandler+0x92>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	0a5b      	lsrs	r3, r3, #9
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d006      	beq.n	8003b0e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f001 fc4d 	bl	80053a0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fd4f 	bl	80045aa <I2C_Master_SB>
 8003b0c:	e092      	b.n	8003c34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	08db      	lsrs	r3, r3, #3
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <HAL_I2C_EV_IRQHandler+0xb2>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	0a5b      	lsrs	r3, r3, #9
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fdc4 	bl	80046b4 <I2C_Master_ADD10>
 8003b2c:	e082      	b.n	8003c34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_I2C_EV_IRQHandler+0xd2>
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	0a5b      	lsrs	r3, r3, #9
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fddd 	bl	8004706 <I2C_Master_ADDR>
 8003b4c:	e072      	b.n	8003c34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d03b      	beq.n	8003bd2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b68:	f000 80f3 	beq.w	8003d52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	09db      	lsrs	r3, r3, #7
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00f      	beq.n	8003b98 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	0a9b      	lsrs	r3, r3, #10
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	089b      	lsrs	r3, r3, #2
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d103      	bne.n	8003b98 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9c9 	bl	8003f28 <I2C_MasterTransmit_TXE>
 8003b96:	e04d      	b.n	8003c34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	089b      	lsrs	r3, r3, #2
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80d6 	beq.w	8003d52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	0a5b      	lsrs	r3, r3, #9
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80cf 	beq.w	8003d52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003bb4:	7bbb      	ldrb	r3, [r7, #14]
 8003bb6:	2b21      	cmp	r3, #33	; 0x21
 8003bb8:	d103      	bne.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fa50 	bl	8004060 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bc0:	e0c7      	b.n	8003d52 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	f040 80c4 	bne.w	8003d52 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fabe 	bl	800414c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bd0:	e0bf      	b.n	8003d52 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be0:	f000 80b7 	beq.w	8003d52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00f      	beq.n	8003c10 <HAL_I2C_EV_IRQHandler+0x194>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	0a9b      	lsrs	r3, r3, #10
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <HAL_I2C_EV_IRQHandler+0x194>
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d103      	bne.n	8003c10 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fb33 	bl	8004274 <I2C_MasterReceive_RXNE>
 8003c0e:	e011      	b.n	8003c34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 809a 	beq.w	8003d52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	0a5b      	lsrs	r3, r3, #9
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 8093 	beq.w	8003d52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fbd2 	bl	80043d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c32:	e08e      	b.n	8003d52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c34:	e08d      	b.n	8003d52 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	e007      	b.n	8003c58 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d012      	beq.n	8003c8a <HAL_I2C_EV_IRQHandler+0x20e>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	0a5b      	lsrs	r3, r3, #9
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00c      	beq.n	8003c8a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c80:	69b9      	ldr	r1, [r7, #24]
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 ff96 	bl	8004bb4 <I2C_Slave_ADDR>
 8003c88:	e066      	b.n	8003d58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <HAL_I2C_EV_IRQHandler+0x22e>
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	0a5b      	lsrs	r3, r3, #9
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 ffd0 	bl	8004c48 <I2C_Slave_STOPF>
 8003ca8:	e056      	b.n	8003d58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003caa:	7bbb      	ldrb	r3, [r7, #14]
 8003cac:	2b21      	cmp	r3, #33	; 0x21
 8003cae:	d002      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x23a>
 8003cb0:	7bbb      	ldrb	r3, [r7, #14]
 8003cb2:	2b29      	cmp	r3, #41	; 0x29
 8003cb4:	d125      	bne.n	8003d02 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	09db      	lsrs	r3, r3, #7
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00f      	beq.n	8003ce2 <HAL_I2C_EV_IRQHandler+0x266>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	0a9b      	lsrs	r3, r3, #10
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_I2C_EV_IRQHandler+0x266>
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	089b      	lsrs	r3, r3, #2
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 feae 	bl	8004a3c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ce0:	e039      	b.n	8003d56 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	089b      	lsrs	r3, r3, #2
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d033      	beq.n	8003d56 <HAL_I2C_EV_IRQHandler+0x2da>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	0a5b      	lsrs	r3, r3, #9
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d02d      	beq.n	8003d56 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fedb 	bl	8004ab6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d00:	e029      	b.n	8003d56 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00f      	beq.n	8003d2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	0a9b      	lsrs	r3, r3, #10
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	089b      	lsrs	r3, r3, #2
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fee5 	bl	8004af6 <I2C_SlaveReceive_RXNE>
 8003d2c:	e014      	b.n	8003d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00e      	beq.n	8003d58 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	0a5b      	lsrs	r3, r3, #9
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 ff13 	bl	8004b72 <I2C_SlaveReceive_BTF>
 8003d4c:	e004      	b.n	8003d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003d4e:	bf00      	nop
 8003d50:	e002      	b.n	8003d58 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d56:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b08a      	sub	sp, #40	; 0x28
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d80:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	0a1b      	lsrs	r3, r3, #8
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_I2C_ER_IRQHandler+0x5e>
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d010      	beq.n	8003dbc <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003daa:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dba:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	0a5b      	lsrs	r3, r3, #9
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00e      	beq.n	8003de6 <HAL_I2C_ER_IRQHandler+0x88>
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	f043 0302 	orr.w	r3, r3, #2
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003de4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	0a9b      	lsrs	r3, r3, #10
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d03f      	beq.n	8003e72 <HAL_I2C_ER_IRQHandler+0x114>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d039      	beq.n	8003e72 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003dfe:	7efb      	ldrb	r3, [r7, #27]
 8003e00:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003e18:	7ebb      	ldrb	r3, [r7, #26]
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d112      	bne.n	8003e44 <HAL_I2C_ER_IRQHandler+0xe6>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10f      	bne.n	8003e44 <HAL_I2C_ER_IRQHandler+0xe6>
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	2b21      	cmp	r3, #33	; 0x21
 8003e28:	d008      	beq.n	8003e3c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003e2a:	7cfb      	ldrb	r3, [r7, #19]
 8003e2c:	2b29      	cmp	r3, #41	; 0x29
 8003e2e:	d005      	beq.n	8003e3c <HAL_I2C_ER_IRQHandler+0xde>
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	2b28      	cmp	r3, #40	; 0x28
 8003e34:	d106      	bne.n	8003e44 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b21      	cmp	r3, #33	; 0x21
 8003e3a:	d103      	bne.n	8003e44 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f001 f833 	bl	8004ea8 <I2C_Slave_AF>
 8003e42:	e016      	b.n	8003e72 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e4c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	f043 0304 	orr.w	r3, r3, #4
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e56:	7efb      	ldrb	r3, [r7, #27]
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d002      	beq.n	8003e62 <HAL_I2C_ER_IRQHandler+0x104>
 8003e5c:	7efb      	ldrb	r3, [r7, #27]
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d107      	bne.n	8003e72 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e70:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	0adb      	lsrs	r3, r3, #11
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00e      	beq.n	8003e9c <HAL_I2C_ER_IRQHandler+0x13e>
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	f043 0308 	orr.w	r3, r3, #8
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003e9a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f001 f86a 	bl	8004f88 <I2C_ITError>
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	3728      	adds	r7, #40	; 0x28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d150      	bne.n	8003ff0 <I2C_MasterTransmit_TXE+0xc8>
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b21      	cmp	r3, #33	; 0x21
 8003f52:	d14d      	bne.n	8003ff0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d01d      	beq.n	8003f96 <I2C_MasterTransmit_TXE+0x6e>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d01a      	beq.n	8003f96 <I2C_MasterTransmit_TXE+0x6e>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f66:	d016      	beq.n	8003f96 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f76:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2211      	movs	r2, #17
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ff94 	bl	8003ebc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f94:	e060      	b.n	8004058 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fa4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d107      	bne.n	8003fe0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff ff8a 	bl	8003ef2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fde:	e03b      	b.n	8004058 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff67 	bl	8003ebc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fee:	e033      	b.n	8004058 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b21      	cmp	r3, #33	; 0x21
 8003ff4:	d005      	beq.n	8004002 <I2C_MasterTransmit_TXE+0xda>
 8003ff6:	7bbb      	ldrb	r3, [r7, #14]
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d12d      	bne.n	8004058 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	2b22      	cmp	r3, #34	; 0x22
 8004000:	d12a      	bne.n	8004058 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d108      	bne.n	800401e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800401c:	e01c      	b.n	8004058 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b40      	cmp	r3, #64	; 0x40
 8004028:	d103      	bne.n	8004032 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f88e 	bl	800414c <I2C_MemoryTransmit_TXE_BTF>
}
 8004030:	e012      	b.n	8004058 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	781a      	ldrb	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004056:	e7ff      	b.n	8004058 <I2C_MasterTransmit_TXE+0x130>
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b21      	cmp	r3, #33	; 0x21
 8004078:	d164      	bne.n	8004144 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d012      	beq.n	80040aa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	781a      	ldrb	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80040a8:	e04c      	b.n	8004144 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d01d      	beq.n	80040ec <I2C_MasterTransmit_BTF+0x8c>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d01a      	beq.n	80040ec <I2C_MasterTransmit_BTF+0x8c>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040bc:	d016      	beq.n	80040ec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040cc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2211      	movs	r2, #17
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fee9 	bl	8003ebc <HAL_I2C_MasterTxCpltCallback>
}
 80040ea:	e02b      	b.n	8004144 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040fa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d107      	bne.n	8004136 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fedf 	bl	8003ef2 <HAL_I2C_MemTxCpltCallback>
}
 8004134:	e006      	b.n	8004144 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff febc 	bl	8003ebc <HAL_I2C_MasterTxCpltCallback>
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004160:	2b00      	cmp	r3, #0
 8004162:	d11d      	bne.n	80041a0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d10b      	bne.n	8004184 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004170:	b2da      	uxtb	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417c:	1c9a      	adds	r2, r3, #2
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004182:	e073      	b.n	800426c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004188:	b29b      	uxth	r3, r3
 800418a:	121b      	asrs	r3, r3, #8
 800418c:	b2da      	uxtb	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800419e:	e065      	b.n	800426c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10b      	bne.n	80041c0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041be:	e055      	b.n	800426c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d151      	bne.n	800426c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b22      	cmp	r3, #34	; 0x22
 80041cc:	d10d      	bne.n	80041ea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041dc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041e8:	e040      	b.n	800426c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b21      	cmp	r3, #33	; 0x21
 80041f8:	d112      	bne.n	8004220 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800421e:	e025      	b.n	800426c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d120      	bne.n	800426c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	2b21      	cmp	r3, #33	; 0x21
 800422e:	d11d      	bne.n	800426c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800423e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fe43 	bl	8003ef2 <HAL_I2C_MemTxCpltCallback>
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b22      	cmp	r3, #34	; 0x22
 8004286:	f040 80a2 	bne.w	80043ce <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d921      	bls.n	80042dc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	f040 8082 	bne.w	80043ce <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80042da:	e078      	b.n	80043ce <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d074      	beq.n	80043ce <I2C_MasterReceive_RXNE+0x15a>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d002      	beq.n	80042f0 <I2C_MasterReceive_RXNE+0x7c>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d16e      	bne.n	80043ce <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f001 f823 	bl	800533c <I2C_WaitOnSTOPRequestThroughIT>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d142      	bne.n	8004382 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800431a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d10a      	bne.n	800436c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fdcd 	bl	8003f04 <HAL_I2C_MemRxCpltCallback>
}
 800436a:	e030      	b.n	80043ce <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2212      	movs	r2, #18
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fda7 	bl	8003ece <HAL_I2C_MasterRxCpltCallback>
}
 8004380:	e025      	b.n	80043ce <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004390:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fc ffd7 	bl	800137c <HAL_I2C_ErrorCallback>
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d11b      	bne.n	8004426 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004424:	e0bd      	b.n	80045a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b03      	cmp	r3, #3
 800442e:	d129      	bne.n	8004484 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b04      	cmp	r3, #4
 8004444:	d00a      	beq.n	800445c <I2C_MasterReceive_BTF+0x86>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d007      	beq.n	800445c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004482:	e08e      	b.n	80045a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d176      	bne.n	800457c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d002      	beq.n	800449a <I2C_MasterReceive_BTF+0xc4>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b10      	cmp	r3, #16
 8004498:	d108      	bne.n	80044ac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e019      	b.n	80044e0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d002      	beq.n	80044b8 <I2C_MasterReceive_BTF+0xe2>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d108      	bne.n	80044ca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e00a      	b.n	80044e0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d007      	beq.n	80044e0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800453a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b40      	cmp	r3, #64	; 0x40
 800454e:	d10a      	bne.n	8004566 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fcd0 	bl	8003f04 <HAL_I2C_MemRxCpltCallback>
}
 8004564:	e01d      	b.n	80045a2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2212      	movs	r2, #18
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff fcaa 	bl	8003ece <HAL_I2C_MasterRxCpltCallback>
}
 800457a:	e012      	b.n	80045a2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d117      	bne.n	80045ee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	461a      	mov	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045d6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80045d8:	e067      	b.n	80046aa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	611a      	str	r2, [r3, #16]
}
 80045ec:	e05d      	b.n	80046aa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f6:	d133      	bne.n	8004660 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b21      	cmp	r3, #33	; 0x21
 8004602:	d109      	bne.n	8004618 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004614:	611a      	str	r2, [r3, #16]
 8004616:	e008      	b.n	800462a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	b2da      	uxtb	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <I2C_Master_SB+0x92>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	2b00      	cmp	r3, #0
 800463a:	d108      	bne.n	800464e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	2b00      	cmp	r3, #0
 8004642:	d032      	beq.n	80046aa <I2C_Master_SB+0x100>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d02d      	beq.n	80046aa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465c:	605a      	str	r2, [r3, #4]
}
 800465e:	e024      	b.n	80046aa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10e      	bne.n	8004686 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	b29b      	uxth	r3, r3
 800466e:	11db      	asrs	r3, r3, #7
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f003 0306 	and.w	r3, r3, #6
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f063 030f 	orn	r3, r3, #15
 800467c:	b2da      	uxtb	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	611a      	str	r2, [r3, #16]
}
 8004684:	e011      	b.n	80046aa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	2b01      	cmp	r3, #1
 800468c:	d10d      	bne.n	80046aa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	b29b      	uxth	r3, r3
 8004694:	11db      	asrs	r3, r3, #7
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f003 0306 	and.w	r3, r3, #6
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f063 030e 	orn	r3, r3, #14
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	611a      	str	r2, [r3, #16]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <I2C_Master_ADD10+0x26>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d108      	bne.n	80046ec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <I2C_Master_ADD10+0x48>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fa:	605a      	str	r2, [r3, #4]
  }
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004706:	b480      	push	{r7}
 8004708:	b091      	sub	sp, #68	; 0x44
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004714:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b22      	cmp	r3, #34	; 0x22
 800472e:	f040 8174 	bne.w	8004a1a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10f      	bne.n	800475a <I2C_Master_ADDR+0x54>
 800473a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800473e:	2b40      	cmp	r3, #64	; 0x40
 8004740:	d10b      	bne.n	800475a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004742:	2300      	movs	r3, #0
 8004744:	633b      	str	r3, [r7, #48]	; 0x30
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	633b      	str	r3, [r7, #48]	; 0x30
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	e16b      	b.n	8004a32 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475e:	2b00      	cmp	r3, #0
 8004760:	d11d      	bne.n	800479e <I2C_Master_ADDR+0x98>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800476a:	d118      	bne.n	800479e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476c:	2300      	movs	r3, #0
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004790:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	651a      	str	r2, [r3, #80]	; 0x50
 800479c:	e149      	b.n	8004a32 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d113      	bne.n	80047d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a8:	2300      	movs	r3, #0
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e120      	b.n	8004a12 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	f040 808a 	bne.w	80048f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047e2:	d137      	bne.n	8004854 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004802:	d113      	bne.n	800482c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004812:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004814:	2300      	movs	r3, #0
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	e0f2      	b.n	8004a12 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482c:	2300      	movs	r3, #0
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	623b      	str	r3, [r7, #32]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	623b      	str	r3, [r7, #32]
 8004840:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e0de      	b.n	8004a12 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	2b08      	cmp	r3, #8
 8004858:	d02e      	beq.n	80048b8 <I2C_Master_ADDR+0x1b2>
 800485a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485c:	2b20      	cmp	r3, #32
 800485e:	d02b      	beq.n	80048b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004862:	2b12      	cmp	r3, #18
 8004864:	d102      	bne.n	800486c <I2C_Master_ADDR+0x166>
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	2b01      	cmp	r3, #1
 800486a:	d125      	bne.n	80048b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800486c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486e:	2b04      	cmp	r3, #4
 8004870:	d00e      	beq.n	8004890 <I2C_Master_ADDR+0x18a>
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	2b02      	cmp	r3, #2
 8004876:	d00b      	beq.n	8004890 <I2C_Master_ADDR+0x18a>
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	2b10      	cmp	r3, #16
 800487c:	d008      	beq.n	8004890 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e007      	b.n	80048a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800489e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	e0ac      	b.n	8004a12 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c8:	2300      	movs	r3, #0
 80048ca:	61bb      	str	r3, [r7, #24]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e090      	b.n	8004a12 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d158      	bne.n	80049ac <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d021      	beq.n	8004944 <I2C_Master_ADDR+0x23e>
 8004900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004902:	2b02      	cmp	r3, #2
 8004904:	d01e      	beq.n	8004944 <I2C_Master_ADDR+0x23e>
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	2b10      	cmp	r3, #16
 800490a:	d01b      	beq.n	8004944 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800491a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e012      	b.n	800496a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004952:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004954:	2300      	movs	r3, #0
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004978:	d14b      	bne.n	8004a12 <I2C_Master_ADDR+0x30c>
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004980:	d00b      	beq.n	800499a <I2C_Master_ADDR+0x294>
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	2b01      	cmp	r3, #1
 8004986:	d008      	beq.n	800499a <I2C_Master_ADDR+0x294>
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	2b08      	cmp	r3, #8
 800498c:	d005      	beq.n	800499a <I2C_Master_ADDR+0x294>
 800498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004990:	2b10      	cmp	r3, #16
 8004992:	d002      	beq.n	800499a <I2C_Master_ADDR+0x294>
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	2b20      	cmp	r3, #32
 8004998:	d13b      	bne.n	8004a12 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	e032      	b.n	8004a12 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049ba:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ca:	d117      	bne.n	80049fc <I2C_Master_ADDR+0x2f6>
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049d2:	d00b      	beq.n	80049ec <I2C_Master_ADDR+0x2e6>
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d008      	beq.n	80049ec <I2C_Master_ADDR+0x2e6>
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d005      	beq.n	80049ec <I2C_Master_ADDR+0x2e6>
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	2b10      	cmp	r3, #16
 80049e4:	d002      	beq.n	80049ec <I2C_Master_ADDR+0x2e6>
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d107      	bne.n	80049fc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049fa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a18:	e00b      	b.n	8004a32 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
}
 8004a30:	e7ff      	b.n	8004a32 <I2C_Master_ADDR+0x32c>
 8004a32:	bf00      	nop
 8004a34:	3744      	adds	r7, #68	; 0x44
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02b      	beq.n	8004aae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d114      	bne.n	8004aae <I2C_SlaveTransmit_TXE+0x72>
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	2b29      	cmp	r3, #41	; 0x29
 8004a88:	d111      	bne.n	8004aae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a98:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2221      	movs	r2, #33	; 0x21
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2228      	movs	r2, #40	; 0x28
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fa19 	bl	8003ee0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d011      	beq.n	8004aec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr

08004af6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d02c      	beq.n	8004b6a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d114      	bne.n	8004b6a <I2C_SlaveReceive_RXNE+0x74>
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b2a      	cmp	r3, #42	; 0x2a
 8004b44:	d111      	bne.n	8004b6a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2222      	movs	r2, #34	; 0x22
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2228      	movs	r2, #40	; 0x28
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fc fbab 	bl	80012c0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d012      	beq.n	8004baa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bce:	2b28      	cmp	r3, #40	; 0x28
 8004bd0:	d127      	bne.n	8004c22 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	089b      	lsrs	r3, r3, #2
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	09db      	lsrs	r3, r3, #7
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	81bb      	strh	r3, [r7, #12]
 8004c04:	e002      	b.n	8004c0c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c14:	89ba      	ldrh	r2, [r7, #12]
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc fb02 	bl	8001224 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c20:	e00e      	b.n	8004c40 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca4:	d172      	bne.n	8004d8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	2b22      	cmp	r3, #34	; 0x22
 8004caa:	d002      	beq.n	8004cb2 <I2C_Slave_STOPF+0x6a>
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b2a      	cmp	r3, #42	; 0x2a
 8004cb0:	d135      	bne.n	8004d1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f043 0204 	orr.w	r2, r3, #4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe f9be 	bl	800306c <HAL_DMA_GetState>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d049      	beq.n	8004d8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	4a69      	ldr	r2, [pc, #420]	; (8004ea0 <I2C_Slave_STOPF+0x258>)
 8004cfc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe f93c 	bl	8002f80 <HAL_DMA_Abort_IT>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d03d      	beq.n	8004d8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d1c:	e035      	b.n	8004d8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f043 0204 	orr.w	r2, r3, #4
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe f988 	bl	800306c <HAL_DMA_GetState>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d014      	beq.n	8004d8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d66:	4a4e      	ldr	r2, [pc, #312]	; (8004ea0 <I2C_Slave_STOPF+0x258>)
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe f906 	bl	8002f80 <HAL_DMA_Abort_IT>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d84:	4610      	mov	r0, r2
 8004d86:	4798      	blx	r3
 8004d88:	e000      	b.n	8004d8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d03e      	beq.n	8004e14 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d112      	bne.n	8004dca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d112      	bne.n	8004dfe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f043 0204 	orr.w	r2, r3, #4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f8b3 	bl	8004f88 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e22:	e039      	b.n	8004e98 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b2a      	cmp	r3, #42	; 0x2a
 8004e28:	d109      	bne.n	8004e3e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2228      	movs	r2, #40	; 0x28
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fc fa41 	bl	80012c0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b28      	cmp	r3, #40	; 0x28
 8004e48:	d111      	bne.n	8004e6e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <I2C_Slave_STOPF+0x25c>)
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fc fa9c 	bl	80013a4 <HAL_I2C_ListenCpltCallback>
}
 8004e6c:	e014      	b.n	8004e98 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	2b22      	cmp	r3, #34	; 0x22
 8004e74:	d002      	beq.n	8004e7c <I2C_Slave_STOPF+0x234>
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b22      	cmp	r3, #34	; 0x22
 8004e7a:	d10d      	bne.n	8004e98 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc fa14 	bl	80012c0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	080051ed 	.word	0x080051ed
 8004ea4:	ffff0000 	.word	0xffff0000

08004ea8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d002      	beq.n	8004eca <I2C_Slave_AF+0x22>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d129      	bne.n	8004f1e <I2C_Slave_AF+0x76>
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b28      	cmp	r3, #40	; 0x28
 8004ece:	d126      	bne.n	8004f1e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a2c      	ldr	r2, [pc, #176]	; (8004f84 <I2C_Slave_AF+0xdc>)
 8004ed4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ee4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc fa44 	bl	80013a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004f1c:	e02e      	b.n	8004f7c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b21      	cmp	r3, #33	; 0x21
 8004f22:	d126      	bne.n	8004f72 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <I2C_Slave_AF+0xdc>)
 8004f28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2221      	movs	r2, #33	; 0x21
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f4e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f58:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f68:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fe ffb8 	bl	8003ee0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f70:	e004      	b.n	8004f7c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f7a:	615a      	str	r2, [r3, #20]
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	ffff0000 	.word	0xffff0000

08004f88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fa0:	7bbb      	ldrb	r3, [r7, #14]
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d002      	beq.n	8004fac <I2C_ITError+0x24>
 8004fa6:	7bbb      	ldrb	r3, [r7, #14]
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d10a      	bne.n	8004fc2 <I2C_ITError+0x3a>
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	2b22      	cmp	r3, #34	; 0x22
 8004fb0:	d107      	bne.n	8004fc2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fc8:	2b28      	cmp	r3, #40	; 0x28
 8004fca:	d107      	bne.n	8004fdc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2228      	movs	r2, #40	; 0x28
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fda:	e015      	b.n	8005008 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fea:	d00a      	beq.n	8005002 <I2C_ITError+0x7a>
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b60      	cmp	r3, #96	; 0x60
 8004ff0:	d007      	beq.n	8005002 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d161      	bne.n	80050dc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005026:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005030:	2b01      	cmp	r3, #1
 8005032:	d020      	beq.n	8005076 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005038:	4a6a      	ldr	r2, [pc, #424]	; (80051e4 <I2C_ITError+0x25c>)
 800503a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005040:	4618      	mov	r0, r3
 8005042:	f7fd ff9d 	bl	8002f80 <HAL_DMA_Abort_IT>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8089 	beq.w	8005160 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005070:	4610      	mov	r0, r2
 8005072:	4798      	blx	r3
 8005074:	e074      	b.n	8005160 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	4a5a      	ldr	r2, [pc, #360]	; (80051e4 <I2C_ITError+0x25c>)
 800507c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	4618      	mov	r0, r3
 8005084:	f7fd ff7c 	bl	8002f80 <HAL_DMA_Abort_IT>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d068      	beq.n	8005160 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d10b      	bne.n	80050b4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050d6:	4610      	mov	r0, r2
 80050d8:	4798      	blx	r3
 80050da:	e041      	b.n	8005160 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b60      	cmp	r3, #96	; 0x60
 80050e6:	d125      	bne.n	8005134 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	d10b      	bne.n	800511c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0201 	bic.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7fe fef2 	bl	8003f16 <HAL_I2C_AbortCpltCallback>
 8005132:	e015      	b.n	8005160 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d10b      	bne.n	800515a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fc f90e 	bl	800137c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10e      	bne.n	800518e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800519c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d113      	bne.n	80051da <I2C_ITError+0x252>
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	2b28      	cmp	r3, #40	; 0x28
 80051b6:	d110      	bne.n	80051da <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a0b      	ldr	r2, [pc, #44]	; (80051e8 <I2C_ITError+0x260>)
 80051bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fc f8e5 	bl	80013a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051da:	bf00      	nop
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	080051ed 	.word	0x080051ed
 80051e8:	ffff0000 	.word	0xffff0000

080051ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005204:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005206:	4b4b      	ldr	r3, [pc, #300]	; (8005334 <I2C_DMAAbort+0x148>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	08db      	lsrs	r3, r3, #3
 800520c:	4a4a      	ldr	r2, [pc, #296]	; (8005338 <I2C_DMAAbort+0x14c>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	0a1a      	lsrs	r2, r3, #8
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	00da      	lsls	r2, r3, #3
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005232:	e00a      	b.n	800524a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3b01      	subs	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005248:	d0ea      	beq.n	8005220 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005256:	2200      	movs	r2, #0
 8005258:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	2200      	movs	r2, #0
 8005268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005278:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2200      	movs	r2, #0
 800527e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528c:	2200      	movs	r2, #0
 800528e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	2200      	movs	r2, #0
 800529e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b60      	cmp	r3, #96	; 0x60
 80052ba:	d10e      	bne.n	80052da <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	2200      	movs	r2, #0
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052d2:	6978      	ldr	r0, [r7, #20]
 80052d4:	f7fe fe1f 	bl	8003f16 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052d8:	e027      	b.n	800532a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052da:	7cfb      	ldrb	r3, [r7, #19]
 80052dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052e0:	2b28      	cmp	r3, #40	; 0x28
 80052e2:	d117      	bne.n	8005314 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005302:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2228      	movs	r2, #40	; 0x28
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005312:	e007      	b.n	8005324 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005324:	6978      	ldr	r0, [r7, #20]
 8005326:	f7fc f829 	bl	800137c <HAL_I2C_ErrorCallback>
}
 800532a:	bf00      	nop
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000004 	.word	0x20000004
 8005338:	14f8b589 	.word	0x14f8b589

0800533c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005348:	4b13      	ldr	r3, [pc, #76]	; (8005398 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	08db      	lsrs	r3, r3, #3
 800534e:	4a13      	ldr	r2, [pc, #76]	; (800539c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	0a1a      	lsrs	r2, r3, #8
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3b01      	subs	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d107      	bne.n	800537a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f043 0220 	orr.w	r2, r3, #32
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e008      	b.n	800538c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005388:	d0e9      	beq.n	800535e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000004 	.word	0x20000004
 800539c:	14f8b589 	.word	0x14f8b589

080053a0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80053b0:	d103      	bne.n	80053ba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053b8:	e007      	b.n	80053ca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80053c2:	d102      	bne.n	80053ca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2208      	movs	r2, #8
 80053c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e272      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 8087 	beq.w	8005502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053f4:	4b92      	ldr	r3, [pc, #584]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 030c 	and.w	r3, r3, #12
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d00c      	beq.n	800541a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005400:	4b8f      	ldr	r3, [pc, #572]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 030c 	and.w	r3, r3, #12
 8005408:	2b08      	cmp	r3, #8
 800540a:	d112      	bne.n	8005432 <HAL_RCC_OscConfig+0x5e>
 800540c:	4b8c      	ldr	r3, [pc, #560]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d10b      	bne.n	8005432 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800541a:	4b89      	ldr	r3, [pc, #548]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d06c      	beq.n	8005500 <HAL_RCC_OscConfig+0x12c>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d168      	bne.n	8005500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e24c      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543a:	d106      	bne.n	800544a <HAL_RCC_OscConfig+0x76>
 800543c:	4b80      	ldr	r3, [pc, #512]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a7f      	ldr	r2, [pc, #508]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e02e      	b.n	80054a8 <HAL_RCC_OscConfig+0xd4>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10c      	bne.n	800546c <HAL_RCC_OscConfig+0x98>
 8005452:	4b7b      	ldr	r3, [pc, #492]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a7a      	ldr	r2, [pc, #488]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	4b78      	ldr	r3, [pc, #480]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a77      	ldr	r2, [pc, #476]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	e01d      	b.n	80054a8 <HAL_RCC_OscConfig+0xd4>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005474:	d10c      	bne.n	8005490 <HAL_RCC_OscConfig+0xbc>
 8005476:	4b72      	ldr	r3, [pc, #456]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a71      	ldr	r2, [pc, #452]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 800547c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	4b6f      	ldr	r3, [pc, #444]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a6e      	ldr	r2, [pc, #440]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e00b      	b.n	80054a8 <HAL_RCC_OscConfig+0xd4>
 8005490:	4b6b      	ldr	r3, [pc, #428]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a6a      	ldr	r2, [pc, #424]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	4b68      	ldr	r3, [pc, #416]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a67      	ldr	r2, [pc, #412]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 80054a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d013      	beq.n	80054d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b0:	f7fd fc1c 	bl	8002cec <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b8:	f7fd fc18 	bl	8002cec <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b64      	cmp	r3, #100	; 0x64
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e200      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ca:	4b5d      	ldr	r3, [pc, #372]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0xe4>
 80054d6:	e014      	b.n	8005502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d8:	f7fd fc08 	bl	8002cec <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e0:	f7fd fc04 	bl	8002cec <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b64      	cmp	r3, #100	; 0x64
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e1ec      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054f2:	4b53      	ldr	r3, [pc, #332]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x10c>
 80054fe:	e000      	b.n	8005502 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d063      	beq.n	80055d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800550e:	4b4c      	ldr	r3, [pc, #304]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f003 030c 	and.w	r3, r3, #12
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800551a:	4b49      	ldr	r3, [pc, #292]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 030c 	and.w	r3, r3, #12
 8005522:	2b08      	cmp	r3, #8
 8005524:	d11c      	bne.n	8005560 <HAL_RCC_OscConfig+0x18c>
 8005526:	4b46      	ldr	r3, [pc, #280]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d116      	bne.n	8005560 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005532:	4b43      	ldr	r3, [pc, #268]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_RCC_OscConfig+0x176>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d001      	beq.n	800554a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e1c0      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800554a:	4b3d      	ldr	r3, [pc, #244]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	4939      	ldr	r1, [pc, #228]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800555e:	e03a      	b.n	80055d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d020      	beq.n	80055aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005568:	4b36      	ldr	r3, [pc, #216]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556e:	f7fd fbbd 	bl	8002cec <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005576:	f7fd fbb9 	bl	8002cec <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e1a1      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005588:	4b2d      	ldr	r3, [pc, #180]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0f0      	beq.n	8005576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005594:	4b2a      	ldr	r3, [pc, #168]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4927      	ldr	r1, [pc, #156]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	600b      	str	r3, [r1, #0]
 80055a8:	e015      	b.n	80055d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055aa:	4b26      	ldr	r3, [pc, #152]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b0:	f7fd fb9c 	bl	8002cec <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b8:	f7fd fb98 	bl	8002cec <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e180      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ca:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f0      	bne.n	80055b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d03a      	beq.n	8005658 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d019      	beq.n	800561e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ea:	4b17      	ldr	r3, [pc, #92]	; (8005648 <HAL_RCC_OscConfig+0x274>)
 80055ec:	2201      	movs	r2, #1
 80055ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f0:	f7fd fb7c 	bl	8002cec <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f8:	f7fd fb78 	bl	8002cec <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e160      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800560a:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <HAL_RCC_OscConfig+0x26c>)
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0f0      	beq.n	80055f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005616:	2001      	movs	r0, #1
 8005618:	f000 fa96 	bl	8005b48 <RCC_Delay>
 800561c:	e01c      	b.n	8005658 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800561e:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <HAL_RCC_OscConfig+0x274>)
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005624:	f7fd fb62 	bl	8002cec <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800562a:	e00f      	b.n	800564c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800562c:	f7fd fb5e 	bl	8002cec <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d908      	bls.n	800564c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e146      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
 800563e:	bf00      	nop
 8005640:	40021000 	.word	0x40021000
 8005644:	42420000 	.word	0x42420000
 8005648:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800564c:	4b92      	ldr	r3, [pc, #584]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e9      	bne.n	800562c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80a6 	beq.w	80057b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005666:	2300      	movs	r3, #0
 8005668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800566a:	4b8b      	ldr	r3, [pc, #556]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10d      	bne.n	8005692 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005676:	4b88      	ldr	r3, [pc, #544]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4a87      	ldr	r2, [pc, #540]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 800567c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005680:	61d3      	str	r3, [r2, #28]
 8005682:	4b85      	ldr	r3, [pc, #532]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568a:	60bb      	str	r3, [r7, #8]
 800568c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005692:	4b82      	ldr	r3, [pc, #520]	; (800589c <HAL_RCC_OscConfig+0x4c8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d118      	bne.n	80056d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800569e:	4b7f      	ldr	r3, [pc, #508]	; (800589c <HAL_RCC_OscConfig+0x4c8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a7e      	ldr	r2, [pc, #504]	; (800589c <HAL_RCC_OscConfig+0x4c8>)
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056aa:	f7fd fb1f 	bl	8002cec <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b2:	f7fd fb1b 	bl	8002cec <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b64      	cmp	r3, #100	; 0x64
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e103      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c4:	4b75      	ldr	r3, [pc, #468]	; (800589c <HAL_RCC_OscConfig+0x4c8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d106      	bne.n	80056e6 <HAL_RCC_OscConfig+0x312>
 80056d8:	4b6f      	ldr	r3, [pc, #444]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	4a6e      	ldr	r2, [pc, #440]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	6213      	str	r3, [r2, #32]
 80056e4:	e02d      	b.n	8005742 <HAL_RCC_OscConfig+0x36e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0x334>
 80056ee:	4b6a      	ldr	r3, [pc, #424]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	4a69      	ldr	r2, [pc, #420]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	6213      	str	r3, [r2, #32]
 80056fa:	4b67      	ldr	r3, [pc, #412]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	4a66      	ldr	r2, [pc, #408]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005700:	f023 0304 	bic.w	r3, r3, #4
 8005704:	6213      	str	r3, [r2, #32]
 8005706:	e01c      	b.n	8005742 <HAL_RCC_OscConfig+0x36e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b05      	cmp	r3, #5
 800570e:	d10c      	bne.n	800572a <HAL_RCC_OscConfig+0x356>
 8005710:	4b61      	ldr	r3, [pc, #388]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	4a60      	ldr	r2, [pc, #384]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005716:	f043 0304 	orr.w	r3, r3, #4
 800571a:	6213      	str	r3, [r2, #32]
 800571c:	4b5e      	ldr	r3, [pc, #376]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	4a5d      	ldr	r2, [pc, #372]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	6213      	str	r3, [r2, #32]
 8005728:	e00b      	b.n	8005742 <HAL_RCC_OscConfig+0x36e>
 800572a:	4b5b      	ldr	r3, [pc, #364]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	4a5a      	ldr	r2, [pc, #360]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	6213      	str	r3, [r2, #32]
 8005736:	4b58      	ldr	r3, [pc, #352]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	4a57      	ldr	r2, [pc, #348]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 800573c:	f023 0304 	bic.w	r3, r3, #4
 8005740:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d015      	beq.n	8005776 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574a:	f7fd facf 	bl	8002cec <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005750:	e00a      	b.n	8005768 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005752:	f7fd facb 	bl	8002cec <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e0b1      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005768:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ee      	beq.n	8005752 <HAL_RCC_OscConfig+0x37e>
 8005774:	e014      	b.n	80057a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005776:	f7fd fab9 	bl	8002cec <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800577c:	e00a      	b.n	8005794 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577e:	f7fd fab5 	bl	8002cec <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	f241 3288 	movw	r2, #5000	; 0x1388
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e09b      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005794:	4b40      	ldr	r3, [pc, #256]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1ee      	bne.n	800577e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d105      	bne.n	80057b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a6:	4b3c      	ldr	r3, [pc, #240]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	4a3b      	ldr	r2, [pc, #236]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 80057ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 8087 	beq.w	80058ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057bc:	4b36      	ldr	r3, [pc, #216]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f003 030c 	and.w	r3, r3, #12
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d061      	beq.n	800588c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d146      	bne.n	800585e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d0:	4b33      	ldr	r3, [pc, #204]	; (80058a0 <HAL_RCC_OscConfig+0x4cc>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d6:	f7fd fa89 	bl	8002cec <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057de:	f7fd fa85 	bl	8002cec <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e06d      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057f0:	4b29      	ldr	r3, [pc, #164]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f0      	bne.n	80057de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005804:	d108      	bne.n	8005818 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005806:	4b24      	ldr	r3, [pc, #144]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	f023 020f 	bic.w	r2, r3, #15
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	4921      	ldr	r1, [pc, #132]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005814:	4313      	orrs	r3, r2
 8005816:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005818:	4b1f      	ldr	r3, [pc, #124]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a19      	ldr	r1, [r3, #32]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	430b      	orrs	r3, r1
 800582a:	491b      	ldr	r1, [pc, #108]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 800582c:	4313      	orrs	r3, r2
 800582e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005830:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <HAL_RCC_OscConfig+0x4cc>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005836:	f7fd fa59 	bl	8002cec <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583e:	f7fd fa55 	bl	8002cec <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e03d      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005850:	4b11      	ldr	r3, [pc, #68]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0f0      	beq.n	800583e <HAL_RCC_OscConfig+0x46a>
 800585c:	e035      	b.n	80058ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585e:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <HAL_RCC_OscConfig+0x4cc>)
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005864:	f7fd fa42 	bl	8002cec <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800586c:	f7fd fa3e 	bl	8002cec <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e026      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800587e:	4b06      	ldr	r3, [pc, #24]	; (8005898 <HAL_RCC_OscConfig+0x4c4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f0      	bne.n	800586c <HAL_RCC_OscConfig+0x498>
 800588a:	e01e      	b.n	80058ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d107      	bne.n	80058a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e019      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
 8005898:	40021000 	.word	0x40021000
 800589c:	40007000 	.word	0x40007000
 80058a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058a4:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <HAL_RCC_OscConfig+0x500>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d106      	bne.n	80058c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d001      	beq.n	80058ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40021000 	.word	0x40021000

080058d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0a0      	b.n	8005a2e <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d020      	beq.n	800593a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005904:	4b4c      	ldr	r3, [pc, #304]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4a4b      	ldr	r2, [pc, #300]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 800590a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800590e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800591c:	4b46      	ldr	r3, [pc, #280]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4a45      	ldr	r2, [pc, #276]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 8005922:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005926:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005928:	4b43      	ldr	r3, [pc, #268]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	4940      	ldr	r1, [pc, #256]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 8005936:	4313      	orrs	r3, r2
 8005938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d040      	beq.n	80059c8 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d107      	bne.n	800595e <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594e:	4b3a      	ldr	r3, [pc, #232]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d115      	bne.n	8005986 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e067      	b.n	8005a2e <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d107      	bne.n	8005976 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005966:	4b34      	ldr	r3, [pc, #208]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e05b      	b.n	8005a2e <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005976:	4b30      	ldr	r3, [pc, #192]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e053      	b.n	8005a2e <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005986:	4b2c      	ldr	r3, [pc, #176]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f023 0203 	bic.w	r2, r3, #3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4929      	ldr	r1, [pc, #164]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 8005994:	4313      	orrs	r3, r2
 8005996:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005998:	f7fd f9a8 	bl	8002cec <HAL_GetTick>
 800599c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	e00a      	b.n	80059b6 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a0:	f7fd f9a4 	bl	8002cec <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e03b      	b.n	8005a2e <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b6:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 020c 	and.w	r2, r3, #12
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1eb      	bne.n	80059a0 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d4:	4b18      	ldr	r3, [pc, #96]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4915      	ldr	r1, [pc, #84]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059f2:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	490d      	ldr	r1, [pc, #52]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a06:	f000 f81f 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <HAL_RCC_ClockConfig+0x160>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	4909      	ldr	r1, [pc, #36]	; (8005a3c <HAL_RCC_ClockConfig+0x164>)
 8005a18:	5ccb      	ldrb	r3, [r1, r3]
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	4a08      	ldr	r2, [pc, #32]	; (8005a40 <HAL_RCC_ClockConfig+0x168>)
 8005a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a22:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <HAL_RCC_ClockConfig+0x16c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fd f91e 	bl	8002c68 <HAL_InitTick>

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	08006dd4 	.word	0x08006dd4
 8005a40:	20000004 	.word	0x20000004
 8005a44:	20000008 	.word	0x20000008

08005a48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a48:	b490      	push	{r4, r7}
 8005a4a:	b08e      	sub	sp, #56	; 0x38
 8005a4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005a4e:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005a50:	f107 0414 	add.w	r4, r7, #20
 8005a54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8005a5a:	4b28      	ldr	r3, [pc, #160]	; (8005afc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a5c:	1d3c      	adds	r4, r7, #4
 8005a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a68:	2300      	movs	r3, #0
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a70:	2300      	movs	r3, #0
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a78:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	f003 030c 	and.w	r3, r3, #12
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d002      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0x46>
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d003      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0x4c>
 8005a8c:	e02a      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a92:	e02a      	b.n	8005aea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	0c9b      	lsrs	r3, r3, #18
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	3338      	adds	r3, #56	; 0x38
 8005a9e:	443b      	add	r3, r7
 8005aa0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d011      	beq.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005ab0:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	3338      	adds	r3, #56	; 0x38
 8005aba:	443b      	add	r3, r7
 8005abc:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	4a0f      	ldr	r2, [pc, #60]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ac6:	fb03 f202 	mul.w	r2, r3, r2
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad2:	e004      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	4a0c      	ldr	r2, [pc, #48]	; (8005b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ad8:	fb02 f303 	mul.w	r3, r2, r3
 8005adc:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8005ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ae2:	e002      	b.n	8005aea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ae4:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ae6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3738      	adds	r7, #56	; 0x38
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc90      	pop	{r4, r7}
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	08006db4 	.word	0x08006db4
 8005afc:	08006dc4 	.word	0x08006dc4
 8005b00:	40021000 	.word	0x40021000
 8005b04:	007a1200 	.word	0x007a1200
 8005b08:	003d0900 	.word	0x003d0900

08005b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b10:	4b02      	ldr	r3, [pc, #8]	; (8005b1c <HAL_RCC_GetHCLKFreq+0x10>)
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr
 8005b1c:	20000004 	.word	0x20000004

08005b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b24:	f7ff fff2 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	0a1b      	lsrs	r3, r3, #8
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	4903      	ldr	r1, [pc, #12]	; (8005b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40021000 	.word	0x40021000
 8005b44:	08006de4 	.word	0x08006de4

08005b48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b50:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <RCC_Delay+0x34>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <RCC_Delay+0x38>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	0a5b      	lsrs	r3, r3, #9
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	fb02 f303 	mul.w	r3, r2, r3
 8005b62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b64:	bf00      	nop
  }
  while (Delay --);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1e5a      	subs	r2, r3, #1
 8005b6a:	60fa      	str	r2, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f9      	bne.n	8005b64 <RCC_Delay+0x1c>
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	20000004 	.word	0x20000004
 8005b80:	10624dd3 	.word	0x10624dd3

08005b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e041      	b.n	8005c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fc ff04 	bl	80029b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	f000 fcb4 	bl	8006530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d001      	beq.n	8005c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e03f      	b.n	8005cbc <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <HAL_TIM_Base_Start_IT+0xa4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x62>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c66:	d00e      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x62>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <HAL_TIM_Base_Start_IT+0xa8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x62>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xac>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x62>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a14      	ldr	r2, [pc, #80]	; (8005cd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d111      	bne.n	8005caa <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b06      	cmp	r3, #6
 8005c96:	d010      	beq.n	8005cba <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca8:	e007      	b.n	8005cba <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0201 	orr.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40012c00 	.word	0x40012c00
 8005ccc:	40000400 	.word	0x40000400
 8005cd0:	40000800 	.word	0x40000800
 8005cd4:	40014000 	.word	0x40014000

08005cd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e041      	b.n	8005d6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fc fe28 	bl	8002954 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	f000 fc0a 	bl	8006530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d109      	bne.n	8005d9c <HAL_TIM_PWM_Start+0x24>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	bf14      	ite	ne
 8005d94:	2301      	movne	r3, #1
 8005d96:	2300      	moveq	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	e022      	b.n	8005de2 <HAL_TIM_PWM_Start+0x6a>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d109      	bne.n	8005db6 <HAL_TIM_PWM_Start+0x3e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	bf14      	ite	ne
 8005dae:	2301      	movne	r3, #1
 8005db0:	2300      	moveq	r3, #0
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	e015      	b.n	8005de2 <HAL_TIM_PWM_Start+0x6a>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d109      	bne.n	8005dd0 <HAL_TIM_PWM_Start+0x58>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	bf14      	ite	ne
 8005dc8:	2301      	movne	r3, #1
 8005dca:	2300      	moveq	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	e008      	b.n	8005de2 <HAL_TIM_PWM_Start+0x6a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	bf14      	ite	ne
 8005ddc:	2301      	movne	r3, #1
 8005dde:	2300      	moveq	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e077      	b.n	8005eda <HAL_TIM_PWM_Start+0x162>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <HAL_TIM_PWM_Start+0x82>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df8:	e013      	b.n	8005e22 <HAL_TIM_PWM_Start+0xaa>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d104      	bne.n	8005e0a <HAL_TIM_PWM_Start+0x92>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e08:	e00b      	b.n	8005e22 <HAL_TIM_PWM_Start+0xaa>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d104      	bne.n	8005e1a <HAL_TIM_PWM_Start+0xa2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e18:	e003      	b.n	8005e22 <HAL_TIM_PWM_Start+0xaa>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2201      	movs	r2, #1
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fddc 	bl	80069e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2b      	ldr	r2, [pc, #172]	; (8005ee4 <HAL_TIM_PWM_Start+0x16c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00e      	beq.n	8005e58 <HAL_TIM_PWM_Start+0xe0>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <HAL_TIM_PWM_Start+0x170>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_TIM_PWM_Start+0xe0>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a28      	ldr	r2, [pc, #160]	; (8005eec <HAL_TIM_PWM_Start+0x174>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIM_PWM_Start+0xe0>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a27      	ldr	r2, [pc, #156]	; (8005ef0 <HAL_TIM_PWM_Start+0x178>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d101      	bne.n	8005e5c <HAL_TIM_PWM_Start+0xe4>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <HAL_TIM_PWM_Start+0xe6>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <HAL_TIM_PWM_Start+0xfa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <HAL_TIM_PWM_Start+0x16c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d013      	beq.n	8005ea4 <HAL_TIM_PWM_Start+0x12c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d00e      	beq.n	8005ea4 <HAL_TIM_PWM_Start+0x12c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <HAL_TIM_PWM_Start+0x17c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d009      	beq.n	8005ea4 <HAL_TIM_PWM_Start+0x12c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <HAL_TIM_PWM_Start+0x180>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <HAL_TIM_PWM_Start+0x12c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a12      	ldr	r2, [pc, #72]	; (8005ee8 <HAL_TIM_PWM_Start+0x170>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d111      	bne.n	8005ec8 <HAL_TIM_PWM_Start+0x150>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b06      	cmp	r3, #6
 8005eb4:	d010      	beq.n	8005ed8 <HAL_TIM_PWM_Start+0x160>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0201 	orr.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec6:	e007      	b.n	8005ed8 <HAL_TIM_PWM_Start+0x160>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800

08005efc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e093      	b.n	8006038 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fc fc61 	bl	80027ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f40:	f023 0307 	bic.w	r3, r3, #7
 8005f44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f000 faed 	bl	8006530 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f9c:	f023 030c 	bic.w	r3, r3, #12
 8005fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	011a      	lsls	r2, r3, #4
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	031b      	lsls	r3, r3, #12
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006050:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006058:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006060:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006068:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d110      	bne.n	8006092 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d102      	bne.n	800607c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006076:	7b7b      	ldrb	r3, [r7, #13]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d001      	beq.n	8006080 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e069      	b.n	8006154 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006090:	e031      	b.n	80060f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b04      	cmp	r3, #4
 8006096:	d110      	bne.n	80060ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d102      	bne.n	80060a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800609e:	7b3b      	ldrb	r3, [r7, #12]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d001      	beq.n	80060a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e055      	b.n	8006154 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060b8:	e01d      	b.n	80060f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d108      	bne.n	80060d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d105      	bne.n	80060d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c6:	7b7b      	ldrb	r3, [r7, #13]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d102      	bne.n	80060d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060cc:	7b3b      	ldrb	r3, [r7, #12]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d001      	beq.n	80060d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e03e      	b.n	8006154 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_TIM_Encoder_Start+0xc4>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d008      	beq.n	8006114 <HAL_TIM_Encoder_Start+0xd4>
 8006102:	e00f      	b.n	8006124 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2201      	movs	r2, #1
 800610a:	2100      	movs	r1, #0
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fc6b 	bl	80069e8 <TIM_CCxChannelCmd>
      break;
 8006112:	e016      	b.n	8006142 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2201      	movs	r2, #1
 800611a:	2104      	movs	r1, #4
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fc63 	bl	80069e8 <TIM_CCxChannelCmd>
      break;
 8006122:	e00e      	b.n	8006142 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2201      	movs	r2, #1
 800612a:	2100      	movs	r1, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fc5b 	bl	80069e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2201      	movs	r2, #1
 8006138:	2104      	movs	r1, #4
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fc54 	bl	80069e8 <TIM_CCxChannelCmd>
      break;
 8006140:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0201 	orr.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d122      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b02      	cmp	r3, #2
 800617e:	d11b      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0202 	mvn.w	r2, #2
 8006188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9ab 	bl	80064fa <HAL_TIM_IC_CaptureCallback>
 80061a4:	e005      	b.n	80061b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f99e 	bl	80064e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f9ad 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d122      	bne.n	800620c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d11b      	bne.n	800620c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0204 	mvn.w	r2, #4
 80061dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2202      	movs	r2, #2
 80061e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f981 	bl	80064fa <HAL_TIM_IC_CaptureCallback>
 80061f8:	e005      	b.n	8006206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f974 	bl	80064e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f983 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b08      	cmp	r3, #8
 8006218:	d122      	bne.n	8006260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b08      	cmp	r3, #8
 8006226:	d11b      	bne.n	8006260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0208 	mvn.w	r2, #8
 8006230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2204      	movs	r2, #4
 8006236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f957 	bl	80064fa <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f94a 	bl	80064e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f959 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	2b10      	cmp	r3, #16
 800626c:	d122      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b10      	cmp	r3, #16
 800627a:	d11b      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0210 	mvn.w	r2, #16
 8006284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2208      	movs	r2, #8
 800628a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f92d 	bl	80064fa <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f920 	bl	80064e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f92f 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d10e      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d107      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0201 	mvn.w	r2, #1
 80062d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fa ff34 	bl	8001148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b80      	cmp	r3, #128	; 0x80
 80062ec:	d10e      	bne.n	800630c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d107      	bne.n	800630c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fc52 	bl	8006bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d10e      	bne.n	8006338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	d107      	bne.n	8006338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f8f3 	bl	800651e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b20      	cmp	r3, #32
 8006344:	d10e      	bne.n	8006364 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b20      	cmp	r3, #32
 8006352:	d107      	bne.n	8006364 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f06f 0220 	mvn.w	r2, #32
 800635c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fc1d 	bl	8006b9e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006364:	bf00      	nop
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006382:	2302      	movs	r3, #2
 8006384:	e0ac      	b.n	80064e0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b0c      	cmp	r3, #12
 8006392:	f200 809f 	bhi.w	80064d4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063d1 	.word	0x080063d1
 80063a0:	080064d5 	.word	0x080064d5
 80063a4:	080064d5 	.word	0x080064d5
 80063a8:	080064d5 	.word	0x080064d5
 80063ac:	08006411 	.word	0x08006411
 80063b0:	080064d5 	.word	0x080064d5
 80063b4:	080064d5 	.word	0x080064d5
 80063b8:	080064d5 	.word	0x080064d5
 80063bc:	08006453 	.word	0x08006453
 80063c0:	080064d5 	.word	0x080064d5
 80063c4:	080064d5 	.word	0x080064d5
 80063c8:	080064d5 	.word	0x080064d5
 80063cc:	08006493 	.word	0x08006493
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 f92a 	bl	8006630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0208 	orr.w	r2, r2, #8
 80063ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0204 	bic.w	r2, r2, #4
 80063fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	619a      	str	r2, [r3, #24]
      break;
 800640e:	e062      	b.n	80064d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f98e 	bl	8006738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800642a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6999      	ldr	r1, [r3, #24]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	021a      	lsls	r2, r3, #8
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	619a      	str	r2, [r3, #24]
      break;
 8006450:	e041      	b.n	80064d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 f9e9 	bl	8006830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0208 	orr.w	r2, r2, #8
 800646c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0204 	bic.w	r2, r2, #4
 800647c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	61da      	str	r2, [r3, #28]
      break;
 8006490:	e021      	b.n	80064d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fa45 	bl	8006928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69da      	ldr	r2, [r3, #28]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69d9      	ldr	r1, [r3, #28]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	021a      	lsls	r2, r3, #8
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	61da      	str	r2, [r3, #28]
      break;
 80064d2:	e000      	b.n	80064d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80064d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr

080064fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr

0800650c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr

0800651e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr

08006530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a35      	ldr	r2, [pc, #212]	; (8006618 <TIM_Base_SetConfig+0xe8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00b      	beq.n	8006560 <TIM_Base_SetConfig+0x30>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654e:	d007      	beq.n	8006560 <TIM_Base_SetConfig+0x30>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a32      	ldr	r2, [pc, #200]	; (800661c <TIM_Base_SetConfig+0xec>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_Base_SetConfig+0x30>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a31      	ldr	r2, [pc, #196]	; (8006620 <TIM_Base_SetConfig+0xf0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d108      	bne.n	8006572 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a28      	ldr	r2, [pc, #160]	; (8006618 <TIM_Base_SetConfig+0xe8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d017      	beq.n	80065aa <TIM_Base_SetConfig+0x7a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006580:	d013      	beq.n	80065aa <TIM_Base_SetConfig+0x7a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a25      	ldr	r2, [pc, #148]	; (800661c <TIM_Base_SetConfig+0xec>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00f      	beq.n	80065aa <TIM_Base_SetConfig+0x7a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a24      	ldr	r2, [pc, #144]	; (8006620 <TIM_Base_SetConfig+0xf0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_Base_SetConfig+0x7a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a23      	ldr	r2, [pc, #140]	; (8006624 <TIM_Base_SetConfig+0xf4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <TIM_Base_SetConfig+0x7a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a22      	ldr	r2, [pc, #136]	; (8006628 <TIM_Base_SetConfig+0xf8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_Base_SetConfig+0x7a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a21      	ldr	r2, [pc, #132]	; (800662c <TIM_Base_SetConfig+0xfc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d108      	bne.n	80065bc <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a0d      	ldr	r2, [pc, #52]	; (8006618 <TIM_Base_SetConfig+0xe8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00b      	beq.n	8006600 <TIM_Base_SetConfig+0xd0>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a0e      	ldr	r2, [pc, #56]	; (8006624 <TIM_Base_SetConfig+0xf4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d007      	beq.n	8006600 <TIM_Base_SetConfig+0xd0>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a0d      	ldr	r2, [pc, #52]	; (8006628 <TIM_Base_SetConfig+0xf8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_Base_SetConfig+0xd0>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a0c      	ldr	r2, [pc, #48]	; (800662c <TIM_Base_SetConfig+0xfc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d103      	bne.n	8006608 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	615a      	str	r2, [r3, #20]
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr
 8006618:	40012c00 	.word	0x40012c00
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40014000 	.word	0x40014000
 8006628:	40014400 	.word	0x40014400
 800662c:	40014800 	.word	0x40014800

08006630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f023 0201 	bic.w	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f023 0302 	bic.w	r3, r3, #2
 8006678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a28      	ldr	r2, [pc, #160]	; (8006728 <TIM_OC1_SetConfig+0xf8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00b      	beq.n	80066a4 <TIM_OC1_SetConfig+0x74>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a27      	ldr	r2, [pc, #156]	; (800672c <TIM_OC1_SetConfig+0xfc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_OC1_SetConfig+0x74>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a26      	ldr	r2, [pc, #152]	; (8006730 <TIM_OC1_SetConfig+0x100>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_OC1_SetConfig+0x74>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a25      	ldr	r2, [pc, #148]	; (8006734 <TIM_OC1_SetConfig+0x104>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d10c      	bne.n	80066be <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f023 0308 	bic.w	r3, r3, #8
 80066aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 0304 	bic.w	r3, r3, #4
 80066bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a19      	ldr	r2, [pc, #100]	; (8006728 <TIM_OC1_SetConfig+0xf8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00b      	beq.n	80066de <TIM_OC1_SetConfig+0xae>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a18      	ldr	r2, [pc, #96]	; (800672c <TIM_OC1_SetConfig+0xfc>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d007      	beq.n	80066de <TIM_OC1_SetConfig+0xae>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a17      	ldr	r2, [pc, #92]	; (8006730 <TIM_OC1_SetConfig+0x100>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d003      	beq.n	80066de <TIM_OC1_SetConfig+0xae>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a16      	ldr	r2, [pc, #88]	; (8006734 <TIM_OC1_SetConfig+0x104>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d111      	bne.n	8006702 <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	621a      	str	r2, [r3, #32]
}
 800671c:	bf00      	nop
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40012c00 	.word	0x40012c00
 800672c:	40014000 	.word	0x40014000
 8006730:	40014400 	.word	0x40014400
 8006734:	40014800 	.word	0x40014800

08006738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f023 0210 	bic.w	r2, r3, #16
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f023 0320 	bic.w	r3, r3, #32
 8006782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a23      	ldr	r2, [pc, #140]	; (8006820 <TIM_OC2_SetConfig+0xe8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d10d      	bne.n	80067b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800679e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a1a      	ldr	r2, [pc, #104]	; (8006820 <TIM_OC2_SetConfig+0xe8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00b      	beq.n	80067d4 <TIM_OC2_SetConfig+0x9c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a19      	ldr	r2, [pc, #100]	; (8006824 <TIM_OC2_SetConfig+0xec>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d007      	beq.n	80067d4 <TIM_OC2_SetConfig+0x9c>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a18      	ldr	r2, [pc, #96]	; (8006828 <TIM_OC2_SetConfig+0xf0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_OC2_SetConfig+0x9c>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a17      	ldr	r2, [pc, #92]	; (800682c <TIM_OC2_SetConfig+0xf4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d113      	bne.n	80067fc <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40014000 	.word	0x40014000
 8006828:	40014400 	.word	0x40014400
 800682c:	40014800 	.word	0x40014800

08006830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a23      	ldr	r2, [pc, #140]	; (8006918 <TIM_OC3_SetConfig+0xe8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d10d      	bne.n	80068aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a1a      	ldr	r2, [pc, #104]	; (8006918 <TIM_OC3_SetConfig+0xe8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_OC3_SetConfig+0x9a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a19      	ldr	r2, [pc, #100]	; (800691c <TIM_OC3_SetConfig+0xec>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_OC3_SetConfig+0x9a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a18      	ldr	r2, [pc, #96]	; (8006920 <TIM_OC3_SetConfig+0xf0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_OC3_SetConfig+0x9a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a17      	ldr	r2, [pc, #92]	; (8006924 <TIM_OC3_SetConfig+0xf4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d113      	bne.n	80068f2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	011b      	lsls	r3, r3, #4
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	621a      	str	r2, [r3, #32]
}
 800690c:	bf00      	nop
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	bc80      	pop	{r7}
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800

08006928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	031b      	lsls	r3, r3, #12
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a15      	ldr	r2, [pc, #84]	; (80069d8 <TIM_OC4_SetConfig+0xb0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00b      	beq.n	80069a0 <TIM_OC4_SetConfig+0x78>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a14      	ldr	r2, [pc, #80]	; (80069dc <TIM_OC4_SetConfig+0xb4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d007      	beq.n	80069a0 <TIM_OC4_SetConfig+0x78>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <TIM_OC4_SetConfig+0xb8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d003      	beq.n	80069a0 <TIM_OC4_SetConfig+0x78>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a12      	ldr	r2, [pc, #72]	; (80069e4 <TIM_OC4_SetConfig+0xbc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d109      	bne.n	80069b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	019b      	lsls	r3, r3, #6
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr
 80069d8:	40012c00 	.word	0x40012c00
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800

080069e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	2201      	movs	r2, #1
 80069fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1a      	ldr	r2, [r3, #32]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	401a      	ands	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a1a      	ldr	r2, [r3, #32]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a20:	431a      	orrs	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	621a      	str	r2, [r3, #32]
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e04b      	b.n	8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a19      	ldr	r2, [pc, #100]	; (8006aec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a94:	d00e      	beq.n	8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a15      	ldr	r2, [pc, #84]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a12      	ldr	r2, [pc, #72]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d10c      	bne.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40012c00 	.word	0x40012c00
 8006af0:	40000400 	.word	0x40000400
 8006af4:	40000800 	.word	0x40000800
 8006af8:	40014000 	.word	0x40014000

08006afc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e03d      	b.n	8006b94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr

08006b9e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr
	...

08006bc4 <__errno>:
 8006bc4:	4b01      	ldr	r3, [pc, #4]	; (8006bcc <__errno+0x8>)
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20000010 	.word	0x20000010

08006bd0 <__libc_init_array>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	2600      	movs	r6, #0
 8006bd4:	4d0c      	ldr	r5, [pc, #48]	; (8006c08 <__libc_init_array+0x38>)
 8006bd6:	4c0d      	ldr	r4, [pc, #52]	; (8006c0c <__libc_init_array+0x3c>)
 8006bd8:	1b64      	subs	r4, r4, r5
 8006bda:	10a4      	asrs	r4, r4, #2
 8006bdc:	42a6      	cmp	r6, r4
 8006bde:	d109      	bne.n	8006bf4 <__libc_init_array+0x24>
 8006be0:	f000 f8dc 	bl	8006d9c <_init>
 8006be4:	2600      	movs	r6, #0
 8006be6:	4d0a      	ldr	r5, [pc, #40]	; (8006c10 <__libc_init_array+0x40>)
 8006be8:	4c0a      	ldr	r4, [pc, #40]	; (8006c14 <__libc_init_array+0x44>)
 8006bea:	1b64      	subs	r4, r4, r5
 8006bec:	10a4      	asrs	r4, r4, #2
 8006bee:	42a6      	cmp	r6, r4
 8006bf0:	d105      	bne.n	8006bfe <__libc_init_array+0x2e>
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf8:	4798      	blx	r3
 8006bfa:	3601      	adds	r6, #1
 8006bfc:	e7ee      	b.n	8006bdc <__libc_init_array+0xc>
 8006bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c02:	4798      	blx	r3
 8006c04:	3601      	adds	r6, #1
 8006c06:	e7f2      	b.n	8006bee <__libc_init_array+0x1e>
 8006c08:	08006dec 	.word	0x08006dec
 8006c0c:	08006dec 	.word	0x08006dec
 8006c10:	08006dec 	.word	0x08006dec
 8006c14:	08006df0 	.word	0x08006df0

08006c18 <malloc>:
 8006c18:	4b02      	ldr	r3, [pc, #8]	; (8006c24 <malloc+0xc>)
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	f000 b82b 	b.w	8006c78 <_malloc_r>
 8006c22:	bf00      	nop
 8006c24:	20000010 	.word	0x20000010

08006c28 <memset>:
 8006c28:	4603      	mov	r3, r0
 8006c2a:	4402      	add	r2, r0
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d100      	bne.n	8006c32 <memset+0xa>
 8006c30:	4770      	bx	lr
 8006c32:	f803 1b01 	strb.w	r1, [r3], #1
 8006c36:	e7f9      	b.n	8006c2c <memset+0x4>

08006c38 <sbrk_aligned>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	4e0e      	ldr	r6, [pc, #56]	; (8006c74 <sbrk_aligned+0x3c>)
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	6831      	ldr	r1, [r6, #0]
 8006c40:	4605      	mov	r5, r0
 8006c42:	b911      	cbnz	r1, 8006c4a <sbrk_aligned+0x12>
 8006c44:	f000 f88c 	bl	8006d60 <_sbrk_r>
 8006c48:	6030      	str	r0, [r6, #0]
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f000 f887 	bl	8006d60 <_sbrk_r>
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	d00a      	beq.n	8006c6c <sbrk_aligned+0x34>
 8006c56:	1cc4      	adds	r4, r0, #3
 8006c58:	f024 0403 	bic.w	r4, r4, #3
 8006c5c:	42a0      	cmp	r0, r4
 8006c5e:	d007      	beq.n	8006c70 <sbrk_aligned+0x38>
 8006c60:	1a21      	subs	r1, r4, r0
 8006c62:	4628      	mov	r0, r5
 8006c64:	f000 f87c 	bl	8006d60 <_sbrk_r>
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d101      	bne.n	8006c70 <sbrk_aligned+0x38>
 8006c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c70:	4620      	mov	r0, r4
 8006c72:	bd70      	pop	{r4, r5, r6, pc}
 8006c74:	20000404 	.word	0x20000404

08006c78 <_malloc_r>:
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	1ccd      	adds	r5, r1, #3
 8006c7e:	f025 0503 	bic.w	r5, r5, #3
 8006c82:	3508      	adds	r5, #8
 8006c84:	2d0c      	cmp	r5, #12
 8006c86:	bf38      	it	cc
 8006c88:	250c      	movcc	r5, #12
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	db01      	blt.n	8006c94 <_malloc_r+0x1c>
 8006c90:	42a9      	cmp	r1, r5
 8006c92:	d905      	bls.n	8006ca0 <_malloc_r+0x28>
 8006c94:	230c      	movs	r3, #12
 8006c96:	2600      	movs	r6, #0
 8006c98:	603b      	str	r3, [r7, #0]
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca0:	4e2e      	ldr	r6, [pc, #184]	; (8006d5c <_malloc_r+0xe4>)
 8006ca2:	f000 f86d 	bl	8006d80 <__malloc_lock>
 8006ca6:	6833      	ldr	r3, [r6, #0]
 8006ca8:	461c      	mov	r4, r3
 8006caa:	bb34      	cbnz	r4, 8006cfa <_malloc_r+0x82>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f7ff ffc2 	bl	8006c38 <sbrk_aligned>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	d14d      	bne.n	8006d56 <_malloc_r+0xde>
 8006cba:	6834      	ldr	r4, [r6, #0]
 8006cbc:	4626      	mov	r6, r4
 8006cbe:	2e00      	cmp	r6, #0
 8006cc0:	d140      	bne.n	8006d44 <_malloc_r+0xcc>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	eb04 0803 	add.w	r8, r4, r3
 8006ccc:	f000 f848 	bl	8006d60 <_sbrk_r>
 8006cd0:	4580      	cmp	r8, r0
 8006cd2:	d13a      	bne.n	8006d4a <_malloc_r+0xd2>
 8006cd4:	6821      	ldr	r1, [r4, #0]
 8006cd6:	3503      	adds	r5, #3
 8006cd8:	1a6d      	subs	r5, r5, r1
 8006cda:	f025 0503 	bic.w	r5, r5, #3
 8006cde:	3508      	adds	r5, #8
 8006ce0:	2d0c      	cmp	r5, #12
 8006ce2:	bf38      	it	cc
 8006ce4:	250c      	movcc	r5, #12
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	4629      	mov	r1, r5
 8006cea:	f7ff ffa5 	bl	8006c38 <sbrk_aligned>
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d02b      	beq.n	8006d4a <_malloc_r+0xd2>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	442b      	add	r3, r5
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	e00e      	b.n	8006d18 <_malloc_r+0xa0>
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	1b52      	subs	r2, r2, r5
 8006cfe:	d41e      	bmi.n	8006d3e <_malloc_r+0xc6>
 8006d00:	2a0b      	cmp	r2, #11
 8006d02:	d916      	bls.n	8006d32 <_malloc_r+0xba>
 8006d04:	1961      	adds	r1, r4, r5
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	6025      	str	r5, [r4, #0]
 8006d0a:	bf18      	it	ne
 8006d0c:	6059      	strne	r1, [r3, #4]
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	bf08      	it	eq
 8006d12:	6031      	streq	r1, [r6, #0]
 8006d14:	5162      	str	r2, [r4, r5]
 8006d16:	604b      	str	r3, [r1, #4]
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f104 060b 	add.w	r6, r4, #11
 8006d1e:	f000 f835 	bl	8006d8c <__malloc_unlock>
 8006d22:	f026 0607 	bic.w	r6, r6, #7
 8006d26:	1d23      	adds	r3, r4, #4
 8006d28:	1af2      	subs	r2, r6, r3
 8006d2a:	d0b6      	beq.n	8006c9a <_malloc_r+0x22>
 8006d2c:	1b9b      	subs	r3, r3, r6
 8006d2e:	50a3      	str	r3, [r4, r2]
 8006d30:	e7b3      	b.n	8006c9a <_malloc_r+0x22>
 8006d32:	6862      	ldr	r2, [r4, #4]
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	bf0c      	ite	eq
 8006d38:	6032      	streq	r2, [r6, #0]
 8006d3a:	605a      	strne	r2, [r3, #4]
 8006d3c:	e7ec      	b.n	8006d18 <_malloc_r+0xa0>
 8006d3e:	4623      	mov	r3, r4
 8006d40:	6864      	ldr	r4, [r4, #4]
 8006d42:	e7b2      	b.n	8006caa <_malloc_r+0x32>
 8006d44:	4634      	mov	r4, r6
 8006d46:	6876      	ldr	r6, [r6, #4]
 8006d48:	e7b9      	b.n	8006cbe <_malloc_r+0x46>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	f000 f81c 	bl	8006d8c <__malloc_unlock>
 8006d54:	e7a1      	b.n	8006c9a <_malloc_r+0x22>
 8006d56:	6025      	str	r5, [r4, #0]
 8006d58:	e7de      	b.n	8006d18 <_malloc_r+0xa0>
 8006d5a:	bf00      	nop
 8006d5c:	20000400 	.word	0x20000400

08006d60 <_sbrk_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	2300      	movs	r3, #0
 8006d64:	4d05      	ldr	r5, [pc, #20]	; (8006d7c <_sbrk_r+0x1c>)
 8006d66:	4604      	mov	r4, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	f7fb ff0e 	bl	8002b8c <_sbrk>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_sbrk_r+0x1a>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_sbrk_r+0x1a>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20000408 	.word	0x20000408

08006d80 <__malloc_lock>:
 8006d80:	4801      	ldr	r0, [pc, #4]	; (8006d88 <__malloc_lock+0x8>)
 8006d82:	f000 b809 	b.w	8006d98 <__retarget_lock_acquire_recursive>
 8006d86:	bf00      	nop
 8006d88:	2000040c 	.word	0x2000040c

08006d8c <__malloc_unlock>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	; (8006d94 <__malloc_unlock+0x8>)
 8006d8e:	f000 b804 	b.w	8006d9a <__retarget_lock_release_recursive>
 8006d92:	bf00      	nop
 8006d94:	2000040c 	.word	0x2000040c

08006d98 <__retarget_lock_acquire_recursive>:
 8006d98:	4770      	bx	lr

08006d9a <__retarget_lock_release_recursive>:
 8006d9a:	4770      	bx	lr

08006d9c <_init>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr

08006da8 <_fini>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr
