
science-dev-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b900  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800baa0  0800baa0  0001baa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfd4  0800bfd4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bfd4  0800bfd4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bfd4  0800bfd4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfd4  0800bfd4  0001bfd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bfdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000032c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019519  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003574  00000000  00000000  00039729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b0  00000000  00000000  0003e0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b7a  00000000  00000000  0003f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c8ce  00000000  00000000  00063f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6ebd  00000000  00000000  000807d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015768d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a64  00000000  00000000  001576e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ba88 	.word	0x0800ba88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800ba88 	.word	0x0800ba88

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <new_adc_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hadc is the adc and _total_channels are the total channels.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ADCSensor object
ADCSensor *new_adc_sensor(ADC_HandleTypeDef *hadc, uint8_t _total_channels) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	70fb      	strb	r3, [r7, #3]
    ADCSensor *adc_sensor = (ADCSensor*) malloc(sizeof(ADCSensor));
 8000d10:	2030      	movs	r0, #48	; 0x30
 8000d12:	f006 fa0f 	bl	8007134 <malloc>
 8000d16:	4603      	mov	r3, r0
 8000d18:	60bb      	str	r3, [r7, #8]
    adc_sensor->adc = hadc;
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	601a      	str	r2, [r3, #0]
    adc_sensor->total_channels = _total_channels;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	78fa      	ldrb	r2, [r7, #3]
 8000d24:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < _total_channels; ++i) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e008      	b.n	8000d3e <new_adc_sensor+0x3a>
        adc_sensor->values[i] = 0;
 8000d2c:	7bfa      	ldrb	r2, [r7, #15]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	3202      	adds	r2, #2
 8000d32:	2100      	movs	r1, #0
 8000d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < _total_channels; ++i) {
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d3f2      	bcc.n	8000d2c <new_adc_sensor+0x28>
    }
    return adc_sensor;
 8000d46:	68bb      	ldr	r3, [r7, #8]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <get_adc_sensor_value>:

// REQUIRES: adc_sensor is an ADCSensor object and channel is the index
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 4096.
uint16_t get_adc_sensor_value(ADCSensor *adc_sensor, uint8_t channel) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
    return adc_sensor->values[channel];
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3202      	adds	r2, #2
 8000d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d66:	b29b      	uxth	r3, r3
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <update_adc_sensor_values>:

// REQUIRES: adc_sensor is an ADCSensor object
// MODIFIES: values
// EFFECTS: Updates the stored value of value.
void update_adc_sensor_values(ADCSensor *adc_sensor) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < adc_sensor->total_channels; ++i) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e00c      	b.n	8000d9c <update_adc_sensor_values+0x28>
		HAL_ADC_Start_DMA(adc_sensor->adc, adc_sensor->values, adc_sensor->total_channels);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6818      	ldr	r0, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f103 0108 	add.w	r1, r3, #8
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	791b      	ldrb	r3, [r3, #4]
 8000d90:	461a      	mov	r2, r3
 8000d92:	f001 fce9 	bl	8002768 <HAL_ADC_Start_DMA>
	for (int i = 0; i < adc_sensor->total_channels; ++i) {
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	791b      	ldrb	r3, [r3, #4]
 8000da0:	461a      	mov	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	dbec      	blt.n	8000d82 <update_adc_sensor_values+0xe>
	}
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <new_bridge>:

// REQUIRES: uart is the uart channel
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Bridge object
Bridge *new_bridge(UART_HandleTypeDef *_uart)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
    Bridge *bridge = (Bridge *)malloc(sizeof(Bridge));
 8000dba:	2004      	movs	r0, #4
 8000dbc:	f006 f9ba 	bl	8007134 <malloc>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60fb      	str	r3, [r7, #12]

    bridge->uart = _uart;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	601a      	str	r2, [r3, #0]

    return bridge;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <bridge_send_diagnostic>:
// REQUIRES: nothing
// MODIFIES: nothing
// EFFECTS: Sends diagnostic current and thermistor data in format:
// $DIAG,,<TEMP_0>,<TEMP_1>,<TEMP_2>,<CURR_0>,<CURR_1>,<CURR_2>
void bridge_send_diagnostic(Bridge *bridge, float temp[3], float curr[3])
{
 8000dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000dd8:	b0ba      	sub	sp, #232	; 0xe8
 8000dda:	af0c      	add	r7, sp, #48	; 0x30
 8000ddc:	61f8      	str	r0, [r7, #28]
 8000dde:	61b9      	str	r1, [r7, #24]
 8000de0:	617a      	str	r2, [r7, #20]
    char msg[150];

    snprintf(msg, sizeof(msg), "$DIAG,%f,%f,%f,%f,%f,%f", temp[0], temp[1],
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fbb6 	bl	8000558 <__aeabi_f2d>
 8000dec:	4604      	mov	r4, r0
 8000dee:	460d      	mov	r5, r1
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	3304      	adds	r3, #4
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fbae 	bl	8000558 <__aeabi_f2d>
 8000dfc:	4680      	mov	r8, r0
 8000dfe:	4689      	mov	r9, r1
    		temp[2], curr[0], curr[1], curr[2]);
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	3308      	adds	r3, #8
 8000e04:	681b      	ldr	r3, [r3, #0]
    snprintf(msg, sizeof(msg), "$DIAG,%f,%f,%f,%f,%f,%f", temp[0], temp[1],
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fba6 	bl	8000558 <__aeabi_f2d>
 8000e0c:	4682      	mov	sl, r0
 8000e0e:	468b      	mov	fp, r1
    		temp[2], curr[0], curr[1], curr[2]);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	681b      	ldr	r3, [r3, #0]
    snprintf(msg, sizeof(msg), "$DIAG,%f,%f,%f,%f,%f,%f", temp[0], temp[1],
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fb9f 	bl	8000558 <__aeabi_f2d>
 8000e1a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    		temp[2], curr[0], curr[1], curr[2]);
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3304      	adds	r3, #4
 8000e22:	681b      	ldr	r3, [r3, #0]
    snprintf(msg, sizeof(msg), "$DIAG,%f,%f,%f,%f,%f,%f", temp[0], temp[1],
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fb97 	bl	8000558 <__aeabi_f2d>
 8000e2a:	e9c7 0100 	strd	r0, r1, [r7]
    		temp[2], curr[0], curr[1], curr[2]);
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3308      	adds	r3, #8
 8000e32:	681b      	ldr	r3, [r3, #0]
    snprintf(msg, sizeof(msg), "$DIAG,%f,%f,%f,%f,%f,%f", temp[0], temp[1],
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb8f 	bl	8000558 <__aeabi_f2d>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	f107 0020 	add.w	r0, r7, #32
 8000e42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000e46:	ed97 7b00 	vldr	d7, [r7]
 8000e4a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8000e4e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000e52:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000e56:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000e5a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000e5e:	e9cd 4500 	strd	r4, r5, [sp]
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <bridge_send_diagnostic+0xbc>)
 8000e64:	2196      	movs	r1, #150	; 0x96
 8000e66:	f007 f8e5 	bl	8008034 <sniprintf>

    HAL_Delay(100);
 8000e6a:	2064      	movs	r0, #100	; 0x64
 8000e6c:	f001 fa40 	bl	80022f0 <HAL_Delay>
    HAL_UART_Transmit_IT(bridge->uart, (uint8_t *)msg, 150);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f107 0120 	add.w	r1, r7, #32
 8000e78:	2296      	movs	r2, #150	; 0x96
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 fc80 	bl	8006780 <HAL_UART_Transmit_IT>
    HAL_Delay(100);
 8000e80:	2064      	movs	r0, #100	; 0x64
 8000e82:	f001 fa35 	bl	80022f0 <HAL_Delay>
}
 8000e86:	bf00      	nop
 8000e88:	37b8      	adds	r7, #184	; 0xb8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e90:	0800baa0 	.word	0x0800baa0

08000e94 <bridge_send_spectral>:
// REQUIRES: nothing
// MODIFIES: nothing
// EFFECTS: Sends spectral data in format:
// "$SPECTRAL, <ch0>, <ch1>, <ch2>, <ch3>, <ch4>, <ch5>""
void bridge_send_spectral(Bridge *bridge, uint32_t channel[6])
{
 8000e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e96:	b0af      	sub	sp, #188	; 0xbc
 8000e98:	af06      	add	r7, sp, #24
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
    char msg[150];

    snprintf(msg, sizeof(msg), "$SPECTRAL,%lu,%lu,%lu,%lu,%lu,%lu", channel[0],
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681e      	ldr	r6, [r3, #0]
    		channel[1], channel[2], channel[3], channel[4],
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	3304      	adds	r3, #4
    snprintf(msg, sizeof(msg), "$SPECTRAL,%lu,%lu,%lu,%lu,%lu,%lu", channel[0],
 8000ea6:	681b      	ldr	r3, [r3, #0]
    		channel[1], channel[2], channel[3], channel[4],
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	3208      	adds	r2, #8
    snprintf(msg, sizeof(msg), "$SPECTRAL,%lu,%lu,%lu,%lu,%lu,%lu", channel[0],
 8000eac:	6812      	ldr	r2, [r2, #0]
    		channel[1], channel[2], channel[3], channel[4],
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	310c      	adds	r1, #12
    snprintf(msg, sizeof(msg), "$SPECTRAL,%lu,%lu,%lu,%lu,%lu,%lu", channel[0],
 8000eb2:	6809      	ldr	r1, [r1, #0]
    		channel[1], channel[2], channel[3], channel[4],
 8000eb4:	6838      	ldr	r0, [r7, #0]
 8000eb6:	3010      	adds	r0, #16
    snprintf(msg, sizeof(msg), "$SPECTRAL,%lu,%lu,%lu,%lu,%lu,%lu", channel[0],
 8000eb8:	6800      	ldr	r0, [r0, #0]
			channel[5]);
 8000eba:	683c      	ldr	r4, [r7, #0]
 8000ebc:	3414      	adds	r4, #20
    snprintf(msg, sizeof(msg), "$SPECTRAL,%lu,%lu,%lu,%lu,%lu,%lu", channel[0],
 8000ebe:	6824      	ldr	r4, [r4, #0]
 8000ec0:	f107 0508 	add.w	r5, r7, #8
 8000ec4:	9404      	str	r4, [sp, #16]
 8000ec6:	9003      	str	r0, [sp, #12]
 8000ec8:	9102      	str	r1, [sp, #8]
 8000eca:	9201      	str	r2, [sp, #4]
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	4633      	mov	r3, r6
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <bridge_send_spectral+0x6c>)
 8000ed2:	2196      	movs	r1, #150	; 0x96
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	f007 f8ad 	bl	8008034 <sniprintf>

    HAL_Delay(100);
 8000eda:	2064      	movs	r0, #100	; 0x64
 8000edc:	f001 fa08 	bl	80022f0 <HAL_Delay>
    HAL_UART_Transmit_IT(bridge->uart, (uint8_t *)msg, 150);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f107 0108 	add.w	r1, r7, #8
 8000ee8:	2296      	movs	r2, #150	; 0x96
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 fc48 	bl	8006780 <HAL_UART_Transmit_IT>
    HAL_Delay(100);
 8000ef0:	2064      	movs	r0, #100	; 0x64
 8000ef2:	f001 f9fd 	bl	80022f0 <HAL_Delay>
}
 8000ef6:	bf00      	nop
 8000ef8:	37a4      	adds	r7, #164	; 0xa4
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efe:	bf00      	nop
 8000f00:	0800bab8 	.word	0x0800bab8

08000f04 <new_diag_current_sensor>:

// REQUIRES: _adc_channel is the corresponding ADC channel and
// _adc_sensor is a pointer to an ADCSensor object
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created current sensor object
DiagCurrentSensor* new_diag_current_sensor(ADCSensor* adc_sensor, uint8_t channel) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
    DiagCurrentSensor* current_sensor = (DiagCurrentSensor*) malloc(sizeof(DiagCurrentSensor));
 8000f10:	200c      	movs	r0, #12
 8000f12:	f006 f90f 	bl	8007134 <malloc>
 8000f16:	4603      	mov	r3, r0
 8000f18:	60fb      	str	r3, [r7, #12]
    current_sensor->adc_sensor = adc_sensor;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
    current_sensor->channel = channel;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	78fa      	ldrb	r2, [r7, #3]
 8000f24:	701a      	strb	r2, [r3, #0]
    current_sensor->amps = 0;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]

    return current_sensor;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <update_diag_current_sensor_val>:

// REQUIRES: valid current sensor
// MODIFIES: stored sensor value
// EFFECTS: updates the sensor value
void update_diag_current_sensor_val(DiagCurrentSensor* sensor) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    // sensor returns volts (I think) so get to millivolts and solve the proportion for amps then add the offset. (vcc/2)
	float measured_volts = get_adc_sensor_value(sensor, sensor->channel);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ff02 	bl	8000d50 <get_adc_sensor_value>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f56:	edc7 7a03 	vstr	s15, [r7, #12]
    sensor->amps = (1000 * (measured_volts / DIAG_CURR_MV_PER_AMP)) - DIAG_CURR_VCC/2;
 8000f5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f5e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f84 <update_diag_current_sensor_val+0x4c>
 8000f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f66:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000f88 <update_diag_current_sensor_val+0x50>
 8000f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f8c <update_diag_current_sensor_val+0x54>
 8000f72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	42f43333 	.word	0x42f43333
 8000f88:	447a0000 	.word	0x447a0000
 8000f8c:	3fd33333 	.word	0x3fd33333

08000f90 <get_diag_current_sensor_val>:

// REQUIRES: valid current sensor
// MODIFIES: nothing
// EFFECTS: returns the stored value for amps
float get_diag_current_sensor_val(DiagCurrentSensor* sensor) {
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    return sensor->amps;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	ee07 3a90 	vmov	s15, r3
}
 8000fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <new_diag_temp_sensor>:

// REQUIRES: _adc_channel is the corresponding ADC channel and
// _adc_sensor is a pointer to an ADCSensor object
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created current sensor object
DiagTempSensor* new_diag_temp_sensor(ADCSensor* adc_sensor, int channel) {
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
    DiagTempSensor* temp_sensor = (DiagTempSensor*) malloc(sizeof(DiagTempSensor));
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f006 f8bb 	bl	8007134 <malloc>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60fb      	str	r3, [r7, #12]
    temp_sensor->adc_sensor = adc_sensor;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
    temp_sensor->channel = channel;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	701a      	strb	r2, [r3, #0]
    temp_sensor->temp = 0;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]

    return temp_sensor;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	0000      	movs	r0, r0
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <update_diag_temp_sensor_val>:

// REQUIRES: valid temp sensor
// MODIFIES: stored sensor value
// EFFECTS: updates the sensor value
void update_diag_temp_sensor_val(DiagTempSensor* sensor) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    // Vout = T(coefficient) * T(ambient) + V0 then solve for T(ambient)
	float measured_voltage = get_adc_sensor_value(sensor->adc_sensor, sensor->channel) * 3.3 / 4096;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f7ff fea8 	bl	8000d50 <get_adc_sensor_value>
 8001000:	4603      	mov	r3, r0
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa96 	bl	8000534 <__aeabi_i2d>
 8001008:	a316      	add	r3, pc, #88	; (adr r3, 8001064 <update_diag_temp_sensor_val+0x7c>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fafb 	bl	8000608 <__aeabi_dmul>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <update_diag_temp_sensor_val+0x70>)
 8001020:	f7ff fc1c 	bl	800085c <__aeabi_ddiv>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	f7ff fde4 	bl	8000bf8 <__aeabi_d2f>
 8001030:	4603      	mov	r3, r0
 8001032:	60fb      	str	r3, [r7, #12]
    sensor->temp = (measured_voltage - DIAG_TEMP_ZERO_DEGREE_OUTPUT) / DIAG_TEMP_COEFFICIENT;
 8001034:	edd7 7a03 	vldr	s15, [r7, #12]
 8001038:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800105c <update_diag_temp_sensor_val+0x74>
 800103c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001040:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001060 <update_diag_temp_sensor_val+0x78>
 8001044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40b00000 	.word	0x40b00000
 800105c:	43c80000 	.word	0x43c80000
 8001060:	419c0000 	.word	0x419c0000
 8001064:	66666666 	.word	0x66666666
 8001068:	400a6666 	.word	0x400a6666

0800106c <get_diag_temp_sensor_val>:

// REQUIRES: valid temp sensor
// MODIFIES: nothing
// EFFECTS: returns the stored value for amps
float get_diag_temp_sensor_val(DiagTempSensor* sensor) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    return sensor->temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	ee07 3a90 	vmov	s15, r3
}
 800107c:	eeb0 0a67 	vmov.f32	s0, s15
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <new_heater>:
// REQUIRES: _heater_pin is a pointer to a PinData object and therm
// is a pointer to a Thermistor object
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Heater object
Heater *new_heater(PinData *_heater_pin, Thermistor *_thermistor)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
    Heater *heater = (Heater *)malloc(sizeof(Heater));
 8001094:	200c      	movs	r0, #12
 8001096:	f006 f84d 	bl	8007134 <malloc>
 800109a:	4603      	mov	r3, r0
 800109c:	60fb      	str	r3, [r7, #12]

    heater->heater_pin = _heater_pin;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	601a      	str	r2, [r3, #0]
    heater->thermistor = _thermistor;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	605a      	str	r2, [r3, #4]
    heater->auto_shutoff = true;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2201      	movs	r2, #1
 80010ae:	721a      	strb	r2, [r3, #8]
    heater->is_on = false;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2200      	movs	r2, #0
 80010b4:	725a      	strb	r2, [r3, #9]

    return heater;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	adc_sensor_0 = new_adc_sensor(&hadc1, 6);
 80010c6:	2106      	movs	r1, #6
 80010c8:	48a7      	ldr	r0, [pc, #668]	; (8001368 <main+0x2a8>)
 80010ca:	f7ff fe1b 	bl	8000d04 <new_adc_sensor>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4aa6      	ldr	r2, [pc, #664]	; (800136c <main+0x2ac>)
 80010d2:	6013      	str	r3, [r2, #0]
	adc_sensor_1 = new_adc_sensor(&hadc2, 3);
 80010d4:	2103      	movs	r1, #3
 80010d6:	48a6      	ldr	r0, [pc, #664]	; (8001370 <main+0x2b0>)
 80010d8:	f7ff fe14 	bl	8000d04 <new_adc_sensor>
 80010dc:	4603      	mov	r3, r0
 80010de:	4aa5      	ldr	r2, [pc, #660]	; (8001374 <main+0x2b4>)
 80010e0:	6013      	str	r3, [r2, #0]

	bridge = new_bridge(&huart1);
 80010e2:	48a5      	ldr	r0, [pc, #660]	; (8001378 <main+0x2b8>)
 80010e4:	f7ff fe65 	bl	8000db2 <new_bridge>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4aa4      	ldr	r2, [pc, #656]	; (800137c <main+0x2bc>)
 80010ec:	6013      	str	r3, [r2, #0]

	diag_current_sensors[0] = new_diag_current_sensor(adc_sensor_0, 0);
 80010ee:	4b9f      	ldr	r3, [pc, #636]	; (800136c <main+0x2ac>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff05 	bl	8000f04 <new_diag_current_sensor>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4aa0      	ldr	r2, [pc, #640]	; (8001380 <main+0x2c0>)
 80010fe:	6013      	str	r3, [r2, #0]
	diag_current_sensors[1] = new_diag_current_sensor(adc_sensor_0, 1);
 8001100:	4b9a      	ldr	r3, [pc, #616]	; (800136c <main+0x2ac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2101      	movs	r1, #1
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fefc 	bl	8000f04 <new_diag_current_sensor>
 800110c:	4603      	mov	r3, r0
 800110e:	4a9c      	ldr	r2, [pc, #624]	; (8001380 <main+0x2c0>)
 8001110:	6053      	str	r3, [r2, #4]
	diag_current_sensors[2] = new_diag_current_sensor(adc_sensor_0, 2);
 8001112:	4b96      	ldr	r3, [pc, #600]	; (800136c <main+0x2ac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2102      	movs	r1, #2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fef3 	bl	8000f04 <new_diag_current_sensor>
 800111e:	4603      	mov	r3, r0
 8001120:	4a97      	ldr	r2, [pc, #604]	; (8001380 <main+0x2c0>)
 8001122:	6093      	str	r3, [r2, #8]

	diag_temp_sensors[0] = new_diag_temp_sensor(adc_sensor_0, 3);
 8001124:	4b91      	ldr	r3, [pc, #580]	; (800136c <main+0x2ac>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2103      	movs	r1, #3
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff3f 	bl	8000fae <new_diag_temp_sensor>
 8001130:	4603      	mov	r3, r0
 8001132:	4a94      	ldr	r2, [pc, #592]	; (8001384 <main+0x2c4>)
 8001134:	6013      	str	r3, [r2, #0]
	diag_temp_sensors[1] = new_diag_temp_sensor(adc_sensor_0, 4);
 8001136:	4b8d      	ldr	r3, [pc, #564]	; (800136c <main+0x2ac>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2104      	movs	r1, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff36 	bl	8000fae <new_diag_temp_sensor>
 8001142:	4603      	mov	r3, r0
 8001144:	4a8f      	ldr	r2, [pc, #572]	; (8001384 <main+0x2c4>)
 8001146:	6053      	str	r3, [r2, #4]
	diag_temp_sensors[2] = new_diag_temp_sensor(adc_sensor_0, 5);
 8001148:	4b88      	ldr	r3, [pc, #544]	; (800136c <main+0x2ac>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2105      	movs	r1, #5
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff2d 	bl	8000fae <new_diag_temp_sensor>
 8001154:	4603      	mov	r3, r0
 8001156:	4a8b      	ldr	r2, [pc, #556]	; (8001384 <main+0x2c4>)
 8001158:	6093      	str	r3, [r2, #8]

	debug_leds[0] = new_pin_data(DEBUG_LED_0_GPIO_Port, DEBUG_LED_0_Pin, PIN_IS_OUTPUT);
 800115a:	2201      	movs	r2, #1
 800115c:	2104      	movs	r1, #4
 800115e:	488a      	ldr	r0, [pc, #552]	; (8001388 <main+0x2c8>)
 8001160:	f000 fcdb 	bl	8001b1a <new_pin_data>
 8001164:	4603      	mov	r3, r0
 8001166:	4a89      	ldr	r2, [pc, #548]	; (800138c <main+0x2cc>)
 8001168:	6013      	str	r3, [r2, #0]
	debug_leds[1] = new_pin_data(DEBUG_LED_1_GPIO_Port, DEBUG_LED_1_Pin, PIN_IS_OUTPUT);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001170:	4887      	ldr	r0, [pc, #540]	; (8001390 <main+0x2d0>)
 8001172:	f000 fcd2 	bl	8001b1a <new_pin_data>
 8001176:	4603      	mov	r3, r0
 8001178:	4a84      	ldr	r2, [pc, #528]	; (800138c <main+0x2cc>)
 800117a:	6053      	str	r3, [r2, #4]
	debug_leds[2] = new_pin_data(DEBUG_LED_2_GPIO_Port, DEBUG_LED_2_Pin, PIN_IS_OUTPUT);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001182:	4883      	ldr	r0, [pc, #524]	; (8001390 <main+0x2d0>)
 8001184:	f000 fcc9 	bl	8001b1a <new_pin_data>
 8001188:	4603      	mov	r3, r0
 800118a:	4a80      	ldr	r2, [pc, #512]	; (800138c <main+0x2cc>)
 800118c:	6093      	str	r3, [r2, #8]
	debug_leds[3] = new_pin_data(DEBUG_LED_3_GPIO_Port, DEBUG_LED_3_Pin, PIN_IS_OUTPUT);
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001194:	487e      	ldr	r0, [pc, #504]	; (8001390 <main+0x2d0>)
 8001196:	f000 fcc0 	bl	8001b1a <new_pin_data>
 800119a:	4603      	mov	r3, r0
 800119c:	4a7b      	ldr	r2, [pc, #492]	; (800138c <main+0x2cc>)
 800119e:	60d3      	str	r3, [r2, #12]

	mosfet_pins[0] = new_pin_data(MOSFET_0_GPIO_Port, MOSFET_0_Pin, PIN_IS_OUTPUT);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2101      	movs	r1, #1
 80011a4:	487b      	ldr	r0, [pc, #492]	; (8001394 <main+0x2d4>)
 80011a6:	f000 fcb8 	bl	8001b1a <new_pin_data>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a7a      	ldr	r2, [pc, #488]	; (8001398 <main+0x2d8>)
 80011ae:	6013      	str	r3, [r2, #0]
	mosfet_pins[1] = new_pin_data(MOSFET_1_GPIO_Port, MOSFET_1_Pin, PIN_IS_OUTPUT);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2102      	movs	r1, #2
 80011b4:	4877      	ldr	r0, [pc, #476]	; (8001394 <main+0x2d4>)
 80011b6:	f000 fcb0 	bl	8001b1a <new_pin_data>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a76      	ldr	r2, [pc, #472]	; (8001398 <main+0x2d8>)
 80011be:	6053      	str	r3, [r2, #4]
	mosfet_pins[2] = new_pin_data(MOSFET_2_GPIO_Port, MOSFET_2_Pin, PIN_IS_OUTPUT);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2104      	movs	r1, #4
 80011c4:	4873      	ldr	r0, [pc, #460]	; (8001394 <main+0x2d4>)
 80011c6:	f000 fca8 	bl	8001b1a <new_pin_data>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a72      	ldr	r2, [pc, #456]	; (8001398 <main+0x2d8>)
 80011ce:	6093      	str	r3, [r2, #8]
	mosfet_pins[3] = new_pin_data(MOSFET_3_GPIO_Port, MOSFET_3_Pin, PIN_IS_OUTPUT);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2108      	movs	r1, #8
 80011d4:	486f      	ldr	r0, [pc, #444]	; (8001394 <main+0x2d4>)
 80011d6:	f000 fca0 	bl	8001b1a <new_pin_data>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <main+0x2d8>)
 80011de:	60d3      	str	r3, [r2, #12]
	mosfet_pins[4] = new_pin_data(MOSFET_4_GPIO_Port, MOSFET_4_Pin, PIN_IS_OUTPUT);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2110      	movs	r1, #16
 80011e4:	486b      	ldr	r0, [pc, #428]	; (8001394 <main+0x2d4>)
 80011e6:	f000 fc98 	bl	8001b1a <new_pin_data>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a6a      	ldr	r2, [pc, #424]	; (8001398 <main+0x2d8>)
 80011ee:	6113      	str	r3, [r2, #16]
	mosfet_pins[5] = new_pin_data(MOSFET_5_GPIO_Port, MOSFET_5_Pin, PIN_IS_OUTPUT);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2120      	movs	r1, #32
 80011f4:	4867      	ldr	r0, [pc, #412]	; (8001394 <main+0x2d4>)
 80011f6:	f000 fc90 	bl	8001b1a <new_pin_data>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a66      	ldr	r2, [pc, #408]	; (8001398 <main+0x2d8>)
 80011fe:	6153      	str	r3, [r2, #20]
	mosfet_pins[6] = new_pin_data(MOSFET_6_GPIO_Port, MOSFET_6_Pin, PIN_IS_OUTPUT);
 8001200:	2201      	movs	r2, #1
 8001202:	2140      	movs	r1, #64	; 0x40
 8001204:	4863      	ldr	r0, [pc, #396]	; (8001394 <main+0x2d4>)
 8001206:	f000 fc88 	bl	8001b1a <new_pin_data>
 800120a:	4603      	mov	r3, r0
 800120c:	4a62      	ldr	r2, [pc, #392]	; (8001398 <main+0x2d8>)
 800120e:	6193      	str	r3, [r2, #24]
	mosfet_pins[7] = new_pin_data(MOSFET_7_GPIO_Port, MOSFET_7_Pin, PIN_IS_OUTPUT);
 8001210:	2201      	movs	r2, #1
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	485f      	ldr	r0, [pc, #380]	; (8001394 <main+0x2d4>)
 8001216:	f000 fc80 	bl	8001b1a <new_pin_data>
 800121a:	4603      	mov	r3, r0
 800121c:	4a5e      	ldr	r2, [pc, #376]	; (8001398 <main+0x2d8>)
 800121e:	61d3      	str	r3, [r2, #28]
	mosfet_pins[8] = new_pin_data(MOSFET_8_GPIO_Port, MOSFET_8_Pin, PIN_IS_OUTPUT);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001226:	485b      	ldr	r0, [pc, #364]	; (8001394 <main+0x2d4>)
 8001228:	f000 fc77 	bl	8001b1a <new_pin_data>
 800122c:	4603      	mov	r3, r0
 800122e:	4a5a      	ldr	r2, [pc, #360]	; (8001398 <main+0x2d8>)
 8001230:	6213      	str	r3, [r2, #32]
	mosfet_pins[9] = new_pin_data(MOSFET_9_GPIO_Port, MOSFET_9_Pin, PIN_IS_OUTPUT);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001238:	4856      	ldr	r0, [pc, #344]	; (8001394 <main+0x2d4>)
 800123a:	f000 fc6e 	bl	8001b1a <new_pin_data>
 800123e:	4603      	mov	r3, r0
 8001240:	4a55      	ldr	r2, [pc, #340]	; (8001398 <main+0x2d8>)
 8001242:	6253      	str	r3, [r2, #36]	; 0x24
	mosfet_pins[10] = new_pin_data(MOSFET_10_GPIO_Port, MOSFET_10_Pin, PIN_IS_OUTPUT);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124a:	4851      	ldr	r0, [pc, #324]	; (8001390 <main+0x2d0>)
 800124c:	f000 fc65 	bl	8001b1a <new_pin_data>
 8001250:	4603      	mov	r3, r0
 8001252:	4a51      	ldr	r2, [pc, #324]	; (8001398 <main+0x2d8>)
 8001254:	6293      	str	r3, [r2, #40]	; 0x28
	mosfet_pins[11] = new_pin_data(MOSFET_11_GPIO_Port, MOSFET_11_Pin, PIN_IS_OUTPUT);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800125c:	484c      	ldr	r0, [pc, #304]	; (8001390 <main+0x2d0>)
 800125e:	f000 fc5c 	bl	8001b1a <new_pin_data>
 8001262:	4603      	mov	r3, r0
 8001264:	4a4c      	ldr	r2, [pc, #304]	; (8001398 <main+0x2d8>)
 8001266:	62d3      	str	r3, [r2, #44]	; 0x2c

	heater_pins[0] = mosfet_pins[HEATER_0_MOSFET_PIN];
 8001268:	4b4b      	ldr	r3, [pc, #300]	; (8001398 <main+0x2d8>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a4b      	ldr	r2, [pc, #300]	; (800139c <main+0x2dc>)
 800126e:	6013      	str	r3, [r2, #0]
	heater_pins[1] = mosfet_pins[HEATER_1_MOSFET_PIN];
 8001270:	4b49      	ldr	r3, [pc, #292]	; (8001398 <main+0x2d8>)
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	4a49      	ldr	r2, [pc, #292]	; (800139c <main+0x2dc>)
 8001276:	6053      	str	r3, [r2, #4]
	heater_pins[2] = mosfet_pins[HEATER_2_MOSFET_PIN];
 8001278:	4b47      	ldr	r3, [pc, #284]	; (8001398 <main+0x2d8>)
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	4a47      	ldr	r2, [pc, #284]	; (800139c <main+0x2dc>)
 800127e:	6093      	str	r3, [r2, #8]

	servos[0] = new_servo(&htim3, TIM_CHANNEL_1, &(TIM3->CCR1));
 8001280:	4a47      	ldr	r2, [pc, #284]	; (80013a0 <main+0x2e0>)
 8001282:	2100      	movs	r1, #0
 8001284:	4847      	ldr	r0, [pc, #284]	; (80013a4 <main+0x2e4>)
 8001286:	f000 fc63 	bl	8001b50 <new_servo>
 800128a:	4603      	mov	r3, r0
 800128c:	4a46      	ldr	r2, [pc, #280]	; (80013a8 <main+0x2e8>)
 800128e:	6013      	str	r3, [r2, #0]
	servos[1] = new_servo(&htim3, TIM_CHANNEL_2, &(TIM3->CCR2));
 8001290:	4a46      	ldr	r2, [pc, #280]	; (80013ac <main+0x2ec>)
 8001292:	2104      	movs	r1, #4
 8001294:	4843      	ldr	r0, [pc, #268]	; (80013a4 <main+0x2e4>)
 8001296:	f000 fc5b 	bl	8001b50 <new_servo>
 800129a:	4603      	mov	r3, r0
 800129c:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <main+0x2e8>)
 800129e:	6053      	str	r3, [r2, #4]
	servos[2] = new_servo(&htim3, TIM_CHANNEL_3, &(TIM3->CCR3));
 80012a0:	4a43      	ldr	r2, [pc, #268]	; (80013b0 <main+0x2f0>)
 80012a2:	2108      	movs	r1, #8
 80012a4:	483f      	ldr	r0, [pc, #252]	; (80013a4 <main+0x2e4>)
 80012a6:	f000 fc53 	bl	8001b50 <new_servo>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a3e      	ldr	r2, [pc, #248]	; (80013a8 <main+0x2e8>)
 80012ae:	6093      	str	r3, [r2, #8]

//	smbus = new_smbus(&hi2c2, NULL, SPECTRAL_ADDRESS, false);
//	spectral = new_spectral(smbus);

	science_temp_sensors[0] = new_thermistor(adc_sensor_1, 0);
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <main+0x2b4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 ff6e 	bl	8002198 <new_thermistor>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a3d      	ldr	r2, [pc, #244]	; (80013b4 <main+0x2f4>)
 80012c0:	6013      	str	r3, [r2, #0]
	science_temp_sensors[1] = new_thermistor(adc_sensor_1, 1);
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <main+0x2b4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2101      	movs	r1, #1
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 ff65 	bl	8002198 <new_thermistor>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a38      	ldr	r2, [pc, #224]	; (80013b4 <main+0x2f4>)
 80012d2:	6053      	str	r3, [r2, #4]
	science_temp_sensors[2] = new_thermistor(adc_sensor_1, 2);
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <main+0x2b4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2102      	movs	r1, #2
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 ff5c 	bl	8002198 <new_thermistor>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <main+0x2f4>)
 80012e4:	6093      	str	r3, [r2, #8]

	science_heaters[0] = new_heater(heater_pins[0], science_temp_sensors[0]);
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <main+0x2dc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <main+0x2f4>)
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff feca 	bl	800108a <new_heater>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a2f      	ldr	r2, [pc, #188]	; (80013b8 <main+0x2f8>)
 80012fa:	6013      	str	r3, [r2, #0]
	science_heaters[1] = new_heater(heater_pins[1], science_temp_sensors[1]);
 80012fc:	4b27      	ldr	r3, [pc, #156]	; (800139c <main+0x2dc>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4a2c      	ldr	r2, [pc, #176]	; (80013b4 <main+0x2f4>)
 8001302:	6852      	ldr	r2, [r2, #4]
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff febf 	bl	800108a <new_heater>
 800130c:	4603      	mov	r3, r0
 800130e:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <main+0x2f8>)
 8001310:	6053      	str	r3, [r2, #4]
	science_heaters[2] = new_heater(heater_pins[2], science_temp_sensors[2]);
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <main+0x2dc>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <main+0x2f4>)
 8001318:	6892      	ldr	r2, [r2, #8]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff feb4 	bl	800108a <new_heater>
 8001322:	4603      	mov	r3, r0
 8001324:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <main+0x2f8>)
 8001326:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 ff7c 	bl	8002224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 f89e 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001330:	f000 fb64 	bl	80019fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001334:	f000 fb30 	bl	8001998 <MX_DMA_Init>
  MX_ADC1_Init();
 8001338:	f000 f900 	bl	800153c <MX_ADC1_Init>
  MX_ADC2_Init();
 800133c:	f000 f9b4 	bl	80016a8 <MX_ADC2_Init>
  MX_I2C2_Init();
 8001340:	f000 fa2c 	bl	800179c <MX_I2C2_Init>
  MX_TIM3_Init();
 8001344:	f000 fa6a 	bl	800181c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001348:	f000 faf6 	bl	8001938 <MX_USART1_UART_Init>
	   * Science Temperatures
	   * Spectral sensor data
	   * State of auto-shut off state of the heater (upon change).
	   * State of the heater (upon change).
	   */
	  update_adc_sensor_values(adc_sensor_0);
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <main+0x2ac>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fd0f 	bl	8000d74 <update_adc_sensor_values>
	  update_adc_sensor_values(adc_sensor_1);
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <main+0x2b4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fd0a 	bl	8000d74 <update_adc_sensor_values>
	  for (size_t i = 0; i < NUM_DIAG_TEMP_SENSORS; ++i) {
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	e043      	b.n	80013ee <main+0x32e>
 8001366:	bf00      	nop
 8001368:	200001fc 	.word	0x200001fc
 800136c:	20000440 	.word	0x20000440
 8001370:	2000024c 	.word	0x2000024c
 8001374:	20000444 	.word	0x20000444
 8001378:	200003bc 	.word	0x200003bc
 800137c:	20000448 	.word	0x20000448
 8001380:	2000044c 	.word	0x2000044c
 8001384:	20000458 	.word	0x20000458
 8001388:	48000c00 	.word	0x48000c00
 800138c:	20000470 	.word	0x20000470
 8001390:	48000800 	.word	0x48000800
 8001394:	48000400 	.word	0x48000400
 8001398:	2000048c 	.word	0x2000048c
 800139c:	20000480 	.word	0x20000480
 80013a0:	40000434 	.word	0x40000434
 80013a4:	20000370 	.word	0x20000370
 80013a8:	200004bc 	.word	0x200004bc
 80013ac:	40000438 	.word	0x40000438
 80013b0:	4000043c 	.word	0x4000043c
 80013b4:	200004c8 	.word	0x200004c8
 80013b8:	20000464 	.word	0x20000464
		  update_diag_temp_sensor_val(diag_temp_sensors[i]);
 80013bc:	4a25      	ldr	r2, [pc, #148]	; (8001454 <main+0x394>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fe0f 	bl	8000fe8 <update_diag_temp_sensor_val>
		  diag_temperature_values[i] = get_diag_temp_sensor_val(diag_temp_sensors[i]);
 80013ca:	4a22      	ldr	r2, [pc, #136]	; (8001454 <main+0x394>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fe4a 	bl	800106c <get_diag_temp_sensor_val>
 80013d8:	eef0 7a40 	vmov.f32	s15, s0
 80013dc:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <main+0x398>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	edc3 7a00 	vstr	s15, [r3]
	  for (size_t i = 0; i < NUM_DIAG_TEMP_SENSORS; ++i) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d9e3      	bls.n	80013bc <main+0x2fc>
	  }
	  for (size_t i = 0; i < NUM_DIAG_CURRENT_SENSORS; ++i) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	e018      	b.n	800142c <main+0x36c>
		  update_diag_current_sensor_val(diag_current_sensors[i]);
 80013fa:	4a18      	ldr	r2, [pc, #96]	; (800145c <main+0x39c>)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fd98 	bl	8000f38 <update_diag_current_sensor_val>
		  diag_current_values[i] = get_diag_current_sensor_val(diag_current_sensors[i]);
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <main+0x39c>)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fdbd 	bl	8000f90 <get_diag_current_sensor_val>
 8001416:	eef0 7a40 	vmov.f32	s15, s0
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <main+0x3a0>)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	edc3 7a00 	vstr	s15, [r3]
	  for (size_t i = 0; i < NUM_DIAG_CURRENT_SENSORS; ++i) {
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d9e3      	bls.n	80013fa <main+0x33a>
	  }
	  bridge_send_diagnostic(bridge, diag_temperature_values, diag_current_values);
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <main+0x3a4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <main+0x3a0>)
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <main+0x398>)
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fcca 	bl	8000dd4 <bridge_send_diagnostic>


	  bridge_send_spectral(bridge, spectral_values);
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <main+0x3a4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a08      	ldr	r2, [pc, #32]	; (8001468 <main+0x3a8>)
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fd22 	bl	8000e94 <bridge_send_spectral>
	  update_adc_sensor_values(adc_sensor_0);
 8001450:	e77c      	b.n	800134c <main+0x28c>
 8001452:	bf00      	nop
 8001454:	20000458 	.word	0x20000458
 8001458:	200004d4 	.word	0x200004d4
 800145c:	2000044c 	.word	0x2000044c
 8001460:	200004e0 	.word	0x200004e0
 8001464:	20000448 	.word	0x20000448
 8001468:	200004ec 	.word	0x200004ec

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0a6      	sub	sp, #152	; 0x98
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001476:	2228      	movs	r2, #40	; 0x28
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f005 fe62 	bl	8007144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2258      	movs	r2, #88	; 0x58
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f005 fe54 	bl	8007144 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149c:	2302      	movs	r3, #2
 800149e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a0:	2301      	movs	r3, #1
 80014a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a4:	2310      	movs	r3, #16
 80014a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014aa:	2302      	movs	r3, #2
 80014ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fd02 	bl	8003ed4 <HAL_RCC_OscConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014d6:	f000 fb1b 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014da:	230f      	movs	r3, #15
 80014dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014de:	2302      	movs	r3, #2
 80014e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014f4:	2102      	movs	r1, #2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 fd40 	bl	8004f7c <HAL_RCC_ClockConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001502:	f000 fb05 	bl	8001b10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <SystemClock_Config+0xcc>)
 8001508:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800150e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001518:	2300      	movs	r3, #0
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4618      	mov	r0, r3
 8001520:	f003 ff62 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800152a:	f000 faf1 	bl	8001b10 <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	3798      	adds	r7, #152	; 0x98
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	002000c1 	.word	0x002000c1

0800153c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800155e:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <MX_ADC1_Init+0x168>)
 8001560:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001564:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001566:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <MX_ADC1_Init+0x168>)
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800156c:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <MX_ADC1_Init+0x168>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001572:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <MX_ADC1_Init+0x168>)
 8001574:	2201      	movs	r2, #1
 8001576:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001578:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <MX_ADC1_Init+0x168>)
 800157a:	2200      	movs	r2, #0
 800157c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <MX_ADC1_Init+0x168>)
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <MX_ADC1_Init+0x168>)
 8001588:	2200      	movs	r2, #0
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800158c:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <MX_ADC1_Init+0x168>)
 800158e:	2201      	movs	r2, #1
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001592:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <MX_ADC1_Init+0x168>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001598:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <MX_ADC1_Init+0x168>)
 800159a:	2206      	movs	r2, #6
 800159c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <MX_ADC1_Init+0x168>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <MX_ADC1_Init+0x168>)
 80015a8:	2204      	movs	r2, #4
 80015aa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015ac:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <MX_ADC1_Init+0x168>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015b2:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <MX_ADC1_Init+0x168>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015b8:	483a      	ldr	r0, [pc, #232]	; (80016a4 <MX_ADC1_Init+0x168>)
 80015ba:	f000 fedb 	bl	8002374 <HAL_ADC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80015c4:	f000 faa4 	bl	8001b10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4619      	mov	r1, r3
 80015d2:	4834      	ldr	r0, [pc, #208]	; (80016a4 <MX_ADC1_Init+0x168>)
 80015d4:	f001 fcd0 	bl	8002f78 <HAL_ADCEx_MultiModeConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80015de:	f000 fa97 	bl	8001b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4829      	ldr	r0, [pc, #164]	; (80016a4 <MX_ADC1_Init+0x168>)
 8001600:	f001 f9ce 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800160a:	f000 fa81 	bl	8001b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800160e:	2302      	movs	r3, #2
 8001610:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001612:	2302      	movs	r3, #2
 8001614:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4822      	ldr	r0, [pc, #136]	; (80016a4 <MX_ADC1_Init+0x168>)
 800161c:	f001 f9c0 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001626:	f000 fa73 	bl	8001b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800162a:	2303      	movs	r3, #3
 800162c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800162e:	2303      	movs	r3, #3
 8001630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	481b      	ldr	r0, [pc, #108]	; (80016a4 <MX_ADC1_Init+0x168>)
 8001638:	f001 f9b2 	bl	80029a0 <HAL_ADC_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8001642:	f000 fa65 	bl	8001b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001646:	2306      	movs	r3, #6
 8001648:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800164a:	2304      	movs	r3, #4
 800164c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	4619      	mov	r1, r3
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <MX_ADC1_Init+0x168>)
 8001654:	f001 f9a4 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800165e:	f000 fa57 	bl	8001b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001662:	2307      	movs	r3, #7
 8001664:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001666:	2305      	movs	r3, #5
 8001668:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_ADC1_Init+0x168>)
 8001670:	f001 f996 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 800167a:	f000 fa49 	bl	8001b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800167e:	2308      	movs	r3, #8
 8001680:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001682:	2306      	movs	r3, #6
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_ADC1_Init+0x168>)
 800168c:	f001 f988 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001696:	f000 fa3b 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001fc 	.word	0x200001fc

080016a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ae:	463b      	mov	r3, r7
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
 80016bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80016be:	4b35      	ldr	r3, [pc, #212]	; (8001794 <MX_ADC2_Init+0xec>)
 80016c0:	4a35      	ldr	r2, [pc, #212]	; (8001798 <MX_ADC2_Init+0xf0>)
 80016c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016c4:	4b33      	ldr	r3, [pc, #204]	; (8001794 <MX_ADC2_Init+0xec>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016ca:	4b32      	ldr	r3, [pc, #200]	; (8001794 <MX_ADC2_Init+0xec>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <MX_ADC2_Init+0xec>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <MX_ADC2_Init+0xec>)
 80016d8:	2200      	movs	r2, #0
 80016da:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <MX_ADC2_Init+0xec>)
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <MX_ADC2_Init+0xec>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <MX_ADC2_Init+0xec>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <MX_ADC2_Init+0xec>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <MX_ADC2_Init+0xec>)
 80016f8:	2203      	movs	r2, #3
 80016fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <MX_ADC2_Init+0xec>)
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <MX_ADC2_Init+0xec>)
 8001706:	2204      	movs	r2, #4
 8001708:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <MX_ADC2_Init+0xec>)
 800170c:	2200      	movs	r2, #0
 800170e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <MX_ADC2_Init+0xec>)
 8001712:	2200      	movs	r2, #0
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001716:	481f      	ldr	r0, [pc, #124]	; (8001794 <MX_ADC2_Init+0xec>)
 8001718:	f000 fe2c 	bl	8002374 <HAL_ADC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001722:	f000 f9f5 	bl	8001b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001726:	2301      	movs	r3, #1
 8001728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800172a:	2301      	movs	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800173e:	463b      	mov	r3, r7
 8001740:	4619      	mov	r1, r3
 8001742:	4814      	ldr	r0, [pc, #80]	; (8001794 <MX_ADC2_Init+0xec>)
 8001744:	f001 f92c 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800174e:	f000 f9df 	bl	8001b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001752:	2302      	movs	r3, #2
 8001754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001756:	2302      	movs	r3, #2
 8001758:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800175a:	463b      	mov	r3, r7
 800175c:	4619      	mov	r1, r3
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <MX_ADC2_Init+0xec>)
 8001760:	f001 f91e 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 800176a:	f000 f9d1 	bl	8001b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800176e:	2303      	movs	r3, #3
 8001770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001772:	2303      	movs	r3, #3
 8001774:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001776:	463b      	mov	r3, r7
 8001778:	4619      	mov	r1, r3
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <MX_ADC2_Init+0xec>)
 800177c:	f001 f910 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8001786:	f000 f9c3 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000024c 	.word	0x2000024c
 8001798:	50000100 	.word	0x50000100

0800179c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_I2C2_Init+0x74>)
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <MX_I2C2_Init+0x78>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_I2C2_Init+0x74>)
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <MX_I2C2_Init+0x7c>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_I2C2_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_I2C2_Init+0x74>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_I2C2_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_I2C2_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_I2C2_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_I2C2_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_I2C2_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017d6:	480e      	ldr	r0, [pc, #56]	; (8001810 <MX_I2C2_Init+0x74>)
 80017d8:	f002 fa56 	bl	8003c88 <HAL_I2C_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017e2:	f000 f995 	bl	8001b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4809      	ldr	r0, [pc, #36]	; (8001810 <MX_I2C2_Init+0x74>)
 80017ea:	f002 fadc 	bl	8003da6 <HAL_I2CEx_ConfigAnalogFilter>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017f4:	f000 f98c 	bl	8001b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_I2C2_Init+0x74>)
 80017fc:	f002 fb1e 	bl	8003e3c <HAL_I2CEx_ConfigDigitalFilter>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001806:	f000 f983 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000324 	.word	0x20000324
 8001814:	40005800 	.word	0x40005800
 8001818:	2000090e 	.word	0x2000090e

0800181c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08e      	sub	sp, #56	; 0x38
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <MX_TIM3_Init+0x114>)
 8001850:	4a38      	ldr	r2, [pc, #224]	; (8001934 <MX_TIM3_Init+0x118>)
 8001852:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <MX_TIM3_Init+0x114>)
 8001856:	f240 623f 	movw	r2, #1599	; 0x63f
 800185a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b34      	ldr	r3, [pc, #208]	; (8001930 <MX_TIM3_Init+0x114>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8001862:	4b33      	ldr	r3, [pc, #204]	; (8001930 <MX_TIM3_Init+0x114>)
 8001864:	22c7      	movs	r2, #199	; 0xc7
 8001866:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <MX_TIM3_Init+0x114>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b30      	ldr	r3, [pc, #192]	; (8001930 <MX_TIM3_Init+0x114>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001874:	482e      	ldr	r0, [pc, #184]	; (8001930 <MX_TIM3_Init+0x114>)
 8001876:	f003 ffd5 	bl	8005824 <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001880:	f000 f946 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	4619      	mov	r1, r3
 8001890:	4827      	ldr	r0, [pc, #156]	; (8001930 <MX_TIM3_Init+0x114>)
 8001892:	f004 f993 	bl	8005bbc <HAL_TIM_ConfigClockSource>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800189c:	f000 f938 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018a0:	4823      	ldr	r0, [pc, #140]	; (8001930 <MX_TIM3_Init+0x114>)
 80018a2:	f004 f816 	bl	80058d2 <HAL_TIM_PWM_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80018ac:	f000 f930 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	481c      	ldr	r0, [pc, #112]	; (8001930 <MX_TIM3_Init+0x114>)
 80018c0:	f004 fe84 	bl	80065cc <HAL_TIMEx_MasterConfigSynchronization>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018ca:	f000 f921 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ce:	2360      	movs	r3, #96	; 0x60
 80018d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	2200      	movs	r2, #0
 80018e2:	4619      	mov	r1, r3
 80018e4:	4812      	ldr	r0, [pc, #72]	; (8001930 <MX_TIM3_Init+0x114>)
 80018e6:	f004 f855 	bl	8005994 <HAL_TIM_PWM_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80018f0:	f000 f90e 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018f4:	463b      	mov	r3, r7
 80018f6:	2204      	movs	r2, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_TIM3_Init+0x114>)
 80018fc:	f004 f84a 	bl	8005994 <HAL_TIM_PWM_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001906:	f000 f903 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800190a:	463b      	mov	r3, r7
 800190c:	2208      	movs	r2, #8
 800190e:	4619      	mov	r1, r3
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <MX_TIM3_Init+0x114>)
 8001912:	f004 f83f 	bl	8005994 <HAL_TIM_PWM_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800191c:	f000 f8f8 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <MX_TIM3_Init+0x114>)
 8001922:	f000 faa7 	bl	8001e74 <HAL_TIM_MspPostInit>

}
 8001926:	bf00      	nop
 8001928:	3738      	adds	r7, #56	; 0x38
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000370 	.word	0x20000370
 8001934:	40000400 	.word	0x40000400

08001938 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_USART1_UART_Init+0x58>)
 800193e:	4a15      	ldr	r2, [pc, #84]	; (8001994 <MX_USART1_UART_Init+0x5c>)
 8001940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <MX_USART1_UART_Init+0x58>)
 8001944:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_USART1_UART_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_USART1_UART_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_USART1_UART_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_USART1_UART_Init+0x58>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <MX_USART1_UART_Init+0x58>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_USART1_UART_Init+0x58>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <MX_USART1_UART_Init+0x58>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_USART1_UART_Init+0x58>)
 8001976:	2200      	movs	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_USART1_UART_Init+0x58>)
 800197c:	f004 feb2 	bl	80066e4 <HAL_UART_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001986:	f000 f8c3 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200003bc 	.word	0x200003bc
 8001994:	40013800 	.word	0x40013800

08001998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <MX_DMA_Init+0x60>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	4a15      	ldr	r2, [pc, #84]	; (80019f8 <MX_DMA_Init+0x60>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6153      	str	r3, [r2, #20]
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_DMA_Init+0x60>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <MX_DMA_Init+0x60>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <MX_DMA_Init+0x60>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6153      	str	r3, [r2, #20]
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <MX_DMA_Init+0x60>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	200b      	movs	r0, #11
 80019d4:	f001 fdcd 	bl	8003572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019d8:	200b      	movs	r0, #11
 80019da:	f001 fde6 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2038      	movs	r0, #56	; 0x38
 80019e4:	f001 fdc5 	bl	8003572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80019e8:	2038      	movs	r0, #56	; 0x38
 80019ea:	f001 fdde 	bl	80035aa <HAL_NVIC_EnableIRQ>

}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000

080019fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4a3a      	ldr	r2, [pc, #232]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a1c:	6153      	str	r3, [r2, #20]
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2a:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	4a34      	ldr	r2, [pc, #208]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a34:	6153      	str	r3, [r2, #20]
 8001a36:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	4a2e      	ldr	r2, [pc, #184]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	6153      	str	r3, [r2, #20]
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a7c:	6153      	str	r3, [r2, #20]
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <MX_GPIO_Init+0x104>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOSFET_10_Pin|MOSFET_11_Pin|DEBUG_LED_3_Pin|DEBUG_LED_2_Pin
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8001a90:	481c      	ldr	r0, [pc, #112]	; (8001b04 <MX_GPIO_Init+0x108>)
 8001a92:	f002 f8e1 	bl	8003c58 <HAL_GPIO_WritePin>
                          |DEBUG_LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOSFET_0_Pin|MOSFET_1_Pin|MOSFET_2_Pin|MOSFET_3_Pin
 8001a96:	2200      	movs	r2, #0
 8001a98:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001a9c:	481a      	ldr	r0, [pc, #104]	; (8001b08 <MX_GPIO_Init+0x10c>)
 8001a9e:	f002 f8db 	bl	8003c58 <HAL_GPIO_WritePin>
                          |MOSFET_4_Pin|MOSFET_5_Pin|MOSFET_6_Pin|MOSFET_7_Pin
                          |MOSFET_8_Pin|MOSFET_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MOSFET_10_Pin MOSFET_11_Pin DEBUG_LED_3_Pin DEBUG_LED_2_Pin
                           DEBUG_LED_1_Pin */
  GPIO_InitStruct.Pin = MOSFET_10_Pin|MOSFET_11_Pin|DEBUG_LED_3_Pin|DEBUG_LED_2_Pin
 8001aa2:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8001aa6:	617b      	str	r3, [r7, #20]
                          |DEBUG_LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4812      	ldr	r0, [pc, #72]	; (8001b04 <MX_GPIO_Init+0x108>)
 8001abc:	f001 ff42 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOSFET_0_Pin MOSFET_1_Pin MOSFET_2_Pin MOSFET_3_Pin
                           MOSFET_4_Pin MOSFET_5_Pin MOSFET_6_Pin MOSFET_7_Pin
                           MOSFET_8_Pin MOSFET_9_Pin */
  GPIO_InitStruct.Pin = MOSFET_0_Pin|MOSFET_1_Pin|MOSFET_2_Pin|MOSFET_3_Pin
 8001ac0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001ac4:	617b      	str	r3, [r7, #20]
                          |MOSFET_4_Pin|MOSFET_5_Pin|MOSFET_6_Pin|MOSFET_7_Pin
                          |MOSFET_8_Pin|MOSFET_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <MX_GPIO_Init+0x10c>)
 8001ada:	f001 ff33 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_0_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_0_Pin;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_LED_0_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_GPIO_Init+0x110>)
 8001af2:	f001 ff27 	bl	8003944 <HAL_GPIO_Init>

}
 8001af6:	bf00      	nop
 8001af8:	3728      	adds	r7, #40	; 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	48000800 	.word	0x48000800
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	48000c00 	.word	0x48000c00

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <Error_Handler+0x8>

08001b1a <new_pin_data>:
// REQUIRES: _port and _pin corresponds to
// the port and pin and _is_output is boolean
// that is true if the pin is an output pin.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created PinData object
PinData *new_pin_data(GPIO_TypeDef *_port, uint16_t _pin, bool _is_output) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	807b      	strh	r3, [r7, #2]
 8001b26:	4613      	mov	r3, r2
 8001b28:	707b      	strb	r3, [r7, #1]
    PinData *pin_data = (PinData*) malloc(sizeof(PinData));
 8001b2a:	2008      	movs	r0, #8
 8001b2c:	f005 fb02 	bl	8007134 <malloc>
 8001b30:	4603      	mov	r3, r0
 8001b32:	60fb      	str	r3, [r7, #12]
	pin_data->port = _port;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	601a      	str	r2, [r3, #0]
    pin_data->pin = _pin;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	887a      	ldrh	r2, [r7, #2]
 8001b3e:	809a      	strh	r2, [r3, #4]
    pin_data->is_output = _is_output;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	787a      	ldrb	r2, [r7, #1]
 8001b44:	719a      	strb	r2, [r3, #6]
	return pin_data;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <new_servo>:

// REQUIRES: timer is the timer and channel is the channel and out channel is the CCR
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Servo object
Servo *new_servo(TIM_HandleTypeDef *_timer, uint32_t _channel, uint32_t *_out_channel)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	Servo *servo = (Servo*) malloc(sizeof(Servo));
 8001b5c:	200c      	movs	r0, #12
 8001b5e:	f005 fae9 	bl	8007134 <malloc>
 8001b62:	4603      	mov	r3, r0
 8001b64:	617b      	str	r3, [r7, #20]
	servo->timer = _timer;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]
	servo->channel = _channel;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	605a      	str	r2, [r3, #4]
	servo->out_channel = _out_channel;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	609a      	str	r2, [r3, #8]
    return servo;
 8001b78:	697b      	ldr	r3, [r7, #20]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_MspInit+0x44>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_MspInit+0x44>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6193      	str	r3, [r2, #24]
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_MspInit+0x44>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_MspInit+0x44>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_MspInit+0x44>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_MspInit+0x44>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bba:	2007      	movs	r0, #7
 8001bbc:	f001 fcce 	bl	800355c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000

08001bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	; 0x30
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bec:	d16e      	bne.n	8001ccc <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bee:	4b67      	ldr	r3, [pc, #412]	; (8001d8c <HAL_ADC_MspInit+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_ADC_MspInit+0x1c0>)
 8001bf6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001bf8:	4b64      	ldr	r3, [pc, #400]	; (8001d8c <HAL_ADC_MspInit+0x1c0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d10b      	bne.n	8001c18 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c00:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	4a62      	ldr	r2, [pc, #392]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6153      	str	r3, [r2, #20]
 8001c0c:	4b60      	ldr	r3, [pc, #384]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c18:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	4a5c      	ldr	r2, [pc, #368]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001c1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c22:	6153      	str	r3, [r2, #20]
 8001c24:	4b5a      	ldr	r3, [pc, #360]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	4b57      	ldr	r3, [pc, #348]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	4a56      	ldr	r2, [pc, #344]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3a:	6153      	str	r3, [r2, #20]
 8001c3c:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	693b      	ldr	r3, [r7, #16]
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = DIAG_TEMP_0_Pin|DIAG_TEMP_1_Pin|DIAG_TEMP_2_Pin;
 8001c48:	2307      	movs	r3, #7
 8001c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	484e      	ldr	r0, [pc, #312]	; (8001d94 <HAL_ADC_MspInit+0x1c8>)
 8001c5c:	f001 fe72 	bl	8003944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DIAG_CURR_0_Pin|DIAG_CURR_1_Pin|DIAG_CURR_2_Pin;
 8001c60:	2307      	movs	r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c64:	2303      	movs	r3, #3
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c76:	f001 fe65 	bl	8003944 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_ADC_MspInit+0x1cc>)
 8001c7c:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <HAL_ADC_MspInit+0x1d0>)
 8001c7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c80:	4b45      	ldr	r3, [pc, #276]	; (8001d98 <HAL_ADC_MspInit+0x1cc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c86:	4b44      	ldr	r3, [pc, #272]	; (8001d98 <HAL_ADC_MspInit+0x1cc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c8c:	4b42      	ldr	r3, [pc, #264]	; (8001d98 <HAL_ADC_MspInit+0x1cc>)
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c92:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HAL_ADC_MspInit+0x1cc>)
 8001c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c9a:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <HAL_ADC_MspInit+0x1cc>)
 8001c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_ADC_MspInit+0x1cc>)
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_ADC_MspInit+0x1cc>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cae:	483a      	ldr	r0, [pc, #232]	; (8001d98 <HAL_ADC_MspInit+0x1cc>)
 8001cb0:	f001 fc95 	bl	80035de <HAL_DMA_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8001cba:	f7ff ff29 	bl	8001b10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a35      	ldr	r2, [pc, #212]	; (8001d98 <HAL_ADC_MspInit+0x1cc>)
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8001cc4:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <HAL_ADC_MspInit+0x1cc>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001cca:	e05a      	b.n	8001d82 <HAL_ADC_MspInit+0x1b6>
  else if(hadc->Instance==ADC2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a33      	ldr	r2, [pc, #204]	; (8001da0 <HAL_ADC_MspInit+0x1d4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d155      	bne.n	8001d82 <HAL_ADC_MspInit+0x1b6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_ADC_MspInit+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a2b      	ldr	r2, [pc, #172]	; (8001d8c <HAL_ADC_MspInit+0x1c0>)
 8001cde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_ADC_MspInit+0x1c0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10b      	bne.n	8001d00 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6153      	str	r3, [r2, #20]
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0a:	6153      	str	r3, [r2, #20]
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_ADC_MspInit+0x1c4>)
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SCIENCE_TEMP_0_Pin|SCIENCE_TEMP_1_Pin|SCIENCE_TEMP_2_Pin;
 8001d18:	2370      	movs	r3, #112	; 0x70
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2e:	f001 fe09 	bl	8003944 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_ADC_MspInit+0x1d8>)
 8001d34:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_ADC_MspInit+0x1dc>)
 8001d36:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d38:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_ADC_MspInit+0x1d8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_ADC_MspInit+0x1d8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_ADC_MspInit+0x1d8>)
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_ADC_MspInit+0x1d8>)
 8001d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d50:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_ADC_MspInit+0x1d8>)
 8001d54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d58:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_ADC_MspInit+0x1d8>)
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_ADC_MspInit+0x1d8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001d66:	480f      	ldr	r0, [pc, #60]	; (8001da4 <HAL_ADC_MspInit+0x1d8>)
 8001d68:	f001 fc39 	bl	80035de <HAL_DMA_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_ADC_MspInit+0x1aa>
      Error_Handler();
 8001d72:	f7ff fecd 	bl	8001b10 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_ADC_MspInit+0x1d8>)
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8001d7c:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_ADC_MspInit+0x1d8>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001d82:	bf00      	nop
 8001d84:	3730      	adds	r7, #48	; 0x30
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200004f0 	.word	0x200004f0
 8001d90:	40021000 	.word	0x40021000
 8001d94:	48000800 	.word	0x48000800
 8001d98:	2000029c 	.word	0x2000029c
 8001d9c:	40020008 	.word	0x40020008
 8001da0:	50000100 	.word	0x50000100
 8001da4:	200002e0 	.word	0x200002e0
 8001da8:	40020408 	.word	0x40020408

08001dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <HAL_I2C_MspInit+0x7c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d127      	bne.n	8001e1e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_I2C_MspInit+0x80>)
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	4a16      	ldr	r2, [pc, #88]	; (8001e2c <HAL_I2C_MspInit+0x80>)
 8001dd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dd8:	6153      	str	r3, [r2, #20]
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_I2C_MspInit+0x80>)
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = I2C2_SPECTRAL_SDA_Pin|I2C2_SPECTRAL_SCL_Pin;
 8001de6:	2303      	movs	r3, #3
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dea:	2312      	movs	r3, #18
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001df6:	2304      	movs	r3, #4
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480b      	ldr	r0, [pc, #44]	; (8001e30 <HAL_I2C_MspInit+0x84>)
 8001e02:	f001 fd9f 	bl	8003944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_I2C_MspInit+0x80>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <HAL_I2C_MspInit+0x80>)
 8001e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_I2C_MspInit+0x80>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	; 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40005800 	.word	0x40005800
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48001400 	.word	0x48001400

08001e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <HAL_TIM_Base_MspInit+0x38>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10b      	bne.n	8001e5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_TIM_Base_MspInit+0x3c>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_TIM_Base_MspInit+0x3c>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	61d3      	str	r3, [r2, #28]
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_TIM_Base_MspInit+0x3c>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <HAL_TIM_MspPostInit+0x64>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d11c      	bne.n	8001ed0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_TIM_MspPostInit+0x68>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <HAL_TIM_MspPostInit+0x68>)
 8001e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ea0:	6153      	str	r3, [r2, #20]
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_TIM_MspPostInit+0x68>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = SERVO_0_Pin|SERVO_1_Pin|SERVO_2_Pin;
 8001eae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001eb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <HAL_TIM_MspPostInit+0x6c>)
 8001ecc:	f001 fd3a 	bl	8003944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	48000800 	.word	0x48000800

08001ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <HAL_UART_MspInit+0x80>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d129      	bne.n	8001f5a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_UART_MspInit+0x84>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_UART_MspInit+0x84>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6193      	str	r3, [r2, #24]
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_UART_MspInit+0x84>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_UART_MspInit+0x84>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_UART_MspInit+0x84>)
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	6153      	str	r3, [r2, #20]
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_UART_MspInit+0x84>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f48:	2307      	movs	r3, #7
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f56:	f001 fcf5 	bl	8003944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40021000 	.word	0x40021000

08001f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <NMI_Handler+0x4>

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler+0x4>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb8:	f000 f97a 	bl	80022b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <DMA1_Channel1_IRQHandler+0x10>)
 8001fc6:	f001 fbb0 	bl	800372a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000029c 	.word	0x2000029c

08001fd4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <DMA2_Channel1_IRQHandler+0x10>)
 8001fda:	f001 fba6 	bl	800372a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200002e0 	.word	0x200002e0

08001fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	return 1;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_kill>:

int _kill(int pid, int sig)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002002:	f005 f86d 	bl	80070e0 <__errno>
 8002006:	4603      	mov	r3, r0
 8002008:	2216      	movs	r2, #22
 800200a:	601a      	str	r2, [r3, #0]
	return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_exit>:

void _exit (int status)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffe7 	bl	8001ff8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800202a:	e7fe      	b.n	800202a <_exit+0x12>

0800202c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e00a      	b.n	8002054 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800203e:	f3af 8000 	nop.w
 8002042:	4601      	mov	r1, r0
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	dbf0      	blt.n	800203e <_read+0x12>
	}

return len;
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e009      	b.n	800208c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	60ba      	str	r2, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbf1      	blt.n	8002078 <_write+0x12>
	}
	return len;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_close>:

int _close(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
	return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c6:	605a      	str	r2, [r3, #4]
	return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
	return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
	return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f004 ffd2 	bl	80070e0 <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20010000 	.word	0x20010000
 8002168:	00000400 	.word	0x00000400
 800216c:	200004f4 	.word	0x200004f4
 8002170:	20000510 	.word	0x20000510

08002174 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <new_thermistor>:

// REQUIRES: _adc_channel is the corresponding ADC channel and
// _adc_sensor is a pointer to an ADCSensor object
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Thermistor object
Thermistor *new_thermistor(ADCSensor* _adc_sensor, uint8_t _adc_channel) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
    Thermistor* therms = (Thermistor*) malloc(sizeof(Thermistor));
 80021a4:	200c      	movs	r0, #12
 80021a6:	f004 ffc5 	bl	8007134 <malloc>
 80021aa:	4603      	mov	r3, r0
 80021ac:	60fb      	str	r3, [r7, #12]
    therms->temperature = 100;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <new_thermistor+0x34>)
 80021b2:	601a      	str	r2, [r3, #0]
    therms->adc_channel = _adc_channel;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	711a      	strb	r2, [r3, #4]
    therms->adc_sensor = _adc_sensor;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]

    return therms;
 80021c0:	68fb      	ldr	r3, [r7, #12]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	42c80000 	.word	0x42c80000

080021d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002208 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <LoopForever+0x6>)
  ldr r1, =_edata
 80021d6:	490e      	ldr	r1, [pc, #56]	; (8002210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021d8:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <LoopForever+0xe>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021dc:	e002      	b.n	80021e4 <LoopCopyDataInit>

080021de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e2:	3304      	adds	r3, #4

080021e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e8:	d3f9      	bcc.n	80021de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021ec:	4c0b      	ldr	r4, [pc, #44]	; (800221c <LoopForever+0x16>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f0:	e001      	b.n	80021f6 <LoopFillZerobss>

080021f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f4:	3204      	adds	r2, #4

080021f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f8:	d3fb      	bcc.n	80021f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021fa:	f7ff ffbb 	bl	8002174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fe:	f004 ff75 	bl	80070ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002202:	f7fe ff5d 	bl	80010c0 <main>

08002206 <LoopForever>:

LoopForever:
    b LoopForever
 8002206:	e7fe      	b.n	8002206 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002208:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800220c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002210:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002214:	0800bfdc 	.word	0x0800bfdc
  ldr r2, =_sbss
 8002218:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800221c:	2000050c 	.word	0x2000050c

08002220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC1_2_IRQHandler>
	...

08002224 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_Init+0x28>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a07      	ldr	r2, [pc, #28]	; (800224c <HAL_Init+0x28>)
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f001 f991 	bl	800355c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223a:	2000      	movs	r0, #0
 800223c:	f000 f808 	bl	8002250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002240:	f7ff fca0 	bl	8001b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40022000 	.word	0x40022000

08002250 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_InitTick+0x54>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_InitTick+0x58>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f001 f9a9 	bl	80035c6 <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e00e      	b.n	800229c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d80a      	bhi.n	800229a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f001 f971 	bl	8003572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4a06      	ldr	r2, [pc, #24]	; (80022ac <HAL_InitTick+0x5c>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000008 	.word	0x20000008
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_IncTick+0x20>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_IncTick+0x24>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <HAL_IncTick+0x24>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000008 	.word	0x20000008
 80022d4:	200004f8 	.word	0x200004f8

080022d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return uwTick;  
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_GetTick+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	200004f8 	.word	0x200004f8

080022f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff ffee 	bl	80022d8 <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d005      	beq.n	8002316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_Delay+0x44>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002316:	bf00      	nop
 8002318:	f7ff ffde 	bl	80022d8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f7      	bhi.n	8002318 <HAL_Delay+0x28>
  {
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000008 	.word	0x20000008

08002338 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b09a      	sub	sp, #104	; 0x68
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e1e3      	b.n	800275c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d176      	bne.n	8002494 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d152      	bne.n	8002454 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff fbff 	bl	8001bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d13b      	bne.n	8002454 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 ff87 	bl	80032f0 <ADC_Disable>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d12f      	bne.n	8002454 <HAL_ADC_Init+0xe0>
 80023f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d12b      	bne.n	8002454 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002404:	f023 0302 	bic.w	r3, r3, #2
 8002408:	f043 0202 	orr.w	r2, r3, #2
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800241e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800242e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_ADC_Init+0x308>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a92      	ldr	r2, [pc, #584]	; (8002680 <HAL_ADC_Init+0x30c>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0c9a      	lsrs	r2, r3, #18
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002446:	e002      	b.n	800244e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	3b01      	subs	r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f9      	bne.n	8002448 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800246c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002470:	d110      	bne.n	8002494 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f023 0312 	bic.w	r3, r3, #18
 800247a:	f043 0210 	orr.w	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 8150 	bne.w	8002742 <HAL_ADC_Init+0x3ce>
 80024a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 814b 	bne.w	8002742 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 8143 	bne.w	8002742 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024c4:	f043 0202 	orr.w	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024d4:	d004      	beq.n	80024e0 <HAL_ADC_Init+0x16c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6a      	ldr	r2, [pc, #424]	; (8002684 <HAL_ADC_Init+0x310>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_Init+0x170>
 80024e0:	4b69      	ldr	r3, [pc, #420]	; (8002688 <HAL_ADC_Init+0x314>)
 80024e2:	e000      	b.n	80024e6 <HAL_ADC_Init+0x172>
 80024e4:	4b69      	ldr	r3, [pc, #420]	; (800268c <HAL_ADC_Init+0x318>)
 80024e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f0:	d102      	bne.n	80024f8 <HAL_ADC_Init+0x184>
 80024f2:	4b64      	ldr	r3, [pc, #400]	; (8002684 <HAL_ADC_Init+0x310>)
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	e01a      	b.n	800252e <HAL_ADC_Init+0x1ba>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a61      	ldr	r2, [pc, #388]	; (8002684 <HAL_ADC_Init+0x310>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d103      	bne.n	800250a <HAL_ADC_Init+0x196>
 8002502:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e011      	b.n	800252e <HAL_ADC_Init+0x1ba>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a60      	ldr	r2, [pc, #384]	; (8002690 <HAL_ADC_Init+0x31c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d102      	bne.n	800251a <HAL_ADC_Init+0x1a6>
 8002514:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_ADC_Init+0x320>)
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e009      	b.n	800252e <HAL_ADC_Init+0x1ba>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a5d      	ldr	r2, [pc, #372]	; (8002694 <HAL_ADC_Init+0x320>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d102      	bne.n	800252a <HAL_ADC_Init+0x1b6>
 8002524:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <HAL_ADC_Init+0x31c>)
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e001      	b.n	800252e <HAL_ADC_Init+0x1ba>
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d108      	bne.n	800254e <HAL_ADC_Init+0x1da>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_ADC_Init+0x1da>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_ADC_Init+0x1dc>
 800254e:	2300      	movs	r3, #0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d11c      	bne.n	800258e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002554:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002556:	2b00      	cmp	r3, #0
 8002558:	d010      	beq.n	800257c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <HAL_ADC_Init+0x202>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_ADC_Init+0x202>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_ADC_Init+0x204>
 8002576:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800257c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	431a      	orrs	r2, r3
 800258a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800258c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7e5b      	ldrb	r3, [r3, #25]
 8002592:	035b      	lsls	r3, r3, #13
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002598:	2a01      	cmp	r2, #1
 800259a:	d002      	beq.n	80025a2 <HAL_ADC_Init+0x22e>
 800259c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025a0:	e000      	b.n	80025a4 <HAL_ADC_Init+0x230>
 80025a2:	2200      	movs	r2, #0
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025b4:	4313      	orrs	r3, r2
 80025b6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d11b      	bne.n	80025fa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7e5b      	ldrb	r3, [r3, #25]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	3b01      	subs	r3, #1
 80025d0:	045a      	lsls	r2, r3, #17
 80025d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025da:	663b      	str	r3, [r7, #96]	; 0x60
 80025dc:	e00d      	b.n	80025fa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80025e6:	f043 0220 	orr.w	r2, r3, #32
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f043 0201 	orr.w	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d054      	beq.n	80026ac <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a22      	ldr	r2, [pc, #136]	; (8002690 <HAL_ADC_Init+0x31c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_ADC_Init+0x2a2>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a20      	ldr	r2, [pc, #128]	; (8002694 <HAL_ADC_Init+0x320>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d140      	bne.n	8002698 <HAL_ADC_Init+0x324>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800261e:	d02a      	beq.n	8002676 <HAL_ADC_Init+0x302>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002628:	d022      	beq.n	8002670 <HAL_ADC_Init+0x2fc>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002632:	d01a      	beq.n	800266a <HAL_ADC_Init+0x2f6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800263c:	d012      	beq.n	8002664 <HAL_ADC_Init+0x2f0>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002646:	d00a      	beq.n	800265e <HAL_ADC_Init+0x2ea>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002650:	d002      	beq.n	8002658 <HAL_ADC_Init+0x2e4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	e023      	b.n	80026a0 <HAL_ADC_Init+0x32c>
 8002658:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800265c:	e020      	b.n	80026a0 <HAL_ADC_Init+0x32c>
 800265e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002662:	e01d      	b.n	80026a0 <HAL_ADC_Init+0x32c>
 8002664:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002668:	e01a      	b.n	80026a0 <HAL_ADC_Init+0x32c>
 800266a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800266e:	e017      	b.n	80026a0 <HAL_ADC_Init+0x32c>
 8002670:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002674:	e014      	b.n	80026a0 <HAL_ADC_Init+0x32c>
 8002676:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800267a:	e011      	b.n	80026a0 <HAL_ADC_Init+0x32c>
 800267c:	20000000 	.word	0x20000000
 8002680:	431bde83 	.word	0x431bde83
 8002684:	50000100 	.word	0x50000100
 8002688:	50000300 	.word	0x50000300
 800268c:	50000700 	.word	0x50000700
 8002690:	50000400 	.word	0x50000400
 8002694:	50000500 	.word	0x50000500
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026a4:	4313      	orrs	r3, r2
 80026a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026a8:	4313      	orrs	r3, r2
 80026aa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d114      	bne.n	80026e4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026c8:	f023 0302 	bic.w	r3, r3, #2
 80026cc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7e1b      	ldrb	r3, [r3, #24]
 80026d2:	039a      	lsls	r2, r3, #14
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4313      	orrs	r3, r2
 80026de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026e0:	4313      	orrs	r3, r2
 80026e2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <HAL_ADC_Init+0x3f0>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80026f4:	430b      	orrs	r3, r1
 80026f6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10c      	bne.n	800271a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f023 010f 	bic.w	r1, r3, #15
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	1e5a      	subs	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
 8002718:	e007      	b.n	800272a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 020f 	bic.w	r2, r2, #15
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f023 0303 	bic.w	r3, r3, #3
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
 8002740:	e00a      	b.n	8002758 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f023 0312 	bic.w	r3, r3, #18
 800274a:	f043 0210 	orr.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002752:	2301      	movs	r3, #1
 8002754:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002758:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800275c:	4618      	mov	r0, r3
 800275e:	3768      	adds	r7, #104	; 0x68
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	fff0c007 	.word	0xfff0c007

08002768 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 80f7 	bne.w	8002976 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Start_DMA+0x2e>
 8002792:	2302      	movs	r3, #2
 8002794:	e0f2      	b.n	800297c <HAL_ADC_Start_DMA+0x214>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_Start_DMA+0x4a>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a75      	ldr	r2, [pc, #468]	; (8002984 <HAL_ADC_Start_DMA+0x21c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d109      	bne.n	80027c6 <HAL_ADC_Start_DMA+0x5e>
 80027b2:	4b75      	ldr	r3, [pc, #468]	; (8002988 <HAL_ADC_Start_DMA+0x220>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	e008      	b.n	80027d8 <HAL_ADC_Start_DMA+0x70>
 80027c6:	4b71      	ldr	r3, [pc, #452]	; (800298c <HAL_ADC_Start_DMA+0x224>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80c5 	beq.w	8002968 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fd22 	bl	8003228 <ADC_Enable>
 80027e4:	4603      	mov	r3, r0
 80027e6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 80b7 	bne.w	800295e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800280c:	d004      	beq.n	8002818 <HAL_ADC_Start_DMA+0xb0>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a5c      	ldr	r2, [pc, #368]	; (8002984 <HAL_ADC_Start_DMA+0x21c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d106      	bne.n	8002826 <HAL_ADC_Start_DMA+0xbe>
 8002818:	4b5b      	ldr	r3, [pc, #364]	; (8002988 <HAL_ADC_Start_DMA+0x220>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_ADC_Start_DMA+0xde>
 8002824:	e005      	b.n	8002832 <HAL_ADC_Start_DMA+0xca>
 8002826:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_ADC_Start_DMA+0x224>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_ADC_Start_DMA+0xde>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800283a:	d004      	beq.n	8002846 <HAL_ADC_Start_DMA+0xde>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a53      	ldr	r2, [pc, #332]	; (8002990 <HAL_ADC_Start_DMA+0x228>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d115      	bne.n	8002872 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d036      	beq.n	80028ce <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002868:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002870:	e02d      	b.n	80028ce <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002886:	d004      	beq.n	8002892 <HAL_ADC_Start_DMA+0x12a>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a3d      	ldr	r2, [pc, #244]	; (8002984 <HAL_ADC_Start_DMA+0x21c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10a      	bne.n	80028a8 <HAL_ADC_Start_DMA+0x140>
 8002892:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e008      	b.n	80028ba <HAL_ADC_Start_DMA+0x152>
 80028a8:	4b39      	ldr	r3, [pc, #228]	; (8002990 <HAL_ADC_Start_DMA+0x228>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028da:	d106      	bne.n	80028ea <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	f023 0206 	bic.w	r2, r3, #6
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44
 80028e8:	e002      	b.n	80028f0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fc:	4a25      	ldr	r2, [pc, #148]	; (8002994 <HAL_ADC_Start_DMA+0x22c>)
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	4a24      	ldr	r2, [pc, #144]	; (8002998 <HAL_ADC_Start_DMA+0x230>)
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	4a23      	ldr	r2, [pc, #140]	; (800299c <HAL_ADC_Start_DMA+0x234>)
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	221c      	movs	r2, #28
 8002916:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0210 	orr.w	r2, r2, #16
 8002926:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3340      	adds	r3, #64	; 0x40
 8002942:	4619      	mov	r1, r3
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f000 fe90 	bl	800366c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0204 	orr.w	r2, r2, #4
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	e00d      	b.n	800297a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002966:	e008      	b.n	800297a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002974:	e001      	b.n	800297a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800297a:	7dfb      	ldrb	r3, [r7, #23]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	50000100 	.word	0x50000100
 8002988:	50000300 	.word	0x50000300
 800298c:	50000700 	.word	0x50000700
 8002990:	50000400 	.word	0x50000400
 8002994:	0800315d 	.word	0x0800315d
 8002998:	080031d7 	.word	0x080031d7
 800299c:	080031f3 	.word	0x080031f3

080029a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b09b      	sub	sp, #108	; 0x6c
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x22>
 80029be:	2302      	movs	r3, #2
 80029c0:	e2ca      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x5b8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 82ae 	bne.w	8002f36 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d81c      	bhi.n	8002a1c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	461a      	mov	r2, r3
 80029f6:	231f      	movs	r3, #31
 80029f8:	4093      	lsls	r3, r2
 80029fa:	43db      	mvns	r3, r3
 80029fc:	4019      	ands	r1, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30
 8002a1a:	e063      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b09      	cmp	r3, #9
 8002a22:	d81e      	bhi.n	8002a62 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	3b1e      	subs	r3, #30
 8002a38:	221f      	movs	r2, #31
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	4019      	ands	r1, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	3b1e      	subs	r3, #30
 8002a54:	fa00 f203 	lsl.w	r2, r0, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	635a      	str	r2, [r3, #52]	; 0x34
 8002a60:	e040      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b0e      	cmp	r3, #14
 8002a68:	d81e      	bhi.n	8002aa8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	3b3c      	subs	r3, #60	; 0x3c
 8002a7e:	221f      	movs	r2, #31
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	4019      	ands	r1, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	3b3c      	subs	r3, #60	; 0x3c
 8002a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
 8002aa6:	e01d      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	3b5a      	subs	r3, #90	; 0x5a
 8002abc:	221f      	movs	r2, #31
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	4019      	ands	r1, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	3b5a      	subs	r3, #90	; 0x5a
 8002ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 80e5 	bne.w	8002cbe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b09      	cmp	r3, #9
 8002afa:	d91c      	bls.n	8002b36 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6999      	ldr	r1, [r3, #24]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b1e      	subs	r3, #30
 8002b0e:	2207      	movs	r2, #7
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4019      	ands	r1, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6898      	ldr	r0, [r3, #8]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	3b1e      	subs	r3, #30
 8002b28:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	619a      	str	r2, [r3, #24]
 8002b34:	e019      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6959      	ldr	r1, [r3, #20]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	2207      	movs	r2, #7
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	4019      	ands	r1, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6898      	ldr	r0, [r3, #8]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	08db      	lsrs	r3, r3, #3
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d84f      	bhi.n	8002c2c <HAL_ADC_ConfigChannel+0x28c>
 8002b8c:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <HAL_ADC_ConfigChannel+0x1f4>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002bc7 	.word	0x08002bc7
 8002b9c:	08002be9 	.word	0x08002be9
 8002ba0:	08002c0b 	.word	0x08002c0b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002baa:	4b9a      	ldr	r3, [pc, #616]	; (8002e14 <HAL_ADC_ConfigChannel+0x474>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	0691      	lsls	r1, r2, #26
 8002bb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bc2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bc4:	e07e      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bcc:	4b91      	ldr	r3, [pc, #580]	; (8002e14 <HAL_ADC_ConfigChannel+0x474>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	0691      	lsls	r1, r2, #26
 8002bd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002be4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002be6:	e06d      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002bee:	4b89      	ldr	r3, [pc, #548]	; (8002e14 <HAL_ADC_ConfigChannel+0x474>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	0691      	lsls	r1, r2, #26
 8002bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c06:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c08:	e05c      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c10:	4b80      	ldr	r3, [pc, #512]	; (8002e14 <HAL_ADC_ConfigChannel+0x474>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	0691      	lsls	r1, r2, #26
 8002c1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c28:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c2a:	e04b      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	069b      	lsls	r3, r3, #26
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d107      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c4e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	069b      	lsls	r3, r3, #26
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d107      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c72:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	069b      	lsls	r3, r3, #26
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d107      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c96:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	069b      	lsls	r3, r3, #26
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d10a      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cba:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002cbc:	e001      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002cbe:	bf00      	nop
 8002cc0:	e000      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002cc2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x344>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x344>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x346>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 8130 	bne.w	8002f4c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d00f      	beq.n	8002d14 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2201      	movs	r2, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002d12:	e049      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2201      	movs	r2, #1
 8002d22:	409a      	lsls	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b09      	cmp	r3, #9
 8002d34:	d91c      	bls.n	8002d70 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6999      	ldr	r1, [r3, #24]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	3b1b      	subs	r3, #27
 8002d48:	2207      	movs	r2, #7
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	4019      	ands	r1, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6898      	ldr	r0, [r3, #8]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	3b1b      	subs	r3, #27
 8002d62:	fa00 f203 	lsl.w	r2, r0, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	619a      	str	r2, [r3, #24]
 8002d6e:	e01b      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6959      	ldr	r1, [r3, #20]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	2207      	movs	r2, #7
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	4019      	ands	r1, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6898      	ldr	r0, [r3, #8]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db0:	d004      	beq.n	8002dbc <HAL_ADC_ConfigChannel+0x41c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a18      	ldr	r2, [pc, #96]	; (8002e18 <HAL_ADC_ConfigChannel+0x478>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x420>
 8002dbc:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <HAL_ADC_ConfigChannel+0x47c>)
 8002dbe:	e000      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x422>
 8002dc0:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_ADC_ConfigChannel+0x480>)
 8002dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d105      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d015      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ddc:	2b11      	cmp	r3, #17
 8002dde:	d105      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00b      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002df0:	2b12      	cmp	r3, #18
 8002df2:	f040 80ab 	bne.w	8002f4c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 80a4 	bne.w	8002f4c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e0c:	d10a      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x484>
 8002e0e:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <HAL_ADC_ConfigChannel+0x478>)
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	e022      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x4ba>
 8002e14:	83fff000 	.word	0x83fff000
 8002e18:	50000100 	.word	0x50000100
 8002e1c:	50000300 	.word	0x50000300
 8002e20:	50000700 	.word	0x50000700
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a4e      	ldr	r2, [pc, #312]	; (8002f64 <HAL_ADC_ConfigChannel+0x5c4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d103      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x496>
 8002e2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e011      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x4ba>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4b      	ldr	r2, [pc, #300]	; (8002f68 <HAL_ADC_ConfigChannel+0x5c8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d102      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x4a6>
 8002e40:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_ADC_ConfigChannel+0x5cc>)
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e009      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x4ba>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a48      	ldr	r2, [pc, #288]	; (8002f6c <HAL_ADC_ConfigChannel+0x5cc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d102      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x4b6>
 8002e50:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <HAL_ADC_ConfigChannel+0x5c8>)
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e001      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x4ba>
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d108      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x4da>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x4da>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x4dc>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d150      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d107      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x502>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x502>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x504>
 8002ea2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d13c      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d11d      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x54c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb8:	d118      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ec6:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <HAL_ADC_ConfigChannel+0x5d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <HAL_ADC_ConfigChannel+0x5d4>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	0c9a      	lsrs	r2, r3, #18
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002edc:	e002      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f9      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002eea:	e02e      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b11      	cmp	r3, #17
 8002ef2:	d10b      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x56c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efc:	d106      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f08:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f0a:	e01e      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b12      	cmp	r3, #18
 8002f12:	d11a      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f1e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f20:	e013      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002f34:	e00a      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002f48:	e000      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f4a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	376c      	adds	r7, #108	; 0x6c
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	50000100 	.word	0x50000100
 8002f68:	50000400 	.word	0x50000400
 8002f6c:	50000500 	.word	0x50000500
 8002f70:	20000000 	.word	0x20000000
 8002f74:	431bde83 	.word	0x431bde83

08002f78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b099      	sub	sp, #100	; 0x64
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f90:	d102      	bne.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002f92:	4b6d      	ldr	r3, [pc, #436]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	e01a      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a6a      	ldr	r2, [pc, #424]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d103      	bne.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002fa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	e011      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a67      	ldr	r2, [pc, #412]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d102      	bne.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fb4:	4b66      	ldr	r3, [pc, #408]	; (8003150 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	e009      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a64      	ldr	r2, [pc, #400]	; (8003150 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d102      	bne.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002fc4:	4b61      	ldr	r3, [pc, #388]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	e001      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b0      	b.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e0a9      	b.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f040 808d 	bne.w	8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 8086 	bne.w	8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003014:	d004      	beq.n	8003020 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a4b      	ldr	r2, [pc, #300]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003020:	4b4c      	ldr	r3, [pc, #304]	; (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003022:	e000      	b.n	8003026 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003024:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003026:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d040      	beq.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003042:	035b      	lsls	r3, r3, #13
 8003044:	430b      	orrs	r3, r1
 8003046:	431a      	orrs	r2, r3
 8003048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800304a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d108      	bne.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800306c:	2300      	movs	r3, #0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d15c      	bne.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d107      	bne.n	800308e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800308e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003090:	2b00      	cmp	r3, #0
 8003092:	d14b      	bne.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800309c:	f023 030f 	bic.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	6811      	ldr	r1, [r2, #0]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	6892      	ldr	r2, [r2, #8]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	431a      	orrs	r2, r3
 80030ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ae:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030b0:	e03c      	b.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030bc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d108      	bne.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d123      	bne.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003100:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d112      	bne.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800310e:	f023 030f 	bic.w	r3, r3, #15
 8003112:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003114:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003116:	e009      	b.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800312a:	e000      	b.n	800312e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800312c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800313a:	4618      	mov	r0, r3
 800313c:	3764      	adds	r7, #100	; 0x64
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	50000100 	.word	0x50000100
 800314c:	50000400 	.word	0x50000400
 8003150:	50000500 	.word	0x50000500
 8003154:	50000300 	.word	0x50000300
 8003158:	50000700 	.word	0x50000700

0800315c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003172:	2b00      	cmp	r3, #0
 8003174:	d126      	bne.n	80031c4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800318c:	2b00      	cmp	r3, #0
 800318e:	d115      	bne.n	80031bc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003194:	2b00      	cmp	r3, #0
 8003196:	d111      	bne.n	80031bc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7ff f8bb 	bl	8002338 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80031c2:	e004      	b.n	80031ce <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4798      	blx	r3
}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff f8b1 	bl	800234c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80031ea:	bf00      	nop
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	f043 0204 	orr.w	r2, r3, #4
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7ff f8a1 	bl	8002360 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d108      	bne.n	8003254 <ADC_Enable+0x2c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <ADC_Enable+0x2c>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <ADC_Enable+0x2e>
 8003254:	2300      	movs	r3, #0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d143      	bne.n	80032e2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	4b22      	ldr	r3, [pc, #136]	; (80032ec <ADC_Enable+0xc4>)
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f043 0210 	orr.w	r2, r3, #16
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e02f      	b.n	80032e4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003294:	f7ff f820 	bl	80022d8 <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800329a:	e01b      	b.n	80032d4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800329c:	f7ff f81c 	bl	80022d8 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d914      	bls.n	80032d4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d00d      	beq.n	80032d4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f043 0210 	orr.w	r2, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e007      	b.n	80032e4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d1dc      	bne.n	800329c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	8000003f 	.word	0x8000003f

080032f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d108      	bne.n	800331c <ADC_Disable+0x2c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <ADC_Disable+0x2c>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <ADC_Disable+0x2e>
 800331c:	2300      	movs	r3, #0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d047      	beq.n	80033b2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030d 	and.w	r3, r3, #13
 800332c:	2b01      	cmp	r3, #1
 800332e:	d10f      	bne.n	8003350 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0202 	orr.w	r2, r2, #2
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2203      	movs	r2, #3
 8003346:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003348:	f7fe ffc6 	bl	80022d8 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800334e:	e029      	b.n	80033a4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f043 0210 	orr.w	r2, r3, #16
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e023      	b.n	80033b4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800336c:	f7fe ffb4 	bl	80022d8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d914      	bls.n	80033a4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d10d      	bne.n	80033a4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f043 0210 	orr.w	r2, r3, #16
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e007      	b.n	80033b4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d0dc      	beq.n	800336c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033d8:	4013      	ands	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ee:	4a04      	ldr	r2, [pc, #16]	; (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	60d3      	str	r3, [r2, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <__NVIC_GetPriorityGrouping+0x18>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f003 0307 	and.w	r3, r3, #7
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	2b00      	cmp	r3, #0
 8003430:	db0b      	blt.n	800344a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	4907      	ldr	r1, [pc, #28]	; (8003458 <__NVIC_EnableIRQ+0x38>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2001      	movs	r0, #1
 8003442:	fa00 f202 	lsl.w	r2, r0, r2
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000e100 	.word	0xe000e100

0800345c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	6039      	str	r1, [r7, #0]
 8003466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346c:	2b00      	cmp	r3, #0
 800346e:	db0a      	blt.n	8003486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	490c      	ldr	r1, [pc, #48]	; (80034a8 <__NVIC_SetPriority+0x4c>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	440b      	add	r3, r1
 8003480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003484:	e00a      	b.n	800349c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	4908      	ldr	r1, [pc, #32]	; (80034ac <__NVIC_SetPriority+0x50>)
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	3b04      	subs	r3, #4
 8003494:	0112      	lsls	r2, r2, #4
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	440b      	add	r3, r1
 800349a:	761a      	strb	r2, [r3, #24]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000e100 	.word	0xe000e100
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f1c3 0307 	rsb	r3, r3, #7
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	bf28      	it	cs
 80034ce:	2304      	movcs	r3, #4
 80034d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d902      	bls.n	80034e0 <NVIC_EncodePriority+0x30>
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3b03      	subs	r3, #3
 80034de:	e000      	b.n	80034e2 <NVIC_EncodePriority+0x32>
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	401a      	ands	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f8:	f04f 31ff 	mov.w	r1, #4294967295
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	43d9      	mvns	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	4313      	orrs	r3, r2
         );
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	; 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3b01      	subs	r3, #1
 8003524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003528:	d301      	bcc.n	800352e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352a:	2301      	movs	r3, #1
 800352c:	e00f      	b.n	800354e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <SysTick_Config+0x40>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003536:	210f      	movs	r1, #15
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	f7ff ff8e 	bl	800345c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <SysTick_Config+0x40>)
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003546:	4b04      	ldr	r3, [pc, #16]	; (8003558 <SysTick_Config+0x40>)
 8003548:	2207      	movs	r2, #7
 800354a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	e000e010 	.word	0xe000e010

0800355c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff29 	bl	80033bc <__NVIC_SetPriorityGrouping>
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003584:	f7ff ff3e 	bl	8003404 <__NVIC_GetPriorityGrouping>
 8003588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f7ff ff8e 	bl	80034b0 <NVIC_EncodePriority>
 8003594:	4602      	mov	r2, r0
 8003596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359a:	4611      	mov	r1, r2
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff5d 	bl	800345c <__NVIC_SetPriority>
}
 80035a2:	bf00      	nop
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff31 	bl	8003420 <__NVIC_EnableIRQ>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff ffa2 	bl	8003518 <SysTick_Config>
 80035d4:	4603      	mov	r3, r0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e037      	b.n	8003664 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800360a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800360e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f940 	bl	80038cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}  
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_DMA_Start_IT+0x20>
 8003688:	2302      	movs	r3, #2
 800368a:	e04a      	b.n	8003722 <HAL_DMA_Start_IT+0xb6>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800369a:	2b01      	cmp	r3, #1
 800369c:	d13a      	bne.n	8003714 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f8d4 	bl	8003870 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 020e 	orr.w	r2, r2, #14
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e00f      	b.n	8003702 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 020a 	orr.w	r2, r2, #10
 80036f0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0204 	bic.w	r2, r2, #4
 8003700:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e005      	b.n	8003720 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800371c:	2302      	movs	r3, #2
 800371e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003720:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2204      	movs	r2, #4
 8003748:	409a      	lsls	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d024      	beq.n	800379c <HAL_DMA_IRQHandler+0x72>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01f      	beq.n	800379c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d107      	bne.n	800377a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0204 	bic.w	r2, r2, #4
 8003778:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003782:	2104      	movs	r1, #4
 8003784:	fa01 f202 	lsl.w	r2, r1, r2
 8003788:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	2b00      	cmp	r3, #0
 8003790:	d06a      	beq.n	8003868 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800379a:	e065      	b.n	8003868 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2202      	movs	r2, #2
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02c      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdc>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d027      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10b      	bne.n	80037dc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 020a 	bic.w	r2, r2, #10
 80037d2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e4:	2102      	movs	r1, #2
 80037e6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ea:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d035      	beq.n	8003868 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003804:	e030      	b.n	8003868 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	2208      	movs	r2, #8
 800380c:	409a      	lsls	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d028      	beq.n	8003868 <HAL_DMA_IRQHandler+0x13e>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d023      	beq.n	8003868 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 020e 	bic.w	r2, r2, #14
 800382e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	2101      	movs	r1, #1
 800383a:	fa01 f202 	lsl.w	r2, r1, r2
 800383e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
    }
  }
}  
 8003866:	e7ff      	b.n	8003868 <HAL_DMA_IRQHandler+0x13e>
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f202 	lsl.w	r2, r1, r2
 800388c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b10      	cmp	r3, #16
 800389c:	d108      	bne.n	80038b0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038ae:	e007      	b.n	80038c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <DMA_CalcBaseAndBitshift+0x60>)
 80038dc:	429a      	cmp	r2, r3
 80038de:	d80f      	bhi.n	8003900 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <DMA_CalcBaseAndBitshift+0x64>)
 80038e8:	4413      	add	r3, r2
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <DMA_CalcBaseAndBitshift+0x68>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	009a      	lsls	r2, r3, #2
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <DMA_CalcBaseAndBitshift+0x6c>)
 80038fc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80038fe:	e00e      	b.n	800391e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <DMA_CalcBaseAndBitshift+0x70>)
 8003908:	4413      	add	r3, r2
 800390a:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <DMA_CalcBaseAndBitshift+0x68>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	009a      	lsls	r2, r3, #2
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <DMA_CalcBaseAndBitshift+0x74>)
 800391c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40020407 	.word	0x40020407
 8003930:	bffdfff8 	.word	0xbffdfff8
 8003934:	cccccccd 	.word	0xcccccccd
 8003938:	40020000 	.word	0x40020000
 800393c:	bffdfbf8 	.word	0xbffdfbf8
 8003940:	40020400 	.word	0x40020400

08003944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003952:	e160      	b.n	8003c16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2101      	movs	r1, #1
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8152 	beq.w	8003c10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d005      	beq.n	8003984 <HAL_GPIO_Init+0x40>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d130      	bne.n	80039e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039ba:	2201      	movs	r2, #1
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f003 0201 	and.w	r2, r3, #1
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d017      	beq.n	8003a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	2203      	movs	r2, #3
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d123      	bne.n	8003a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	08da      	lsrs	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3208      	adds	r2, #8
 8003a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	08da      	lsrs	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3208      	adds	r2, #8
 8003a70:	6939      	ldr	r1, [r7, #16]
 8003a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	2203      	movs	r2, #3
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0203 	and.w	r2, r3, #3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80ac 	beq.w	8003c10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab8:	4b5e      	ldr	r3, [pc, #376]	; (8003c34 <HAL_GPIO_Init+0x2f0>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	4a5d      	ldr	r2, [pc, #372]	; (8003c34 <HAL_GPIO_Init+0x2f0>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6193      	str	r3, [r2, #24]
 8003ac4:	4b5b      	ldr	r3, [pc, #364]	; (8003c34 <HAL_GPIO_Init+0x2f0>)
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ad0:	4a59      	ldr	r2, [pc, #356]	; (8003c38 <HAL_GPIO_Init+0x2f4>)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	220f      	movs	r2, #15
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003afa:	d025      	beq.n	8003b48 <HAL_GPIO_Init+0x204>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a4f      	ldr	r2, [pc, #316]	; (8003c3c <HAL_GPIO_Init+0x2f8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d01f      	beq.n	8003b44 <HAL_GPIO_Init+0x200>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a4e      	ldr	r2, [pc, #312]	; (8003c40 <HAL_GPIO_Init+0x2fc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d019      	beq.n	8003b40 <HAL_GPIO_Init+0x1fc>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a4d      	ldr	r2, [pc, #308]	; (8003c44 <HAL_GPIO_Init+0x300>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <HAL_GPIO_Init+0x1f8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a4c      	ldr	r2, [pc, #304]	; (8003c48 <HAL_GPIO_Init+0x304>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00d      	beq.n	8003b38 <HAL_GPIO_Init+0x1f4>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a4b      	ldr	r2, [pc, #300]	; (8003c4c <HAL_GPIO_Init+0x308>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <HAL_GPIO_Init+0x1f0>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a4a      	ldr	r2, [pc, #296]	; (8003c50 <HAL_GPIO_Init+0x30c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <HAL_GPIO_Init+0x1ec>
 8003b2c:	2306      	movs	r3, #6
 8003b2e:	e00c      	b.n	8003b4a <HAL_GPIO_Init+0x206>
 8003b30:	2307      	movs	r3, #7
 8003b32:	e00a      	b.n	8003b4a <HAL_GPIO_Init+0x206>
 8003b34:	2305      	movs	r3, #5
 8003b36:	e008      	b.n	8003b4a <HAL_GPIO_Init+0x206>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	e006      	b.n	8003b4a <HAL_GPIO_Init+0x206>
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e004      	b.n	8003b4a <HAL_GPIO_Init+0x206>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e002      	b.n	8003b4a <HAL_GPIO_Init+0x206>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <HAL_GPIO_Init+0x206>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	f002 0203 	and.w	r2, r2, #3
 8003b50:	0092      	lsls	r2, r2, #2
 8003b52:	4093      	lsls	r3, r2
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b5a:	4937      	ldr	r1, [pc, #220]	; (8003c38 <HAL_GPIO_Init+0x2f4>)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	3302      	adds	r3, #2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b68:	4b3a      	ldr	r3, [pc, #232]	; (8003c54 <HAL_GPIO_Init+0x310>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b8c:	4a31      	ldr	r2, [pc, #196]	; (8003c54 <HAL_GPIO_Init+0x310>)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b92:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <HAL_GPIO_Init+0x310>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003bb6:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_GPIO_Init+0x310>)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <HAL_GPIO_Init+0x310>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003be0:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <HAL_GPIO_Init+0x310>)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003be6:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <HAL_GPIO_Init+0x310>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <HAL_GPIO_Init+0x310>)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	3301      	adds	r3, #1
 8003c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f ae97 	bne.w	8003954 <HAL_GPIO_Init+0x10>
  }
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	48000400 	.word	0x48000400
 8003c40:	48000800 	.word	0x48000800
 8003c44:	48000c00 	.word	0x48000c00
 8003c48:	48001000 	.word	0x48001000
 8003c4c:	48001400 	.word	0x48001400
 8003c50:	48001800 	.word	0x48001800
 8003c54:	40010400 	.word	0x40010400

08003c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	807b      	strh	r3, [r7, #2]
 8003c64:	4613      	mov	r3, r2
 8003c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c68:	787b      	ldrb	r3, [r7, #1]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c6e:	887a      	ldrh	r2, [r7, #2]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c74:	e002      	b.n	8003c7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e081      	b.n	8003d9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fe f87c 	bl	8001dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2224      	movs	r2, #36	; 0x24
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ce8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d107      	bne.n	8003d02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	e006      	b.n	8003d10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d104      	bne.n	8003d22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69d9      	ldr	r1, [r3, #28]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d138      	bne.n	8003e2e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e032      	b.n	8003e30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2224      	movs	r2, #36	; 0x24
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0201 	bic.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003df8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e000      	b.n	8003e30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d139      	bne.n	8003ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e033      	b.n	8003ec8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	; 0x24
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ee4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f001 b83a 	b.w	8004f6e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003efe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 816f 	beq.w	80041ee <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f10:	4bb5      	ldr	r3, [pc, #724]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d00c      	beq.n	8003f36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f1c:	4bb2      	ldr	r3, [pc, #712]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d15c      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x10e>
 8003f28:	4baf      	ldr	r3, [pc, #700]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d155      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x10e>
 8003f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f3a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f42:	fa93 f3a3 	rbit	r3, r3
 8003f46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4e:	fab3 f383 	clz	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d102      	bne.n	8003f68 <HAL_RCC_OscConfig+0x94>
 8003f62:	4ba1      	ldr	r3, [pc, #644]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	e015      	b.n	8003f94 <HAL_RCC_OscConfig+0xc0>
 8003f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003f84:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003f90:	4b95      	ldr	r3, [pc, #596]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f98:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003f9c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003fa0:	fa92 f2a2 	rbit	r2, r2
 8003fa4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003fa8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003fac:	fab2 f282 	clz	r2, r2
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	f042 0220 	orr.w	r2, r2, #32
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	f002 021f 	and.w	r2, r2, #31
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8111 	beq.w	80041ec <HAL_RCC_OscConfig+0x318>
 8003fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f040 8108 	bne.w	80041ec <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f000 bfc6 	b.w	8004f6e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x12e>
 8003ff4:	4b7c      	ldr	r3, [pc, #496]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7b      	ldr	r2, [pc, #492]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e036      	b.n	8004070 <HAL_RCC_OscConfig+0x19c>
 8004002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004006:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10c      	bne.n	800402c <HAL_RCC_OscConfig+0x158>
 8004012:	4b75      	ldr	r3, [pc, #468]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a74      	ldr	r2, [pc, #464]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8004018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a71      	ldr	r2, [pc, #452]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8004024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e021      	b.n	8004070 <HAL_RCC_OscConfig+0x19c>
 800402c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004030:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0x184>
 800403e:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a69      	ldr	r2, [pc, #420]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8004044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b67      	ldr	r3, [pc, #412]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a66      	ldr	r2, [pc, #408]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e00b      	b.n	8004070 <HAL_RCC_OscConfig+0x19c>
 8004058:	4b63      	ldr	r3, [pc, #396]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a62      	ldr	r2, [pc, #392]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 800405e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b60      	ldr	r3, [pc, #384]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a5f      	ldr	r2, [pc, #380]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 800406a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004074:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d059      	beq.n	8004134 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fe f92a 	bl	80022d8 <HAL_GetTick>
 8004084:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800408a:	f7fe f925 	bl	80022d8 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d902      	bls.n	80040a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	f000 bf67 	b.w	8004f6e <HAL_RCC_OscConfig+0x109a>
 80040a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80040b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d102      	bne.n	80040d2 <HAL_RCC_OscConfig+0x1fe>
 80040cc:	4b46      	ldr	r3, [pc, #280]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	e015      	b.n	80040fe <HAL_RCC_OscConfig+0x22a>
 80040d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80040de:	fa93 f3a3 	rbit	r3, r3
 80040e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80040e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80040ee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80040fa:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004102:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004106:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800410a:	fa92 f2a2 	rbit	r2, r2
 800410e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004112:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004116:	fab2 f282 	clz	r2, r2
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	f042 0220 	orr.w	r2, r2, #32
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	f002 021f 	and.w	r2, r2, #31
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f202 	lsl.w	r2, r1, r2
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ab      	beq.n	800408a <HAL_RCC_OscConfig+0x1b6>
 8004132:	e05c      	b.n	80041ee <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fe f8d0 	bl	80022d8 <HAL_GetTick>
 8004138:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413c:	e00a      	b.n	8004154 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800413e:	f7fe f8cb 	bl	80022d8 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d902      	bls.n	8004154 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	f000 bf0d 	b.w	8004f6e <HAL_RCC_OscConfig+0x109a>
 8004154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004158:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004168:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416c:	fab3 f383 	clz	r3, r3
 8004170:	b2db      	uxtb	r3, r3
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d102      	bne.n	8004186 <HAL_RCC_OscConfig+0x2b2>
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	e015      	b.n	80041b2 <HAL_RCC_OscConfig+0x2de>
 8004186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800418a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800419a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800419e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80041a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <HAL_RCC_OscConfig+0x314>)
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041b6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80041ba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80041be:	fa92 f2a2 	rbit	r2, r2
 80041c2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80041c6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80041ca:	fab2 f282 	clz	r2, r2
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	f042 0220 	orr.w	r2, r2, #32
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	f002 021f 	and.w	r2, r2, #31
 80041da:	2101      	movs	r1, #1
 80041dc:	fa01 f202 	lsl.w	r2, r1, r2
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ab      	bne.n	800413e <HAL_RCC_OscConfig+0x26a>
 80041e6:	e002      	b.n	80041ee <HAL_RCC_OscConfig+0x31a>
 80041e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 817f 	beq.w	8004502 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004204:	4ba7      	ldr	r3, [pc, #668]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00c      	beq.n	800422a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004210:	4ba4      	ldr	r3, [pc, #656]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b08      	cmp	r3, #8
 800421a:	d173      	bne.n	8004304 <HAL_RCC_OscConfig+0x430>
 800421c:	4ba1      	ldr	r3, [pc, #644]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004228:	d16c      	bne.n	8004304 <HAL_RCC_OscConfig+0x430>
 800422a:	2302      	movs	r3, #2
 800422c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800423c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004240:	fab3 f383 	clz	r3, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d102      	bne.n	800425a <HAL_RCC_OscConfig+0x386>
 8004254:	4b93      	ldr	r3, [pc, #588]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	e013      	b.n	8004282 <HAL_RCC_OscConfig+0x3ae>
 800425a:	2302      	movs	r3, #2
 800425c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004260:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800426c:	2302      	movs	r3, #2
 800426e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004272:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800427e:	4b89      	ldr	r3, [pc, #548]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2202      	movs	r2, #2
 8004284:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004288:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800428c:	fa92 f2a2 	rbit	r2, r2
 8004290:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004294:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004298:	fab2 f282 	clz	r2, r2
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	f042 0220 	orr.w	r2, r2, #32
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	f002 021f 	and.w	r2, r2, #31
 80042a8:	2101      	movs	r1, #1
 80042aa:	fa01 f202 	lsl.w	r2, r1, r2
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCC_OscConfig+0x3f6>
 80042b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d002      	beq.n	80042ca <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f000 be52 	b.w	8004f6e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	4b76      	ldr	r3, [pc, #472]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	21f8      	movs	r1, #248	; 0xf8
 80042e0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80042e8:	fa91 f1a1 	rbit	r1, r1
 80042ec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80042f0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80042f4:	fab1 f181 	clz	r1, r1
 80042f8:	b2c9      	uxtb	r1, r1
 80042fa:	408b      	lsls	r3, r1
 80042fc:	4969      	ldr	r1, [pc, #420]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004302:	e0fe      	b.n	8004502 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004308:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8088 	beq.w	8004426 <HAL_RCC_OscConfig+0x552>
 8004316:	2301      	movs	r3, #1
 8004318:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004320:	fa93 f3a3 	rbit	r3, r3
 8004324:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004328:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800432c:	fab3 f383 	clz	r3, r3
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004336:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	461a      	mov	r2, r3
 800433e:	2301      	movs	r3, #1
 8004340:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7fd ffc9 	bl	80022d8 <HAL_GetTick>
 8004346:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434c:	f7fd ffc4 	bl	80022d8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d902      	bls.n	8004362 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	f000 be06 	b.w	8004f6e <HAL_RCC_OscConfig+0x109a>
 8004362:	2302      	movs	r3, #2
 8004364:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004368:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800436c:	fa93 f3a3 	rbit	r3, r3
 8004370:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004374:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	fab3 f383 	clz	r3, r3
 800437c:	b2db      	uxtb	r3, r3
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d102      	bne.n	8004392 <HAL_RCC_OscConfig+0x4be>
 800438c:	4b45      	ldr	r3, [pc, #276]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	e013      	b.n	80043ba <HAL_RCC_OscConfig+0x4e6>
 8004392:	2302      	movs	r3, #2
 8004394:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004398:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80043a4:	2302      	movs	r3, #2
 80043a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80043aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80043ae:	fa93 f3a3 	rbit	r3, r3
 80043b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80043b6:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	2202      	movs	r2, #2
 80043bc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80043c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80043c4:	fa92 f2a2 	rbit	r2, r2
 80043c8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80043cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80043d0:	fab2 f282 	clz	r2, r2
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	f042 0220 	orr.w	r2, r2, #32
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	f002 021f 	and.w	r2, r2, #31
 80043e0:	2101      	movs	r1, #1
 80043e2:	fa01 f202 	lsl.w	r2, r1, r2
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0af      	beq.n	800434c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b2d      	ldr	r3, [pc, #180]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	21f8      	movs	r1, #248	; 0xf8
 8004402:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800440a:	fa91 f1a1 	rbit	r1, r1
 800440e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004412:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004416:	fab1 f181 	clz	r1, r1
 800441a:	b2c9      	uxtb	r1, r1
 800441c:	408b      	lsls	r3, r1
 800441e:	4921      	ldr	r1, [pc, #132]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 8004420:	4313      	orrs	r3, r2
 8004422:	600b      	str	r3, [r1, #0]
 8004424:	e06d      	b.n	8004502 <HAL_RCC_OscConfig+0x62e>
 8004426:	2301      	movs	r3, #1
 8004428:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004438:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443c:	fab3 f383 	clz	r3, r3
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004446:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	461a      	mov	r2, r3
 800444e:	2300      	movs	r3, #0
 8004450:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fd ff41 	bl	80022d8 <HAL_GetTick>
 8004456:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	e00a      	b.n	8004472 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800445c:	f7fd ff3c 	bl	80022d8 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d902      	bls.n	8004472 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	f000 bd7e 	b.w	8004f6e <HAL_RCC_OscConfig+0x109a>
 8004472:	2302      	movs	r3, #2
 8004474:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004478:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800447c:	fa93 f3a3 	rbit	r3, r3
 8004480:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004484:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004488:	fab3 f383 	clz	r3, r3
 800448c:	b2db      	uxtb	r3, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	b2db      	uxtb	r3, r3
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d105      	bne.n	80044a8 <HAL_RCC_OscConfig+0x5d4>
 800449c:	4b01      	ldr	r3, [pc, #4]	; (80044a4 <HAL_RCC_OscConfig+0x5d0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	e016      	b.n	80044d0 <HAL_RCC_OscConfig+0x5fc>
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	2302      	movs	r3, #2
 80044aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b2:	fa93 f3a3 	rbit	r3, r3
 80044b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80044ba:	2302      	movs	r3, #2
 80044bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80044c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044cc:	4bbf      	ldr	r3, [pc, #764]	; (80047cc <HAL_RCC_OscConfig+0x8f8>)
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	2202      	movs	r2, #2
 80044d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80044d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80044da:	fa92 f2a2 	rbit	r2, r2
 80044de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80044e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80044e6:	fab2 f282 	clz	r2, r2
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	f042 0220 	orr.w	r2, r2, #32
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	f002 021f 	and.w	r2, r2, #31
 80044f6:	2101      	movs	r1, #1
 80044f8:	fa01 f202 	lsl.w	r2, r1, r2
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1ac      	bne.n	800445c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004506:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8113 	beq.w	800473e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800451c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d07c      	beq.n	8004622 <HAL_RCC_OscConfig+0x74e>
 8004528:	2301      	movs	r3, #1
 800452a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800453a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	4ba2      	ldr	r3, [pc, #648]	; (80047d0 <HAL_RCC_OscConfig+0x8fc>)
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	461a      	mov	r2, r3
 800454e:	2301      	movs	r3, #1
 8004550:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004552:	f7fd fec1 	bl	80022d8 <HAL_GetTick>
 8004556:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800455c:	f7fd febc 	bl	80022d8 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d902      	bls.n	8004572 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	f000 bcfe 	b.w	8004f6e <HAL_RCC_OscConfig+0x109a>
 8004572:	2302      	movs	r3, #2
 8004574:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800457c:	fa93 f2a3 	rbit	r2, r3
 8004580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004584:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800458e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004592:	2202      	movs	r2, #2
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800459a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	fa93 f2a3 	rbit	r2, r3
 80045a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045b6:	2202      	movs	r2, #2
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	fa93 f2a3 	rbit	r2, r3
 80045c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80045d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d2:	4b7e      	ldr	r3, [pc, #504]	; (80047cc <HAL_RCC_OscConfig+0x8f8>)
 80045d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80045de:	2102      	movs	r1, #2
 80045e0:	6019      	str	r1, [r3, #0]
 80045e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	fa93 f1a3 	rbit	r1, r3
 80045f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045f8:	6019      	str	r1, [r3, #0]
  return result;
 80045fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	2101      	movs	r1, #1
 8004616:	fa01 f303 	lsl.w	r3, r1, r3
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d09d      	beq.n	800455c <HAL_RCC_OscConfig+0x688>
 8004620:	e08d      	b.n	800473e <HAL_RCC_OscConfig+0x86a>
 8004622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004626:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800462a:	2201      	movs	r2, #1
 800462c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004632:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	fa93 f2a3 	rbit	r2, r3
 800463c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004640:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004644:	601a      	str	r2, [r3, #0]
  return result;
 8004646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800464a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800464e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004650:	fab3 f383 	clz	r3, r3
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	4b5d      	ldr	r3, [pc, #372]	; (80047d0 <HAL_RCC_OscConfig+0x8fc>)
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	461a      	mov	r2, r3
 8004660:	2300      	movs	r3, #0
 8004662:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004664:	f7fd fe38 	bl	80022d8 <HAL_GetTick>
 8004668:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466c:	e00a      	b.n	8004684 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466e:	f7fd fe33 	bl	80022d8 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d902      	bls.n	8004684 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	f000 bc75 	b.w	8004f6e <HAL_RCC_OscConfig+0x109a>
 8004684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004688:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800468c:	2202      	movs	r2, #2
 800468e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004694:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	fa93 f2a3 	rbit	r2, r3
 800469e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046b0:	2202      	movs	r2, #2
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	fa93 f2a3 	rbit	r2, r3
 80046c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80046d4:	2202      	movs	r2, #2
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	fa93 f2a3 	rbit	r2, r3
 80046e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80046ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f0:	4b36      	ldr	r3, [pc, #216]	; (80047cc <HAL_RCC_OscConfig+0x8f8>)
 80046f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80046fc:	2102      	movs	r1, #2
 80046fe:	6019      	str	r1, [r3, #0]
 8004700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004704:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	fa93 f1a3 	rbit	r1, r3
 800470e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004712:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004716:	6019      	str	r1, [r3, #0]
  return result;
 8004718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800471c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2101      	movs	r1, #1
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d197      	bne.n	800466e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004742:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 81a5 	beq.w	8004a9e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004754:	2300      	movs	r3, #0
 8004756:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800475a:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <HAL_RCC_OscConfig+0x8f8>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d116      	bne.n	8004794 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004766:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_RCC_OscConfig+0x8f8>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_RCC_OscConfig+0x8f8>)
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004770:	61d3      	str	r3, [r2, #28]
 8004772:	4b16      	ldr	r3, [pc, #88]	; (80047cc <HAL_RCC_OscConfig+0x8f8>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800477a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800477e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004788:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800478c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800478e:	2301      	movs	r3, #1
 8004790:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <HAL_RCC_OscConfig+0x900>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d121      	bne.n	80047e4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <HAL_RCC_OscConfig+0x900>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a0b      	ldr	r2, [pc, #44]	; (80047d4 <HAL_RCC_OscConfig+0x900>)
 80047a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ac:	f7fd fd94 	bl	80022d8 <HAL_GetTick>
 80047b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b4:	e010      	b.n	80047d8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b6:	f7fd fd8f 	bl	80022d8 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d908      	bls.n	80047d8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e3d1      	b.n	8004f6e <HAL_RCC_OscConfig+0x109a>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
 80047d0:	10908120 	.word	0x10908120
 80047d4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d8:	4b8d      	ldr	r3, [pc, #564]	; (8004a10 <HAL_RCC_OscConfig+0xb3c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0e8      	beq.n	80047b6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x92e>
 80047f4:	4b87      	ldr	r3, [pc, #540]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	4a86      	ldr	r2, [pc, #536]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6213      	str	r3, [r2, #32]
 8004800:	e035      	b.n	800486e <HAL_RCC_OscConfig+0x99a>
 8004802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004806:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10c      	bne.n	800482c <HAL_RCC_OscConfig+0x958>
 8004812:	4b80      	ldr	r3, [pc, #512]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4a7f      	ldr	r2, [pc, #508]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	6213      	str	r3, [r2, #32]
 800481e:	4b7d      	ldr	r3, [pc, #500]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	4a7c      	ldr	r2, [pc, #496]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 8004824:	f023 0304 	bic.w	r3, r3, #4
 8004828:	6213      	str	r3, [r2, #32]
 800482a:	e020      	b.n	800486e <HAL_RCC_OscConfig+0x99a>
 800482c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004830:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b05      	cmp	r3, #5
 800483a:	d10c      	bne.n	8004856 <HAL_RCC_OscConfig+0x982>
 800483c:	4b75      	ldr	r3, [pc, #468]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	4a74      	ldr	r2, [pc, #464]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 8004842:	f043 0304 	orr.w	r3, r3, #4
 8004846:	6213      	str	r3, [r2, #32]
 8004848:	4b72      	ldr	r3, [pc, #456]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	4a71      	ldr	r2, [pc, #452]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6213      	str	r3, [r2, #32]
 8004854:	e00b      	b.n	800486e <HAL_RCC_OscConfig+0x99a>
 8004856:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	4a6e      	ldr	r2, [pc, #440]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	6213      	str	r3, [r2, #32]
 8004862:	4b6c      	ldr	r3, [pc, #432]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	4a6b      	ldr	r2, [pc, #428]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 8004868:	f023 0304 	bic.w	r3, r3, #4
 800486c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800486e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004872:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 8081 	beq.w	8004982 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004880:	f7fd fd2a 	bl	80022d8 <HAL_GetTick>
 8004884:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004888:	e00b      	b.n	80048a2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488a:	f7fd fd25 	bl	80022d8 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e365      	b.n	8004f6e <HAL_RCC_OscConfig+0x109a>
 80048a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80048aa:	2202      	movs	r2, #2
 80048ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	fa93 f2a3 	rbit	r2, r3
 80048bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80048ce:	2202      	movs	r2, #2
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	fa93 f2a3 	rbit	r2, r3
 80048e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80048e8:	601a      	str	r2, [r3, #0]
  return result;
 80048ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ee:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80048f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f4:	fab3 f383 	clz	r3, r3
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f043 0302 	orr.w	r3, r3, #2
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d102      	bne.n	800490e <HAL_RCC_OscConfig+0xa3a>
 8004908:	4b42      	ldr	r3, [pc, #264]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	e013      	b.n	8004936 <HAL_RCC_OscConfig+0xa62>
 800490e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004912:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004916:	2202      	movs	r2, #2
 8004918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800491e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	fa93 f2a3 	rbit	r2, r3
 8004928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800492c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	4b38      	ldr	r3, [pc, #224]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800493a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800493e:	2102      	movs	r1, #2
 8004940:	6011      	str	r1, [r2, #0]
 8004942:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004946:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	fa92 f1a2 	rbit	r1, r2
 8004950:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004954:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004958:	6011      	str	r1, [r2, #0]
  return result;
 800495a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800495e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	fab2 f282 	clz	r2, r2
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	f002 021f 	and.w	r2, r2, #31
 8004974:	2101      	movs	r1, #1
 8004976:	fa01 f202 	lsl.w	r2, r1, r2
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d084      	beq.n	800488a <HAL_RCC_OscConfig+0x9b6>
 8004980:	e083      	b.n	8004a8a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004982:	f7fd fca9 	bl	80022d8 <HAL_GetTick>
 8004986:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800498a:	e00b      	b.n	80049a4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f7fd fca4 	bl	80022d8 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f241 3288 	movw	r2, #5000	; 0x1388
 800499c:	4293      	cmp	r3, r2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e2e4      	b.n	8004f6e <HAL_RCC_OscConfig+0x109a>
 80049a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80049ac:	2202      	movs	r2, #2
 80049ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	fa93 f2a3 	rbit	r2, r3
 80049be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80049d0:	2202      	movs	r2, #2
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	fa93 f2a3 	rbit	r2, r3
 80049e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80049ea:	601a      	str	r2, [r3, #0]
  return result;
 80049ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049f0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80049f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f6:	fab3 f383 	clz	r3, r3
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f043 0302 	orr.w	r3, r3, #2
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d106      	bne.n	8004a18 <HAL_RCC_OscConfig+0xb44>
 8004a0a:	4b02      	ldr	r3, [pc, #8]	; (8004a14 <HAL_RCC_OscConfig+0xb40>)
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	e017      	b.n	8004a40 <HAL_RCC_OscConfig+0xb6c>
 8004a10:	40007000 	.word	0x40007000
 8004a14:	40021000 	.word	0x40021000
 8004a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004a20:	2202      	movs	r2, #2
 8004a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a28:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	fa93 f2a3 	rbit	r2, r3
 8004a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a36:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	4bb3      	ldr	r3, [pc, #716]	; (8004d0c <HAL_RCC_OscConfig+0xe38>)
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a44:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004a48:	2102      	movs	r1, #2
 8004a4a:	6011      	str	r1, [r2, #0]
 8004a4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a50:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	fa92 f1a2 	rbit	r1, r2
 8004a5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a5e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004a62:	6011      	str	r1, [r2, #0]
  return result;
 8004a64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a68:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	fab2 f282 	clz	r2, r2
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	f002 021f 	and.w	r2, r2, #31
 8004a7e:	2101      	movs	r1, #1
 8004a80:	fa01 f202 	lsl.w	r2, r1, r2
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d180      	bne.n	800498c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a8a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d105      	bne.n	8004a9e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a92:	4b9e      	ldr	r3, [pc, #632]	; (8004d0c <HAL_RCC_OscConfig+0xe38>)
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	4a9d      	ldr	r2, [pc, #628]	; (8004d0c <HAL_RCC_OscConfig+0xe38>)
 8004a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aa2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 825e 	beq.w	8004f6c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab0:	4b96      	ldr	r3, [pc, #600]	; (8004d0c <HAL_RCC_OscConfig+0xe38>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	f000 821f 	beq.w	8004efc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	f040 8170 	bne.w	8004db0 <HAL_RCC_OscConfig+0xedc>
 8004ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004ad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ae2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	fa93 f2a3 	rbit	r2, r3
 8004aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004af4:	601a      	str	r2, [r3, #0]
  return result;
 8004af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004afa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004afe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b00:	fab3 f383 	clz	r3, r3
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	461a      	mov	r2, r3
 8004b12:	2300      	movs	r3, #0
 8004b14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fd fbdf 	bl	80022d8 <HAL_GetTick>
 8004b1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1e:	e009      	b.n	8004b34 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fd fbda 	bl	80022d8 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e21c      	b.n	8004f6e <HAL_RCC_OscConfig+0x109a>
 8004b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b38:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b46:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	fa93 f2a3 	rbit	r2, r3
 8004b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b54:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b58:	601a      	str	r2, [r3, #0]
  return result;
 8004b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b5e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b64:	fab3 f383 	clz	r3, r3
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d102      	bne.n	8004b7e <HAL_RCC_OscConfig+0xcaa>
 8004b78:	4b64      	ldr	r3, [pc, #400]	; (8004d0c <HAL_RCC_OscConfig+0xe38>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	e027      	b.n	8004bce <HAL_RCC_OscConfig+0xcfa>
 8004b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b82:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004b86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b90:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	fa93 f2a3 	rbit	r2, r3
 8004b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b9e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ba8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	fa93 f2a3 	rbit	r2, r3
 8004bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	4b50      	ldr	r3, [pc, #320]	; (8004d0c <HAL_RCC_OscConfig+0xe38>)
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bd2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004bd6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004bda:	6011      	str	r1, [r2, #0]
 8004bdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004be0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	fa92 f1a2 	rbit	r1, r2
 8004bea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bee:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004bf2:	6011      	str	r1, [r2, #0]
  return result;
 8004bf4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bf8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	fab2 f282 	clz	r2, r2
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	f042 0220 	orr.w	r2, r2, #32
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	f002 021f 	and.w	r2, r2, #31
 8004c0e:	2101      	movs	r1, #1
 8004c10:	fa01 f202 	lsl.w	r2, r1, r2
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d182      	bne.n	8004b20 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c1a:	4b3c      	ldr	r3, [pc, #240]	; (8004d0c <HAL_RCC_OscConfig+0xe38>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	f023 020f 	bic.w	r2, r3, #15
 8004c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	4937      	ldr	r1, [pc, #220]	; (8004d0c <HAL_RCC_OscConfig+0xe38>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004c34:	4b35      	ldr	r3, [pc, #212]	; (8004d0c <HAL_RCC_OscConfig+0xe38>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6a19      	ldr	r1, [r3, #32]
 8004c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	430b      	orrs	r3, r1
 8004c56:	492d      	ldr	r1, [pc, #180]	; (8004d0c <HAL_RCC_OscConfig+0xe38>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	604b      	str	r3, [r1, #4]
 8004c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004c64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	fa93 f2a3 	rbit	r2, r3
 8004c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c80:	601a      	str	r2, [r3, #0]
  return result;
 8004c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c86:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c8a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c8c:	fab3 f383 	clz	r3, r3
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca2:	f7fd fb19 	bl	80022d8 <HAL_GetTick>
 8004ca6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004caa:	e009      	b.n	8004cc0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fd fb14 	bl	80022d8 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e156      	b.n	8004f6e <HAL_RCC_OscConfig+0x109a>
 8004cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cc4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cd2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	fa93 f2a3 	rbit	r2, r3
 8004cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ce4:	601a      	str	r2, [r3, #0]
  return result;
 8004ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004cee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cf0:	fab3 f383 	clz	r3, r3
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d105      	bne.n	8004d10 <HAL_RCC_OscConfig+0xe3c>
 8004d04:	4b01      	ldr	r3, [pc, #4]	; (8004d0c <HAL_RCC_OscConfig+0xe38>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	e02a      	b.n	8004d60 <HAL_RCC_OscConfig+0xe8c>
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d22:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	fa93 f2a3 	rbit	r2, r3
 8004d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d3a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d48:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	fa93 f2a3 	rbit	r2, r3
 8004d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d56:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	4b86      	ldr	r3, [pc, #536]	; (8004f78 <HAL_RCC_OscConfig+0x10a4>)
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d64:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004d68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d6c:	6011      	str	r1, [r2, #0]
 8004d6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	fa92 f1a2 	rbit	r1, r2
 8004d7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d80:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004d84:	6011      	str	r1, [r2, #0]
  return result;
 8004d86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d8a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	fab2 f282 	clz	r2, r2
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	f042 0220 	orr.w	r2, r2, #32
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	f002 021f 	and.w	r2, r2, #31
 8004da0:	2101      	movs	r1, #1
 8004da2:	fa01 f202 	lsl.w	r2, r1, r2
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f43f af7f 	beq.w	8004cac <HAL_RCC_OscConfig+0xdd8>
 8004dae:	e0dd      	b.n	8004f6c <HAL_RCC_OscConfig+0x1098>
 8004db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004db4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004db8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dc2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	fa93 f2a3 	rbit	r2, r3
 8004dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dd0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004dd4:	601a      	str	r2, [r3, #0]
  return result;
 8004dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dda:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004dde:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de0:	fab3 f383 	clz	r3, r3
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004dea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	461a      	mov	r2, r3
 8004df2:	2300      	movs	r3, #0
 8004df4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df6:	f7fd fa6f 	bl	80022d8 <HAL_GetTick>
 8004dfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dfe:	e009      	b.n	8004e14 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e00:	f7fd fa6a 	bl	80022d8 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e0ac      	b.n	8004f6e <HAL_RCC_OscConfig+0x109a>
 8004e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e26:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	fa93 f2a3 	rbit	r2, r3
 8004e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e34:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004e38:	601a      	str	r2, [r3, #0]
  return result;
 8004e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e3e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004e42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e44:	fab3 f383 	clz	r3, r3
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d102      	bne.n	8004e5e <HAL_RCC_OscConfig+0xf8a>
 8004e58:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_OscConfig+0x10a4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	e027      	b.n	8004eae <HAL_RCC_OscConfig+0xfda>
 8004e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e62:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004e66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	fa93 f2a3 	rbit	r2, r3
 8004e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e7e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e88:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	fa93 f2a3 	rbit	r2, r3
 8004ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ea4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	4b33      	ldr	r3, [pc, #204]	; (8004f78 <HAL_RCC_OscConfig+0x10a4>)
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004eb2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004eb6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004eba:	6011      	str	r1, [r2, #0]
 8004ebc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ec0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	fa92 f1a2 	rbit	r1, r2
 8004eca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ece:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004ed2:	6011      	str	r1, [r2, #0]
  return result;
 8004ed4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ed8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	fab2 f282 	clz	r2, r2
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	f042 0220 	orr.w	r2, r2, #32
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	f002 021f 	and.w	r2, r2, #31
 8004eee:	2101      	movs	r1, #1
 8004ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d182      	bne.n	8004e00 <HAL_RCC_OscConfig+0xf2c>
 8004efa:	e037      	b.n	8004f6c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e02e      	b.n	8004f6e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCC_OscConfig+0x10a4>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004f18:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <HAL_RCC_OscConfig+0x10a4>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f24:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d117      	bne.n	8004f68 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004f38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f3c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d10b      	bne.n	8004f68 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004f50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f54:	f003 020f 	and.w	r2, r3, #15
 8004f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40021000 	.word	0x40021000

08004f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b09e      	sub	sp, #120	; 0x78
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e162      	b.n	800525a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f94:	4b90      	ldr	r3, [pc, #576]	; (80051d8 <HAL_RCC_ClockConfig+0x25c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d910      	bls.n	8004fc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa2:	4b8d      	ldr	r3, [pc, #564]	; (80051d8 <HAL_RCC_ClockConfig+0x25c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f023 0207 	bic.w	r2, r3, #7
 8004faa:	498b      	ldr	r1, [pc, #556]	; (80051d8 <HAL_RCC_ClockConfig+0x25c>)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb2:	4b89      	ldr	r3, [pc, #548]	; (80051d8 <HAL_RCC_ClockConfig+0x25c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e14a      	b.n	800525a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd0:	4b82      	ldr	r3, [pc, #520]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	497f      	ldr	r1, [pc, #508]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 80dc 	beq.w	80051a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d13c      	bne.n	8005072 <HAL_RCC_ClockConfig+0xf6>
 8004ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ffc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005000:	fa93 f3a3 	rbit	r3, r3
 8005004:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005008:	fab3 f383 	clz	r3, r3
 800500c:	b2db      	uxtb	r3, r3
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d102      	bne.n	8005022 <HAL_RCC_ClockConfig+0xa6>
 800501c:	4b6f      	ldr	r3, [pc, #444]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	e00f      	b.n	8005042 <HAL_RCC_ClockConfig+0xc6>
 8005022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005026:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800502a:	fa93 f3a3 	rbit	r3, r3
 800502e:	667b      	str	r3, [r7, #100]	; 0x64
 8005030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005034:	663b      	str	r3, [r7, #96]	; 0x60
 8005036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005038:	fa93 f3a3 	rbit	r3, r3
 800503c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800503e:	4b67      	ldr	r3, [pc, #412]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005046:	65ba      	str	r2, [r7, #88]	; 0x58
 8005048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800504a:	fa92 f2a2 	rbit	r2, r2
 800504e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005052:	fab2 f282 	clz	r2, r2
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	f042 0220 	orr.w	r2, r2, #32
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	f002 021f 	and.w	r2, r2, #31
 8005062:	2101      	movs	r1, #1
 8005064:	fa01 f202 	lsl.w	r2, r1, r2
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d17b      	bne.n	8005166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e0f3      	b.n	800525a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d13c      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x178>
 800507a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800507e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005082:	fa93 f3a3 	rbit	r3, r3
 8005086:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508a:	fab3 f383 	clz	r3, r3
 800508e:	b2db      	uxtb	r3, r3
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d102      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x128>
 800509e:	4b4f      	ldr	r3, [pc, #316]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	e00f      	b.n	80050c4 <HAL_RCC_ClockConfig+0x148>
 80050a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	647b      	str	r3, [r7, #68]	; 0x44
 80050b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050b6:	643b      	str	r3, [r7, #64]	; 0x40
 80050b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c0:	4b46      	ldr	r3, [pc, #280]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80050ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050cc:	fa92 f2a2 	rbit	r2, r2
 80050d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80050d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050d4:	fab2 f282 	clz	r2, r2
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	f042 0220 	orr.w	r2, r2, #32
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	f002 021f 	and.w	r2, r2, #31
 80050e4:	2101      	movs	r1, #1
 80050e6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d13a      	bne.n	8005166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0b2      	b.n	800525a <HAL_RCC_ClockConfig+0x2de>
 80050f4:	2302      	movs	r3, #2
 80050f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	fa93 f3a3 	rbit	r3, r3
 80050fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d102      	bne.n	800511c <HAL_RCC_ClockConfig+0x1a0>
 8005116:	4b31      	ldr	r3, [pc, #196]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	e00d      	b.n	8005138 <HAL_RCC_ClockConfig+0x1bc>
 800511c:	2302      	movs	r3, #2
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	fa93 f3a3 	rbit	r3, r3
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
 8005128:	2302      	movs	r3, #2
 800512a:	623b      	str	r3, [r7, #32]
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	fa93 f3a3 	rbit	r3, r3
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	4b29      	ldr	r3, [pc, #164]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2202      	movs	r2, #2
 800513a:	61ba      	str	r2, [r7, #24]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	fa92 f2a2 	rbit	r2, r2
 8005142:	617a      	str	r2, [r7, #20]
  return result;
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	fab2 f282 	clz	r2, r2
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	f042 0220 	orr.w	r2, r2, #32
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	f002 021f 	and.w	r2, r2, #31
 8005156:	2101      	movs	r1, #1
 8005158:	fa01 f202 	lsl.w	r2, r1, r2
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e079      	b.n	800525a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005166:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f023 0203 	bic.w	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	491a      	ldr	r1, [pc, #104]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8005174:	4313      	orrs	r3, r2
 8005176:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005178:	f7fd f8ae 	bl	80022d8 <HAL_GetTick>
 800517c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517e:	e00a      	b.n	8005196 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005180:	f7fd f8aa 	bl	80022d8 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f241 3288 	movw	r2, #5000	; 0x1388
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e061      	b.n	800525a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005196:	4b11      	ldr	r3, [pc, #68]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f003 020c 	and.w	r2, r3, #12
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d1eb      	bne.n	8005180 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_RCC_ClockConfig+0x25c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d214      	bcs.n	80051e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b6:	4b08      	ldr	r3, [pc, #32]	; (80051d8 <HAL_RCC_ClockConfig+0x25c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f023 0207 	bic.w	r2, r3, #7
 80051be:	4906      	ldr	r1, [pc, #24]	; (80051d8 <HAL_RCC_ClockConfig+0x25c>)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <HAL_RCC_ClockConfig+0x25c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d005      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e040      	b.n	800525a <HAL_RCC_ClockConfig+0x2de>
 80051d8:	40022000 	.word	0x40022000
 80051dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <HAL_RCC_ClockConfig+0x2e8>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	491a      	ldr	r1, [pc, #104]	; (8005264 <HAL_RCC_ClockConfig+0x2e8>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800520a:	4b16      	ldr	r3, [pc, #88]	; (8005264 <HAL_RCC_ClockConfig+0x2e8>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4912      	ldr	r1, [pc, #72]	; (8005264 <HAL_RCC_ClockConfig+0x2e8>)
 800521a:	4313      	orrs	r3, r2
 800521c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800521e:	f000 f829 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 8005222:	4601      	mov	r1, r0
 8005224:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <HAL_RCC_ClockConfig+0x2e8>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800522c:	22f0      	movs	r2, #240	; 0xf0
 800522e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	fa92 f2a2 	rbit	r2, r2
 8005236:	60fa      	str	r2, [r7, #12]
  return result;
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	fab2 f282 	clz	r2, r2
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	40d3      	lsrs	r3, r2
 8005242:	4a09      	ldr	r2, [pc, #36]	; (8005268 <HAL_RCC_ClockConfig+0x2ec>)
 8005244:	5cd3      	ldrb	r3, [r2, r3]
 8005246:	fa21 f303 	lsr.w	r3, r1, r3
 800524a:	4a08      	ldr	r2, [pc, #32]	; (800526c <HAL_RCC_ClockConfig+0x2f0>)
 800524c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <HAL_RCC_ClockConfig+0x2f4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fc fffc 	bl	8002250 <HAL_InitTick>
  
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3778      	adds	r7, #120	; 0x78
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40021000 	.word	0x40021000
 8005268:	0800baf4 	.word	0x0800baf4
 800526c:	20000000 	.word	0x20000000
 8005270:	20000004 	.word	0x20000004

08005274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005274:	b480      	push	{r7}
 8005276:	b08b      	sub	sp, #44	; 0x2c
 8005278:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	2300      	movs	r3, #0
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800528e:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 030c 	and.w	r3, r3, #12
 800529a:	2b04      	cmp	r3, #4
 800529c:	d002      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x30>
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d003      	beq.n	80052aa <HAL_RCC_GetSysClockFreq+0x36>
 80052a2:	e03f      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <HAL_RCC_GetSysClockFreq+0xc8>)
 80052a6:	623b      	str	r3, [r7, #32]
      break;
 80052a8:	e03f      	b.n	800532a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80052b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80052b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	fa92 f2a2 	rbit	r2, r2
 80052bc:	607a      	str	r2, [r7, #4]
  return result;
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	fab2 f282 	clz	r2, r2
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	40d3      	lsrs	r3, r2
 80052c8:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <HAL_RCC_GetSysClockFreq+0xcc>)
 80052ca:	5cd3      	ldrb	r3, [r2, r3]
 80052cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80052ce:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <HAL_RCC_GetSysClockFreq+0xc4>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	220f      	movs	r2, #15
 80052d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	fa92 f2a2 	rbit	r2, r2
 80052e0:	60fa      	str	r2, [r7, #12]
  return result;
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	fab2 f282 	clz	r2, r2
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	40d3      	lsrs	r3, r2
 80052ec:	4a15      	ldr	r2, [pc, #84]	; (8005344 <HAL_RCC_GetSysClockFreq+0xd0>)
 80052ee:	5cd3      	ldrb	r3, [r2, r3]
 80052f0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80052fc:	4a0f      	ldr	r2, [pc, #60]	; (800533c <HAL_RCC_GetSysClockFreq+0xc8>)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	fbb2 f2f3 	udiv	r2, r2, r3
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
 800530c:	e007      	b.n	800531e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800530e:	4a0b      	ldr	r2, [pc, #44]	; (800533c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	fbb2 f2f3 	udiv	r2, r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	fb02 f303 	mul.w	r3, r2, r3
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	623b      	str	r3, [r7, #32]
      break;
 8005322:	e002      	b.n	800532a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005326:	623b      	str	r3, [r7, #32]
      break;
 8005328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532a:	6a3b      	ldr	r3, [r7, #32]
}
 800532c:	4618      	mov	r0, r3
 800532e:	372c      	adds	r7, #44	; 0x2c
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40021000 	.word	0x40021000
 800533c:	007a1200 	.word	0x007a1200
 8005340:	0800bb0c 	.word	0x0800bb0c
 8005344:	0800bb1c 	.word	0x0800bb1c

08005348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_GetHCLKFreq+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000000 	.word	0x20000000

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005366:	f7ff ffef 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 800536a:	4601      	mov	r1, r0
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005374:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005378:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	fa92 f2a2 	rbit	r2, r2
 8005380:	603a      	str	r2, [r7, #0]
  return result;
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	fab2 f282 	clz	r2, r2
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	40d3      	lsrs	r3, r2
 800538c:	4a04      	ldr	r2, [pc, #16]	; (80053a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800538e:	5cd3      	ldrb	r3, [r2, r3]
 8005390:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40021000 	.word	0x40021000
 80053a0:	0800bb04 	.word	0x0800bb04

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80053aa:	f7ff ffcd 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 80053ae:	4601      	mov	r1, r0
 80053b0:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80053b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80053bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	fa92 f2a2 	rbit	r2, r2
 80053c4:	603a      	str	r2, [r7, #0]
  return result;
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	fab2 f282 	clz	r2, r2
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	40d3      	lsrs	r3, r2
 80053d0:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80053d2:	5cd3      	ldrb	r3, [r2, r3]
 80053d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40021000 	.word	0x40021000
 80053e4:	0800bb04 	.word	0x0800bb04

080053e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b092      	sub	sp, #72	; 0x48
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80d4 	beq.w	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800540c:	4b4e      	ldr	r3, [pc, #312]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10e      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005418:	4b4b      	ldr	r3, [pc, #300]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	4a4a      	ldr	r2, [pc, #296]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005422:	61d3      	str	r3, [r2, #28]
 8005424:	4b48      	ldr	r3, [pc, #288]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005430:	2301      	movs	r3, #1
 8005432:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005436:	4b45      	ldr	r3, [pc, #276]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d118      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005442:	4b42      	ldr	r3, [pc, #264]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a41      	ldr	r2, [pc, #260]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800544e:	f7fc ff43 	bl	80022d8 <HAL_GetTick>
 8005452:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005454:	e008      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005456:	f7fc ff3f 	bl	80022d8 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b64      	cmp	r3, #100	; 0x64
 8005462:	d901      	bls.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e1d6      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005468:	4b38      	ldr	r3, [pc, #224]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0f0      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005474:	4b34      	ldr	r3, [pc, #208]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800547e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8084 	beq.w	800558e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005490:	429a      	cmp	r2, r3
 8005492:	d07c      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005494:	4b2c      	ldr	r3, [pc, #176]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800549e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	fa93 f3a3 	rbit	r3, r3
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ae:	fab3 f383 	clz	r3, r3
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	4b26      	ldr	r3, [pc, #152]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	461a      	mov	r2, r3
 80054be:	2301      	movs	r3, #1
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	fa93 f3a3 	rbit	r3, r3
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80054d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054d2:	fab3 f383 	clz	r3, r3
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	461a      	mov	r2, r3
 80054e2:	2300      	movs	r3, #0
 80054e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054e6:	4a18      	ldr	r2, [pc, #96]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d04b      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f6:	f7fc feef 	bl	80022d8 <HAL_GetTick>
 80054fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fc:	e00a      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fe:	f7fc feeb 	bl	80022d8 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
 800550c:	4293      	cmp	r3, r2
 800550e:	d901      	bls.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e180      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005514:	2302      	movs	r3, #2
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	fa93 f3a3 	rbit	r3, r3
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
 8005520:	2302      	movs	r3, #2
 8005522:	623b      	str	r3, [r7, #32]
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	fa93 f3a3 	rbit	r3, r3
 800552a:	61fb      	str	r3, [r7, #28]
  return result;
 800552c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552e:	fab3 f383 	clz	r3, r3
 8005532:	b2db      	uxtb	r3, r3
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f043 0302 	orr.w	r3, r3, #2
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d108      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005542:	4b01      	ldr	r3, [pc, #4]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	e00d      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005548:	40021000 	.word	0x40021000
 800554c:	40007000 	.word	0x40007000
 8005550:	10908100 	.word	0x10908100
 8005554:	2302      	movs	r3, #2
 8005556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	fa93 f3a3 	rbit	r3, r3
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	4b9a      	ldr	r3, [pc, #616]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	2202      	movs	r2, #2
 8005566:	613a      	str	r2, [r7, #16]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	fa92 f2a2 	rbit	r2, r2
 800556e:	60fa      	str	r2, [r7, #12]
  return result;
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	fab2 f282 	clz	r2, r2
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	f002 021f 	and.w	r2, r2, #31
 8005582:	2101      	movs	r1, #1
 8005584:	fa01 f202 	lsl.w	r2, r1, r2
 8005588:	4013      	ands	r3, r2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0b7      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800558e:	4b8f      	ldr	r3, [pc, #572]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	498c      	ldr	r1, [pc, #560]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800559c:	4313      	orrs	r3, r2
 800559e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d105      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a8:	4b88      	ldr	r3, [pc, #544]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	4a87      	ldr	r2, [pc, #540]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055c0:	4b82      	ldr	r3, [pc, #520]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	f023 0203 	bic.w	r2, r3, #3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	497f      	ldr	r1, [pc, #508]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d008      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055de:	4b7b      	ldr	r3, [pc, #492]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	4978      	ldr	r1, [pc, #480]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055fc:	4b73      	ldr	r3, [pc, #460]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	4970      	ldr	r1, [pc, #448]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800560a:	4313      	orrs	r3, r2
 800560c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800561a:	4b6c      	ldr	r3, [pc, #432]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f023 0210 	bic.w	r2, r3, #16
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	4969      	ldr	r1, [pc, #420]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005628:	4313      	orrs	r3, r2
 800562a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d008      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005638:	4b64      	ldr	r3, [pc, #400]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005644:	4961      	ldr	r1, [pc, #388]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005646:	4313      	orrs	r3, r2
 8005648:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d008      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005656:	4b5d      	ldr	r3, [pc, #372]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	f023 0220 	bic.w	r2, r3, #32
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	495a      	ldr	r1, [pc, #360]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005664:	4313      	orrs	r3, r2
 8005666:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005674:	4b55      	ldr	r3, [pc, #340]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	4952      	ldr	r1, [pc, #328]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005682:	4313      	orrs	r3, r2
 8005684:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d008      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005692:	4b4e      	ldr	r3, [pc, #312]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	494b      	ldr	r1, [pc, #300]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056b0:	4b46      	ldr	r3, [pc, #280]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	4943      	ldr	r1, [pc, #268]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056ce:	4b3f      	ldr	r3, [pc, #252]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	493c      	ldr	r1, [pc, #240]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056ec:	4b37      	ldr	r3, [pc, #220]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	4934      	ldr	r1, [pc, #208]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800570a:	4b30      	ldr	r3, [pc, #192]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	492d      	ldr	r1, [pc, #180]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005718:	4313      	orrs	r3, r2
 800571a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005728:	4b28      	ldr	r3, [pc, #160]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005734:	4925      	ldr	r1, [pc, #148]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005736:	4313      	orrs	r3, r2
 8005738:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005746:	4b21      	ldr	r3, [pc, #132]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	491e      	ldr	r1, [pc, #120]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005754:	4313      	orrs	r3, r2
 8005756:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005764:	4b19      	ldr	r3, [pc, #100]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	4916      	ldr	r1, [pc, #88]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005772:	4313      	orrs	r3, r2
 8005774:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005782:	4b12      	ldr	r3, [pc, #72]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	490f      	ldr	r1, [pc, #60]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005790:	4313      	orrs	r3, r2
 8005792:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ac:	4907      	ldr	r1, [pc, #28]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00c      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80057be:	4b03      	ldr	r3, [pc, #12]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	e002      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80057ca:	bf00      	nop
 80057cc:	40021000 	.word	0x40021000
 80057d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d2:	4913      	ldr	r1, [pc, #76]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80057e4:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f0:	490b      	ldr	r1, [pc, #44]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005802:	4b07      	ldr	r3, [pc, #28]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580e:	4904      	ldr	r1, [pc, #16]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005810:	4313      	orrs	r3, r2
 8005812:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3748      	adds	r7, #72	; 0x48
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	40021000 	.word	0x40021000

08005824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e049      	b.n	80058ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fc faf2 	bl	8001e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f000 fa74 	bl	8005d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e049      	b.n	8005978 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f841 	bl	8005980 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	4619      	mov	r1, r3
 8005910:	4610      	mov	r0, r2
 8005912:	f000 fa1d 	bl	8005d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e0ff      	b.n	8005bb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b14      	cmp	r3, #20
 80059be:	f200 80f0 	bhi.w	8005ba2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	08005a1d 	.word	0x08005a1d
 80059cc:	08005ba3 	.word	0x08005ba3
 80059d0:	08005ba3 	.word	0x08005ba3
 80059d4:	08005ba3 	.word	0x08005ba3
 80059d8:	08005a5d 	.word	0x08005a5d
 80059dc:	08005ba3 	.word	0x08005ba3
 80059e0:	08005ba3 	.word	0x08005ba3
 80059e4:	08005ba3 	.word	0x08005ba3
 80059e8:	08005a9f 	.word	0x08005a9f
 80059ec:	08005ba3 	.word	0x08005ba3
 80059f0:	08005ba3 	.word	0x08005ba3
 80059f4:	08005ba3 	.word	0x08005ba3
 80059f8:	08005adf 	.word	0x08005adf
 80059fc:	08005ba3 	.word	0x08005ba3
 8005a00:	08005ba3 	.word	0x08005ba3
 8005a04:	08005ba3 	.word	0x08005ba3
 8005a08:	08005b21 	.word	0x08005b21
 8005a0c:	08005ba3 	.word	0x08005ba3
 8005a10:	08005ba3 	.word	0x08005ba3
 8005a14:	08005ba3 	.word	0x08005ba3
 8005a18:	08005b61 	.word	0x08005b61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fa32 	bl	8005e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0208 	orr.w	r2, r2, #8
 8005a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0204 	bic.w	r2, r2, #4
 8005a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6999      	ldr	r1, [r3, #24]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	619a      	str	r2, [r3, #24]
      break;
 8005a5a:	e0a5      	b.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 faac 	bl	8005fc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6999      	ldr	r1, [r3, #24]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	021a      	lsls	r2, r3, #8
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	619a      	str	r2, [r3, #24]
      break;
 8005a9c:	e084      	b.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fb1f 	bl	80060e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0208 	orr.w	r2, r2, #8
 8005ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0204 	bic.w	r2, r2, #4
 8005ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69d9      	ldr	r1, [r3, #28]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	61da      	str	r2, [r3, #28]
      break;
 8005adc:	e064      	b.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fb91 	bl	800620c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69d9      	ldr	r1, [r3, #28]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	021a      	lsls	r2, r3, #8
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	61da      	str	r2, [r3, #28]
      break;
 8005b1e:	e043      	b.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fbe0 	bl	80062ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0208 	orr.w	r2, r2, #8
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0204 	bic.w	r2, r2, #4
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b5e:	e023      	b.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fc2a 	bl	80063c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	021a      	lsls	r2, r3, #8
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ba0:	e002      	b.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop

08005bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e0b6      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x18a>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c14:	d03e      	beq.n	8005c94 <HAL_TIM_ConfigClockSource+0xd8>
 8005c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1a:	f200 8087 	bhi.w	8005d2c <HAL_TIM_ConfigClockSource+0x170>
 8005c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c22:	f000 8086 	beq.w	8005d32 <HAL_TIM_ConfigClockSource+0x176>
 8005c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2a:	d87f      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x170>
 8005c2c:	2b70      	cmp	r3, #112	; 0x70
 8005c2e:	d01a      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0xaa>
 8005c30:	2b70      	cmp	r3, #112	; 0x70
 8005c32:	d87b      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x170>
 8005c34:	2b60      	cmp	r3, #96	; 0x60
 8005c36:	d050      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x11e>
 8005c38:	2b60      	cmp	r3, #96	; 0x60
 8005c3a:	d877      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x170>
 8005c3c:	2b50      	cmp	r3, #80	; 0x50
 8005c3e:	d03c      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0xfe>
 8005c40:	2b50      	cmp	r3, #80	; 0x50
 8005c42:	d873      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x170>
 8005c44:	2b40      	cmp	r3, #64	; 0x40
 8005c46:	d058      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x13e>
 8005c48:	2b40      	cmp	r3, #64	; 0x40
 8005c4a:	d86f      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x170>
 8005c4c:	2b30      	cmp	r3, #48	; 0x30
 8005c4e:	d064      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x15e>
 8005c50:	2b30      	cmp	r3, #48	; 0x30
 8005c52:	d86b      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x170>
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d060      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x15e>
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d867      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x170>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d05c      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x15e>
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d05a      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x15e>
 8005c64:	e062      	b.n	8005d2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6899      	ldr	r1, [r3, #8]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f000 fc89 	bl	800658c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	609a      	str	r2, [r3, #8]
      break;
 8005c92:	e04f      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6899      	ldr	r1, [r3, #8]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f000 fc72 	bl	800658c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cb6:	609a      	str	r2, [r3, #8]
      break;
 8005cb8:	e03c      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6859      	ldr	r1, [r3, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f000 fbe6 	bl	8006498 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2150      	movs	r1, #80	; 0x50
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fc3f 	bl	8006556 <TIM_ITRx_SetConfig>
      break;
 8005cd8:	e02c      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6859      	ldr	r1, [r3, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f000 fc05 	bl	80064f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2160      	movs	r1, #96	; 0x60
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fc2f 	bl	8006556 <TIM_ITRx_SetConfig>
      break;
 8005cf8:	e01c      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6859      	ldr	r1, [r3, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	461a      	mov	r2, r3
 8005d08:	f000 fbc6 	bl	8006498 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2140      	movs	r1, #64	; 0x40
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fc1f 	bl	8006556 <TIM_ITRx_SetConfig>
      break;
 8005d18:	e00c      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4619      	mov	r1, r3
 8005d24:	4610      	mov	r0, r2
 8005d26:	f000 fc16 	bl	8006556 <TIM_ITRx_SetConfig>
      break;
 8005d2a:	e003      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d30:	e000      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a42      	ldr	r2, [pc, #264]	; (8005e6c <TIM_Base_SetConfig+0x11c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d013      	beq.n	8005d90 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6e:	d00f      	beq.n	8005d90 <TIM_Base_SetConfig+0x40>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a3f      	ldr	r2, [pc, #252]	; (8005e70 <TIM_Base_SetConfig+0x120>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <TIM_Base_SetConfig+0x40>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a3e      	ldr	r2, [pc, #248]	; (8005e74 <TIM_Base_SetConfig+0x124>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d007      	beq.n	8005d90 <TIM_Base_SetConfig+0x40>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a3d      	ldr	r2, [pc, #244]	; (8005e78 <TIM_Base_SetConfig+0x128>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_Base_SetConfig+0x40>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a3c      	ldr	r2, [pc, #240]	; (8005e7c <TIM_Base_SetConfig+0x12c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d108      	bne.n	8005da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a31      	ldr	r2, [pc, #196]	; (8005e6c <TIM_Base_SetConfig+0x11c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01f      	beq.n	8005dea <TIM_Base_SetConfig+0x9a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db0:	d01b      	beq.n	8005dea <TIM_Base_SetConfig+0x9a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a2e      	ldr	r2, [pc, #184]	; (8005e70 <TIM_Base_SetConfig+0x120>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d017      	beq.n	8005dea <TIM_Base_SetConfig+0x9a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a2d      	ldr	r2, [pc, #180]	; (8005e74 <TIM_Base_SetConfig+0x124>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <TIM_Base_SetConfig+0x9a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2c      	ldr	r2, [pc, #176]	; (8005e78 <TIM_Base_SetConfig+0x128>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00f      	beq.n	8005dea <TIM_Base_SetConfig+0x9a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2c      	ldr	r2, [pc, #176]	; (8005e80 <TIM_Base_SetConfig+0x130>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00b      	beq.n	8005dea <TIM_Base_SetConfig+0x9a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2b      	ldr	r2, [pc, #172]	; (8005e84 <TIM_Base_SetConfig+0x134>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d007      	beq.n	8005dea <TIM_Base_SetConfig+0x9a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <TIM_Base_SetConfig+0x138>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_Base_SetConfig+0x9a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a25      	ldr	r2, [pc, #148]	; (8005e7c <TIM_Base_SetConfig+0x12c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d108      	bne.n	8005dfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a12      	ldr	r2, [pc, #72]	; (8005e6c <TIM_Base_SetConfig+0x11c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d013      	beq.n	8005e50 <TIM_Base_SetConfig+0x100>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a13      	ldr	r2, [pc, #76]	; (8005e78 <TIM_Base_SetConfig+0x128>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00f      	beq.n	8005e50 <TIM_Base_SetConfig+0x100>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <TIM_Base_SetConfig+0x130>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00b      	beq.n	8005e50 <TIM_Base_SetConfig+0x100>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a12      	ldr	r2, [pc, #72]	; (8005e84 <TIM_Base_SetConfig+0x134>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d007      	beq.n	8005e50 <TIM_Base_SetConfig+0x100>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a11      	ldr	r2, [pc, #68]	; (8005e88 <TIM_Base_SetConfig+0x138>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_Base_SetConfig+0x100>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a0c      	ldr	r2, [pc, #48]	; (8005e7c <TIM_Base_SetConfig+0x12c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d103      	bne.n	8005e58 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	615a      	str	r2, [r3, #20]
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40012c00 	.word	0x40012c00
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	40013400 	.word	0x40013400
 8005e7c:	40015000 	.word	0x40015000
 8005e80:	40014000 	.word	0x40014000
 8005e84:	40014400 	.word	0x40014400
 8005e88:	40014800 	.word	0x40014800

08005e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0201 	bic.w	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f023 0302 	bic.w	r3, r3, #2
 8005ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a30      	ldr	r2, [pc, #192]	; (8005fa8 <TIM_OC1_SetConfig+0x11c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d013      	beq.n	8005f14 <TIM_OC1_SetConfig+0x88>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a2f      	ldr	r2, [pc, #188]	; (8005fac <TIM_OC1_SetConfig+0x120>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00f      	beq.n	8005f14 <TIM_OC1_SetConfig+0x88>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a2e      	ldr	r2, [pc, #184]	; (8005fb0 <TIM_OC1_SetConfig+0x124>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00b      	beq.n	8005f14 <TIM_OC1_SetConfig+0x88>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a2d      	ldr	r2, [pc, #180]	; (8005fb4 <TIM_OC1_SetConfig+0x128>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d007      	beq.n	8005f14 <TIM_OC1_SetConfig+0x88>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a2c      	ldr	r2, [pc, #176]	; (8005fb8 <TIM_OC1_SetConfig+0x12c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_OC1_SetConfig+0x88>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a2b      	ldr	r2, [pc, #172]	; (8005fbc <TIM_OC1_SetConfig+0x130>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d10c      	bne.n	8005f2e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0308 	bic.w	r3, r3, #8
 8005f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f023 0304 	bic.w	r3, r3, #4
 8005f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <TIM_OC1_SetConfig+0x11c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <TIM_OC1_SetConfig+0xd2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a1c      	ldr	r2, [pc, #112]	; (8005fac <TIM_OC1_SetConfig+0x120>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00f      	beq.n	8005f5e <TIM_OC1_SetConfig+0xd2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <TIM_OC1_SetConfig+0x124>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00b      	beq.n	8005f5e <TIM_OC1_SetConfig+0xd2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a1a      	ldr	r2, [pc, #104]	; (8005fb4 <TIM_OC1_SetConfig+0x128>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d007      	beq.n	8005f5e <TIM_OC1_SetConfig+0xd2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <TIM_OC1_SetConfig+0x12c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_OC1_SetConfig+0xd2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a18      	ldr	r2, [pc, #96]	; (8005fbc <TIM_OC1_SetConfig+0x130>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d111      	bne.n	8005f82 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	621a      	str	r2, [r3, #32]
}
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800
 8005fbc:	40015000 	.word	0x40015000

08005fc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0210 	bic.w	r2, r3, #16
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0320 	bic.w	r3, r3, #32
 800600e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a2c      	ldr	r2, [pc, #176]	; (80060d0 <TIM_OC2_SetConfig+0x110>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_OC2_SetConfig+0x74>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a2b      	ldr	r2, [pc, #172]	; (80060d4 <TIM_OC2_SetConfig+0x114>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_OC2_SetConfig+0x74>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <TIM_OC2_SetConfig+0x118>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d10d      	bne.n	8006050 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800603a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800604e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a1f      	ldr	r2, [pc, #124]	; (80060d0 <TIM_OC2_SetConfig+0x110>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d013      	beq.n	8006080 <TIM_OC2_SetConfig+0xc0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a1e      	ldr	r2, [pc, #120]	; (80060d4 <TIM_OC2_SetConfig+0x114>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00f      	beq.n	8006080 <TIM_OC2_SetConfig+0xc0>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a1e      	ldr	r2, [pc, #120]	; (80060dc <TIM_OC2_SetConfig+0x11c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00b      	beq.n	8006080 <TIM_OC2_SetConfig+0xc0>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a1d      	ldr	r2, [pc, #116]	; (80060e0 <TIM_OC2_SetConfig+0x120>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d007      	beq.n	8006080 <TIM_OC2_SetConfig+0xc0>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <TIM_OC2_SetConfig+0x124>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_OC2_SetConfig+0xc0>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a17      	ldr	r2, [pc, #92]	; (80060d8 <TIM_OC2_SetConfig+0x118>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d113      	bne.n	80060a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006086:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800608e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40012c00 	.word	0x40012c00
 80060d4:	40013400 	.word	0x40013400
 80060d8:	40015000 	.word	0x40015000
 80060dc:	40014000 	.word	0x40014000
 80060e0:	40014400 	.word	0x40014400
 80060e4:	40014800 	.word	0x40014800

080060e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2b      	ldr	r2, [pc, #172]	; (80061f4 <TIM_OC3_SetConfig+0x10c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d007      	beq.n	800615a <TIM_OC3_SetConfig+0x72>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2a      	ldr	r2, [pc, #168]	; (80061f8 <TIM_OC3_SetConfig+0x110>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <TIM_OC3_SetConfig+0x72>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a29      	ldr	r2, [pc, #164]	; (80061fc <TIM_OC3_SetConfig+0x114>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d10d      	bne.n	8006176 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006174:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a1e      	ldr	r2, [pc, #120]	; (80061f4 <TIM_OC3_SetConfig+0x10c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <TIM_OC3_SetConfig+0xbe>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a1d      	ldr	r2, [pc, #116]	; (80061f8 <TIM_OC3_SetConfig+0x110>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00f      	beq.n	80061a6 <TIM_OC3_SetConfig+0xbe>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a1d      	ldr	r2, [pc, #116]	; (8006200 <TIM_OC3_SetConfig+0x118>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00b      	beq.n	80061a6 <TIM_OC3_SetConfig+0xbe>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1c      	ldr	r2, [pc, #112]	; (8006204 <TIM_OC3_SetConfig+0x11c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d007      	beq.n	80061a6 <TIM_OC3_SetConfig+0xbe>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a1b      	ldr	r2, [pc, #108]	; (8006208 <TIM_OC3_SetConfig+0x120>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_OC3_SetConfig+0xbe>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a16      	ldr	r2, [pc, #88]	; (80061fc <TIM_OC3_SetConfig+0x114>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d113      	bne.n	80061ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40013400 	.word	0x40013400
 80061fc:	40015000 	.word	0x40015000
 8006200:	40014000 	.word	0x40014000
 8006204:	40014400 	.word	0x40014400
 8006208:	40014800 	.word	0x40014800

0800620c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800623a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800625a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	031b      	lsls	r3, r3, #12
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a1a      	ldr	r2, [pc, #104]	; (80062d4 <TIM_OC4_SetConfig+0xc8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d013      	beq.n	8006298 <TIM_OC4_SetConfig+0x8c>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a19      	ldr	r2, [pc, #100]	; (80062d8 <TIM_OC4_SetConfig+0xcc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00f      	beq.n	8006298 <TIM_OC4_SetConfig+0x8c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a18      	ldr	r2, [pc, #96]	; (80062dc <TIM_OC4_SetConfig+0xd0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00b      	beq.n	8006298 <TIM_OC4_SetConfig+0x8c>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a17      	ldr	r2, [pc, #92]	; (80062e0 <TIM_OC4_SetConfig+0xd4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d007      	beq.n	8006298 <TIM_OC4_SetConfig+0x8c>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <TIM_OC4_SetConfig+0xd8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_OC4_SetConfig+0x8c>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a15      	ldr	r2, [pc, #84]	; (80062e8 <TIM_OC4_SetConfig+0xdc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d109      	bne.n	80062ac <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800629e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	019b      	lsls	r3, r3, #6
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40013400 	.word	0x40013400
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800
 80062e8:	40015000 	.word	0x40015000

080062ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006330:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	041b      	lsls	r3, r3, #16
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a19      	ldr	r2, [pc, #100]	; (80063a8 <TIM_OC5_SetConfig+0xbc>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <TIM_OC5_SetConfig+0x82>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a18      	ldr	r2, [pc, #96]	; (80063ac <TIM_OC5_SetConfig+0xc0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00f      	beq.n	800636e <TIM_OC5_SetConfig+0x82>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <TIM_OC5_SetConfig+0xc4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00b      	beq.n	800636e <TIM_OC5_SetConfig+0x82>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a16      	ldr	r2, [pc, #88]	; (80063b4 <TIM_OC5_SetConfig+0xc8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d007      	beq.n	800636e <TIM_OC5_SetConfig+0x82>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <TIM_OC5_SetConfig+0xcc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_OC5_SetConfig+0x82>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a14      	ldr	r2, [pc, #80]	; (80063bc <TIM_OC5_SetConfig+0xd0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d109      	bne.n	8006382 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006374:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	621a      	str	r2, [r3, #32]
}
 800639c:	bf00      	nop
 800639e:	371c      	adds	r7, #28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800
 80063bc:	40015000 	.word	0x40015000

080063c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	021b      	lsls	r3, r3, #8
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	051b      	lsls	r3, r3, #20
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a1a      	ldr	r2, [pc, #104]	; (8006480 <TIM_OC6_SetConfig+0xc0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d013      	beq.n	8006444 <TIM_OC6_SetConfig+0x84>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a19      	ldr	r2, [pc, #100]	; (8006484 <TIM_OC6_SetConfig+0xc4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00f      	beq.n	8006444 <TIM_OC6_SetConfig+0x84>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a18      	ldr	r2, [pc, #96]	; (8006488 <TIM_OC6_SetConfig+0xc8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00b      	beq.n	8006444 <TIM_OC6_SetConfig+0x84>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a17      	ldr	r2, [pc, #92]	; (800648c <TIM_OC6_SetConfig+0xcc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d007      	beq.n	8006444 <TIM_OC6_SetConfig+0x84>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a16      	ldr	r2, [pc, #88]	; (8006490 <TIM_OC6_SetConfig+0xd0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_OC6_SetConfig+0x84>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a15      	ldr	r2, [pc, #84]	; (8006494 <TIM_OC6_SetConfig+0xd4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d109      	bne.n	8006458 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	029b      	lsls	r3, r3, #10
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40013400 	.word	0x40013400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800
 8006494:	40015000 	.word	0x40015000

08006498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f023 0201 	bic.w	r2, r3, #1
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 030a 	bic.w	r3, r3, #10
 80064d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b087      	sub	sp, #28
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0210 	bic.w	r2, r3, #16
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006520:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	031b      	lsls	r3, r3, #12
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006532:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	f043 0307 	orr.w	r3, r3, #7
 8006578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	609a      	str	r2, [r3, #8]
}
 8006580:	bf00      	nop
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	021a      	lsls	r2, r3, #8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	609a      	str	r2, [r3, #8]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e06d      	b.n	80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a30      	ldr	r2, [pc, #192]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d009      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2f      	ldr	r2, [pc, #188]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d004      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a2d      	ldr	r2, [pc, #180]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d108      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006628:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a1e      	ldr	r2, [pc, #120]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d01d      	beq.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006660:	d018      	beq.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a1c      	ldr	r2, [pc, #112]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d013      	beq.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1a      	ldr	r2, [pc, #104]	; (80066dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00e      	beq.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a15      	ldr	r2, [pc, #84]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d009      	beq.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a16      	ldr	r2, [pc, #88]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a11      	ldr	r2, [pc, #68]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d10c      	bne.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800669a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	40012c00 	.word	0x40012c00
 80066d0:	40013400 	.word	0x40013400
 80066d4:	40015000 	.word	0x40015000
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40014000 	.word	0x40014000

080066e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e040      	b.n	8006778 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fb fbec 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2224      	movs	r2, #36	; 0x24
 8006710:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0201 	bic.w	r2, r2, #1
 8006720:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f89a 	bl	800685c <UART_SetConfig>
 8006728:	4603      	mov	r3, r0
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e022      	b.n	8006778 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa64 	bl	8006c08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800674e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800675e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 faeb 	bl	8006d4c <UART_CheckIdleState>
 8006776:	4603      	mov	r3, r0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006780:	b480      	push	{r7}
 8006782:	b08b      	sub	sp, #44	; 0x2c
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	4613      	mov	r3, r2
 800678c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006792:	2b20      	cmp	r3, #32
 8006794:	d156      	bne.n	8006844 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_UART_Transmit_IT+0x22>
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e04f      	b.n	8006846 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_UART_Transmit_IT+0x34>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e048      	b.n	8006846 <HAL_UART_Transmit_IT+0xc6>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	88fa      	ldrh	r2, [r7, #6]
 80067c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	88fa      	ldrh	r2, [r7, #6]
 80067ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2221      	movs	r2, #33	; 0x21
 80067e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ee:	d107      	bne.n	8006800 <HAL_UART_Transmit_IT+0x80>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d103      	bne.n	8006800 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4a16      	ldr	r2, [pc, #88]	; (8006854 <HAL_UART_Transmit_IT+0xd4>)
 80067fc:	669a      	str	r2, [r3, #104]	; 0x68
 80067fe:	e002      	b.n	8006806 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4a15      	ldr	r2, [pc, #84]	; (8006858 <HAL_UART_Transmit_IT+0xd8>)
 8006804:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	613b      	str	r3, [r7, #16]
   return(result);
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	623b      	str	r3, [r7, #32]
 800682e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	69f9      	ldr	r1, [r7, #28]
 8006832:	6a3a      	ldr	r2, [r7, #32]
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	61bb      	str	r3, [r7, #24]
   return(result);
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e6      	bne.n	800680e <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	e000      	b.n	8006846 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006844:	2302      	movs	r3, #2
  }
}
 8006846:	4618      	mov	r0, r3
 8006848:	372c      	adds	r7, #44	; 0x2c
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	0800701f 	.word	0x0800701f
 8006858:	08006f67 	.word	0x08006f67

0800685c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4b92      	ldr	r3, [pc, #584]	; (8006ad0 <UART_SetConfig+0x274>)
 8006888:	4013      	ands	r3, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	6979      	ldr	r1, [r7, #20]
 8006890:	430b      	orrs	r3, r1
 8006892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a80      	ldr	r2, [pc, #512]	; (8006ad4 <UART_SetConfig+0x278>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d120      	bne.n	800691a <UART_SetConfig+0xbe>
 80068d8:	4b7f      	ldr	r3, [pc, #508]	; (8006ad8 <UART_SetConfig+0x27c>)
 80068da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d817      	bhi.n	8006914 <UART_SetConfig+0xb8>
 80068e4:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <UART_SetConfig+0x90>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	08006909 	.word	0x08006909
 80068f4:	0800690f 	.word	0x0800690f
 80068f8:	08006903 	.word	0x08006903
 80068fc:	2301      	movs	r3, #1
 80068fe:	77fb      	strb	r3, [r7, #31]
 8006900:	e0b5      	b.n	8006a6e <UART_SetConfig+0x212>
 8006902:	2302      	movs	r3, #2
 8006904:	77fb      	strb	r3, [r7, #31]
 8006906:	e0b2      	b.n	8006a6e <UART_SetConfig+0x212>
 8006908:	2304      	movs	r3, #4
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e0af      	b.n	8006a6e <UART_SetConfig+0x212>
 800690e:	2308      	movs	r3, #8
 8006910:	77fb      	strb	r3, [r7, #31]
 8006912:	e0ac      	b.n	8006a6e <UART_SetConfig+0x212>
 8006914:	2310      	movs	r3, #16
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	e0a9      	b.n	8006a6e <UART_SetConfig+0x212>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a6f      	ldr	r2, [pc, #444]	; (8006adc <UART_SetConfig+0x280>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d124      	bne.n	800696e <UART_SetConfig+0x112>
 8006924:	4b6c      	ldr	r3, [pc, #432]	; (8006ad8 <UART_SetConfig+0x27c>)
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800692c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006930:	d011      	beq.n	8006956 <UART_SetConfig+0xfa>
 8006932:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006936:	d817      	bhi.n	8006968 <UART_SetConfig+0x10c>
 8006938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800693c:	d011      	beq.n	8006962 <UART_SetConfig+0x106>
 800693e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006942:	d811      	bhi.n	8006968 <UART_SetConfig+0x10c>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <UART_SetConfig+0xf4>
 8006948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800694c:	d006      	beq.n	800695c <UART_SetConfig+0x100>
 800694e:	e00b      	b.n	8006968 <UART_SetConfig+0x10c>
 8006950:	2300      	movs	r3, #0
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e08b      	b.n	8006a6e <UART_SetConfig+0x212>
 8006956:	2302      	movs	r3, #2
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e088      	b.n	8006a6e <UART_SetConfig+0x212>
 800695c:	2304      	movs	r3, #4
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e085      	b.n	8006a6e <UART_SetConfig+0x212>
 8006962:	2308      	movs	r3, #8
 8006964:	77fb      	strb	r3, [r7, #31]
 8006966:	e082      	b.n	8006a6e <UART_SetConfig+0x212>
 8006968:	2310      	movs	r3, #16
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	e07f      	b.n	8006a6e <UART_SetConfig+0x212>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a5b      	ldr	r2, [pc, #364]	; (8006ae0 <UART_SetConfig+0x284>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d124      	bne.n	80069c2 <UART_SetConfig+0x166>
 8006978:	4b57      	ldr	r3, [pc, #348]	; (8006ad8 <UART_SetConfig+0x27c>)
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006980:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006984:	d011      	beq.n	80069aa <UART_SetConfig+0x14e>
 8006986:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800698a:	d817      	bhi.n	80069bc <UART_SetConfig+0x160>
 800698c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006990:	d011      	beq.n	80069b6 <UART_SetConfig+0x15a>
 8006992:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006996:	d811      	bhi.n	80069bc <UART_SetConfig+0x160>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <UART_SetConfig+0x148>
 800699c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069a0:	d006      	beq.n	80069b0 <UART_SetConfig+0x154>
 80069a2:	e00b      	b.n	80069bc <UART_SetConfig+0x160>
 80069a4:	2300      	movs	r3, #0
 80069a6:	77fb      	strb	r3, [r7, #31]
 80069a8:	e061      	b.n	8006a6e <UART_SetConfig+0x212>
 80069aa:	2302      	movs	r3, #2
 80069ac:	77fb      	strb	r3, [r7, #31]
 80069ae:	e05e      	b.n	8006a6e <UART_SetConfig+0x212>
 80069b0:	2304      	movs	r3, #4
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	e05b      	b.n	8006a6e <UART_SetConfig+0x212>
 80069b6:	2308      	movs	r3, #8
 80069b8:	77fb      	strb	r3, [r7, #31]
 80069ba:	e058      	b.n	8006a6e <UART_SetConfig+0x212>
 80069bc:	2310      	movs	r3, #16
 80069be:	77fb      	strb	r3, [r7, #31]
 80069c0:	e055      	b.n	8006a6e <UART_SetConfig+0x212>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a47      	ldr	r2, [pc, #284]	; (8006ae4 <UART_SetConfig+0x288>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d124      	bne.n	8006a16 <UART_SetConfig+0x1ba>
 80069cc:	4b42      	ldr	r3, [pc, #264]	; (8006ad8 <UART_SetConfig+0x27c>)
 80069ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80069d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069d8:	d011      	beq.n	80069fe <UART_SetConfig+0x1a2>
 80069da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069de:	d817      	bhi.n	8006a10 <UART_SetConfig+0x1b4>
 80069e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e4:	d011      	beq.n	8006a0a <UART_SetConfig+0x1ae>
 80069e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069ea:	d811      	bhi.n	8006a10 <UART_SetConfig+0x1b4>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <UART_SetConfig+0x19c>
 80069f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f4:	d006      	beq.n	8006a04 <UART_SetConfig+0x1a8>
 80069f6:	e00b      	b.n	8006a10 <UART_SetConfig+0x1b4>
 80069f8:	2300      	movs	r3, #0
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e037      	b.n	8006a6e <UART_SetConfig+0x212>
 80069fe:	2302      	movs	r3, #2
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e034      	b.n	8006a6e <UART_SetConfig+0x212>
 8006a04:	2304      	movs	r3, #4
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e031      	b.n	8006a6e <UART_SetConfig+0x212>
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	77fb      	strb	r3, [r7, #31]
 8006a0e:	e02e      	b.n	8006a6e <UART_SetConfig+0x212>
 8006a10:	2310      	movs	r3, #16
 8006a12:	77fb      	strb	r3, [r7, #31]
 8006a14:	e02b      	b.n	8006a6e <UART_SetConfig+0x212>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a33      	ldr	r2, [pc, #204]	; (8006ae8 <UART_SetConfig+0x28c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d124      	bne.n	8006a6a <UART_SetConfig+0x20e>
 8006a20:	4b2d      	ldr	r3, [pc, #180]	; (8006ad8 <UART_SetConfig+0x27c>)
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006a28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a2c:	d011      	beq.n	8006a52 <UART_SetConfig+0x1f6>
 8006a2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a32:	d817      	bhi.n	8006a64 <UART_SetConfig+0x208>
 8006a34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a38:	d011      	beq.n	8006a5e <UART_SetConfig+0x202>
 8006a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a3e:	d811      	bhi.n	8006a64 <UART_SetConfig+0x208>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <UART_SetConfig+0x1f0>
 8006a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a48:	d006      	beq.n	8006a58 <UART_SetConfig+0x1fc>
 8006a4a:	e00b      	b.n	8006a64 <UART_SetConfig+0x208>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e00d      	b.n	8006a6e <UART_SetConfig+0x212>
 8006a52:	2302      	movs	r3, #2
 8006a54:	77fb      	strb	r3, [r7, #31]
 8006a56:	e00a      	b.n	8006a6e <UART_SetConfig+0x212>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	e007      	b.n	8006a6e <UART_SetConfig+0x212>
 8006a5e:	2308      	movs	r3, #8
 8006a60:	77fb      	strb	r3, [r7, #31]
 8006a62:	e004      	b.n	8006a6e <UART_SetConfig+0x212>
 8006a64:	2310      	movs	r3, #16
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e001      	b.n	8006a6e <UART_SetConfig+0x212>
 8006a6a:	2310      	movs	r3, #16
 8006a6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a76:	d16c      	bne.n	8006b52 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8006a78:	7ffb      	ldrb	r3, [r7, #31]
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d838      	bhi.n	8006af0 <UART_SetConfig+0x294>
 8006a7e:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <UART_SetConfig+0x228>)
 8006a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006ab1 	.word	0x08006ab1
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	08006af1 	.word	0x08006af1
 8006a94:	08006abf 	.word	0x08006abf
 8006a98:	08006af1 	.word	0x08006af1
 8006a9c:	08006af1 	.word	0x08006af1
 8006aa0:	08006af1 	.word	0x08006af1
 8006aa4:	08006ac7 	.word	0x08006ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa8:	f7fe fc5a 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8006aac:	61b8      	str	r0, [r7, #24]
        break;
 8006aae:	e024      	b.n	8006afa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab0:	f7fe fc78 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 8006ab4:	61b8      	str	r0, [r7, #24]
        break;
 8006ab6:	e020      	b.n	8006afa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <UART_SetConfig+0x290>)
 8006aba:	61bb      	str	r3, [r7, #24]
        break;
 8006abc:	e01d      	b.n	8006afa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006abe:	f7fe fbd9 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 8006ac2:	61b8      	str	r0, [r7, #24]
        break;
 8006ac4:	e019      	b.n	8006afa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aca:	61bb      	str	r3, [r7, #24]
        break;
 8006acc:	e015      	b.n	8006afa <UART_SetConfig+0x29e>
 8006ace:	bf00      	nop
 8006ad0:	efff69f3 	.word	0xefff69f3
 8006ad4:	40013800 	.word	0x40013800
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	40004400 	.word	0x40004400
 8006ae0:	40004800 	.word	0x40004800
 8006ae4:	40004c00 	.word	0x40004c00
 8006ae8:	40005000 	.word	0x40005000
 8006aec:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	77bb      	strb	r3, [r7, #30]
        break;
 8006af8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d075      	beq.n	8006bec <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	005a      	lsls	r2, r3, #1
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	085b      	lsrs	r3, r3, #1
 8006b0a:	441a      	add	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b0f      	cmp	r3, #15
 8006b1c:	d916      	bls.n	8006b4c <UART_SetConfig+0x2f0>
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b24:	d212      	bcs.n	8006b4c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f023 030f 	bic.w	r3, r3, #15
 8006b2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	085b      	lsrs	r3, r3, #1
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	89fb      	ldrh	r3, [r7, #14]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	89fa      	ldrh	r2, [r7, #14]
 8006b48:	60da      	str	r2, [r3, #12]
 8006b4a:	e04f      	b.n	8006bec <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	77bb      	strb	r3, [r7, #30]
 8006b50:	e04c      	b.n	8006bec <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b52:	7ffb      	ldrb	r3, [r7, #31]
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d828      	bhi.n	8006baa <UART_SetConfig+0x34e>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <UART_SetConfig+0x304>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b85 	.word	0x08006b85
 8006b64:	08006b8d 	.word	0x08006b8d
 8006b68:	08006b95 	.word	0x08006b95
 8006b6c:	08006bab 	.word	0x08006bab
 8006b70:	08006b9b 	.word	0x08006b9b
 8006b74:	08006bab 	.word	0x08006bab
 8006b78:	08006bab 	.word	0x08006bab
 8006b7c:	08006bab 	.word	0x08006bab
 8006b80:	08006ba3 	.word	0x08006ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b84:	f7fe fbec 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8006b88:	61b8      	str	r0, [r7, #24]
        break;
 8006b8a:	e013      	b.n	8006bb4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b8c:	f7fe fc0a 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 8006b90:	61b8      	str	r0, [r7, #24]
        break;
 8006b92:	e00f      	b.n	8006bb4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b94:	4b1b      	ldr	r3, [pc, #108]	; (8006c04 <UART_SetConfig+0x3a8>)
 8006b96:	61bb      	str	r3, [r7, #24]
        break;
 8006b98:	e00c      	b.n	8006bb4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b9a:	f7fe fb6b 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 8006b9e:	61b8      	str	r0, [r7, #24]
        break;
 8006ba0:	e008      	b.n	8006bb4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba6:	61bb      	str	r3, [r7, #24]
        break;
 8006ba8:	e004      	b.n	8006bb4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	77bb      	strb	r3, [r7, #30]
        break;
 8006bb2:	bf00      	nop
    }

    if (pclk != 0U)
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d018      	beq.n	8006bec <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	085a      	lsrs	r2, r3, #1
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	441a      	add	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2b0f      	cmp	r3, #15
 8006bd4:	d908      	bls.n	8006be8 <UART_SetConfig+0x38c>
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bdc:	d204      	bcs.n	8006be8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	e001      	b.n	8006bec <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006bf8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	007a1200 	.word	0x007a1200

08006c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01a      	beq.n	8006d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d06:	d10a      	bne.n	8006d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]
  }
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d5c:	f7fb fabc 	bl	80022d8 <HAL_GetTick>
 8006d60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d10e      	bne.n	8006d8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f82d 	bl	8006dde <UART_WaitOnFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e023      	b.n	8006dd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d10e      	bne.n	8006dba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f817 	bl	8006dde <UART_WaitOnFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e00d      	b.n	8006dd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b09c      	sub	sp, #112	; 0x70
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	603b      	str	r3, [r7, #0]
 8006dea:	4613      	mov	r3, r2
 8006dec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dee:	e0a5      	b.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df6:	f000 80a1 	beq.w	8006f3c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dfa:	f7fb fa6d 	bl	80022d8 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d302      	bcc.n	8006e10 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d13e      	bne.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e24:	667b      	str	r3, [r7, #100]	; 0x64
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e6      	bne.n	8006e10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3308      	adds	r3, #8
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	f023 0301 	bic.w	r3, r3, #1
 8006e58:	663b      	str	r3, [r7, #96]	; 0x60
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e62:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e5      	bne.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e067      	b.n	8006f5e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d04f      	beq.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eaa:	d147      	bne.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e6      	bne.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3308      	adds	r3, #8
 8006eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3308      	adds	r3, #8
 8006f06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f08:	623a      	str	r2, [r7, #32]
 8006f0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	69f9      	ldr	r1, [r7, #28]
 8006f0e:	6a3a      	ldr	r2, [r7, #32]
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e5      	bne.n	8006ee8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2220      	movs	r2, #32
 8006f26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e010      	b.n	8006f5e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69da      	ldr	r2, [r3, #28]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4013      	ands	r3, r2
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	461a      	mov	r2, r3
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	f43f af4a 	beq.w	8006df0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3770      	adds	r7, #112	; 0x70
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b08f      	sub	sp, #60	; 0x3c
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f72:	2b21      	cmp	r3, #33	; 0x21
 8006f74:	d14d      	bne.n	8007012 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d132      	bne.n	8006fe8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e6      	bne.n	8006f82 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6979      	ldr	r1, [r7, #20]
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e6      	bne.n	8006fb4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006fe6:	e014      	b.n	8007012 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fec:	781a      	ldrb	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	b292      	uxth	r2, r2
 8006ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007006:	b29b      	uxth	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007012:	bf00      	nop
 8007014:	373c      	adds	r7, #60	; 0x3c
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800701e:	b480      	push	{r7}
 8007020:	b091      	sub	sp, #68	; 0x44
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800702a:	2b21      	cmp	r3, #33	; 0x21
 800702c:	d151      	bne.n	80070d2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d132      	bne.n	80070a0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	623b      	str	r3, [r7, #32]
   return(result);
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800704e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	633b      	str	r3, [r7, #48]	; 0x30
 800705a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800705e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e6      	bne.n	800703a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	60fb      	str	r3, [r7, #12]
   return(result);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007080:	637b      	str	r3, [r7, #52]	; 0x34
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708a:	61fb      	str	r3, [r7, #28]
 800708c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	69b9      	ldr	r1, [r7, #24]
 8007090:	69fa      	ldr	r2, [r7, #28]
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	617b      	str	r3, [r7, #20]
   return(result);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e6      	bne.n	800706c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800709e:	e018      	b.n	80070d2 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80070a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a8:	881a      	ldrh	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070b2:	b292      	uxth	r2, r2
 80070b4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ba:	1c9a      	adds	r2, r3, #2
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80070d2:	bf00      	nop
 80070d4:	3744      	adds	r7, #68	; 0x44
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <__errno>:
 80070e0:	4b01      	ldr	r3, [pc, #4]	; (80070e8 <__errno+0x8>)
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	2000000c 	.word	0x2000000c

080070ec <__libc_init_array>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4d0d      	ldr	r5, [pc, #52]	; (8007124 <__libc_init_array+0x38>)
 80070f0:	4c0d      	ldr	r4, [pc, #52]	; (8007128 <__libc_init_array+0x3c>)
 80070f2:	1b64      	subs	r4, r4, r5
 80070f4:	10a4      	asrs	r4, r4, #2
 80070f6:	2600      	movs	r6, #0
 80070f8:	42a6      	cmp	r6, r4
 80070fa:	d109      	bne.n	8007110 <__libc_init_array+0x24>
 80070fc:	4d0b      	ldr	r5, [pc, #44]	; (800712c <__libc_init_array+0x40>)
 80070fe:	4c0c      	ldr	r4, [pc, #48]	; (8007130 <__libc_init_array+0x44>)
 8007100:	f004 fcc2 	bl	800ba88 <_init>
 8007104:	1b64      	subs	r4, r4, r5
 8007106:	10a4      	asrs	r4, r4, #2
 8007108:	2600      	movs	r6, #0
 800710a:	42a6      	cmp	r6, r4
 800710c:	d105      	bne.n	800711a <__libc_init_array+0x2e>
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	f855 3b04 	ldr.w	r3, [r5], #4
 8007114:	4798      	blx	r3
 8007116:	3601      	adds	r6, #1
 8007118:	e7ee      	b.n	80070f8 <__libc_init_array+0xc>
 800711a:	f855 3b04 	ldr.w	r3, [r5], #4
 800711e:	4798      	blx	r3
 8007120:	3601      	adds	r6, #1
 8007122:	e7f2      	b.n	800710a <__libc_init_array+0x1e>
 8007124:	0800bfd4 	.word	0x0800bfd4
 8007128:	0800bfd4 	.word	0x0800bfd4
 800712c:	0800bfd4 	.word	0x0800bfd4
 8007130:	0800bfd8 	.word	0x0800bfd8

08007134 <malloc>:
 8007134:	4b02      	ldr	r3, [pc, #8]	; (8007140 <malloc+0xc>)
 8007136:	4601      	mov	r1, r0
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	f000 b877 	b.w	800722c <_malloc_r>
 800713e:	bf00      	nop
 8007140:	2000000c 	.word	0x2000000c

08007144 <memset>:
 8007144:	4402      	add	r2, r0
 8007146:	4603      	mov	r3, r0
 8007148:	4293      	cmp	r3, r2
 800714a:	d100      	bne.n	800714e <memset+0xa>
 800714c:	4770      	bx	lr
 800714e:	f803 1b01 	strb.w	r1, [r3], #1
 8007152:	e7f9      	b.n	8007148 <memset+0x4>

08007154 <_free_r>:
 8007154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007156:	2900      	cmp	r1, #0
 8007158:	d044      	beq.n	80071e4 <_free_r+0x90>
 800715a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800715e:	9001      	str	r0, [sp, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	f1a1 0404 	sub.w	r4, r1, #4
 8007166:	bfb8      	it	lt
 8007168:	18e4      	addlt	r4, r4, r3
 800716a:	f003 f873 	bl	800a254 <__malloc_lock>
 800716e:	4a1e      	ldr	r2, [pc, #120]	; (80071e8 <_free_r+0x94>)
 8007170:	9801      	ldr	r0, [sp, #4]
 8007172:	6813      	ldr	r3, [r2, #0]
 8007174:	b933      	cbnz	r3, 8007184 <_free_r+0x30>
 8007176:	6063      	str	r3, [r4, #4]
 8007178:	6014      	str	r4, [r2, #0]
 800717a:	b003      	add	sp, #12
 800717c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007180:	f003 b86e 	b.w	800a260 <__malloc_unlock>
 8007184:	42a3      	cmp	r3, r4
 8007186:	d908      	bls.n	800719a <_free_r+0x46>
 8007188:	6825      	ldr	r5, [r4, #0]
 800718a:	1961      	adds	r1, r4, r5
 800718c:	428b      	cmp	r3, r1
 800718e:	bf01      	itttt	eq
 8007190:	6819      	ldreq	r1, [r3, #0]
 8007192:	685b      	ldreq	r3, [r3, #4]
 8007194:	1949      	addeq	r1, r1, r5
 8007196:	6021      	streq	r1, [r4, #0]
 8007198:	e7ed      	b.n	8007176 <_free_r+0x22>
 800719a:	461a      	mov	r2, r3
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	b10b      	cbz	r3, 80071a4 <_free_r+0x50>
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	d9fa      	bls.n	800719a <_free_r+0x46>
 80071a4:	6811      	ldr	r1, [r2, #0]
 80071a6:	1855      	adds	r5, r2, r1
 80071a8:	42a5      	cmp	r5, r4
 80071aa:	d10b      	bne.n	80071c4 <_free_r+0x70>
 80071ac:	6824      	ldr	r4, [r4, #0]
 80071ae:	4421      	add	r1, r4
 80071b0:	1854      	adds	r4, r2, r1
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	6011      	str	r1, [r2, #0]
 80071b6:	d1e0      	bne.n	800717a <_free_r+0x26>
 80071b8:	681c      	ldr	r4, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	6053      	str	r3, [r2, #4]
 80071be:	4421      	add	r1, r4
 80071c0:	6011      	str	r1, [r2, #0]
 80071c2:	e7da      	b.n	800717a <_free_r+0x26>
 80071c4:	d902      	bls.n	80071cc <_free_r+0x78>
 80071c6:	230c      	movs	r3, #12
 80071c8:	6003      	str	r3, [r0, #0]
 80071ca:	e7d6      	b.n	800717a <_free_r+0x26>
 80071cc:	6825      	ldr	r5, [r4, #0]
 80071ce:	1961      	adds	r1, r4, r5
 80071d0:	428b      	cmp	r3, r1
 80071d2:	bf04      	itt	eq
 80071d4:	6819      	ldreq	r1, [r3, #0]
 80071d6:	685b      	ldreq	r3, [r3, #4]
 80071d8:	6063      	str	r3, [r4, #4]
 80071da:	bf04      	itt	eq
 80071dc:	1949      	addeq	r1, r1, r5
 80071de:	6021      	streq	r1, [r4, #0]
 80071e0:	6054      	str	r4, [r2, #4]
 80071e2:	e7ca      	b.n	800717a <_free_r+0x26>
 80071e4:	b003      	add	sp, #12
 80071e6:	bd30      	pop	{r4, r5, pc}
 80071e8:	200004fc 	.word	0x200004fc

080071ec <sbrk_aligned>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	4e0e      	ldr	r6, [pc, #56]	; (8007228 <sbrk_aligned+0x3c>)
 80071f0:	460c      	mov	r4, r1
 80071f2:	6831      	ldr	r1, [r6, #0]
 80071f4:	4605      	mov	r5, r0
 80071f6:	b911      	cbnz	r1, 80071fe <sbrk_aligned+0x12>
 80071f8:	f000 ff06 	bl	8008008 <_sbrk_r>
 80071fc:	6030      	str	r0, [r6, #0]
 80071fe:	4621      	mov	r1, r4
 8007200:	4628      	mov	r0, r5
 8007202:	f000 ff01 	bl	8008008 <_sbrk_r>
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	d00a      	beq.n	8007220 <sbrk_aligned+0x34>
 800720a:	1cc4      	adds	r4, r0, #3
 800720c:	f024 0403 	bic.w	r4, r4, #3
 8007210:	42a0      	cmp	r0, r4
 8007212:	d007      	beq.n	8007224 <sbrk_aligned+0x38>
 8007214:	1a21      	subs	r1, r4, r0
 8007216:	4628      	mov	r0, r5
 8007218:	f000 fef6 	bl	8008008 <_sbrk_r>
 800721c:	3001      	adds	r0, #1
 800721e:	d101      	bne.n	8007224 <sbrk_aligned+0x38>
 8007220:	f04f 34ff 	mov.w	r4, #4294967295
 8007224:	4620      	mov	r0, r4
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	20000500 	.word	0x20000500

0800722c <_malloc_r>:
 800722c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007230:	1ccd      	adds	r5, r1, #3
 8007232:	f025 0503 	bic.w	r5, r5, #3
 8007236:	3508      	adds	r5, #8
 8007238:	2d0c      	cmp	r5, #12
 800723a:	bf38      	it	cc
 800723c:	250c      	movcc	r5, #12
 800723e:	2d00      	cmp	r5, #0
 8007240:	4607      	mov	r7, r0
 8007242:	db01      	blt.n	8007248 <_malloc_r+0x1c>
 8007244:	42a9      	cmp	r1, r5
 8007246:	d905      	bls.n	8007254 <_malloc_r+0x28>
 8007248:	230c      	movs	r3, #12
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	2600      	movs	r6, #0
 800724e:	4630      	mov	r0, r6
 8007250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007254:	4e2e      	ldr	r6, [pc, #184]	; (8007310 <_malloc_r+0xe4>)
 8007256:	f002 fffd 	bl	800a254 <__malloc_lock>
 800725a:	6833      	ldr	r3, [r6, #0]
 800725c:	461c      	mov	r4, r3
 800725e:	bb34      	cbnz	r4, 80072ae <_malloc_r+0x82>
 8007260:	4629      	mov	r1, r5
 8007262:	4638      	mov	r0, r7
 8007264:	f7ff ffc2 	bl	80071ec <sbrk_aligned>
 8007268:	1c43      	adds	r3, r0, #1
 800726a:	4604      	mov	r4, r0
 800726c:	d14d      	bne.n	800730a <_malloc_r+0xde>
 800726e:	6834      	ldr	r4, [r6, #0]
 8007270:	4626      	mov	r6, r4
 8007272:	2e00      	cmp	r6, #0
 8007274:	d140      	bne.n	80072f8 <_malloc_r+0xcc>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	4631      	mov	r1, r6
 800727a:	4638      	mov	r0, r7
 800727c:	eb04 0803 	add.w	r8, r4, r3
 8007280:	f000 fec2 	bl	8008008 <_sbrk_r>
 8007284:	4580      	cmp	r8, r0
 8007286:	d13a      	bne.n	80072fe <_malloc_r+0xd2>
 8007288:	6821      	ldr	r1, [r4, #0]
 800728a:	3503      	adds	r5, #3
 800728c:	1a6d      	subs	r5, r5, r1
 800728e:	f025 0503 	bic.w	r5, r5, #3
 8007292:	3508      	adds	r5, #8
 8007294:	2d0c      	cmp	r5, #12
 8007296:	bf38      	it	cc
 8007298:	250c      	movcc	r5, #12
 800729a:	4629      	mov	r1, r5
 800729c:	4638      	mov	r0, r7
 800729e:	f7ff ffa5 	bl	80071ec <sbrk_aligned>
 80072a2:	3001      	adds	r0, #1
 80072a4:	d02b      	beq.n	80072fe <_malloc_r+0xd2>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	442b      	add	r3, r5
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	e00e      	b.n	80072cc <_malloc_r+0xa0>
 80072ae:	6822      	ldr	r2, [r4, #0]
 80072b0:	1b52      	subs	r2, r2, r5
 80072b2:	d41e      	bmi.n	80072f2 <_malloc_r+0xc6>
 80072b4:	2a0b      	cmp	r2, #11
 80072b6:	d916      	bls.n	80072e6 <_malloc_r+0xba>
 80072b8:	1961      	adds	r1, r4, r5
 80072ba:	42a3      	cmp	r3, r4
 80072bc:	6025      	str	r5, [r4, #0]
 80072be:	bf18      	it	ne
 80072c0:	6059      	strne	r1, [r3, #4]
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	bf08      	it	eq
 80072c6:	6031      	streq	r1, [r6, #0]
 80072c8:	5162      	str	r2, [r4, r5]
 80072ca:	604b      	str	r3, [r1, #4]
 80072cc:	4638      	mov	r0, r7
 80072ce:	f104 060b 	add.w	r6, r4, #11
 80072d2:	f002 ffc5 	bl	800a260 <__malloc_unlock>
 80072d6:	f026 0607 	bic.w	r6, r6, #7
 80072da:	1d23      	adds	r3, r4, #4
 80072dc:	1af2      	subs	r2, r6, r3
 80072de:	d0b6      	beq.n	800724e <_malloc_r+0x22>
 80072e0:	1b9b      	subs	r3, r3, r6
 80072e2:	50a3      	str	r3, [r4, r2]
 80072e4:	e7b3      	b.n	800724e <_malloc_r+0x22>
 80072e6:	6862      	ldr	r2, [r4, #4]
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	bf0c      	ite	eq
 80072ec:	6032      	streq	r2, [r6, #0]
 80072ee:	605a      	strne	r2, [r3, #4]
 80072f0:	e7ec      	b.n	80072cc <_malloc_r+0xa0>
 80072f2:	4623      	mov	r3, r4
 80072f4:	6864      	ldr	r4, [r4, #4]
 80072f6:	e7b2      	b.n	800725e <_malloc_r+0x32>
 80072f8:	4634      	mov	r4, r6
 80072fa:	6876      	ldr	r6, [r6, #4]
 80072fc:	e7b9      	b.n	8007272 <_malloc_r+0x46>
 80072fe:	230c      	movs	r3, #12
 8007300:	603b      	str	r3, [r7, #0]
 8007302:	4638      	mov	r0, r7
 8007304:	f002 ffac 	bl	800a260 <__malloc_unlock>
 8007308:	e7a1      	b.n	800724e <_malloc_r+0x22>
 800730a:	6025      	str	r5, [r4, #0]
 800730c:	e7de      	b.n	80072cc <_malloc_r+0xa0>
 800730e:	bf00      	nop
 8007310:	200004fc 	.word	0x200004fc

08007314 <__cvt>:
 8007314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	ec55 4b10 	vmov	r4, r5, d0
 800731c:	2d00      	cmp	r5, #0
 800731e:	460e      	mov	r6, r1
 8007320:	4619      	mov	r1, r3
 8007322:	462b      	mov	r3, r5
 8007324:	bfbb      	ittet	lt
 8007326:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800732a:	461d      	movlt	r5, r3
 800732c:	2300      	movge	r3, #0
 800732e:	232d      	movlt	r3, #45	; 0x2d
 8007330:	700b      	strb	r3, [r1, #0]
 8007332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007334:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007338:	4691      	mov	r9, r2
 800733a:	f023 0820 	bic.w	r8, r3, #32
 800733e:	bfbc      	itt	lt
 8007340:	4622      	movlt	r2, r4
 8007342:	4614      	movlt	r4, r2
 8007344:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007348:	d005      	beq.n	8007356 <__cvt+0x42>
 800734a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800734e:	d100      	bne.n	8007352 <__cvt+0x3e>
 8007350:	3601      	adds	r6, #1
 8007352:	2102      	movs	r1, #2
 8007354:	e000      	b.n	8007358 <__cvt+0x44>
 8007356:	2103      	movs	r1, #3
 8007358:	ab03      	add	r3, sp, #12
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	ab02      	add	r3, sp, #8
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	ec45 4b10 	vmov	d0, r4, r5
 8007364:	4653      	mov	r3, sl
 8007366:	4632      	mov	r2, r6
 8007368:	f001 fdf2 	bl	8008f50 <_dtoa_r>
 800736c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007370:	4607      	mov	r7, r0
 8007372:	d102      	bne.n	800737a <__cvt+0x66>
 8007374:	f019 0f01 	tst.w	r9, #1
 8007378:	d022      	beq.n	80073c0 <__cvt+0xac>
 800737a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800737e:	eb07 0906 	add.w	r9, r7, r6
 8007382:	d110      	bne.n	80073a6 <__cvt+0x92>
 8007384:	783b      	ldrb	r3, [r7, #0]
 8007386:	2b30      	cmp	r3, #48	; 0x30
 8007388:	d10a      	bne.n	80073a0 <__cvt+0x8c>
 800738a:	2200      	movs	r2, #0
 800738c:	2300      	movs	r3, #0
 800738e:	4620      	mov	r0, r4
 8007390:	4629      	mov	r1, r5
 8007392:	f7f9 fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007396:	b918      	cbnz	r0, 80073a0 <__cvt+0x8c>
 8007398:	f1c6 0601 	rsb	r6, r6, #1
 800739c:	f8ca 6000 	str.w	r6, [sl]
 80073a0:	f8da 3000 	ldr.w	r3, [sl]
 80073a4:	4499      	add	r9, r3
 80073a6:	2200      	movs	r2, #0
 80073a8:	2300      	movs	r3, #0
 80073aa:	4620      	mov	r0, r4
 80073ac:	4629      	mov	r1, r5
 80073ae:	f7f9 fb93 	bl	8000ad8 <__aeabi_dcmpeq>
 80073b2:	b108      	cbz	r0, 80073b8 <__cvt+0xa4>
 80073b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80073b8:	2230      	movs	r2, #48	; 0x30
 80073ba:	9b03      	ldr	r3, [sp, #12]
 80073bc:	454b      	cmp	r3, r9
 80073be:	d307      	bcc.n	80073d0 <__cvt+0xbc>
 80073c0:	9b03      	ldr	r3, [sp, #12]
 80073c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073c4:	1bdb      	subs	r3, r3, r7
 80073c6:	4638      	mov	r0, r7
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	b004      	add	sp, #16
 80073cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d0:	1c59      	adds	r1, r3, #1
 80073d2:	9103      	str	r1, [sp, #12]
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	e7f0      	b.n	80073ba <__cvt+0xa6>

080073d8 <__exponent>:
 80073d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073da:	4603      	mov	r3, r0
 80073dc:	2900      	cmp	r1, #0
 80073de:	bfb8      	it	lt
 80073e0:	4249      	neglt	r1, r1
 80073e2:	f803 2b02 	strb.w	r2, [r3], #2
 80073e6:	bfb4      	ite	lt
 80073e8:	222d      	movlt	r2, #45	; 0x2d
 80073ea:	222b      	movge	r2, #43	; 0x2b
 80073ec:	2909      	cmp	r1, #9
 80073ee:	7042      	strb	r2, [r0, #1]
 80073f0:	dd2a      	ble.n	8007448 <__exponent+0x70>
 80073f2:	f10d 0407 	add.w	r4, sp, #7
 80073f6:	46a4      	mov	ip, r4
 80073f8:	270a      	movs	r7, #10
 80073fa:	46a6      	mov	lr, r4
 80073fc:	460a      	mov	r2, r1
 80073fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8007402:	fb07 1516 	mls	r5, r7, r6, r1
 8007406:	3530      	adds	r5, #48	; 0x30
 8007408:	2a63      	cmp	r2, #99	; 0x63
 800740a:	f104 34ff 	add.w	r4, r4, #4294967295
 800740e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007412:	4631      	mov	r1, r6
 8007414:	dcf1      	bgt.n	80073fa <__exponent+0x22>
 8007416:	3130      	adds	r1, #48	; 0x30
 8007418:	f1ae 0502 	sub.w	r5, lr, #2
 800741c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007420:	1c44      	adds	r4, r0, #1
 8007422:	4629      	mov	r1, r5
 8007424:	4561      	cmp	r1, ip
 8007426:	d30a      	bcc.n	800743e <__exponent+0x66>
 8007428:	f10d 0209 	add.w	r2, sp, #9
 800742c:	eba2 020e 	sub.w	r2, r2, lr
 8007430:	4565      	cmp	r5, ip
 8007432:	bf88      	it	hi
 8007434:	2200      	movhi	r2, #0
 8007436:	4413      	add	r3, r2
 8007438:	1a18      	subs	r0, r3, r0
 800743a:	b003      	add	sp, #12
 800743c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800743e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007442:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007446:	e7ed      	b.n	8007424 <__exponent+0x4c>
 8007448:	2330      	movs	r3, #48	; 0x30
 800744a:	3130      	adds	r1, #48	; 0x30
 800744c:	7083      	strb	r3, [r0, #2]
 800744e:	70c1      	strb	r1, [r0, #3]
 8007450:	1d03      	adds	r3, r0, #4
 8007452:	e7f1      	b.n	8007438 <__exponent+0x60>

08007454 <_printf_float>:
 8007454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	ed2d 8b02 	vpush	{d8}
 800745c:	b08d      	sub	sp, #52	; 0x34
 800745e:	460c      	mov	r4, r1
 8007460:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007464:	4616      	mov	r6, r2
 8007466:	461f      	mov	r7, r3
 8007468:	4605      	mov	r5, r0
 800746a:	f002 fecf 	bl	800a20c <_localeconv_r>
 800746e:	f8d0 a000 	ldr.w	sl, [r0]
 8007472:	4650      	mov	r0, sl
 8007474:	f7f8 feb4 	bl	80001e0 <strlen>
 8007478:	2300      	movs	r3, #0
 800747a:	930a      	str	r3, [sp, #40]	; 0x28
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	9305      	str	r3, [sp, #20]
 8007480:	f8d8 3000 	ldr.w	r3, [r8]
 8007484:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007488:	3307      	adds	r3, #7
 800748a:	f023 0307 	bic.w	r3, r3, #7
 800748e:	f103 0208 	add.w	r2, r3, #8
 8007492:	f8c8 2000 	str.w	r2, [r8]
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800749e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074a6:	9307      	str	r3, [sp, #28]
 80074a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80074ac:	ee08 0a10 	vmov	s16, r0
 80074b0:	4b9f      	ldr	r3, [pc, #636]	; (8007730 <_printf_float+0x2dc>)
 80074b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074b6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ba:	f7f9 fb3f 	bl	8000b3c <__aeabi_dcmpun>
 80074be:	bb88      	cbnz	r0, 8007524 <_printf_float+0xd0>
 80074c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074c4:	4b9a      	ldr	r3, [pc, #616]	; (8007730 <_printf_float+0x2dc>)
 80074c6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ca:	f7f9 fb19 	bl	8000b00 <__aeabi_dcmple>
 80074ce:	bb48      	cbnz	r0, 8007524 <_printf_float+0xd0>
 80074d0:	2200      	movs	r2, #0
 80074d2:	2300      	movs	r3, #0
 80074d4:	4640      	mov	r0, r8
 80074d6:	4649      	mov	r1, r9
 80074d8:	f7f9 fb08 	bl	8000aec <__aeabi_dcmplt>
 80074dc:	b110      	cbz	r0, 80074e4 <_printf_float+0x90>
 80074de:	232d      	movs	r3, #45	; 0x2d
 80074e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e4:	4b93      	ldr	r3, [pc, #588]	; (8007734 <_printf_float+0x2e0>)
 80074e6:	4894      	ldr	r0, [pc, #592]	; (8007738 <_printf_float+0x2e4>)
 80074e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074ec:	bf94      	ite	ls
 80074ee:	4698      	movls	r8, r3
 80074f0:	4680      	movhi	r8, r0
 80074f2:	2303      	movs	r3, #3
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	9b05      	ldr	r3, [sp, #20]
 80074f8:	f023 0204 	bic.w	r2, r3, #4
 80074fc:	6022      	str	r2, [r4, #0]
 80074fe:	f04f 0900 	mov.w	r9, #0
 8007502:	9700      	str	r7, [sp, #0]
 8007504:	4633      	mov	r3, r6
 8007506:	aa0b      	add	r2, sp, #44	; 0x2c
 8007508:	4621      	mov	r1, r4
 800750a:	4628      	mov	r0, r5
 800750c:	f000 f9d8 	bl	80078c0 <_printf_common>
 8007510:	3001      	adds	r0, #1
 8007512:	f040 8090 	bne.w	8007636 <_printf_float+0x1e2>
 8007516:	f04f 30ff 	mov.w	r0, #4294967295
 800751a:	b00d      	add	sp, #52	; 0x34
 800751c:	ecbd 8b02 	vpop	{d8}
 8007520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007524:	4642      	mov	r2, r8
 8007526:	464b      	mov	r3, r9
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f9 fb06 	bl	8000b3c <__aeabi_dcmpun>
 8007530:	b140      	cbz	r0, 8007544 <_printf_float+0xf0>
 8007532:	464b      	mov	r3, r9
 8007534:	2b00      	cmp	r3, #0
 8007536:	bfbc      	itt	lt
 8007538:	232d      	movlt	r3, #45	; 0x2d
 800753a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800753e:	487f      	ldr	r0, [pc, #508]	; (800773c <_printf_float+0x2e8>)
 8007540:	4b7f      	ldr	r3, [pc, #508]	; (8007740 <_printf_float+0x2ec>)
 8007542:	e7d1      	b.n	80074e8 <_printf_float+0x94>
 8007544:	6863      	ldr	r3, [r4, #4]
 8007546:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800754a:	9206      	str	r2, [sp, #24]
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	d13f      	bne.n	80075d0 <_printf_float+0x17c>
 8007550:	2306      	movs	r3, #6
 8007552:	6063      	str	r3, [r4, #4]
 8007554:	9b05      	ldr	r3, [sp, #20]
 8007556:	6861      	ldr	r1, [r4, #4]
 8007558:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800755c:	2300      	movs	r3, #0
 800755e:	9303      	str	r3, [sp, #12]
 8007560:	ab0a      	add	r3, sp, #40	; 0x28
 8007562:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007566:	ab09      	add	r3, sp, #36	; 0x24
 8007568:	ec49 8b10 	vmov	d0, r8, r9
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	6022      	str	r2, [r4, #0]
 8007570:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007574:	4628      	mov	r0, r5
 8007576:	f7ff fecd 	bl	8007314 <__cvt>
 800757a:	9b06      	ldr	r3, [sp, #24]
 800757c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800757e:	2b47      	cmp	r3, #71	; 0x47
 8007580:	4680      	mov	r8, r0
 8007582:	d108      	bne.n	8007596 <_printf_float+0x142>
 8007584:	1cc8      	adds	r0, r1, #3
 8007586:	db02      	blt.n	800758e <_printf_float+0x13a>
 8007588:	6863      	ldr	r3, [r4, #4]
 800758a:	4299      	cmp	r1, r3
 800758c:	dd41      	ble.n	8007612 <_printf_float+0x1be>
 800758e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007592:	fa5f fb8b 	uxtb.w	fp, fp
 8007596:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800759a:	d820      	bhi.n	80075de <_printf_float+0x18a>
 800759c:	3901      	subs	r1, #1
 800759e:	465a      	mov	r2, fp
 80075a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075a4:	9109      	str	r1, [sp, #36]	; 0x24
 80075a6:	f7ff ff17 	bl	80073d8 <__exponent>
 80075aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ac:	1813      	adds	r3, r2, r0
 80075ae:	2a01      	cmp	r2, #1
 80075b0:	4681      	mov	r9, r0
 80075b2:	6123      	str	r3, [r4, #16]
 80075b4:	dc02      	bgt.n	80075bc <_printf_float+0x168>
 80075b6:	6822      	ldr	r2, [r4, #0]
 80075b8:	07d2      	lsls	r2, r2, #31
 80075ba:	d501      	bpl.n	80075c0 <_printf_float+0x16c>
 80075bc:	3301      	adds	r3, #1
 80075be:	6123      	str	r3, [r4, #16]
 80075c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d09c      	beq.n	8007502 <_printf_float+0xae>
 80075c8:	232d      	movs	r3, #45	; 0x2d
 80075ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ce:	e798      	b.n	8007502 <_printf_float+0xae>
 80075d0:	9a06      	ldr	r2, [sp, #24]
 80075d2:	2a47      	cmp	r2, #71	; 0x47
 80075d4:	d1be      	bne.n	8007554 <_printf_float+0x100>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1bc      	bne.n	8007554 <_printf_float+0x100>
 80075da:	2301      	movs	r3, #1
 80075dc:	e7b9      	b.n	8007552 <_printf_float+0xfe>
 80075de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075e2:	d118      	bne.n	8007616 <_printf_float+0x1c2>
 80075e4:	2900      	cmp	r1, #0
 80075e6:	6863      	ldr	r3, [r4, #4]
 80075e8:	dd0b      	ble.n	8007602 <_printf_float+0x1ae>
 80075ea:	6121      	str	r1, [r4, #16]
 80075ec:	b913      	cbnz	r3, 80075f4 <_printf_float+0x1a0>
 80075ee:	6822      	ldr	r2, [r4, #0]
 80075f0:	07d0      	lsls	r0, r2, #31
 80075f2:	d502      	bpl.n	80075fa <_printf_float+0x1a6>
 80075f4:	3301      	adds	r3, #1
 80075f6:	440b      	add	r3, r1
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80075fc:	f04f 0900 	mov.w	r9, #0
 8007600:	e7de      	b.n	80075c0 <_printf_float+0x16c>
 8007602:	b913      	cbnz	r3, 800760a <_printf_float+0x1b6>
 8007604:	6822      	ldr	r2, [r4, #0]
 8007606:	07d2      	lsls	r2, r2, #31
 8007608:	d501      	bpl.n	800760e <_printf_float+0x1ba>
 800760a:	3302      	adds	r3, #2
 800760c:	e7f4      	b.n	80075f8 <_printf_float+0x1a4>
 800760e:	2301      	movs	r3, #1
 8007610:	e7f2      	b.n	80075f8 <_printf_float+0x1a4>
 8007612:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007618:	4299      	cmp	r1, r3
 800761a:	db05      	blt.n	8007628 <_printf_float+0x1d4>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	6121      	str	r1, [r4, #16]
 8007620:	07d8      	lsls	r0, r3, #31
 8007622:	d5ea      	bpl.n	80075fa <_printf_float+0x1a6>
 8007624:	1c4b      	adds	r3, r1, #1
 8007626:	e7e7      	b.n	80075f8 <_printf_float+0x1a4>
 8007628:	2900      	cmp	r1, #0
 800762a:	bfd4      	ite	le
 800762c:	f1c1 0202 	rsble	r2, r1, #2
 8007630:	2201      	movgt	r2, #1
 8007632:	4413      	add	r3, r2
 8007634:	e7e0      	b.n	80075f8 <_printf_float+0x1a4>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	055a      	lsls	r2, r3, #21
 800763a:	d407      	bmi.n	800764c <_printf_float+0x1f8>
 800763c:	6923      	ldr	r3, [r4, #16]
 800763e:	4642      	mov	r2, r8
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	d12c      	bne.n	80076a4 <_printf_float+0x250>
 800764a:	e764      	b.n	8007516 <_printf_float+0xc2>
 800764c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007650:	f240 80e0 	bls.w	8007814 <_printf_float+0x3c0>
 8007654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007658:	2200      	movs	r2, #0
 800765a:	2300      	movs	r3, #0
 800765c:	f7f9 fa3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007660:	2800      	cmp	r0, #0
 8007662:	d034      	beq.n	80076ce <_printf_float+0x27a>
 8007664:	4a37      	ldr	r2, [pc, #220]	; (8007744 <_printf_float+0x2f0>)
 8007666:	2301      	movs	r3, #1
 8007668:	4631      	mov	r1, r6
 800766a:	4628      	mov	r0, r5
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	f43f af51 	beq.w	8007516 <_printf_float+0xc2>
 8007674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007678:	429a      	cmp	r2, r3
 800767a:	db02      	blt.n	8007682 <_printf_float+0x22e>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	07d8      	lsls	r0, r3, #31
 8007680:	d510      	bpl.n	80076a4 <_printf_float+0x250>
 8007682:	ee18 3a10 	vmov	r3, s16
 8007686:	4652      	mov	r2, sl
 8007688:	4631      	mov	r1, r6
 800768a:	4628      	mov	r0, r5
 800768c:	47b8      	blx	r7
 800768e:	3001      	adds	r0, #1
 8007690:	f43f af41 	beq.w	8007516 <_printf_float+0xc2>
 8007694:	f04f 0800 	mov.w	r8, #0
 8007698:	f104 091a 	add.w	r9, r4, #26
 800769c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800769e:	3b01      	subs	r3, #1
 80076a0:	4543      	cmp	r3, r8
 80076a2:	dc09      	bgt.n	80076b8 <_printf_float+0x264>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	079b      	lsls	r3, r3, #30
 80076a8:	f100 8105 	bmi.w	80078b6 <_printf_float+0x462>
 80076ac:	68e0      	ldr	r0, [r4, #12]
 80076ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b0:	4298      	cmp	r0, r3
 80076b2:	bfb8      	it	lt
 80076b4:	4618      	movlt	r0, r3
 80076b6:	e730      	b.n	800751a <_printf_float+0xc6>
 80076b8:	2301      	movs	r3, #1
 80076ba:	464a      	mov	r2, r9
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f af27 	beq.w	8007516 <_printf_float+0xc2>
 80076c8:	f108 0801 	add.w	r8, r8, #1
 80076cc:	e7e6      	b.n	800769c <_printf_float+0x248>
 80076ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	dc39      	bgt.n	8007748 <_printf_float+0x2f4>
 80076d4:	4a1b      	ldr	r2, [pc, #108]	; (8007744 <_printf_float+0x2f0>)
 80076d6:	2301      	movs	r3, #1
 80076d8:	4631      	mov	r1, r6
 80076da:	4628      	mov	r0, r5
 80076dc:	47b8      	blx	r7
 80076de:	3001      	adds	r0, #1
 80076e0:	f43f af19 	beq.w	8007516 <_printf_float+0xc2>
 80076e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076e8:	4313      	orrs	r3, r2
 80076ea:	d102      	bne.n	80076f2 <_printf_float+0x29e>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	07d9      	lsls	r1, r3, #31
 80076f0:	d5d8      	bpl.n	80076a4 <_printf_float+0x250>
 80076f2:	ee18 3a10 	vmov	r3, s16
 80076f6:	4652      	mov	r2, sl
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	f43f af09 	beq.w	8007516 <_printf_float+0xc2>
 8007704:	f04f 0900 	mov.w	r9, #0
 8007708:	f104 0a1a 	add.w	sl, r4, #26
 800770c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770e:	425b      	negs	r3, r3
 8007710:	454b      	cmp	r3, r9
 8007712:	dc01      	bgt.n	8007718 <_printf_float+0x2c4>
 8007714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007716:	e792      	b.n	800763e <_printf_float+0x1ea>
 8007718:	2301      	movs	r3, #1
 800771a:	4652      	mov	r2, sl
 800771c:	4631      	mov	r1, r6
 800771e:	4628      	mov	r0, r5
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f aef7 	beq.w	8007516 <_printf_float+0xc2>
 8007728:	f109 0901 	add.w	r9, r9, #1
 800772c:	e7ee      	b.n	800770c <_printf_float+0x2b8>
 800772e:	bf00      	nop
 8007730:	7fefffff 	.word	0x7fefffff
 8007734:	0800bb30 	.word	0x0800bb30
 8007738:	0800bb34 	.word	0x0800bb34
 800773c:	0800bb3c 	.word	0x0800bb3c
 8007740:	0800bb38 	.word	0x0800bb38
 8007744:	0800bb40 	.word	0x0800bb40
 8007748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800774a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800774c:	429a      	cmp	r2, r3
 800774e:	bfa8      	it	ge
 8007750:	461a      	movge	r2, r3
 8007752:	2a00      	cmp	r2, #0
 8007754:	4691      	mov	r9, r2
 8007756:	dc37      	bgt.n	80077c8 <_printf_float+0x374>
 8007758:	f04f 0b00 	mov.w	fp, #0
 800775c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007760:	f104 021a 	add.w	r2, r4, #26
 8007764:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007766:	9305      	str	r3, [sp, #20]
 8007768:	eba3 0309 	sub.w	r3, r3, r9
 800776c:	455b      	cmp	r3, fp
 800776e:	dc33      	bgt.n	80077d8 <_printf_float+0x384>
 8007770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007774:	429a      	cmp	r2, r3
 8007776:	db3b      	blt.n	80077f0 <_printf_float+0x39c>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	07da      	lsls	r2, r3, #31
 800777c:	d438      	bmi.n	80077f0 <_printf_float+0x39c>
 800777e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007780:	9a05      	ldr	r2, [sp, #20]
 8007782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007784:	1a9a      	subs	r2, r3, r2
 8007786:	eba3 0901 	sub.w	r9, r3, r1
 800778a:	4591      	cmp	r9, r2
 800778c:	bfa8      	it	ge
 800778e:	4691      	movge	r9, r2
 8007790:	f1b9 0f00 	cmp.w	r9, #0
 8007794:	dc35      	bgt.n	8007802 <_printf_float+0x3ae>
 8007796:	f04f 0800 	mov.w	r8, #0
 800779a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800779e:	f104 0a1a 	add.w	sl, r4, #26
 80077a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077a6:	1a9b      	subs	r3, r3, r2
 80077a8:	eba3 0309 	sub.w	r3, r3, r9
 80077ac:	4543      	cmp	r3, r8
 80077ae:	f77f af79 	ble.w	80076a4 <_printf_float+0x250>
 80077b2:	2301      	movs	r3, #1
 80077b4:	4652      	mov	r2, sl
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	f43f aeaa 	beq.w	8007516 <_printf_float+0xc2>
 80077c2:	f108 0801 	add.w	r8, r8, #1
 80077c6:	e7ec      	b.n	80077a2 <_printf_float+0x34e>
 80077c8:	4613      	mov	r3, r2
 80077ca:	4631      	mov	r1, r6
 80077cc:	4642      	mov	r2, r8
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	d1c0      	bne.n	8007758 <_printf_float+0x304>
 80077d6:	e69e      	b.n	8007516 <_printf_float+0xc2>
 80077d8:	2301      	movs	r3, #1
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	9205      	str	r2, [sp, #20]
 80077e0:	47b8      	blx	r7
 80077e2:	3001      	adds	r0, #1
 80077e4:	f43f ae97 	beq.w	8007516 <_printf_float+0xc2>
 80077e8:	9a05      	ldr	r2, [sp, #20]
 80077ea:	f10b 0b01 	add.w	fp, fp, #1
 80077ee:	e7b9      	b.n	8007764 <_printf_float+0x310>
 80077f0:	ee18 3a10 	vmov	r3, s16
 80077f4:	4652      	mov	r2, sl
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	d1be      	bne.n	800777e <_printf_float+0x32a>
 8007800:	e689      	b.n	8007516 <_printf_float+0xc2>
 8007802:	9a05      	ldr	r2, [sp, #20]
 8007804:	464b      	mov	r3, r9
 8007806:	4442      	add	r2, r8
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	d1c1      	bne.n	8007796 <_printf_float+0x342>
 8007812:	e680      	b.n	8007516 <_printf_float+0xc2>
 8007814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007816:	2a01      	cmp	r2, #1
 8007818:	dc01      	bgt.n	800781e <_printf_float+0x3ca>
 800781a:	07db      	lsls	r3, r3, #31
 800781c:	d538      	bpl.n	8007890 <_printf_float+0x43c>
 800781e:	2301      	movs	r3, #1
 8007820:	4642      	mov	r2, r8
 8007822:	4631      	mov	r1, r6
 8007824:	4628      	mov	r0, r5
 8007826:	47b8      	blx	r7
 8007828:	3001      	adds	r0, #1
 800782a:	f43f ae74 	beq.w	8007516 <_printf_float+0xc2>
 800782e:	ee18 3a10 	vmov	r3, s16
 8007832:	4652      	mov	r2, sl
 8007834:	4631      	mov	r1, r6
 8007836:	4628      	mov	r0, r5
 8007838:	47b8      	blx	r7
 800783a:	3001      	adds	r0, #1
 800783c:	f43f ae6b 	beq.w	8007516 <_printf_float+0xc2>
 8007840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007844:	2200      	movs	r2, #0
 8007846:	2300      	movs	r3, #0
 8007848:	f7f9 f946 	bl	8000ad8 <__aeabi_dcmpeq>
 800784c:	b9d8      	cbnz	r0, 8007886 <_printf_float+0x432>
 800784e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007850:	f108 0201 	add.w	r2, r8, #1
 8007854:	3b01      	subs	r3, #1
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	d10e      	bne.n	800787e <_printf_float+0x42a>
 8007860:	e659      	b.n	8007516 <_printf_float+0xc2>
 8007862:	2301      	movs	r3, #1
 8007864:	4652      	mov	r2, sl
 8007866:	4631      	mov	r1, r6
 8007868:	4628      	mov	r0, r5
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	f43f ae52 	beq.w	8007516 <_printf_float+0xc2>
 8007872:	f108 0801 	add.w	r8, r8, #1
 8007876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007878:	3b01      	subs	r3, #1
 800787a:	4543      	cmp	r3, r8
 800787c:	dcf1      	bgt.n	8007862 <_printf_float+0x40e>
 800787e:	464b      	mov	r3, r9
 8007880:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007884:	e6dc      	b.n	8007640 <_printf_float+0x1ec>
 8007886:	f04f 0800 	mov.w	r8, #0
 800788a:	f104 0a1a 	add.w	sl, r4, #26
 800788e:	e7f2      	b.n	8007876 <_printf_float+0x422>
 8007890:	2301      	movs	r3, #1
 8007892:	4642      	mov	r2, r8
 8007894:	e7df      	b.n	8007856 <_printf_float+0x402>
 8007896:	2301      	movs	r3, #1
 8007898:	464a      	mov	r2, r9
 800789a:	4631      	mov	r1, r6
 800789c:	4628      	mov	r0, r5
 800789e:	47b8      	blx	r7
 80078a0:	3001      	adds	r0, #1
 80078a2:	f43f ae38 	beq.w	8007516 <_printf_float+0xc2>
 80078a6:	f108 0801 	add.w	r8, r8, #1
 80078aa:	68e3      	ldr	r3, [r4, #12]
 80078ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078ae:	1a5b      	subs	r3, r3, r1
 80078b0:	4543      	cmp	r3, r8
 80078b2:	dcf0      	bgt.n	8007896 <_printf_float+0x442>
 80078b4:	e6fa      	b.n	80076ac <_printf_float+0x258>
 80078b6:	f04f 0800 	mov.w	r8, #0
 80078ba:	f104 0919 	add.w	r9, r4, #25
 80078be:	e7f4      	b.n	80078aa <_printf_float+0x456>

080078c0 <_printf_common>:
 80078c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c4:	4616      	mov	r6, r2
 80078c6:	4699      	mov	r9, r3
 80078c8:	688a      	ldr	r2, [r1, #8]
 80078ca:	690b      	ldr	r3, [r1, #16]
 80078cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078d0:	4293      	cmp	r3, r2
 80078d2:	bfb8      	it	lt
 80078d4:	4613      	movlt	r3, r2
 80078d6:	6033      	str	r3, [r6, #0]
 80078d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078dc:	4607      	mov	r7, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	b10a      	cbz	r2, 80078e6 <_printf_common+0x26>
 80078e2:	3301      	adds	r3, #1
 80078e4:	6033      	str	r3, [r6, #0]
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	0699      	lsls	r1, r3, #26
 80078ea:	bf42      	ittt	mi
 80078ec:	6833      	ldrmi	r3, [r6, #0]
 80078ee:	3302      	addmi	r3, #2
 80078f0:	6033      	strmi	r3, [r6, #0]
 80078f2:	6825      	ldr	r5, [r4, #0]
 80078f4:	f015 0506 	ands.w	r5, r5, #6
 80078f8:	d106      	bne.n	8007908 <_printf_common+0x48>
 80078fa:	f104 0a19 	add.w	sl, r4, #25
 80078fe:	68e3      	ldr	r3, [r4, #12]
 8007900:	6832      	ldr	r2, [r6, #0]
 8007902:	1a9b      	subs	r3, r3, r2
 8007904:	42ab      	cmp	r3, r5
 8007906:	dc26      	bgt.n	8007956 <_printf_common+0x96>
 8007908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800790c:	1e13      	subs	r3, r2, #0
 800790e:	6822      	ldr	r2, [r4, #0]
 8007910:	bf18      	it	ne
 8007912:	2301      	movne	r3, #1
 8007914:	0692      	lsls	r2, r2, #26
 8007916:	d42b      	bmi.n	8007970 <_printf_common+0xb0>
 8007918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800791c:	4649      	mov	r1, r9
 800791e:	4638      	mov	r0, r7
 8007920:	47c0      	blx	r8
 8007922:	3001      	adds	r0, #1
 8007924:	d01e      	beq.n	8007964 <_printf_common+0xa4>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	68e5      	ldr	r5, [r4, #12]
 800792a:	6832      	ldr	r2, [r6, #0]
 800792c:	f003 0306 	and.w	r3, r3, #6
 8007930:	2b04      	cmp	r3, #4
 8007932:	bf08      	it	eq
 8007934:	1aad      	subeq	r5, r5, r2
 8007936:	68a3      	ldr	r3, [r4, #8]
 8007938:	6922      	ldr	r2, [r4, #16]
 800793a:	bf0c      	ite	eq
 800793c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007940:	2500      	movne	r5, #0
 8007942:	4293      	cmp	r3, r2
 8007944:	bfc4      	itt	gt
 8007946:	1a9b      	subgt	r3, r3, r2
 8007948:	18ed      	addgt	r5, r5, r3
 800794a:	2600      	movs	r6, #0
 800794c:	341a      	adds	r4, #26
 800794e:	42b5      	cmp	r5, r6
 8007950:	d11a      	bne.n	8007988 <_printf_common+0xc8>
 8007952:	2000      	movs	r0, #0
 8007954:	e008      	b.n	8007968 <_printf_common+0xa8>
 8007956:	2301      	movs	r3, #1
 8007958:	4652      	mov	r2, sl
 800795a:	4649      	mov	r1, r9
 800795c:	4638      	mov	r0, r7
 800795e:	47c0      	blx	r8
 8007960:	3001      	adds	r0, #1
 8007962:	d103      	bne.n	800796c <_printf_common+0xac>
 8007964:	f04f 30ff 	mov.w	r0, #4294967295
 8007968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796c:	3501      	adds	r5, #1
 800796e:	e7c6      	b.n	80078fe <_printf_common+0x3e>
 8007970:	18e1      	adds	r1, r4, r3
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	2030      	movs	r0, #48	; 0x30
 8007976:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800797a:	4422      	add	r2, r4
 800797c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007984:	3302      	adds	r3, #2
 8007986:	e7c7      	b.n	8007918 <_printf_common+0x58>
 8007988:	2301      	movs	r3, #1
 800798a:	4622      	mov	r2, r4
 800798c:	4649      	mov	r1, r9
 800798e:	4638      	mov	r0, r7
 8007990:	47c0      	blx	r8
 8007992:	3001      	adds	r0, #1
 8007994:	d0e6      	beq.n	8007964 <_printf_common+0xa4>
 8007996:	3601      	adds	r6, #1
 8007998:	e7d9      	b.n	800794e <_printf_common+0x8e>
	...

0800799c <_printf_i>:
 800799c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	7e0f      	ldrb	r7, [r1, #24]
 80079a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079a4:	2f78      	cmp	r7, #120	; 0x78
 80079a6:	4691      	mov	r9, r2
 80079a8:	4680      	mov	r8, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	469a      	mov	sl, r3
 80079ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079b2:	d807      	bhi.n	80079c4 <_printf_i+0x28>
 80079b4:	2f62      	cmp	r7, #98	; 0x62
 80079b6:	d80a      	bhi.n	80079ce <_printf_i+0x32>
 80079b8:	2f00      	cmp	r7, #0
 80079ba:	f000 80d8 	beq.w	8007b6e <_printf_i+0x1d2>
 80079be:	2f58      	cmp	r7, #88	; 0x58
 80079c0:	f000 80a3 	beq.w	8007b0a <_printf_i+0x16e>
 80079c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079cc:	e03a      	b.n	8007a44 <_printf_i+0xa8>
 80079ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079d2:	2b15      	cmp	r3, #21
 80079d4:	d8f6      	bhi.n	80079c4 <_printf_i+0x28>
 80079d6:	a101      	add	r1, pc, #4	; (adr r1, 80079dc <_printf_i+0x40>)
 80079d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079dc:	08007a35 	.word	0x08007a35
 80079e0:	08007a49 	.word	0x08007a49
 80079e4:	080079c5 	.word	0x080079c5
 80079e8:	080079c5 	.word	0x080079c5
 80079ec:	080079c5 	.word	0x080079c5
 80079f0:	080079c5 	.word	0x080079c5
 80079f4:	08007a49 	.word	0x08007a49
 80079f8:	080079c5 	.word	0x080079c5
 80079fc:	080079c5 	.word	0x080079c5
 8007a00:	080079c5 	.word	0x080079c5
 8007a04:	080079c5 	.word	0x080079c5
 8007a08:	08007b55 	.word	0x08007b55
 8007a0c:	08007a79 	.word	0x08007a79
 8007a10:	08007b37 	.word	0x08007b37
 8007a14:	080079c5 	.word	0x080079c5
 8007a18:	080079c5 	.word	0x080079c5
 8007a1c:	08007b77 	.word	0x08007b77
 8007a20:	080079c5 	.word	0x080079c5
 8007a24:	08007a79 	.word	0x08007a79
 8007a28:	080079c5 	.word	0x080079c5
 8007a2c:	080079c5 	.word	0x080079c5
 8007a30:	08007b3f 	.word	0x08007b3f
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	1d1a      	adds	r2, r3, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	602a      	str	r2, [r5, #0]
 8007a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0a3      	b.n	8007b90 <_printf_i+0x1f4>
 8007a48:	6820      	ldr	r0, [r4, #0]
 8007a4a:	6829      	ldr	r1, [r5, #0]
 8007a4c:	0606      	lsls	r6, r0, #24
 8007a4e:	f101 0304 	add.w	r3, r1, #4
 8007a52:	d50a      	bpl.n	8007a6a <_printf_i+0xce>
 8007a54:	680e      	ldr	r6, [r1, #0]
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	da03      	bge.n	8007a64 <_printf_i+0xc8>
 8007a5c:	232d      	movs	r3, #45	; 0x2d
 8007a5e:	4276      	negs	r6, r6
 8007a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a64:	485e      	ldr	r0, [pc, #376]	; (8007be0 <_printf_i+0x244>)
 8007a66:	230a      	movs	r3, #10
 8007a68:	e019      	b.n	8007a9e <_printf_i+0x102>
 8007a6a:	680e      	ldr	r6, [r1, #0]
 8007a6c:	602b      	str	r3, [r5, #0]
 8007a6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a72:	bf18      	it	ne
 8007a74:	b236      	sxthne	r6, r6
 8007a76:	e7ef      	b.n	8007a58 <_printf_i+0xbc>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	6820      	ldr	r0, [r4, #0]
 8007a7c:	1d19      	adds	r1, r3, #4
 8007a7e:	6029      	str	r1, [r5, #0]
 8007a80:	0601      	lsls	r1, r0, #24
 8007a82:	d501      	bpl.n	8007a88 <_printf_i+0xec>
 8007a84:	681e      	ldr	r6, [r3, #0]
 8007a86:	e002      	b.n	8007a8e <_printf_i+0xf2>
 8007a88:	0646      	lsls	r6, r0, #25
 8007a8a:	d5fb      	bpl.n	8007a84 <_printf_i+0xe8>
 8007a8c:	881e      	ldrh	r6, [r3, #0]
 8007a8e:	4854      	ldr	r0, [pc, #336]	; (8007be0 <_printf_i+0x244>)
 8007a90:	2f6f      	cmp	r7, #111	; 0x6f
 8007a92:	bf0c      	ite	eq
 8007a94:	2308      	moveq	r3, #8
 8007a96:	230a      	movne	r3, #10
 8007a98:	2100      	movs	r1, #0
 8007a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a9e:	6865      	ldr	r5, [r4, #4]
 8007aa0:	60a5      	str	r5, [r4, #8]
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	bfa2      	ittt	ge
 8007aa6:	6821      	ldrge	r1, [r4, #0]
 8007aa8:	f021 0104 	bicge.w	r1, r1, #4
 8007aac:	6021      	strge	r1, [r4, #0]
 8007aae:	b90e      	cbnz	r6, 8007ab4 <_printf_i+0x118>
 8007ab0:	2d00      	cmp	r5, #0
 8007ab2:	d04d      	beq.n	8007b50 <_printf_i+0x1b4>
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007aba:	fb03 6711 	mls	r7, r3, r1, r6
 8007abe:	5dc7      	ldrb	r7, [r0, r7]
 8007ac0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ac4:	4637      	mov	r7, r6
 8007ac6:	42bb      	cmp	r3, r7
 8007ac8:	460e      	mov	r6, r1
 8007aca:	d9f4      	bls.n	8007ab6 <_printf_i+0x11a>
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d10b      	bne.n	8007ae8 <_printf_i+0x14c>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	07de      	lsls	r6, r3, #31
 8007ad4:	d508      	bpl.n	8007ae8 <_printf_i+0x14c>
 8007ad6:	6923      	ldr	r3, [r4, #16]
 8007ad8:	6861      	ldr	r1, [r4, #4]
 8007ada:	4299      	cmp	r1, r3
 8007adc:	bfde      	ittt	le
 8007ade:	2330      	movle	r3, #48	; 0x30
 8007ae0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ae4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ae8:	1b52      	subs	r2, r2, r5
 8007aea:	6122      	str	r2, [r4, #16]
 8007aec:	f8cd a000 	str.w	sl, [sp]
 8007af0:	464b      	mov	r3, r9
 8007af2:	aa03      	add	r2, sp, #12
 8007af4:	4621      	mov	r1, r4
 8007af6:	4640      	mov	r0, r8
 8007af8:	f7ff fee2 	bl	80078c0 <_printf_common>
 8007afc:	3001      	adds	r0, #1
 8007afe:	d14c      	bne.n	8007b9a <_printf_i+0x1fe>
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	b004      	add	sp, #16
 8007b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0a:	4835      	ldr	r0, [pc, #212]	; (8007be0 <_printf_i+0x244>)
 8007b0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b10:	6829      	ldr	r1, [r5, #0]
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b18:	6029      	str	r1, [r5, #0]
 8007b1a:	061d      	lsls	r5, r3, #24
 8007b1c:	d514      	bpl.n	8007b48 <_printf_i+0x1ac>
 8007b1e:	07df      	lsls	r7, r3, #31
 8007b20:	bf44      	itt	mi
 8007b22:	f043 0320 	orrmi.w	r3, r3, #32
 8007b26:	6023      	strmi	r3, [r4, #0]
 8007b28:	b91e      	cbnz	r6, 8007b32 <_printf_i+0x196>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	f023 0320 	bic.w	r3, r3, #32
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	2310      	movs	r3, #16
 8007b34:	e7b0      	b.n	8007a98 <_printf_i+0xfc>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	f043 0320 	orr.w	r3, r3, #32
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	2378      	movs	r3, #120	; 0x78
 8007b40:	4828      	ldr	r0, [pc, #160]	; (8007be4 <_printf_i+0x248>)
 8007b42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b46:	e7e3      	b.n	8007b10 <_printf_i+0x174>
 8007b48:	0659      	lsls	r1, r3, #25
 8007b4a:	bf48      	it	mi
 8007b4c:	b2b6      	uxthmi	r6, r6
 8007b4e:	e7e6      	b.n	8007b1e <_printf_i+0x182>
 8007b50:	4615      	mov	r5, r2
 8007b52:	e7bb      	b.n	8007acc <_printf_i+0x130>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	6826      	ldr	r6, [r4, #0]
 8007b58:	6961      	ldr	r1, [r4, #20]
 8007b5a:	1d18      	adds	r0, r3, #4
 8007b5c:	6028      	str	r0, [r5, #0]
 8007b5e:	0635      	lsls	r5, r6, #24
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	d501      	bpl.n	8007b68 <_printf_i+0x1cc>
 8007b64:	6019      	str	r1, [r3, #0]
 8007b66:	e002      	b.n	8007b6e <_printf_i+0x1d2>
 8007b68:	0670      	lsls	r0, r6, #25
 8007b6a:	d5fb      	bpl.n	8007b64 <_printf_i+0x1c8>
 8007b6c:	8019      	strh	r1, [r3, #0]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	6123      	str	r3, [r4, #16]
 8007b72:	4615      	mov	r5, r2
 8007b74:	e7ba      	b.n	8007aec <_printf_i+0x150>
 8007b76:	682b      	ldr	r3, [r5, #0]
 8007b78:	1d1a      	adds	r2, r3, #4
 8007b7a:	602a      	str	r2, [r5, #0]
 8007b7c:	681d      	ldr	r5, [r3, #0]
 8007b7e:	6862      	ldr	r2, [r4, #4]
 8007b80:	2100      	movs	r1, #0
 8007b82:	4628      	mov	r0, r5
 8007b84:	f7f8 fb34 	bl	80001f0 <memchr>
 8007b88:	b108      	cbz	r0, 8007b8e <_printf_i+0x1f2>
 8007b8a:	1b40      	subs	r0, r0, r5
 8007b8c:	6060      	str	r0, [r4, #4]
 8007b8e:	6863      	ldr	r3, [r4, #4]
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	2300      	movs	r3, #0
 8007b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b98:	e7a8      	b.n	8007aec <_printf_i+0x150>
 8007b9a:	6923      	ldr	r3, [r4, #16]
 8007b9c:	462a      	mov	r2, r5
 8007b9e:	4649      	mov	r1, r9
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	47d0      	blx	sl
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d0ab      	beq.n	8007b00 <_printf_i+0x164>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	079b      	lsls	r3, r3, #30
 8007bac:	d413      	bmi.n	8007bd6 <_printf_i+0x23a>
 8007bae:	68e0      	ldr	r0, [r4, #12]
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	4298      	cmp	r0, r3
 8007bb4:	bfb8      	it	lt
 8007bb6:	4618      	movlt	r0, r3
 8007bb8:	e7a4      	b.n	8007b04 <_printf_i+0x168>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	47d0      	blx	sl
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d09b      	beq.n	8007b00 <_printf_i+0x164>
 8007bc8:	3501      	adds	r5, #1
 8007bca:	68e3      	ldr	r3, [r4, #12]
 8007bcc:	9903      	ldr	r1, [sp, #12]
 8007bce:	1a5b      	subs	r3, r3, r1
 8007bd0:	42ab      	cmp	r3, r5
 8007bd2:	dcf2      	bgt.n	8007bba <_printf_i+0x21e>
 8007bd4:	e7eb      	b.n	8007bae <_printf_i+0x212>
 8007bd6:	2500      	movs	r5, #0
 8007bd8:	f104 0619 	add.w	r6, r4, #25
 8007bdc:	e7f5      	b.n	8007bca <_printf_i+0x22e>
 8007bde:	bf00      	nop
 8007be0:	0800bb42 	.word	0x0800bb42
 8007be4:	0800bb53 	.word	0x0800bb53

08007be8 <_scanf_float>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	b087      	sub	sp, #28
 8007bee:	4617      	mov	r7, r2
 8007bf0:	9303      	str	r3, [sp, #12]
 8007bf2:	688b      	ldr	r3, [r1, #8]
 8007bf4:	1e5a      	subs	r2, r3, #1
 8007bf6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007bfa:	bf83      	ittte	hi
 8007bfc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007c00:	195b      	addhi	r3, r3, r5
 8007c02:	9302      	strhi	r3, [sp, #8]
 8007c04:	2300      	movls	r3, #0
 8007c06:	bf86      	itte	hi
 8007c08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007c0c:	608b      	strhi	r3, [r1, #8]
 8007c0e:	9302      	strls	r3, [sp, #8]
 8007c10:	680b      	ldr	r3, [r1, #0]
 8007c12:	468b      	mov	fp, r1
 8007c14:	2500      	movs	r5, #0
 8007c16:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007c1a:	f84b 3b1c 	str.w	r3, [fp], #28
 8007c1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c22:	4680      	mov	r8, r0
 8007c24:	460c      	mov	r4, r1
 8007c26:	465e      	mov	r6, fp
 8007c28:	46aa      	mov	sl, r5
 8007c2a:	46a9      	mov	r9, r5
 8007c2c:	9501      	str	r5, [sp, #4]
 8007c2e:	68a2      	ldr	r2, [r4, #8]
 8007c30:	b152      	cbz	r2, 8007c48 <_scanf_float+0x60>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b4e      	cmp	r3, #78	; 0x4e
 8007c38:	d864      	bhi.n	8007d04 <_scanf_float+0x11c>
 8007c3a:	2b40      	cmp	r3, #64	; 0x40
 8007c3c:	d83c      	bhi.n	8007cb8 <_scanf_float+0xd0>
 8007c3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007c42:	b2c8      	uxtb	r0, r1
 8007c44:	280e      	cmp	r0, #14
 8007c46:	d93a      	bls.n	8007cbe <_scanf_float+0xd6>
 8007c48:	f1b9 0f00 	cmp.w	r9, #0
 8007c4c:	d003      	beq.n	8007c56 <_scanf_float+0x6e>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c5a:	f1ba 0f01 	cmp.w	sl, #1
 8007c5e:	f200 8113 	bhi.w	8007e88 <_scanf_float+0x2a0>
 8007c62:	455e      	cmp	r6, fp
 8007c64:	f200 8105 	bhi.w	8007e72 <_scanf_float+0x28a>
 8007c68:	2501      	movs	r5, #1
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	b007      	add	sp, #28
 8007c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007c76:	2a0d      	cmp	r2, #13
 8007c78:	d8e6      	bhi.n	8007c48 <_scanf_float+0x60>
 8007c7a:	a101      	add	r1, pc, #4	; (adr r1, 8007c80 <_scanf_float+0x98>)
 8007c7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c80:	08007dbf 	.word	0x08007dbf
 8007c84:	08007c49 	.word	0x08007c49
 8007c88:	08007c49 	.word	0x08007c49
 8007c8c:	08007c49 	.word	0x08007c49
 8007c90:	08007e1f 	.word	0x08007e1f
 8007c94:	08007df7 	.word	0x08007df7
 8007c98:	08007c49 	.word	0x08007c49
 8007c9c:	08007c49 	.word	0x08007c49
 8007ca0:	08007dcd 	.word	0x08007dcd
 8007ca4:	08007c49 	.word	0x08007c49
 8007ca8:	08007c49 	.word	0x08007c49
 8007cac:	08007c49 	.word	0x08007c49
 8007cb0:	08007c49 	.word	0x08007c49
 8007cb4:	08007d85 	.word	0x08007d85
 8007cb8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007cbc:	e7db      	b.n	8007c76 <_scanf_float+0x8e>
 8007cbe:	290e      	cmp	r1, #14
 8007cc0:	d8c2      	bhi.n	8007c48 <_scanf_float+0x60>
 8007cc2:	a001      	add	r0, pc, #4	; (adr r0, 8007cc8 <_scanf_float+0xe0>)
 8007cc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007cc8:	08007d77 	.word	0x08007d77
 8007ccc:	08007c49 	.word	0x08007c49
 8007cd0:	08007d77 	.word	0x08007d77
 8007cd4:	08007e0b 	.word	0x08007e0b
 8007cd8:	08007c49 	.word	0x08007c49
 8007cdc:	08007d25 	.word	0x08007d25
 8007ce0:	08007d61 	.word	0x08007d61
 8007ce4:	08007d61 	.word	0x08007d61
 8007ce8:	08007d61 	.word	0x08007d61
 8007cec:	08007d61 	.word	0x08007d61
 8007cf0:	08007d61 	.word	0x08007d61
 8007cf4:	08007d61 	.word	0x08007d61
 8007cf8:	08007d61 	.word	0x08007d61
 8007cfc:	08007d61 	.word	0x08007d61
 8007d00:	08007d61 	.word	0x08007d61
 8007d04:	2b6e      	cmp	r3, #110	; 0x6e
 8007d06:	d809      	bhi.n	8007d1c <_scanf_float+0x134>
 8007d08:	2b60      	cmp	r3, #96	; 0x60
 8007d0a:	d8b2      	bhi.n	8007c72 <_scanf_float+0x8a>
 8007d0c:	2b54      	cmp	r3, #84	; 0x54
 8007d0e:	d077      	beq.n	8007e00 <_scanf_float+0x218>
 8007d10:	2b59      	cmp	r3, #89	; 0x59
 8007d12:	d199      	bne.n	8007c48 <_scanf_float+0x60>
 8007d14:	2d07      	cmp	r5, #7
 8007d16:	d197      	bne.n	8007c48 <_scanf_float+0x60>
 8007d18:	2508      	movs	r5, #8
 8007d1a:	e029      	b.n	8007d70 <_scanf_float+0x188>
 8007d1c:	2b74      	cmp	r3, #116	; 0x74
 8007d1e:	d06f      	beq.n	8007e00 <_scanf_float+0x218>
 8007d20:	2b79      	cmp	r3, #121	; 0x79
 8007d22:	e7f6      	b.n	8007d12 <_scanf_float+0x12a>
 8007d24:	6821      	ldr	r1, [r4, #0]
 8007d26:	05c8      	lsls	r0, r1, #23
 8007d28:	d51a      	bpl.n	8007d60 <_scanf_float+0x178>
 8007d2a:	9b02      	ldr	r3, [sp, #8]
 8007d2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007d30:	6021      	str	r1, [r4, #0]
 8007d32:	f109 0901 	add.w	r9, r9, #1
 8007d36:	b11b      	cbz	r3, 8007d40 <_scanf_float+0x158>
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	3201      	adds	r2, #1
 8007d3c:	9302      	str	r3, [sp, #8]
 8007d3e:	60a2      	str	r2, [r4, #8]
 8007d40:	68a3      	ldr	r3, [r4, #8]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	60a3      	str	r3, [r4, #8]
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	607b      	str	r3, [r7, #4]
 8007d54:	f340 8084 	ble.w	8007e60 <_scanf_float+0x278>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	603b      	str	r3, [r7, #0]
 8007d5e:	e766      	b.n	8007c2e <_scanf_float+0x46>
 8007d60:	eb1a 0f05 	cmn.w	sl, r5
 8007d64:	f47f af70 	bne.w	8007c48 <_scanf_float+0x60>
 8007d68:	6822      	ldr	r2, [r4, #0]
 8007d6a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007d6e:	6022      	str	r2, [r4, #0]
 8007d70:	f806 3b01 	strb.w	r3, [r6], #1
 8007d74:	e7e4      	b.n	8007d40 <_scanf_float+0x158>
 8007d76:	6822      	ldr	r2, [r4, #0]
 8007d78:	0610      	lsls	r0, r2, #24
 8007d7a:	f57f af65 	bpl.w	8007c48 <_scanf_float+0x60>
 8007d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d82:	e7f4      	b.n	8007d6e <_scanf_float+0x186>
 8007d84:	f1ba 0f00 	cmp.w	sl, #0
 8007d88:	d10e      	bne.n	8007da8 <_scanf_float+0x1c0>
 8007d8a:	f1b9 0f00 	cmp.w	r9, #0
 8007d8e:	d10e      	bne.n	8007dae <_scanf_float+0x1c6>
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007d96:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007d9a:	d108      	bne.n	8007dae <_scanf_float+0x1c6>
 8007d9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007da0:	6022      	str	r2, [r4, #0]
 8007da2:	f04f 0a01 	mov.w	sl, #1
 8007da6:	e7e3      	b.n	8007d70 <_scanf_float+0x188>
 8007da8:	f1ba 0f02 	cmp.w	sl, #2
 8007dac:	d055      	beq.n	8007e5a <_scanf_float+0x272>
 8007dae:	2d01      	cmp	r5, #1
 8007db0:	d002      	beq.n	8007db8 <_scanf_float+0x1d0>
 8007db2:	2d04      	cmp	r5, #4
 8007db4:	f47f af48 	bne.w	8007c48 <_scanf_float+0x60>
 8007db8:	3501      	adds	r5, #1
 8007dba:	b2ed      	uxtb	r5, r5
 8007dbc:	e7d8      	b.n	8007d70 <_scanf_float+0x188>
 8007dbe:	f1ba 0f01 	cmp.w	sl, #1
 8007dc2:	f47f af41 	bne.w	8007c48 <_scanf_float+0x60>
 8007dc6:	f04f 0a02 	mov.w	sl, #2
 8007dca:	e7d1      	b.n	8007d70 <_scanf_float+0x188>
 8007dcc:	b97d      	cbnz	r5, 8007dee <_scanf_float+0x206>
 8007dce:	f1b9 0f00 	cmp.w	r9, #0
 8007dd2:	f47f af3c 	bne.w	8007c4e <_scanf_float+0x66>
 8007dd6:	6822      	ldr	r2, [r4, #0]
 8007dd8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007ddc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007de0:	f47f af39 	bne.w	8007c56 <_scanf_float+0x6e>
 8007de4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007de8:	6022      	str	r2, [r4, #0]
 8007dea:	2501      	movs	r5, #1
 8007dec:	e7c0      	b.n	8007d70 <_scanf_float+0x188>
 8007dee:	2d03      	cmp	r5, #3
 8007df0:	d0e2      	beq.n	8007db8 <_scanf_float+0x1d0>
 8007df2:	2d05      	cmp	r5, #5
 8007df4:	e7de      	b.n	8007db4 <_scanf_float+0x1cc>
 8007df6:	2d02      	cmp	r5, #2
 8007df8:	f47f af26 	bne.w	8007c48 <_scanf_float+0x60>
 8007dfc:	2503      	movs	r5, #3
 8007dfe:	e7b7      	b.n	8007d70 <_scanf_float+0x188>
 8007e00:	2d06      	cmp	r5, #6
 8007e02:	f47f af21 	bne.w	8007c48 <_scanf_float+0x60>
 8007e06:	2507      	movs	r5, #7
 8007e08:	e7b2      	b.n	8007d70 <_scanf_float+0x188>
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	0591      	lsls	r1, r2, #22
 8007e0e:	f57f af1b 	bpl.w	8007c48 <_scanf_float+0x60>
 8007e12:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e1c:	e7a8      	b.n	8007d70 <_scanf_float+0x188>
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007e24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007e28:	d006      	beq.n	8007e38 <_scanf_float+0x250>
 8007e2a:	0550      	lsls	r0, r2, #21
 8007e2c:	f57f af0c 	bpl.w	8007c48 <_scanf_float+0x60>
 8007e30:	f1b9 0f00 	cmp.w	r9, #0
 8007e34:	f43f af0f 	beq.w	8007c56 <_scanf_float+0x6e>
 8007e38:	0591      	lsls	r1, r2, #22
 8007e3a:	bf58      	it	pl
 8007e3c:	9901      	ldrpl	r1, [sp, #4]
 8007e3e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e42:	bf58      	it	pl
 8007e44:	eba9 0101 	subpl.w	r1, r9, r1
 8007e48:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007e4c:	bf58      	it	pl
 8007e4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e52:	6022      	str	r2, [r4, #0]
 8007e54:	f04f 0900 	mov.w	r9, #0
 8007e58:	e78a      	b.n	8007d70 <_scanf_float+0x188>
 8007e5a:	f04f 0a03 	mov.w	sl, #3
 8007e5e:	e787      	b.n	8007d70 <_scanf_float+0x188>
 8007e60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e64:	4639      	mov	r1, r7
 8007e66:	4640      	mov	r0, r8
 8007e68:	4798      	blx	r3
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	f43f aedf 	beq.w	8007c2e <_scanf_float+0x46>
 8007e70:	e6ea      	b.n	8007c48 <_scanf_float+0x60>
 8007e72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e7a:	463a      	mov	r2, r7
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	4798      	blx	r3
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	6123      	str	r3, [r4, #16]
 8007e86:	e6ec      	b.n	8007c62 <_scanf_float+0x7a>
 8007e88:	1e6b      	subs	r3, r5, #1
 8007e8a:	2b06      	cmp	r3, #6
 8007e8c:	d825      	bhi.n	8007eda <_scanf_float+0x2f2>
 8007e8e:	2d02      	cmp	r5, #2
 8007e90:	d836      	bhi.n	8007f00 <_scanf_float+0x318>
 8007e92:	455e      	cmp	r6, fp
 8007e94:	f67f aee8 	bls.w	8007c68 <_scanf_float+0x80>
 8007e98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e9c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ea0:	463a      	mov	r2, r7
 8007ea2:	4640      	mov	r0, r8
 8007ea4:	4798      	blx	r3
 8007ea6:	6923      	ldr	r3, [r4, #16]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	6123      	str	r3, [r4, #16]
 8007eac:	e7f1      	b.n	8007e92 <_scanf_float+0x2aa>
 8007eae:	9802      	ldr	r0, [sp, #8]
 8007eb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eb4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007eb8:	9002      	str	r0, [sp, #8]
 8007eba:	463a      	mov	r2, r7
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4798      	blx	r3
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	6123      	str	r3, [r4, #16]
 8007ec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eca:	fa5f fa8a 	uxtb.w	sl, sl
 8007ece:	f1ba 0f02 	cmp.w	sl, #2
 8007ed2:	d1ec      	bne.n	8007eae <_scanf_float+0x2c6>
 8007ed4:	3d03      	subs	r5, #3
 8007ed6:	b2ed      	uxtb	r5, r5
 8007ed8:	1b76      	subs	r6, r6, r5
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	05da      	lsls	r2, r3, #23
 8007ede:	d52f      	bpl.n	8007f40 <_scanf_float+0x358>
 8007ee0:	055b      	lsls	r3, r3, #21
 8007ee2:	d510      	bpl.n	8007f06 <_scanf_float+0x31e>
 8007ee4:	455e      	cmp	r6, fp
 8007ee6:	f67f aebf 	bls.w	8007c68 <_scanf_float+0x80>
 8007eea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ef2:	463a      	mov	r2, r7
 8007ef4:	4640      	mov	r0, r8
 8007ef6:	4798      	blx	r3
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	6123      	str	r3, [r4, #16]
 8007efe:	e7f1      	b.n	8007ee4 <_scanf_float+0x2fc>
 8007f00:	46aa      	mov	sl, r5
 8007f02:	9602      	str	r6, [sp, #8]
 8007f04:	e7df      	b.n	8007ec6 <_scanf_float+0x2de>
 8007f06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f0a:	6923      	ldr	r3, [r4, #16]
 8007f0c:	2965      	cmp	r1, #101	; 0x65
 8007f0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f12:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	d00c      	beq.n	8007f34 <_scanf_float+0x34c>
 8007f1a:	2945      	cmp	r1, #69	; 0x45
 8007f1c:	d00a      	beq.n	8007f34 <_scanf_float+0x34c>
 8007f1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f22:	463a      	mov	r2, r7
 8007f24:	4640      	mov	r0, r8
 8007f26:	4798      	blx	r3
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	1eb5      	subs	r5, r6, #2
 8007f32:	6123      	str	r3, [r4, #16]
 8007f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f38:	463a      	mov	r2, r7
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	4798      	blx	r3
 8007f3e:	462e      	mov	r6, r5
 8007f40:	6825      	ldr	r5, [r4, #0]
 8007f42:	f015 0510 	ands.w	r5, r5, #16
 8007f46:	d159      	bne.n	8007ffc <_scanf_float+0x414>
 8007f48:	7035      	strb	r5, [r6, #0]
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f54:	d11b      	bne.n	8007f8e <_scanf_float+0x3a6>
 8007f56:	9b01      	ldr	r3, [sp, #4]
 8007f58:	454b      	cmp	r3, r9
 8007f5a:	eba3 0209 	sub.w	r2, r3, r9
 8007f5e:	d123      	bne.n	8007fa8 <_scanf_float+0x3c0>
 8007f60:	2200      	movs	r2, #0
 8007f62:	4659      	mov	r1, fp
 8007f64:	4640      	mov	r0, r8
 8007f66:	f000 fedd 	bl	8008d24 <_strtod_r>
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	f012 0f02 	tst.w	r2, #2
 8007f72:	ec57 6b10 	vmov	r6, r7, d0
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	d021      	beq.n	8007fbe <_scanf_float+0x3d6>
 8007f7a:	9903      	ldr	r1, [sp, #12]
 8007f7c:	1d1a      	adds	r2, r3, #4
 8007f7e:	600a      	str	r2, [r1, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	e9c3 6700 	strd	r6, r7, [r3]
 8007f86:	68e3      	ldr	r3, [r4, #12]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	60e3      	str	r3, [r4, #12]
 8007f8c:	e66d      	b.n	8007c6a <_scanf_float+0x82>
 8007f8e:	9b04      	ldr	r3, [sp, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0e5      	beq.n	8007f60 <_scanf_float+0x378>
 8007f94:	9905      	ldr	r1, [sp, #20]
 8007f96:	230a      	movs	r3, #10
 8007f98:	462a      	mov	r2, r5
 8007f9a:	3101      	adds	r1, #1
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	f000 ff49 	bl	8008e34 <_strtol_r>
 8007fa2:	9b04      	ldr	r3, [sp, #16]
 8007fa4:	9e05      	ldr	r6, [sp, #20]
 8007fa6:	1ac2      	subs	r2, r0, r3
 8007fa8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007fac:	429e      	cmp	r6, r3
 8007fae:	bf28      	it	cs
 8007fb0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007fb4:	4912      	ldr	r1, [pc, #72]	; (8008000 <_scanf_float+0x418>)
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f000 f870 	bl	800809c <siprintf>
 8007fbc:	e7d0      	b.n	8007f60 <_scanf_float+0x378>
 8007fbe:	9903      	ldr	r1, [sp, #12]
 8007fc0:	f012 0f04 	tst.w	r2, #4
 8007fc4:	f103 0204 	add.w	r2, r3, #4
 8007fc8:	600a      	str	r2, [r1, #0]
 8007fca:	d1d9      	bne.n	8007f80 <_scanf_float+0x398>
 8007fcc:	f8d3 8000 	ldr.w	r8, [r3]
 8007fd0:	ee10 2a10 	vmov	r2, s0
 8007fd4:	ee10 0a10 	vmov	r0, s0
 8007fd8:	463b      	mov	r3, r7
 8007fda:	4639      	mov	r1, r7
 8007fdc:	f7f8 fdae 	bl	8000b3c <__aeabi_dcmpun>
 8007fe0:	b128      	cbz	r0, 8007fee <_scanf_float+0x406>
 8007fe2:	4808      	ldr	r0, [pc, #32]	; (8008004 <_scanf_float+0x41c>)
 8007fe4:	f000 f820 	bl	8008028 <nanf>
 8007fe8:	ed88 0a00 	vstr	s0, [r8]
 8007fec:	e7cb      	b.n	8007f86 <_scanf_float+0x39e>
 8007fee:	4630      	mov	r0, r6
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	f7f8 fe01 	bl	8000bf8 <__aeabi_d2f>
 8007ff6:	f8c8 0000 	str.w	r0, [r8]
 8007ffa:	e7c4      	b.n	8007f86 <_scanf_float+0x39e>
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	e634      	b.n	8007c6a <_scanf_float+0x82>
 8008000:	0800bb64 	.word	0x0800bb64
 8008004:	0800bf70 	.word	0x0800bf70

08008008 <_sbrk_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4d06      	ldr	r5, [pc, #24]	; (8008024 <_sbrk_r+0x1c>)
 800800c:	2300      	movs	r3, #0
 800800e:	4604      	mov	r4, r0
 8008010:	4608      	mov	r0, r1
 8008012:	602b      	str	r3, [r5, #0]
 8008014:	f7fa f878 	bl	8002108 <_sbrk>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d102      	bne.n	8008022 <_sbrk_r+0x1a>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	b103      	cbz	r3, 8008022 <_sbrk_r+0x1a>
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	20000504 	.word	0x20000504

08008028 <nanf>:
 8008028:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008030 <nanf+0x8>
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	7fc00000 	.word	0x7fc00000

08008034 <sniprintf>:
 8008034:	b40c      	push	{r2, r3}
 8008036:	b530      	push	{r4, r5, lr}
 8008038:	4b17      	ldr	r3, [pc, #92]	; (8008098 <sniprintf+0x64>)
 800803a:	1e0c      	subs	r4, r1, #0
 800803c:	681d      	ldr	r5, [r3, #0]
 800803e:	b09d      	sub	sp, #116	; 0x74
 8008040:	da08      	bge.n	8008054 <sniprintf+0x20>
 8008042:	238b      	movs	r3, #139	; 0x8b
 8008044:	602b      	str	r3, [r5, #0]
 8008046:	f04f 30ff 	mov.w	r0, #4294967295
 800804a:	b01d      	add	sp, #116	; 0x74
 800804c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008050:	b002      	add	sp, #8
 8008052:	4770      	bx	lr
 8008054:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008058:	f8ad 3014 	strh.w	r3, [sp, #20]
 800805c:	bf14      	ite	ne
 800805e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008062:	4623      	moveq	r3, r4
 8008064:	9304      	str	r3, [sp, #16]
 8008066:	9307      	str	r3, [sp, #28]
 8008068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800806c:	9002      	str	r0, [sp, #8]
 800806e:	9006      	str	r0, [sp, #24]
 8008070:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008074:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008076:	ab21      	add	r3, sp, #132	; 0x84
 8008078:	a902      	add	r1, sp, #8
 800807a:	4628      	mov	r0, r5
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	f002 fe27 	bl	800acd0 <_svfiprintf_r>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	bfbc      	itt	lt
 8008086:	238b      	movlt	r3, #139	; 0x8b
 8008088:	602b      	strlt	r3, [r5, #0]
 800808a:	2c00      	cmp	r4, #0
 800808c:	d0dd      	beq.n	800804a <sniprintf+0x16>
 800808e:	9b02      	ldr	r3, [sp, #8]
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	e7d9      	b.n	800804a <sniprintf+0x16>
 8008096:	bf00      	nop
 8008098:	2000000c 	.word	0x2000000c

0800809c <siprintf>:
 800809c:	b40e      	push	{r1, r2, r3}
 800809e:	b500      	push	{lr}
 80080a0:	b09c      	sub	sp, #112	; 0x70
 80080a2:	ab1d      	add	r3, sp, #116	; 0x74
 80080a4:	9002      	str	r0, [sp, #8]
 80080a6:	9006      	str	r0, [sp, #24]
 80080a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080ac:	4809      	ldr	r0, [pc, #36]	; (80080d4 <siprintf+0x38>)
 80080ae:	9107      	str	r1, [sp, #28]
 80080b0:	9104      	str	r1, [sp, #16]
 80080b2:	4909      	ldr	r1, [pc, #36]	; (80080d8 <siprintf+0x3c>)
 80080b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b8:	9105      	str	r1, [sp, #20]
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	a902      	add	r1, sp, #8
 80080c0:	f002 fe06 	bl	800acd0 <_svfiprintf_r>
 80080c4:	9b02      	ldr	r3, [sp, #8]
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	b01c      	add	sp, #112	; 0x70
 80080cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80080d0:	b003      	add	sp, #12
 80080d2:	4770      	bx	lr
 80080d4:	2000000c 	.word	0x2000000c
 80080d8:	ffff0208 	.word	0xffff0208

080080dc <sulp>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4604      	mov	r4, r0
 80080e0:	460d      	mov	r5, r1
 80080e2:	ec45 4b10 	vmov	d0, r4, r5
 80080e6:	4616      	mov	r6, r2
 80080e8:	f002 fc32 	bl	800a950 <__ulp>
 80080ec:	ec51 0b10 	vmov	r0, r1, d0
 80080f0:	b17e      	cbz	r6, 8008112 <sulp+0x36>
 80080f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	dd09      	ble.n	8008112 <sulp+0x36>
 80080fe:	051b      	lsls	r3, r3, #20
 8008100:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008104:	2400      	movs	r4, #0
 8008106:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800810a:	4622      	mov	r2, r4
 800810c:	462b      	mov	r3, r5
 800810e:	f7f8 fa7b 	bl	8000608 <__aeabi_dmul>
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	0000      	movs	r0, r0
	...

08008118 <_strtod_l>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	ed2d 8b02 	vpush	{d8}
 8008120:	b09d      	sub	sp, #116	; 0x74
 8008122:	461f      	mov	r7, r3
 8008124:	2300      	movs	r3, #0
 8008126:	9318      	str	r3, [sp, #96]	; 0x60
 8008128:	4ba2      	ldr	r3, [pc, #648]	; (80083b4 <_strtod_l+0x29c>)
 800812a:	9213      	str	r2, [sp, #76]	; 0x4c
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	9305      	str	r3, [sp, #20]
 8008130:	4604      	mov	r4, r0
 8008132:	4618      	mov	r0, r3
 8008134:	4688      	mov	r8, r1
 8008136:	f7f8 f853 	bl	80001e0 <strlen>
 800813a:	f04f 0a00 	mov.w	sl, #0
 800813e:	4605      	mov	r5, r0
 8008140:	f04f 0b00 	mov.w	fp, #0
 8008144:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800814a:	781a      	ldrb	r2, [r3, #0]
 800814c:	2a2b      	cmp	r2, #43	; 0x2b
 800814e:	d04e      	beq.n	80081ee <_strtod_l+0xd6>
 8008150:	d83b      	bhi.n	80081ca <_strtod_l+0xb2>
 8008152:	2a0d      	cmp	r2, #13
 8008154:	d834      	bhi.n	80081c0 <_strtod_l+0xa8>
 8008156:	2a08      	cmp	r2, #8
 8008158:	d834      	bhi.n	80081c4 <_strtod_l+0xac>
 800815a:	2a00      	cmp	r2, #0
 800815c:	d03e      	beq.n	80081dc <_strtod_l+0xc4>
 800815e:	2300      	movs	r3, #0
 8008160:	930a      	str	r3, [sp, #40]	; 0x28
 8008162:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008164:	7833      	ldrb	r3, [r6, #0]
 8008166:	2b30      	cmp	r3, #48	; 0x30
 8008168:	f040 80b0 	bne.w	80082cc <_strtod_l+0x1b4>
 800816c:	7873      	ldrb	r3, [r6, #1]
 800816e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008172:	2b58      	cmp	r3, #88	; 0x58
 8008174:	d168      	bne.n	8008248 <_strtod_l+0x130>
 8008176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	ab18      	add	r3, sp, #96	; 0x60
 800817c:	9702      	str	r7, [sp, #8]
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	4a8d      	ldr	r2, [pc, #564]	; (80083b8 <_strtod_l+0x2a0>)
 8008182:	ab19      	add	r3, sp, #100	; 0x64
 8008184:	a917      	add	r1, sp, #92	; 0x5c
 8008186:	4620      	mov	r0, r4
 8008188:	f001 fd38 	bl	8009bfc <__gethex>
 800818c:	f010 0707 	ands.w	r7, r0, #7
 8008190:	4605      	mov	r5, r0
 8008192:	d005      	beq.n	80081a0 <_strtod_l+0x88>
 8008194:	2f06      	cmp	r7, #6
 8008196:	d12c      	bne.n	80081f2 <_strtod_l+0xda>
 8008198:	3601      	adds	r6, #1
 800819a:	2300      	movs	r3, #0
 800819c:	9617      	str	r6, [sp, #92]	; 0x5c
 800819e:	930a      	str	r3, [sp, #40]	; 0x28
 80081a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f040 8590 	bne.w	8008cc8 <_strtod_l+0xbb0>
 80081a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081aa:	b1eb      	cbz	r3, 80081e8 <_strtod_l+0xd0>
 80081ac:	4652      	mov	r2, sl
 80081ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80081b2:	ec43 2b10 	vmov	d0, r2, r3
 80081b6:	b01d      	add	sp, #116	; 0x74
 80081b8:	ecbd 8b02 	vpop	{d8}
 80081bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c0:	2a20      	cmp	r2, #32
 80081c2:	d1cc      	bne.n	800815e <_strtod_l+0x46>
 80081c4:	3301      	adds	r3, #1
 80081c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80081c8:	e7be      	b.n	8008148 <_strtod_l+0x30>
 80081ca:	2a2d      	cmp	r2, #45	; 0x2d
 80081cc:	d1c7      	bne.n	800815e <_strtod_l+0x46>
 80081ce:	2201      	movs	r2, #1
 80081d0:	920a      	str	r2, [sp, #40]	; 0x28
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1c2      	bne.n	8008162 <_strtod_l+0x4a>
 80081dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f040 856e 	bne.w	8008cc4 <_strtod_l+0xbac>
 80081e8:	4652      	mov	r2, sl
 80081ea:	465b      	mov	r3, fp
 80081ec:	e7e1      	b.n	80081b2 <_strtod_l+0x9a>
 80081ee:	2200      	movs	r2, #0
 80081f0:	e7ee      	b.n	80081d0 <_strtod_l+0xb8>
 80081f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80081f4:	b13a      	cbz	r2, 8008206 <_strtod_l+0xee>
 80081f6:	2135      	movs	r1, #53	; 0x35
 80081f8:	a81a      	add	r0, sp, #104	; 0x68
 80081fa:	f002 fcb4 	bl	800ab66 <__copybits>
 80081fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008200:	4620      	mov	r0, r4
 8008202:	f002 f873 	bl	800a2ec <_Bfree>
 8008206:	3f01      	subs	r7, #1
 8008208:	2f04      	cmp	r7, #4
 800820a:	d806      	bhi.n	800821a <_strtod_l+0x102>
 800820c:	e8df f007 	tbb	[pc, r7]
 8008210:	1714030a 	.word	0x1714030a
 8008214:	0a          	.byte	0x0a
 8008215:	00          	.byte	0x00
 8008216:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800821a:	0728      	lsls	r0, r5, #28
 800821c:	d5c0      	bpl.n	80081a0 <_strtod_l+0x88>
 800821e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008222:	e7bd      	b.n	80081a0 <_strtod_l+0x88>
 8008224:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008228:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800822a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800822e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008232:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008236:	e7f0      	b.n	800821a <_strtod_l+0x102>
 8008238:	f8df b180 	ldr.w	fp, [pc, #384]	; 80083bc <_strtod_l+0x2a4>
 800823c:	e7ed      	b.n	800821a <_strtod_l+0x102>
 800823e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008242:	f04f 3aff 	mov.w	sl, #4294967295
 8008246:	e7e8      	b.n	800821a <_strtod_l+0x102>
 8008248:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	9217      	str	r2, [sp, #92]	; 0x5c
 800824e:	785b      	ldrb	r3, [r3, #1]
 8008250:	2b30      	cmp	r3, #48	; 0x30
 8008252:	d0f9      	beq.n	8008248 <_strtod_l+0x130>
 8008254:	2b00      	cmp	r3, #0
 8008256:	d0a3      	beq.n	80081a0 <_strtod_l+0x88>
 8008258:	2301      	movs	r3, #1
 800825a:	f04f 0900 	mov.w	r9, #0
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008262:	9308      	str	r3, [sp, #32]
 8008264:	f8cd 901c 	str.w	r9, [sp, #28]
 8008268:	464f      	mov	r7, r9
 800826a:	220a      	movs	r2, #10
 800826c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800826e:	7806      	ldrb	r6, [r0, #0]
 8008270:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008274:	b2d9      	uxtb	r1, r3
 8008276:	2909      	cmp	r1, #9
 8008278:	d92a      	bls.n	80082d0 <_strtod_l+0x1b8>
 800827a:	9905      	ldr	r1, [sp, #20]
 800827c:	462a      	mov	r2, r5
 800827e:	f002 fe2f 	bl	800aee0 <strncmp>
 8008282:	b398      	cbz	r0, 80082ec <_strtod_l+0x1d4>
 8008284:	2000      	movs	r0, #0
 8008286:	4632      	mov	r2, r6
 8008288:	463d      	mov	r5, r7
 800828a:	9005      	str	r0, [sp, #20]
 800828c:	4603      	mov	r3, r0
 800828e:	2a65      	cmp	r2, #101	; 0x65
 8008290:	d001      	beq.n	8008296 <_strtod_l+0x17e>
 8008292:	2a45      	cmp	r2, #69	; 0x45
 8008294:	d118      	bne.n	80082c8 <_strtod_l+0x1b0>
 8008296:	b91d      	cbnz	r5, 80082a0 <_strtod_l+0x188>
 8008298:	9a04      	ldr	r2, [sp, #16]
 800829a:	4302      	orrs	r2, r0
 800829c:	d09e      	beq.n	80081dc <_strtod_l+0xc4>
 800829e:	2500      	movs	r5, #0
 80082a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80082a4:	f108 0201 	add.w	r2, r8, #1
 80082a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80082aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80082ae:	2a2b      	cmp	r2, #43	; 0x2b
 80082b0:	d075      	beq.n	800839e <_strtod_l+0x286>
 80082b2:	2a2d      	cmp	r2, #45	; 0x2d
 80082b4:	d07b      	beq.n	80083ae <_strtod_l+0x296>
 80082b6:	f04f 0c00 	mov.w	ip, #0
 80082ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80082be:	2909      	cmp	r1, #9
 80082c0:	f240 8082 	bls.w	80083c8 <_strtod_l+0x2b0>
 80082c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80082c8:	2600      	movs	r6, #0
 80082ca:	e09d      	b.n	8008408 <_strtod_l+0x2f0>
 80082cc:	2300      	movs	r3, #0
 80082ce:	e7c4      	b.n	800825a <_strtod_l+0x142>
 80082d0:	2f08      	cmp	r7, #8
 80082d2:	bfd8      	it	le
 80082d4:	9907      	ldrle	r1, [sp, #28]
 80082d6:	f100 0001 	add.w	r0, r0, #1
 80082da:	bfda      	itte	le
 80082dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80082e0:	9307      	strle	r3, [sp, #28]
 80082e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80082e6:	3701      	adds	r7, #1
 80082e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80082ea:	e7bf      	b.n	800826c <_strtod_l+0x154>
 80082ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082ee:	195a      	adds	r2, r3, r5
 80082f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80082f2:	5d5a      	ldrb	r2, [r3, r5]
 80082f4:	2f00      	cmp	r7, #0
 80082f6:	d037      	beq.n	8008368 <_strtod_l+0x250>
 80082f8:	9005      	str	r0, [sp, #20]
 80082fa:	463d      	mov	r5, r7
 80082fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008300:	2b09      	cmp	r3, #9
 8008302:	d912      	bls.n	800832a <_strtod_l+0x212>
 8008304:	2301      	movs	r3, #1
 8008306:	e7c2      	b.n	800828e <_strtod_l+0x176>
 8008308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	9217      	str	r2, [sp, #92]	; 0x5c
 800830e:	785a      	ldrb	r2, [r3, #1]
 8008310:	3001      	adds	r0, #1
 8008312:	2a30      	cmp	r2, #48	; 0x30
 8008314:	d0f8      	beq.n	8008308 <_strtod_l+0x1f0>
 8008316:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800831a:	2b08      	cmp	r3, #8
 800831c:	f200 84d9 	bhi.w	8008cd2 <_strtod_l+0xbba>
 8008320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008322:	9005      	str	r0, [sp, #20]
 8008324:	2000      	movs	r0, #0
 8008326:	9308      	str	r3, [sp, #32]
 8008328:	4605      	mov	r5, r0
 800832a:	3a30      	subs	r2, #48	; 0x30
 800832c:	f100 0301 	add.w	r3, r0, #1
 8008330:	d014      	beq.n	800835c <_strtod_l+0x244>
 8008332:	9905      	ldr	r1, [sp, #20]
 8008334:	4419      	add	r1, r3
 8008336:	9105      	str	r1, [sp, #20]
 8008338:	462b      	mov	r3, r5
 800833a:	eb00 0e05 	add.w	lr, r0, r5
 800833e:	210a      	movs	r1, #10
 8008340:	4573      	cmp	r3, lr
 8008342:	d113      	bne.n	800836c <_strtod_l+0x254>
 8008344:	182b      	adds	r3, r5, r0
 8008346:	2b08      	cmp	r3, #8
 8008348:	f105 0501 	add.w	r5, r5, #1
 800834c:	4405      	add	r5, r0
 800834e:	dc1c      	bgt.n	800838a <_strtod_l+0x272>
 8008350:	9907      	ldr	r1, [sp, #28]
 8008352:	230a      	movs	r3, #10
 8008354:	fb03 2301 	mla	r3, r3, r1, r2
 8008358:	9307      	str	r3, [sp, #28]
 800835a:	2300      	movs	r3, #0
 800835c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800835e:	1c51      	adds	r1, r2, #1
 8008360:	9117      	str	r1, [sp, #92]	; 0x5c
 8008362:	7852      	ldrb	r2, [r2, #1]
 8008364:	4618      	mov	r0, r3
 8008366:	e7c9      	b.n	80082fc <_strtod_l+0x1e4>
 8008368:	4638      	mov	r0, r7
 800836a:	e7d2      	b.n	8008312 <_strtod_l+0x1fa>
 800836c:	2b08      	cmp	r3, #8
 800836e:	dc04      	bgt.n	800837a <_strtod_l+0x262>
 8008370:	9e07      	ldr	r6, [sp, #28]
 8008372:	434e      	muls	r6, r1
 8008374:	9607      	str	r6, [sp, #28]
 8008376:	3301      	adds	r3, #1
 8008378:	e7e2      	b.n	8008340 <_strtod_l+0x228>
 800837a:	f103 0c01 	add.w	ip, r3, #1
 800837e:	f1bc 0f10 	cmp.w	ip, #16
 8008382:	bfd8      	it	le
 8008384:	fb01 f909 	mulle.w	r9, r1, r9
 8008388:	e7f5      	b.n	8008376 <_strtod_l+0x25e>
 800838a:	2d10      	cmp	r5, #16
 800838c:	bfdc      	itt	le
 800838e:	230a      	movle	r3, #10
 8008390:	fb03 2909 	mlale	r9, r3, r9, r2
 8008394:	e7e1      	b.n	800835a <_strtod_l+0x242>
 8008396:	2300      	movs	r3, #0
 8008398:	9305      	str	r3, [sp, #20]
 800839a:	2301      	movs	r3, #1
 800839c:	e77c      	b.n	8008298 <_strtod_l+0x180>
 800839e:	f04f 0c00 	mov.w	ip, #0
 80083a2:	f108 0202 	add.w	r2, r8, #2
 80083a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80083a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80083ac:	e785      	b.n	80082ba <_strtod_l+0x1a2>
 80083ae:	f04f 0c01 	mov.w	ip, #1
 80083b2:	e7f6      	b.n	80083a2 <_strtod_l+0x28a>
 80083b4:	0800bdb8 	.word	0x0800bdb8
 80083b8:	0800bb6c 	.word	0x0800bb6c
 80083bc:	7ff00000 	.word	0x7ff00000
 80083c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083c2:	1c51      	adds	r1, r2, #1
 80083c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80083c6:	7852      	ldrb	r2, [r2, #1]
 80083c8:	2a30      	cmp	r2, #48	; 0x30
 80083ca:	d0f9      	beq.n	80083c0 <_strtod_l+0x2a8>
 80083cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80083d0:	2908      	cmp	r1, #8
 80083d2:	f63f af79 	bhi.w	80082c8 <_strtod_l+0x1b0>
 80083d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80083da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083dc:	9206      	str	r2, [sp, #24]
 80083de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083e0:	1c51      	adds	r1, r2, #1
 80083e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80083e4:	7852      	ldrb	r2, [r2, #1]
 80083e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80083ea:	2e09      	cmp	r6, #9
 80083ec:	d937      	bls.n	800845e <_strtod_l+0x346>
 80083ee:	9e06      	ldr	r6, [sp, #24]
 80083f0:	1b89      	subs	r1, r1, r6
 80083f2:	2908      	cmp	r1, #8
 80083f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80083f8:	dc02      	bgt.n	8008400 <_strtod_l+0x2e8>
 80083fa:	4576      	cmp	r6, lr
 80083fc:	bfa8      	it	ge
 80083fe:	4676      	movge	r6, lr
 8008400:	f1bc 0f00 	cmp.w	ip, #0
 8008404:	d000      	beq.n	8008408 <_strtod_l+0x2f0>
 8008406:	4276      	negs	r6, r6
 8008408:	2d00      	cmp	r5, #0
 800840a:	d14d      	bne.n	80084a8 <_strtod_l+0x390>
 800840c:	9904      	ldr	r1, [sp, #16]
 800840e:	4301      	orrs	r1, r0
 8008410:	f47f aec6 	bne.w	80081a0 <_strtod_l+0x88>
 8008414:	2b00      	cmp	r3, #0
 8008416:	f47f aee1 	bne.w	80081dc <_strtod_l+0xc4>
 800841a:	2a69      	cmp	r2, #105	; 0x69
 800841c:	d027      	beq.n	800846e <_strtod_l+0x356>
 800841e:	dc24      	bgt.n	800846a <_strtod_l+0x352>
 8008420:	2a49      	cmp	r2, #73	; 0x49
 8008422:	d024      	beq.n	800846e <_strtod_l+0x356>
 8008424:	2a4e      	cmp	r2, #78	; 0x4e
 8008426:	f47f aed9 	bne.w	80081dc <_strtod_l+0xc4>
 800842a:	499f      	ldr	r1, [pc, #636]	; (80086a8 <_strtod_l+0x590>)
 800842c:	a817      	add	r0, sp, #92	; 0x5c
 800842e:	f001 fe3d 	bl	800a0ac <__match>
 8008432:	2800      	cmp	r0, #0
 8008434:	f43f aed2 	beq.w	80081dc <_strtod_l+0xc4>
 8008438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b28      	cmp	r3, #40	; 0x28
 800843e:	d12d      	bne.n	800849c <_strtod_l+0x384>
 8008440:	499a      	ldr	r1, [pc, #616]	; (80086ac <_strtod_l+0x594>)
 8008442:	aa1a      	add	r2, sp, #104	; 0x68
 8008444:	a817      	add	r0, sp, #92	; 0x5c
 8008446:	f001 fe45 	bl	800a0d4 <__hexnan>
 800844a:	2805      	cmp	r0, #5
 800844c:	d126      	bne.n	800849c <_strtod_l+0x384>
 800844e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008450:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008454:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008458:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800845c:	e6a0      	b.n	80081a0 <_strtod_l+0x88>
 800845e:	210a      	movs	r1, #10
 8008460:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008464:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008468:	e7b9      	b.n	80083de <_strtod_l+0x2c6>
 800846a:	2a6e      	cmp	r2, #110	; 0x6e
 800846c:	e7db      	b.n	8008426 <_strtod_l+0x30e>
 800846e:	4990      	ldr	r1, [pc, #576]	; (80086b0 <_strtod_l+0x598>)
 8008470:	a817      	add	r0, sp, #92	; 0x5c
 8008472:	f001 fe1b 	bl	800a0ac <__match>
 8008476:	2800      	cmp	r0, #0
 8008478:	f43f aeb0 	beq.w	80081dc <_strtod_l+0xc4>
 800847c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800847e:	498d      	ldr	r1, [pc, #564]	; (80086b4 <_strtod_l+0x59c>)
 8008480:	3b01      	subs	r3, #1
 8008482:	a817      	add	r0, sp, #92	; 0x5c
 8008484:	9317      	str	r3, [sp, #92]	; 0x5c
 8008486:	f001 fe11 	bl	800a0ac <__match>
 800848a:	b910      	cbnz	r0, 8008492 <_strtod_l+0x37a>
 800848c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800848e:	3301      	adds	r3, #1
 8008490:	9317      	str	r3, [sp, #92]	; 0x5c
 8008492:	f8df b230 	ldr.w	fp, [pc, #560]	; 80086c4 <_strtod_l+0x5ac>
 8008496:	f04f 0a00 	mov.w	sl, #0
 800849a:	e681      	b.n	80081a0 <_strtod_l+0x88>
 800849c:	4886      	ldr	r0, [pc, #536]	; (80086b8 <_strtod_l+0x5a0>)
 800849e:	f002 fd17 	bl	800aed0 <nan>
 80084a2:	ec5b ab10 	vmov	sl, fp, d0
 80084a6:	e67b      	b.n	80081a0 <_strtod_l+0x88>
 80084a8:	9b05      	ldr	r3, [sp, #20]
 80084aa:	9807      	ldr	r0, [sp, #28]
 80084ac:	1af3      	subs	r3, r6, r3
 80084ae:	2f00      	cmp	r7, #0
 80084b0:	bf08      	it	eq
 80084b2:	462f      	moveq	r7, r5
 80084b4:	2d10      	cmp	r5, #16
 80084b6:	9306      	str	r3, [sp, #24]
 80084b8:	46a8      	mov	r8, r5
 80084ba:	bfa8      	it	ge
 80084bc:	f04f 0810 	movge.w	r8, #16
 80084c0:	f7f8 f828 	bl	8000514 <__aeabi_ui2d>
 80084c4:	2d09      	cmp	r5, #9
 80084c6:	4682      	mov	sl, r0
 80084c8:	468b      	mov	fp, r1
 80084ca:	dd13      	ble.n	80084f4 <_strtod_l+0x3dc>
 80084cc:	4b7b      	ldr	r3, [pc, #492]	; (80086bc <_strtod_l+0x5a4>)
 80084ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80084d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80084d6:	f7f8 f897 	bl	8000608 <__aeabi_dmul>
 80084da:	4682      	mov	sl, r0
 80084dc:	4648      	mov	r0, r9
 80084de:	468b      	mov	fp, r1
 80084e0:	f7f8 f818 	bl	8000514 <__aeabi_ui2d>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4650      	mov	r0, sl
 80084ea:	4659      	mov	r1, fp
 80084ec:	f7f7 fed6 	bl	800029c <__adddf3>
 80084f0:	4682      	mov	sl, r0
 80084f2:	468b      	mov	fp, r1
 80084f4:	2d0f      	cmp	r5, #15
 80084f6:	dc38      	bgt.n	800856a <_strtod_l+0x452>
 80084f8:	9b06      	ldr	r3, [sp, #24]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f43f ae50 	beq.w	80081a0 <_strtod_l+0x88>
 8008500:	dd24      	ble.n	800854c <_strtod_l+0x434>
 8008502:	2b16      	cmp	r3, #22
 8008504:	dc0b      	bgt.n	800851e <_strtod_l+0x406>
 8008506:	496d      	ldr	r1, [pc, #436]	; (80086bc <_strtod_l+0x5a4>)
 8008508:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800850c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008510:	4652      	mov	r2, sl
 8008512:	465b      	mov	r3, fp
 8008514:	f7f8 f878 	bl	8000608 <__aeabi_dmul>
 8008518:	4682      	mov	sl, r0
 800851a:	468b      	mov	fp, r1
 800851c:	e640      	b.n	80081a0 <_strtod_l+0x88>
 800851e:	9a06      	ldr	r2, [sp, #24]
 8008520:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008524:	4293      	cmp	r3, r2
 8008526:	db20      	blt.n	800856a <_strtod_l+0x452>
 8008528:	4c64      	ldr	r4, [pc, #400]	; (80086bc <_strtod_l+0x5a4>)
 800852a:	f1c5 050f 	rsb	r5, r5, #15
 800852e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008532:	4652      	mov	r2, sl
 8008534:	465b      	mov	r3, fp
 8008536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800853a:	f7f8 f865 	bl	8000608 <__aeabi_dmul>
 800853e:	9b06      	ldr	r3, [sp, #24]
 8008540:	1b5d      	subs	r5, r3, r5
 8008542:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008546:	e9d4 2300 	ldrd	r2, r3, [r4]
 800854a:	e7e3      	b.n	8008514 <_strtod_l+0x3fc>
 800854c:	9b06      	ldr	r3, [sp, #24]
 800854e:	3316      	adds	r3, #22
 8008550:	db0b      	blt.n	800856a <_strtod_l+0x452>
 8008552:	9b05      	ldr	r3, [sp, #20]
 8008554:	1b9e      	subs	r6, r3, r6
 8008556:	4b59      	ldr	r3, [pc, #356]	; (80086bc <_strtod_l+0x5a4>)
 8008558:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800855c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008560:	4650      	mov	r0, sl
 8008562:	4659      	mov	r1, fp
 8008564:	f7f8 f97a 	bl	800085c <__aeabi_ddiv>
 8008568:	e7d6      	b.n	8008518 <_strtod_l+0x400>
 800856a:	9b06      	ldr	r3, [sp, #24]
 800856c:	eba5 0808 	sub.w	r8, r5, r8
 8008570:	4498      	add	r8, r3
 8008572:	f1b8 0f00 	cmp.w	r8, #0
 8008576:	dd74      	ble.n	8008662 <_strtod_l+0x54a>
 8008578:	f018 030f 	ands.w	r3, r8, #15
 800857c:	d00a      	beq.n	8008594 <_strtod_l+0x47c>
 800857e:	494f      	ldr	r1, [pc, #316]	; (80086bc <_strtod_l+0x5a4>)
 8008580:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008584:	4652      	mov	r2, sl
 8008586:	465b      	mov	r3, fp
 8008588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800858c:	f7f8 f83c 	bl	8000608 <__aeabi_dmul>
 8008590:	4682      	mov	sl, r0
 8008592:	468b      	mov	fp, r1
 8008594:	f038 080f 	bics.w	r8, r8, #15
 8008598:	d04f      	beq.n	800863a <_strtod_l+0x522>
 800859a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800859e:	dd22      	ble.n	80085e6 <_strtod_l+0x4ce>
 80085a0:	2500      	movs	r5, #0
 80085a2:	462e      	mov	r6, r5
 80085a4:	9507      	str	r5, [sp, #28]
 80085a6:	9505      	str	r5, [sp, #20]
 80085a8:	2322      	movs	r3, #34	; 0x22
 80085aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80086c4 <_strtod_l+0x5ac>
 80085ae:	6023      	str	r3, [r4, #0]
 80085b0:	f04f 0a00 	mov.w	sl, #0
 80085b4:	9b07      	ldr	r3, [sp, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f43f adf2 	beq.w	80081a0 <_strtod_l+0x88>
 80085bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80085be:	4620      	mov	r0, r4
 80085c0:	f001 fe94 	bl	800a2ec <_Bfree>
 80085c4:	9905      	ldr	r1, [sp, #20]
 80085c6:	4620      	mov	r0, r4
 80085c8:	f001 fe90 	bl	800a2ec <_Bfree>
 80085cc:	4631      	mov	r1, r6
 80085ce:	4620      	mov	r0, r4
 80085d0:	f001 fe8c 	bl	800a2ec <_Bfree>
 80085d4:	9907      	ldr	r1, [sp, #28]
 80085d6:	4620      	mov	r0, r4
 80085d8:	f001 fe88 	bl	800a2ec <_Bfree>
 80085dc:	4629      	mov	r1, r5
 80085de:	4620      	mov	r0, r4
 80085e0:	f001 fe84 	bl	800a2ec <_Bfree>
 80085e4:	e5dc      	b.n	80081a0 <_strtod_l+0x88>
 80085e6:	4b36      	ldr	r3, [pc, #216]	; (80086c0 <_strtod_l+0x5a8>)
 80085e8:	9304      	str	r3, [sp, #16]
 80085ea:	2300      	movs	r3, #0
 80085ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80085f0:	4650      	mov	r0, sl
 80085f2:	4659      	mov	r1, fp
 80085f4:	4699      	mov	r9, r3
 80085f6:	f1b8 0f01 	cmp.w	r8, #1
 80085fa:	dc21      	bgt.n	8008640 <_strtod_l+0x528>
 80085fc:	b10b      	cbz	r3, 8008602 <_strtod_l+0x4ea>
 80085fe:	4682      	mov	sl, r0
 8008600:	468b      	mov	fp, r1
 8008602:	4b2f      	ldr	r3, [pc, #188]	; (80086c0 <_strtod_l+0x5a8>)
 8008604:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008608:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800860c:	4652      	mov	r2, sl
 800860e:	465b      	mov	r3, fp
 8008610:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008614:	f7f7 fff8 	bl	8000608 <__aeabi_dmul>
 8008618:	4b2a      	ldr	r3, [pc, #168]	; (80086c4 <_strtod_l+0x5ac>)
 800861a:	460a      	mov	r2, r1
 800861c:	400b      	ands	r3, r1
 800861e:	492a      	ldr	r1, [pc, #168]	; (80086c8 <_strtod_l+0x5b0>)
 8008620:	428b      	cmp	r3, r1
 8008622:	4682      	mov	sl, r0
 8008624:	d8bc      	bhi.n	80085a0 <_strtod_l+0x488>
 8008626:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800862a:	428b      	cmp	r3, r1
 800862c:	bf86      	itte	hi
 800862e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80086cc <_strtod_l+0x5b4>
 8008632:	f04f 3aff 	movhi.w	sl, #4294967295
 8008636:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800863a:	2300      	movs	r3, #0
 800863c:	9304      	str	r3, [sp, #16]
 800863e:	e084      	b.n	800874a <_strtod_l+0x632>
 8008640:	f018 0f01 	tst.w	r8, #1
 8008644:	d005      	beq.n	8008652 <_strtod_l+0x53a>
 8008646:	9b04      	ldr	r3, [sp, #16]
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f7f7 ffdc 	bl	8000608 <__aeabi_dmul>
 8008650:	2301      	movs	r3, #1
 8008652:	9a04      	ldr	r2, [sp, #16]
 8008654:	3208      	adds	r2, #8
 8008656:	f109 0901 	add.w	r9, r9, #1
 800865a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800865e:	9204      	str	r2, [sp, #16]
 8008660:	e7c9      	b.n	80085f6 <_strtod_l+0x4de>
 8008662:	d0ea      	beq.n	800863a <_strtod_l+0x522>
 8008664:	f1c8 0800 	rsb	r8, r8, #0
 8008668:	f018 020f 	ands.w	r2, r8, #15
 800866c:	d00a      	beq.n	8008684 <_strtod_l+0x56c>
 800866e:	4b13      	ldr	r3, [pc, #76]	; (80086bc <_strtod_l+0x5a4>)
 8008670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008674:	4650      	mov	r0, sl
 8008676:	4659      	mov	r1, fp
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	f7f8 f8ee 	bl	800085c <__aeabi_ddiv>
 8008680:	4682      	mov	sl, r0
 8008682:	468b      	mov	fp, r1
 8008684:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008688:	d0d7      	beq.n	800863a <_strtod_l+0x522>
 800868a:	f1b8 0f1f 	cmp.w	r8, #31
 800868e:	dd1f      	ble.n	80086d0 <_strtod_l+0x5b8>
 8008690:	2500      	movs	r5, #0
 8008692:	462e      	mov	r6, r5
 8008694:	9507      	str	r5, [sp, #28]
 8008696:	9505      	str	r5, [sp, #20]
 8008698:	2322      	movs	r3, #34	; 0x22
 800869a:	f04f 0a00 	mov.w	sl, #0
 800869e:	f04f 0b00 	mov.w	fp, #0
 80086a2:	6023      	str	r3, [r4, #0]
 80086a4:	e786      	b.n	80085b4 <_strtod_l+0x49c>
 80086a6:	bf00      	nop
 80086a8:	0800bb3d 	.word	0x0800bb3d
 80086ac:	0800bb80 	.word	0x0800bb80
 80086b0:	0800bb35 	.word	0x0800bb35
 80086b4:	0800bcc4 	.word	0x0800bcc4
 80086b8:	0800bf70 	.word	0x0800bf70
 80086bc:	0800be50 	.word	0x0800be50
 80086c0:	0800be28 	.word	0x0800be28
 80086c4:	7ff00000 	.word	0x7ff00000
 80086c8:	7ca00000 	.word	0x7ca00000
 80086cc:	7fefffff 	.word	0x7fefffff
 80086d0:	f018 0310 	ands.w	r3, r8, #16
 80086d4:	bf18      	it	ne
 80086d6:	236a      	movne	r3, #106	; 0x6a
 80086d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008a88 <_strtod_l+0x970>
 80086dc:	9304      	str	r3, [sp, #16]
 80086de:	4650      	mov	r0, sl
 80086e0:	4659      	mov	r1, fp
 80086e2:	2300      	movs	r3, #0
 80086e4:	f018 0f01 	tst.w	r8, #1
 80086e8:	d004      	beq.n	80086f4 <_strtod_l+0x5dc>
 80086ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80086ee:	f7f7 ff8b 	bl	8000608 <__aeabi_dmul>
 80086f2:	2301      	movs	r3, #1
 80086f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80086f8:	f109 0908 	add.w	r9, r9, #8
 80086fc:	d1f2      	bne.n	80086e4 <_strtod_l+0x5cc>
 80086fe:	b10b      	cbz	r3, 8008704 <_strtod_l+0x5ec>
 8008700:	4682      	mov	sl, r0
 8008702:	468b      	mov	fp, r1
 8008704:	9b04      	ldr	r3, [sp, #16]
 8008706:	b1c3      	cbz	r3, 800873a <_strtod_l+0x622>
 8008708:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800870c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008710:	2b00      	cmp	r3, #0
 8008712:	4659      	mov	r1, fp
 8008714:	dd11      	ble.n	800873a <_strtod_l+0x622>
 8008716:	2b1f      	cmp	r3, #31
 8008718:	f340 8124 	ble.w	8008964 <_strtod_l+0x84c>
 800871c:	2b34      	cmp	r3, #52	; 0x34
 800871e:	bfde      	ittt	le
 8008720:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008724:	f04f 33ff 	movle.w	r3, #4294967295
 8008728:	fa03 f202 	lslle.w	r2, r3, r2
 800872c:	f04f 0a00 	mov.w	sl, #0
 8008730:	bfcc      	ite	gt
 8008732:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008736:	ea02 0b01 	andle.w	fp, r2, r1
 800873a:	2200      	movs	r2, #0
 800873c:	2300      	movs	r3, #0
 800873e:	4650      	mov	r0, sl
 8008740:	4659      	mov	r1, fp
 8008742:	f7f8 f9c9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008746:	2800      	cmp	r0, #0
 8008748:	d1a2      	bne.n	8008690 <_strtod_l+0x578>
 800874a:	9b07      	ldr	r3, [sp, #28]
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	9908      	ldr	r1, [sp, #32]
 8008750:	462b      	mov	r3, r5
 8008752:	463a      	mov	r2, r7
 8008754:	4620      	mov	r0, r4
 8008756:	f001 fe31 	bl	800a3bc <__s2b>
 800875a:	9007      	str	r0, [sp, #28]
 800875c:	2800      	cmp	r0, #0
 800875e:	f43f af1f 	beq.w	80085a0 <_strtod_l+0x488>
 8008762:	9b05      	ldr	r3, [sp, #20]
 8008764:	1b9e      	subs	r6, r3, r6
 8008766:	9b06      	ldr	r3, [sp, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	bfb4      	ite	lt
 800876c:	4633      	movlt	r3, r6
 800876e:	2300      	movge	r3, #0
 8008770:	930c      	str	r3, [sp, #48]	; 0x30
 8008772:	9b06      	ldr	r3, [sp, #24]
 8008774:	2500      	movs	r5, #0
 8008776:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800877a:	9312      	str	r3, [sp, #72]	; 0x48
 800877c:	462e      	mov	r6, r5
 800877e:	9b07      	ldr	r3, [sp, #28]
 8008780:	4620      	mov	r0, r4
 8008782:	6859      	ldr	r1, [r3, #4]
 8008784:	f001 fd72 	bl	800a26c <_Balloc>
 8008788:	9005      	str	r0, [sp, #20]
 800878a:	2800      	cmp	r0, #0
 800878c:	f43f af0c 	beq.w	80085a8 <_strtod_l+0x490>
 8008790:	9b07      	ldr	r3, [sp, #28]
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	3202      	adds	r2, #2
 8008796:	f103 010c 	add.w	r1, r3, #12
 800879a:	0092      	lsls	r2, r2, #2
 800879c:	300c      	adds	r0, #12
 800879e:	f001 fd4b 	bl	800a238 <memcpy>
 80087a2:	ec4b ab10 	vmov	d0, sl, fp
 80087a6:	aa1a      	add	r2, sp, #104	; 0x68
 80087a8:	a919      	add	r1, sp, #100	; 0x64
 80087aa:	4620      	mov	r0, r4
 80087ac:	f002 f94c 	bl	800aa48 <__d2b>
 80087b0:	ec4b ab18 	vmov	d8, sl, fp
 80087b4:	9018      	str	r0, [sp, #96]	; 0x60
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f43f aef6 	beq.w	80085a8 <_strtod_l+0x490>
 80087bc:	2101      	movs	r1, #1
 80087be:	4620      	mov	r0, r4
 80087c0:	f001 fe96 	bl	800a4f0 <__i2b>
 80087c4:	4606      	mov	r6, r0
 80087c6:	2800      	cmp	r0, #0
 80087c8:	f43f aeee 	beq.w	80085a8 <_strtod_l+0x490>
 80087cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087ce:	9904      	ldr	r1, [sp, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	bfab      	itete	ge
 80087d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80087d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80087d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80087da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80087de:	bfac      	ite	ge
 80087e0:	eb03 0902 	addge.w	r9, r3, r2
 80087e4:	1ad7      	sublt	r7, r2, r3
 80087e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80087e8:	eba3 0801 	sub.w	r8, r3, r1
 80087ec:	4490      	add	r8, r2
 80087ee:	4ba1      	ldr	r3, [pc, #644]	; (8008a74 <_strtod_l+0x95c>)
 80087f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80087f4:	4598      	cmp	r8, r3
 80087f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80087fa:	f280 80c7 	bge.w	800898c <_strtod_l+0x874>
 80087fe:	eba3 0308 	sub.w	r3, r3, r8
 8008802:	2b1f      	cmp	r3, #31
 8008804:	eba2 0203 	sub.w	r2, r2, r3
 8008808:	f04f 0101 	mov.w	r1, #1
 800880c:	f300 80b1 	bgt.w	8008972 <_strtod_l+0x85a>
 8008810:	fa01 f303 	lsl.w	r3, r1, r3
 8008814:	930d      	str	r3, [sp, #52]	; 0x34
 8008816:	2300      	movs	r3, #0
 8008818:	9308      	str	r3, [sp, #32]
 800881a:	eb09 0802 	add.w	r8, r9, r2
 800881e:	9b04      	ldr	r3, [sp, #16]
 8008820:	45c1      	cmp	r9, r8
 8008822:	4417      	add	r7, r2
 8008824:	441f      	add	r7, r3
 8008826:	464b      	mov	r3, r9
 8008828:	bfa8      	it	ge
 800882a:	4643      	movge	r3, r8
 800882c:	42bb      	cmp	r3, r7
 800882e:	bfa8      	it	ge
 8008830:	463b      	movge	r3, r7
 8008832:	2b00      	cmp	r3, #0
 8008834:	bfc2      	ittt	gt
 8008836:	eba8 0803 	subgt.w	r8, r8, r3
 800883a:	1aff      	subgt	r7, r7, r3
 800883c:	eba9 0903 	subgt.w	r9, r9, r3
 8008840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008842:	2b00      	cmp	r3, #0
 8008844:	dd17      	ble.n	8008876 <_strtod_l+0x75e>
 8008846:	4631      	mov	r1, r6
 8008848:	461a      	mov	r2, r3
 800884a:	4620      	mov	r0, r4
 800884c:	f001 ff10 	bl	800a670 <__pow5mult>
 8008850:	4606      	mov	r6, r0
 8008852:	2800      	cmp	r0, #0
 8008854:	f43f aea8 	beq.w	80085a8 <_strtod_l+0x490>
 8008858:	4601      	mov	r1, r0
 800885a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800885c:	4620      	mov	r0, r4
 800885e:	f001 fe5d 	bl	800a51c <__multiply>
 8008862:	900b      	str	r0, [sp, #44]	; 0x2c
 8008864:	2800      	cmp	r0, #0
 8008866:	f43f ae9f 	beq.w	80085a8 <_strtod_l+0x490>
 800886a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800886c:	4620      	mov	r0, r4
 800886e:	f001 fd3d 	bl	800a2ec <_Bfree>
 8008872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008874:	9318      	str	r3, [sp, #96]	; 0x60
 8008876:	f1b8 0f00 	cmp.w	r8, #0
 800887a:	f300 808c 	bgt.w	8008996 <_strtod_l+0x87e>
 800887e:	9b06      	ldr	r3, [sp, #24]
 8008880:	2b00      	cmp	r3, #0
 8008882:	dd08      	ble.n	8008896 <_strtod_l+0x77e>
 8008884:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008886:	9905      	ldr	r1, [sp, #20]
 8008888:	4620      	mov	r0, r4
 800888a:	f001 fef1 	bl	800a670 <__pow5mult>
 800888e:	9005      	str	r0, [sp, #20]
 8008890:	2800      	cmp	r0, #0
 8008892:	f43f ae89 	beq.w	80085a8 <_strtod_l+0x490>
 8008896:	2f00      	cmp	r7, #0
 8008898:	dd08      	ble.n	80088ac <_strtod_l+0x794>
 800889a:	9905      	ldr	r1, [sp, #20]
 800889c:	463a      	mov	r2, r7
 800889e:	4620      	mov	r0, r4
 80088a0:	f001 ff40 	bl	800a724 <__lshift>
 80088a4:	9005      	str	r0, [sp, #20]
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f43f ae7e 	beq.w	80085a8 <_strtod_l+0x490>
 80088ac:	f1b9 0f00 	cmp.w	r9, #0
 80088b0:	dd08      	ble.n	80088c4 <_strtod_l+0x7ac>
 80088b2:	4631      	mov	r1, r6
 80088b4:	464a      	mov	r2, r9
 80088b6:	4620      	mov	r0, r4
 80088b8:	f001 ff34 	bl	800a724 <__lshift>
 80088bc:	4606      	mov	r6, r0
 80088be:	2800      	cmp	r0, #0
 80088c0:	f43f ae72 	beq.w	80085a8 <_strtod_l+0x490>
 80088c4:	9a05      	ldr	r2, [sp, #20]
 80088c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80088c8:	4620      	mov	r0, r4
 80088ca:	f001 ffb7 	bl	800a83c <__mdiff>
 80088ce:	4605      	mov	r5, r0
 80088d0:	2800      	cmp	r0, #0
 80088d2:	f43f ae69 	beq.w	80085a8 <_strtod_l+0x490>
 80088d6:	68c3      	ldr	r3, [r0, #12]
 80088d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80088da:	2300      	movs	r3, #0
 80088dc:	60c3      	str	r3, [r0, #12]
 80088de:	4631      	mov	r1, r6
 80088e0:	f001 ff90 	bl	800a804 <__mcmp>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	da60      	bge.n	80089aa <_strtod_l+0x892>
 80088e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ea:	ea53 030a 	orrs.w	r3, r3, sl
 80088ee:	f040 8082 	bne.w	80089f6 <_strtod_l+0x8de>
 80088f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d17d      	bne.n	80089f6 <_strtod_l+0x8de>
 80088fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088fe:	0d1b      	lsrs	r3, r3, #20
 8008900:	051b      	lsls	r3, r3, #20
 8008902:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008906:	d976      	bls.n	80089f6 <_strtod_l+0x8de>
 8008908:	696b      	ldr	r3, [r5, #20]
 800890a:	b913      	cbnz	r3, 8008912 <_strtod_l+0x7fa>
 800890c:	692b      	ldr	r3, [r5, #16]
 800890e:	2b01      	cmp	r3, #1
 8008910:	dd71      	ble.n	80089f6 <_strtod_l+0x8de>
 8008912:	4629      	mov	r1, r5
 8008914:	2201      	movs	r2, #1
 8008916:	4620      	mov	r0, r4
 8008918:	f001 ff04 	bl	800a724 <__lshift>
 800891c:	4631      	mov	r1, r6
 800891e:	4605      	mov	r5, r0
 8008920:	f001 ff70 	bl	800a804 <__mcmp>
 8008924:	2800      	cmp	r0, #0
 8008926:	dd66      	ble.n	80089f6 <_strtod_l+0x8de>
 8008928:	9904      	ldr	r1, [sp, #16]
 800892a:	4a53      	ldr	r2, [pc, #332]	; (8008a78 <_strtod_l+0x960>)
 800892c:	465b      	mov	r3, fp
 800892e:	2900      	cmp	r1, #0
 8008930:	f000 8081 	beq.w	8008a36 <_strtod_l+0x91e>
 8008934:	ea02 010b 	and.w	r1, r2, fp
 8008938:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800893c:	dc7b      	bgt.n	8008a36 <_strtod_l+0x91e>
 800893e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008942:	f77f aea9 	ble.w	8008698 <_strtod_l+0x580>
 8008946:	4b4d      	ldr	r3, [pc, #308]	; (8008a7c <_strtod_l+0x964>)
 8008948:	4650      	mov	r0, sl
 800894a:	4659      	mov	r1, fp
 800894c:	2200      	movs	r2, #0
 800894e:	f7f7 fe5b 	bl	8000608 <__aeabi_dmul>
 8008952:	460b      	mov	r3, r1
 8008954:	4303      	orrs	r3, r0
 8008956:	bf08      	it	eq
 8008958:	2322      	moveq	r3, #34	; 0x22
 800895a:	4682      	mov	sl, r0
 800895c:	468b      	mov	fp, r1
 800895e:	bf08      	it	eq
 8008960:	6023      	streq	r3, [r4, #0]
 8008962:	e62b      	b.n	80085bc <_strtod_l+0x4a4>
 8008964:	f04f 32ff 	mov.w	r2, #4294967295
 8008968:	fa02 f303 	lsl.w	r3, r2, r3
 800896c:	ea03 0a0a 	and.w	sl, r3, sl
 8008970:	e6e3      	b.n	800873a <_strtod_l+0x622>
 8008972:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008976:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800897a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800897e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008982:	fa01 f308 	lsl.w	r3, r1, r8
 8008986:	9308      	str	r3, [sp, #32]
 8008988:	910d      	str	r1, [sp, #52]	; 0x34
 800898a:	e746      	b.n	800881a <_strtod_l+0x702>
 800898c:	2300      	movs	r3, #0
 800898e:	9308      	str	r3, [sp, #32]
 8008990:	2301      	movs	r3, #1
 8008992:	930d      	str	r3, [sp, #52]	; 0x34
 8008994:	e741      	b.n	800881a <_strtod_l+0x702>
 8008996:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008998:	4642      	mov	r2, r8
 800899a:	4620      	mov	r0, r4
 800899c:	f001 fec2 	bl	800a724 <__lshift>
 80089a0:	9018      	str	r0, [sp, #96]	; 0x60
 80089a2:	2800      	cmp	r0, #0
 80089a4:	f47f af6b 	bne.w	800887e <_strtod_l+0x766>
 80089a8:	e5fe      	b.n	80085a8 <_strtod_l+0x490>
 80089aa:	465f      	mov	r7, fp
 80089ac:	d16e      	bne.n	8008a8c <_strtod_l+0x974>
 80089ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089b4:	b342      	cbz	r2, 8008a08 <_strtod_l+0x8f0>
 80089b6:	4a32      	ldr	r2, [pc, #200]	; (8008a80 <_strtod_l+0x968>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d128      	bne.n	8008a0e <_strtod_l+0x8f6>
 80089bc:	9b04      	ldr	r3, [sp, #16]
 80089be:	4651      	mov	r1, sl
 80089c0:	b1eb      	cbz	r3, 80089fe <_strtod_l+0x8e6>
 80089c2:	4b2d      	ldr	r3, [pc, #180]	; (8008a78 <_strtod_l+0x960>)
 80089c4:	403b      	ands	r3, r7
 80089c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80089ca:	f04f 32ff 	mov.w	r2, #4294967295
 80089ce:	d819      	bhi.n	8008a04 <_strtod_l+0x8ec>
 80089d0:	0d1b      	lsrs	r3, r3, #20
 80089d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089d6:	fa02 f303 	lsl.w	r3, r2, r3
 80089da:	4299      	cmp	r1, r3
 80089dc:	d117      	bne.n	8008a0e <_strtod_l+0x8f6>
 80089de:	4b29      	ldr	r3, [pc, #164]	; (8008a84 <_strtod_l+0x96c>)
 80089e0:	429f      	cmp	r7, r3
 80089e2:	d102      	bne.n	80089ea <_strtod_l+0x8d2>
 80089e4:	3101      	adds	r1, #1
 80089e6:	f43f addf 	beq.w	80085a8 <_strtod_l+0x490>
 80089ea:	4b23      	ldr	r3, [pc, #140]	; (8008a78 <_strtod_l+0x960>)
 80089ec:	403b      	ands	r3, r7
 80089ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80089f2:	f04f 0a00 	mov.w	sl, #0
 80089f6:	9b04      	ldr	r3, [sp, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1a4      	bne.n	8008946 <_strtod_l+0x82e>
 80089fc:	e5de      	b.n	80085bc <_strtod_l+0x4a4>
 80089fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008a02:	e7ea      	b.n	80089da <_strtod_l+0x8c2>
 8008a04:	4613      	mov	r3, r2
 8008a06:	e7e8      	b.n	80089da <_strtod_l+0x8c2>
 8008a08:	ea53 030a 	orrs.w	r3, r3, sl
 8008a0c:	d08c      	beq.n	8008928 <_strtod_l+0x810>
 8008a0e:	9b08      	ldr	r3, [sp, #32]
 8008a10:	b1db      	cbz	r3, 8008a4a <_strtod_l+0x932>
 8008a12:	423b      	tst	r3, r7
 8008a14:	d0ef      	beq.n	80089f6 <_strtod_l+0x8de>
 8008a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a18:	9a04      	ldr	r2, [sp, #16]
 8008a1a:	4650      	mov	r0, sl
 8008a1c:	4659      	mov	r1, fp
 8008a1e:	b1c3      	cbz	r3, 8008a52 <_strtod_l+0x93a>
 8008a20:	f7ff fb5c 	bl	80080dc <sulp>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	ec51 0b18 	vmov	r0, r1, d8
 8008a2c:	f7f7 fc36 	bl	800029c <__adddf3>
 8008a30:	4682      	mov	sl, r0
 8008a32:	468b      	mov	fp, r1
 8008a34:	e7df      	b.n	80089f6 <_strtod_l+0x8de>
 8008a36:	4013      	ands	r3, r2
 8008a38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a44:	f04f 3aff 	mov.w	sl, #4294967295
 8008a48:	e7d5      	b.n	80089f6 <_strtod_l+0x8de>
 8008a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a4c:	ea13 0f0a 	tst.w	r3, sl
 8008a50:	e7e0      	b.n	8008a14 <_strtod_l+0x8fc>
 8008a52:	f7ff fb43 	bl	80080dc <sulp>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	ec51 0b18 	vmov	r0, r1, d8
 8008a5e:	f7f7 fc1b 	bl	8000298 <__aeabi_dsub>
 8008a62:	2200      	movs	r2, #0
 8008a64:	2300      	movs	r3, #0
 8008a66:	4682      	mov	sl, r0
 8008a68:	468b      	mov	fp, r1
 8008a6a:	f7f8 f835 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d0c1      	beq.n	80089f6 <_strtod_l+0x8de>
 8008a72:	e611      	b.n	8008698 <_strtod_l+0x580>
 8008a74:	fffffc02 	.word	0xfffffc02
 8008a78:	7ff00000 	.word	0x7ff00000
 8008a7c:	39500000 	.word	0x39500000
 8008a80:	000fffff 	.word	0x000fffff
 8008a84:	7fefffff 	.word	0x7fefffff
 8008a88:	0800bb98 	.word	0x0800bb98
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f002 f836 	bl	800ab00 <__ratio>
 8008a94:	ec59 8b10 	vmov	r8, r9, d0
 8008a98:	ee10 0a10 	vmov	r0, s0
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	f7f8 f82c 	bl	8000b00 <__aeabi_dcmple>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d07a      	beq.n	8008ba2 <_strtod_l+0xa8a>
 8008aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d04a      	beq.n	8008b48 <_strtod_l+0xa30>
 8008ab2:	4b95      	ldr	r3, [pc, #596]	; (8008d08 <_strtod_l+0xbf0>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008aba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008d08 <_strtod_l+0xbf0>
 8008abe:	f04f 0800 	mov.w	r8, #0
 8008ac2:	4b92      	ldr	r3, [pc, #584]	; (8008d0c <_strtod_l+0xbf4>)
 8008ac4:	403b      	ands	r3, r7
 8008ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008aca:	4b91      	ldr	r3, [pc, #580]	; (8008d10 <_strtod_l+0xbf8>)
 8008acc:	429a      	cmp	r2, r3
 8008ace:	f040 80b0 	bne.w	8008c32 <_strtod_l+0xb1a>
 8008ad2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ad6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008ada:	ec4b ab10 	vmov	d0, sl, fp
 8008ade:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ae2:	f001 ff35 	bl	800a950 <__ulp>
 8008ae6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008aea:	ec53 2b10 	vmov	r2, r3, d0
 8008aee:	f7f7 fd8b 	bl	8000608 <__aeabi_dmul>
 8008af2:	4652      	mov	r2, sl
 8008af4:	465b      	mov	r3, fp
 8008af6:	f7f7 fbd1 	bl	800029c <__adddf3>
 8008afa:	460b      	mov	r3, r1
 8008afc:	4983      	ldr	r1, [pc, #524]	; (8008d0c <_strtod_l+0xbf4>)
 8008afe:	4a85      	ldr	r2, [pc, #532]	; (8008d14 <_strtod_l+0xbfc>)
 8008b00:	4019      	ands	r1, r3
 8008b02:	4291      	cmp	r1, r2
 8008b04:	4682      	mov	sl, r0
 8008b06:	d960      	bls.n	8008bca <_strtod_l+0xab2>
 8008b08:	ee18 3a90 	vmov	r3, s17
 8008b0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d104      	bne.n	8008b1e <_strtod_l+0xa06>
 8008b14:	ee18 3a10 	vmov	r3, s16
 8008b18:	3301      	adds	r3, #1
 8008b1a:	f43f ad45 	beq.w	80085a8 <_strtod_l+0x490>
 8008b1e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008d20 <_strtod_l+0xc08>
 8008b22:	f04f 3aff 	mov.w	sl, #4294967295
 8008b26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f001 fbdf 	bl	800a2ec <_Bfree>
 8008b2e:	9905      	ldr	r1, [sp, #20]
 8008b30:	4620      	mov	r0, r4
 8008b32:	f001 fbdb 	bl	800a2ec <_Bfree>
 8008b36:	4631      	mov	r1, r6
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f001 fbd7 	bl	800a2ec <_Bfree>
 8008b3e:	4629      	mov	r1, r5
 8008b40:	4620      	mov	r0, r4
 8008b42:	f001 fbd3 	bl	800a2ec <_Bfree>
 8008b46:	e61a      	b.n	800877e <_strtod_l+0x666>
 8008b48:	f1ba 0f00 	cmp.w	sl, #0
 8008b4c:	d11b      	bne.n	8008b86 <_strtod_l+0xa6e>
 8008b4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b52:	b9f3      	cbnz	r3, 8008b92 <_strtod_l+0xa7a>
 8008b54:	4b6c      	ldr	r3, [pc, #432]	; (8008d08 <_strtod_l+0xbf0>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	f7f7 ffc6 	bl	8000aec <__aeabi_dcmplt>
 8008b60:	b9d0      	cbnz	r0, 8008b98 <_strtod_l+0xa80>
 8008b62:	4640      	mov	r0, r8
 8008b64:	4649      	mov	r1, r9
 8008b66:	4b6c      	ldr	r3, [pc, #432]	; (8008d18 <_strtod_l+0xc00>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f7f7 fd4d 	bl	8000608 <__aeabi_dmul>
 8008b6e:	4680      	mov	r8, r0
 8008b70:	4689      	mov	r9, r1
 8008b72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008b76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008b7a:	9315      	str	r3, [sp, #84]	; 0x54
 8008b7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008b80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b84:	e79d      	b.n	8008ac2 <_strtod_l+0x9aa>
 8008b86:	f1ba 0f01 	cmp.w	sl, #1
 8008b8a:	d102      	bne.n	8008b92 <_strtod_l+0xa7a>
 8008b8c:	2f00      	cmp	r7, #0
 8008b8e:	f43f ad83 	beq.w	8008698 <_strtod_l+0x580>
 8008b92:	4b62      	ldr	r3, [pc, #392]	; (8008d1c <_strtod_l+0xc04>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	e78e      	b.n	8008ab6 <_strtod_l+0x99e>
 8008b98:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008d18 <_strtod_l+0xc00>
 8008b9c:	f04f 0800 	mov.w	r8, #0
 8008ba0:	e7e7      	b.n	8008b72 <_strtod_l+0xa5a>
 8008ba2:	4b5d      	ldr	r3, [pc, #372]	; (8008d18 <_strtod_l+0xc00>)
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f7f7 fd2d 	bl	8000608 <__aeabi_dmul>
 8008bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bb0:	4680      	mov	r8, r0
 8008bb2:	4689      	mov	r9, r1
 8008bb4:	b933      	cbnz	r3, 8008bc4 <_strtod_l+0xaac>
 8008bb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bba:	900e      	str	r0, [sp, #56]	; 0x38
 8008bbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008bc2:	e7dd      	b.n	8008b80 <_strtod_l+0xa68>
 8008bc4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008bc8:	e7f9      	b.n	8008bbe <_strtod_l+0xaa6>
 8008bca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1a8      	bne.n	8008b26 <_strtod_l+0xa0e>
 8008bd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bda:	0d1b      	lsrs	r3, r3, #20
 8008bdc:	051b      	lsls	r3, r3, #20
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d1a1      	bne.n	8008b26 <_strtod_l+0xa0e>
 8008be2:	4640      	mov	r0, r8
 8008be4:	4649      	mov	r1, r9
 8008be6:	f7f8 f857 	bl	8000c98 <__aeabi_d2lz>
 8008bea:	f7f7 fcdf 	bl	80005ac <__aeabi_l2d>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	f7f7 fb4f 	bl	8000298 <__aeabi_dsub>
 8008bfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c00:	ea43 030a 	orr.w	r3, r3, sl
 8008c04:	4313      	orrs	r3, r2
 8008c06:	4680      	mov	r8, r0
 8008c08:	4689      	mov	r9, r1
 8008c0a:	d055      	beq.n	8008cb8 <_strtod_l+0xba0>
 8008c0c:	a336      	add	r3, pc, #216	; (adr r3, 8008ce8 <_strtod_l+0xbd0>)
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	f7f7 ff6b 	bl	8000aec <__aeabi_dcmplt>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f47f acd0 	bne.w	80085bc <_strtod_l+0x4a4>
 8008c1c:	a334      	add	r3, pc, #208	; (adr r3, 8008cf0 <_strtod_l+0xbd8>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	f7f7 ff7f 	bl	8000b28 <__aeabi_dcmpgt>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	f43f af7b 	beq.w	8008b26 <_strtod_l+0xa0e>
 8008c30:	e4c4      	b.n	80085bc <_strtod_l+0x4a4>
 8008c32:	9b04      	ldr	r3, [sp, #16]
 8008c34:	b333      	cbz	r3, 8008c84 <_strtod_l+0xb6c>
 8008c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c3c:	d822      	bhi.n	8008c84 <_strtod_l+0xb6c>
 8008c3e:	a32e      	add	r3, pc, #184	; (adr r3, 8008cf8 <_strtod_l+0xbe0>)
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	4640      	mov	r0, r8
 8008c46:	4649      	mov	r1, r9
 8008c48:	f7f7 ff5a 	bl	8000b00 <__aeabi_dcmple>
 8008c4c:	b1a0      	cbz	r0, 8008c78 <_strtod_l+0xb60>
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4640      	mov	r0, r8
 8008c52:	f7f7 ffb1 	bl	8000bb8 <__aeabi_d2uiz>
 8008c56:	2801      	cmp	r0, #1
 8008c58:	bf38      	it	cc
 8008c5a:	2001      	movcc	r0, #1
 8008c5c:	f7f7 fc5a 	bl	8000514 <__aeabi_ui2d>
 8008c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c62:	4680      	mov	r8, r0
 8008c64:	4689      	mov	r9, r1
 8008c66:	bb23      	cbnz	r3, 8008cb2 <_strtod_l+0xb9a>
 8008c68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c6c:	9010      	str	r0, [sp, #64]	; 0x40
 8008c6e:	9311      	str	r3, [sp, #68]	; 0x44
 8008c70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c7c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	9309      	str	r3, [sp, #36]	; 0x24
 8008c84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c88:	eeb0 0a48 	vmov.f32	s0, s16
 8008c8c:	eef0 0a68 	vmov.f32	s1, s17
 8008c90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c94:	f001 fe5c 	bl	800a950 <__ulp>
 8008c98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c9c:	ec53 2b10 	vmov	r2, r3, d0
 8008ca0:	f7f7 fcb2 	bl	8000608 <__aeabi_dmul>
 8008ca4:	ec53 2b18 	vmov	r2, r3, d8
 8008ca8:	f7f7 faf8 	bl	800029c <__adddf3>
 8008cac:	4682      	mov	sl, r0
 8008cae:	468b      	mov	fp, r1
 8008cb0:	e78d      	b.n	8008bce <_strtod_l+0xab6>
 8008cb2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008cb6:	e7db      	b.n	8008c70 <_strtod_l+0xb58>
 8008cb8:	a311      	add	r3, pc, #68	; (adr r3, 8008d00 <_strtod_l+0xbe8>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 ff15 	bl	8000aec <__aeabi_dcmplt>
 8008cc2:	e7b2      	b.n	8008c2a <_strtod_l+0xb12>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	f7ff ba6b 	b.w	80081a8 <_strtod_l+0x90>
 8008cd2:	2a65      	cmp	r2, #101	; 0x65
 8008cd4:	f43f ab5f 	beq.w	8008396 <_strtod_l+0x27e>
 8008cd8:	2a45      	cmp	r2, #69	; 0x45
 8008cda:	f43f ab5c 	beq.w	8008396 <_strtod_l+0x27e>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f7ff bb94 	b.w	800840c <_strtod_l+0x2f4>
 8008ce4:	f3af 8000 	nop.w
 8008ce8:	94a03595 	.word	0x94a03595
 8008cec:	3fdfffff 	.word	0x3fdfffff
 8008cf0:	35afe535 	.word	0x35afe535
 8008cf4:	3fe00000 	.word	0x3fe00000
 8008cf8:	ffc00000 	.word	0xffc00000
 8008cfc:	41dfffff 	.word	0x41dfffff
 8008d00:	94a03595 	.word	0x94a03595
 8008d04:	3fcfffff 	.word	0x3fcfffff
 8008d08:	3ff00000 	.word	0x3ff00000
 8008d0c:	7ff00000 	.word	0x7ff00000
 8008d10:	7fe00000 	.word	0x7fe00000
 8008d14:	7c9fffff 	.word	0x7c9fffff
 8008d18:	3fe00000 	.word	0x3fe00000
 8008d1c:	bff00000 	.word	0xbff00000
 8008d20:	7fefffff 	.word	0x7fefffff

08008d24 <_strtod_r>:
 8008d24:	4b01      	ldr	r3, [pc, #4]	; (8008d2c <_strtod_r+0x8>)
 8008d26:	f7ff b9f7 	b.w	8008118 <_strtod_l>
 8008d2a:	bf00      	nop
 8008d2c:	20000074 	.word	0x20000074

08008d30 <_strtol_l.constprop.0>:
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d36:	d001      	beq.n	8008d3c <_strtol_l.constprop.0+0xc>
 8008d38:	2b24      	cmp	r3, #36	; 0x24
 8008d3a:	d906      	bls.n	8008d4a <_strtol_l.constprop.0+0x1a>
 8008d3c:	f7fe f9d0 	bl	80070e0 <__errno>
 8008d40:	2316      	movs	r3, #22
 8008d42:	6003      	str	r3, [r0, #0]
 8008d44:	2000      	movs	r0, #0
 8008d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e30 <_strtol_l.constprop.0+0x100>
 8008d4e:	460d      	mov	r5, r1
 8008d50:	462e      	mov	r6, r5
 8008d52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d56:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008d5a:	f017 0708 	ands.w	r7, r7, #8
 8008d5e:	d1f7      	bne.n	8008d50 <_strtol_l.constprop.0+0x20>
 8008d60:	2c2d      	cmp	r4, #45	; 0x2d
 8008d62:	d132      	bne.n	8008dca <_strtol_l.constprop.0+0x9a>
 8008d64:	782c      	ldrb	r4, [r5, #0]
 8008d66:	2701      	movs	r7, #1
 8008d68:	1cb5      	adds	r5, r6, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d05b      	beq.n	8008e26 <_strtol_l.constprop.0+0xf6>
 8008d6e:	2b10      	cmp	r3, #16
 8008d70:	d109      	bne.n	8008d86 <_strtol_l.constprop.0+0x56>
 8008d72:	2c30      	cmp	r4, #48	; 0x30
 8008d74:	d107      	bne.n	8008d86 <_strtol_l.constprop.0+0x56>
 8008d76:	782c      	ldrb	r4, [r5, #0]
 8008d78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008d7c:	2c58      	cmp	r4, #88	; 0x58
 8008d7e:	d14d      	bne.n	8008e1c <_strtol_l.constprop.0+0xec>
 8008d80:	786c      	ldrb	r4, [r5, #1]
 8008d82:	2310      	movs	r3, #16
 8008d84:	3502      	adds	r5, #2
 8008d86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008d8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d8e:	f04f 0c00 	mov.w	ip, #0
 8008d92:	fbb8 f9f3 	udiv	r9, r8, r3
 8008d96:	4666      	mov	r6, ip
 8008d98:	fb03 8a19 	mls	sl, r3, r9, r8
 8008d9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008da0:	f1be 0f09 	cmp.w	lr, #9
 8008da4:	d816      	bhi.n	8008dd4 <_strtol_l.constprop.0+0xa4>
 8008da6:	4674      	mov	r4, lr
 8008da8:	42a3      	cmp	r3, r4
 8008daa:	dd24      	ble.n	8008df6 <_strtol_l.constprop.0+0xc6>
 8008dac:	f1bc 0f00 	cmp.w	ip, #0
 8008db0:	db1e      	blt.n	8008df0 <_strtol_l.constprop.0+0xc0>
 8008db2:	45b1      	cmp	r9, r6
 8008db4:	d31c      	bcc.n	8008df0 <_strtol_l.constprop.0+0xc0>
 8008db6:	d101      	bne.n	8008dbc <_strtol_l.constprop.0+0x8c>
 8008db8:	45a2      	cmp	sl, r4
 8008dba:	db19      	blt.n	8008df0 <_strtol_l.constprop.0+0xc0>
 8008dbc:	fb06 4603 	mla	r6, r6, r3, r4
 8008dc0:	f04f 0c01 	mov.w	ip, #1
 8008dc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dc8:	e7e8      	b.n	8008d9c <_strtol_l.constprop.0+0x6c>
 8008dca:	2c2b      	cmp	r4, #43	; 0x2b
 8008dcc:	bf04      	itt	eq
 8008dce:	782c      	ldrbeq	r4, [r5, #0]
 8008dd0:	1cb5      	addeq	r5, r6, #2
 8008dd2:	e7ca      	b.n	8008d6a <_strtol_l.constprop.0+0x3a>
 8008dd4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008dd8:	f1be 0f19 	cmp.w	lr, #25
 8008ddc:	d801      	bhi.n	8008de2 <_strtol_l.constprop.0+0xb2>
 8008dde:	3c37      	subs	r4, #55	; 0x37
 8008de0:	e7e2      	b.n	8008da8 <_strtol_l.constprop.0+0x78>
 8008de2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008de6:	f1be 0f19 	cmp.w	lr, #25
 8008dea:	d804      	bhi.n	8008df6 <_strtol_l.constprop.0+0xc6>
 8008dec:	3c57      	subs	r4, #87	; 0x57
 8008dee:	e7db      	b.n	8008da8 <_strtol_l.constprop.0+0x78>
 8008df0:	f04f 3cff 	mov.w	ip, #4294967295
 8008df4:	e7e6      	b.n	8008dc4 <_strtol_l.constprop.0+0x94>
 8008df6:	f1bc 0f00 	cmp.w	ip, #0
 8008dfa:	da05      	bge.n	8008e08 <_strtol_l.constprop.0+0xd8>
 8008dfc:	2322      	movs	r3, #34	; 0x22
 8008dfe:	6003      	str	r3, [r0, #0]
 8008e00:	4646      	mov	r6, r8
 8008e02:	b942      	cbnz	r2, 8008e16 <_strtol_l.constprop.0+0xe6>
 8008e04:	4630      	mov	r0, r6
 8008e06:	e79e      	b.n	8008d46 <_strtol_l.constprop.0+0x16>
 8008e08:	b107      	cbz	r7, 8008e0c <_strtol_l.constprop.0+0xdc>
 8008e0a:	4276      	negs	r6, r6
 8008e0c:	2a00      	cmp	r2, #0
 8008e0e:	d0f9      	beq.n	8008e04 <_strtol_l.constprop.0+0xd4>
 8008e10:	f1bc 0f00 	cmp.w	ip, #0
 8008e14:	d000      	beq.n	8008e18 <_strtol_l.constprop.0+0xe8>
 8008e16:	1e69      	subs	r1, r5, #1
 8008e18:	6011      	str	r1, [r2, #0]
 8008e1a:	e7f3      	b.n	8008e04 <_strtol_l.constprop.0+0xd4>
 8008e1c:	2430      	movs	r4, #48	; 0x30
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1b1      	bne.n	8008d86 <_strtol_l.constprop.0+0x56>
 8008e22:	2308      	movs	r3, #8
 8008e24:	e7af      	b.n	8008d86 <_strtol_l.constprop.0+0x56>
 8008e26:	2c30      	cmp	r4, #48	; 0x30
 8008e28:	d0a5      	beq.n	8008d76 <_strtol_l.constprop.0+0x46>
 8008e2a:	230a      	movs	r3, #10
 8008e2c:	e7ab      	b.n	8008d86 <_strtol_l.constprop.0+0x56>
 8008e2e:	bf00      	nop
 8008e30:	0800bbc1 	.word	0x0800bbc1

08008e34 <_strtol_r>:
 8008e34:	f7ff bf7c 	b.w	8008d30 <_strtol_l.constprop.0>

08008e38 <quorem>:
 8008e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	6903      	ldr	r3, [r0, #16]
 8008e3e:	690c      	ldr	r4, [r1, #16]
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	4607      	mov	r7, r0
 8008e44:	f2c0 8081 	blt.w	8008f4a <quorem+0x112>
 8008e48:	3c01      	subs	r4, #1
 8008e4a:	f101 0814 	add.w	r8, r1, #20
 8008e4e:	f100 0514 	add.w	r5, r0, #20
 8008e52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e60:	3301      	adds	r3, #1
 8008e62:	429a      	cmp	r2, r3
 8008e64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e70:	d331      	bcc.n	8008ed6 <quorem+0x9e>
 8008e72:	f04f 0e00 	mov.w	lr, #0
 8008e76:	4640      	mov	r0, r8
 8008e78:	46ac      	mov	ip, r5
 8008e7a:	46f2      	mov	sl, lr
 8008e7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e80:	b293      	uxth	r3, r2
 8008e82:	fb06 e303 	mla	r3, r6, r3, lr
 8008e86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	ebaa 0303 	sub.w	r3, sl, r3
 8008e90:	f8dc a000 	ldr.w	sl, [ip]
 8008e94:	0c12      	lsrs	r2, r2, #16
 8008e96:	fa13 f38a 	uxtah	r3, r3, sl
 8008e9a:	fb06 e202 	mla	r2, r6, r2, lr
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	9b00      	ldr	r3, [sp, #0]
 8008ea2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ea6:	b292      	uxth	r2, r2
 8008ea8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008eac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008eb0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008eb4:	4581      	cmp	r9, r0
 8008eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eba:	f84c 3b04 	str.w	r3, [ip], #4
 8008ebe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ec2:	d2db      	bcs.n	8008e7c <quorem+0x44>
 8008ec4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ec8:	b92b      	cbnz	r3, 8008ed6 <quorem+0x9e>
 8008eca:	9b01      	ldr	r3, [sp, #4]
 8008ecc:	3b04      	subs	r3, #4
 8008ece:	429d      	cmp	r5, r3
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	d32e      	bcc.n	8008f32 <quorem+0xfa>
 8008ed4:	613c      	str	r4, [r7, #16]
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	f001 fc94 	bl	800a804 <__mcmp>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	db24      	blt.n	8008f2a <quorem+0xf2>
 8008ee0:	3601      	adds	r6, #1
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f04f 0c00 	mov.w	ip, #0
 8008ee8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008eec:	f8d0 e000 	ldr.w	lr, [r0]
 8008ef0:	b293      	uxth	r3, r2
 8008ef2:	ebac 0303 	sub.w	r3, ip, r3
 8008ef6:	0c12      	lsrs	r2, r2, #16
 8008ef8:	fa13 f38e 	uxtah	r3, r3, lr
 8008efc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f0a:	45c1      	cmp	r9, r8
 8008f0c:	f840 3b04 	str.w	r3, [r0], #4
 8008f10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f14:	d2e8      	bcs.n	8008ee8 <quorem+0xb0>
 8008f16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f1e:	b922      	cbnz	r2, 8008f2a <quorem+0xf2>
 8008f20:	3b04      	subs	r3, #4
 8008f22:	429d      	cmp	r5, r3
 8008f24:	461a      	mov	r2, r3
 8008f26:	d30a      	bcc.n	8008f3e <quorem+0x106>
 8008f28:	613c      	str	r4, [r7, #16]
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	b003      	add	sp, #12
 8008f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f32:	6812      	ldr	r2, [r2, #0]
 8008f34:	3b04      	subs	r3, #4
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	d1cc      	bne.n	8008ed4 <quorem+0x9c>
 8008f3a:	3c01      	subs	r4, #1
 8008f3c:	e7c7      	b.n	8008ece <quorem+0x96>
 8008f3e:	6812      	ldr	r2, [r2, #0]
 8008f40:	3b04      	subs	r3, #4
 8008f42:	2a00      	cmp	r2, #0
 8008f44:	d1f0      	bne.n	8008f28 <quorem+0xf0>
 8008f46:	3c01      	subs	r4, #1
 8008f48:	e7eb      	b.n	8008f22 <quorem+0xea>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	e7ee      	b.n	8008f2c <quorem+0xf4>
	...

08008f50 <_dtoa_r>:
 8008f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	ed2d 8b04 	vpush	{d8-d9}
 8008f58:	ec57 6b10 	vmov	r6, r7, d0
 8008f5c:	b093      	sub	sp, #76	; 0x4c
 8008f5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f64:	9106      	str	r1, [sp, #24]
 8008f66:	ee10 aa10 	vmov	sl, s0
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008f70:	46bb      	mov	fp, r7
 8008f72:	b975      	cbnz	r5, 8008f92 <_dtoa_r+0x42>
 8008f74:	2010      	movs	r0, #16
 8008f76:	f7fe f8dd 	bl	8007134 <malloc>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	6260      	str	r0, [r4, #36]	; 0x24
 8008f7e:	b920      	cbnz	r0, 8008f8a <_dtoa_r+0x3a>
 8008f80:	4ba7      	ldr	r3, [pc, #668]	; (8009220 <_dtoa_r+0x2d0>)
 8008f82:	21ea      	movs	r1, #234	; 0xea
 8008f84:	48a7      	ldr	r0, [pc, #668]	; (8009224 <_dtoa_r+0x2d4>)
 8008f86:	f001 ffcd 	bl	800af24 <__assert_func>
 8008f8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f8e:	6005      	str	r5, [r0, #0]
 8008f90:	60c5      	str	r5, [r0, #12]
 8008f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f94:	6819      	ldr	r1, [r3, #0]
 8008f96:	b151      	cbz	r1, 8008fae <_dtoa_r+0x5e>
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	604a      	str	r2, [r1, #4]
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	4093      	lsls	r3, r2
 8008fa0:	608b      	str	r3, [r1, #8]
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f001 f9a2 	bl	800a2ec <_Bfree>
 8008fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	1e3b      	subs	r3, r7, #0
 8008fb0:	bfaa      	itet	ge
 8008fb2:	2300      	movge	r3, #0
 8008fb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008fb8:	f8c8 3000 	strge.w	r3, [r8]
 8008fbc:	4b9a      	ldr	r3, [pc, #616]	; (8009228 <_dtoa_r+0x2d8>)
 8008fbe:	bfbc      	itt	lt
 8008fc0:	2201      	movlt	r2, #1
 8008fc2:	f8c8 2000 	strlt.w	r2, [r8]
 8008fc6:	ea33 030b 	bics.w	r3, r3, fp
 8008fca:	d11b      	bne.n	8009004 <_dtoa_r+0xb4>
 8008fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fce:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fd8:	4333      	orrs	r3, r6
 8008fda:	f000 8592 	beq.w	8009b02 <_dtoa_r+0xbb2>
 8008fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fe0:	b963      	cbnz	r3, 8008ffc <_dtoa_r+0xac>
 8008fe2:	4b92      	ldr	r3, [pc, #584]	; (800922c <_dtoa_r+0x2dc>)
 8008fe4:	e022      	b.n	800902c <_dtoa_r+0xdc>
 8008fe6:	4b92      	ldr	r3, [pc, #584]	; (8009230 <_dtoa_r+0x2e0>)
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	3308      	adds	r3, #8
 8008fec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	9801      	ldr	r0, [sp, #4]
 8008ff2:	b013      	add	sp, #76	; 0x4c
 8008ff4:	ecbd 8b04 	vpop	{d8-d9}
 8008ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffc:	4b8b      	ldr	r3, [pc, #556]	; (800922c <_dtoa_r+0x2dc>)
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	3303      	adds	r3, #3
 8009002:	e7f3      	b.n	8008fec <_dtoa_r+0x9c>
 8009004:	2200      	movs	r2, #0
 8009006:	2300      	movs	r3, #0
 8009008:	4650      	mov	r0, sl
 800900a:	4659      	mov	r1, fp
 800900c:	f7f7 fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 8009010:	ec4b ab19 	vmov	d9, sl, fp
 8009014:	4680      	mov	r8, r0
 8009016:	b158      	cbz	r0, 8009030 <_dtoa_r+0xe0>
 8009018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800901a:	2301      	movs	r3, #1
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 856b 	beq.w	8009afc <_dtoa_r+0xbac>
 8009026:	4883      	ldr	r0, [pc, #524]	; (8009234 <_dtoa_r+0x2e4>)
 8009028:	6018      	str	r0, [r3, #0]
 800902a:	1e43      	subs	r3, r0, #1
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	e7df      	b.n	8008ff0 <_dtoa_r+0xa0>
 8009030:	ec4b ab10 	vmov	d0, sl, fp
 8009034:	aa10      	add	r2, sp, #64	; 0x40
 8009036:	a911      	add	r1, sp, #68	; 0x44
 8009038:	4620      	mov	r0, r4
 800903a:	f001 fd05 	bl	800aa48 <__d2b>
 800903e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009042:	ee08 0a10 	vmov	s16, r0
 8009046:	2d00      	cmp	r5, #0
 8009048:	f000 8084 	beq.w	8009154 <_dtoa_r+0x204>
 800904c:	ee19 3a90 	vmov	r3, s19
 8009050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009054:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009058:	4656      	mov	r6, sl
 800905a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800905e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009062:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009066:	4b74      	ldr	r3, [pc, #464]	; (8009238 <_dtoa_r+0x2e8>)
 8009068:	2200      	movs	r2, #0
 800906a:	4630      	mov	r0, r6
 800906c:	4639      	mov	r1, r7
 800906e:	f7f7 f913 	bl	8000298 <__aeabi_dsub>
 8009072:	a365      	add	r3, pc, #404	; (adr r3, 8009208 <_dtoa_r+0x2b8>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	f7f7 fac6 	bl	8000608 <__aeabi_dmul>
 800907c:	a364      	add	r3, pc, #400	; (adr r3, 8009210 <_dtoa_r+0x2c0>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f7f7 f90b 	bl	800029c <__adddf3>
 8009086:	4606      	mov	r6, r0
 8009088:	4628      	mov	r0, r5
 800908a:	460f      	mov	r7, r1
 800908c:	f7f7 fa52 	bl	8000534 <__aeabi_i2d>
 8009090:	a361      	add	r3, pc, #388	; (adr r3, 8009218 <_dtoa_r+0x2c8>)
 8009092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009096:	f7f7 fab7 	bl	8000608 <__aeabi_dmul>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4630      	mov	r0, r6
 80090a0:	4639      	mov	r1, r7
 80090a2:	f7f7 f8fb 	bl	800029c <__adddf3>
 80090a6:	4606      	mov	r6, r0
 80090a8:	460f      	mov	r7, r1
 80090aa:	f7f7 fd5d 	bl	8000b68 <__aeabi_d2iz>
 80090ae:	2200      	movs	r2, #0
 80090b0:	9000      	str	r0, [sp, #0]
 80090b2:	2300      	movs	r3, #0
 80090b4:	4630      	mov	r0, r6
 80090b6:	4639      	mov	r1, r7
 80090b8:	f7f7 fd18 	bl	8000aec <__aeabi_dcmplt>
 80090bc:	b150      	cbz	r0, 80090d4 <_dtoa_r+0x184>
 80090be:	9800      	ldr	r0, [sp, #0]
 80090c0:	f7f7 fa38 	bl	8000534 <__aeabi_i2d>
 80090c4:	4632      	mov	r2, r6
 80090c6:	463b      	mov	r3, r7
 80090c8:	f7f7 fd06 	bl	8000ad8 <__aeabi_dcmpeq>
 80090cc:	b910      	cbnz	r0, 80090d4 <_dtoa_r+0x184>
 80090ce:	9b00      	ldr	r3, [sp, #0]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	9b00      	ldr	r3, [sp, #0]
 80090d6:	2b16      	cmp	r3, #22
 80090d8:	d85a      	bhi.n	8009190 <_dtoa_r+0x240>
 80090da:	9a00      	ldr	r2, [sp, #0]
 80090dc:	4b57      	ldr	r3, [pc, #348]	; (800923c <_dtoa_r+0x2ec>)
 80090de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	ec51 0b19 	vmov	r0, r1, d9
 80090ea:	f7f7 fcff 	bl	8000aec <__aeabi_dcmplt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d050      	beq.n	8009194 <_dtoa_r+0x244>
 80090f2:	9b00      	ldr	r3, [sp, #0]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	2300      	movs	r3, #0
 80090fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80090fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090fe:	1b5d      	subs	r5, r3, r5
 8009100:	1e6b      	subs	r3, r5, #1
 8009102:	9305      	str	r3, [sp, #20]
 8009104:	bf45      	ittet	mi
 8009106:	f1c5 0301 	rsbmi	r3, r5, #1
 800910a:	9304      	strmi	r3, [sp, #16]
 800910c:	2300      	movpl	r3, #0
 800910e:	2300      	movmi	r3, #0
 8009110:	bf4c      	ite	mi
 8009112:	9305      	strmi	r3, [sp, #20]
 8009114:	9304      	strpl	r3, [sp, #16]
 8009116:	9b00      	ldr	r3, [sp, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	db3d      	blt.n	8009198 <_dtoa_r+0x248>
 800911c:	9b05      	ldr	r3, [sp, #20]
 800911e:	9a00      	ldr	r2, [sp, #0]
 8009120:	920a      	str	r2, [sp, #40]	; 0x28
 8009122:	4413      	add	r3, r2
 8009124:	9305      	str	r3, [sp, #20]
 8009126:	2300      	movs	r3, #0
 8009128:	9307      	str	r3, [sp, #28]
 800912a:	9b06      	ldr	r3, [sp, #24]
 800912c:	2b09      	cmp	r3, #9
 800912e:	f200 8089 	bhi.w	8009244 <_dtoa_r+0x2f4>
 8009132:	2b05      	cmp	r3, #5
 8009134:	bfc4      	itt	gt
 8009136:	3b04      	subgt	r3, #4
 8009138:	9306      	strgt	r3, [sp, #24]
 800913a:	9b06      	ldr	r3, [sp, #24]
 800913c:	f1a3 0302 	sub.w	r3, r3, #2
 8009140:	bfcc      	ite	gt
 8009142:	2500      	movgt	r5, #0
 8009144:	2501      	movle	r5, #1
 8009146:	2b03      	cmp	r3, #3
 8009148:	f200 8087 	bhi.w	800925a <_dtoa_r+0x30a>
 800914c:	e8df f003 	tbb	[pc, r3]
 8009150:	59383a2d 	.word	0x59383a2d
 8009154:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009158:	441d      	add	r5, r3
 800915a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800915e:	2b20      	cmp	r3, #32
 8009160:	bfc1      	itttt	gt
 8009162:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009166:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800916a:	fa0b f303 	lslgt.w	r3, fp, r3
 800916e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009172:	bfda      	itte	le
 8009174:	f1c3 0320 	rsble	r3, r3, #32
 8009178:	fa06 f003 	lslle.w	r0, r6, r3
 800917c:	4318      	orrgt	r0, r3
 800917e:	f7f7 f9c9 	bl	8000514 <__aeabi_ui2d>
 8009182:	2301      	movs	r3, #1
 8009184:	4606      	mov	r6, r0
 8009186:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800918a:	3d01      	subs	r5, #1
 800918c:	930e      	str	r3, [sp, #56]	; 0x38
 800918e:	e76a      	b.n	8009066 <_dtoa_r+0x116>
 8009190:	2301      	movs	r3, #1
 8009192:	e7b2      	b.n	80090fa <_dtoa_r+0x1aa>
 8009194:	900b      	str	r0, [sp, #44]	; 0x2c
 8009196:	e7b1      	b.n	80090fc <_dtoa_r+0x1ac>
 8009198:	9b04      	ldr	r3, [sp, #16]
 800919a:	9a00      	ldr	r2, [sp, #0]
 800919c:	1a9b      	subs	r3, r3, r2
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	4253      	negs	r3, r2
 80091a2:	9307      	str	r3, [sp, #28]
 80091a4:	2300      	movs	r3, #0
 80091a6:	930a      	str	r3, [sp, #40]	; 0x28
 80091a8:	e7bf      	b.n	800912a <_dtoa_r+0x1da>
 80091aa:	2300      	movs	r3, #0
 80091ac:	9308      	str	r3, [sp, #32]
 80091ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	dc55      	bgt.n	8009260 <_dtoa_r+0x310>
 80091b4:	2301      	movs	r3, #1
 80091b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80091ba:	461a      	mov	r2, r3
 80091bc:	9209      	str	r2, [sp, #36]	; 0x24
 80091be:	e00c      	b.n	80091da <_dtoa_r+0x28a>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e7f3      	b.n	80091ac <_dtoa_r+0x25c>
 80091c4:	2300      	movs	r3, #0
 80091c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091c8:	9308      	str	r3, [sp, #32]
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	4413      	add	r3, r2
 80091ce:	9302      	str	r3, [sp, #8]
 80091d0:	3301      	adds	r3, #1
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	9303      	str	r3, [sp, #12]
 80091d6:	bfb8      	it	lt
 80091d8:	2301      	movlt	r3, #1
 80091da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091dc:	2200      	movs	r2, #0
 80091de:	6042      	str	r2, [r0, #4]
 80091e0:	2204      	movs	r2, #4
 80091e2:	f102 0614 	add.w	r6, r2, #20
 80091e6:	429e      	cmp	r6, r3
 80091e8:	6841      	ldr	r1, [r0, #4]
 80091ea:	d93d      	bls.n	8009268 <_dtoa_r+0x318>
 80091ec:	4620      	mov	r0, r4
 80091ee:	f001 f83d 	bl	800a26c <_Balloc>
 80091f2:	9001      	str	r0, [sp, #4]
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d13b      	bne.n	8009270 <_dtoa_r+0x320>
 80091f8:	4b11      	ldr	r3, [pc, #68]	; (8009240 <_dtoa_r+0x2f0>)
 80091fa:	4602      	mov	r2, r0
 80091fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009200:	e6c0      	b.n	8008f84 <_dtoa_r+0x34>
 8009202:	2301      	movs	r3, #1
 8009204:	e7df      	b.n	80091c6 <_dtoa_r+0x276>
 8009206:	bf00      	nop
 8009208:	636f4361 	.word	0x636f4361
 800920c:	3fd287a7 	.word	0x3fd287a7
 8009210:	8b60c8b3 	.word	0x8b60c8b3
 8009214:	3fc68a28 	.word	0x3fc68a28
 8009218:	509f79fb 	.word	0x509f79fb
 800921c:	3fd34413 	.word	0x3fd34413
 8009220:	0800bcce 	.word	0x0800bcce
 8009224:	0800bce5 	.word	0x0800bce5
 8009228:	7ff00000 	.word	0x7ff00000
 800922c:	0800bcca 	.word	0x0800bcca
 8009230:	0800bcc1 	.word	0x0800bcc1
 8009234:	0800bb41 	.word	0x0800bb41
 8009238:	3ff80000 	.word	0x3ff80000
 800923c:	0800be50 	.word	0x0800be50
 8009240:	0800bd40 	.word	0x0800bd40
 8009244:	2501      	movs	r5, #1
 8009246:	2300      	movs	r3, #0
 8009248:	9306      	str	r3, [sp, #24]
 800924a:	9508      	str	r5, [sp, #32]
 800924c:	f04f 33ff 	mov.w	r3, #4294967295
 8009250:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009254:	2200      	movs	r2, #0
 8009256:	2312      	movs	r3, #18
 8009258:	e7b0      	b.n	80091bc <_dtoa_r+0x26c>
 800925a:	2301      	movs	r3, #1
 800925c:	9308      	str	r3, [sp, #32]
 800925e:	e7f5      	b.n	800924c <_dtoa_r+0x2fc>
 8009260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009262:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009266:	e7b8      	b.n	80091da <_dtoa_r+0x28a>
 8009268:	3101      	adds	r1, #1
 800926a:	6041      	str	r1, [r0, #4]
 800926c:	0052      	lsls	r2, r2, #1
 800926e:	e7b8      	b.n	80091e2 <_dtoa_r+0x292>
 8009270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009272:	9a01      	ldr	r2, [sp, #4]
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	2b0e      	cmp	r3, #14
 800927a:	f200 809d 	bhi.w	80093b8 <_dtoa_r+0x468>
 800927e:	2d00      	cmp	r5, #0
 8009280:	f000 809a 	beq.w	80093b8 <_dtoa_r+0x468>
 8009284:	9b00      	ldr	r3, [sp, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	dd32      	ble.n	80092f0 <_dtoa_r+0x3a0>
 800928a:	4ab7      	ldr	r2, [pc, #732]	; (8009568 <_dtoa_r+0x618>)
 800928c:	f003 030f 	and.w	r3, r3, #15
 8009290:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009294:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009298:	9b00      	ldr	r3, [sp, #0]
 800929a:	05d8      	lsls	r0, r3, #23
 800929c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80092a0:	d516      	bpl.n	80092d0 <_dtoa_r+0x380>
 80092a2:	4bb2      	ldr	r3, [pc, #712]	; (800956c <_dtoa_r+0x61c>)
 80092a4:	ec51 0b19 	vmov	r0, r1, d9
 80092a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092ac:	f7f7 fad6 	bl	800085c <__aeabi_ddiv>
 80092b0:	f007 070f 	and.w	r7, r7, #15
 80092b4:	4682      	mov	sl, r0
 80092b6:	468b      	mov	fp, r1
 80092b8:	2503      	movs	r5, #3
 80092ba:	4eac      	ldr	r6, [pc, #688]	; (800956c <_dtoa_r+0x61c>)
 80092bc:	b957      	cbnz	r7, 80092d4 <_dtoa_r+0x384>
 80092be:	4642      	mov	r2, r8
 80092c0:	464b      	mov	r3, r9
 80092c2:	4650      	mov	r0, sl
 80092c4:	4659      	mov	r1, fp
 80092c6:	f7f7 fac9 	bl	800085c <__aeabi_ddiv>
 80092ca:	4682      	mov	sl, r0
 80092cc:	468b      	mov	fp, r1
 80092ce:	e028      	b.n	8009322 <_dtoa_r+0x3d2>
 80092d0:	2502      	movs	r5, #2
 80092d2:	e7f2      	b.n	80092ba <_dtoa_r+0x36a>
 80092d4:	07f9      	lsls	r1, r7, #31
 80092d6:	d508      	bpl.n	80092ea <_dtoa_r+0x39a>
 80092d8:	4640      	mov	r0, r8
 80092da:	4649      	mov	r1, r9
 80092dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092e0:	f7f7 f992 	bl	8000608 <__aeabi_dmul>
 80092e4:	3501      	adds	r5, #1
 80092e6:	4680      	mov	r8, r0
 80092e8:	4689      	mov	r9, r1
 80092ea:	107f      	asrs	r7, r7, #1
 80092ec:	3608      	adds	r6, #8
 80092ee:	e7e5      	b.n	80092bc <_dtoa_r+0x36c>
 80092f0:	f000 809b 	beq.w	800942a <_dtoa_r+0x4da>
 80092f4:	9b00      	ldr	r3, [sp, #0]
 80092f6:	4f9d      	ldr	r7, [pc, #628]	; (800956c <_dtoa_r+0x61c>)
 80092f8:	425e      	negs	r6, r3
 80092fa:	4b9b      	ldr	r3, [pc, #620]	; (8009568 <_dtoa_r+0x618>)
 80092fc:	f006 020f 	and.w	r2, r6, #15
 8009300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	ec51 0b19 	vmov	r0, r1, d9
 800930c:	f7f7 f97c 	bl	8000608 <__aeabi_dmul>
 8009310:	1136      	asrs	r6, r6, #4
 8009312:	4682      	mov	sl, r0
 8009314:	468b      	mov	fp, r1
 8009316:	2300      	movs	r3, #0
 8009318:	2502      	movs	r5, #2
 800931a:	2e00      	cmp	r6, #0
 800931c:	d17a      	bne.n	8009414 <_dtoa_r+0x4c4>
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1d3      	bne.n	80092ca <_dtoa_r+0x37a>
 8009322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 8082 	beq.w	800942e <_dtoa_r+0x4de>
 800932a:	4b91      	ldr	r3, [pc, #580]	; (8009570 <_dtoa_r+0x620>)
 800932c:	2200      	movs	r2, #0
 800932e:	4650      	mov	r0, sl
 8009330:	4659      	mov	r1, fp
 8009332:	f7f7 fbdb 	bl	8000aec <__aeabi_dcmplt>
 8009336:	2800      	cmp	r0, #0
 8009338:	d079      	beq.n	800942e <_dtoa_r+0x4de>
 800933a:	9b03      	ldr	r3, [sp, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d076      	beq.n	800942e <_dtoa_r+0x4de>
 8009340:	9b02      	ldr	r3, [sp, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	dd36      	ble.n	80093b4 <_dtoa_r+0x464>
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	4650      	mov	r0, sl
 800934a:	4659      	mov	r1, fp
 800934c:	1e5f      	subs	r7, r3, #1
 800934e:	2200      	movs	r2, #0
 8009350:	4b88      	ldr	r3, [pc, #544]	; (8009574 <_dtoa_r+0x624>)
 8009352:	f7f7 f959 	bl	8000608 <__aeabi_dmul>
 8009356:	9e02      	ldr	r6, [sp, #8]
 8009358:	4682      	mov	sl, r0
 800935a:	468b      	mov	fp, r1
 800935c:	3501      	adds	r5, #1
 800935e:	4628      	mov	r0, r5
 8009360:	f7f7 f8e8 	bl	8000534 <__aeabi_i2d>
 8009364:	4652      	mov	r2, sl
 8009366:	465b      	mov	r3, fp
 8009368:	f7f7 f94e 	bl	8000608 <__aeabi_dmul>
 800936c:	4b82      	ldr	r3, [pc, #520]	; (8009578 <_dtoa_r+0x628>)
 800936e:	2200      	movs	r2, #0
 8009370:	f7f6 ff94 	bl	800029c <__adddf3>
 8009374:	46d0      	mov	r8, sl
 8009376:	46d9      	mov	r9, fp
 8009378:	4682      	mov	sl, r0
 800937a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800937e:	2e00      	cmp	r6, #0
 8009380:	d158      	bne.n	8009434 <_dtoa_r+0x4e4>
 8009382:	4b7e      	ldr	r3, [pc, #504]	; (800957c <_dtoa_r+0x62c>)
 8009384:	2200      	movs	r2, #0
 8009386:	4640      	mov	r0, r8
 8009388:	4649      	mov	r1, r9
 800938a:	f7f6 ff85 	bl	8000298 <__aeabi_dsub>
 800938e:	4652      	mov	r2, sl
 8009390:	465b      	mov	r3, fp
 8009392:	4680      	mov	r8, r0
 8009394:	4689      	mov	r9, r1
 8009396:	f7f7 fbc7 	bl	8000b28 <__aeabi_dcmpgt>
 800939a:	2800      	cmp	r0, #0
 800939c:	f040 8295 	bne.w	80098ca <_dtoa_r+0x97a>
 80093a0:	4652      	mov	r2, sl
 80093a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093a6:	4640      	mov	r0, r8
 80093a8:	4649      	mov	r1, r9
 80093aa:	f7f7 fb9f 	bl	8000aec <__aeabi_dcmplt>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f040 8289 	bne.w	80098c6 <_dtoa_r+0x976>
 80093b4:	ec5b ab19 	vmov	sl, fp, d9
 80093b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f2c0 8148 	blt.w	8009650 <_dtoa_r+0x700>
 80093c0:	9a00      	ldr	r2, [sp, #0]
 80093c2:	2a0e      	cmp	r2, #14
 80093c4:	f300 8144 	bgt.w	8009650 <_dtoa_r+0x700>
 80093c8:	4b67      	ldr	r3, [pc, #412]	; (8009568 <_dtoa_r+0x618>)
 80093ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f280 80d5 	bge.w	8009584 <_dtoa_r+0x634>
 80093da:	9b03      	ldr	r3, [sp, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f300 80d1 	bgt.w	8009584 <_dtoa_r+0x634>
 80093e2:	f040 826f 	bne.w	80098c4 <_dtoa_r+0x974>
 80093e6:	4b65      	ldr	r3, [pc, #404]	; (800957c <_dtoa_r+0x62c>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	4640      	mov	r0, r8
 80093ec:	4649      	mov	r1, r9
 80093ee:	f7f7 f90b 	bl	8000608 <__aeabi_dmul>
 80093f2:	4652      	mov	r2, sl
 80093f4:	465b      	mov	r3, fp
 80093f6:	f7f7 fb8d 	bl	8000b14 <__aeabi_dcmpge>
 80093fa:	9e03      	ldr	r6, [sp, #12]
 80093fc:	4637      	mov	r7, r6
 80093fe:	2800      	cmp	r0, #0
 8009400:	f040 8245 	bne.w	800988e <_dtoa_r+0x93e>
 8009404:	9d01      	ldr	r5, [sp, #4]
 8009406:	2331      	movs	r3, #49	; 0x31
 8009408:	f805 3b01 	strb.w	r3, [r5], #1
 800940c:	9b00      	ldr	r3, [sp, #0]
 800940e:	3301      	adds	r3, #1
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	e240      	b.n	8009896 <_dtoa_r+0x946>
 8009414:	07f2      	lsls	r2, r6, #31
 8009416:	d505      	bpl.n	8009424 <_dtoa_r+0x4d4>
 8009418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800941c:	f7f7 f8f4 	bl	8000608 <__aeabi_dmul>
 8009420:	3501      	adds	r5, #1
 8009422:	2301      	movs	r3, #1
 8009424:	1076      	asrs	r6, r6, #1
 8009426:	3708      	adds	r7, #8
 8009428:	e777      	b.n	800931a <_dtoa_r+0x3ca>
 800942a:	2502      	movs	r5, #2
 800942c:	e779      	b.n	8009322 <_dtoa_r+0x3d2>
 800942e:	9f00      	ldr	r7, [sp, #0]
 8009430:	9e03      	ldr	r6, [sp, #12]
 8009432:	e794      	b.n	800935e <_dtoa_r+0x40e>
 8009434:	9901      	ldr	r1, [sp, #4]
 8009436:	4b4c      	ldr	r3, [pc, #304]	; (8009568 <_dtoa_r+0x618>)
 8009438:	4431      	add	r1, r6
 800943a:	910d      	str	r1, [sp, #52]	; 0x34
 800943c:	9908      	ldr	r1, [sp, #32]
 800943e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009442:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009446:	2900      	cmp	r1, #0
 8009448:	d043      	beq.n	80094d2 <_dtoa_r+0x582>
 800944a:	494d      	ldr	r1, [pc, #308]	; (8009580 <_dtoa_r+0x630>)
 800944c:	2000      	movs	r0, #0
 800944e:	f7f7 fa05 	bl	800085c <__aeabi_ddiv>
 8009452:	4652      	mov	r2, sl
 8009454:	465b      	mov	r3, fp
 8009456:	f7f6 ff1f 	bl	8000298 <__aeabi_dsub>
 800945a:	9d01      	ldr	r5, [sp, #4]
 800945c:	4682      	mov	sl, r0
 800945e:	468b      	mov	fp, r1
 8009460:	4649      	mov	r1, r9
 8009462:	4640      	mov	r0, r8
 8009464:	f7f7 fb80 	bl	8000b68 <__aeabi_d2iz>
 8009468:	4606      	mov	r6, r0
 800946a:	f7f7 f863 	bl	8000534 <__aeabi_i2d>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4640      	mov	r0, r8
 8009474:	4649      	mov	r1, r9
 8009476:	f7f6 ff0f 	bl	8000298 <__aeabi_dsub>
 800947a:	3630      	adds	r6, #48	; 0x30
 800947c:	f805 6b01 	strb.w	r6, [r5], #1
 8009480:	4652      	mov	r2, sl
 8009482:	465b      	mov	r3, fp
 8009484:	4680      	mov	r8, r0
 8009486:	4689      	mov	r9, r1
 8009488:	f7f7 fb30 	bl	8000aec <__aeabi_dcmplt>
 800948c:	2800      	cmp	r0, #0
 800948e:	d163      	bne.n	8009558 <_dtoa_r+0x608>
 8009490:	4642      	mov	r2, r8
 8009492:	464b      	mov	r3, r9
 8009494:	4936      	ldr	r1, [pc, #216]	; (8009570 <_dtoa_r+0x620>)
 8009496:	2000      	movs	r0, #0
 8009498:	f7f6 fefe 	bl	8000298 <__aeabi_dsub>
 800949c:	4652      	mov	r2, sl
 800949e:	465b      	mov	r3, fp
 80094a0:	f7f7 fb24 	bl	8000aec <__aeabi_dcmplt>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f040 80b5 	bne.w	8009614 <_dtoa_r+0x6c4>
 80094aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ac:	429d      	cmp	r5, r3
 80094ae:	d081      	beq.n	80093b4 <_dtoa_r+0x464>
 80094b0:	4b30      	ldr	r3, [pc, #192]	; (8009574 <_dtoa_r+0x624>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	4650      	mov	r0, sl
 80094b6:	4659      	mov	r1, fp
 80094b8:	f7f7 f8a6 	bl	8000608 <__aeabi_dmul>
 80094bc:	4b2d      	ldr	r3, [pc, #180]	; (8009574 <_dtoa_r+0x624>)
 80094be:	4682      	mov	sl, r0
 80094c0:	468b      	mov	fp, r1
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	2200      	movs	r2, #0
 80094c8:	f7f7 f89e 	bl	8000608 <__aeabi_dmul>
 80094cc:	4680      	mov	r8, r0
 80094ce:	4689      	mov	r9, r1
 80094d0:	e7c6      	b.n	8009460 <_dtoa_r+0x510>
 80094d2:	4650      	mov	r0, sl
 80094d4:	4659      	mov	r1, fp
 80094d6:	f7f7 f897 	bl	8000608 <__aeabi_dmul>
 80094da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094dc:	9d01      	ldr	r5, [sp, #4]
 80094de:	930f      	str	r3, [sp, #60]	; 0x3c
 80094e0:	4682      	mov	sl, r0
 80094e2:	468b      	mov	fp, r1
 80094e4:	4649      	mov	r1, r9
 80094e6:	4640      	mov	r0, r8
 80094e8:	f7f7 fb3e 	bl	8000b68 <__aeabi_d2iz>
 80094ec:	4606      	mov	r6, r0
 80094ee:	f7f7 f821 	bl	8000534 <__aeabi_i2d>
 80094f2:	3630      	adds	r6, #48	; 0x30
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	4640      	mov	r0, r8
 80094fa:	4649      	mov	r1, r9
 80094fc:	f7f6 fecc 	bl	8000298 <__aeabi_dsub>
 8009500:	f805 6b01 	strb.w	r6, [r5], #1
 8009504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009506:	429d      	cmp	r5, r3
 8009508:	4680      	mov	r8, r0
 800950a:	4689      	mov	r9, r1
 800950c:	f04f 0200 	mov.w	r2, #0
 8009510:	d124      	bne.n	800955c <_dtoa_r+0x60c>
 8009512:	4b1b      	ldr	r3, [pc, #108]	; (8009580 <_dtoa_r+0x630>)
 8009514:	4650      	mov	r0, sl
 8009516:	4659      	mov	r1, fp
 8009518:	f7f6 fec0 	bl	800029c <__adddf3>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	4640      	mov	r0, r8
 8009522:	4649      	mov	r1, r9
 8009524:	f7f7 fb00 	bl	8000b28 <__aeabi_dcmpgt>
 8009528:	2800      	cmp	r0, #0
 800952a:	d173      	bne.n	8009614 <_dtoa_r+0x6c4>
 800952c:	4652      	mov	r2, sl
 800952e:	465b      	mov	r3, fp
 8009530:	4913      	ldr	r1, [pc, #76]	; (8009580 <_dtoa_r+0x630>)
 8009532:	2000      	movs	r0, #0
 8009534:	f7f6 feb0 	bl	8000298 <__aeabi_dsub>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4640      	mov	r0, r8
 800953e:	4649      	mov	r1, r9
 8009540:	f7f7 fad4 	bl	8000aec <__aeabi_dcmplt>
 8009544:	2800      	cmp	r0, #0
 8009546:	f43f af35 	beq.w	80093b4 <_dtoa_r+0x464>
 800954a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800954c:	1e6b      	subs	r3, r5, #1
 800954e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009550:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009554:	2b30      	cmp	r3, #48	; 0x30
 8009556:	d0f8      	beq.n	800954a <_dtoa_r+0x5fa>
 8009558:	9700      	str	r7, [sp, #0]
 800955a:	e049      	b.n	80095f0 <_dtoa_r+0x6a0>
 800955c:	4b05      	ldr	r3, [pc, #20]	; (8009574 <_dtoa_r+0x624>)
 800955e:	f7f7 f853 	bl	8000608 <__aeabi_dmul>
 8009562:	4680      	mov	r8, r0
 8009564:	4689      	mov	r9, r1
 8009566:	e7bd      	b.n	80094e4 <_dtoa_r+0x594>
 8009568:	0800be50 	.word	0x0800be50
 800956c:	0800be28 	.word	0x0800be28
 8009570:	3ff00000 	.word	0x3ff00000
 8009574:	40240000 	.word	0x40240000
 8009578:	401c0000 	.word	0x401c0000
 800957c:	40140000 	.word	0x40140000
 8009580:	3fe00000 	.word	0x3fe00000
 8009584:	9d01      	ldr	r5, [sp, #4]
 8009586:	4656      	mov	r6, sl
 8009588:	465f      	mov	r7, fp
 800958a:	4642      	mov	r2, r8
 800958c:	464b      	mov	r3, r9
 800958e:	4630      	mov	r0, r6
 8009590:	4639      	mov	r1, r7
 8009592:	f7f7 f963 	bl	800085c <__aeabi_ddiv>
 8009596:	f7f7 fae7 	bl	8000b68 <__aeabi_d2iz>
 800959a:	4682      	mov	sl, r0
 800959c:	f7f6 ffca 	bl	8000534 <__aeabi_i2d>
 80095a0:	4642      	mov	r2, r8
 80095a2:	464b      	mov	r3, r9
 80095a4:	f7f7 f830 	bl	8000608 <__aeabi_dmul>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	4630      	mov	r0, r6
 80095ae:	4639      	mov	r1, r7
 80095b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80095b4:	f7f6 fe70 	bl	8000298 <__aeabi_dsub>
 80095b8:	f805 6b01 	strb.w	r6, [r5], #1
 80095bc:	9e01      	ldr	r6, [sp, #4]
 80095be:	9f03      	ldr	r7, [sp, #12]
 80095c0:	1bae      	subs	r6, r5, r6
 80095c2:	42b7      	cmp	r7, r6
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	d135      	bne.n	8009636 <_dtoa_r+0x6e6>
 80095ca:	f7f6 fe67 	bl	800029c <__adddf3>
 80095ce:	4642      	mov	r2, r8
 80095d0:	464b      	mov	r3, r9
 80095d2:	4606      	mov	r6, r0
 80095d4:	460f      	mov	r7, r1
 80095d6:	f7f7 faa7 	bl	8000b28 <__aeabi_dcmpgt>
 80095da:	b9d0      	cbnz	r0, 8009612 <_dtoa_r+0x6c2>
 80095dc:	4642      	mov	r2, r8
 80095de:	464b      	mov	r3, r9
 80095e0:	4630      	mov	r0, r6
 80095e2:	4639      	mov	r1, r7
 80095e4:	f7f7 fa78 	bl	8000ad8 <__aeabi_dcmpeq>
 80095e8:	b110      	cbz	r0, 80095f0 <_dtoa_r+0x6a0>
 80095ea:	f01a 0f01 	tst.w	sl, #1
 80095ee:	d110      	bne.n	8009612 <_dtoa_r+0x6c2>
 80095f0:	4620      	mov	r0, r4
 80095f2:	ee18 1a10 	vmov	r1, s16
 80095f6:	f000 fe79 	bl	800a2ec <_Bfree>
 80095fa:	2300      	movs	r3, #0
 80095fc:	9800      	ldr	r0, [sp, #0]
 80095fe:	702b      	strb	r3, [r5, #0]
 8009600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009602:	3001      	adds	r0, #1
 8009604:	6018      	str	r0, [r3, #0]
 8009606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009608:	2b00      	cmp	r3, #0
 800960a:	f43f acf1 	beq.w	8008ff0 <_dtoa_r+0xa0>
 800960e:	601d      	str	r5, [r3, #0]
 8009610:	e4ee      	b.n	8008ff0 <_dtoa_r+0xa0>
 8009612:	9f00      	ldr	r7, [sp, #0]
 8009614:	462b      	mov	r3, r5
 8009616:	461d      	mov	r5, r3
 8009618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800961c:	2a39      	cmp	r2, #57	; 0x39
 800961e:	d106      	bne.n	800962e <_dtoa_r+0x6de>
 8009620:	9a01      	ldr	r2, [sp, #4]
 8009622:	429a      	cmp	r2, r3
 8009624:	d1f7      	bne.n	8009616 <_dtoa_r+0x6c6>
 8009626:	9901      	ldr	r1, [sp, #4]
 8009628:	2230      	movs	r2, #48	; 0x30
 800962a:	3701      	adds	r7, #1
 800962c:	700a      	strb	r2, [r1, #0]
 800962e:	781a      	ldrb	r2, [r3, #0]
 8009630:	3201      	adds	r2, #1
 8009632:	701a      	strb	r2, [r3, #0]
 8009634:	e790      	b.n	8009558 <_dtoa_r+0x608>
 8009636:	4ba6      	ldr	r3, [pc, #664]	; (80098d0 <_dtoa_r+0x980>)
 8009638:	2200      	movs	r2, #0
 800963a:	f7f6 ffe5 	bl	8000608 <__aeabi_dmul>
 800963e:	2200      	movs	r2, #0
 8009640:	2300      	movs	r3, #0
 8009642:	4606      	mov	r6, r0
 8009644:	460f      	mov	r7, r1
 8009646:	f7f7 fa47 	bl	8000ad8 <__aeabi_dcmpeq>
 800964a:	2800      	cmp	r0, #0
 800964c:	d09d      	beq.n	800958a <_dtoa_r+0x63a>
 800964e:	e7cf      	b.n	80095f0 <_dtoa_r+0x6a0>
 8009650:	9a08      	ldr	r2, [sp, #32]
 8009652:	2a00      	cmp	r2, #0
 8009654:	f000 80d7 	beq.w	8009806 <_dtoa_r+0x8b6>
 8009658:	9a06      	ldr	r2, [sp, #24]
 800965a:	2a01      	cmp	r2, #1
 800965c:	f300 80ba 	bgt.w	80097d4 <_dtoa_r+0x884>
 8009660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009662:	2a00      	cmp	r2, #0
 8009664:	f000 80b2 	beq.w	80097cc <_dtoa_r+0x87c>
 8009668:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800966c:	9e07      	ldr	r6, [sp, #28]
 800966e:	9d04      	ldr	r5, [sp, #16]
 8009670:	9a04      	ldr	r2, [sp, #16]
 8009672:	441a      	add	r2, r3
 8009674:	9204      	str	r2, [sp, #16]
 8009676:	9a05      	ldr	r2, [sp, #20]
 8009678:	2101      	movs	r1, #1
 800967a:	441a      	add	r2, r3
 800967c:	4620      	mov	r0, r4
 800967e:	9205      	str	r2, [sp, #20]
 8009680:	f000 ff36 	bl	800a4f0 <__i2b>
 8009684:	4607      	mov	r7, r0
 8009686:	2d00      	cmp	r5, #0
 8009688:	dd0c      	ble.n	80096a4 <_dtoa_r+0x754>
 800968a:	9b05      	ldr	r3, [sp, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	dd09      	ble.n	80096a4 <_dtoa_r+0x754>
 8009690:	42ab      	cmp	r3, r5
 8009692:	9a04      	ldr	r2, [sp, #16]
 8009694:	bfa8      	it	ge
 8009696:	462b      	movge	r3, r5
 8009698:	1ad2      	subs	r2, r2, r3
 800969a:	9204      	str	r2, [sp, #16]
 800969c:	9a05      	ldr	r2, [sp, #20]
 800969e:	1aed      	subs	r5, r5, r3
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	9305      	str	r3, [sp, #20]
 80096a4:	9b07      	ldr	r3, [sp, #28]
 80096a6:	b31b      	cbz	r3, 80096f0 <_dtoa_r+0x7a0>
 80096a8:	9b08      	ldr	r3, [sp, #32]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80af 	beq.w	800980e <_dtoa_r+0x8be>
 80096b0:	2e00      	cmp	r6, #0
 80096b2:	dd13      	ble.n	80096dc <_dtoa_r+0x78c>
 80096b4:	4639      	mov	r1, r7
 80096b6:	4632      	mov	r2, r6
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 ffd9 	bl	800a670 <__pow5mult>
 80096be:	ee18 2a10 	vmov	r2, s16
 80096c2:	4601      	mov	r1, r0
 80096c4:	4607      	mov	r7, r0
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 ff28 	bl	800a51c <__multiply>
 80096cc:	ee18 1a10 	vmov	r1, s16
 80096d0:	4680      	mov	r8, r0
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 fe0a 	bl	800a2ec <_Bfree>
 80096d8:	ee08 8a10 	vmov	s16, r8
 80096dc:	9b07      	ldr	r3, [sp, #28]
 80096de:	1b9a      	subs	r2, r3, r6
 80096e0:	d006      	beq.n	80096f0 <_dtoa_r+0x7a0>
 80096e2:	ee18 1a10 	vmov	r1, s16
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 ffc2 	bl	800a670 <__pow5mult>
 80096ec:	ee08 0a10 	vmov	s16, r0
 80096f0:	2101      	movs	r1, #1
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 fefc 	bl	800a4f0 <__i2b>
 80096f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	4606      	mov	r6, r0
 80096fe:	f340 8088 	ble.w	8009812 <_dtoa_r+0x8c2>
 8009702:	461a      	mov	r2, r3
 8009704:	4601      	mov	r1, r0
 8009706:	4620      	mov	r0, r4
 8009708:	f000 ffb2 	bl	800a670 <__pow5mult>
 800970c:	9b06      	ldr	r3, [sp, #24]
 800970e:	2b01      	cmp	r3, #1
 8009710:	4606      	mov	r6, r0
 8009712:	f340 8081 	ble.w	8009818 <_dtoa_r+0x8c8>
 8009716:	f04f 0800 	mov.w	r8, #0
 800971a:	6933      	ldr	r3, [r6, #16]
 800971c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009720:	6918      	ldr	r0, [r3, #16]
 8009722:	f000 fe95 	bl	800a450 <__hi0bits>
 8009726:	f1c0 0020 	rsb	r0, r0, #32
 800972a:	9b05      	ldr	r3, [sp, #20]
 800972c:	4418      	add	r0, r3
 800972e:	f010 001f 	ands.w	r0, r0, #31
 8009732:	f000 8092 	beq.w	800985a <_dtoa_r+0x90a>
 8009736:	f1c0 0320 	rsb	r3, r0, #32
 800973a:	2b04      	cmp	r3, #4
 800973c:	f340 808a 	ble.w	8009854 <_dtoa_r+0x904>
 8009740:	f1c0 001c 	rsb	r0, r0, #28
 8009744:	9b04      	ldr	r3, [sp, #16]
 8009746:	4403      	add	r3, r0
 8009748:	9304      	str	r3, [sp, #16]
 800974a:	9b05      	ldr	r3, [sp, #20]
 800974c:	4403      	add	r3, r0
 800974e:	4405      	add	r5, r0
 8009750:	9305      	str	r3, [sp, #20]
 8009752:	9b04      	ldr	r3, [sp, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	dd07      	ble.n	8009768 <_dtoa_r+0x818>
 8009758:	ee18 1a10 	vmov	r1, s16
 800975c:	461a      	mov	r2, r3
 800975e:	4620      	mov	r0, r4
 8009760:	f000 ffe0 	bl	800a724 <__lshift>
 8009764:	ee08 0a10 	vmov	s16, r0
 8009768:	9b05      	ldr	r3, [sp, #20]
 800976a:	2b00      	cmp	r3, #0
 800976c:	dd05      	ble.n	800977a <_dtoa_r+0x82a>
 800976e:	4631      	mov	r1, r6
 8009770:	461a      	mov	r2, r3
 8009772:	4620      	mov	r0, r4
 8009774:	f000 ffd6 	bl	800a724 <__lshift>
 8009778:	4606      	mov	r6, r0
 800977a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800977c:	2b00      	cmp	r3, #0
 800977e:	d06e      	beq.n	800985e <_dtoa_r+0x90e>
 8009780:	ee18 0a10 	vmov	r0, s16
 8009784:	4631      	mov	r1, r6
 8009786:	f001 f83d 	bl	800a804 <__mcmp>
 800978a:	2800      	cmp	r0, #0
 800978c:	da67      	bge.n	800985e <_dtoa_r+0x90e>
 800978e:	9b00      	ldr	r3, [sp, #0]
 8009790:	3b01      	subs	r3, #1
 8009792:	ee18 1a10 	vmov	r1, s16
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	220a      	movs	r2, #10
 800979a:	2300      	movs	r3, #0
 800979c:	4620      	mov	r0, r4
 800979e:	f000 fdc7 	bl	800a330 <__multadd>
 80097a2:	9b08      	ldr	r3, [sp, #32]
 80097a4:	ee08 0a10 	vmov	s16, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 81b1 	beq.w	8009b10 <_dtoa_r+0xbc0>
 80097ae:	2300      	movs	r3, #0
 80097b0:	4639      	mov	r1, r7
 80097b2:	220a      	movs	r2, #10
 80097b4:	4620      	mov	r0, r4
 80097b6:	f000 fdbb 	bl	800a330 <__multadd>
 80097ba:	9b02      	ldr	r3, [sp, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	4607      	mov	r7, r0
 80097c0:	f300 808e 	bgt.w	80098e0 <_dtoa_r+0x990>
 80097c4:	9b06      	ldr	r3, [sp, #24]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	dc51      	bgt.n	800986e <_dtoa_r+0x91e>
 80097ca:	e089      	b.n	80098e0 <_dtoa_r+0x990>
 80097cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80097d2:	e74b      	b.n	800966c <_dtoa_r+0x71c>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	1e5e      	subs	r6, r3, #1
 80097d8:	9b07      	ldr	r3, [sp, #28]
 80097da:	42b3      	cmp	r3, r6
 80097dc:	bfbf      	itttt	lt
 80097de:	9b07      	ldrlt	r3, [sp, #28]
 80097e0:	9607      	strlt	r6, [sp, #28]
 80097e2:	1af2      	sublt	r2, r6, r3
 80097e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80097e6:	bfb6      	itet	lt
 80097e8:	189b      	addlt	r3, r3, r2
 80097ea:	1b9e      	subge	r6, r3, r6
 80097ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	bfb8      	it	lt
 80097f2:	2600      	movlt	r6, #0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	bfb7      	itett	lt
 80097f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80097fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009800:	1a9d      	sublt	r5, r3, r2
 8009802:	2300      	movlt	r3, #0
 8009804:	e734      	b.n	8009670 <_dtoa_r+0x720>
 8009806:	9e07      	ldr	r6, [sp, #28]
 8009808:	9d04      	ldr	r5, [sp, #16]
 800980a:	9f08      	ldr	r7, [sp, #32]
 800980c:	e73b      	b.n	8009686 <_dtoa_r+0x736>
 800980e:	9a07      	ldr	r2, [sp, #28]
 8009810:	e767      	b.n	80096e2 <_dtoa_r+0x792>
 8009812:	9b06      	ldr	r3, [sp, #24]
 8009814:	2b01      	cmp	r3, #1
 8009816:	dc18      	bgt.n	800984a <_dtoa_r+0x8fa>
 8009818:	f1ba 0f00 	cmp.w	sl, #0
 800981c:	d115      	bne.n	800984a <_dtoa_r+0x8fa>
 800981e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009822:	b993      	cbnz	r3, 800984a <_dtoa_r+0x8fa>
 8009824:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009828:	0d1b      	lsrs	r3, r3, #20
 800982a:	051b      	lsls	r3, r3, #20
 800982c:	b183      	cbz	r3, 8009850 <_dtoa_r+0x900>
 800982e:	9b04      	ldr	r3, [sp, #16]
 8009830:	3301      	adds	r3, #1
 8009832:	9304      	str	r3, [sp, #16]
 8009834:	9b05      	ldr	r3, [sp, #20]
 8009836:	3301      	adds	r3, #1
 8009838:	9305      	str	r3, [sp, #20]
 800983a:	f04f 0801 	mov.w	r8, #1
 800983e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009840:	2b00      	cmp	r3, #0
 8009842:	f47f af6a 	bne.w	800971a <_dtoa_r+0x7ca>
 8009846:	2001      	movs	r0, #1
 8009848:	e76f      	b.n	800972a <_dtoa_r+0x7da>
 800984a:	f04f 0800 	mov.w	r8, #0
 800984e:	e7f6      	b.n	800983e <_dtoa_r+0x8ee>
 8009850:	4698      	mov	r8, r3
 8009852:	e7f4      	b.n	800983e <_dtoa_r+0x8ee>
 8009854:	f43f af7d 	beq.w	8009752 <_dtoa_r+0x802>
 8009858:	4618      	mov	r0, r3
 800985a:	301c      	adds	r0, #28
 800985c:	e772      	b.n	8009744 <_dtoa_r+0x7f4>
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	dc37      	bgt.n	80098d4 <_dtoa_r+0x984>
 8009864:	9b06      	ldr	r3, [sp, #24]
 8009866:	2b02      	cmp	r3, #2
 8009868:	dd34      	ble.n	80098d4 <_dtoa_r+0x984>
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	9302      	str	r3, [sp, #8]
 800986e:	9b02      	ldr	r3, [sp, #8]
 8009870:	b96b      	cbnz	r3, 800988e <_dtoa_r+0x93e>
 8009872:	4631      	mov	r1, r6
 8009874:	2205      	movs	r2, #5
 8009876:	4620      	mov	r0, r4
 8009878:	f000 fd5a 	bl	800a330 <__multadd>
 800987c:	4601      	mov	r1, r0
 800987e:	4606      	mov	r6, r0
 8009880:	ee18 0a10 	vmov	r0, s16
 8009884:	f000 ffbe 	bl	800a804 <__mcmp>
 8009888:	2800      	cmp	r0, #0
 800988a:	f73f adbb 	bgt.w	8009404 <_dtoa_r+0x4b4>
 800988e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009890:	9d01      	ldr	r5, [sp, #4]
 8009892:	43db      	mvns	r3, r3
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	f04f 0800 	mov.w	r8, #0
 800989a:	4631      	mov	r1, r6
 800989c:	4620      	mov	r0, r4
 800989e:	f000 fd25 	bl	800a2ec <_Bfree>
 80098a2:	2f00      	cmp	r7, #0
 80098a4:	f43f aea4 	beq.w	80095f0 <_dtoa_r+0x6a0>
 80098a8:	f1b8 0f00 	cmp.w	r8, #0
 80098ac:	d005      	beq.n	80098ba <_dtoa_r+0x96a>
 80098ae:	45b8      	cmp	r8, r7
 80098b0:	d003      	beq.n	80098ba <_dtoa_r+0x96a>
 80098b2:	4641      	mov	r1, r8
 80098b4:	4620      	mov	r0, r4
 80098b6:	f000 fd19 	bl	800a2ec <_Bfree>
 80098ba:	4639      	mov	r1, r7
 80098bc:	4620      	mov	r0, r4
 80098be:	f000 fd15 	bl	800a2ec <_Bfree>
 80098c2:	e695      	b.n	80095f0 <_dtoa_r+0x6a0>
 80098c4:	2600      	movs	r6, #0
 80098c6:	4637      	mov	r7, r6
 80098c8:	e7e1      	b.n	800988e <_dtoa_r+0x93e>
 80098ca:	9700      	str	r7, [sp, #0]
 80098cc:	4637      	mov	r7, r6
 80098ce:	e599      	b.n	8009404 <_dtoa_r+0x4b4>
 80098d0:	40240000 	.word	0x40240000
 80098d4:	9b08      	ldr	r3, [sp, #32]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 80ca 	beq.w	8009a70 <_dtoa_r+0xb20>
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	9302      	str	r3, [sp, #8]
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	dd05      	ble.n	80098f0 <_dtoa_r+0x9a0>
 80098e4:	4639      	mov	r1, r7
 80098e6:	462a      	mov	r2, r5
 80098e8:	4620      	mov	r0, r4
 80098ea:	f000 ff1b 	bl	800a724 <__lshift>
 80098ee:	4607      	mov	r7, r0
 80098f0:	f1b8 0f00 	cmp.w	r8, #0
 80098f4:	d05b      	beq.n	80099ae <_dtoa_r+0xa5e>
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	4620      	mov	r0, r4
 80098fa:	f000 fcb7 	bl	800a26c <_Balloc>
 80098fe:	4605      	mov	r5, r0
 8009900:	b928      	cbnz	r0, 800990e <_dtoa_r+0x9be>
 8009902:	4b87      	ldr	r3, [pc, #540]	; (8009b20 <_dtoa_r+0xbd0>)
 8009904:	4602      	mov	r2, r0
 8009906:	f240 21ea 	movw	r1, #746	; 0x2ea
 800990a:	f7ff bb3b 	b.w	8008f84 <_dtoa_r+0x34>
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	3202      	adds	r2, #2
 8009912:	0092      	lsls	r2, r2, #2
 8009914:	f107 010c 	add.w	r1, r7, #12
 8009918:	300c      	adds	r0, #12
 800991a:	f000 fc8d 	bl	800a238 <memcpy>
 800991e:	2201      	movs	r2, #1
 8009920:	4629      	mov	r1, r5
 8009922:	4620      	mov	r0, r4
 8009924:	f000 fefe 	bl	800a724 <__lshift>
 8009928:	9b01      	ldr	r3, [sp, #4]
 800992a:	f103 0901 	add.w	r9, r3, #1
 800992e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009932:	4413      	add	r3, r2
 8009934:	9305      	str	r3, [sp, #20]
 8009936:	f00a 0301 	and.w	r3, sl, #1
 800993a:	46b8      	mov	r8, r7
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	4607      	mov	r7, r0
 8009940:	4631      	mov	r1, r6
 8009942:	ee18 0a10 	vmov	r0, s16
 8009946:	f7ff fa77 	bl	8008e38 <quorem>
 800994a:	4641      	mov	r1, r8
 800994c:	9002      	str	r0, [sp, #8]
 800994e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009952:	ee18 0a10 	vmov	r0, s16
 8009956:	f000 ff55 	bl	800a804 <__mcmp>
 800995a:	463a      	mov	r2, r7
 800995c:	9003      	str	r0, [sp, #12]
 800995e:	4631      	mov	r1, r6
 8009960:	4620      	mov	r0, r4
 8009962:	f000 ff6b 	bl	800a83c <__mdiff>
 8009966:	68c2      	ldr	r2, [r0, #12]
 8009968:	f109 3bff 	add.w	fp, r9, #4294967295
 800996c:	4605      	mov	r5, r0
 800996e:	bb02      	cbnz	r2, 80099b2 <_dtoa_r+0xa62>
 8009970:	4601      	mov	r1, r0
 8009972:	ee18 0a10 	vmov	r0, s16
 8009976:	f000 ff45 	bl	800a804 <__mcmp>
 800997a:	4602      	mov	r2, r0
 800997c:	4629      	mov	r1, r5
 800997e:	4620      	mov	r0, r4
 8009980:	9207      	str	r2, [sp, #28]
 8009982:	f000 fcb3 	bl	800a2ec <_Bfree>
 8009986:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800998a:	ea43 0102 	orr.w	r1, r3, r2
 800998e:	9b04      	ldr	r3, [sp, #16]
 8009990:	430b      	orrs	r3, r1
 8009992:	464d      	mov	r5, r9
 8009994:	d10f      	bne.n	80099b6 <_dtoa_r+0xa66>
 8009996:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800999a:	d02a      	beq.n	80099f2 <_dtoa_r+0xaa2>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	dd02      	ble.n	80099a8 <_dtoa_r+0xa58>
 80099a2:	9b02      	ldr	r3, [sp, #8]
 80099a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80099a8:	f88b a000 	strb.w	sl, [fp]
 80099ac:	e775      	b.n	800989a <_dtoa_r+0x94a>
 80099ae:	4638      	mov	r0, r7
 80099b0:	e7ba      	b.n	8009928 <_dtoa_r+0x9d8>
 80099b2:	2201      	movs	r2, #1
 80099b4:	e7e2      	b.n	800997c <_dtoa_r+0xa2c>
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	db04      	blt.n	80099c6 <_dtoa_r+0xa76>
 80099bc:	9906      	ldr	r1, [sp, #24]
 80099be:	430b      	orrs	r3, r1
 80099c0:	9904      	ldr	r1, [sp, #16]
 80099c2:	430b      	orrs	r3, r1
 80099c4:	d122      	bne.n	8009a0c <_dtoa_r+0xabc>
 80099c6:	2a00      	cmp	r2, #0
 80099c8:	ddee      	ble.n	80099a8 <_dtoa_r+0xa58>
 80099ca:	ee18 1a10 	vmov	r1, s16
 80099ce:	2201      	movs	r2, #1
 80099d0:	4620      	mov	r0, r4
 80099d2:	f000 fea7 	bl	800a724 <__lshift>
 80099d6:	4631      	mov	r1, r6
 80099d8:	ee08 0a10 	vmov	s16, r0
 80099dc:	f000 ff12 	bl	800a804 <__mcmp>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	dc03      	bgt.n	80099ec <_dtoa_r+0xa9c>
 80099e4:	d1e0      	bne.n	80099a8 <_dtoa_r+0xa58>
 80099e6:	f01a 0f01 	tst.w	sl, #1
 80099ea:	d0dd      	beq.n	80099a8 <_dtoa_r+0xa58>
 80099ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80099f0:	d1d7      	bne.n	80099a2 <_dtoa_r+0xa52>
 80099f2:	2339      	movs	r3, #57	; 0x39
 80099f4:	f88b 3000 	strb.w	r3, [fp]
 80099f8:	462b      	mov	r3, r5
 80099fa:	461d      	mov	r5, r3
 80099fc:	3b01      	subs	r3, #1
 80099fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a02:	2a39      	cmp	r2, #57	; 0x39
 8009a04:	d071      	beq.n	8009aea <_dtoa_r+0xb9a>
 8009a06:	3201      	adds	r2, #1
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	e746      	b.n	800989a <_dtoa_r+0x94a>
 8009a0c:	2a00      	cmp	r2, #0
 8009a0e:	dd07      	ble.n	8009a20 <_dtoa_r+0xad0>
 8009a10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a14:	d0ed      	beq.n	80099f2 <_dtoa_r+0xaa2>
 8009a16:	f10a 0301 	add.w	r3, sl, #1
 8009a1a:	f88b 3000 	strb.w	r3, [fp]
 8009a1e:	e73c      	b.n	800989a <_dtoa_r+0x94a>
 8009a20:	9b05      	ldr	r3, [sp, #20]
 8009a22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009a26:	4599      	cmp	r9, r3
 8009a28:	d047      	beq.n	8009aba <_dtoa_r+0xb6a>
 8009a2a:	ee18 1a10 	vmov	r1, s16
 8009a2e:	2300      	movs	r3, #0
 8009a30:	220a      	movs	r2, #10
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fc7c 	bl	800a330 <__multadd>
 8009a38:	45b8      	cmp	r8, r7
 8009a3a:	ee08 0a10 	vmov	s16, r0
 8009a3e:	f04f 0300 	mov.w	r3, #0
 8009a42:	f04f 020a 	mov.w	r2, #10
 8009a46:	4641      	mov	r1, r8
 8009a48:	4620      	mov	r0, r4
 8009a4a:	d106      	bne.n	8009a5a <_dtoa_r+0xb0a>
 8009a4c:	f000 fc70 	bl	800a330 <__multadd>
 8009a50:	4680      	mov	r8, r0
 8009a52:	4607      	mov	r7, r0
 8009a54:	f109 0901 	add.w	r9, r9, #1
 8009a58:	e772      	b.n	8009940 <_dtoa_r+0x9f0>
 8009a5a:	f000 fc69 	bl	800a330 <__multadd>
 8009a5e:	4639      	mov	r1, r7
 8009a60:	4680      	mov	r8, r0
 8009a62:	2300      	movs	r3, #0
 8009a64:	220a      	movs	r2, #10
 8009a66:	4620      	mov	r0, r4
 8009a68:	f000 fc62 	bl	800a330 <__multadd>
 8009a6c:	4607      	mov	r7, r0
 8009a6e:	e7f1      	b.n	8009a54 <_dtoa_r+0xb04>
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	9302      	str	r3, [sp, #8]
 8009a74:	9d01      	ldr	r5, [sp, #4]
 8009a76:	ee18 0a10 	vmov	r0, s16
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	f7ff f9dc 	bl	8008e38 <quorem>
 8009a80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a84:	9b01      	ldr	r3, [sp, #4]
 8009a86:	f805 ab01 	strb.w	sl, [r5], #1
 8009a8a:	1aea      	subs	r2, r5, r3
 8009a8c:	9b02      	ldr	r3, [sp, #8]
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	dd09      	ble.n	8009aa6 <_dtoa_r+0xb56>
 8009a92:	ee18 1a10 	vmov	r1, s16
 8009a96:	2300      	movs	r3, #0
 8009a98:	220a      	movs	r2, #10
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f000 fc48 	bl	800a330 <__multadd>
 8009aa0:	ee08 0a10 	vmov	s16, r0
 8009aa4:	e7e7      	b.n	8009a76 <_dtoa_r+0xb26>
 8009aa6:	9b02      	ldr	r3, [sp, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	bfc8      	it	gt
 8009aac:	461d      	movgt	r5, r3
 8009aae:	9b01      	ldr	r3, [sp, #4]
 8009ab0:	bfd8      	it	le
 8009ab2:	2501      	movle	r5, #1
 8009ab4:	441d      	add	r5, r3
 8009ab6:	f04f 0800 	mov.w	r8, #0
 8009aba:	ee18 1a10 	vmov	r1, s16
 8009abe:	2201      	movs	r2, #1
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fe2f 	bl	800a724 <__lshift>
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	ee08 0a10 	vmov	s16, r0
 8009acc:	f000 fe9a 	bl	800a804 <__mcmp>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	dc91      	bgt.n	80099f8 <_dtoa_r+0xaa8>
 8009ad4:	d102      	bne.n	8009adc <_dtoa_r+0xb8c>
 8009ad6:	f01a 0f01 	tst.w	sl, #1
 8009ada:	d18d      	bne.n	80099f8 <_dtoa_r+0xaa8>
 8009adc:	462b      	mov	r3, r5
 8009ade:	461d      	mov	r5, r3
 8009ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ae4:	2a30      	cmp	r2, #48	; 0x30
 8009ae6:	d0fa      	beq.n	8009ade <_dtoa_r+0xb8e>
 8009ae8:	e6d7      	b.n	800989a <_dtoa_r+0x94a>
 8009aea:	9a01      	ldr	r2, [sp, #4]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d184      	bne.n	80099fa <_dtoa_r+0xaaa>
 8009af0:	9b00      	ldr	r3, [sp, #0]
 8009af2:	3301      	adds	r3, #1
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	2331      	movs	r3, #49	; 0x31
 8009af8:	7013      	strb	r3, [r2, #0]
 8009afa:	e6ce      	b.n	800989a <_dtoa_r+0x94a>
 8009afc:	4b09      	ldr	r3, [pc, #36]	; (8009b24 <_dtoa_r+0xbd4>)
 8009afe:	f7ff ba95 	b.w	800902c <_dtoa_r+0xdc>
 8009b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f47f aa6e 	bne.w	8008fe6 <_dtoa_r+0x96>
 8009b0a:	4b07      	ldr	r3, [pc, #28]	; (8009b28 <_dtoa_r+0xbd8>)
 8009b0c:	f7ff ba8e 	b.w	800902c <_dtoa_r+0xdc>
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dcae      	bgt.n	8009a74 <_dtoa_r+0xb24>
 8009b16:	9b06      	ldr	r3, [sp, #24]
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	f73f aea8 	bgt.w	800986e <_dtoa_r+0x91e>
 8009b1e:	e7a9      	b.n	8009a74 <_dtoa_r+0xb24>
 8009b20:	0800bd40 	.word	0x0800bd40
 8009b24:	0800bb40 	.word	0x0800bb40
 8009b28:	0800bcc1 	.word	0x0800bcc1

08009b2c <rshift>:
 8009b2c:	6903      	ldr	r3, [r0, #16]
 8009b2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009b32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009b3a:	f100 0414 	add.w	r4, r0, #20
 8009b3e:	dd45      	ble.n	8009bcc <rshift+0xa0>
 8009b40:	f011 011f 	ands.w	r1, r1, #31
 8009b44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b4c:	d10c      	bne.n	8009b68 <rshift+0x3c>
 8009b4e:	f100 0710 	add.w	r7, r0, #16
 8009b52:	4629      	mov	r1, r5
 8009b54:	42b1      	cmp	r1, r6
 8009b56:	d334      	bcc.n	8009bc2 <rshift+0x96>
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	1eea      	subs	r2, r5, #3
 8009b5e:	4296      	cmp	r6, r2
 8009b60:	bf38      	it	cc
 8009b62:	2300      	movcc	r3, #0
 8009b64:	4423      	add	r3, r4
 8009b66:	e015      	b.n	8009b94 <rshift+0x68>
 8009b68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b6c:	f1c1 0820 	rsb	r8, r1, #32
 8009b70:	40cf      	lsrs	r7, r1
 8009b72:	f105 0e04 	add.w	lr, r5, #4
 8009b76:	46a1      	mov	r9, r4
 8009b78:	4576      	cmp	r6, lr
 8009b7a:	46f4      	mov	ip, lr
 8009b7c:	d815      	bhi.n	8009baa <rshift+0x7e>
 8009b7e:	1a9a      	subs	r2, r3, r2
 8009b80:	0092      	lsls	r2, r2, #2
 8009b82:	3a04      	subs	r2, #4
 8009b84:	3501      	adds	r5, #1
 8009b86:	42ae      	cmp	r6, r5
 8009b88:	bf38      	it	cc
 8009b8a:	2200      	movcc	r2, #0
 8009b8c:	18a3      	adds	r3, r4, r2
 8009b8e:	50a7      	str	r7, [r4, r2]
 8009b90:	b107      	cbz	r7, 8009b94 <rshift+0x68>
 8009b92:	3304      	adds	r3, #4
 8009b94:	1b1a      	subs	r2, r3, r4
 8009b96:	42a3      	cmp	r3, r4
 8009b98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b9c:	bf08      	it	eq
 8009b9e:	2300      	moveq	r3, #0
 8009ba0:	6102      	str	r2, [r0, #16]
 8009ba2:	bf08      	it	eq
 8009ba4:	6143      	streq	r3, [r0, #20]
 8009ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009baa:	f8dc c000 	ldr.w	ip, [ip]
 8009bae:	fa0c fc08 	lsl.w	ip, ip, r8
 8009bb2:	ea4c 0707 	orr.w	r7, ip, r7
 8009bb6:	f849 7b04 	str.w	r7, [r9], #4
 8009bba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bbe:	40cf      	lsrs	r7, r1
 8009bc0:	e7da      	b.n	8009b78 <rshift+0x4c>
 8009bc2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009bc6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009bca:	e7c3      	b.n	8009b54 <rshift+0x28>
 8009bcc:	4623      	mov	r3, r4
 8009bce:	e7e1      	b.n	8009b94 <rshift+0x68>

08009bd0 <__hexdig_fun>:
 8009bd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009bd4:	2b09      	cmp	r3, #9
 8009bd6:	d802      	bhi.n	8009bde <__hexdig_fun+0xe>
 8009bd8:	3820      	subs	r0, #32
 8009bda:	b2c0      	uxtb	r0, r0
 8009bdc:	4770      	bx	lr
 8009bde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009be2:	2b05      	cmp	r3, #5
 8009be4:	d801      	bhi.n	8009bea <__hexdig_fun+0x1a>
 8009be6:	3847      	subs	r0, #71	; 0x47
 8009be8:	e7f7      	b.n	8009bda <__hexdig_fun+0xa>
 8009bea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009bee:	2b05      	cmp	r3, #5
 8009bf0:	d801      	bhi.n	8009bf6 <__hexdig_fun+0x26>
 8009bf2:	3827      	subs	r0, #39	; 0x27
 8009bf4:	e7f1      	b.n	8009bda <__hexdig_fun+0xa>
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	4770      	bx	lr
	...

08009bfc <__gethex>:
 8009bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	ed2d 8b02 	vpush	{d8}
 8009c04:	b089      	sub	sp, #36	; 0x24
 8009c06:	ee08 0a10 	vmov	s16, r0
 8009c0a:	9304      	str	r3, [sp, #16]
 8009c0c:	4bb4      	ldr	r3, [pc, #720]	; (8009ee0 <__gethex+0x2e4>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	4618      	mov	r0, r3
 8009c14:	468b      	mov	fp, r1
 8009c16:	4690      	mov	r8, r2
 8009c18:	f7f6 fae2 	bl	80001e0 <strlen>
 8009c1c:	9b01      	ldr	r3, [sp, #4]
 8009c1e:	f8db 2000 	ldr.w	r2, [fp]
 8009c22:	4403      	add	r3, r0
 8009c24:	4682      	mov	sl, r0
 8009c26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009c2a:	9305      	str	r3, [sp, #20]
 8009c2c:	1c93      	adds	r3, r2, #2
 8009c2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009c32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009c36:	32fe      	adds	r2, #254	; 0xfe
 8009c38:	18d1      	adds	r1, r2, r3
 8009c3a:	461f      	mov	r7, r3
 8009c3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009c40:	9100      	str	r1, [sp, #0]
 8009c42:	2830      	cmp	r0, #48	; 0x30
 8009c44:	d0f8      	beq.n	8009c38 <__gethex+0x3c>
 8009c46:	f7ff ffc3 	bl	8009bd0 <__hexdig_fun>
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d13a      	bne.n	8009cc6 <__gethex+0xca>
 8009c50:	9901      	ldr	r1, [sp, #4]
 8009c52:	4652      	mov	r2, sl
 8009c54:	4638      	mov	r0, r7
 8009c56:	f001 f943 	bl	800aee0 <strncmp>
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d168      	bne.n	8009d32 <__gethex+0x136>
 8009c60:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009c64:	eb07 060a 	add.w	r6, r7, sl
 8009c68:	f7ff ffb2 	bl	8009bd0 <__hexdig_fun>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d062      	beq.n	8009d36 <__gethex+0x13a>
 8009c70:	4633      	mov	r3, r6
 8009c72:	7818      	ldrb	r0, [r3, #0]
 8009c74:	2830      	cmp	r0, #48	; 0x30
 8009c76:	461f      	mov	r7, r3
 8009c78:	f103 0301 	add.w	r3, r3, #1
 8009c7c:	d0f9      	beq.n	8009c72 <__gethex+0x76>
 8009c7e:	f7ff ffa7 	bl	8009bd0 <__hexdig_fun>
 8009c82:	2301      	movs	r3, #1
 8009c84:	fab0 f480 	clz	r4, r0
 8009c88:	0964      	lsrs	r4, r4, #5
 8009c8a:	4635      	mov	r5, r6
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	463a      	mov	r2, r7
 8009c90:	4616      	mov	r6, r2
 8009c92:	3201      	adds	r2, #1
 8009c94:	7830      	ldrb	r0, [r6, #0]
 8009c96:	f7ff ff9b 	bl	8009bd0 <__hexdig_fun>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d1f8      	bne.n	8009c90 <__gethex+0x94>
 8009c9e:	9901      	ldr	r1, [sp, #4]
 8009ca0:	4652      	mov	r2, sl
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f001 f91c 	bl	800aee0 <strncmp>
 8009ca8:	b980      	cbnz	r0, 8009ccc <__gethex+0xd0>
 8009caa:	b94d      	cbnz	r5, 8009cc0 <__gethex+0xc4>
 8009cac:	eb06 050a 	add.w	r5, r6, sl
 8009cb0:	462a      	mov	r2, r5
 8009cb2:	4616      	mov	r6, r2
 8009cb4:	3201      	adds	r2, #1
 8009cb6:	7830      	ldrb	r0, [r6, #0]
 8009cb8:	f7ff ff8a 	bl	8009bd0 <__hexdig_fun>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d1f8      	bne.n	8009cb2 <__gethex+0xb6>
 8009cc0:	1bad      	subs	r5, r5, r6
 8009cc2:	00ad      	lsls	r5, r5, #2
 8009cc4:	e004      	b.n	8009cd0 <__gethex+0xd4>
 8009cc6:	2400      	movs	r4, #0
 8009cc8:	4625      	mov	r5, r4
 8009cca:	e7e0      	b.n	8009c8e <__gethex+0x92>
 8009ccc:	2d00      	cmp	r5, #0
 8009cce:	d1f7      	bne.n	8009cc0 <__gethex+0xc4>
 8009cd0:	7833      	ldrb	r3, [r6, #0]
 8009cd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009cd6:	2b50      	cmp	r3, #80	; 0x50
 8009cd8:	d13b      	bne.n	8009d52 <__gethex+0x156>
 8009cda:	7873      	ldrb	r3, [r6, #1]
 8009cdc:	2b2b      	cmp	r3, #43	; 0x2b
 8009cde:	d02c      	beq.n	8009d3a <__gethex+0x13e>
 8009ce0:	2b2d      	cmp	r3, #45	; 0x2d
 8009ce2:	d02e      	beq.n	8009d42 <__gethex+0x146>
 8009ce4:	1c71      	adds	r1, r6, #1
 8009ce6:	f04f 0900 	mov.w	r9, #0
 8009cea:	7808      	ldrb	r0, [r1, #0]
 8009cec:	f7ff ff70 	bl	8009bd0 <__hexdig_fun>
 8009cf0:	1e43      	subs	r3, r0, #1
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b18      	cmp	r3, #24
 8009cf6:	d82c      	bhi.n	8009d52 <__gethex+0x156>
 8009cf8:	f1a0 0210 	sub.w	r2, r0, #16
 8009cfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d00:	f7ff ff66 	bl	8009bd0 <__hexdig_fun>
 8009d04:	1e43      	subs	r3, r0, #1
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	2b18      	cmp	r3, #24
 8009d0a:	d91d      	bls.n	8009d48 <__gethex+0x14c>
 8009d0c:	f1b9 0f00 	cmp.w	r9, #0
 8009d10:	d000      	beq.n	8009d14 <__gethex+0x118>
 8009d12:	4252      	negs	r2, r2
 8009d14:	4415      	add	r5, r2
 8009d16:	f8cb 1000 	str.w	r1, [fp]
 8009d1a:	b1e4      	cbz	r4, 8009d56 <__gethex+0x15a>
 8009d1c:	9b00      	ldr	r3, [sp, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	bf14      	ite	ne
 8009d22:	2700      	movne	r7, #0
 8009d24:	2706      	moveq	r7, #6
 8009d26:	4638      	mov	r0, r7
 8009d28:	b009      	add	sp, #36	; 0x24
 8009d2a:	ecbd 8b02 	vpop	{d8}
 8009d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d32:	463e      	mov	r6, r7
 8009d34:	4625      	mov	r5, r4
 8009d36:	2401      	movs	r4, #1
 8009d38:	e7ca      	b.n	8009cd0 <__gethex+0xd4>
 8009d3a:	f04f 0900 	mov.w	r9, #0
 8009d3e:	1cb1      	adds	r1, r6, #2
 8009d40:	e7d3      	b.n	8009cea <__gethex+0xee>
 8009d42:	f04f 0901 	mov.w	r9, #1
 8009d46:	e7fa      	b.n	8009d3e <__gethex+0x142>
 8009d48:	230a      	movs	r3, #10
 8009d4a:	fb03 0202 	mla	r2, r3, r2, r0
 8009d4e:	3a10      	subs	r2, #16
 8009d50:	e7d4      	b.n	8009cfc <__gethex+0x100>
 8009d52:	4631      	mov	r1, r6
 8009d54:	e7df      	b.n	8009d16 <__gethex+0x11a>
 8009d56:	1bf3      	subs	r3, r6, r7
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	2b07      	cmp	r3, #7
 8009d5e:	dc0b      	bgt.n	8009d78 <__gethex+0x17c>
 8009d60:	ee18 0a10 	vmov	r0, s16
 8009d64:	f000 fa82 	bl	800a26c <_Balloc>
 8009d68:	4604      	mov	r4, r0
 8009d6a:	b940      	cbnz	r0, 8009d7e <__gethex+0x182>
 8009d6c:	4b5d      	ldr	r3, [pc, #372]	; (8009ee4 <__gethex+0x2e8>)
 8009d6e:	4602      	mov	r2, r0
 8009d70:	21de      	movs	r1, #222	; 0xde
 8009d72:	485d      	ldr	r0, [pc, #372]	; (8009ee8 <__gethex+0x2ec>)
 8009d74:	f001 f8d6 	bl	800af24 <__assert_func>
 8009d78:	3101      	adds	r1, #1
 8009d7a:	105b      	asrs	r3, r3, #1
 8009d7c:	e7ee      	b.n	8009d5c <__gethex+0x160>
 8009d7e:	f100 0914 	add.w	r9, r0, #20
 8009d82:	f04f 0b00 	mov.w	fp, #0
 8009d86:	f1ca 0301 	rsb	r3, sl, #1
 8009d8a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d8e:	f8cd b000 	str.w	fp, [sp]
 8009d92:	9306      	str	r3, [sp, #24]
 8009d94:	42b7      	cmp	r7, r6
 8009d96:	d340      	bcc.n	8009e1a <__gethex+0x21e>
 8009d98:	9802      	ldr	r0, [sp, #8]
 8009d9a:	9b00      	ldr	r3, [sp, #0]
 8009d9c:	f840 3b04 	str.w	r3, [r0], #4
 8009da0:	eba0 0009 	sub.w	r0, r0, r9
 8009da4:	1080      	asrs	r0, r0, #2
 8009da6:	0146      	lsls	r6, r0, #5
 8009da8:	6120      	str	r0, [r4, #16]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fb50 	bl	800a450 <__hi0bits>
 8009db0:	1a30      	subs	r0, r6, r0
 8009db2:	f8d8 6000 	ldr.w	r6, [r8]
 8009db6:	42b0      	cmp	r0, r6
 8009db8:	dd63      	ble.n	8009e82 <__gethex+0x286>
 8009dba:	1b87      	subs	r7, r0, r6
 8009dbc:	4639      	mov	r1, r7
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f000 fef4 	bl	800abac <__any_on>
 8009dc4:	4682      	mov	sl, r0
 8009dc6:	b1a8      	cbz	r0, 8009df4 <__gethex+0x1f8>
 8009dc8:	1e7b      	subs	r3, r7, #1
 8009dca:	1159      	asrs	r1, r3, #5
 8009dcc:	f003 021f 	and.w	r2, r3, #31
 8009dd0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009dd4:	f04f 0a01 	mov.w	sl, #1
 8009dd8:	fa0a f202 	lsl.w	r2, sl, r2
 8009ddc:	420a      	tst	r2, r1
 8009dde:	d009      	beq.n	8009df4 <__gethex+0x1f8>
 8009de0:	4553      	cmp	r3, sl
 8009de2:	dd05      	ble.n	8009df0 <__gethex+0x1f4>
 8009de4:	1eb9      	subs	r1, r7, #2
 8009de6:	4620      	mov	r0, r4
 8009de8:	f000 fee0 	bl	800abac <__any_on>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d145      	bne.n	8009e7c <__gethex+0x280>
 8009df0:	f04f 0a02 	mov.w	sl, #2
 8009df4:	4639      	mov	r1, r7
 8009df6:	4620      	mov	r0, r4
 8009df8:	f7ff fe98 	bl	8009b2c <rshift>
 8009dfc:	443d      	add	r5, r7
 8009dfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e02:	42ab      	cmp	r3, r5
 8009e04:	da4c      	bge.n	8009ea0 <__gethex+0x2a4>
 8009e06:	ee18 0a10 	vmov	r0, s16
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	f000 fa6e 	bl	800a2ec <_Bfree>
 8009e10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e12:	2300      	movs	r3, #0
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	27a3      	movs	r7, #163	; 0xa3
 8009e18:	e785      	b.n	8009d26 <__gethex+0x12a>
 8009e1a:	1e73      	subs	r3, r6, #1
 8009e1c:	9a05      	ldr	r2, [sp, #20]
 8009e1e:	9303      	str	r3, [sp, #12]
 8009e20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d019      	beq.n	8009e5c <__gethex+0x260>
 8009e28:	f1bb 0f20 	cmp.w	fp, #32
 8009e2c:	d107      	bne.n	8009e3e <__gethex+0x242>
 8009e2e:	9b02      	ldr	r3, [sp, #8]
 8009e30:	9a00      	ldr	r2, [sp, #0]
 8009e32:	f843 2b04 	str.w	r2, [r3], #4
 8009e36:	9302      	str	r3, [sp, #8]
 8009e38:	2300      	movs	r3, #0
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	469b      	mov	fp, r3
 8009e3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009e42:	f7ff fec5 	bl	8009bd0 <__hexdig_fun>
 8009e46:	9b00      	ldr	r3, [sp, #0]
 8009e48:	f000 000f 	and.w	r0, r0, #15
 8009e4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009e50:	4303      	orrs	r3, r0
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	f10b 0b04 	add.w	fp, fp, #4
 8009e58:	9b03      	ldr	r3, [sp, #12]
 8009e5a:	e00d      	b.n	8009e78 <__gethex+0x27c>
 8009e5c:	9b03      	ldr	r3, [sp, #12]
 8009e5e:	9a06      	ldr	r2, [sp, #24]
 8009e60:	4413      	add	r3, r2
 8009e62:	42bb      	cmp	r3, r7
 8009e64:	d3e0      	bcc.n	8009e28 <__gethex+0x22c>
 8009e66:	4618      	mov	r0, r3
 8009e68:	9901      	ldr	r1, [sp, #4]
 8009e6a:	9307      	str	r3, [sp, #28]
 8009e6c:	4652      	mov	r2, sl
 8009e6e:	f001 f837 	bl	800aee0 <strncmp>
 8009e72:	9b07      	ldr	r3, [sp, #28]
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d1d7      	bne.n	8009e28 <__gethex+0x22c>
 8009e78:	461e      	mov	r6, r3
 8009e7a:	e78b      	b.n	8009d94 <__gethex+0x198>
 8009e7c:	f04f 0a03 	mov.w	sl, #3
 8009e80:	e7b8      	b.n	8009df4 <__gethex+0x1f8>
 8009e82:	da0a      	bge.n	8009e9a <__gethex+0x29e>
 8009e84:	1a37      	subs	r7, r6, r0
 8009e86:	4621      	mov	r1, r4
 8009e88:	ee18 0a10 	vmov	r0, s16
 8009e8c:	463a      	mov	r2, r7
 8009e8e:	f000 fc49 	bl	800a724 <__lshift>
 8009e92:	1bed      	subs	r5, r5, r7
 8009e94:	4604      	mov	r4, r0
 8009e96:	f100 0914 	add.w	r9, r0, #20
 8009e9a:	f04f 0a00 	mov.w	sl, #0
 8009e9e:	e7ae      	b.n	8009dfe <__gethex+0x202>
 8009ea0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009ea4:	42a8      	cmp	r0, r5
 8009ea6:	dd72      	ble.n	8009f8e <__gethex+0x392>
 8009ea8:	1b45      	subs	r5, r0, r5
 8009eaa:	42ae      	cmp	r6, r5
 8009eac:	dc36      	bgt.n	8009f1c <__gethex+0x320>
 8009eae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d02a      	beq.n	8009f0c <__gethex+0x310>
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d02c      	beq.n	8009f14 <__gethex+0x318>
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d11c      	bne.n	8009ef8 <__gethex+0x2fc>
 8009ebe:	42ae      	cmp	r6, r5
 8009ec0:	d11a      	bne.n	8009ef8 <__gethex+0x2fc>
 8009ec2:	2e01      	cmp	r6, #1
 8009ec4:	d112      	bne.n	8009eec <__gethex+0x2f0>
 8009ec6:	9a04      	ldr	r2, [sp, #16]
 8009ec8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ecc:	6013      	str	r3, [r2, #0]
 8009ece:	2301      	movs	r3, #1
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	f8c9 3000 	str.w	r3, [r9]
 8009ed6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ed8:	2762      	movs	r7, #98	; 0x62
 8009eda:	601c      	str	r4, [r3, #0]
 8009edc:	e723      	b.n	8009d26 <__gethex+0x12a>
 8009ede:	bf00      	nop
 8009ee0:	0800bdb8 	.word	0x0800bdb8
 8009ee4:	0800bd40 	.word	0x0800bd40
 8009ee8:	0800bd51 	.word	0x0800bd51
 8009eec:	1e71      	subs	r1, r6, #1
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f000 fe5c 	bl	800abac <__any_on>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d1e6      	bne.n	8009ec6 <__gethex+0x2ca>
 8009ef8:	ee18 0a10 	vmov	r0, s16
 8009efc:	4621      	mov	r1, r4
 8009efe:	f000 f9f5 	bl	800a2ec <_Bfree>
 8009f02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f04:	2300      	movs	r3, #0
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	2750      	movs	r7, #80	; 0x50
 8009f0a:	e70c      	b.n	8009d26 <__gethex+0x12a>
 8009f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1f2      	bne.n	8009ef8 <__gethex+0x2fc>
 8009f12:	e7d8      	b.n	8009ec6 <__gethex+0x2ca>
 8009f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1d5      	bne.n	8009ec6 <__gethex+0x2ca>
 8009f1a:	e7ed      	b.n	8009ef8 <__gethex+0x2fc>
 8009f1c:	1e6f      	subs	r7, r5, #1
 8009f1e:	f1ba 0f00 	cmp.w	sl, #0
 8009f22:	d131      	bne.n	8009f88 <__gethex+0x38c>
 8009f24:	b127      	cbz	r7, 8009f30 <__gethex+0x334>
 8009f26:	4639      	mov	r1, r7
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 fe3f 	bl	800abac <__any_on>
 8009f2e:	4682      	mov	sl, r0
 8009f30:	117b      	asrs	r3, r7, #5
 8009f32:	2101      	movs	r1, #1
 8009f34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009f38:	f007 071f 	and.w	r7, r7, #31
 8009f3c:	fa01 f707 	lsl.w	r7, r1, r7
 8009f40:	421f      	tst	r7, r3
 8009f42:	4629      	mov	r1, r5
 8009f44:	4620      	mov	r0, r4
 8009f46:	bf18      	it	ne
 8009f48:	f04a 0a02 	orrne.w	sl, sl, #2
 8009f4c:	1b76      	subs	r6, r6, r5
 8009f4e:	f7ff fded 	bl	8009b2c <rshift>
 8009f52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f56:	2702      	movs	r7, #2
 8009f58:	f1ba 0f00 	cmp.w	sl, #0
 8009f5c:	d048      	beq.n	8009ff0 <__gethex+0x3f4>
 8009f5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d015      	beq.n	8009f92 <__gethex+0x396>
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	d017      	beq.n	8009f9a <__gethex+0x39e>
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d109      	bne.n	8009f82 <__gethex+0x386>
 8009f6e:	f01a 0f02 	tst.w	sl, #2
 8009f72:	d006      	beq.n	8009f82 <__gethex+0x386>
 8009f74:	f8d9 0000 	ldr.w	r0, [r9]
 8009f78:	ea4a 0a00 	orr.w	sl, sl, r0
 8009f7c:	f01a 0f01 	tst.w	sl, #1
 8009f80:	d10e      	bne.n	8009fa0 <__gethex+0x3a4>
 8009f82:	f047 0710 	orr.w	r7, r7, #16
 8009f86:	e033      	b.n	8009ff0 <__gethex+0x3f4>
 8009f88:	f04f 0a01 	mov.w	sl, #1
 8009f8c:	e7d0      	b.n	8009f30 <__gethex+0x334>
 8009f8e:	2701      	movs	r7, #1
 8009f90:	e7e2      	b.n	8009f58 <__gethex+0x35c>
 8009f92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f94:	f1c3 0301 	rsb	r3, r3, #1
 8009f98:	9315      	str	r3, [sp, #84]	; 0x54
 8009f9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0f0      	beq.n	8009f82 <__gethex+0x386>
 8009fa0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009fa4:	f104 0314 	add.w	r3, r4, #20
 8009fa8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009fac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009fb0:	f04f 0c00 	mov.w	ip, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009fbe:	d01c      	beq.n	8009ffa <__gethex+0x3fe>
 8009fc0:	3201      	adds	r2, #1
 8009fc2:	6002      	str	r2, [r0, #0]
 8009fc4:	2f02      	cmp	r7, #2
 8009fc6:	f104 0314 	add.w	r3, r4, #20
 8009fca:	d13f      	bne.n	800a04c <__gethex+0x450>
 8009fcc:	f8d8 2000 	ldr.w	r2, [r8]
 8009fd0:	3a01      	subs	r2, #1
 8009fd2:	42b2      	cmp	r2, r6
 8009fd4:	d10a      	bne.n	8009fec <__gethex+0x3f0>
 8009fd6:	1171      	asrs	r1, r6, #5
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fde:	f006 061f 	and.w	r6, r6, #31
 8009fe2:	fa02 f606 	lsl.w	r6, r2, r6
 8009fe6:	421e      	tst	r6, r3
 8009fe8:	bf18      	it	ne
 8009fea:	4617      	movne	r7, r2
 8009fec:	f047 0720 	orr.w	r7, r7, #32
 8009ff0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ff2:	601c      	str	r4, [r3, #0]
 8009ff4:	9b04      	ldr	r3, [sp, #16]
 8009ff6:	601d      	str	r5, [r3, #0]
 8009ff8:	e695      	b.n	8009d26 <__gethex+0x12a>
 8009ffa:	4299      	cmp	r1, r3
 8009ffc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a000:	d8d8      	bhi.n	8009fb4 <__gethex+0x3b8>
 800a002:	68a3      	ldr	r3, [r4, #8]
 800a004:	459b      	cmp	fp, r3
 800a006:	db19      	blt.n	800a03c <__gethex+0x440>
 800a008:	6861      	ldr	r1, [r4, #4]
 800a00a:	ee18 0a10 	vmov	r0, s16
 800a00e:	3101      	adds	r1, #1
 800a010:	f000 f92c 	bl	800a26c <_Balloc>
 800a014:	4681      	mov	r9, r0
 800a016:	b918      	cbnz	r0, 800a020 <__gethex+0x424>
 800a018:	4b1a      	ldr	r3, [pc, #104]	; (800a084 <__gethex+0x488>)
 800a01a:	4602      	mov	r2, r0
 800a01c:	2184      	movs	r1, #132	; 0x84
 800a01e:	e6a8      	b.n	8009d72 <__gethex+0x176>
 800a020:	6922      	ldr	r2, [r4, #16]
 800a022:	3202      	adds	r2, #2
 800a024:	f104 010c 	add.w	r1, r4, #12
 800a028:	0092      	lsls	r2, r2, #2
 800a02a:	300c      	adds	r0, #12
 800a02c:	f000 f904 	bl	800a238 <memcpy>
 800a030:	4621      	mov	r1, r4
 800a032:	ee18 0a10 	vmov	r0, s16
 800a036:	f000 f959 	bl	800a2ec <_Bfree>
 800a03a:	464c      	mov	r4, r9
 800a03c:	6923      	ldr	r3, [r4, #16]
 800a03e:	1c5a      	adds	r2, r3, #1
 800a040:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a044:	6122      	str	r2, [r4, #16]
 800a046:	2201      	movs	r2, #1
 800a048:	615a      	str	r2, [r3, #20]
 800a04a:	e7bb      	b.n	8009fc4 <__gethex+0x3c8>
 800a04c:	6922      	ldr	r2, [r4, #16]
 800a04e:	455a      	cmp	r2, fp
 800a050:	dd0b      	ble.n	800a06a <__gethex+0x46e>
 800a052:	2101      	movs	r1, #1
 800a054:	4620      	mov	r0, r4
 800a056:	f7ff fd69 	bl	8009b2c <rshift>
 800a05a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a05e:	3501      	adds	r5, #1
 800a060:	42ab      	cmp	r3, r5
 800a062:	f6ff aed0 	blt.w	8009e06 <__gethex+0x20a>
 800a066:	2701      	movs	r7, #1
 800a068:	e7c0      	b.n	8009fec <__gethex+0x3f0>
 800a06a:	f016 061f 	ands.w	r6, r6, #31
 800a06e:	d0fa      	beq.n	800a066 <__gethex+0x46a>
 800a070:	4453      	add	r3, sl
 800a072:	f1c6 0620 	rsb	r6, r6, #32
 800a076:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a07a:	f000 f9e9 	bl	800a450 <__hi0bits>
 800a07e:	42b0      	cmp	r0, r6
 800a080:	dbe7      	blt.n	800a052 <__gethex+0x456>
 800a082:	e7f0      	b.n	800a066 <__gethex+0x46a>
 800a084:	0800bd40 	.word	0x0800bd40

0800a088 <L_shift>:
 800a088:	f1c2 0208 	rsb	r2, r2, #8
 800a08c:	0092      	lsls	r2, r2, #2
 800a08e:	b570      	push	{r4, r5, r6, lr}
 800a090:	f1c2 0620 	rsb	r6, r2, #32
 800a094:	6843      	ldr	r3, [r0, #4]
 800a096:	6804      	ldr	r4, [r0, #0]
 800a098:	fa03 f506 	lsl.w	r5, r3, r6
 800a09c:	432c      	orrs	r4, r5
 800a09e:	40d3      	lsrs	r3, r2
 800a0a0:	6004      	str	r4, [r0, #0]
 800a0a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a0a6:	4288      	cmp	r0, r1
 800a0a8:	d3f4      	bcc.n	800a094 <L_shift+0xc>
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}

0800a0ac <__match>:
 800a0ac:	b530      	push	{r4, r5, lr}
 800a0ae:	6803      	ldr	r3, [r0, #0]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0b6:	b914      	cbnz	r4, 800a0be <__match+0x12>
 800a0b8:	6003      	str	r3, [r0, #0]
 800a0ba:	2001      	movs	r0, #1
 800a0bc:	bd30      	pop	{r4, r5, pc}
 800a0be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a0c6:	2d19      	cmp	r5, #25
 800a0c8:	bf98      	it	ls
 800a0ca:	3220      	addls	r2, #32
 800a0cc:	42a2      	cmp	r2, r4
 800a0ce:	d0f0      	beq.n	800a0b2 <__match+0x6>
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	e7f3      	b.n	800a0bc <__match+0x10>

0800a0d4 <__hexnan>:
 800a0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d8:	680b      	ldr	r3, [r1, #0]
 800a0da:	115e      	asrs	r6, r3, #5
 800a0dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a0e0:	f013 031f 	ands.w	r3, r3, #31
 800a0e4:	b087      	sub	sp, #28
 800a0e6:	bf18      	it	ne
 800a0e8:	3604      	addne	r6, #4
 800a0ea:	2500      	movs	r5, #0
 800a0ec:	1f37      	subs	r7, r6, #4
 800a0ee:	4690      	mov	r8, r2
 800a0f0:	6802      	ldr	r2, [r0, #0]
 800a0f2:	9301      	str	r3, [sp, #4]
 800a0f4:	4682      	mov	sl, r0
 800a0f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a0fa:	46b9      	mov	r9, r7
 800a0fc:	463c      	mov	r4, r7
 800a0fe:	9502      	str	r5, [sp, #8]
 800a100:	46ab      	mov	fp, r5
 800a102:	7851      	ldrb	r1, [r2, #1]
 800a104:	1c53      	adds	r3, r2, #1
 800a106:	9303      	str	r3, [sp, #12]
 800a108:	b341      	cbz	r1, 800a15c <__hexnan+0x88>
 800a10a:	4608      	mov	r0, r1
 800a10c:	9205      	str	r2, [sp, #20]
 800a10e:	9104      	str	r1, [sp, #16]
 800a110:	f7ff fd5e 	bl	8009bd0 <__hexdig_fun>
 800a114:	2800      	cmp	r0, #0
 800a116:	d14f      	bne.n	800a1b8 <__hexnan+0xe4>
 800a118:	9904      	ldr	r1, [sp, #16]
 800a11a:	9a05      	ldr	r2, [sp, #20]
 800a11c:	2920      	cmp	r1, #32
 800a11e:	d818      	bhi.n	800a152 <__hexnan+0x7e>
 800a120:	9b02      	ldr	r3, [sp, #8]
 800a122:	459b      	cmp	fp, r3
 800a124:	dd13      	ble.n	800a14e <__hexnan+0x7a>
 800a126:	454c      	cmp	r4, r9
 800a128:	d206      	bcs.n	800a138 <__hexnan+0x64>
 800a12a:	2d07      	cmp	r5, #7
 800a12c:	dc04      	bgt.n	800a138 <__hexnan+0x64>
 800a12e:	462a      	mov	r2, r5
 800a130:	4649      	mov	r1, r9
 800a132:	4620      	mov	r0, r4
 800a134:	f7ff ffa8 	bl	800a088 <L_shift>
 800a138:	4544      	cmp	r4, r8
 800a13a:	d950      	bls.n	800a1de <__hexnan+0x10a>
 800a13c:	2300      	movs	r3, #0
 800a13e:	f1a4 0904 	sub.w	r9, r4, #4
 800a142:	f844 3c04 	str.w	r3, [r4, #-4]
 800a146:	f8cd b008 	str.w	fp, [sp, #8]
 800a14a:	464c      	mov	r4, r9
 800a14c:	461d      	mov	r5, r3
 800a14e:	9a03      	ldr	r2, [sp, #12]
 800a150:	e7d7      	b.n	800a102 <__hexnan+0x2e>
 800a152:	2929      	cmp	r1, #41	; 0x29
 800a154:	d156      	bne.n	800a204 <__hexnan+0x130>
 800a156:	3202      	adds	r2, #2
 800a158:	f8ca 2000 	str.w	r2, [sl]
 800a15c:	f1bb 0f00 	cmp.w	fp, #0
 800a160:	d050      	beq.n	800a204 <__hexnan+0x130>
 800a162:	454c      	cmp	r4, r9
 800a164:	d206      	bcs.n	800a174 <__hexnan+0xa0>
 800a166:	2d07      	cmp	r5, #7
 800a168:	dc04      	bgt.n	800a174 <__hexnan+0xa0>
 800a16a:	462a      	mov	r2, r5
 800a16c:	4649      	mov	r1, r9
 800a16e:	4620      	mov	r0, r4
 800a170:	f7ff ff8a 	bl	800a088 <L_shift>
 800a174:	4544      	cmp	r4, r8
 800a176:	d934      	bls.n	800a1e2 <__hexnan+0x10e>
 800a178:	f1a8 0204 	sub.w	r2, r8, #4
 800a17c:	4623      	mov	r3, r4
 800a17e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a182:	f842 1f04 	str.w	r1, [r2, #4]!
 800a186:	429f      	cmp	r7, r3
 800a188:	d2f9      	bcs.n	800a17e <__hexnan+0xaa>
 800a18a:	1b3b      	subs	r3, r7, r4
 800a18c:	f023 0303 	bic.w	r3, r3, #3
 800a190:	3304      	adds	r3, #4
 800a192:	3401      	adds	r4, #1
 800a194:	3e03      	subs	r6, #3
 800a196:	42b4      	cmp	r4, r6
 800a198:	bf88      	it	hi
 800a19a:	2304      	movhi	r3, #4
 800a19c:	4443      	add	r3, r8
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f843 2b04 	str.w	r2, [r3], #4
 800a1a4:	429f      	cmp	r7, r3
 800a1a6:	d2fb      	bcs.n	800a1a0 <__hexnan+0xcc>
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	b91b      	cbnz	r3, 800a1b4 <__hexnan+0xe0>
 800a1ac:	4547      	cmp	r7, r8
 800a1ae:	d127      	bne.n	800a200 <__hexnan+0x12c>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	603b      	str	r3, [r7, #0]
 800a1b4:	2005      	movs	r0, #5
 800a1b6:	e026      	b.n	800a206 <__hexnan+0x132>
 800a1b8:	3501      	adds	r5, #1
 800a1ba:	2d08      	cmp	r5, #8
 800a1bc:	f10b 0b01 	add.w	fp, fp, #1
 800a1c0:	dd06      	ble.n	800a1d0 <__hexnan+0xfc>
 800a1c2:	4544      	cmp	r4, r8
 800a1c4:	d9c3      	bls.n	800a14e <__hexnan+0x7a>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1cc:	2501      	movs	r5, #1
 800a1ce:	3c04      	subs	r4, #4
 800a1d0:	6822      	ldr	r2, [r4, #0]
 800a1d2:	f000 000f 	and.w	r0, r0, #15
 800a1d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a1da:	6022      	str	r2, [r4, #0]
 800a1dc:	e7b7      	b.n	800a14e <__hexnan+0x7a>
 800a1de:	2508      	movs	r5, #8
 800a1e0:	e7b5      	b.n	800a14e <__hexnan+0x7a>
 800a1e2:	9b01      	ldr	r3, [sp, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d0df      	beq.n	800a1a8 <__hexnan+0xd4>
 800a1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ec:	f1c3 0320 	rsb	r3, r3, #32
 800a1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a1f8:	401a      	ands	r2, r3
 800a1fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800a1fe:	e7d3      	b.n	800a1a8 <__hexnan+0xd4>
 800a200:	3f04      	subs	r7, #4
 800a202:	e7d1      	b.n	800a1a8 <__hexnan+0xd4>
 800a204:	2004      	movs	r0, #4
 800a206:	b007      	add	sp, #28
 800a208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a20c <_localeconv_r>:
 800a20c:	4800      	ldr	r0, [pc, #0]	; (800a210 <_localeconv_r+0x4>)
 800a20e:	4770      	bx	lr
 800a210:	20000164 	.word	0x20000164

0800a214 <__ascii_mbtowc>:
 800a214:	b082      	sub	sp, #8
 800a216:	b901      	cbnz	r1, 800a21a <__ascii_mbtowc+0x6>
 800a218:	a901      	add	r1, sp, #4
 800a21a:	b142      	cbz	r2, 800a22e <__ascii_mbtowc+0x1a>
 800a21c:	b14b      	cbz	r3, 800a232 <__ascii_mbtowc+0x1e>
 800a21e:	7813      	ldrb	r3, [r2, #0]
 800a220:	600b      	str	r3, [r1, #0]
 800a222:	7812      	ldrb	r2, [r2, #0]
 800a224:	1e10      	subs	r0, r2, #0
 800a226:	bf18      	it	ne
 800a228:	2001      	movne	r0, #1
 800a22a:	b002      	add	sp, #8
 800a22c:	4770      	bx	lr
 800a22e:	4610      	mov	r0, r2
 800a230:	e7fb      	b.n	800a22a <__ascii_mbtowc+0x16>
 800a232:	f06f 0001 	mvn.w	r0, #1
 800a236:	e7f8      	b.n	800a22a <__ascii_mbtowc+0x16>

0800a238 <memcpy>:
 800a238:	440a      	add	r2, r1
 800a23a:	4291      	cmp	r1, r2
 800a23c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a240:	d100      	bne.n	800a244 <memcpy+0xc>
 800a242:	4770      	bx	lr
 800a244:	b510      	push	{r4, lr}
 800a246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a24a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a24e:	4291      	cmp	r1, r2
 800a250:	d1f9      	bne.n	800a246 <memcpy+0xe>
 800a252:	bd10      	pop	{r4, pc}

0800a254 <__malloc_lock>:
 800a254:	4801      	ldr	r0, [pc, #4]	; (800a25c <__malloc_lock+0x8>)
 800a256:	f000 be96 	b.w	800af86 <__retarget_lock_acquire_recursive>
 800a25a:	bf00      	nop
 800a25c:	20000508 	.word	0x20000508

0800a260 <__malloc_unlock>:
 800a260:	4801      	ldr	r0, [pc, #4]	; (800a268 <__malloc_unlock+0x8>)
 800a262:	f000 be91 	b.w	800af88 <__retarget_lock_release_recursive>
 800a266:	bf00      	nop
 800a268:	20000508 	.word	0x20000508

0800a26c <_Balloc>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a270:	4604      	mov	r4, r0
 800a272:	460d      	mov	r5, r1
 800a274:	b976      	cbnz	r6, 800a294 <_Balloc+0x28>
 800a276:	2010      	movs	r0, #16
 800a278:	f7fc ff5c 	bl	8007134 <malloc>
 800a27c:	4602      	mov	r2, r0
 800a27e:	6260      	str	r0, [r4, #36]	; 0x24
 800a280:	b920      	cbnz	r0, 800a28c <_Balloc+0x20>
 800a282:	4b18      	ldr	r3, [pc, #96]	; (800a2e4 <_Balloc+0x78>)
 800a284:	4818      	ldr	r0, [pc, #96]	; (800a2e8 <_Balloc+0x7c>)
 800a286:	2166      	movs	r1, #102	; 0x66
 800a288:	f000 fe4c 	bl	800af24 <__assert_func>
 800a28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a290:	6006      	str	r6, [r0, #0]
 800a292:	60c6      	str	r6, [r0, #12]
 800a294:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a296:	68f3      	ldr	r3, [r6, #12]
 800a298:	b183      	cbz	r3, 800a2bc <_Balloc+0x50>
 800a29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2a2:	b9b8      	cbnz	r0, 800a2d4 <_Balloc+0x68>
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	fa01 f605 	lsl.w	r6, r1, r5
 800a2aa:	1d72      	adds	r2, r6, #5
 800a2ac:	0092      	lsls	r2, r2, #2
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f000 fc9d 	bl	800abee <_calloc_r>
 800a2b4:	b160      	cbz	r0, 800a2d0 <_Balloc+0x64>
 800a2b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2ba:	e00e      	b.n	800a2da <_Balloc+0x6e>
 800a2bc:	2221      	movs	r2, #33	; 0x21
 800a2be:	2104      	movs	r1, #4
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f000 fc94 	bl	800abee <_calloc_r>
 800a2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c8:	60f0      	str	r0, [r6, #12]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e4      	bne.n	800a29a <_Balloc+0x2e>
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	6802      	ldr	r2, [r0, #0]
 800a2d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2e0:	e7f7      	b.n	800a2d2 <_Balloc+0x66>
 800a2e2:	bf00      	nop
 800a2e4:	0800bcce 	.word	0x0800bcce
 800a2e8:	0800bdcc 	.word	0x0800bdcc

0800a2ec <_Bfree>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	b976      	cbnz	r6, 800a314 <_Bfree+0x28>
 800a2f6:	2010      	movs	r0, #16
 800a2f8:	f7fc ff1c 	bl	8007134 <malloc>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	6268      	str	r0, [r5, #36]	; 0x24
 800a300:	b920      	cbnz	r0, 800a30c <_Bfree+0x20>
 800a302:	4b09      	ldr	r3, [pc, #36]	; (800a328 <_Bfree+0x3c>)
 800a304:	4809      	ldr	r0, [pc, #36]	; (800a32c <_Bfree+0x40>)
 800a306:	218a      	movs	r1, #138	; 0x8a
 800a308:	f000 fe0c 	bl	800af24 <__assert_func>
 800a30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a310:	6006      	str	r6, [r0, #0]
 800a312:	60c6      	str	r6, [r0, #12]
 800a314:	b13c      	cbz	r4, 800a326 <_Bfree+0x3a>
 800a316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a318:	6862      	ldr	r2, [r4, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a320:	6021      	str	r1, [r4, #0]
 800a322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	0800bcce 	.word	0x0800bcce
 800a32c:	0800bdcc 	.word	0x0800bdcc

0800a330 <__multadd>:
 800a330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a334:	690d      	ldr	r5, [r1, #16]
 800a336:	4607      	mov	r7, r0
 800a338:	460c      	mov	r4, r1
 800a33a:	461e      	mov	r6, r3
 800a33c:	f101 0c14 	add.w	ip, r1, #20
 800a340:	2000      	movs	r0, #0
 800a342:	f8dc 3000 	ldr.w	r3, [ip]
 800a346:	b299      	uxth	r1, r3
 800a348:	fb02 6101 	mla	r1, r2, r1, r6
 800a34c:	0c1e      	lsrs	r6, r3, #16
 800a34e:	0c0b      	lsrs	r3, r1, #16
 800a350:	fb02 3306 	mla	r3, r2, r6, r3
 800a354:	b289      	uxth	r1, r1
 800a356:	3001      	adds	r0, #1
 800a358:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a35c:	4285      	cmp	r5, r0
 800a35e:	f84c 1b04 	str.w	r1, [ip], #4
 800a362:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a366:	dcec      	bgt.n	800a342 <__multadd+0x12>
 800a368:	b30e      	cbz	r6, 800a3ae <__multadd+0x7e>
 800a36a:	68a3      	ldr	r3, [r4, #8]
 800a36c:	42ab      	cmp	r3, r5
 800a36e:	dc19      	bgt.n	800a3a4 <__multadd+0x74>
 800a370:	6861      	ldr	r1, [r4, #4]
 800a372:	4638      	mov	r0, r7
 800a374:	3101      	adds	r1, #1
 800a376:	f7ff ff79 	bl	800a26c <_Balloc>
 800a37a:	4680      	mov	r8, r0
 800a37c:	b928      	cbnz	r0, 800a38a <__multadd+0x5a>
 800a37e:	4602      	mov	r2, r0
 800a380:	4b0c      	ldr	r3, [pc, #48]	; (800a3b4 <__multadd+0x84>)
 800a382:	480d      	ldr	r0, [pc, #52]	; (800a3b8 <__multadd+0x88>)
 800a384:	21b5      	movs	r1, #181	; 0xb5
 800a386:	f000 fdcd 	bl	800af24 <__assert_func>
 800a38a:	6922      	ldr	r2, [r4, #16]
 800a38c:	3202      	adds	r2, #2
 800a38e:	f104 010c 	add.w	r1, r4, #12
 800a392:	0092      	lsls	r2, r2, #2
 800a394:	300c      	adds	r0, #12
 800a396:	f7ff ff4f 	bl	800a238 <memcpy>
 800a39a:	4621      	mov	r1, r4
 800a39c:	4638      	mov	r0, r7
 800a39e:	f7ff ffa5 	bl	800a2ec <_Bfree>
 800a3a2:	4644      	mov	r4, r8
 800a3a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3a8:	3501      	adds	r5, #1
 800a3aa:	615e      	str	r6, [r3, #20]
 800a3ac:	6125      	str	r5, [r4, #16]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3b4:	0800bd40 	.word	0x0800bd40
 800a3b8:	0800bdcc 	.word	0x0800bdcc

0800a3bc <__s2b>:
 800a3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	4615      	mov	r5, r2
 800a3c4:	461f      	mov	r7, r3
 800a3c6:	2209      	movs	r2, #9
 800a3c8:	3308      	adds	r3, #8
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	db09      	blt.n	800a3ec <__s2b+0x30>
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f7ff ff47 	bl	800a26c <_Balloc>
 800a3de:	b940      	cbnz	r0, 800a3f2 <__s2b+0x36>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	4b19      	ldr	r3, [pc, #100]	; (800a448 <__s2b+0x8c>)
 800a3e4:	4819      	ldr	r0, [pc, #100]	; (800a44c <__s2b+0x90>)
 800a3e6:	21ce      	movs	r1, #206	; 0xce
 800a3e8:	f000 fd9c 	bl	800af24 <__assert_func>
 800a3ec:	0052      	lsls	r2, r2, #1
 800a3ee:	3101      	adds	r1, #1
 800a3f0:	e7f0      	b.n	800a3d4 <__s2b+0x18>
 800a3f2:	9b08      	ldr	r3, [sp, #32]
 800a3f4:	6143      	str	r3, [r0, #20]
 800a3f6:	2d09      	cmp	r5, #9
 800a3f8:	f04f 0301 	mov.w	r3, #1
 800a3fc:	6103      	str	r3, [r0, #16]
 800a3fe:	dd16      	ble.n	800a42e <__s2b+0x72>
 800a400:	f104 0909 	add.w	r9, r4, #9
 800a404:	46c8      	mov	r8, r9
 800a406:	442c      	add	r4, r5
 800a408:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a40c:	4601      	mov	r1, r0
 800a40e:	3b30      	subs	r3, #48	; 0x30
 800a410:	220a      	movs	r2, #10
 800a412:	4630      	mov	r0, r6
 800a414:	f7ff ff8c 	bl	800a330 <__multadd>
 800a418:	45a0      	cmp	r8, r4
 800a41a:	d1f5      	bne.n	800a408 <__s2b+0x4c>
 800a41c:	f1a5 0408 	sub.w	r4, r5, #8
 800a420:	444c      	add	r4, r9
 800a422:	1b2d      	subs	r5, r5, r4
 800a424:	1963      	adds	r3, r4, r5
 800a426:	42bb      	cmp	r3, r7
 800a428:	db04      	blt.n	800a434 <__s2b+0x78>
 800a42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a42e:	340a      	adds	r4, #10
 800a430:	2509      	movs	r5, #9
 800a432:	e7f6      	b.n	800a422 <__s2b+0x66>
 800a434:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a438:	4601      	mov	r1, r0
 800a43a:	3b30      	subs	r3, #48	; 0x30
 800a43c:	220a      	movs	r2, #10
 800a43e:	4630      	mov	r0, r6
 800a440:	f7ff ff76 	bl	800a330 <__multadd>
 800a444:	e7ee      	b.n	800a424 <__s2b+0x68>
 800a446:	bf00      	nop
 800a448:	0800bd40 	.word	0x0800bd40
 800a44c:	0800bdcc 	.word	0x0800bdcc

0800a450 <__hi0bits>:
 800a450:	0c03      	lsrs	r3, r0, #16
 800a452:	041b      	lsls	r3, r3, #16
 800a454:	b9d3      	cbnz	r3, 800a48c <__hi0bits+0x3c>
 800a456:	0400      	lsls	r0, r0, #16
 800a458:	2310      	movs	r3, #16
 800a45a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a45e:	bf04      	itt	eq
 800a460:	0200      	lsleq	r0, r0, #8
 800a462:	3308      	addeq	r3, #8
 800a464:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a468:	bf04      	itt	eq
 800a46a:	0100      	lsleq	r0, r0, #4
 800a46c:	3304      	addeq	r3, #4
 800a46e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a472:	bf04      	itt	eq
 800a474:	0080      	lsleq	r0, r0, #2
 800a476:	3302      	addeq	r3, #2
 800a478:	2800      	cmp	r0, #0
 800a47a:	db05      	blt.n	800a488 <__hi0bits+0x38>
 800a47c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a480:	f103 0301 	add.w	r3, r3, #1
 800a484:	bf08      	it	eq
 800a486:	2320      	moveq	r3, #32
 800a488:	4618      	mov	r0, r3
 800a48a:	4770      	bx	lr
 800a48c:	2300      	movs	r3, #0
 800a48e:	e7e4      	b.n	800a45a <__hi0bits+0xa>

0800a490 <__lo0bits>:
 800a490:	6803      	ldr	r3, [r0, #0]
 800a492:	f013 0207 	ands.w	r2, r3, #7
 800a496:	4601      	mov	r1, r0
 800a498:	d00b      	beq.n	800a4b2 <__lo0bits+0x22>
 800a49a:	07da      	lsls	r2, r3, #31
 800a49c:	d423      	bmi.n	800a4e6 <__lo0bits+0x56>
 800a49e:	0798      	lsls	r0, r3, #30
 800a4a0:	bf49      	itett	mi
 800a4a2:	085b      	lsrmi	r3, r3, #1
 800a4a4:	089b      	lsrpl	r3, r3, #2
 800a4a6:	2001      	movmi	r0, #1
 800a4a8:	600b      	strmi	r3, [r1, #0]
 800a4aa:	bf5c      	itt	pl
 800a4ac:	600b      	strpl	r3, [r1, #0]
 800a4ae:	2002      	movpl	r0, #2
 800a4b0:	4770      	bx	lr
 800a4b2:	b298      	uxth	r0, r3
 800a4b4:	b9a8      	cbnz	r0, 800a4e2 <__lo0bits+0x52>
 800a4b6:	0c1b      	lsrs	r3, r3, #16
 800a4b8:	2010      	movs	r0, #16
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	b90a      	cbnz	r2, 800a4c2 <__lo0bits+0x32>
 800a4be:	3008      	adds	r0, #8
 800a4c0:	0a1b      	lsrs	r3, r3, #8
 800a4c2:	071a      	lsls	r2, r3, #28
 800a4c4:	bf04      	itt	eq
 800a4c6:	091b      	lsreq	r3, r3, #4
 800a4c8:	3004      	addeq	r0, #4
 800a4ca:	079a      	lsls	r2, r3, #30
 800a4cc:	bf04      	itt	eq
 800a4ce:	089b      	lsreq	r3, r3, #2
 800a4d0:	3002      	addeq	r0, #2
 800a4d2:	07da      	lsls	r2, r3, #31
 800a4d4:	d403      	bmi.n	800a4de <__lo0bits+0x4e>
 800a4d6:	085b      	lsrs	r3, r3, #1
 800a4d8:	f100 0001 	add.w	r0, r0, #1
 800a4dc:	d005      	beq.n	800a4ea <__lo0bits+0x5a>
 800a4de:	600b      	str	r3, [r1, #0]
 800a4e0:	4770      	bx	lr
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	e7e9      	b.n	800a4ba <__lo0bits+0x2a>
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	4770      	bx	lr
 800a4ea:	2020      	movs	r0, #32
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <__i2b>:
 800a4f0:	b510      	push	{r4, lr}
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	f7ff feb9 	bl	800a26c <_Balloc>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	b928      	cbnz	r0, 800a50a <__i2b+0x1a>
 800a4fe:	4b05      	ldr	r3, [pc, #20]	; (800a514 <__i2b+0x24>)
 800a500:	4805      	ldr	r0, [pc, #20]	; (800a518 <__i2b+0x28>)
 800a502:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a506:	f000 fd0d 	bl	800af24 <__assert_func>
 800a50a:	2301      	movs	r3, #1
 800a50c:	6144      	str	r4, [r0, #20]
 800a50e:	6103      	str	r3, [r0, #16]
 800a510:	bd10      	pop	{r4, pc}
 800a512:	bf00      	nop
 800a514:	0800bd40 	.word	0x0800bd40
 800a518:	0800bdcc 	.word	0x0800bdcc

0800a51c <__multiply>:
 800a51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a520:	4691      	mov	r9, r2
 800a522:	690a      	ldr	r2, [r1, #16]
 800a524:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a528:	429a      	cmp	r2, r3
 800a52a:	bfb8      	it	lt
 800a52c:	460b      	movlt	r3, r1
 800a52e:	460c      	mov	r4, r1
 800a530:	bfbc      	itt	lt
 800a532:	464c      	movlt	r4, r9
 800a534:	4699      	movlt	r9, r3
 800a536:	6927      	ldr	r7, [r4, #16]
 800a538:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a53c:	68a3      	ldr	r3, [r4, #8]
 800a53e:	6861      	ldr	r1, [r4, #4]
 800a540:	eb07 060a 	add.w	r6, r7, sl
 800a544:	42b3      	cmp	r3, r6
 800a546:	b085      	sub	sp, #20
 800a548:	bfb8      	it	lt
 800a54a:	3101      	addlt	r1, #1
 800a54c:	f7ff fe8e 	bl	800a26c <_Balloc>
 800a550:	b930      	cbnz	r0, 800a560 <__multiply+0x44>
 800a552:	4602      	mov	r2, r0
 800a554:	4b44      	ldr	r3, [pc, #272]	; (800a668 <__multiply+0x14c>)
 800a556:	4845      	ldr	r0, [pc, #276]	; (800a66c <__multiply+0x150>)
 800a558:	f240 115d 	movw	r1, #349	; 0x15d
 800a55c:	f000 fce2 	bl	800af24 <__assert_func>
 800a560:	f100 0514 	add.w	r5, r0, #20
 800a564:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a568:	462b      	mov	r3, r5
 800a56a:	2200      	movs	r2, #0
 800a56c:	4543      	cmp	r3, r8
 800a56e:	d321      	bcc.n	800a5b4 <__multiply+0x98>
 800a570:	f104 0314 	add.w	r3, r4, #20
 800a574:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a578:	f109 0314 	add.w	r3, r9, #20
 800a57c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a580:	9202      	str	r2, [sp, #8]
 800a582:	1b3a      	subs	r2, r7, r4
 800a584:	3a15      	subs	r2, #21
 800a586:	f022 0203 	bic.w	r2, r2, #3
 800a58a:	3204      	adds	r2, #4
 800a58c:	f104 0115 	add.w	r1, r4, #21
 800a590:	428f      	cmp	r7, r1
 800a592:	bf38      	it	cc
 800a594:	2204      	movcc	r2, #4
 800a596:	9201      	str	r2, [sp, #4]
 800a598:	9a02      	ldr	r2, [sp, #8]
 800a59a:	9303      	str	r3, [sp, #12]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d80c      	bhi.n	800a5ba <__multiply+0x9e>
 800a5a0:	2e00      	cmp	r6, #0
 800a5a2:	dd03      	ble.n	800a5ac <__multiply+0x90>
 800a5a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d05a      	beq.n	800a662 <__multiply+0x146>
 800a5ac:	6106      	str	r6, [r0, #16]
 800a5ae:	b005      	add	sp, #20
 800a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b4:	f843 2b04 	str.w	r2, [r3], #4
 800a5b8:	e7d8      	b.n	800a56c <__multiply+0x50>
 800a5ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5be:	f1ba 0f00 	cmp.w	sl, #0
 800a5c2:	d024      	beq.n	800a60e <__multiply+0xf2>
 800a5c4:	f104 0e14 	add.w	lr, r4, #20
 800a5c8:	46a9      	mov	r9, r5
 800a5ca:	f04f 0c00 	mov.w	ip, #0
 800a5ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a5d2:	f8d9 1000 	ldr.w	r1, [r9]
 800a5d6:	fa1f fb82 	uxth.w	fp, r2
 800a5da:	b289      	uxth	r1, r1
 800a5dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5e4:	f8d9 2000 	ldr.w	r2, [r9]
 800a5e8:	4461      	add	r1, ip
 800a5ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5f6:	b289      	uxth	r1, r1
 800a5f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5fc:	4577      	cmp	r7, lr
 800a5fe:	f849 1b04 	str.w	r1, [r9], #4
 800a602:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a606:	d8e2      	bhi.n	800a5ce <__multiply+0xb2>
 800a608:	9a01      	ldr	r2, [sp, #4]
 800a60a:	f845 c002 	str.w	ip, [r5, r2]
 800a60e:	9a03      	ldr	r2, [sp, #12]
 800a610:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a614:	3304      	adds	r3, #4
 800a616:	f1b9 0f00 	cmp.w	r9, #0
 800a61a:	d020      	beq.n	800a65e <__multiply+0x142>
 800a61c:	6829      	ldr	r1, [r5, #0]
 800a61e:	f104 0c14 	add.w	ip, r4, #20
 800a622:	46ae      	mov	lr, r5
 800a624:	f04f 0a00 	mov.w	sl, #0
 800a628:	f8bc b000 	ldrh.w	fp, [ip]
 800a62c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a630:	fb09 220b 	mla	r2, r9, fp, r2
 800a634:	4492      	add	sl, r2
 800a636:	b289      	uxth	r1, r1
 800a638:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a63c:	f84e 1b04 	str.w	r1, [lr], #4
 800a640:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a644:	f8be 1000 	ldrh.w	r1, [lr]
 800a648:	0c12      	lsrs	r2, r2, #16
 800a64a:	fb09 1102 	mla	r1, r9, r2, r1
 800a64e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a652:	4567      	cmp	r7, ip
 800a654:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a658:	d8e6      	bhi.n	800a628 <__multiply+0x10c>
 800a65a:	9a01      	ldr	r2, [sp, #4]
 800a65c:	50a9      	str	r1, [r5, r2]
 800a65e:	3504      	adds	r5, #4
 800a660:	e79a      	b.n	800a598 <__multiply+0x7c>
 800a662:	3e01      	subs	r6, #1
 800a664:	e79c      	b.n	800a5a0 <__multiply+0x84>
 800a666:	bf00      	nop
 800a668:	0800bd40 	.word	0x0800bd40
 800a66c:	0800bdcc 	.word	0x0800bdcc

0800a670 <__pow5mult>:
 800a670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a674:	4615      	mov	r5, r2
 800a676:	f012 0203 	ands.w	r2, r2, #3
 800a67a:	4606      	mov	r6, r0
 800a67c:	460f      	mov	r7, r1
 800a67e:	d007      	beq.n	800a690 <__pow5mult+0x20>
 800a680:	4c25      	ldr	r4, [pc, #148]	; (800a718 <__pow5mult+0xa8>)
 800a682:	3a01      	subs	r2, #1
 800a684:	2300      	movs	r3, #0
 800a686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a68a:	f7ff fe51 	bl	800a330 <__multadd>
 800a68e:	4607      	mov	r7, r0
 800a690:	10ad      	asrs	r5, r5, #2
 800a692:	d03d      	beq.n	800a710 <__pow5mult+0xa0>
 800a694:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a696:	b97c      	cbnz	r4, 800a6b8 <__pow5mult+0x48>
 800a698:	2010      	movs	r0, #16
 800a69a:	f7fc fd4b 	bl	8007134 <malloc>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	6270      	str	r0, [r6, #36]	; 0x24
 800a6a2:	b928      	cbnz	r0, 800a6b0 <__pow5mult+0x40>
 800a6a4:	4b1d      	ldr	r3, [pc, #116]	; (800a71c <__pow5mult+0xac>)
 800a6a6:	481e      	ldr	r0, [pc, #120]	; (800a720 <__pow5mult+0xb0>)
 800a6a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a6ac:	f000 fc3a 	bl	800af24 <__assert_func>
 800a6b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6b4:	6004      	str	r4, [r0, #0]
 800a6b6:	60c4      	str	r4, [r0, #12]
 800a6b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a6bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6c0:	b94c      	cbnz	r4, 800a6d6 <__pow5mult+0x66>
 800a6c2:	f240 2171 	movw	r1, #625	; 0x271
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f7ff ff12 	bl	800a4f0 <__i2b>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	f04f 0900 	mov.w	r9, #0
 800a6da:	07eb      	lsls	r3, r5, #31
 800a6dc:	d50a      	bpl.n	800a6f4 <__pow5mult+0x84>
 800a6de:	4639      	mov	r1, r7
 800a6e0:	4622      	mov	r2, r4
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f7ff ff1a 	bl	800a51c <__multiply>
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	4680      	mov	r8, r0
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7ff fdfd 	bl	800a2ec <_Bfree>
 800a6f2:	4647      	mov	r7, r8
 800a6f4:	106d      	asrs	r5, r5, #1
 800a6f6:	d00b      	beq.n	800a710 <__pow5mult+0xa0>
 800a6f8:	6820      	ldr	r0, [r4, #0]
 800a6fa:	b938      	cbnz	r0, 800a70c <__pow5mult+0x9c>
 800a6fc:	4622      	mov	r2, r4
 800a6fe:	4621      	mov	r1, r4
 800a700:	4630      	mov	r0, r6
 800a702:	f7ff ff0b 	bl	800a51c <__multiply>
 800a706:	6020      	str	r0, [r4, #0]
 800a708:	f8c0 9000 	str.w	r9, [r0]
 800a70c:	4604      	mov	r4, r0
 800a70e:	e7e4      	b.n	800a6da <__pow5mult+0x6a>
 800a710:	4638      	mov	r0, r7
 800a712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a716:	bf00      	nop
 800a718:	0800bf18 	.word	0x0800bf18
 800a71c:	0800bcce 	.word	0x0800bcce
 800a720:	0800bdcc 	.word	0x0800bdcc

0800a724 <__lshift>:
 800a724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a728:	460c      	mov	r4, r1
 800a72a:	6849      	ldr	r1, [r1, #4]
 800a72c:	6923      	ldr	r3, [r4, #16]
 800a72e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a732:	68a3      	ldr	r3, [r4, #8]
 800a734:	4607      	mov	r7, r0
 800a736:	4691      	mov	r9, r2
 800a738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a73c:	f108 0601 	add.w	r6, r8, #1
 800a740:	42b3      	cmp	r3, r6
 800a742:	db0b      	blt.n	800a75c <__lshift+0x38>
 800a744:	4638      	mov	r0, r7
 800a746:	f7ff fd91 	bl	800a26c <_Balloc>
 800a74a:	4605      	mov	r5, r0
 800a74c:	b948      	cbnz	r0, 800a762 <__lshift+0x3e>
 800a74e:	4602      	mov	r2, r0
 800a750:	4b2a      	ldr	r3, [pc, #168]	; (800a7fc <__lshift+0xd8>)
 800a752:	482b      	ldr	r0, [pc, #172]	; (800a800 <__lshift+0xdc>)
 800a754:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a758:	f000 fbe4 	bl	800af24 <__assert_func>
 800a75c:	3101      	adds	r1, #1
 800a75e:	005b      	lsls	r3, r3, #1
 800a760:	e7ee      	b.n	800a740 <__lshift+0x1c>
 800a762:	2300      	movs	r3, #0
 800a764:	f100 0114 	add.w	r1, r0, #20
 800a768:	f100 0210 	add.w	r2, r0, #16
 800a76c:	4618      	mov	r0, r3
 800a76e:	4553      	cmp	r3, sl
 800a770:	db37      	blt.n	800a7e2 <__lshift+0xbe>
 800a772:	6920      	ldr	r0, [r4, #16]
 800a774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a778:	f104 0314 	add.w	r3, r4, #20
 800a77c:	f019 091f 	ands.w	r9, r9, #31
 800a780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a784:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a788:	d02f      	beq.n	800a7ea <__lshift+0xc6>
 800a78a:	f1c9 0e20 	rsb	lr, r9, #32
 800a78e:	468a      	mov	sl, r1
 800a790:	f04f 0c00 	mov.w	ip, #0
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	fa02 f209 	lsl.w	r2, r2, r9
 800a79a:	ea42 020c 	orr.w	r2, r2, ip
 800a79e:	f84a 2b04 	str.w	r2, [sl], #4
 800a7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7a6:	4298      	cmp	r0, r3
 800a7a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a7ac:	d8f2      	bhi.n	800a794 <__lshift+0x70>
 800a7ae:	1b03      	subs	r3, r0, r4
 800a7b0:	3b15      	subs	r3, #21
 800a7b2:	f023 0303 	bic.w	r3, r3, #3
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	f104 0215 	add.w	r2, r4, #21
 800a7bc:	4290      	cmp	r0, r2
 800a7be:	bf38      	it	cc
 800a7c0:	2304      	movcc	r3, #4
 800a7c2:	f841 c003 	str.w	ip, [r1, r3]
 800a7c6:	f1bc 0f00 	cmp.w	ip, #0
 800a7ca:	d001      	beq.n	800a7d0 <__lshift+0xac>
 800a7cc:	f108 0602 	add.w	r6, r8, #2
 800a7d0:	3e01      	subs	r6, #1
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	612e      	str	r6, [r5, #16]
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	f7ff fd88 	bl	800a2ec <_Bfree>
 800a7dc:	4628      	mov	r0, r5
 800a7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	e7c1      	b.n	800a76e <__lshift+0x4a>
 800a7ea:	3904      	subs	r1, #4
 800a7ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7f4:	4298      	cmp	r0, r3
 800a7f6:	d8f9      	bhi.n	800a7ec <__lshift+0xc8>
 800a7f8:	e7ea      	b.n	800a7d0 <__lshift+0xac>
 800a7fa:	bf00      	nop
 800a7fc:	0800bd40 	.word	0x0800bd40
 800a800:	0800bdcc 	.word	0x0800bdcc

0800a804 <__mcmp>:
 800a804:	b530      	push	{r4, r5, lr}
 800a806:	6902      	ldr	r2, [r0, #16]
 800a808:	690c      	ldr	r4, [r1, #16]
 800a80a:	1b12      	subs	r2, r2, r4
 800a80c:	d10e      	bne.n	800a82c <__mcmp+0x28>
 800a80e:	f100 0314 	add.w	r3, r0, #20
 800a812:	3114      	adds	r1, #20
 800a814:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a818:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a81c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a820:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a824:	42a5      	cmp	r5, r4
 800a826:	d003      	beq.n	800a830 <__mcmp+0x2c>
 800a828:	d305      	bcc.n	800a836 <__mcmp+0x32>
 800a82a:	2201      	movs	r2, #1
 800a82c:	4610      	mov	r0, r2
 800a82e:	bd30      	pop	{r4, r5, pc}
 800a830:	4283      	cmp	r3, r0
 800a832:	d3f3      	bcc.n	800a81c <__mcmp+0x18>
 800a834:	e7fa      	b.n	800a82c <__mcmp+0x28>
 800a836:	f04f 32ff 	mov.w	r2, #4294967295
 800a83a:	e7f7      	b.n	800a82c <__mcmp+0x28>

0800a83c <__mdiff>:
 800a83c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	460c      	mov	r4, r1
 800a842:	4606      	mov	r6, r0
 800a844:	4611      	mov	r1, r2
 800a846:	4620      	mov	r0, r4
 800a848:	4690      	mov	r8, r2
 800a84a:	f7ff ffdb 	bl	800a804 <__mcmp>
 800a84e:	1e05      	subs	r5, r0, #0
 800a850:	d110      	bne.n	800a874 <__mdiff+0x38>
 800a852:	4629      	mov	r1, r5
 800a854:	4630      	mov	r0, r6
 800a856:	f7ff fd09 	bl	800a26c <_Balloc>
 800a85a:	b930      	cbnz	r0, 800a86a <__mdiff+0x2e>
 800a85c:	4b3a      	ldr	r3, [pc, #232]	; (800a948 <__mdiff+0x10c>)
 800a85e:	4602      	mov	r2, r0
 800a860:	f240 2132 	movw	r1, #562	; 0x232
 800a864:	4839      	ldr	r0, [pc, #228]	; (800a94c <__mdiff+0x110>)
 800a866:	f000 fb5d 	bl	800af24 <__assert_func>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a874:	bfa4      	itt	ge
 800a876:	4643      	movge	r3, r8
 800a878:	46a0      	movge	r8, r4
 800a87a:	4630      	mov	r0, r6
 800a87c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a880:	bfa6      	itte	ge
 800a882:	461c      	movge	r4, r3
 800a884:	2500      	movge	r5, #0
 800a886:	2501      	movlt	r5, #1
 800a888:	f7ff fcf0 	bl	800a26c <_Balloc>
 800a88c:	b920      	cbnz	r0, 800a898 <__mdiff+0x5c>
 800a88e:	4b2e      	ldr	r3, [pc, #184]	; (800a948 <__mdiff+0x10c>)
 800a890:	4602      	mov	r2, r0
 800a892:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a896:	e7e5      	b.n	800a864 <__mdiff+0x28>
 800a898:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a89c:	6926      	ldr	r6, [r4, #16]
 800a89e:	60c5      	str	r5, [r0, #12]
 800a8a0:	f104 0914 	add.w	r9, r4, #20
 800a8a4:	f108 0514 	add.w	r5, r8, #20
 800a8a8:	f100 0e14 	add.w	lr, r0, #20
 800a8ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a8b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8b4:	f108 0210 	add.w	r2, r8, #16
 800a8b8:	46f2      	mov	sl, lr
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a8c4:	fa1f f883 	uxth.w	r8, r3
 800a8c8:	fa11 f18b 	uxtah	r1, r1, fp
 800a8cc:	0c1b      	lsrs	r3, r3, #16
 800a8ce:	eba1 0808 	sub.w	r8, r1, r8
 800a8d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a8d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a8da:	fa1f f888 	uxth.w	r8, r8
 800a8de:	1419      	asrs	r1, r3, #16
 800a8e0:	454e      	cmp	r6, r9
 800a8e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8e6:	f84a 3b04 	str.w	r3, [sl], #4
 800a8ea:	d8e7      	bhi.n	800a8bc <__mdiff+0x80>
 800a8ec:	1b33      	subs	r3, r6, r4
 800a8ee:	3b15      	subs	r3, #21
 800a8f0:	f023 0303 	bic.w	r3, r3, #3
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	3415      	adds	r4, #21
 800a8f8:	42a6      	cmp	r6, r4
 800a8fa:	bf38      	it	cc
 800a8fc:	2304      	movcc	r3, #4
 800a8fe:	441d      	add	r5, r3
 800a900:	4473      	add	r3, lr
 800a902:	469e      	mov	lr, r3
 800a904:	462e      	mov	r6, r5
 800a906:	4566      	cmp	r6, ip
 800a908:	d30e      	bcc.n	800a928 <__mdiff+0xec>
 800a90a:	f10c 0203 	add.w	r2, ip, #3
 800a90e:	1b52      	subs	r2, r2, r5
 800a910:	f022 0203 	bic.w	r2, r2, #3
 800a914:	3d03      	subs	r5, #3
 800a916:	45ac      	cmp	ip, r5
 800a918:	bf38      	it	cc
 800a91a:	2200      	movcc	r2, #0
 800a91c:	441a      	add	r2, r3
 800a91e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a922:	b17b      	cbz	r3, 800a944 <__mdiff+0x108>
 800a924:	6107      	str	r7, [r0, #16]
 800a926:	e7a3      	b.n	800a870 <__mdiff+0x34>
 800a928:	f856 8b04 	ldr.w	r8, [r6], #4
 800a92c:	fa11 f288 	uxtah	r2, r1, r8
 800a930:	1414      	asrs	r4, r2, #16
 800a932:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a936:	b292      	uxth	r2, r2
 800a938:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a93c:	f84e 2b04 	str.w	r2, [lr], #4
 800a940:	1421      	asrs	r1, r4, #16
 800a942:	e7e0      	b.n	800a906 <__mdiff+0xca>
 800a944:	3f01      	subs	r7, #1
 800a946:	e7ea      	b.n	800a91e <__mdiff+0xe2>
 800a948:	0800bd40 	.word	0x0800bd40
 800a94c:	0800bdcc 	.word	0x0800bdcc

0800a950 <__ulp>:
 800a950:	b082      	sub	sp, #8
 800a952:	ed8d 0b00 	vstr	d0, [sp]
 800a956:	9b01      	ldr	r3, [sp, #4]
 800a958:	4912      	ldr	r1, [pc, #72]	; (800a9a4 <__ulp+0x54>)
 800a95a:	4019      	ands	r1, r3
 800a95c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a960:	2900      	cmp	r1, #0
 800a962:	dd05      	ble.n	800a970 <__ulp+0x20>
 800a964:	2200      	movs	r2, #0
 800a966:	460b      	mov	r3, r1
 800a968:	ec43 2b10 	vmov	d0, r2, r3
 800a96c:	b002      	add	sp, #8
 800a96e:	4770      	bx	lr
 800a970:	4249      	negs	r1, r1
 800a972:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a976:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a97a:	f04f 0200 	mov.w	r2, #0
 800a97e:	f04f 0300 	mov.w	r3, #0
 800a982:	da04      	bge.n	800a98e <__ulp+0x3e>
 800a984:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a988:	fa41 f300 	asr.w	r3, r1, r0
 800a98c:	e7ec      	b.n	800a968 <__ulp+0x18>
 800a98e:	f1a0 0114 	sub.w	r1, r0, #20
 800a992:	291e      	cmp	r1, #30
 800a994:	bfda      	itte	le
 800a996:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a99a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a99e:	2101      	movgt	r1, #1
 800a9a0:	460a      	mov	r2, r1
 800a9a2:	e7e1      	b.n	800a968 <__ulp+0x18>
 800a9a4:	7ff00000 	.word	0x7ff00000

0800a9a8 <__b2d>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	6905      	ldr	r5, [r0, #16]
 800a9ac:	f100 0714 	add.w	r7, r0, #20
 800a9b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a9b4:	1f2e      	subs	r6, r5, #4
 800a9b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7ff fd48 	bl	800a450 <__hi0bits>
 800a9c0:	f1c0 0320 	rsb	r3, r0, #32
 800a9c4:	280a      	cmp	r0, #10
 800a9c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aa44 <__b2d+0x9c>
 800a9ca:	600b      	str	r3, [r1, #0]
 800a9cc:	dc14      	bgt.n	800a9f8 <__b2d+0x50>
 800a9ce:	f1c0 0e0b 	rsb	lr, r0, #11
 800a9d2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a9d6:	42b7      	cmp	r7, r6
 800a9d8:	ea41 030c 	orr.w	r3, r1, ip
 800a9dc:	bf34      	ite	cc
 800a9de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9e2:	2100      	movcs	r1, #0
 800a9e4:	3015      	adds	r0, #21
 800a9e6:	fa04 f000 	lsl.w	r0, r4, r0
 800a9ea:	fa21 f10e 	lsr.w	r1, r1, lr
 800a9ee:	ea40 0201 	orr.w	r2, r0, r1
 800a9f2:	ec43 2b10 	vmov	d0, r2, r3
 800a9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9f8:	42b7      	cmp	r7, r6
 800a9fa:	bf3a      	itte	cc
 800a9fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa00:	f1a5 0608 	subcc.w	r6, r5, #8
 800aa04:	2100      	movcs	r1, #0
 800aa06:	380b      	subs	r0, #11
 800aa08:	d017      	beq.n	800aa3a <__b2d+0x92>
 800aa0a:	f1c0 0c20 	rsb	ip, r0, #32
 800aa0e:	fa04 f500 	lsl.w	r5, r4, r0
 800aa12:	42be      	cmp	r6, r7
 800aa14:	fa21 f40c 	lsr.w	r4, r1, ip
 800aa18:	ea45 0504 	orr.w	r5, r5, r4
 800aa1c:	bf8c      	ite	hi
 800aa1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aa22:	2400      	movls	r4, #0
 800aa24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aa28:	fa01 f000 	lsl.w	r0, r1, r0
 800aa2c:	fa24 f40c 	lsr.w	r4, r4, ip
 800aa30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aa34:	ea40 0204 	orr.w	r2, r0, r4
 800aa38:	e7db      	b.n	800a9f2 <__b2d+0x4a>
 800aa3a:	ea44 030c 	orr.w	r3, r4, ip
 800aa3e:	460a      	mov	r2, r1
 800aa40:	e7d7      	b.n	800a9f2 <__b2d+0x4a>
 800aa42:	bf00      	nop
 800aa44:	3ff00000 	.word	0x3ff00000

0800aa48 <__d2b>:
 800aa48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa4c:	4689      	mov	r9, r1
 800aa4e:	2101      	movs	r1, #1
 800aa50:	ec57 6b10 	vmov	r6, r7, d0
 800aa54:	4690      	mov	r8, r2
 800aa56:	f7ff fc09 	bl	800a26c <_Balloc>
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	b930      	cbnz	r0, 800aa6c <__d2b+0x24>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	4b25      	ldr	r3, [pc, #148]	; (800aaf8 <__d2b+0xb0>)
 800aa62:	4826      	ldr	r0, [pc, #152]	; (800aafc <__d2b+0xb4>)
 800aa64:	f240 310a 	movw	r1, #778	; 0x30a
 800aa68:	f000 fa5c 	bl	800af24 <__assert_func>
 800aa6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa74:	bb35      	cbnz	r5, 800aac4 <__d2b+0x7c>
 800aa76:	2e00      	cmp	r6, #0
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	d028      	beq.n	800aace <__d2b+0x86>
 800aa7c:	4668      	mov	r0, sp
 800aa7e:	9600      	str	r6, [sp, #0]
 800aa80:	f7ff fd06 	bl	800a490 <__lo0bits>
 800aa84:	9900      	ldr	r1, [sp, #0]
 800aa86:	b300      	cbz	r0, 800aaca <__d2b+0x82>
 800aa88:	9a01      	ldr	r2, [sp, #4]
 800aa8a:	f1c0 0320 	rsb	r3, r0, #32
 800aa8e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa92:	430b      	orrs	r3, r1
 800aa94:	40c2      	lsrs	r2, r0
 800aa96:	6163      	str	r3, [r4, #20]
 800aa98:	9201      	str	r2, [sp, #4]
 800aa9a:	9b01      	ldr	r3, [sp, #4]
 800aa9c:	61a3      	str	r3, [r4, #24]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	bf14      	ite	ne
 800aaa2:	2202      	movne	r2, #2
 800aaa4:	2201      	moveq	r2, #1
 800aaa6:	6122      	str	r2, [r4, #16]
 800aaa8:	b1d5      	cbz	r5, 800aae0 <__d2b+0x98>
 800aaaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aaae:	4405      	add	r5, r0
 800aab0:	f8c9 5000 	str.w	r5, [r9]
 800aab4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aab8:	f8c8 0000 	str.w	r0, [r8]
 800aabc:	4620      	mov	r0, r4
 800aabe:	b003      	add	sp, #12
 800aac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aac8:	e7d5      	b.n	800aa76 <__d2b+0x2e>
 800aaca:	6161      	str	r1, [r4, #20]
 800aacc:	e7e5      	b.n	800aa9a <__d2b+0x52>
 800aace:	a801      	add	r0, sp, #4
 800aad0:	f7ff fcde 	bl	800a490 <__lo0bits>
 800aad4:	9b01      	ldr	r3, [sp, #4]
 800aad6:	6163      	str	r3, [r4, #20]
 800aad8:	2201      	movs	r2, #1
 800aada:	6122      	str	r2, [r4, #16]
 800aadc:	3020      	adds	r0, #32
 800aade:	e7e3      	b.n	800aaa8 <__d2b+0x60>
 800aae0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aae4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aae8:	f8c9 0000 	str.w	r0, [r9]
 800aaec:	6918      	ldr	r0, [r3, #16]
 800aaee:	f7ff fcaf 	bl	800a450 <__hi0bits>
 800aaf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aaf6:	e7df      	b.n	800aab8 <__d2b+0x70>
 800aaf8:	0800bd40 	.word	0x0800bd40
 800aafc:	0800bdcc 	.word	0x0800bdcc

0800ab00 <__ratio>:
 800ab00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	4688      	mov	r8, r1
 800ab06:	4669      	mov	r1, sp
 800ab08:	4681      	mov	r9, r0
 800ab0a:	f7ff ff4d 	bl	800a9a8 <__b2d>
 800ab0e:	a901      	add	r1, sp, #4
 800ab10:	4640      	mov	r0, r8
 800ab12:	ec55 4b10 	vmov	r4, r5, d0
 800ab16:	f7ff ff47 	bl	800a9a8 <__b2d>
 800ab1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab22:	eba3 0c02 	sub.w	ip, r3, r2
 800ab26:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab30:	ec51 0b10 	vmov	r0, r1, d0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	bfd6      	itet	le
 800ab38:	460a      	movle	r2, r1
 800ab3a:	462a      	movgt	r2, r5
 800ab3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab40:	468b      	mov	fp, r1
 800ab42:	462f      	mov	r7, r5
 800ab44:	bfd4      	ite	le
 800ab46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab4e:	4620      	mov	r0, r4
 800ab50:	ee10 2a10 	vmov	r2, s0
 800ab54:	465b      	mov	r3, fp
 800ab56:	4639      	mov	r1, r7
 800ab58:	f7f5 fe80 	bl	800085c <__aeabi_ddiv>
 800ab5c:	ec41 0b10 	vmov	d0, r0, r1
 800ab60:	b003      	add	sp, #12
 800ab62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab66 <__copybits>:
 800ab66:	3901      	subs	r1, #1
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	1149      	asrs	r1, r1, #5
 800ab6c:	6914      	ldr	r4, [r2, #16]
 800ab6e:	3101      	adds	r1, #1
 800ab70:	f102 0314 	add.w	r3, r2, #20
 800ab74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab7c:	1f05      	subs	r5, r0, #4
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	d30c      	bcc.n	800ab9c <__copybits+0x36>
 800ab82:	1aa3      	subs	r3, r4, r2
 800ab84:	3b11      	subs	r3, #17
 800ab86:	f023 0303 	bic.w	r3, r3, #3
 800ab8a:	3211      	adds	r2, #17
 800ab8c:	42a2      	cmp	r2, r4
 800ab8e:	bf88      	it	hi
 800ab90:	2300      	movhi	r3, #0
 800ab92:	4418      	add	r0, r3
 800ab94:	2300      	movs	r3, #0
 800ab96:	4288      	cmp	r0, r1
 800ab98:	d305      	bcc.n	800aba6 <__copybits+0x40>
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}
 800ab9c:	f853 6b04 	ldr.w	r6, [r3], #4
 800aba0:	f845 6f04 	str.w	r6, [r5, #4]!
 800aba4:	e7eb      	b.n	800ab7e <__copybits+0x18>
 800aba6:	f840 3b04 	str.w	r3, [r0], #4
 800abaa:	e7f4      	b.n	800ab96 <__copybits+0x30>

0800abac <__any_on>:
 800abac:	f100 0214 	add.w	r2, r0, #20
 800abb0:	6900      	ldr	r0, [r0, #16]
 800abb2:	114b      	asrs	r3, r1, #5
 800abb4:	4298      	cmp	r0, r3
 800abb6:	b510      	push	{r4, lr}
 800abb8:	db11      	blt.n	800abde <__any_on+0x32>
 800abba:	dd0a      	ble.n	800abd2 <__any_on+0x26>
 800abbc:	f011 011f 	ands.w	r1, r1, #31
 800abc0:	d007      	beq.n	800abd2 <__any_on+0x26>
 800abc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abc6:	fa24 f001 	lsr.w	r0, r4, r1
 800abca:	fa00 f101 	lsl.w	r1, r0, r1
 800abce:	428c      	cmp	r4, r1
 800abd0:	d10b      	bne.n	800abea <__any_on+0x3e>
 800abd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d803      	bhi.n	800abe2 <__any_on+0x36>
 800abda:	2000      	movs	r0, #0
 800abdc:	bd10      	pop	{r4, pc}
 800abde:	4603      	mov	r3, r0
 800abe0:	e7f7      	b.n	800abd2 <__any_on+0x26>
 800abe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abe6:	2900      	cmp	r1, #0
 800abe8:	d0f5      	beq.n	800abd6 <__any_on+0x2a>
 800abea:	2001      	movs	r0, #1
 800abec:	e7f6      	b.n	800abdc <__any_on+0x30>

0800abee <_calloc_r>:
 800abee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abf0:	fba1 2402 	umull	r2, r4, r1, r2
 800abf4:	b94c      	cbnz	r4, 800ac0a <_calloc_r+0x1c>
 800abf6:	4611      	mov	r1, r2
 800abf8:	9201      	str	r2, [sp, #4]
 800abfa:	f7fc fb17 	bl	800722c <_malloc_r>
 800abfe:	9a01      	ldr	r2, [sp, #4]
 800ac00:	4605      	mov	r5, r0
 800ac02:	b930      	cbnz	r0, 800ac12 <_calloc_r+0x24>
 800ac04:	4628      	mov	r0, r5
 800ac06:	b003      	add	sp, #12
 800ac08:	bd30      	pop	{r4, r5, pc}
 800ac0a:	220c      	movs	r2, #12
 800ac0c:	6002      	str	r2, [r0, #0]
 800ac0e:	2500      	movs	r5, #0
 800ac10:	e7f8      	b.n	800ac04 <_calloc_r+0x16>
 800ac12:	4621      	mov	r1, r4
 800ac14:	f7fc fa96 	bl	8007144 <memset>
 800ac18:	e7f4      	b.n	800ac04 <_calloc_r+0x16>

0800ac1a <__ssputs_r>:
 800ac1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac1e:	688e      	ldr	r6, [r1, #8]
 800ac20:	429e      	cmp	r6, r3
 800ac22:	4682      	mov	sl, r0
 800ac24:	460c      	mov	r4, r1
 800ac26:	4690      	mov	r8, r2
 800ac28:	461f      	mov	r7, r3
 800ac2a:	d838      	bhi.n	800ac9e <__ssputs_r+0x84>
 800ac2c:	898a      	ldrh	r2, [r1, #12]
 800ac2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac32:	d032      	beq.n	800ac9a <__ssputs_r+0x80>
 800ac34:	6825      	ldr	r5, [r4, #0]
 800ac36:	6909      	ldr	r1, [r1, #16]
 800ac38:	eba5 0901 	sub.w	r9, r5, r1
 800ac3c:	6965      	ldr	r5, [r4, #20]
 800ac3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac46:	3301      	adds	r3, #1
 800ac48:	444b      	add	r3, r9
 800ac4a:	106d      	asrs	r5, r5, #1
 800ac4c:	429d      	cmp	r5, r3
 800ac4e:	bf38      	it	cc
 800ac50:	461d      	movcc	r5, r3
 800ac52:	0553      	lsls	r3, r2, #21
 800ac54:	d531      	bpl.n	800acba <__ssputs_r+0xa0>
 800ac56:	4629      	mov	r1, r5
 800ac58:	f7fc fae8 	bl	800722c <_malloc_r>
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	b950      	cbnz	r0, 800ac76 <__ssputs_r+0x5c>
 800ac60:	230c      	movs	r3, #12
 800ac62:	f8ca 3000 	str.w	r3, [sl]
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac6c:	81a3      	strh	r3, [r4, #12]
 800ac6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac76:	6921      	ldr	r1, [r4, #16]
 800ac78:	464a      	mov	r2, r9
 800ac7a:	f7ff fadd 	bl	800a238 <memcpy>
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	6126      	str	r6, [r4, #16]
 800ac8c:	6165      	str	r5, [r4, #20]
 800ac8e:	444e      	add	r6, r9
 800ac90:	eba5 0509 	sub.w	r5, r5, r9
 800ac94:	6026      	str	r6, [r4, #0]
 800ac96:	60a5      	str	r5, [r4, #8]
 800ac98:	463e      	mov	r6, r7
 800ac9a:	42be      	cmp	r6, r7
 800ac9c:	d900      	bls.n	800aca0 <__ssputs_r+0x86>
 800ac9e:	463e      	mov	r6, r7
 800aca0:	6820      	ldr	r0, [r4, #0]
 800aca2:	4632      	mov	r2, r6
 800aca4:	4641      	mov	r1, r8
 800aca6:	f000 f970 	bl	800af8a <memmove>
 800acaa:	68a3      	ldr	r3, [r4, #8]
 800acac:	1b9b      	subs	r3, r3, r6
 800acae:	60a3      	str	r3, [r4, #8]
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	4433      	add	r3, r6
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	2000      	movs	r0, #0
 800acb8:	e7db      	b.n	800ac72 <__ssputs_r+0x58>
 800acba:	462a      	mov	r2, r5
 800acbc:	f000 f97f 	bl	800afbe <_realloc_r>
 800acc0:	4606      	mov	r6, r0
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d1e1      	bne.n	800ac8a <__ssputs_r+0x70>
 800acc6:	6921      	ldr	r1, [r4, #16]
 800acc8:	4650      	mov	r0, sl
 800acca:	f7fc fa43 	bl	8007154 <_free_r>
 800acce:	e7c7      	b.n	800ac60 <__ssputs_r+0x46>

0800acd0 <_svfiprintf_r>:
 800acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd4:	4698      	mov	r8, r3
 800acd6:	898b      	ldrh	r3, [r1, #12]
 800acd8:	061b      	lsls	r3, r3, #24
 800acda:	b09d      	sub	sp, #116	; 0x74
 800acdc:	4607      	mov	r7, r0
 800acde:	460d      	mov	r5, r1
 800ace0:	4614      	mov	r4, r2
 800ace2:	d50e      	bpl.n	800ad02 <_svfiprintf_r+0x32>
 800ace4:	690b      	ldr	r3, [r1, #16]
 800ace6:	b963      	cbnz	r3, 800ad02 <_svfiprintf_r+0x32>
 800ace8:	2140      	movs	r1, #64	; 0x40
 800acea:	f7fc fa9f 	bl	800722c <_malloc_r>
 800acee:	6028      	str	r0, [r5, #0]
 800acf0:	6128      	str	r0, [r5, #16]
 800acf2:	b920      	cbnz	r0, 800acfe <_svfiprintf_r+0x2e>
 800acf4:	230c      	movs	r3, #12
 800acf6:	603b      	str	r3, [r7, #0]
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295
 800acfc:	e0d1      	b.n	800aea2 <_svfiprintf_r+0x1d2>
 800acfe:	2340      	movs	r3, #64	; 0x40
 800ad00:	616b      	str	r3, [r5, #20]
 800ad02:	2300      	movs	r3, #0
 800ad04:	9309      	str	r3, [sp, #36]	; 0x24
 800ad06:	2320      	movs	r3, #32
 800ad08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad10:	2330      	movs	r3, #48	; 0x30
 800ad12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aebc <_svfiprintf_r+0x1ec>
 800ad16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad1a:	f04f 0901 	mov.w	r9, #1
 800ad1e:	4623      	mov	r3, r4
 800ad20:	469a      	mov	sl, r3
 800ad22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad26:	b10a      	cbz	r2, 800ad2c <_svfiprintf_r+0x5c>
 800ad28:	2a25      	cmp	r2, #37	; 0x25
 800ad2a:	d1f9      	bne.n	800ad20 <_svfiprintf_r+0x50>
 800ad2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ad30:	d00b      	beq.n	800ad4a <_svfiprintf_r+0x7a>
 800ad32:	465b      	mov	r3, fp
 800ad34:	4622      	mov	r2, r4
 800ad36:	4629      	mov	r1, r5
 800ad38:	4638      	mov	r0, r7
 800ad3a:	f7ff ff6e 	bl	800ac1a <__ssputs_r>
 800ad3e:	3001      	adds	r0, #1
 800ad40:	f000 80aa 	beq.w	800ae98 <_svfiprintf_r+0x1c8>
 800ad44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad46:	445a      	add	r2, fp
 800ad48:	9209      	str	r2, [sp, #36]	; 0x24
 800ad4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f000 80a2 	beq.w	800ae98 <_svfiprintf_r+0x1c8>
 800ad54:	2300      	movs	r3, #0
 800ad56:	f04f 32ff 	mov.w	r2, #4294967295
 800ad5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad5e:	f10a 0a01 	add.w	sl, sl, #1
 800ad62:	9304      	str	r3, [sp, #16]
 800ad64:	9307      	str	r3, [sp, #28]
 800ad66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ad6c:	4654      	mov	r4, sl
 800ad6e:	2205      	movs	r2, #5
 800ad70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad74:	4851      	ldr	r0, [pc, #324]	; (800aebc <_svfiprintf_r+0x1ec>)
 800ad76:	f7f5 fa3b 	bl	80001f0 <memchr>
 800ad7a:	9a04      	ldr	r2, [sp, #16]
 800ad7c:	b9d8      	cbnz	r0, 800adb6 <_svfiprintf_r+0xe6>
 800ad7e:	06d0      	lsls	r0, r2, #27
 800ad80:	bf44      	itt	mi
 800ad82:	2320      	movmi	r3, #32
 800ad84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad88:	0711      	lsls	r1, r2, #28
 800ad8a:	bf44      	itt	mi
 800ad8c:	232b      	movmi	r3, #43	; 0x2b
 800ad8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad92:	f89a 3000 	ldrb.w	r3, [sl]
 800ad96:	2b2a      	cmp	r3, #42	; 0x2a
 800ad98:	d015      	beq.n	800adc6 <_svfiprintf_r+0xf6>
 800ad9a:	9a07      	ldr	r2, [sp, #28]
 800ad9c:	4654      	mov	r4, sl
 800ad9e:	2000      	movs	r0, #0
 800ada0:	f04f 0c0a 	mov.w	ip, #10
 800ada4:	4621      	mov	r1, r4
 800ada6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adaa:	3b30      	subs	r3, #48	; 0x30
 800adac:	2b09      	cmp	r3, #9
 800adae:	d94e      	bls.n	800ae4e <_svfiprintf_r+0x17e>
 800adb0:	b1b0      	cbz	r0, 800ade0 <_svfiprintf_r+0x110>
 800adb2:	9207      	str	r2, [sp, #28]
 800adb4:	e014      	b.n	800ade0 <_svfiprintf_r+0x110>
 800adb6:	eba0 0308 	sub.w	r3, r0, r8
 800adba:	fa09 f303 	lsl.w	r3, r9, r3
 800adbe:	4313      	orrs	r3, r2
 800adc0:	9304      	str	r3, [sp, #16]
 800adc2:	46a2      	mov	sl, r4
 800adc4:	e7d2      	b.n	800ad6c <_svfiprintf_r+0x9c>
 800adc6:	9b03      	ldr	r3, [sp, #12]
 800adc8:	1d19      	adds	r1, r3, #4
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	9103      	str	r1, [sp, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	bfbb      	ittet	lt
 800add2:	425b      	neglt	r3, r3
 800add4:	f042 0202 	orrlt.w	r2, r2, #2
 800add8:	9307      	strge	r3, [sp, #28]
 800adda:	9307      	strlt	r3, [sp, #28]
 800addc:	bfb8      	it	lt
 800adde:	9204      	strlt	r2, [sp, #16]
 800ade0:	7823      	ldrb	r3, [r4, #0]
 800ade2:	2b2e      	cmp	r3, #46	; 0x2e
 800ade4:	d10c      	bne.n	800ae00 <_svfiprintf_r+0x130>
 800ade6:	7863      	ldrb	r3, [r4, #1]
 800ade8:	2b2a      	cmp	r3, #42	; 0x2a
 800adea:	d135      	bne.n	800ae58 <_svfiprintf_r+0x188>
 800adec:	9b03      	ldr	r3, [sp, #12]
 800adee:	1d1a      	adds	r2, r3, #4
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	9203      	str	r2, [sp, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bfb8      	it	lt
 800adf8:	f04f 33ff 	movlt.w	r3, #4294967295
 800adfc:	3402      	adds	r4, #2
 800adfe:	9305      	str	r3, [sp, #20]
 800ae00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aecc <_svfiprintf_r+0x1fc>
 800ae04:	7821      	ldrb	r1, [r4, #0]
 800ae06:	2203      	movs	r2, #3
 800ae08:	4650      	mov	r0, sl
 800ae0a:	f7f5 f9f1 	bl	80001f0 <memchr>
 800ae0e:	b140      	cbz	r0, 800ae22 <_svfiprintf_r+0x152>
 800ae10:	2340      	movs	r3, #64	; 0x40
 800ae12:	eba0 000a 	sub.w	r0, r0, sl
 800ae16:	fa03 f000 	lsl.w	r0, r3, r0
 800ae1a:	9b04      	ldr	r3, [sp, #16]
 800ae1c:	4303      	orrs	r3, r0
 800ae1e:	3401      	adds	r4, #1
 800ae20:	9304      	str	r3, [sp, #16]
 800ae22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae26:	4826      	ldr	r0, [pc, #152]	; (800aec0 <_svfiprintf_r+0x1f0>)
 800ae28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae2c:	2206      	movs	r2, #6
 800ae2e:	f7f5 f9df 	bl	80001f0 <memchr>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d038      	beq.n	800aea8 <_svfiprintf_r+0x1d8>
 800ae36:	4b23      	ldr	r3, [pc, #140]	; (800aec4 <_svfiprintf_r+0x1f4>)
 800ae38:	bb1b      	cbnz	r3, 800ae82 <_svfiprintf_r+0x1b2>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	3307      	adds	r3, #7
 800ae3e:	f023 0307 	bic.w	r3, r3, #7
 800ae42:	3308      	adds	r3, #8
 800ae44:	9303      	str	r3, [sp, #12]
 800ae46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae48:	4433      	add	r3, r6
 800ae4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4c:	e767      	b.n	800ad1e <_svfiprintf_r+0x4e>
 800ae4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae52:	460c      	mov	r4, r1
 800ae54:	2001      	movs	r0, #1
 800ae56:	e7a5      	b.n	800ada4 <_svfiprintf_r+0xd4>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	3401      	adds	r4, #1
 800ae5c:	9305      	str	r3, [sp, #20]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	f04f 0c0a 	mov.w	ip, #10
 800ae64:	4620      	mov	r0, r4
 800ae66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae6a:	3a30      	subs	r2, #48	; 0x30
 800ae6c:	2a09      	cmp	r2, #9
 800ae6e:	d903      	bls.n	800ae78 <_svfiprintf_r+0x1a8>
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d0c5      	beq.n	800ae00 <_svfiprintf_r+0x130>
 800ae74:	9105      	str	r1, [sp, #20]
 800ae76:	e7c3      	b.n	800ae00 <_svfiprintf_r+0x130>
 800ae78:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e7f0      	b.n	800ae64 <_svfiprintf_r+0x194>
 800ae82:	ab03      	add	r3, sp, #12
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	462a      	mov	r2, r5
 800ae88:	4b0f      	ldr	r3, [pc, #60]	; (800aec8 <_svfiprintf_r+0x1f8>)
 800ae8a:	a904      	add	r1, sp, #16
 800ae8c:	4638      	mov	r0, r7
 800ae8e:	f7fc fae1 	bl	8007454 <_printf_float>
 800ae92:	1c42      	adds	r2, r0, #1
 800ae94:	4606      	mov	r6, r0
 800ae96:	d1d6      	bne.n	800ae46 <_svfiprintf_r+0x176>
 800ae98:	89ab      	ldrh	r3, [r5, #12]
 800ae9a:	065b      	lsls	r3, r3, #25
 800ae9c:	f53f af2c 	bmi.w	800acf8 <_svfiprintf_r+0x28>
 800aea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aea2:	b01d      	add	sp, #116	; 0x74
 800aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea8:	ab03      	add	r3, sp, #12
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	462a      	mov	r2, r5
 800aeae:	4b06      	ldr	r3, [pc, #24]	; (800aec8 <_svfiprintf_r+0x1f8>)
 800aeb0:	a904      	add	r1, sp, #16
 800aeb2:	4638      	mov	r0, r7
 800aeb4:	f7fc fd72 	bl	800799c <_printf_i>
 800aeb8:	e7eb      	b.n	800ae92 <_svfiprintf_r+0x1c2>
 800aeba:	bf00      	nop
 800aebc:	0800bf24 	.word	0x0800bf24
 800aec0:	0800bf2e 	.word	0x0800bf2e
 800aec4:	08007455 	.word	0x08007455
 800aec8:	0800ac1b 	.word	0x0800ac1b
 800aecc:	0800bf2a 	.word	0x0800bf2a

0800aed0 <nan>:
 800aed0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aed8 <nan+0x8>
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	00000000 	.word	0x00000000
 800aedc:	7ff80000 	.word	0x7ff80000

0800aee0 <strncmp>:
 800aee0:	b510      	push	{r4, lr}
 800aee2:	b17a      	cbz	r2, 800af04 <strncmp+0x24>
 800aee4:	4603      	mov	r3, r0
 800aee6:	3901      	subs	r1, #1
 800aee8:	1884      	adds	r4, r0, r2
 800aeea:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aeee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aef2:	4290      	cmp	r0, r2
 800aef4:	d101      	bne.n	800aefa <strncmp+0x1a>
 800aef6:	42a3      	cmp	r3, r4
 800aef8:	d101      	bne.n	800aefe <strncmp+0x1e>
 800aefa:	1a80      	subs	r0, r0, r2
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	2800      	cmp	r0, #0
 800af00:	d1f3      	bne.n	800aeea <strncmp+0xa>
 800af02:	e7fa      	b.n	800aefa <strncmp+0x1a>
 800af04:	4610      	mov	r0, r2
 800af06:	e7f9      	b.n	800aefc <strncmp+0x1c>

0800af08 <__ascii_wctomb>:
 800af08:	b149      	cbz	r1, 800af1e <__ascii_wctomb+0x16>
 800af0a:	2aff      	cmp	r2, #255	; 0xff
 800af0c:	bf85      	ittet	hi
 800af0e:	238a      	movhi	r3, #138	; 0x8a
 800af10:	6003      	strhi	r3, [r0, #0]
 800af12:	700a      	strbls	r2, [r1, #0]
 800af14:	f04f 30ff 	movhi.w	r0, #4294967295
 800af18:	bf98      	it	ls
 800af1a:	2001      	movls	r0, #1
 800af1c:	4770      	bx	lr
 800af1e:	4608      	mov	r0, r1
 800af20:	4770      	bx	lr
	...

0800af24 <__assert_func>:
 800af24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af26:	4614      	mov	r4, r2
 800af28:	461a      	mov	r2, r3
 800af2a:	4b09      	ldr	r3, [pc, #36]	; (800af50 <__assert_func+0x2c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4605      	mov	r5, r0
 800af30:	68d8      	ldr	r0, [r3, #12]
 800af32:	b14c      	cbz	r4, 800af48 <__assert_func+0x24>
 800af34:	4b07      	ldr	r3, [pc, #28]	; (800af54 <__assert_func+0x30>)
 800af36:	9100      	str	r1, [sp, #0]
 800af38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af3c:	4906      	ldr	r1, [pc, #24]	; (800af58 <__assert_func+0x34>)
 800af3e:	462b      	mov	r3, r5
 800af40:	f000 f80e 	bl	800af60 <fiprintf>
 800af44:	f000 fa84 	bl	800b450 <abort>
 800af48:	4b04      	ldr	r3, [pc, #16]	; (800af5c <__assert_func+0x38>)
 800af4a:	461c      	mov	r4, r3
 800af4c:	e7f3      	b.n	800af36 <__assert_func+0x12>
 800af4e:	bf00      	nop
 800af50:	2000000c 	.word	0x2000000c
 800af54:	0800bf35 	.word	0x0800bf35
 800af58:	0800bf42 	.word	0x0800bf42
 800af5c:	0800bf70 	.word	0x0800bf70

0800af60 <fiprintf>:
 800af60:	b40e      	push	{r1, r2, r3}
 800af62:	b503      	push	{r0, r1, lr}
 800af64:	4601      	mov	r1, r0
 800af66:	ab03      	add	r3, sp, #12
 800af68:	4805      	ldr	r0, [pc, #20]	; (800af80 <fiprintf+0x20>)
 800af6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af6e:	6800      	ldr	r0, [r0, #0]
 800af70:	9301      	str	r3, [sp, #4]
 800af72:	f000 f87d 	bl	800b070 <_vfiprintf_r>
 800af76:	b002      	add	sp, #8
 800af78:	f85d eb04 	ldr.w	lr, [sp], #4
 800af7c:	b003      	add	sp, #12
 800af7e:	4770      	bx	lr
 800af80:	2000000c 	.word	0x2000000c

0800af84 <__retarget_lock_init_recursive>:
 800af84:	4770      	bx	lr

0800af86 <__retarget_lock_acquire_recursive>:
 800af86:	4770      	bx	lr

0800af88 <__retarget_lock_release_recursive>:
 800af88:	4770      	bx	lr

0800af8a <memmove>:
 800af8a:	4288      	cmp	r0, r1
 800af8c:	b510      	push	{r4, lr}
 800af8e:	eb01 0402 	add.w	r4, r1, r2
 800af92:	d902      	bls.n	800af9a <memmove+0x10>
 800af94:	4284      	cmp	r4, r0
 800af96:	4623      	mov	r3, r4
 800af98:	d807      	bhi.n	800afaa <memmove+0x20>
 800af9a:	1e43      	subs	r3, r0, #1
 800af9c:	42a1      	cmp	r1, r4
 800af9e:	d008      	beq.n	800afb2 <memmove+0x28>
 800afa0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afa4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afa8:	e7f8      	b.n	800af9c <memmove+0x12>
 800afaa:	4402      	add	r2, r0
 800afac:	4601      	mov	r1, r0
 800afae:	428a      	cmp	r2, r1
 800afb0:	d100      	bne.n	800afb4 <memmove+0x2a>
 800afb2:	bd10      	pop	{r4, pc}
 800afb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afb8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afbc:	e7f7      	b.n	800afae <memmove+0x24>

0800afbe <_realloc_r>:
 800afbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc2:	4680      	mov	r8, r0
 800afc4:	4614      	mov	r4, r2
 800afc6:	460e      	mov	r6, r1
 800afc8:	b921      	cbnz	r1, 800afd4 <_realloc_r+0x16>
 800afca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afce:	4611      	mov	r1, r2
 800afd0:	f7fc b92c 	b.w	800722c <_malloc_r>
 800afd4:	b92a      	cbnz	r2, 800afe2 <_realloc_r+0x24>
 800afd6:	f7fc f8bd 	bl	8007154 <_free_r>
 800afda:	4625      	mov	r5, r4
 800afdc:	4628      	mov	r0, r5
 800afde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe2:	f000 fc59 	bl	800b898 <_malloc_usable_size_r>
 800afe6:	4284      	cmp	r4, r0
 800afe8:	4607      	mov	r7, r0
 800afea:	d802      	bhi.n	800aff2 <_realloc_r+0x34>
 800afec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aff0:	d812      	bhi.n	800b018 <_realloc_r+0x5a>
 800aff2:	4621      	mov	r1, r4
 800aff4:	4640      	mov	r0, r8
 800aff6:	f7fc f919 	bl	800722c <_malloc_r>
 800affa:	4605      	mov	r5, r0
 800affc:	2800      	cmp	r0, #0
 800affe:	d0ed      	beq.n	800afdc <_realloc_r+0x1e>
 800b000:	42bc      	cmp	r4, r7
 800b002:	4622      	mov	r2, r4
 800b004:	4631      	mov	r1, r6
 800b006:	bf28      	it	cs
 800b008:	463a      	movcs	r2, r7
 800b00a:	f7ff f915 	bl	800a238 <memcpy>
 800b00e:	4631      	mov	r1, r6
 800b010:	4640      	mov	r0, r8
 800b012:	f7fc f89f 	bl	8007154 <_free_r>
 800b016:	e7e1      	b.n	800afdc <_realloc_r+0x1e>
 800b018:	4635      	mov	r5, r6
 800b01a:	e7df      	b.n	800afdc <_realloc_r+0x1e>

0800b01c <__sfputc_r>:
 800b01c:	6893      	ldr	r3, [r2, #8]
 800b01e:	3b01      	subs	r3, #1
 800b020:	2b00      	cmp	r3, #0
 800b022:	b410      	push	{r4}
 800b024:	6093      	str	r3, [r2, #8]
 800b026:	da08      	bge.n	800b03a <__sfputc_r+0x1e>
 800b028:	6994      	ldr	r4, [r2, #24]
 800b02a:	42a3      	cmp	r3, r4
 800b02c:	db01      	blt.n	800b032 <__sfputc_r+0x16>
 800b02e:	290a      	cmp	r1, #10
 800b030:	d103      	bne.n	800b03a <__sfputc_r+0x1e>
 800b032:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b036:	f000 b94b 	b.w	800b2d0 <__swbuf_r>
 800b03a:	6813      	ldr	r3, [r2, #0]
 800b03c:	1c58      	adds	r0, r3, #1
 800b03e:	6010      	str	r0, [r2, #0]
 800b040:	7019      	strb	r1, [r3, #0]
 800b042:	4608      	mov	r0, r1
 800b044:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <__sfputs_r>:
 800b04a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04c:	4606      	mov	r6, r0
 800b04e:	460f      	mov	r7, r1
 800b050:	4614      	mov	r4, r2
 800b052:	18d5      	adds	r5, r2, r3
 800b054:	42ac      	cmp	r4, r5
 800b056:	d101      	bne.n	800b05c <__sfputs_r+0x12>
 800b058:	2000      	movs	r0, #0
 800b05a:	e007      	b.n	800b06c <__sfputs_r+0x22>
 800b05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b060:	463a      	mov	r2, r7
 800b062:	4630      	mov	r0, r6
 800b064:	f7ff ffda 	bl	800b01c <__sfputc_r>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d1f3      	bne.n	800b054 <__sfputs_r+0xa>
 800b06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b070 <_vfiprintf_r>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	460d      	mov	r5, r1
 800b076:	b09d      	sub	sp, #116	; 0x74
 800b078:	4614      	mov	r4, r2
 800b07a:	4698      	mov	r8, r3
 800b07c:	4606      	mov	r6, r0
 800b07e:	b118      	cbz	r0, 800b088 <_vfiprintf_r+0x18>
 800b080:	6983      	ldr	r3, [r0, #24]
 800b082:	b90b      	cbnz	r3, 800b088 <_vfiprintf_r+0x18>
 800b084:	f000 fb06 	bl	800b694 <__sinit>
 800b088:	4b89      	ldr	r3, [pc, #548]	; (800b2b0 <_vfiprintf_r+0x240>)
 800b08a:	429d      	cmp	r5, r3
 800b08c:	d11b      	bne.n	800b0c6 <_vfiprintf_r+0x56>
 800b08e:	6875      	ldr	r5, [r6, #4]
 800b090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b092:	07d9      	lsls	r1, r3, #31
 800b094:	d405      	bmi.n	800b0a2 <_vfiprintf_r+0x32>
 800b096:	89ab      	ldrh	r3, [r5, #12]
 800b098:	059a      	lsls	r2, r3, #22
 800b09a:	d402      	bmi.n	800b0a2 <_vfiprintf_r+0x32>
 800b09c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b09e:	f7ff ff72 	bl	800af86 <__retarget_lock_acquire_recursive>
 800b0a2:	89ab      	ldrh	r3, [r5, #12]
 800b0a4:	071b      	lsls	r3, r3, #28
 800b0a6:	d501      	bpl.n	800b0ac <_vfiprintf_r+0x3c>
 800b0a8:	692b      	ldr	r3, [r5, #16]
 800b0aa:	b9eb      	cbnz	r3, 800b0e8 <_vfiprintf_r+0x78>
 800b0ac:	4629      	mov	r1, r5
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f000 f960 	bl	800b374 <__swsetup_r>
 800b0b4:	b1c0      	cbz	r0, 800b0e8 <_vfiprintf_r+0x78>
 800b0b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0b8:	07dc      	lsls	r4, r3, #31
 800b0ba:	d50e      	bpl.n	800b0da <_vfiprintf_r+0x6a>
 800b0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c0:	b01d      	add	sp, #116	; 0x74
 800b0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c6:	4b7b      	ldr	r3, [pc, #492]	; (800b2b4 <_vfiprintf_r+0x244>)
 800b0c8:	429d      	cmp	r5, r3
 800b0ca:	d101      	bne.n	800b0d0 <_vfiprintf_r+0x60>
 800b0cc:	68b5      	ldr	r5, [r6, #8]
 800b0ce:	e7df      	b.n	800b090 <_vfiprintf_r+0x20>
 800b0d0:	4b79      	ldr	r3, [pc, #484]	; (800b2b8 <_vfiprintf_r+0x248>)
 800b0d2:	429d      	cmp	r5, r3
 800b0d4:	bf08      	it	eq
 800b0d6:	68f5      	ldreq	r5, [r6, #12]
 800b0d8:	e7da      	b.n	800b090 <_vfiprintf_r+0x20>
 800b0da:	89ab      	ldrh	r3, [r5, #12]
 800b0dc:	0598      	lsls	r0, r3, #22
 800b0de:	d4ed      	bmi.n	800b0bc <_vfiprintf_r+0x4c>
 800b0e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0e2:	f7ff ff51 	bl	800af88 <__retarget_lock_release_recursive>
 800b0e6:	e7e9      	b.n	800b0bc <_vfiprintf_r+0x4c>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ec:	2320      	movs	r3, #32
 800b0ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0f6:	2330      	movs	r3, #48	; 0x30
 800b0f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2bc <_vfiprintf_r+0x24c>
 800b0fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b100:	f04f 0901 	mov.w	r9, #1
 800b104:	4623      	mov	r3, r4
 800b106:	469a      	mov	sl, r3
 800b108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b10c:	b10a      	cbz	r2, 800b112 <_vfiprintf_r+0xa2>
 800b10e:	2a25      	cmp	r2, #37	; 0x25
 800b110:	d1f9      	bne.n	800b106 <_vfiprintf_r+0x96>
 800b112:	ebba 0b04 	subs.w	fp, sl, r4
 800b116:	d00b      	beq.n	800b130 <_vfiprintf_r+0xc0>
 800b118:	465b      	mov	r3, fp
 800b11a:	4622      	mov	r2, r4
 800b11c:	4629      	mov	r1, r5
 800b11e:	4630      	mov	r0, r6
 800b120:	f7ff ff93 	bl	800b04a <__sfputs_r>
 800b124:	3001      	adds	r0, #1
 800b126:	f000 80aa 	beq.w	800b27e <_vfiprintf_r+0x20e>
 800b12a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b12c:	445a      	add	r2, fp
 800b12e:	9209      	str	r2, [sp, #36]	; 0x24
 800b130:	f89a 3000 	ldrb.w	r3, [sl]
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 80a2 	beq.w	800b27e <_vfiprintf_r+0x20e>
 800b13a:	2300      	movs	r3, #0
 800b13c:	f04f 32ff 	mov.w	r2, #4294967295
 800b140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b144:	f10a 0a01 	add.w	sl, sl, #1
 800b148:	9304      	str	r3, [sp, #16]
 800b14a:	9307      	str	r3, [sp, #28]
 800b14c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b150:	931a      	str	r3, [sp, #104]	; 0x68
 800b152:	4654      	mov	r4, sl
 800b154:	2205      	movs	r2, #5
 800b156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b15a:	4858      	ldr	r0, [pc, #352]	; (800b2bc <_vfiprintf_r+0x24c>)
 800b15c:	f7f5 f848 	bl	80001f0 <memchr>
 800b160:	9a04      	ldr	r2, [sp, #16]
 800b162:	b9d8      	cbnz	r0, 800b19c <_vfiprintf_r+0x12c>
 800b164:	06d1      	lsls	r1, r2, #27
 800b166:	bf44      	itt	mi
 800b168:	2320      	movmi	r3, #32
 800b16a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b16e:	0713      	lsls	r3, r2, #28
 800b170:	bf44      	itt	mi
 800b172:	232b      	movmi	r3, #43	; 0x2b
 800b174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b178:	f89a 3000 	ldrb.w	r3, [sl]
 800b17c:	2b2a      	cmp	r3, #42	; 0x2a
 800b17e:	d015      	beq.n	800b1ac <_vfiprintf_r+0x13c>
 800b180:	9a07      	ldr	r2, [sp, #28]
 800b182:	4654      	mov	r4, sl
 800b184:	2000      	movs	r0, #0
 800b186:	f04f 0c0a 	mov.w	ip, #10
 800b18a:	4621      	mov	r1, r4
 800b18c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b190:	3b30      	subs	r3, #48	; 0x30
 800b192:	2b09      	cmp	r3, #9
 800b194:	d94e      	bls.n	800b234 <_vfiprintf_r+0x1c4>
 800b196:	b1b0      	cbz	r0, 800b1c6 <_vfiprintf_r+0x156>
 800b198:	9207      	str	r2, [sp, #28]
 800b19a:	e014      	b.n	800b1c6 <_vfiprintf_r+0x156>
 800b19c:	eba0 0308 	sub.w	r3, r0, r8
 800b1a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	9304      	str	r3, [sp, #16]
 800b1a8:	46a2      	mov	sl, r4
 800b1aa:	e7d2      	b.n	800b152 <_vfiprintf_r+0xe2>
 800b1ac:	9b03      	ldr	r3, [sp, #12]
 800b1ae:	1d19      	adds	r1, r3, #4
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	9103      	str	r1, [sp, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	bfbb      	ittet	lt
 800b1b8:	425b      	neglt	r3, r3
 800b1ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b1be:	9307      	strge	r3, [sp, #28]
 800b1c0:	9307      	strlt	r3, [sp, #28]
 800b1c2:	bfb8      	it	lt
 800b1c4:	9204      	strlt	r2, [sp, #16]
 800b1c6:	7823      	ldrb	r3, [r4, #0]
 800b1c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ca:	d10c      	bne.n	800b1e6 <_vfiprintf_r+0x176>
 800b1cc:	7863      	ldrb	r3, [r4, #1]
 800b1ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b1d0:	d135      	bne.n	800b23e <_vfiprintf_r+0x1ce>
 800b1d2:	9b03      	ldr	r3, [sp, #12]
 800b1d4:	1d1a      	adds	r2, r3, #4
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	9203      	str	r2, [sp, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	bfb8      	it	lt
 800b1de:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1e2:	3402      	adds	r4, #2
 800b1e4:	9305      	str	r3, [sp, #20]
 800b1e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2cc <_vfiprintf_r+0x25c>
 800b1ea:	7821      	ldrb	r1, [r4, #0]
 800b1ec:	2203      	movs	r2, #3
 800b1ee:	4650      	mov	r0, sl
 800b1f0:	f7f4 fffe 	bl	80001f0 <memchr>
 800b1f4:	b140      	cbz	r0, 800b208 <_vfiprintf_r+0x198>
 800b1f6:	2340      	movs	r3, #64	; 0x40
 800b1f8:	eba0 000a 	sub.w	r0, r0, sl
 800b1fc:	fa03 f000 	lsl.w	r0, r3, r0
 800b200:	9b04      	ldr	r3, [sp, #16]
 800b202:	4303      	orrs	r3, r0
 800b204:	3401      	adds	r4, #1
 800b206:	9304      	str	r3, [sp, #16]
 800b208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b20c:	482c      	ldr	r0, [pc, #176]	; (800b2c0 <_vfiprintf_r+0x250>)
 800b20e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b212:	2206      	movs	r2, #6
 800b214:	f7f4 ffec 	bl	80001f0 <memchr>
 800b218:	2800      	cmp	r0, #0
 800b21a:	d03f      	beq.n	800b29c <_vfiprintf_r+0x22c>
 800b21c:	4b29      	ldr	r3, [pc, #164]	; (800b2c4 <_vfiprintf_r+0x254>)
 800b21e:	bb1b      	cbnz	r3, 800b268 <_vfiprintf_r+0x1f8>
 800b220:	9b03      	ldr	r3, [sp, #12]
 800b222:	3307      	adds	r3, #7
 800b224:	f023 0307 	bic.w	r3, r3, #7
 800b228:	3308      	adds	r3, #8
 800b22a:	9303      	str	r3, [sp, #12]
 800b22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22e:	443b      	add	r3, r7
 800b230:	9309      	str	r3, [sp, #36]	; 0x24
 800b232:	e767      	b.n	800b104 <_vfiprintf_r+0x94>
 800b234:	fb0c 3202 	mla	r2, ip, r2, r3
 800b238:	460c      	mov	r4, r1
 800b23a:	2001      	movs	r0, #1
 800b23c:	e7a5      	b.n	800b18a <_vfiprintf_r+0x11a>
 800b23e:	2300      	movs	r3, #0
 800b240:	3401      	adds	r4, #1
 800b242:	9305      	str	r3, [sp, #20]
 800b244:	4619      	mov	r1, r3
 800b246:	f04f 0c0a 	mov.w	ip, #10
 800b24a:	4620      	mov	r0, r4
 800b24c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b250:	3a30      	subs	r2, #48	; 0x30
 800b252:	2a09      	cmp	r2, #9
 800b254:	d903      	bls.n	800b25e <_vfiprintf_r+0x1ee>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0c5      	beq.n	800b1e6 <_vfiprintf_r+0x176>
 800b25a:	9105      	str	r1, [sp, #20]
 800b25c:	e7c3      	b.n	800b1e6 <_vfiprintf_r+0x176>
 800b25e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b262:	4604      	mov	r4, r0
 800b264:	2301      	movs	r3, #1
 800b266:	e7f0      	b.n	800b24a <_vfiprintf_r+0x1da>
 800b268:	ab03      	add	r3, sp, #12
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	462a      	mov	r2, r5
 800b26e:	4b16      	ldr	r3, [pc, #88]	; (800b2c8 <_vfiprintf_r+0x258>)
 800b270:	a904      	add	r1, sp, #16
 800b272:	4630      	mov	r0, r6
 800b274:	f7fc f8ee 	bl	8007454 <_printf_float>
 800b278:	4607      	mov	r7, r0
 800b27a:	1c78      	adds	r0, r7, #1
 800b27c:	d1d6      	bne.n	800b22c <_vfiprintf_r+0x1bc>
 800b27e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b280:	07d9      	lsls	r1, r3, #31
 800b282:	d405      	bmi.n	800b290 <_vfiprintf_r+0x220>
 800b284:	89ab      	ldrh	r3, [r5, #12]
 800b286:	059a      	lsls	r2, r3, #22
 800b288:	d402      	bmi.n	800b290 <_vfiprintf_r+0x220>
 800b28a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b28c:	f7ff fe7c 	bl	800af88 <__retarget_lock_release_recursive>
 800b290:	89ab      	ldrh	r3, [r5, #12]
 800b292:	065b      	lsls	r3, r3, #25
 800b294:	f53f af12 	bmi.w	800b0bc <_vfiprintf_r+0x4c>
 800b298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b29a:	e711      	b.n	800b0c0 <_vfiprintf_r+0x50>
 800b29c:	ab03      	add	r3, sp, #12
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	462a      	mov	r2, r5
 800b2a2:	4b09      	ldr	r3, [pc, #36]	; (800b2c8 <_vfiprintf_r+0x258>)
 800b2a4:	a904      	add	r1, sp, #16
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f7fc fb78 	bl	800799c <_printf_i>
 800b2ac:	e7e4      	b.n	800b278 <_vfiprintf_r+0x208>
 800b2ae:	bf00      	nop
 800b2b0:	0800bf94 	.word	0x0800bf94
 800b2b4:	0800bfb4 	.word	0x0800bfb4
 800b2b8:	0800bf74 	.word	0x0800bf74
 800b2bc:	0800bf24 	.word	0x0800bf24
 800b2c0:	0800bf2e 	.word	0x0800bf2e
 800b2c4:	08007455 	.word	0x08007455
 800b2c8:	0800b04b 	.word	0x0800b04b
 800b2cc:	0800bf2a 	.word	0x0800bf2a

0800b2d0 <__swbuf_r>:
 800b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d2:	460e      	mov	r6, r1
 800b2d4:	4614      	mov	r4, r2
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	b118      	cbz	r0, 800b2e2 <__swbuf_r+0x12>
 800b2da:	6983      	ldr	r3, [r0, #24]
 800b2dc:	b90b      	cbnz	r3, 800b2e2 <__swbuf_r+0x12>
 800b2de:	f000 f9d9 	bl	800b694 <__sinit>
 800b2e2:	4b21      	ldr	r3, [pc, #132]	; (800b368 <__swbuf_r+0x98>)
 800b2e4:	429c      	cmp	r4, r3
 800b2e6:	d12b      	bne.n	800b340 <__swbuf_r+0x70>
 800b2e8:	686c      	ldr	r4, [r5, #4]
 800b2ea:	69a3      	ldr	r3, [r4, #24]
 800b2ec:	60a3      	str	r3, [r4, #8]
 800b2ee:	89a3      	ldrh	r3, [r4, #12]
 800b2f0:	071a      	lsls	r2, r3, #28
 800b2f2:	d52f      	bpl.n	800b354 <__swbuf_r+0x84>
 800b2f4:	6923      	ldr	r3, [r4, #16]
 800b2f6:	b36b      	cbz	r3, 800b354 <__swbuf_r+0x84>
 800b2f8:	6923      	ldr	r3, [r4, #16]
 800b2fa:	6820      	ldr	r0, [r4, #0]
 800b2fc:	1ac0      	subs	r0, r0, r3
 800b2fe:	6963      	ldr	r3, [r4, #20]
 800b300:	b2f6      	uxtb	r6, r6
 800b302:	4283      	cmp	r3, r0
 800b304:	4637      	mov	r7, r6
 800b306:	dc04      	bgt.n	800b312 <__swbuf_r+0x42>
 800b308:	4621      	mov	r1, r4
 800b30a:	4628      	mov	r0, r5
 800b30c:	f000 f92e 	bl	800b56c <_fflush_r>
 800b310:	bb30      	cbnz	r0, 800b360 <__swbuf_r+0x90>
 800b312:	68a3      	ldr	r3, [r4, #8]
 800b314:	3b01      	subs	r3, #1
 800b316:	60a3      	str	r3, [r4, #8]
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	6022      	str	r2, [r4, #0]
 800b31e:	701e      	strb	r6, [r3, #0]
 800b320:	6963      	ldr	r3, [r4, #20]
 800b322:	3001      	adds	r0, #1
 800b324:	4283      	cmp	r3, r0
 800b326:	d004      	beq.n	800b332 <__swbuf_r+0x62>
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	07db      	lsls	r3, r3, #31
 800b32c:	d506      	bpl.n	800b33c <__swbuf_r+0x6c>
 800b32e:	2e0a      	cmp	r6, #10
 800b330:	d104      	bne.n	800b33c <__swbuf_r+0x6c>
 800b332:	4621      	mov	r1, r4
 800b334:	4628      	mov	r0, r5
 800b336:	f000 f919 	bl	800b56c <_fflush_r>
 800b33a:	b988      	cbnz	r0, 800b360 <__swbuf_r+0x90>
 800b33c:	4638      	mov	r0, r7
 800b33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b340:	4b0a      	ldr	r3, [pc, #40]	; (800b36c <__swbuf_r+0x9c>)
 800b342:	429c      	cmp	r4, r3
 800b344:	d101      	bne.n	800b34a <__swbuf_r+0x7a>
 800b346:	68ac      	ldr	r4, [r5, #8]
 800b348:	e7cf      	b.n	800b2ea <__swbuf_r+0x1a>
 800b34a:	4b09      	ldr	r3, [pc, #36]	; (800b370 <__swbuf_r+0xa0>)
 800b34c:	429c      	cmp	r4, r3
 800b34e:	bf08      	it	eq
 800b350:	68ec      	ldreq	r4, [r5, #12]
 800b352:	e7ca      	b.n	800b2ea <__swbuf_r+0x1a>
 800b354:	4621      	mov	r1, r4
 800b356:	4628      	mov	r0, r5
 800b358:	f000 f80c 	bl	800b374 <__swsetup_r>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d0cb      	beq.n	800b2f8 <__swbuf_r+0x28>
 800b360:	f04f 37ff 	mov.w	r7, #4294967295
 800b364:	e7ea      	b.n	800b33c <__swbuf_r+0x6c>
 800b366:	bf00      	nop
 800b368:	0800bf94 	.word	0x0800bf94
 800b36c:	0800bfb4 	.word	0x0800bfb4
 800b370:	0800bf74 	.word	0x0800bf74

0800b374 <__swsetup_r>:
 800b374:	4b32      	ldr	r3, [pc, #200]	; (800b440 <__swsetup_r+0xcc>)
 800b376:	b570      	push	{r4, r5, r6, lr}
 800b378:	681d      	ldr	r5, [r3, #0]
 800b37a:	4606      	mov	r6, r0
 800b37c:	460c      	mov	r4, r1
 800b37e:	b125      	cbz	r5, 800b38a <__swsetup_r+0x16>
 800b380:	69ab      	ldr	r3, [r5, #24]
 800b382:	b913      	cbnz	r3, 800b38a <__swsetup_r+0x16>
 800b384:	4628      	mov	r0, r5
 800b386:	f000 f985 	bl	800b694 <__sinit>
 800b38a:	4b2e      	ldr	r3, [pc, #184]	; (800b444 <__swsetup_r+0xd0>)
 800b38c:	429c      	cmp	r4, r3
 800b38e:	d10f      	bne.n	800b3b0 <__swsetup_r+0x3c>
 800b390:	686c      	ldr	r4, [r5, #4]
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b398:	0719      	lsls	r1, r3, #28
 800b39a:	d42c      	bmi.n	800b3f6 <__swsetup_r+0x82>
 800b39c:	06dd      	lsls	r5, r3, #27
 800b39e:	d411      	bmi.n	800b3c4 <__swsetup_r+0x50>
 800b3a0:	2309      	movs	r3, #9
 800b3a2:	6033      	str	r3, [r6, #0]
 800b3a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3a8:	81a3      	strh	r3, [r4, #12]
 800b3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ae:	e03e      	b.n	800b42e <__swsetup_r+0xba>
 800b3b0:	4b25      	ldr	r3, [pc, #148]	; (800b448 <__swsetup_r+0xd4>)
 800b3b2:	429c      	cmp	r4, r3
 800b3b4:	d101      	bne.n	800b3ba <__swsetup_r+0x46>
 800b3b6:	68ac      	ldr	r4, [r5, #8]
 800b3b8:	e7eb      	b.n	800b392 <__swsetup_r+0x1e>
 800b3ba:	4b24      	ldr	r3, [pc, #144]	; (800b44c <__swsetup_r+0xd8>)
 800b3bc:	429c      	cmp	r4, r3
 800b3be:	bf08      	it	eq
 800b3c0:	68ec      	ldreq	r4, [r5, #12]
 800b3c2:	e7e6      	b.n	800b392 <__swsetup_r+0x1e>
 800b3c4:	0758      	lsls	r0, r3, #29
 800b3c6:	d512      	bpl.n	800b3ee <__swsetup_r+0x7a>
 800b3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3ca:	b141      	cbz	r1, 800b3de <__swsetup_r+0x6a>
 800b3cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3d0:	4299      	cmp	r1, r3
 800b3d2:	d002      	beq.n	800b3da <__swsetup_r+0x66>
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	f7fb febd 	bl	8007154 <_free_r>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	6363      	str	r3, [r4, #52]	; 0x34
 800b3de:	89a3      	ldrh	r3, [r4, #12]
 800b3e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3e4:	81a3      	strh	r3, [r4, #12]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	6063      	str	r3, [r4, #4]
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f043 0308 	orr.w	r3, r3, #8
 800b3f4:	81a3      	strh	r3, [r4, #12]
 800b3f6:	6923      	ldr	r3, [r4, #16]
 800b3f8:	b94b      	cbnz	r3, 800b40e <__swsetup_r+0x9a>
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b404:	d003      	beq.n	800b40e <__swsetup_r+0x9a>
 800b406:	4621      	mov	r1, r4
 800b408:	4630      	mov	r0, r6
 800b40a:	f000 fa05 	bl	800b818 <__smakebuf_r>
 800b40e:	89a0      	ldrh	r0, [r4, #12]
 800b410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b414:	f010 0301 	ands.w	r3, r0, #1
 800b418:	d00a      	beq.n	800b430 <__swsetup_r+0xbc>
 800b41a:	2300      	movs	r3, #0
 800b41c:	60a3      	str	r3, [r4, #8]
 800b41e:	6963      	ldr	r3, [r4, #20]
 800b420:	425b      	negs	r3, r3
 800b422:	61a3      	str	r3, [r4, #24]
 800b424:	6923      	ldr	r3, [r4, #16]
 800b426:	b943      	cbnz	r3, 800b43a <__swsetup_r+0xc6>
 800b428:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b42c:	d1ba      	bne.n	800b3a4 <__swsetup_r+0x30>
 800b42e:	bd70      	pop	{r4, r5, r6, pc}
 800b430:	0781      	lsls	r1, r0, #30
 800b432:	bf58      	it	pl
 800b434:	6963      	ldrpl	r3, [r4, #20]
 800b436:	60a3      	str	r3, [r4, #8]
 800b438:	e7f4      	b.n	800b424 <__swsetup_r+0xb0>
 800b43a:	2000      	movs	r0, #0
 800b43c:	e7f7      	b.n	800b42e <__swsetup_r+0xba>
 800b43e:	bf00      	nop
 800b440:	2000000c 	.word	0x2000000c
 800b444:	0800bf94 	.word	0x0800bf94
 800b448:	0800bfb4 	.word	0x0800bfb4
 800b44c:	0800bf74 	.word	0x0800bf74

0800b450 <abort>:
 800b450:	b508      	push	{r3, lr}
 800b452:	2006      	movs	r0, #6
 800b454:	f000 fa50 	bl	800b8f8 <raise>
 800b458:	2001      	movs	r0, #1
 800b45a:	f7f6 fddd 	bl	8002018 <_exit>
	...

0800b460 <__sflush_r>:
 800b460:	898a      	ldrh	r2, [r1, #12]
 800b462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b466:	4605      	mov	r5, r0
 800b468:	0710      	lsls	r0, r2, #28
 800b46a:	460c      	mov	r4, r1
 800b46c:	d458      	bmi.n	800b520 <__sflush_r+0xc0>
 800b46e:	684b      	ldr	r3, [r1, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	dc05      	bgt.n	800b480 <__sflush_r+0x20>
 800b474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b476:	2b00      	cmp	r3, #0
 800b478:	dc02      	bgt.n	800b480 <__sflush_r+0x20>
 800b47a:	2000      	movs	r0, #0
 800b47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b482:	2e00      	cmp	r6, #0
 800b484:	d0f9      	beq.n	800b47a <__sflush_r+0x1a>
 800b486:	2300      	movs	r3, #0
 800b488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b48c:	682f      	ldr	r7, [r5, #0]
 800b48e:	602b      	str	r3, [r5, #0]
 800b490:	d032      	beq.n	800b4f8 <__sflush_r+0x98>
 800b492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b494:	89a3      	ldrh	r3, [r4, #12]
 800b496:	075a      	lsls	r2, r3, #29
 800b498:	d505      	bpl.n	800b4a6 <__sflush_r+0x46>
 800b49a:	6863      	ldr	r3, [r4, #4]
 800b49c:	1ac0      	subs	r0, r0, r3
 800b49e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4a0:	b10b      	cbz	r3, 800b4a6 <__sflush_r+0x46>
 800b4a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4a4:	1ac0      	subs	r0, r0, r3
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4ac:	6a21      	ldr	r1, [r4, #32]
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	47b0      	blx	r6
 800b4b2:	1c43      	adds	r3, r0, #1
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	d106      	bne.n	800b4c6 <__sflush_r+0x66>
 800b4b8:	6829      	ldr	r1, [r5, #0]
 800b4ba:	291d      	cmp	r1, #29
 800b4bc:	d82c      	bhi.n	800b518 <__sflush_r+0xb8>
 800b4be:	4a2a      	ldr	r2, [pc, #168]	; (800b568 <__sflush_r+0x108>)
 800b4c0:	40ca      	lsrs	r2, r1
 800b4c2:	07d6      	lsls	r6, r2, #31
 800b4c4:	d528      	bpl.n	800b518 <__sflush_r+0xb8>
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	6062      	str	r2, [r4, #4]
 800b4ca:	04d9      	lsls	r1, r3, #19
 800b4cc:	6922      	ldr	r2, [r4, #16]
 800b4ce:	6022      	str	r2, [r4, #0]
 800b4d0:	d504      	bpl.n	800b4dc <__sflush_r+0x7c>
 800b4d2:	1c42      	adds	r2, r0, #1
 800b4d4:	d101      	bne.n	800b4da <__sflush_r+0x7a>
 800b4d6:	682b      	ldr	r3, [r5, #0]
 800b4d8:	b903      	cbnz	r3, 800b4dc <__sflush_r+0x7c>
 800b4da:	6560      	str	r0, [r4, #84]	; 0x54
 800b4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4de:	602f      	str	r7, [r5, #0]
 800b4e0:	2900      	cmp	r1, #0
 800b4e2:	d0ca      	beq.n	800b47a <__sflush_r+0x1a>
 800b4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4e8:	4299      	cmp	r1, r3
 800b4ea:	d002      	beq.n	800b4f2 <__sflush_r+0x92>
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	f7fb fe31 	bl	8007154 <_free_r>
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	6360      	str	r0, [r4, #52]	; 0x34
 800b4f6:	e7c1      	b.n	800b47c <__sflush_r+0x1c>
 800b4f8:	6a21      	ldr	r1, [r4, #32]
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	47b0      	blx	r6
 800b500:	1c41      	adds	r1, r0, #1
 800b502:	d1c7      	bne.n	800b494 <__sflush_r+0x34>
 800b504:	682b      	ldr	r3, [r5, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d0c4      	beq.n	800b494 <__sflush_r+0x34>
 800b50a:	2b1d      	cmp	r3, #29
 800b50c:	d001      	beq.n	800b512 <__sflush_r+0xb2>
 800b50e:	2b16      	cmp	r3, #22
 800b510:	d101      	bne.n	800b516 <__sflush_r+0xb6>
 800b512:	602f      	str	r7, [r5, #0]
 800b514:	e7b1      	b.n	800b47a <__sflush_r+0x1a>
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b51c:	81a3      	strh	r3, [r4, #12]
 800b51e:	e7ad      	b.n	800b47c <__sflush_r+0x1c>
 800b520:	690f      	ldr	r7, [r1, #16]
 800b522:	2f00      	cmp	r7, #0
 800b524:	d0a9      	beq.n	800b47a <__sflush_r+0x1a>
 800b526:	0793      	lsls	r3, r2, #30
 800b528:	680e      	ldr	r6, [r1, #0]
 800b52a:	bf08      	it	eq
 800b52c:	694b      	ldreq	r3, [r1, #20]
 800b52e:	600f      	str	r7, [r1, #0]
 800b530:	bf18      	it	ne
 800b532:	2300      	movne	r3, #0
 800b534:	eba6 0807 	sub.w	r8, r6, r7
 800b538:	608b      	str	r3, [r1, #8]
 800b53a:	f1b8 0f00 	cmp.w	r8, #0
 800b53e:	dd9c      	ble.n	800b47a <__sflush_r+0x1a>
 800b540:	6a21      	ldr	r1, [r4, #32]
 800b542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b544:	4643      	mov	r3, r8
 800b546:	463a      	mov	r2, r7
 800b548:	4628      	mov	r0, r5
 800b54a:	47b0      	blx	r6
 800b54c:	2800      	cmp	r0, #0
 800b54e:	dc06      	bgt.n	800b55e <__sflush_r+0xfe>
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	f04f 30ff 	mov.w	r0, #4294967295
 800b55c:	e78e      	b.n	800b47c <__sflush_r+0x1c>
 800b55e:	4407      	add	r7, r0
 800b560:	eba8 0800 	sub.w	r8, r8, r0
 800b564:	e7e9      	b.n	800b53a <__sflush_r+0xda>
 800b566:	bf00      	nop
 800b568:	20400001 	.word	0x20400001

0800b56c <_fflush_r>:
 800b56c:	b538      	push	{r3, r4, r5, lr}
 800b56e:	690b      	ldr	r3, [r1, #16]
 800b570:	4605      	mov	r5, r0
 800b572:	460c      	mov	r4, r1
 800b574:	b913      	cbnz	r3, 800b57c <_fflush_r+0x10>
 800b576:	2500      	movs	r5, #0
 800b578:	4628      	mov	r0, r5
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	b118      	cbz	r0, 800b586 <_fflush_r+0x1a>
 800b57e:	6983      	ldr	r3, [r0, #24]
 800b580:	b90b      	cbnz	r3, 800b586 <_fflush_r+0x1a>
 800b582:	f000 f887 	bl	800b694 <__sinit>
 800b586:	4b14      	ldr	r3, [pc, #80]	; (800b5d8 <_fflush_r+0x6c>)
 800b588:	429c      	cmp	r4, r3
 800b58a:	d11b      	bne.n	800b5c4 <_fflush_r+0x58>
 800b58c:	686c      	ldr	r4, [r5, #4]
 800b58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d0ef      	beq.n	800b576 <_fflush_r+0xa>
 800b596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b598:	07d0      	lsls	r0, r2, #31
 800b59a:	d404      	bmi.n	800b5a6 <_fflush_r+0x3a>
 800b59c:	0599      	lsls	r1, r3, #22
 800b59e:	d402      	bmi.n	800b5a6 <_fflush_r+0x3a>
 800b5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5a2:	f7ff fcf0 	bl	800af86 <__retarget_lock_acquire_recursive>
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	f7ff ff59 	bl	800b460 <__sflush_r>
 800b5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5b0:	07da      	lsls	r2, r3, #31
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	d4e0      	bmi.n	800b578 <_fflush_r+0xc>
 800b5b6:	89a3      	ldrh	r3, [r4, #12]
 800b5b8:	059b      	lsls	r3, r3, #22
 800b5ba:	d4dd      	bmi.n	800b578 <_fflush_r+0xc>
 800b5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5be:	f7ff fce3 	bl	800af88 <__retarget_lock_release_recursive>
 800b5c2:	e7d9      	b.n	800b578 <_fflush_r+0xc>
 800b5c4:	4b05      	ldr	r3, [pc, #20]	; (800b5dc <_fflush_r+0x70>)
 800b5c6:	429c      	cmp	r4, r3
 800b5c8:	d101      	bne.n	800b5ce <_fflush_r+0x62>
 800b5ca:	68ac      	ldr	r4, [r5, #8]
 800b5cc:	e7df      	b.n	800b58e <_fflush_r+0x22>
 800b5ce:	4b04      	ldr	r3, [pc, #16]	; (800b5e0 <_fflush_r+0x74>)
 800b5d0:	429c      	cmp	r4, r3
 800b5d2:	bf08      	it	eq
 800b5d4:	68ec      	ldreq	r4, [r5, #12]
 800b5d6:	e7da      	b.n	800b58e <_fflush_r+0x22>
 800b5d8:	0800bf94 	.word	0x0800bf94
 800b5dc:	0800bfb4 	.word	0x0800bfb4
 800b5e0:	0800bf74 	.word	0x0800bf74

0800b5e4 <std>:
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	b510      	push	{r4, lr}
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b5ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5f2:	6083      	str	r3, [r0, #8]
 800b5f4:	8181      	strh	r1, [r0, #12]
 800b5f6:	6643      	str	r3, [r0, #100]	; 0x64
 800b5f8:	81c2      	strh	r2, [r0, #14]
 800b5fa:	6183      	str	r3, [r0, #24]
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	2208      	movs	r2, #8
 800b600:	305c      	adds	r0, #92	; 0x5c
 800b602:	f7fb fd9f 	bl	8007144 <memset>
 800b606:	4b05      	ldr	r3, [pc, #20]	; (800b61c <std+0x38>)
 800b608:	6263      	str	r3, [r4, #36]	; 0x24
 800b60a:	4b05      	ldr	r3, [pc, #20]	; (800b620 <std+0x3c>)
 800b60c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b60e:	4b05      	ldr	r3, [pc, #20]	; (800b624 <std+0x40>)
 800b610:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b612:	4b05      	ldr	r3, [pc, #20]	; (800b628 <std+0x44>)
 800b614:	6224      	str	r4, [r4, #32]
 800b616:	6323      	str	r3, [r4, #48]	; 0x30
 800b618:	bd10      	pop	{r4, pc}
 800b61a:	bf00      	nop
 800b61c:	0800b931 	.word	0x0800b931
 800b620:	0800b953 	.word	0x0800b953
 800b624:	0800b98b 	.word	0x0800b98b
 800b628:	0800b9af 	.word	0x0800b9af

0800b62c <_cleanup_r>:
 800b62c:	4901      	ldr	r1, [pc, #4]	; (800b634 <_cleanup_r+0x8>)
 800b62e:	f000 b8af 	b.w	800b790 <_fwalk_reent>
 800b632:	bf00      	nop
 800b634:	0800b56d 	.word	0x0800b56d

0800b638 <__sfmoreglue>:
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	2268      	movs	r2, #104	; 0x68
 800b63c:	1e4d      	subs	r5, r1, #1
 800b63e:	4355      	muls	r5, r2
 800b640:	460e      	mov	r6, r1
 800b642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b646:	f7fb fdf1 	bl	800722c <_malloc_r>
 800b64a:	4604      	mov	r4, r0
 800b64c:	b140      	cbz	r0, 800b660 <__sfmoreglue+0x28>
 800b64e:	2100      	movs	r1, #0
 800b650:	e9c0 1600 	strd	r1, r6, [r0]
 800b654:	300c      	adds	r0, #12
 800b656:	60a0      	str	r0, [r4, #8]
 800b658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b65c:	f7fb fd72 	bl	8007144 <memset>
 800b660:	4620      	mov	r0, r4
 800b662:	bd70      	pop	{r4, r5, r6, pc}

0800b664 <__sfp_lock_acquire>:
 800b664:	4801      	ldr	r0, [pc, #4]	; (800b66c <__sfp_lock_acquire+0x8>)
 800b666:	f7ff bc8e 	b.w	800af86 <__retarget_lock_acquire_recursive>
 800b66a:	bf00      	nop
 800b66c:	20000509 	.word	0x20000509

0800b670 <__sfp_lock_release>:
 800b670:	4801      	ldr	r0, [pc, #4]	; (800b678 <__sfp_lock_release+0x8>)
 800b672:	f7ff bc89 	b.w	800af88 <__retarget_lock_release_recursive>
 800b676:	bf00      	nop
 800b678:	20000509 	.word	0x20000509

0800b67c <__sinit_lock_acquire>:
 800b67c:	4801      	ldr	r0, [pc, #4]	; (800b684 <__sinit_lock_acquire+0x8>)
 800b67e:	f7ff bc82 	b.w	800af86 <__retarget_lock_acquire_recursive>
 800b682:	bf00      	nop
 800b684:	2000050a 	.word	0x2000050a

0800b688 <__sinit_lock_release>:
 800b688:	4801      	ldr	r0, [pc, #4]	; (800b690 <__sinit_lock_release+0x8>)
 800b68a:	f7ff bc7d 	b.w	800af88 <__retarget_lock_release_recursive>
 800b68e:	bf00      	nop
 800b690:	2000050a 	.word	0x2000050a

0800b694 <__sinit>:
 800b694:	b510      	push	{r4, lr}
 800b696:	4604      	mov	r4, r0
 800b698:	f7ff fff0 	bl	800b67c <__sinit_lock_acquire>
 800b69c:	69a3      	ldr	r3, [r4, #24]
 800b69e:	b11b      	cbz	r3, 800b6a8 <__sinit+0x14>
 800b6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a4:	f7ff bff0 	b.w	800b688 <__sinit_lock_release>
 800b6a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6ac:	6523      	str	r3, [r4, #80]	; 0x50
 800b6ae:	4b13      	ldr	r3, [pc, #76]	; (800b6fc <__sinit+0x68>)
 800b6b0:	4a13      	ldr	r2, [pc, #76]	; (800b700 <__sinit+0x6c>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6b6:	42a3      	cmp	r3, r4
 800b6b8:	bf04      	itt	eq
 800b6ba:	2301      	moveq	r3, #1
 800b6bc:	61a3      	streq	r3, [r4, #24]
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 f820 	bl	800b704 <__sfp>
 800b6c4:	6060      	str	r0, [r4, #4]
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f000 f81c 	bl	800b704 <__sfp>
 800b6cc:	60a0      	str	r0, [r4, #8]
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f000 f818 	bl	800b704 <__sfp>
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	60e0      	str	r0, [r4, #12]
 800b6d8:	2104      	movs	r1, #4
 800b6da:	6860      	ldr	r0, [r4, #4]
 800b6dc:	f7ff ff82 	bl	800b5e4 <std>
 800b6e0:	68a0      	ldr	r0, [r4, #8]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	2109      	movs	r1, #9
 800b6e6:	f7ff ff7d 	bl	800b5e4 <std>
 800b6ea:	68e0      	ldr	r0, [r4, #12]
 800b6ec:	2202      	movs	r2, #2
 800b6ee:	2112      	movs	r1, #18
 800b6f0:	f7ff ff78 	bl	800b5e4 <std>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	61a3      	str	r3, [r4, #24]
 800b6f8:	e7d2      	b.n	800b6a0 <__sinit+0xc>
 800b6fa:	bf00      	nop
 800b6fc:	0800bb2c 	.word	0x0800bb2c
 800b700:	0800b62d 	.word	0x0800b62d

0800b704 <__sfp>:
 800b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b706:	4607      	mov	r7, r0
 800b708:	f7ff ffac 	bl	800b664 <__sfp_lock_acquire>
 800b70c:	4b1e      	ldr	r3, [pc, #120]	; (800b788 <__sfp+0x84>)
 800b70e:	681e      	ldr	r6, [r3, #0]
 800b710:	69b3      	ldr	r3, [r6, #24]
 800b712:	b913      	cbnz	r3, 800b71a <__sfp+0x16>
 800b714:	4630      	mov	r0, r6
 800b716:	f7ff ffbd 	bl	800b694 <__sinit>
 800b71a:	3648      	adds	r6, #72	; 0x48
 800b71c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b720:	3b01      	subs	r3, #1
 800b722:	d503      	bpl.n	800b72c <__sfp+0x28>
 800b724:	6833      	ldr	r3, [r6, #0]
 800b726:	b30b      	cbz	r3, 800b76c <__sfp+0x68>
 800b728:	6836      	ldr	r6, [r6, #0]
 800b72a:	e7f7      	b.n	800b71c <__sfp+0x18>
 800b72c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b730:	b9d5      	cbnz	r5, 800b768 <__sfp+0x64>
 800b732:	4b16      	ldr	r3, [pc, #88]	; (800b78c <__sfp+0x88>)
 800b734:	60e3      	str	r3, [r4, #12]
 800b736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b73a:	6665      	str	r5, [r4, #100]	; 0x64
 800b73c:	f7ff fc22 	bl	800af84 <__retarget_lock_init_recursive>
 800b740:	f7ff ff96 	bl	800b670 <__sfp_lock_release>
 800b744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b74c:	6025      	str	r5, [r4, #0]
 800b74e:	61a5      	str	r5, [r4, #24]
 800b750:	2208      	movs	r2, #8
 800b752:	4629      	mov	r1, r5
 800b754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b758:	f7fb fcf4 	bl	8007144 <memset>
 800b75c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b764:	4620      	mov	r0, r4
 800b766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b768:	3468      	adds	r4, #104	; 0x68
 800b76a:	e7d9      	b.n	800b720 <__sfp+0x1c>
 800b76c:	2104      	movs	r1, #4
 800b76e:	4638      	mov	r0, r7
 800b770:	f7ff ff62 	bl	800b638 <__sfmoreglue>
 800b774:	4604      	mov	r4, r0
 800b776:	6030      	str	r0, [r6, #0]
 800b778:	2800      	cmp	r0, #0
 800b77a:	d1d5      	bne.n	800b728 <__sfp+0x24>
 800b77c:	f7ff ff78 	bl	800b670 <__sfp_lock_release>
 800b780:	230c      	movs	r3, #12
 800b782:	603b      	str	r3, [r7, #0]
 800b784:	e7ee      	b.n	800b764 <__sfp+0x60>
 800b786:	bf00      	nop
 800b788:	0800bb2c 	.word	0x0800bb2c
 800b78c:	ffff0001 	.word	0xffff0001

0800b790 <_fwalk_reent>:
 800b790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b794:	4606      	mov	r6, r0
 800b796:	4688      	mov	r8, r1
 800b798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b79c:	2700      	movs	r7, #0
 800b79e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7a2:	f1b9 0901 	subs.w	r9, r9, #1
 800b7a6:	d505      	bpl.n	800b7b4 <_fwalk_reent+0x24>
 800b7a8:	6824      	ldr	r4, [r4, #0]
 800b7aa:	2c00      	cmp	r4, #0
 800b7ac:	d1f7      	bne.n	800b79e <_fwalk_reent+0xe>
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b4:	89ab      	ldrh	r3, [r5, #12]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d907      	bls.n	800b7ca <_fwalk_reent+0x3a>
 800b7ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	d003      	beq.n	800b7ca <_fwalk_reent+0x3a>
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	47c0      	blx	r8
 800b7c8:	4307      	orrs	r7, r0
 800b7ca:	3568      	adds	r5, #104	; 0x68
 800b7cc:	e7e9      	b.n	800b7a2 <_fwalk_reent+0x12>

0800b7ce <__swhatbuf_r>:
 800b7ce:	b570      	push	{r4, r5, r6, lr}
 800b7d0:	460e      	mov	r6, r1
 800b7d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d6:	2900      	cmp	r1, #0
 800b7d8:	b096      	sub	sp, #88	; 0x58
 800b7da:	4614      	mov	r4, r2
 800b7dc:	461d      	mov	r5, r3
 800b7de:	da08      	bge.n	800b7f2 <__swhatbuf_r+0x24>
 800b7e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	602a      	str	r2, [r5, #0]
 800b7e8:	061a      	lsls	r2, r3, #24
 800b7ea:	d410      	bmi.n	800b80e <__swhatbuf_r+0x40>
 800b7ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7f0:	e00e      	b.n	800b810 <__swhatbuf_r+0x42>
 800b7f2:	466a      	mov	r2, sp
 800b7f4:	f000 f902 	bl	800b9fc <_fstat_r>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	dbf1      	blt.n	800b7e0 <__swhatbuf_r+0x12>
 800b7fc:	9a01      	ldr	r2, [sp, #4]
 800b7fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b802:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b806:	425a      	negs	r2, r3
 800b808:	415a      	adcs	r2, r3
 800b80a:	602a      	str	r2, [r5, #0]
 800b80c:	e7ee      	b.n	800b7ec <__swhatbuf_r+0x1e>
 800b80e:	2340      	movs	r3, #64	; 0x40
 800b810:	2000      	movs	r0, #0
 800b812:	6023      	str	r3, [r4, #0]
 800b814:	b016      	add	sp, #88	; 0x58
 800b816:	bd70      	pop	{r4, r5, r6, pc}

0800b818 <__smakebuf_r>:
 800b818:	898b      	ldrh	r3, [r1, #12]
 800b81a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b81c:	079d      	lsls	r5, r3, #30
 800b81e:	4606      	mov	r6, r0
 800b820:	460c      	mov	r4, r1
 800b822:	d507      	bpl.n	800b834 <__smakebuf_r+0x1c>
 800b824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	6123      	str	r3, [r4, #16]
 800b82c:	2301      	movs	r3, #1
 800b82e:	6163      	str	r3, [r4, #20]
 800b830:	b002      	add	sp, #8
 800b832:	bd70      	pop	{r4, r5, r6, pc}
 800b834:	ab01      	add	r3, sp, #4
 800b836:	466a      	mov	r2, sp
 800b838:	f7ff ffc9 	bl	800b7ce <__swhatbuf_r>
 800b83c:	9900      	ldr	r1, [sp, #0]
 800b83e:	4605      	mov	r5, r0
 800b840:	4630      	mov	r0, r6
 800b842:	f7fb fcf3 	bl	800722c <_malloc_r>
 800b846:	b948      	cbnz	r0, 800b85c <__smakebuf_r+0x44>
 800b848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b84c:	059a      	lsls	r2, r3, #22
 800b84e:	d4ef      	bmi.n	800b830 <__smakebuf_r+0x18>
 800b850:	f023 0303 	bic.w	r3, r3, #3
 800b854:	f043 0302 	orr.w	r3, r3, #2
 800b858:	81a3      	strh	r3, [r4, #12]
 800b85a:	e7e3      	b.n	800b824 <__smakebuf_r+0xc>
 800b85c:	4b0d      	ldr	r3, [pc, #52]	; (800b894 <__smakebuf_r+0x7c>)
 800b85e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	6020      	str	r0, [r4, #0]
 800b864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b868:	81a3      	strh	r3, [r4, #12]
 800b86a:	9b00      	ldr	r3, [sp, #0]
 800b86c:	6163      	str	r3, [r4, #20]
 800b86e:	9b01      	ldr	r3, [sp, #4]
 800b870:	6120      	str	r0, [r4, #16]
 800b872:	b15b      	cbz	r3, 800b88c <__smakebuf_r+0x74>
 800b874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b878:	4630      	mov	r0, r6
 800b87a:	f000 f8d1 	bl	800ba20 <_isatty_r>
 800b87e:	b128      	cbz	r0, 800b88c <__smakebuf_r+0x74>
 800b880:	89a3      	ldrh	r3, [r4, #12]
 800b882:	f023 0303 	bic.w	r3, r3, #3
 800b886:	f043 0301 	orr.w	r3, r3, #1
 800b88a:	81a3      	strh	r3, [r4, #12]
 800b88c:	89a0      	ldrh	r0, [r4, #12]
 800b88e:	4305      	orrs	r5, r0
 800b890:	81a5      	strh	r5, [r4, #12]
 800b892:	e7cd      	b.n	800b830 <__smakebuf_r+0x18>
 800b894:	0800b62d 	.word	0x0800b62d

0800b898 <_malloc_usable_size_r>:
 800b898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b89c:	1f18      	subs	r0, r3, #4
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	bfbc      	itt	lt
 800b8a2:	580b      	ldrlt	r3, [r1, r0]
 800b8a4:	18c0      	addlt	r0, r0, r3
 800b8a6:	4770      	bx	lr

0800b8a8 <_raise_r>:
 800b8a8:	291f      	cmp	r1, #31
 800b8aa:	b538      	push	{r3, r4, r5, lr}
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	460d      	mov	r5, r1
 800b8b0:	d904      	bls.n	800b8bc <_raise_r+0x14>
 800b8b2:	2316      	movs	r3, #22
 800b8b4:	6003      	str	r3, [r0, #0]
 800b8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}
 800b8bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b8be:	b112      	cbz	r2, 800b8c6 <_raise_r+0x1e>
 800b8c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8c4:	b94b      	cbnz	r3, 800b8da <_raise_r+0x32>
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 f830 	bl	800b92c <_getpid_r>
 800b8cc:	462a      	mov	r2, r5
 800b8ce:	4601      	mov	r1, r0
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8d6:	f000 b817 	b.w	800b908 <_kill_r>
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d00a      	beq.n	800b8f4 <_raise_r+0x4c>
 800b8de:	1c59      	adds	r1, r3, #1
 800b8e0:	d103      	bne.n	800b8ea <_raise_r+0x42>
 800b8e2:	2316      	movs	r3, #22
 800b8e4:	6003      	str	r3, [r0, #0]
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	e7e7      	b.n	800b8ba <_raise_r+0x12>
 800b8ea:	2400      	movs	r4, #0
 800b8ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	4798      	blx	r3
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	e7e0      	b.n	800b8ba <_raise_r+0x12>

0800b8f8 <raise>:
 800b8f8:	4b02      	ldr	r3, [pc, #8]	; (800b904 <raise+0xc>)
 800b8fa:	4601      	mov	r1, r0
 800b8fc:	6818      	ldr	r0, [r3, #0]
 800b8fe:	f7ff bfd3 	b.w	800b8a8 <_raise_r>
 800b902:	bf00      	nop
 800b904:	2000000c 	.word	0x2000000c

0800b908 <_kill_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d07      	ldr	r5, [pc, #28]	; (800b928 <_kill_r+0x20>)
 800b90c:	2300      	movs	r3, #0
 800b90e:	4604      	mov	r4, r0
 800b910:	4608      	mov	r0, r1
 800b912:	4611      	mov	r1, r2
 800b914:	602b      	str	r3, [r5, #0]
 800b916:	f7f6 fb6f 	bl	8001ff8 <_kill>
 800b91a:	1c43      	adds	r3, r0, #1
 800b91c:	d102      	bne.n	800b924 <_kill_r+0x1c>
 800b91e:	682b      	ldr	r3, [r5, #0]
 800b920:	b103      	cbz	r3, 800b924 <_kill_r+0x1c>
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	bd38      	pop	{r3, r4, r5, pc}
 800b926:	bf00      	nop
 800b928:	20000504 	.word	0x20000504

0800b92c <_getpid_r>:
 800b92c:	f7f6 bb5c 	b.w	8001fe8 <_getpid>

0800b930 <__sread>:
 800b930:	b510      	push	{r4, lr}
 800b932:	460c      	mov	r4, r1
 800b934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b938:	f000 f894 	bl	800ba64 <_read_r>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	bfab      	itete	ge
 800b940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b942:	89a3      	ldrhlt	r3, [r4, #12]
 800b944:	181b      	addge	r3, r3, r0
 800b946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b94a:	bfac      	ite	ge
 800b94c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b94e:	81a3      	strhlt	r3, [r4, #12]
 800b950:	bd10      	pop	{r4, pc}

0800b952 <__swrite>:
 800b952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b956:	461f      	mov	r7, r3
 800b958:	898b      	ldrh	r3, [r1, #12]
 800b95a:	05db      	lsls	r3, r3, #23
 800b95c:	4605      	mov	r5, r0
 800b95e:	460c      	mov	r4, r1
 800b960:	4616      	mov	r6, r2
 800b962:	d505      	bpl.n	800b970 <__swrite+0x1e>
 800b964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b968:	2302      	movs	r3, #2
 800b96a:	2200      	movs	r2, #0
 800b96c:	f000 f868 	bl	800ba40 <_lseek_r>
 800b970:	89a3      	ldrh	r3, [r4, #12]
 800b972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b97a:	81a3      	strh	r3, [r4, #12]
 800b97c:	4632      	mov	r2, r6
 800b97e:	463b      	mov	r3, r7
 800b980:	4628      	mov	r0, r5
 800b982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b986:	f000 b817 	b.w	800b9b8 <_write_r>

0800b98a <__sseek>:
 800b98a:	b510      	push	{r4, lr}
 800b98c:	460c      	mov	r4, r1
 800b98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b992:	f000 f855 	bl	800ba40 <_lseek_r>
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	bf15      	itete	ne
 800b99c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b99e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9a6:	81a3      	strheq	r3, [r4, #12]
 800b9a8:	bf18      	it	ne
 800b9aa:	81a3      	strhne	r3, [r4, #12]
 800b9ac:	bd10      	pop	{r4, pc}

0800b9ae <__sclose>:
 800b9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b2:	f000 b813 	b.w	800b9dc <_close_r>
	...

0800b9b8 <_write_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4d07      	ldr	r5, [pc, #28]	; (800b9d8 <_write_r+0x20>)
 800b9bc:	4604      	mov	r4, r0
 800b9be:	4608      	mov	r0, r1
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	602a      	str	r2, [r5, #0]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f7f6 fb4d 	bl	8002066 <_write>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	d102      	bne.n	800b9d6 <_write_r+0x1e>
 800b9d0:	682b      	ldr	r3, [r5, #0]
 800b9d2:	b103      	cbz	r3, 800b9d6 <_write_r+0x1e>
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	bd38      	pop	{r3, r4, r5, pc}
 800b9d8:	20000504 	.word	0x20000504

0800b9dc <_close_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4d06      	ldr	r5, [pc, #24]	; (800b9f8 <_close_r+0x1c>)
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	4608      	mov	r0, r1
 800b9e6:	602b      	str	r3, [r5, #0]
 800b9e8:	f7f6 fb59 	bl	800209e <_close>
 800b9ec:	1c43      	adds	r3, r0, #1
 800b9ee:	d102      	bne.n	800b9f6 <_close_r+0x1a>
 800b9f0:	682b      	ldr	r3, [r5, #0]
 800b9f2:	b103      	cbz	r3, 800b9f6 <_close_r+0x1a>
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	bd38      	pop	{r3, r4, r5, pc}
 800b9f8:	20000504 	.word	0x20000504

0800b9fc <_fstat_r>:
 800b9fc:	b538      	push	{r3, r4, r5, lr}
 800b9fe:	4d07      	ldr	r5, [pc, #28]	; (800ba1c <_fstat_r+0x20>)
 800ba00:	2300      	movs	r3, #0
 800ba02:	4604      	mov	r4, r0
 800ba04:	4608      	mov	r0, r1
 800ba06:	4611      	mov	r1, r2
 800ba08:	602b      	str	r3, [r5, #0]
 800ba0a:	f7f6 fb54 	bl	80020b6 <_fstat>
 800ba0e:	1c43      	adds	r3, r0, #1
 800ba10:	d102      	bne.n	800ba18 <_fstat_r+0x1c>
 800ba12:	682b      	ldr	r3, [r5, #0]
 800ba14:	b103      	cbz	r3, 800ba18 <_fstat_r+0x1c>
 800ba16:	6023      	str	r3, [r4, #0]
 800ba18:	bd38      	pop	{r3, r4, r5, pc}
 800ba1a:	bf00      	nop
 800ba1c:	20000504 	.word	0x20000504

0800ba20 <_isatty_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d06      	ldr	r5, [pc, #24]	; (800ba3c <_isatty_r+0x1c>)
 800ba24:	2300      	movs	r3, #0
 800ba26:	4604      	mov	r4, r0
 800ba28:	4608      	mov	r0, r1
 800ba2a:	602b      	str	r3, [r5, #0]
 800ba2c:	f7f6 fb53 	bl	80020d6 <_isatty>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_isatty_r+0x1a>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_isatty_r+0x1a>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	20000504 	.word	0x20000504

0800ba40 <_lseek_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d07      	ldr	r5, [pc, #28]	; (800ba60 <_lseek_r+0x20>)
 800ba44:	4604      	mov	r4, r0
 800ba46:	4608      	mov	r0, r1
 800ba48:	4611      	mov	r1, r2
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	602a      	str	r2, [r5, #0]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	f7f6 fb4c 	bl	80020ec <_lseek>
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	d102      	bne.n	800ba5e <_lseek_r+0x1e>
 800ba58:	682b      	ldr	r3, [r5, #0]
 800ba5a:	b103      	cbz	r3, 800ba5e <_lseek_r+0x1e>
 800ba5c:	6023      	str	r3, [r4, #0]
 800ba5e:	bd38      	pop	{r3, r4, r5, pc}
 800ba60:	20000504 	.word	0x20000504

0800ba64 <_read_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	4d07      	ldr	r5, [pc, #28]	; (800ba84 <_read_r+0x20>)
 800ba68:	4604      	mov	r4, r0
 800ba6a:	4608      	mov	r0, r1
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	2200      	movs	r2, #0
 800ba70:	602a      	str	r2, [r5, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	f7f6 fada 	bl	800202c <_read>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_read_r+0x1e>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_read_r+0x1e>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	20000504 	.word	0x20000504

0800ba88 <_init>:
 800ba88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8a:	bf00      	nop
 800ba8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8e:	bc08      	pop	{r3}
 800ba90:	469e      	mov	lr, r3
 800ba92:	4770      	bx	lr

0800ba94 <_fini>:
 800ba94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba96:	bf00      	nop
 800ba98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba9a:	bc08      	pop	{r3}
 800ba9c:	469e      	mov	lr, r3
 800ba9e:	4770      	bx	lr
