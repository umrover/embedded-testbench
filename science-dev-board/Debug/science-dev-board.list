
science-dev-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800aa68  0800aa68  0001aa68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af44  0800af44  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800af44  0800af44  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af44  0800af44  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af44  0800af44  0001af44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af48  0800af48  0001af48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800af4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000027c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000045c  2000045c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014433  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025fd  00000000  00000000  00034643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00036c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b8  00000000  00000000  00037df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c78  00000000  00000000  00038ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f1d  00000000  00000000  0003bb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5cf0  00000000  00000000  00052a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012872d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006128  00000000  00000000  00128780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aa50 	.word	0x0800aa50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800aa50 	.word	0x0800aa50

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d08:	f000 fe84 	bl	8001a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0c:	f000 f810 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d10:	f000 fad6 	bl	80012c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d14:	f000 faa2 	bl	800125c <MX_DMA_Init>
  MX_ADC1_Init();
 8000d18:	f000 f872 	bl	8000e00 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d1c:	f000 f926 	bl	8000f6c <MX_ADC2_Init>
  MX_I2C2_Init();
 8000d20:	f000 f99e 	bl	8001060 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000d24:	f000 f9dc 	bl	80010e0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000d28:	f000 fa68 	bl	80011fc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <main+0x28>
	...

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0a6      	sub	sp, #152	; 0x98
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d3a:	2228      	movs	r2, #40	; 0x28
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f005 fa1a 	bl	8006178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2258      	movs	r2, #88	; 0x58
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f005 fa0c 	bl	8006178 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d60:	2302      	movs	r3, #2
 8000d62:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d64:	2301      	movs	r3, #1
 8000d66:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 f9e4 	bl	800315c <HAL_RCC_OscConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 fb01 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	230f      	movs	r3, #15
 8000da0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da2:	2302      	movs	r3, #2
 8000da4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000db8:	2102      	movs	r1, #2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 fa22 	bl	8004204 <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dc6:	f000 faeb 	bl	80013a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <SystemClock_Config+0xcc>)
 8000dcc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 fc44 	bl	8004670 <HAL_RCCEx_PeriphCLKConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dee:	f000 fad7 	bl	80013a0 <Error_Handler>
  }
}
 8000df2:	bf00      	nop
 8000df4:	3798      	adds	r7, #152	; 0x98
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	002000c1 	.word	0x002000c1

08000e00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e22:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e30:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e36:	4b4c      	ldr	r3, [pc, #304]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e3c:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e42:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4a:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e50:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e56:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000e5c:	4b42      	ldr	r3, [pc, #264]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e5e:	2206      	movs	r2, #6
 8000e60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e62:	4b41      	ldr	r3, [pc, #260]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e70:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e76:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7c:	483a      	ldr	r0, [pc, #232]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e7e:	f000 fe2f 	bl	8001ae0 <HAL_ADC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e88:	f000 fa8a 	bl	80013a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4834      	ldr	r0, [pc, #208]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000e98:	f001 fb08 	bl	80024ac <HAL_ADCEx_MultiModeConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ea2:	f000 fa7d 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4829      	ldr	r0, [pc, #164]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000ec4:	f001 f806 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000ece:	f000 fa67 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4822      	ldr	r0, [pc, #136]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000ee0:	f000 fff8 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000eea:	f000 fa59 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481b      	ldr	r0, [pc, #108]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000efc:	f000 ffea 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000f06:	f000 fa4b 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4814      	ldr	r0, [pc, #80]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000f18:	f000 ffdc 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000f22:	f000 fa3d 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f26:	2307      	movs	r3, #7
 8000f28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000f34:	f000 ffce 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 8000f3e:	f000 fa2f 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f42:	2308      	movs	r3, #8
 8000f44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f46:	2306      	movs	r3, #6
 8000f48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <MX_ADC1_Init+0x168>)
 8000f50:	f000 ffc0 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000f5a:	f000 fa21 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200001fc 	.word	0x200001fc

08000f6c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f82:	4b35      	ldr	r3, [pc, #212]	; (8001058 <MX_ADC2_Init+0xec>)
 8000f84:	4a35      	ldr	r2, [pc, #212]	; (800105c <MX_ADC2_Init+0xf0>)
 8000f86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f88:	4b33      	ldr	r3, [pc, #204]	; (8001058 <MX_ADC2_Init+0xec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <MX_ADC2_Init+0xec>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f94:	4b30      	ldr	r3, [pc, #192]	; (8001058 <MX_ADC2_Init+0xec>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MX_ADC2_Init+0xec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <MX_ADC2_Init+0xec>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <MX_ADC2_Init+0xec>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <MX_ADC2_Init+0xec>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <MX_ADC2_Init+0xec>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <MX_ADC2_Init+0xec>)
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000fc0:	4b25      	ldr	r3, [pc, #148]	; (8001058 <MX_ADC2_Init+0xec>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_ADC2_Init+0xec>)
 8000fca:	2204      	movs	r2, #4
 8000fcc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <MX_ADC2_Init+0xec>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <MX_ADC2_Init+0xec>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fda:	481f      	ldr	r0, [pc, #124]	; (8001058 <MX_ADC2_Init+0xec>)
 8000fdc:	f000 fd80 	bl	8001ae0 <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000fe6:	f000 f9db 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4814      	ldr	r0, [pc, #80]	; (8001058 <MX_ADC2_Init+0xec>)
 8001008:	f000 ff64 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001012:	f000 f9c5 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001016:	2302      	movs	r3, #2
 8001018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800101a:	2302      	movs	r3, #2
 800101c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_ADC2_Init+0xec>)
 8001024:	f000 ff56 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 800102e:	f000 f9b7 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001032:	2303      	movs	r3, #3
 8001034:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001036:	2303      	movs	r3, #3
 8001038:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_ADC2_Init+0xec>)
 8001040:	f000 ff48 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 800104a:	f000 f9a9 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000024c 	.word	0x2000024c
 800105c:	50000100 	.word	0x50000100

08001060 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <MX_I2C2_Init+0x78>)
 8001068:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_I2C2_Init+0x74>)
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <MX_I2C2_Init+0x7c>)
 800106e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001078:	2201      	movs	r2, #1
 800107a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_I2C2_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C2_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <MX_I2C2_Init+0x74>)
 800109c:	f001 ff38 	bl	8002f10 <HAL_I2C_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010a6:	f000 f97b 	bl	80013a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010aa:	2100      	movs	r1, #0
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <MX_I2C2_Init+0x74>)
 80010ae:	f001 ffbe 	bl	800302e <HAL_I2CEx_ConfigAnalogFilter>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010b8:	f000 f972 	bl	80013a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010bc:	2100      	movs	r1, #0
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_I2C2_Init+0x74>)
 80010c0:	f002 f800 	bl	80030c4 <HAL_I2CEx_ConfigDigitalFilter>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010ca:	f000 f969 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000324 	.word	0x20000324
 80010d8:	40005800 	.word	0x40005800
 80010dc:	2000090e 	.word	0x2000090e

080010e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <MX_TIM3_Init+0x114>)
 8001114:	4a38      	ldr	r2, [pc, #224]	; (80011f8 <MX_TIM3_Init+0x118>)
 8001116:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <MX_TIM3_Init+0x114>)
 800111a:	f240 623f 	movw	r2, #1599	; 0x63f
 800111e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <MX_TIM3_Init+0x114>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8001126:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <MX_TIM3_Init+0x114>)
 8001128:	22c7      	movs	r2, #199	; 0xc7
 800112a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <MX_TIM3_Init+0x114>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <MX_TIM3_Init+0x114>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001138:	482e      	ldr	r0, [pc, #184]	; (80011f4 <MX_TIM3_Init+0x114>)
 800113a:	f003 fcb7 	bl	8004aac <HAL_TIM_Base_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001144:	f000 f92c 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800114e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001152:	4619      	mov	r1, r3
 8001154:	4827      	ldr	r0, [pc, #156]	; (80011f4 <MX_TIM3_Init+0x114>)
 8001156:	f003 fe75 	bl	8004e44 <HAL_TIM_ConfigClockSource>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001160:	f000 f91e 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001164:	4823      	ldr	r0, [pc, #140]	; (80011f4 <MX_TIM3_Init+0x114>)
 8001166:	f003 fcf8 	bl	8004b5a <HAL_TIM_PWM_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001170:	f000 f916 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	481c      	ldr	r0, [pc, #112]	; (80011f4 <MX_TIM3_Init+0x114>)
 8001184:	f004 fb66 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800118e:	f000 f907 	bl	80013a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001192:	2360      	movs	r3, #96	; 0x60
 8001194:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	4619      	mov	r1, r3
 80011a8:	4812      	ldr	r0, [pc, #72]	; (80011f4 <MX_TIM3_Init+0x114>)
 80011aa:	f003 fd37 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011b4:	f000 f8f4 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2204      	movs	r2, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_TIM3_Init+0x114>)
 80011c0:	f003 fd2c 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80011ca:	f000 f8e9 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	2208      	movs	r2, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	4807      	ldr	r0, [pc, #28]	; (80011f4 <MX_TIM3_Init+0x114>)
 80011d6:	f003 fd21 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80011e0:	f000 f8de 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <MX_TIM3_Init+0x114>)
 80011e6:	f000 fa59 	bl	800169c <HAL_TIM_MspPostInit>

}
 80011ea:	bf00      	nop
 80011ec:	3738      	adds	r7, #56	; 0x38
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000370 	.word	0x20000370
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <MX_USART1_UART_Init+0x5c>)
 8001204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001208:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800120c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_USART1_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_USART1_UART_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_USART1_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_USART1_UART_Init+0x58>)
 8001240:	f004 fb94 	bl	800596c <HAL_UART_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800124a:	f000 f8a9 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200003bc 	.word	0x200003bc
 8001258:	40013800 	.word	0x40013800

0800125c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_DMA_Init+0x60>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	4a15      	ldr	r2, [pc, #84]	; (80012bc <MX_DMA_Init+0x60>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6153      	str	r3, [r2, #20]
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <MX_DMA_Init+0x60>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_DMA_Init+0x60>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <MX_DMA_Init+0x60>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <MX_DMA_Init+0x60>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	200b      	movs	r0, #11
 8001298:	f001 fb3b 	bl	8002912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800129c:	200b      	movs	r0, #11
 800129e:	f001 fb54 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2038      	movs	r0, #56	; 0x38
 80012a8:	f001 fb33 	bl	8002912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80012ac:	2038      	movs	r0, #56	; 0x38
 80012ae:	f001 fb4c 	bl	800294a <HAL_NVIC_EnableIRQ>

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <MX_GPIO_Init+0xd4>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <MX_GPIO_Init+0xd4>)
 80012dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e0:	6153      	str	r3, [r2, #20]
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <MX_GPIO_Init+0xd4>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <MX_GPIO_Init+0xd4>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	4a28      	ldr	r2, [pc, #160]	; (8001394 <MX_GPIO_Init+0xd4>)
 80012f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012f8:	6153      	str	r3, [r2, #20]
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <MX_GPIO_Init+0xd4>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <MX_GPIO_Init+0xd4>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	4a22      	ldr	r2, [pc, #136]	; (8001394 <MX_GPIO_Init+0xd4>)
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	6153      	str	r3, [r2, #20]
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <MX_GPIO_Init+0xd4>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_GPIO_Init+0xd4>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <MX_GPIO_Init+0xd4>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6153      	str	r3, [r2, #20]
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_GPIO_Init+0xd4>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_GPIO_Init+0xd4>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	4a16      	ldr	r2, [pc, #88]	; (8001394 <MX_GPIO_Init+0xd4>)
 800133c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001340:	6153      	str	r3, [r2, #20]
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_GPIO_Init+0xd4>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOSFET_0_Pin|MOSFET_1_Pin|MOSFET_2_Pin|MOSFET_3_Pin
 800134e:	2200      	movs	r2, #0
 8001350:	21ff      	movs	r1, #255	; 0xff
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_GPIO_Init+0xd8>)
 8001354:	f001 fdc4 	bl	8002ee0 <HAL_GPIO_WritePin>
                          |MOSFET_4_Pin|MOSFET_5_Pin|MOSFET_6_Pin|MOSFET_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MOSFET_0_Pin MOSFET_1_Pin MOSFET_2_Pin MOSFET_3_Pin
                           MOSFET_4_Pin MOSFET_5_Pin MOSFET_6_Pin MOSFET_7_Pin */
  GPIO_InitStruct.Pin = MOSFET_0_Pin|MOSFET_1_Pin|MOSFET_2_Pin|MOSFET_3_Pin
 8001358:	23ff      	movs	r3, #255	; 0xff
 800135a:	617b      	str	r3, [r7, #20]
                          |MOSFET_4_Pin|MOSFET_5_Pin|MOSFET_6_Pin|MOSFET_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	480a      	ldr	r0, [pc, #40]	; (8001398 <MX_GPIO_Init+0xd8>)
 8001370:	f001 fc2c 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001374:	2304      	movs	r3, #4
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001378:	2303      	movs	r3, #3
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_GPIO_Init+0xdc>)
 8001388:	f001 fc20 	bl	8002bcc <HAL_GPIO_Init>

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	48000400 	.word	0x48000400
 800139c:	48000c00 	.word	0x48000c00

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_MspInit+0x44>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_MspInit+0x44>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6193      	str	r3, [r2, #24]
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_MspInit+0x44>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_MspInit+0x44>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_MspInit+0x44>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_MspInit+0x44>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013e2:	2007      	movs	r0, #7
 80013e4:	f001 fa8a 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001414:	d16e      	bne.n	80014f4 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001416:	4b67      	ldr	r3, [pc, #412]	; (80015b4 <HAL_ADC_MspInit+0x1c0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a65      	ldr	r2, [pc, #404]	; (80015b4 <HAL_ADC_MspInit+0x1c0>)
 800141e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001420:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <HAL_ADC_MspInit+0x1c0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d10b      	bne.n	8001440 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001428:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	4a62      	ldr	r2, [pc, #392]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001432:	6153      	str	r3, [r2, #20]
 8001434:	4b60      	ldr	r3, [pc, #384]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001440:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	4a5c      	ldr	r2, [pc, #368]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 8001446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800144a:	6153      	str	r3, [r2, #20]
 800144c:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	4a56      	ldr	r2, [pc, #344]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 800145e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001462:	6153      	str	r3, [r2, #20]
 8001464:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = DIAG_TEMP_0_Pin|DIAG_TEMP_1_Pin|DIAG_TEMP_2_Pin;
 8001470:	2307      	movs	r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	484e      	ldr	r0, [pc, #312]	; (80015bc <HAL_ADC_MspInit+0x1c8>)
 8001484:	f001 fba2 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DIAG_CURR_0_Pin|DIAG_CURR_1_Pin|DIAG_CURR_2_Pin;
 8001488:	2307      	movs	r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148c:	2303      	movs	r3, #3
 800148e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f001 fb95 	bl	8002bcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_ADC_MspInit+0x1cc>)
 80014a4:	4a47      	ldr	r2, [pc, #284]	; (80015c4 <HAL_ADC_MspInit+0x1d0>)
 80014a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a8:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <HAL_ADC_MspInit+0x1cc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ae:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <HAL_ADC_MspInit+0x1cc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014b4:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <HAL_ADC_MspInit+0x1cc>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_ADC_MspInit+0x1cc>)
 80014bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <HAL_ADC_MspInit+0x1cc>)
 80014c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <HAL_ADC_MspInit+0x1cc>)
 80014cc:	2220      	movs	r2, #32
 80014ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014d0:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_ADC_MspInit+0x1cc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014d6:	483a      	ldr	r0, [pc, #232]	; (80015c0 <HAL_ADC_MspInit+0x1cc>)
 80014d8:	f001 fa51 	bl	800297e <HAL_DMA_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 80014e2:	f7ff ff5d 	bl	80013a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a35      	ldr	r2, [pc, #212]	; (80015c0 <HAL_ADC_MspInit+0x1cc>)
 80014ea:	639a      	str	r2, [r3, #56]	; 0x38
 80014ec:	4a34      	ldr	r2, [pc, #208]	; (80015c0 <HAL_ADC_MspInit+0x1cc>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80014f2:	e05a      	b.n	80015aa <HAL_ADC_MspInit+0x1b6>
  else if(hadc->Instance==ADC2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a33      	ldr	r2, [pc, #204]	; (80015c8 <HAL_ADC_MspInit+0x1d4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d155      	bne.n	80015aa <HAL_ADC_MspInit+0x1b6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_ADC_MspInit+0x1c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	4a2b      	ldr	r2, [pc, #172]	; (80015b4 <HAL_ADC_MspInit+0x1c0>)
 8001506:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <HAL_ADC_MspInit+0x1c0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d10b      	bne.n	8001528 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 8001516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151a:	6153      	str	r3, [r2, #20]
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 800152e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_ADC_MspInit+0x1c4>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SCIENCE_TEMP_0_Pin|SCIENCE_TEMP_1_Pin|SCIENCE_TEMP_2_Pin;
 8001540:	2370      	movs	r3, #112	; 0x70
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001556:	f001 fb39 	bl	8002bcc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_ADC_MspInit+0x1d8>)
 800155c:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <HAL_ADC_MspInit+0x1dc>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_ADC_MspInit+0x1d8>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_ADC_MspInit+0x1d8>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_ADC_MspInit+0x1d8>)
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_ADC_MspInit+0x1d8>)
 8001574:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001578:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_ADC_MspInit+0x1d8>)
 800157c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001580:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_ADC_MspInit+0x1d8>)
 8001584:	2220      	movs	r2, #32
 8001586:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_ADC_MspInit+0x1d8>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800158e:	480f      	ldr	r0, [pc, #60]	; (80015cc <HAL_ADC_MspInit+0x1d8>)
 8001590:	f001 f9f5 	bl	800297e <HAL_DMA_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_ADC_MspInit+0x1aa>
      Error_Handler();
 800159a:	f7ff ff01 	bl	80013a0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_ADC_MspInit+0x1d8>)
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38
 80015a4:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_ADC_MspInit+0x1d8>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80015aa:	bf00      	nop
 80015ac:	3730      	adds	r7, #48	; 0x30
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000440 	.word	0x20000440
 80015b8:	40021000 	.word	0x40021000
 80015bc:	48000800 	.word	0x48000800
 80015c0:	2000029c 	.word	0x2000029c
 80015c4:	40020008 	.word	0x40020008
 80015c8:	50000100 	.word	0x50000100
 80015cc:	200002e0 	.word	0x200002e0
 80015d0:	40020408 	.word	0x40020408

080015d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_I2C_MspInit+0x7c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d127      	bne.n	8001646 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_I2C_MspInit+0x80>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <HAL_I2C_MspInit+0x80>)
 80015fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001600:	6153      	str	r3, [r2, #20]
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_I2C_MspInit+0x80>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = I2C2_SPECTRAL_SDA_Pin|I2C2_SPECTRAL_SCL_Pin;
 800160e:	2303      	movs	r3, #3
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001612:	2312      	movs	r3, #18
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800161e:	2304      	movs	r3, #4
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <HAL_I2C_MspInit+0x84>)
 800162a:	f001 facf 	bl	8002bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_I2C_MspInit+0x80>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_I2C_MspInit+0x80>)
 8001634:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_I2C_MspInit+0x80>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40005800 	.word	0x40005800
 8001654:	40021000 	.word	0x40021000
 8001658:	48001400 	.word	0x48001400

0800165c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_TIM_Base_MspInit+0x38>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10b      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_TIM_Base_MspInit+0x3c>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <HAL_TIM_Base_MspInit+0x3c>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <HAL_TIM_Base_MspInit+0x3c>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40000400 	.word	0x40000400
 8001698:	40021000 	.word	0x40021000

0800169c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_TIM_MspPostInit+0x64>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d11c      	bne.n	80016f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_TIM_MspPostInit+0x68>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_TIM_MspPostInit+0x68>)
 80016c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016c8:	6153      	str	r3, [r2, #20]
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_TIM_MspPostInit+0x68>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = SERVO_0_Pin|SERVO_1_Pin|SERVO_2_Pin;
 80016d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	4619      	mov	r1, r3
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_TIM_MspPostInit+0x6c>)
 80016f4:	f001 fa6a 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40000400 	.word	0x40000400
 8001704:	40021000 	.word	0x40021000
 8001708:	48000800 	.word	0x48000800

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a18      	ldr	r2, [pc, #96]	; (800178c <HAL_UART_MspInit+0x80>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d129      	bne.n	8001782 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_UART_MspInit+0x84>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_UART_MspInit+0x84>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001738:	6193      	str	r3, [r2, #24]
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_UART_MspInit+0x84>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_UART_MspInit+0x84>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	4a11      	ldr	r2, [pc, #68]	; (8001790 <HAL_UART_MspInit+0x84>)
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	6153      	str	r3, [r2, #20]
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_UART_MspInit+0x84>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800175e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001770:	2307      	movs	r3, #7
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177e:	f001 fa25 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	; 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40013800 	.word	0x40013800
 8001790:	40021000 	.word	0x40021000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e0:	f000 f95e 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <DMA1_Channel1_IRQHandler+0x10>)
 80017ee:	f001 f90d 	bl	8002a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000029c 	.word	0x2000029c

080017fc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DMA2_Channel1_IRQHandler+0x10>)
 8001802:	f001 f903 	bl	8002a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002e0 	.word	0x200002e0

08001810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
	return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_kill>:

int _kill(int pid, int sig)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800182a:	f004 fc73 	bl	8006114 <__errno>
 800182e:	4603      	mov	r3, r0
 8001830:	2216      	movs	r2, #22
 8001832:	601a      	str	r2, [r3, #0]
	return -1;
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_exit>:

void _exit (int status)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ffe7 	bl	8001820 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001852:	e7fe      	b.n	8001852 <_exit+0x12>

08001854 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e00a      	b.n	800187c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001866:	f3af 8000 	nop.w
 800186a:	4601      	mov	r1, r0
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	60ba      	str	r2, [r7, #8]
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf0      	blt.n	8001866 <_read+0x12>
	}

return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e009      	b.n	80018b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbf1      	blt.n	80018a0 <_write+0x12>
	}
	return len;
 80018bc:	687b      	ldr	r3, [r7, #4]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_close>:

int _close(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	return -1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ee:	605a      	str	r2, [r3, #4]
	return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_isatty>:

int _isatty(int file)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
	return 1;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
	return 0;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001938:	4a14      	ldr	r2, [pc, #80]	; (800198c <_sbrk+0x5c>)
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <_sbrk+0x60>)
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <_sbrk+0x64>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <_sbrk+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001960:	f004 fbd8 	bl	8006114 <__errno>
 8001964:	4603      	mov	r3, r0
 8001966:	220c      	movs	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	e009      	b.n	8001984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <_sbrk+0x64>)
 8001980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20010000 	.word	0x20010000
 8001990:	00000400 	.word	0x00000400
 8001994:	20000444 	.word	0x20000444
 8001998:	20000460 	.word	0x20000460

0800199c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <SystemInit+0x20>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <SystemInit+0x20>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <LoopForever+0x6>)
  ldr r1, =_edata
 80019c6:	490e      	ldr	r1, [pc, #56]	; (8001a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <LoopForever+0xe>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019dc:	4c0b      	ldr	r4, [pc, #44]	; (8001a0c <LoopForever+0x16>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ea:	f7ff ffd7 	bl	800199c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ee:	f004 fb97 	bl	8006120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019f2:	f7ff f987 	bl	8000d04 <main>

080019f6 <LoopForever>:

LoopForever:
    b LoopForever
 80019f6:	e7fe      	b.n	80019f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a00:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a04:	0800af4c 	.word	0x0800af4c
  ldr r2, =_sbss
 8001a08:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a0c:	2000045c 	.word	0x2000045c

08001a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC1_2_IRQHandler>
	...

08001a14 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_Init+0x28>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_Init+0x28>)
 8001a1e:	f043 0310 	orr.w	r3, r3, #16
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f000 ff69 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 f808 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a30:	f7ff fcbc 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40022000 	.word	0x40022000

08001a40 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_InitTick+0x54>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_InitTick+0x58>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 ff81 	bl	8002966 <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00e      	b.n	8001a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d80a      	bhi.n	8001a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a74:	2200      	movs	r2, #0
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f000 ff49 	bl	8002912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a80:	4a06      	ldr	r2, [pc, #24]	; (8001a9c <HAL_InitTick+0x5c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	20000448 	.word	0x20000448

08001ac8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;  
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000448 	.word	0x20000448

08001ae0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b09a      	sub	sp, #104	; 0x68
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e1e3      	b.n	8001ec8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d176      	bne.n	8001c00 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d152      	bne.n	8001bc0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff fc5d 	bl	80013f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d13b      	bne.n	8001bc0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fda1 	bl	8002690 <ADC_Disable>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d12f      	bne.n	8001bc0 <HAL_ADC_Init+0xe0>
 8001b60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d12b      	bne.n	8001bc0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b70:	f023 0302 	bic.w	r3, r3, #2
 8001b74:	f043 0202 	orr.w	r2, r3, #2
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b8a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b9a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b9c:	4b92      	ldr	r3, [pc, #584]	; (8001de8 <HAL_ADC_Init+0x308>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a92      	ldr	r2, [pc, #584]	; (8001dec <HAL_ADC_Init+0x30c>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0c9a      	lsrs	r2, r3, #18
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bb2:	e002      	b.n	8001bba <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f9      	bne.n	8001bb4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bdc:	d110      	bne.n	8001c00 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f023 0312 	bic.w	r3, r3, #18
 8001be6:	f043 0210 	orr.w	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f040 8150 	bne.w	8001eae <HAL_ADC_Init+0x3ce>
 8001c0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 814b 	bne.w	8001eae <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 8143 	bne.w	8001eae <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c30:	f043 0202 	orr.w	r2, r3, #2
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c40:	d004      	beq.n	8001c4c <HAL_ADC_Init+0x16c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6a      	ldr	r2, [pc, #424]	; (8001df0 <HAL_ADC_Init+0x310>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_Init+0x170>
 8001c4c:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <HAL_ADC_Init+0x314>)
 8001c4e:	e000      	b.n	8001c52 <HAL_ADC_Init+0x172>
 8001c50:	4b69      	ldr	r3, [pc, #420]	; (8001df8 <HAL_ADC_Init+0x318>)
 8001c52:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c5c:	d102      	bne.n	8001c64 <HAL_ADC_Init+0x184>
 8001c5e:	4b64      	ldr	r3, [pc, #400]	; (8001df0 <HAL_ADC_Init+0x310>)
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	e01a      	b.n	8001c9a <HAL_ADC_Init+0x1ba>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a61      	ldr	r2, [pc, #388]	; (8001df0 <HAL_ADC_Init+0x310>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d103      	bne.n	8001c76 <HAL_ADC_Init+0x196>
 8001c6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e011      	b.n	8001c9a <HAL_ADC_Init+0x1ba>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a60      	ldr	r2, [pc, #384]	; (8001dfc <HAL_ADC_Init+0x31c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d102      	bne.n	8001c86 <HAL_ADC_Init+0x1a6>
 8001c80:	4b5f      	ldr	r3, [pc, #380]	; (8001e00 <HAL_ADC_Init+0x320>)
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e009      	b.n	8001c9a <HAL_ADC_Init+0x1ba>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a5d      	ldr	r2, [pc, #372]	; (8001e00 <HAL_ADC_Init+0x320>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d102      	bne.n	8001c96 <HAL_ADC_Init+0x1b6>
 8001c90:	4b5a      	ldr	r3, [pc, #360]	; (8001dfc <HAL_ADC_Init+0x31c>)
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e001      	b.n	8001c9a <HAL_ADC_Init+0x1ba>
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d108      	bne.n	8001cba <HAL_ADC_Init+0x1da>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_Init+0x1da>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_ADC_Init+0x1dc>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d11c      	bne.n	8001cfa <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d010      	beq.n	8001ce8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_ADC_Init+0x202>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x202>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_ADC_Init+0x204>
 8001ce2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d108      	bne.n	8001cfa <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7e5b      	ldrb	r3, [r3, #25]
 8001cfe:	035b      	lsls	r3, r3, #13
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d04:	2a01      	cmp	r2, #1
 8001d06:	d002      	beq.n	8001d0e <HAL_ADC_Init+0x22e>
 8001d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d0c:	e000      	b.n	8001d10 <HAL_ADC_Init+0x230>
 8001d0e:	2200      	movs	r2, #0
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d20:	4313      	orrs	r3, r2
 8001d22:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d11b      	bne.n	8001d66 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7e5b      	ldrb	r3, [r3, #25]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	045a      	lsls	r2, r3, #17
 8001d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d46:	663b      	str	r3, [r7, #96]	; 0x60
 8001d48:	e00d      	b.n	8001d66 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d52:	f043 0220 	orr.w	r2, r3, #32
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d054      	beq.n	8001e18 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <HAL_ADC_Init+0x31c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d004      	beq.n	8001d82 <HAL_ADC_Init+0x2a2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <HAL_ADC_Init+0x320>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d140      	bne.n	8001e04 <HAL_ADC_Init+0x324>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001d8a:	d02a      	beq.n	8001de2 <HAL_ADC_Init+0x302>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d94:	d022      	beq.n	8001ddc <HAL_ADC_Init+0x2fc>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001d9e:	d01a      	beq.n	8001dd6 <HAL_ADC_Init+0x2f6>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001da8:	d012      	beq.n	8001dd0 <HAL_ADC_Init+0x2f0>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001db2:	d00a      	beq.n	8001dca <HAL_ADC_Init+0x2ea>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001dbc:	d002      	beq.n	8001dc4 <HAL_ADC_Init+0x2e4>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	e023      	b.n	8001e0c <HAL_ADC_Init+0x32c>
 8001dc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001dc8:	e020      	b.n	8001e0c <HAL_ADC_Init+0x32c>
 8001dca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001dce:	e01d      	b.n	8001e0c <HAL_ADC_Init+0x32c>
 8001dd0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001dd4:	e01a      	b.n	8001e0c <HAL_ADC_Init+0x32c>
 8001dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dda:	e017      	b.n	8001e0c <HAL_ADC_Init+0x32c>
 8001ddc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001de0:	e014      	b.n	8001e0c <HAL_ADC_Init+0x32c>
 8001de2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001de6:	e011      	b.n	8001e0c <HAL_ADC_Init+0x32c>
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83
 8001df0:	50000100 	.word	0x50000100
 8001df4:	50000300 	.word	0x50000300
 8001df8:	50000700 	.word	0x50000700
 8001dfc:	50000400 	.word	0x50000400
 8001e00:	50000500 	.word	0x50000500
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e10:	4313      	orrs	r3, r2
 8001e12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e14:	4313      	orrs	r3, r2
 8001e16:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d114      	bne.n	8001e50 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e34:	f023 0302 	bic.w	r3, r3, #2
 8001e38:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7e1b      	ldrb	r3, [r3, #24]
 8001e3e:	039a      	lsls	r2, r3, #14
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_ADC_Init+0x3f0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e60:	430b      	orrs	r3, r1
 8001e62:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d10c      	bne.n	8001e86 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f023 010f 	bic.w	r1, r3, #15
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	1e5a      	subs	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
 8001e84:	e007      	b.n	8001e96 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 020f 	bic.w	r2, r2, #15
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	f023 0303 	bic.w	r3, r3, #3
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8001eac:	e00a      	b.n	8001ec4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f023 0312 	bic.w	r3, r3, #18
 8001eb6:	f043 0210 	orr.w	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001ec4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3768      	adds	r7, #104	; 0x68
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	fff0c007 	.word	0xfff0c007

08001ed4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b09b      	sub	sp, #108	; 0x6c
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x22>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e2ca      	b.n	800248c <HAL_ADC_ConfigChannel+0x5b8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f040 82ae 	bne.w	800246a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d81c      	bhi.n	8001f50 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	461a      	mov	r2, r3
 8001f2a:	231f      	movs	r3, #31
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	4019      	ands	r1, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa00 f203 	lsl.w	r2, r0, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f4e:	e063      	b.n	8002018 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	d81e      	bhi.n	8001f96 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	3b1e      	subs	r3, #30
 8001f6c:	221f      	movs	r2, #31
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	4019      	ands	r1, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	3b1e      	subs	r3, #30
 8001f88:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	635a      	str	r2, [r3, #52]	; 0x34
 8001f94:	e040      	b.n	8002018 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b0e      	cmp	r3, #14
 8001f9c:	d81e      	bhi.n	8001fdc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	3b3c      	subs	r3, #60	; 0x3c
 8001fb2:	221f      	movs	r2, #31
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4019      	ands	r1, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	3b3c      	subs	r3, #60	; 0x3c
 8001fce:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	639a      	str	r2, [r3, #56]	; 0x38
 8001fda:	e01d      	b.n	8002018 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	3b5a      	subs	r3, #90	; 0x5a
 8001ff0:	221f      	movs	r2, #31
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4019      	ands	r1, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	3b5a      	subs	r3, #90	; 0x5a
 800200c:	fa00 f203 	lsl.w	r2, r0, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 80e5 	bne.w	80021f2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b09      	cmp	r3, #9
 800202e:	d91c      	bls.n	800206a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6999      	ldr	r1, [r3, #24]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	3b1e      	subs	r3, #30
 8002042:	2207      	movs	r2, #7
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	4019      	ands	r1, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6898      	ldr	r0, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	3b1e      	subs	r3, #30
 800205c:	fa00 f203 	lsl.w	r2, r0, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	619a      	str	r2, [r3, #24]
 8002068:	e019      	b.n	800209e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6959      	ldr	r1, [r3, #20]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	2207      	movs	r2, #7
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4019      	ands	r1, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6898      	ldr	r0, [r3, #8]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	fa00 f203 	lsl.w	r2, r0, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d84f      	bhi.n	8002160 <HAL_ADC_ConfigChannel+0x28c>
 80020c0:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <HAL_ADC_ConfigChannel+0x1f4>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	080020fb 	.word	0x080020fb
 80020d0:	0800211d 	.word	0x0800211d
 80020d4:	0800213f 	.word	0x0800213f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020de:	4b9a      	ldr	r3, [pc, #616]	; (8002348 <HAL_ADC_ConfigChannel+0x474>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	0691      	lsls	r1, r2, #26
 80020e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020ea:	430a      	orrs	r2, r1
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020f6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020f8:	e07e      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002100:	4b91      	ldr	r3, [pc, #580]	; (8002348 <HAL_ADC_ConfigChannel+0x474>)
 8002102:	4013      	ands	r3, r2
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	0691      	lsls	r1, r2, #26
 800210a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800210c:	430a      	orrs	r2, r1
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002118:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800211a:	e06d      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002122:	4b89      	ldr	r3, [pc, #548]	; (8002348 <HAL_ADC_ConfigChannel+0x474>)
 8002124:	4013      	ands	r3, r2
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	0691      	lsls	r1, r2, #26
 800212c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800212e:	430a      	orrs	r2, r1
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800213a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800213c:	e05c      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002144:	4b80      	ldr	r3, [pc, #512]	; (8002348 <HAL_ADC_ConfigChannel+0x474>)
 8002146:	4013      	ands	r3, r2
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	0691      	lsls	r1, r2, #26
 800214e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002150:	430a      	orrs	r2, r1
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800215c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800215e:	e04b      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002166:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	069b      	lsls	r3, r3, #26
 8002170:	429a      	cmp	r2, r3
 8002172:	d107      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002182:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800218a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	069b      	lsls	r3, r3, #26
 8002194:	429a      	cmp	r2, r3
 8002196:	d107      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021a6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	069b      	lsls	r3, r3, #26
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021ca:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	069b      	lsls	r3, r3, #26
 80021dc:	429a      	cmp	r2, r3
 80021de:	d10a      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021ee:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80021f0:	e001      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80021f6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d108      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x344>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x344>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_ADC_ConfigChannel+0x346>
 8002218:	2300      	movs	r3, #0
 800221a:	2b00      	cmp	r3, #0
 800221c:	f040 8130 	bne.w	8002480 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d00f      	beq.n	8002248 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2201      	movs	r2, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	400a      	ands	r2, r1
 8002242:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002246:	e049      	b.n	80022dc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2201      	movs	r2, #1
 8002256:	409a      	lsls	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b09      	cmp	r3, #9
 8002268:	d91c      	bls.n	80022a4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6999      	ldr	r1, [r3, #24]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	3b1b      	subs	r3, #27
 800227c:	2207      	movs	r2, #7
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	4019      	ands	r1, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6898      	ldr	r0, [r3, #8]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4613      	mov	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4413      	add	r3, r2
 8002294:	3b1b      	subs	r3, #27
 8002296:	fa00 f203 	lsl.w	r2, r0, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	619a      	str	r2, [r3, #24]
 80022a2:	e01b      	b.n	80022dc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6959      	ldr	r1, [r3, #20]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	2207      	movs	r2, #7
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	4019      	ands	r1, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6898      	ldr	r0, [r3, #8]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	fa00 f203 	lsl.w	r2, r0, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e4:	d004      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x41c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_ADC_ConfigChannel+0x478>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x420>
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_ADC_ConfigChannel+0x47c>)
 80022f2:	e000      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x422>
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_ADC_ConfigChannel+0x480>)
 80022f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d105      	bne.n	800230c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002308:	2b00      	cmp	r3, #0
 800230a:	d015      	beq.n	8002338 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002310:	2b11      	cmp	r3, #17
 8002312:	d105      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00b      	beq.n	8002338 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002324:	2b12      	cmp	r3, #18
 8002326:	f040 80ab 	bne.w	8002480 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800232a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 80a4 	bne.w	8002480 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002340:	d10a      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x484>
 8002342:	4b02      	ldr	r3, [pc, #8]	; (800234c <HAL_ADC_ConfigChannel+0x478>)
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	e022      	b.n	800238e <HAL_ADC_ConfigChannel+0x4ba>
 8002348:	83fff000 	.word	0x83fff000
 800234c:	50000100 	.word	0x50000100
 8002350:	50000300 	.word	0x50000300
 8002354:	50000700 	.word	0x50000700
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a4e      	ldr	r2, [pc, #312]	; (8002498 <HAL_ADC_ConfigChannel+0x5c4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d103      	bne.n	800236a <HAL_ADC_ConfigChannel+0x496>
 8002362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e011      	b.n	800238e <HAL_ADC_ConfigChannel+0x4ba>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_ADC_ConfigChannel+0x5c8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d102      	bne.n	800237a <HAL_ADC_ConfigChannel+0x4a6>
 8002374:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e009      	b.n	800238e <HAL_ADC_ConfigChannel+0x4ba>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a48      	ldr	r2, [pc, #288]	; (80024a0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d102      	bne.n	800238a <HAL_ADC_ConfigChannel+0x4b6>
 8002384:	4b45      	ldr	r3, [pc, #276]	; (800249c <HAL_ADC_ConfigChannel+0x5c8>)
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e001      	b.n	800238e <HAL_ADC_ConfigChannel+0x4ba>
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d108      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x4da>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x4da>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x4dc>
 80023ae:	2300      	movs	r3, #0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d150      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d010      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x502>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x502>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x504>
 80023d6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d13c      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d11d      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x54c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ec:	d118      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80023ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023fa:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_ADC_ConfigChannel+0x5d0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a2a      	ldr	r2, [pc, #168]	; (80024a8 <HAL_ADC_ConfigChannel+0x5d4>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	0c9a      	lsrs	r2, r3, #18
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002410:	e002      	b.n	8002418 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	3b01      	subs	r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f9      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800241e:	e02e      	b.n	800247e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b11      	cmp	r3, #17
 8002426:	d10b      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x56c>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002430:	d106      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800243a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800243e:	e01e      	b.n	800247e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b12      	cmp	r3, #18
 8002446:	d11a      	bne.n	800247e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002452:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002454:	e013      	b.n	800247e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002468:	e00a      	b.n	8002480 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f043 0220 	orr.w	r2, r3, #32
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800247c:	e000      	b.n	8002480 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800247e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002488:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800248c:	4618      	mov	r0, r3
 800248e:	376c      	adds	r7, #108	; 0x6c
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	50000100 	.word	0x50000100
 800249c:	50000400 	.word	0x50000400
 80024a0:	50000500 	.word	0x50000500
 80024a4:	20000000 	.word	0x20000000
 80024a8:	431bde83 	.word	0x431bde83

080024ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b099      	sub	sp, #100	; 0x64
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c4:	d102      	bne.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80024c6:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	e01a      	b.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6a      	ldr	r2, [pc, #424]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d103      	bne.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80024d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	e011      	b.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a67      	ldr	r2, [pc, #412]	; (8002680 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d102      	bne.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024e8:	4b66      	ldr	r3, [pc, #408]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	e009      	b.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a64      	ldr	r2, [pc, #400]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d102      	bne.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024f8:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	e001      	b.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0b0      	b.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002516:	2302      	movs	r3, #2
 8002518:	e0a9      	b.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 808d 	bne.w	800264c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 8086 	bne.w	800264c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002548:	d004      	beq.n	8002554 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a4b      	ldr	r2, [pc, #300]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002554:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002556:	e000      	b.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002558:	4b4c      	ldr	r3, [pc, #304]	; (800268c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800255a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d040      	beq.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002576:	035b      	lsls	r3, r3, #13
 8002578:	430b      	orrs	r3, r1
 800257a:	431a      	orrs	r2, r3
 800257c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800257e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d15c      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80025c2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d14b      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025d0:	f023 030f 	bic.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	6811      	ldr	r1, [r2, #0]
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	6892      	ldr	r2, [r2, #8]
 80025dc:	430a      	orrs	r2, r1
 80025de:	431a      	orrs	r2, r3
 80025e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025e4:	e03c      	b.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025f0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d108      	bne.n	8002612 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002612:	2300      	movs	r3, #0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d123      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002634:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002636:	2b00      	cmp	r3, #0
 8002638:	d112      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800263a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002642:	f023 030f 	bic.w	r3, r3, #15
 8002646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002648:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800264a:	e009      	b.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800265e:	e000      	b.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002660:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800266a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800266e:	4618      	mov	r0, r3
 8002670:	3764      	adds	r7, #100	; 0x64
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	50000100 	.word	0x50000100
 8002680:	50000400 	.word	0x50000400
 8002684:	50000500 	.word	0x50000500
 8002688:	50000300 	.word	0x50000300
 800268c:	50000700 	.word	0x50000700

08002690 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d108      	bne.n	80026bc <ADC_Disable+0x2c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <ADC_Disable+0x2c>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <ADC_Disable+0x2e>
 80026bc:	2300      	movs	r3, #0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d047      	beq.n	8002752 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030d 	and.w	r3, r3, #13
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10f      	bne.n	80026f0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0202 	orr.w	r2, r2, #2
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2203      	movs	r2, #3
 80026e6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80026e8:	f7ff f9ee 	bl	8001ac8 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026ee:	e029      	b.n	8002744 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f043 0210 	orr.w	r2, r3, #16
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e023      	b.n	8002754 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800270c:	f7ff f9dc 	bl	8001ac8 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d914      	bls.n	8002744 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10d      	bne.n	8002744 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	f043 0210 	orr.w	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e007      	b.n	8002754 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b01      	cmp	r3, #1
 8002750:	d0dc      	beq.n	800270c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <__NVIC_GetPriorityGrouping+0x18>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0307 	and.w	r3, r3, #7
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db0b      	blt.n	80027ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <__NVIC_EnableIRQ+0x38>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2001      	movs	r0, #1
 80027e2:	fa00 f202 	lsl.w	r2, r0, r2
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff29 	bl	800275c <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff3e 	bl	80027a4 <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff31 	bl	80027c0 <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffa2 	bl	80028b8 <SysTick_Config>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e037      	b.n	8002a04 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8b4 	bl	8002b54 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}  
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2204      	movs	r2, #4
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d024      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x72>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01f      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	2104      	movs	r1, #4
 8002a66:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d06a      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002a7c:	e065      	b.n	8002b4a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2202      	movs	r2, #2
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d02c      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0xdc>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d027      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 020a 	bic.w	r2, r2, #10
 8002ab4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8002acc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d035      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002ae6:	e030      	b.n	8002b4a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	2208      	movs	r2, #8
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d028      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x13e>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d023      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 020e 	bic.w	r2, r2, #14
 8002b10:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d004      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
    }
  }
}  
 8002b48:	e7ff      	b.n	8002b4a <HAL_DMA_IRQHandler+0x13e>
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <DMA_CalcBaseAndBitshift+0x60>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d80f      	bhi.n	8002b88 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b70:	4413      	add	r3, r2
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <DMA_CalcBaseAndBitshift+0x68>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	009a      	lsls	r2, r3, #2
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <DMA_CalcBaseAndBitshift+0x6c>)
 8002b84:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002b86:	e00e      	b.n	8002ba6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <DMA_CalcBaseAndBitshift+0x70>)
 8002b90:	4413      	add	r3, r2
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <DMA_CalcBaseAndBitshift+0x68>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	009a      	lsls	r2, r3, #2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <DMA_CalcBaseAndBitshift+0x74>)
 8002ba4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40020407 	.word	0x40020407
 8002bb8:	bffdfff8 	.word	0xbffdfff8
 8002bbc:	cccccccd 	.word	0xcccccccd
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	bffdfbf8 	.word	0xbffdfbf8
 8002bc8:	40020400 	.word	0x40020400

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bda:	e160      	b.n	8002e9e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8152 	beq.w	8002e98 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d005      	beq.n	8002c0c <HAL_GPIO_Init+0x40>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d130      	bne.n	8002c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c42:	2201      	movs	r2, #1
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0201 	and.w	r2, r3, #1
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d017      	beq.n	8002caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d123      	bne.n	8002cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	6939      	ldr	r1, [r7, #16]
 8002cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0203 	and.w	r2, r3, #3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80ac 	beq.w	8002e98 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d40:	4b5e      	ldr	r3, [pc, #376]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	4a5d      	ldr	r2, [pc, #372]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6193      	str	r3, [r2, #24]
 8002d4c:	4b5b      	ldr	r3, [pc, #364]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d58:	4a59      	ldr	r2, [pc, #356]	; (8002ec0 <HAL_GPIO_Init+0x2f4>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d82:	d025      	beq.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a4f      	ldr	r2, [pc, #316]	; (8002ec4 <HAL_GPIO_Init+0x2f8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d01f      	beq.n	8002dcc <HAL_GPIO_Init+0x200>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a4e      	ldr	r2, [pc, #312]	; (8002ec8 <HAL_GPIO_Init+0x2fc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d019      	beq.n	8002dc8 <HAL_GPIO_Init+0x1fc>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a4d      	ldr	r2, [pc, #308]	; (8002ecc <HAL_GPIO_Init+0x300>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <HAL_GPIO_Init+0x1f8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a4c      	ldr	r2, [pc, #304]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00d      	beq.n	8002dc0 <HAL_GPIO_Init+0x1f4>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a4b      	ldr	r2, [pc, #300]	; (8002ed4 <HAL_GPIO_Init+0x308>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d007      	beq.n	8002dbc <HAL_GPIO_Init+0x1f0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a4a      	ldr	r2, [pc, #296]	; (8002ed8 <HAL_GPIO_Init+0x30c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d101      	bne.n	8002db8 <HAL_GPIO_Init+0x1ec>
 8002db4:	2306      	movs	r3, #6
 8002db6:	e00c      	b.n	8002dd2 <HAL_GPIO_Init+0x206>
 8002db8:	2307      	movs	r3, #7
 8002dba:	e00a      	b.n	8002dd2 <HAL_GPIO_Init+0x206>
 8002dbc:	2305      	movs	r3, #5
 8002dbe:	e008      	b.n	8002dd2 <HAL_GPIO_Init+0x206>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	e006      	b.n	8002dd2 <HAL_GPIO_Init+0x206>
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e004      	b.n	8002dd2 <HAL_GPIO_Init+0x206>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e002      	b.n	8002dd2 <HAL_GPIO_Init+0x206>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_GPIO_Init+0x206>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	f002 0203 	and.w	r2, r2, #3
 8002dd8:	0092      	lsls	r2, r2, #2
 8002dda:	4093      	lsls	r3, r2
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002de2:	4937      	ldr	r1, [pc, #220]	; (8002ec0 <HAL_GPIO_Init+0x2f4>)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df0:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <HAL_GPIO_Init+0x310>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e14:	4a31      	ldr	r2, [pc, #196]	; (8002edc <HAL_GPIO_Init+0x310>)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e1a:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_GPIO_Init+0x310>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e3e:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_GPIO_Init+0x310>)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_GPIO_Init+0x310>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e68:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <HAL_GPIO_Init+0x310>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_GPIO_Init+0x310>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e92:	4a12      	ldr	r2, [pc, #72]	; (8002edc <HAL_GPIO_Init+0x310>)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f47f ae97 	bne.w	8002bdc <HAL_GPIO_Init+0x10>
  }
}
 8002eae:	bf00      	nop
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40010000 	.word	0x40010000
 8002ec4:	48000400 	.word	0x48000400
 8002ec8:	48000800 	.word	0x48000800
 8002ecc:	48000c00 	.word	0x48000c00
 8002ed0:	48001000 	.word	0x48001000
 8002ed4:	48001400 	.word	0x48001400
 8002ed8:	48001800 	.word	0x48001800
 8002edc:	40010400 	.word	0x40010400

08002ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
 8002eec:	4613      	mov	r3, r2
 8002eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef0:	787b      	ldrb	r3, [r7, #1]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002efc:	e002      	b.n	8002f04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e081      	b.n	8003026 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe fb4c 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2224      	movs	r2, #36	; 0x24
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d107      	bne.n	8002f8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e006      	b.n	8002f98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d104      	bne.n	8002faa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fa8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69d9      	ldr	r1, [r3, #28]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1a      	ldr	r2, [r3, #32]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b20      	cmp	r3, #32
 8003042:	d138      	bne.n	80030b6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800304e:	2302      	movs	r3, #2
 8003050:	e032      	b.n	80030b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2224      	movs	r2, #36	; 0x24
 800305e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003080:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6819      	ldr	r1, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d139      	bne.n	800314e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e033      	b.n	8003150 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003116:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e000      	b.n	8003150 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800314e:	2302      	movs	r3, #2
  }
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003162:	af00      	add	r7, sp, #0
 8003164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003168:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800316c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800316e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003172:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f001 b83a 	b.w	80041f6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003186:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 816f 	beq.w	8003476 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003198:	4bb5      	ldr	r3, [pc, #724]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d00c      	beq.n	80031be <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031a4:	4bb2      	ldr	r3, [pc, #712]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d15c      	bne.n	800326a <HAL_RCC_OscConfig+0x10e>
 80031b0:	4baf      	ldr	r3, [pc, #700]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d155      	bne.n	800326a <HAL_RCC_OscConfig+0x10e>
 80031be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d102      	bne.n	80031f0 <HAL_RCC_OscConfig+0x94>
 80031ea:	4ba1      	ldr	r3, [pc, #644]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	e015      	b.n	800321c <HAL_RCC_OscConfig+0xc0>
 80031f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003208:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800320c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003218:	4b95      	ldr	r3, [pc, #596]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003220:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003224:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003228:	fa92 f2a2 	rbit	r2, r2
 800322c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003230:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003234:	fab2 f282 	clz	r2, r2
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f042 0220 	orr.w	r2, r2, #32
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f002 021f 	and.w	r2, r2, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8111 	beq.w	8003474 <HAL_RCC_OscConfig+0x318>
 8003252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003256:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 8108 	bne.w	8003474 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f000 bfc6 	b.w	80041f6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327a:	d106      	bne.n	800328a <HAL_RCC_OscConfig+0x12e>
 800327c:	4b7c      	ldr	r3, [pc, #496]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a7b      	ldr	r2, [pc, #492]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 8003282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e036      	b.n	80032f8 <HAL_RCC_OscConfig+0x19c>
 800328a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800328e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x158>
 800329a:	4b75      	ldr	r3, [pc, #468]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a74      	ldr	r2, [pc, #464]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80032a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	4b72      	ldr	r3, [pc, #456]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a71      	ldr	r2, [pc, #452]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80032ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e021      	b.n	80032f8 <HAL_RCC_OscConfig+0x19c>
 80032b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x184>
 80032c6:	4b6a      	ldr	r3, [pc, #424]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a69      	ldr	r2, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80032cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4b67      	ldr	r3, [pc, #412]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a66      	ldr	r2, [pc, #408]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0x19c>
 80032e0:	4b63      	ldr	r3, [pc, #396]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a62      	ldr	r2, [pc, #392]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b60      	ldr	r3, [pc, #384]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a5f      	ldr	r2, [pc, #380]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d059      	beq.n	80033bc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fbde 	bl	8001ac8 <HAL_GetTick>
 800330c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003312:	f7fe fbd9 	bl	8001ac8 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d902      	bls.n	8003328 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	f000 bf67 	b.w	80041f6 <HAL_RCC_OscConfig+0x109a>
 8003328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800332c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800333c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d102      	bne.n	800335a <HAL_RCC_OscConfig+0x1fe>
 8003354:	4b46      	ldr	r3, [pc, #280]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	e015      	b.n	8003386 <HAL_RCC_OscConfig+0x22a>
 800335a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800335e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800336e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003372:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003376:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003382:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800338a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800338e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003392:	fa92 f2a2 	rbit	r2, r2
 8003396:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800339a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800339e:	fab2 f282 	clz	r2, r2
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f042 0220 	orr.w	r2, r2, #32
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	f002 021f 	and.w	r2, r2, #31
 80033ae:	2101      	movs	r1, #1
 80033b0:	fa01 f202 	lsl.w	r2, r1, r2
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0ab      	beq.n	8003312 <HAL_RCC_OscConfig+0x1b6>
 80033ba:	e05c      	b.n	8003476 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe fb84 	bl	8001ac8 <HAL_GetTick>
 80033c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c6:	f7fe fb7f 	bl	8001ac8 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d902      	bls.n	80033dc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	f000 bf0d 	b.w	80041f6 <HAL_RCC_OscConfig+0x109a>
 80033dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80033f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	d102      	bne.n	800340e <HAL_RCC_OscConfig+0x2b2>
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	e015      	b.n	800343a <HAL_RCC_OscConfig+0x2de>
 800340e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003412:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003422:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003426:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800342a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_RCC_OscConfig+0x314>)
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800343e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003442:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003446:	fa92 f2a2 	rbit	r2, r2
 800344a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800344e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003452:	fab2 f282 	clz	r2, r2
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	f042 0220 	orr.w	r2, r2, #32
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	f002 021f 	and.w	r2, r2, #31
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f202 	lsl.w	r2, r1, r2
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1ab      	bne.n	80033c6 <HAL_RCC_OscConfig+0x26a>
 800346e:	e002      	b.n	8003476 <HAL_RCC_OscConfig+0x31a>
 8003470:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800347a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 817f 	beq.w	800378a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800348c:	4ba7      	ldr	r3, [pc, #668]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00c      	beq.n	80034b2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003498:	4ba4      	ldr	r3, [pc, #656]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d173      	bne.n	800358c <HAL_RCC_OscConfig+0x430>
 80034a4:	4ba1      	ldr	r3, [pc, #644]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80034ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b0:	d16c      	bne.n	800358c <HAL_RCC_OscConfig+0x430>
 80034b2:	2302      	movs	r3, #2
 80034b4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80034c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <HAL_RCC_OscConfig+0x386>
 80034dc:	4b93      	ldr	r3, [pc, #588]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	e013      	b.n	800350a <HAL_RCC_OscConfig+0x3ae>
 80034e2:	2302      	movs	r3, #2
 80034e4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80034f4:	2302      	movs	r3, #2
 80034f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80034fa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003506:	4b89      	ldr	r3, [pc, #548]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2202      	movs	r2, #2
 800350c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003510:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003514:	fa92 f2a2 	rbit	r2, r2
 8003518:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800351c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003520:	fab2 f282 	clz	r2, r2
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	f042 0220 	orr.w	r2, r2, #32
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	f002 021f 	and.w	r2, r2, #31
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f202 	lsl.w	r2, r1, r2
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCC_OscConfig+0x3f6>
 800353c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003540:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d002      	beq.n	8003552 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	f000 be52 	b.w	80041f6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003552:	4b76      	ldr	r3, [pc, #472]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800355e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	21f8      	movs	r1, #248	; 0xf8
 8003568:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003570:	fa91 f1a1 	rbit	r1, r1
 8003574:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003578:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800357c:	fab1 f181 	clz	r1, r1
 8003580:	b2c9      	uxtb	r1, r1
 8003582:	408b      	lsls	r3, r1
 8003584:	4969      	ldr	r1, [pc, #420]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	e0fe      	b.n	800378a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800358c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003590:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8088 	beq.w	80036ae <HAL_RCC_OscConfig+0x552>
 800359e:	2301      	movs	r3, #1
 80035a0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80035b0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	461a      	mov	r2, r3
 80035c6:	2301      	movs	r3, #1
 80035c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fe fa7d 	bl	8001ac8 <HAL_GetTick>
 80035ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d4:	f7fe fa78 	bl	8001ac8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d902      	bls.n	80035ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	f000 be06 	b.w	80041f6 <HAL_RCC_OscConfig+0x109a>
 80035ea:	2302      	movs	r3, #2
 80035ec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80035fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d102      	bne.n	800361a <HAL_RCC_OscConfig+0x4be>
 8003614:	4b45      	ldr	r3, [pc, #276]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	e013      	b.n	8003642 <HAL_RCC_OscConfig+0x4e6>
 800361a:	2302      	movs	r3, #2
 800361c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800362c:	2302      	movs	r3, #2
 800362e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003632:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800363e:	4b3b      	ldr	r3, [pc, #236]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2202      	movs	r2, #2
 8003644:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003648:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800364c:	fa92 f2a2 	rbit	r2, r2
 8003650:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003654:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003658:	fab2 f282 	clz	r2, r2
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	f042 0220 	orr.w	r2, r2, #32
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	f002 021f 	and.w	r2, r2, #31
 8003668:	2101      	movs	r1, #1
 800366a:	fa01 f202 	lsl.w	r2, r1, r2
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0af      	beq.n	80035d4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b2d      	ldr	r3, [pc, #180]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003680:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	21f8      	movs	r1, #248	; 0xf8
 800368a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003692:	fa91 f1a1 	rbit	r1, r1
 8003696:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800369a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800369e:	fab1 f181 	clz	r1, r1
 80036a2:	b2c9      	uxtb	r1, r1
 80036a4:	408b      	lsls	r3, r1
 80036a6:	4921      	ldr	r1, [pc, #132]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]
 80036ac:	e06d      	b.n	800378a <HAL_RCC_OscConfig+0x62e>
 80036ae:	2301      	movs	r3, #1
 80036b0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80036c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	461a      	mov	r2, r3
 80036d6:	2300      	movs	r3, #0
 80036d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036da:	f7fe f9f5 	bl	8001ac8 <HAL_GetTick>
 80036de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e4:	f7fe f9f0 	bl	8001ac8 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d902      	bls.n	80036fa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	f000 bd7e 	b.w	80041f6 <HAL_RCC_OscConfig+0x109a>
 80036fa:	2302      	movs	r3, #2
 80036fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800370c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d105      	bne.n	8003730 <HAL_RCC_OscConfig+0x5d4>
 8003724:	4b01      	ldr	r3, [pc, #4]	; (800372c <HAL_RCC_OscConfig+0x5d0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	e016      	b.n	8003758 <HAL_RCC_OscConfig+0x5fc>
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	2302      	movs	r3, #2
 8003732:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003742:	2302      	movs	r3, #2
 8003744:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003748:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003754:	4bbf      	ldr	r3, [pc, #764]	; (8003a54 <HAL_RCC_OscConfig+0x8f8>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	2202      	movs	r2, #2
 800375a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800375e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003762:	fa92 f2a2 	rbit	r2, r2
 8003766:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800376a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800376e:	fab2 f282 	clz	r2, r2
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	f042 0220 	orr.w	r2, r2, #32
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f002 021f 	and.w	r2, r2, #31
 800377e:	2101      	movs	r1, #1
 8003780:	fa01 f202 	lsl.w	r2, r1, r2
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ac      	bne.n	80036e4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8113 	beq.w	80039c6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d07c      	beq.n	80038aa <HAL_RCC_OscConfig+0x74e>
 80037b0:	2301      	movs	r3, #1
 80037b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80037c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	4ba2      	ldr	r3, [pc, #648]	; (8003a58 <HAL_RCC_OscConfig+0x8fc>)
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	461a      	mov	r2, r3
 80037d6:	2301      	movs	r3, #1
 80037d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037da:	f7fe f975 	bl	8001ac8 <HAL_GetTick>
 80037de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fe f970 	bl	8001ac8 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d902      	bls.n	80037fa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	f000 bcfe 	b.w	80041f6 <HAL_RCC_OscConfig+0x109a>
 80037fa:	2302      	movs	r3, #2
 80037fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003804:	fa93 f2a3 	rbit	r2, r3
 8003808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800381a:	2202      	movs	r2, #2
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	fa93 f2a3 	rbit	r2, r3
 800382c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800383e:	2202      	movs	r2, #2
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003846:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	fa93 f2a3 	rbit	r2, r3
 8003850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003854:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003858:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385a:	4b7e      	ldr	r3, [pc, #504]	; (8003a54 <HAL_RCC_OscConfig+0x8f8>)
 800385c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800385e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003862:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003866:	2102      	movs	r1, #2
 8003868:	6019      	str	r1, [r3, #0]
 800386a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	fa93 f1a3 	rbit	r1, r3
 8003878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003880:	6019      	str	r1, [r3, #0]
  return result;
 8003882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003886:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2101      	movs	r1, #1
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d09d      	beq.n	80037e4 <HAL_RCC_OscConfig+0x688>
 80038a8:	e08d      	b.n	80039c6 <HAL_RCC_OscConfig+0x86a>
 80038aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	fa93 f2a3 	rbit	r2, r3
 80038c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80038cc:	601a      	str	r2, [r3, #0]
  return result;
 80038ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80038d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	4b5d      	ldr	r3, [pc, #372]	; (8003a58 <HAL_RCC_OscConfig+0x8fc>)
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	461a      	mov	r2, r3
 80038e8:	2300      	movs	r3, #0
 80038ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ec:	f7fe f8ec 	bl	8001ac8 <HAL_GetTick>
 80038f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f4:	e00a      	b.n	800390c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f6:	f7fe f8e7 	bl	8001ac8 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d902      	bls.n	800390c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	f000 bc75 	b.w	80041f6 <HAL_RCC_OscConfig+0x109a>
 800390c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003910:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003914:	2202      	movs	r2, #2
 8003916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	fa93 f2a3 	rbit	r2, r3
 8003926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800392a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003938:	2202      	movs	r2, #2
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	fa93 f2a3 	rbit	r2, r3
 800394a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800394e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003958:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800395c:	2202      	movs	r2, #2
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003964:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	fa93 f2a3 	rbit	r2, r3
 800396e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003972:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003976:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_RCC_OscConfig+0x8f8>)
 800397a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800397c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003980:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003984:	2102      	movs	r1, #2
 8003986:	6019      	str	r1, [r3, #0]
 8003988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	fa93 f1a3 	rbit	r1, r3
 8003996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800399a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800399e:	6019      	str	r1, [r3, #0]
  return result;
 80039a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2101      	movs	r1, #1
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d197      	bne.n	80038f6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 81a5 	beq.w	8003d26 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039dc:	2300      	movs	r3, #0
 80039de:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <HAL_RCC_OscConfig+0x8f8>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ee:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_OscConfig+0x8f8>)
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <HAL_RCC_OscConfig+0x8f8>)
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	61d3      	str	r3, [r2, #28]
 80039fa:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <HAL_RCC_OscConfig+0x8f8>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a14:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <HAL_RCC_OscConfig+0x900>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d121      	bne.n	8003a6c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_RCC_OscConfig+0x900>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <HAL_RCC_OscConfig+0x900>)
 8003a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a32:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a34:	f7fe f848 	bl	8001ac8 <HAL_GetTick>
 8003a38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	e010      	b.n	8003a60 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3e:	f7fe f843 	bl	8001ac8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d908      	bls.n	8003a60 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e3d1      	b.n	80041f6 <HAL_RCC_OscConfig+0x109a>
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000
 8003a58:	10908120 	.word	0x10908120
 8003a5c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a60:	4b8d      	ldr	r3, [pc, #564]	; (8003c98 <HAL_RCC_OscConfig+0xb3c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0e8      	beq.n	8003a3e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d106      	bne.n	8003a8a <HAL_RCC_OscConfig+0x92e>
 8003a7c:	4b87      	ldr	r3, [pc, #540]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4a86      	ldr	r2, [pc, #536]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6213      	str	r3, [r2, #32]
 8003a88:	e035      	b.n	8003af6 <HAL_RCC_OscConfig+0x99a>
 8003a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x958>
 8003a9a:	4b80      	ldr	r3, [pc, #512]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4a7f      	ldr	r2, [pc, #508]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	6213      	str	r3, [r2, #32]
 8003aa6:	4b7d      	ldr	r3, [pc, #500]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4a7c      	ldr	r2, [pc, #496]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003aac:	f023 0304 	bic.w	r3, r3, #4
 8003ab0:	6213      	str	r3, [r2, #32]
 8003ab2:	e020      	b.n	8003af6 <HAL_RCC_OscConfig+0x99a>
 8003ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b05      	cmp	r3, #5
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_OscConfig+0x982>
 8003ac4:	4b75      	ldr	r3, [pc, #468]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4a74      	ldr	r2, [pc, #464]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	6213      	str	r3, [r2, #32]
 8003ad0:	4b72      	ldr	r3, [pc, #456]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4a71      	ldr	r2, [pc, #452]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6213      	str	r3, [r2, #32]
 8003adc:	e00b      	b.n	8003af6 <HAL_RCC_OscConfig+0x99a>
 8003ade:	4b6f      	ldr	r3, [pc, #444]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4a6e      	ldr	r2, [pc, #440]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6213      	str	r3, [r2, #32]
 8003aea:	4b6c      	ldr	r3, [pc, #432]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	4a6b      	ldr	r2, [pc, #428]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003afa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 8081 	beq.w	8003c0a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b08:	f7fd ffde 	bl	8001ac8 <HAL_GetTick>
 8003b0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b10:	e00b      	b.n	8003b2a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fd ffd9 	bl	8001ac8 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e365      	b.n	80041f6 <HAL_RCC_OscConfig+0x109a>
 8003b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b32:	2202      	movs	r2, #2
 8003b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	fa93 f2a3 	rbit	r2, r3
 8003b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b48:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b56:	2202      	movs	r2, #2
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	fa93 f2a3 	rbit	r2, r3
 8003b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b70:	601a      	str	r2, [r3, #0]
  return result;
 8003b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b76:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d102      	bne.n	8003b96 <HAL_RCC_OscConfig+0xa3a>
 8003b90:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	e013      	b.n	8003bbe <HAL_RCC_OscConfig+0xa62>
 8003b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	fa93 f2a3 	rbit	r2, r3
 8003bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	4b38      	ldr	r3, [pc, #224]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bc2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	6011      	str	r1, [r2, #0]
 8003bca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	fa92 f1a2 	rbit	r1, r2
 8003bd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bdc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003be0:	6011      	str	r1, [r2, #0]
  return result;
 8003be2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003be6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	fab2 f282 	clz	r2, r2
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	f002 021f 	and.w	r2, r2, #31
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d084      	beq.n	8003b12 <HAL_RCC_OscConfig+0x9b6>
 8003c08:	e083      	b.n	8003d12 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd ff5d 	bl	8001ac8 <HAL_GetTick>
 8003c0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fd ff58 	bl	8001ac8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e2e4      	b.n	80041f6 <HAL_RCC_OscConfig+0x109a>
 8003c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003c34:	2202      	movs	r2, #2
 8003c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	fa93 f2a3 	rbit	r2, r3
 8003c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c4a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c58:	2202      	movs	r2, #2
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	fa93 f2a3 	rbit	r2, r3
 8003c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c6e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c72:	601a      	str	r2, [r3, #0]
  return result;
 8003c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c78:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f043 0302 	orr.w	r3, r3, #2
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d106      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xb44>
 8003c92:	4b02      	ldr	r3, [pc, #8]	; (8003c9c <HAL_RCC_OscConfig+0xb40>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	e017      	b.n	8003cc8 <HAL_RCC_OscConfig+0xb6c>
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ca8:	2202      	movs	r2, #2
 8003caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	fa93 f2a3 	rbit	r2, r3
 8003cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cbe:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	4bb3      	ldr	r3, [pc, #716]	; (8003f94 <HAL_RCC_OscConfig+0xe38>)
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ccc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003cd0:	2102      	movs	r1, #2
 8003cd2:	6011      	str	r1, [r2, #0]
 8003cd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cd8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	fa92 f1a2 	rbit	r1, r2
 8003ce2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ce6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003cea:	6011      	str	r1, [r2, #0]
  return result;
 8003cec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cf0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	fab2 f282 	clz	r2, r2
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	f002 021f 	and.w	r2, r2, #31
 8003d06:	2101      	movs	r1, #1
 8003d08:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d180      	bne.n	8003c14 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d12:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d105      	bne.n	8003d26 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1a:	4b9e      	ldr	r3, [pc, #632]	; (8003f94 <HAL_RCC_OscConfig+0xe38>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	4a9d      	ldr	r2, [pc, #628]	; (8003f94 <HAL_RCC_OscConfig+0xe38>)
 8003d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d24:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 825e 	beq.w	80041f4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d38:	4b96      	ldr	r3, [pc, #600]	; (8003f94 <HAL_RCC_OscConfig+0xe38>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	f000 821f 	beq.w	8004184 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	f040 8170 	bne.w	8004038 <HAL_RCC_OscConfig+0xedc>
 8003d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d6a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	fa93 f2a3 	rbit	r2, r3
 8003d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d78:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d7c:	601a      	str	r2, [r3, #0]
  return result;
 8003d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d86:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d88:	fab3 f383 	clz	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fd fe93 	bl	8001ac8 <HAL_GetTick>
 8003da2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da6:	e009      	b.n	8003dbc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da8:	f7fd fe8e 	bl	8001ac8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e21c      	b.n	80041f6 <HAL_RCC_OscConfig+0x109a>
 8003dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	fa93 f2a3 	rbit	r2, r3
 8003dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ddc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003de0:	601a      	str	r2, [r3, #0]
  return result;
 8003de2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003dea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_RCC_OscConfig+0xcaa>
 8003e00:	4b64      	ldr	r3, [pc, #400]	; (8003f94 <HAL_RCC_OscConfig+0xe38>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	e027      	b.n	8003e56 <HAL_RCC_OscConfig+0xcfa>
 8003e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e18:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	fa93 f2a3 	rbit	r2, r3
 8003e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e3e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	fa93 f2a3 	rbit	r2, r3
 8003e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	4b50      	ldr	r3, [pc, #320]	; (8003f94 <HAL_RCC_OscConfig+0xe38>)
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e5a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e62:	6011      	str	r1, [r2, #0]
 8003e64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e68:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	fa92 f1a2 	rbit	r1, r2
 8003e72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e76:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003e7a:	6011      	str	r1, [r2, #0]
  return result;
 8003e7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e80:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	fab2 f282 	clz	r2, r2
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	f042 0220 	orr.w	r2, r2, #32
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	f002 021f 	and.w	r2, r2, #31
 8003e96:	2101      	movs	r1, #1
 8003e98:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d182      	bne.n	8003da8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea2:	4b3c      	ldr	r3, [pc, #240]	; (8003f94 <HAL_RCC_OscConfig+0xe38>)
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	f023 020f 	bic.w	r2, r3, #15
 8003eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	4937      	ldr	r1, [pc, #220]	; (8003f94 <HAL_RCC_OscConfig+0xe38>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003ebc:	4b35      	ldr	r3, [pc, #212]	; (8003f94 <HAL_RCC_OscConfig+0xe38>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a19      	ldr	r1, [r3, #32]
 8003ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	430b      	orrs	r3, r1
 8003ede:	492d      	ldr	r1, [pc, #180]	; (8003f94 <HAL_RCC_OscConfig+0xe38>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]
 8003ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ef6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	fa93 f2a3 	rbit	r2, r3
 8003f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f04:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f08:	601a      	str	r2, [r3, #0]
  return result;
 8003f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f0e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f12:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	461a      	mov	r2, r3
 8003f26:	2301      	movs	r3, #1
 8003f28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2a:	f7fd fdcd 	bl	8001ac8 <HAL_GetTick>
 8003f2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f32:	e009      	b.n	8003f48 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fd fdc8 	bl	8001ac8 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e156      	b.n	80041f6 <HAL_RCC_OscConfig+0x109a>
 8003f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f5a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	fa93 f2a3 	rbit	r2, r3
 8003f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f6c:	601a      	str	r2, [r3, #0]
  return result;
 8003f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f72:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f78:	fab3 f383 	clz	r3, r3
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d105      	bne.n	8003f98 <HAL_RCC_OscConfig+0xe3c>
 8003f8c:	4b01      	ldr	r3, [pc, #4]	; (8003f94 <HAL_RCC_OscConfig+0xe38>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	e02a      	b.n	8003fe8 <HAL_RCC_OscConfig+0xe8c>
 8003f92:	bf00      	nop
 8003f94:	40021000 	.word	0x40021000
 8003f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003faa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	fa93 f2a3 	rbit	r2, r3
 8003fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	fa93 f2a3 	rbit	r2, r3
 8003fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fde:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	4b86      	ldr	r3, [pc, #536]	; (8004200 <HAL_RCC_OscConfig+0x10a4>)
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ff0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ff4:	6011      	str	r1, [r2, #0]
 8003ff6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ffa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	fa92 f1a2 	rbit	r1, r2
 8004004:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004008:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800400c:	6011      	str	r1, [r2, #0]
  return result;
 800400e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004012:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	fab2 f282 	clz	r2, r2
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	f042 0220 	orr.w	r2, r2, #32
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	f002 021f 	and.w	r2, r2, #31
 8004028:	2101      	movs	r1, #1
 800402a:	fa01 f202 	lsl.w	r2, r1, r2
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	f43f af7f 	beq.w	8003f34 <HAL_RCC_OscConfig+0xdd8>
 8004036:	e0dd      	b.n	80041f4 <HAL_RCC_OscConfig+0x1098>
 8004038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800403c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004040:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800404a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	fa93 f2a3 	rbit	r2, r3
 8004054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004058:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800405c:	601a      	str	r2, [r3, #0]
  return result;
 800405e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004062:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004066:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004068:	fab3 f383 	clz	r3, r3
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004072:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	461a      	mov	r2, r3
 800407a:	2300      	movs	r3, #0
 800407c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407e:	f7fd fd23 	bl	8001ac8 <HAL_GetTick>
 8004082:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004086:	e009      	b.n	800409c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004088:	f7fd fd1e 	bl	8001ac8 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e0ac      	b.n	80041f6 <HAL_RCC_OscConfig+0x109a>
 800409c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	fa93 f2a3 	rbit	r2, r3
 80040b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80040c0:	601a      	str	r2, [r3, #0]
  return result;
 80040c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80040ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d102      	bne.n	80040e6 <HAL_RCC_OscConfig+0xf8a>
 80040e0:	4b47      	ldr	r3, [pc, #284]	; (8004200 <HAL_RCC_OscConfig+0x10a4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	e027      	b.n	8004136 <HAL_RCC_OscConfig+0xfda>
 80040e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ea:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80040ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	fa93 f2a3 	rbit	r2, r3
 8004102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004106:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004110:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004114:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800411e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	fa93 f2a3 	rbit	r2, r3
 8004128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	4b33      	ldr	r3, [pc, #204]	; (8004200 <HAL_RCC_OscConfig+0x10a4>)
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800413a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800413e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004142:	6011      	str	r1, [r2, #0]
 8004144:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004148:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	fa92 f1a2 	rbit	r1, r2
 8004152:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004156:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800415a:	6011      	str	r1, [r2, #0]
  return result;
 800415c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004160:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	fab2 f282 	clz	r2, r2
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	f042 0220 	orr.w	r2, r2, #32
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	f002 021f 	and.w	r2, r2, #31
 8004176:	2101      	movs	r1, #1
 8004178:	fa01 f202 	lsl.w	r2, r1, r2
 800417c:	4013      	ands	r3, r2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d182      	bne.n	8004088 <HAL_RCC_OscConfig+0xf2c>
 8004182:	e037      	b.n	80041f4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004188:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e02e      	b.n	80041f6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004198:	4b19      	ldr	r3, [pc, #100]	; (8004200 <HAL_RCC_OscConfig+0x10a4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80041a0:	4b17      	ldr	r3, [pc, #92]	; (8004200 <HAL_RCC_OscConfig+0x10a4>)
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041ac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80041b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d117      	bne.n	80041f0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80041c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041c4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80041d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041dc:	f003 020f 	and.w	r2, r3, #15
 80041e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021000 	.word	0x40021000

08004204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b09e      	sub	sp, #120	; 0x78
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e162      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800421c:	4b90      	ldr	r3, [pc, #576]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d910      	bls.n	800424c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b8d      	ldr	r3, [pc, #564]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 0207 	bic.w	r2, r3, #7
 8004232:	498b      	ldr	r1, [pc, #556]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	4313      	orrs	r3, r2
 8004238:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423a:	4b89      	ldr	r3, [pc, #548]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d001      	beq.n	800424c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e14a      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004258:	4b82      	ldr	r3, [pc, #520]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	497f      	ldr	r1, [pc, #508]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80dc 	beq.w	8004430 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d13c      	bne.n	80042fa <HAL_RCC_ClockConfig+0xf6>
 8004280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004284:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800428e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004290:	fab3 f383 	clz	r3, r3
 8004294:	b2db      	uxtb	r3, r3
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d102      	bne.n	80042aa <HAL_RCC_ClockConfig+0xa6>
 80042a4:	4b6f      	ldr	r3, [pc, #444]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	e00f      	b.n	80042ca <HAL_RCC_ClockConfig+0xc6>
 80042aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	667b      	str	r3, [r7, #100]	; 0x64
 80042b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042bc:	663b      	str	r3, [r7, #96]	; 0x60
 80042be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c6:	4b67      	ldr	r3, [pc, #412]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80042d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042d2:	fa92 f2a2 	rbit	r2, r2
 80042d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80042d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042da:	fab2 f282 	clz	r2, r2
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	f042 0220 	orr.w	r2, r2, #32
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	f002 021f 	and.w	r2, r2, #31
 80042ea:	2101      	movs	r1, #1
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d17b      	bne.n	80043ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0f3      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d13c      	bne.n	800437c <HAL_RCC_ClockConfig+0x178>
 8004302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004306:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d102      	bne.n	800432c <HAL_RCC_ClockConfig+0x128>
 8004326:	4b4f      	ldr	r3, [pc, #316]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	e00f      	b.n	800434c <HAL_RCC_ClockConfig+0x148>
 800432c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004330:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004334:	fa93 f3a3 	rbit	r3, r3
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
 800433a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433e:	643b      	str	r3, [r7, #64]	; 0x40
 8004340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004348:	4b46      	ldr	r3, [pc, #280]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004350:	63ba      	str	r2, [r7, #56]	; 0x38
 8004352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004354:	fa92 f2a2 	rbit	r2, r2
 8004358:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800435a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800435c:	fab2 f282 	clz	r2, r2
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	f042 0220 	orr.w	r2, r2, #32
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	f002 021f 	and.w	r2, r2, #31
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f202 	lsl.w	r2, r1, r2
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d13a      	bne.n	80043ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b2      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
 800437c:	2302      	movs	r3, #2
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	fa93 f3a3 	rbit	r3, r3
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x1a0>
 800439e:	4b31      	ldr	r3, [pc, #196]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	e00d      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1bc>
 80043a4:	2302      	movs	r3, #2
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	fa93 f3a3 	rbit	r3, r3
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
 80043b0:	2302      	movs	r3, #2
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	4b29      	ldr	r3, [pc, #164]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	2202      	movs	r2, #2
 80043c2:	61ba      	str	r2, [r7, #24]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	fa92 f2a2 	rbit	r2, r2
 80043ca:	617a      	str	r2, [r7, #20]
  return result;
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	fab2 f282 	clz	r2, r2
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	f042 0220 	orr.w	r2, r2, #32
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	f002 021f 	and.w	r2, r2, #31
 80043de:	2101      	movs	r1, #1
 80043e0:	fa01 f202 	lsl.w	r2, r1, r2
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e079      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f023 0203 	bic.w	r2, r3, #3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	491a      	ldr	r1, [pc, #104]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004400:	f7fd fb62 	bl	8001ac8 <HAL_GetTick>
 8004404:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	e00a      	b.n	800441e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004408:	f7fd fb5e 	bl	8001ac8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	; 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e061      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 020c 	and.w	r2, r3, #12
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	429a      	cmp	r2, r3
 800442e:	d1eb      	bne.n	8004408 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d214      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 0207 	bic.w	r2, r3, #7
 8004446:	4906      	ldr	r1, [pc, #24]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b04      	ldr	r3, [pc, #16]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e040      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
 8004460:	40022000 	.word	0x40022000
 8004464:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_RCC_ClockConfig+0x2e8>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	491a      	ldr	r1, [pc, #104]	; (80044ec <HAL_RCC_ClockConfig+0x2e8>)
 8004482:	4313      	orrs	r3, r2
 8004484:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004492:	4b16      	ldr	r3, [pc, #88]	; (80044ec <HAL_RCC_ClockConfig+0x2e8>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4912      	ldr	r1, [pc, #72]	; (80044ec <HAL_RCC_ClockConfig+0x2e8>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044a6:	f000 f829 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80044aa:	4601      	mov	r1, r0
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <HAL_RCC_ClockConfig+0x2e8>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b4:	22f0      	movs	r2, #240	; 0xf0
 80044b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	fa92 f2a2 	rbit	r2, r2
 80044be:	60fa      	str	r2, [r7, #12]
  return result;
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	fab2 f282 	clz	r2, r2
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	40d3      	lsrs	r3, r2
 80044ca:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <HAL_RCC_ClockConfig+0x2ec>)
 80044cc:	5cd3      	ldrb	r3, [r2, r3]
 80044ce:	fa21 f303 	lsr.w	r3, r1, r3
 80044d2:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <HAL_RCC_ClockConfig+0x2f0>)
 80044d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <HAL_RCC_ClockConfig+0x2f4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd fab0 	bl	8001a40 <HAL_InitTick>
  
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3778      	adds	r7, #120	; 0x78
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	0800aa68 	.word	0x0800aa68
 80044f4:	20000000 	.word	0x20000000
 80044f8:	20000004 	.word	0x20000004

080044fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b08b      	sub	sp, #44	; 0x2c
 8004500:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	2300      	movs	r3, #0
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	2300      	movs	r3, #0
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004516:	4b2a      	ldr	r3, [pc, #168]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	2b04      	cmp	r3, #4
 8004524:	d002      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0x30>
 8004526:	2b08      	cmp	r3, #8
 8004528:	d003      	beq.n	8004532 <HAL_RCC_GetSysClockFreq+0x36>
 800452a:	e03f      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800452c:	4b25      	ldr	r3, [pc, #148]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800452e:	623b      	str	r3, [r7, #32]
      break;
 8004530:	e03f      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004538:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800453c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	fa92 f2a2 	rbit	r2, r2
 8004544:	607a      	str	r2, [r7, #4]
  return result;
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	fab2 f282 	clz	r2, r2
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	40d3      	lsrs	r3, r2
 8004550:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004552:	5cd3      	ldrb	r3, [r2, r3]
 8004554:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004556:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	220f      	movs	r2, #15
 8004560:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	fa92 f2a2 	rbit	r2, r2
 8004568:	60fa      	str	r2, [r7, #12]
  return result;
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	fab2 f282 	clz	r2, r2
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	40d3      	lsrs	r3, r2
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004576:	5cd3      	ldrb	r3, [r2, r3]
 8004578:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004584:	4a0f      	ldr	r2, [pc, #60]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	fbb2 f2f3 	udiv	r2, r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
 8004594:	e007      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004596:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	fbb2 f2f3 	udiv	r2, r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	fb02 f303 	mul.w	r3, r2, r3
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	623b      	str	r3, [r7, #32]
      break;
 80045aa:	e002      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045ae:	623b      	str	r3, [r7, #32]
      break;
 80045b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b2:	6a3b      	ldr	r3, [r7, #32]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	372c      	adds	r7, #44	; 0x2c
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40021000 	.word	0x40021000
 80045c4:	007a1200 	.word	0x007a1200
 80045c8:	0800aa80 	.word	0x0800aa80
 80045cc:	0800aa90 	.word	0x0800aa90

080045d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000000 	.word	0x20000000

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045ee:	f7ff ffef 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80045f2:	4601      	mov	r1, r0
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004600:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	fa92 f2a2 	rbit	r2, r2
 8004608:	603a      	str	r2, [r7, #0]
  return result;
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	fab2 f282 	clz	r2, r2
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	40d3      	lsrs	r3, r2
 8004614:	4a04      	ldr	r2, [pc, #16]	; (8004628 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004616:	5cd3      	ldrb	r3, [r2, r3]
 8004618:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40021000 	.word	0x40021000
 8004628:	0800aa78 	.word	0x0800aa78

0800462c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004632:	f7ff ffcd 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 8004636:	4601      	mov	r1, r0
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004640:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004644:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	fa92 f2a2 	rbit	r2, r2
 800464c:	603a      	str	r2, [r7, #0]
  return result;
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	fab2 f282 	clz	r2, r2
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	40d3      	lsrs	r3, r2
 8004658:	4a04      	ldr	r2, [pc, #16]	; (800466c <HAL_RCC_GetPCLK2Freq+0x40>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000
 800466c:	0800aa78 	.word	0x0800aa78

08004670 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b092      	sub	sp, #72	; 0x48
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004680:	2300      	movs	r3, #0
 8004682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80d4 	beq.w	800483c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004694:	4b4e      	ldr	r3, [pc, #312]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10e      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	61d3      	str	r3, [r2, #28]
 80046ac:	4b48      	ldr	r3, [pc, #288]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046be:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d118      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ca:	4b42      	ldr	r3, [pc, #264]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a41      	ldr	r2, [pc, #260]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d6:	f7fd f9f7 	bl	8001ac8 <HAL_GetTick>
 80046da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	e008      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fd f9f3 	bl	8001ac8 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b64      	cmp	r3, #100	; 0x64
 80046ea:	d901      	bls.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1d6      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	4b38      	ldr	r3, [pc, #224]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046fc:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004704:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8084 	beq.w	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004718:	429a      	cmp	r2, r3
 800471a:	d07c      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800471c:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004736:	fab3 f383 	clz	r3, r3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	461a      	mov	r2, r3
 8004746:	2301      	movs	r3, #1
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800474e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	fa93 f3a3 	rbit	r3, r3
 8004756:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800475a:	fab3 f383 	clz	r3, r3
 800475e:	b2db      	uxtb	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	461a      	mov	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004772:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d04b      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fd f9a3 	bl	8001ac8 <HAL_GetTick>
 8004782:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	e00a      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7fd f99f 	bl	8001ac8 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e180      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800479c:	2302      	movs	r3, #2
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	2302      	movs	r3, #2
 80047aa:	623b      	str	r3, [r7, #32]
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	61fb      	str	r3, [r7, #28]
  return result;
 80047b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b6:	fab3 f383 	clz	r3, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d108      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80047ca:	4b01      	ldr	r3, [pc, #4]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	e00d      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
 80047d8:	10908100 	.word	0x10908100
 80047dc:	2302      	movs	r3, #2
 80047de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	4b9a      	ldr	r3, [pc, #616]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2202      	movs	r2, #2
 80047ee:	613a      	str	r2, [r7, #16]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	fa92 f2a2 	rbit	r2, r2
 80047f6:	60fa      	str	r2, [r7, #12]
  return result;
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	fab2 f282 	clz	r2, r2
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	f002 021f 	and.w	r2, r2, #31
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f202 	lsl.w	r2, r1, r2
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0b7      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004816:	4b8f      	ldr	r3, [pc, #572]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	498c      	ldr	r1, [pc, #560]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004824:	4313      	orrs	r3, r2
 8004826:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004828:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004830:	4b88      	ldr	r3, [pc, #544]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	4a87      	ldr	r2, [pc, #540]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004848:	4b82      	ldr	r3, [pc, #520]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	f023 0203 	bic.w	r2, r3, #3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	497f      	ldr	r1, [pc, #508]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004856:	4313      	orrs	r3, r2
 8004858:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004866:	4b7b      	ldr	r3, [pc, #492]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	4978      	ldr	r1, [pc, #480]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004874:	4313      	orrs	r3, r2
 8004876:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004884:	4b73      	ldr	r3, [pc, #460]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	4970      	ldr	r1, [pc, #448]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048a2:	4b6c      	ldr	r3, [pc, #432]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f023 0210 	bic.w	r2, r3, #16
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	4969      	ldr	r1, [pc, #420]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048c0:	4b64      	ldr	r3, [pc, #400]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	4961      	ldr	r1, [pc, #388]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048de:	4b5d      	ldr	r3, [pc, #372]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f023 0220 	bic.w	r2, r3, #32
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	495a      	ldr	r1, [pc, #360]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048fc:	4b55      	ldr	r3, [pc, #340]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	4952      	ldr	r1, [pc, #328]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800491a:	4b4e      	ldr	r3, [pc, #312]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	494b      	ldr	r1, [pc, #300]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004928:	4313      	orrs	r3, r2
 800492a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004938:	4b46      	ldr	r3, [pc, #280]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	4943      	ldr	r1, [pc, #268]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004956:	4b3f      	ldr	r3, [pc, #252]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	493c      	ldr	r1, [pc, #240]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004974:	4b37      	ldr	r3, [pc, #220]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	4934      	ldr	r1, [pc, #208]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004982:	4313      	orrs	r3, r2
 8004984:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004992:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	492d      	ldr	r1, [pc, #180]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049b0:	4b28      	ldr	r3, [pc, #160]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	4925      	ldr	r1, [pc, #148]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049ce:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	491e      	ldr	r1, [pc, #120]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80049ec:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	4916      	ldr	r1, [pc, #88]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	490f      	ldr	r1, [pc, #60]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a34:	4907      	ldr	r1, [pc, #28]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00c      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004a46:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	e002      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
 8004a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5a:	4913      	ldr	r1, [pc, #76]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a78:	490b      	ldr	r1, [pc, #44]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d008      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a96:	4904      	ldr	r1, [pc, #16]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3748      	adds	r7, #72	; 0x48
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40021000 	.word	0x40021000

08004aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e049      	b.n	8004b52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc fdc2 	bl	800165c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f000 fa74 	bl	8004fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e049      	b.n	8004c00 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f841 	bl	8004c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3304      	adds	r3, #4
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f000 fa1d 	bl	8004fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e0ff      	b.n	8004e3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b14      	cmp	r3, #20
 8004c46:	f200 80f0 	bhi.w	8004e2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004ca5 	.word	0x08004ca5
 8004c54:	08004e2b 	.word	0x08004e2b
 8004c58:	08004e2b 	.word	0x08004e2b
 8004c5c:	08004e2b 	.word	0x08004e2b
 8004c60:	08004ce5 	.word	0x08004ce5
 8004c64:	08004e2b 	.word	0x08004e2b
 8004c68:	08004e2b 	.word	0x08004e2b
 8004c6c:	08004e2b 	.word	0x08004e2b
 8004c70:	08004d27 	.word	0x08004d27
 8004c74:	08004e2b 	.word	0x08004e2b
 8004c78:	08004e2b 	.word	0x08004e2b
 8004c7c:	08004e2b 	.word	0x08004e2b
 8004c80:	08004d67 	.word	0x08004d67
 8004c84:	08004e2b 	.word	0x08004e2b
 8004c88:	08004e2b 	.word	0x08004e2b
 8004c8c:	08004e2b 	.word	0x08004e2b
 8004c90:	08004da9 	.word	0x08004da9
 8004c94:	08004e2b 	.word	0x08004e2b
 8004c98:	08004e2b 	.word	0x08004e2b
 8004c9c:	08004e2b 	.word	0x08004e2b
 8004ca0:	08004de9 	.word	0x08004de9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fa32 	bl	8005114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0208 	orr.w	r2, r2, #8
 8004cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0204 	bic.w	r2, r2, #4
 8004cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6999      	ldr	r1, [r3, #24]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	619a      	str	r2, [r3, #24]
      break;
 8004ce2:	e0a5      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 faac 	bl	8005248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6999      	ldr	r1, [r3, #24]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	619a      	str	r2, [r3, #24]
      break;
 8004d24:	e084      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fb1f 	bl	8005370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0208 	orr.w	r2, r2, #8
 8004d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0204 	bic.w	r2, r2, #4
 8004d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	61da      	str	r2, [r3, #28]
      break;
 8004d64:	e064      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fb91 	bl	8005494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69d9      	ldr	r1, [r3, #28]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	021a      	lsls	r2, r3, #8
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	61da      	str	r2, [r3, #28]
      break;
 8004da6:	e043      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fbe0 	bl	8005574 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0208 	orr.w	r2, r2, #8
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0204 	bic.w	r2, r2, #4
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004de6:	e023      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fc2a 	bl	8005648 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	021a      	lsls	r2, r3, #8
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e28:	e002      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop

08004e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_TIM_ConfigClockSource+0x1c>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e0b6      	b.n	8004fce <HAL_TIM_ConfigClockSource+0x18a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9c:	d03e      	beq.n	8004f1c <HAL_TIM_ConfigClockSource+0xd8>
 8004e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea2:	f200 8087 	bhi.w	8004fb4 <HAL_TIM_ConfigClockSource+0x170>
 8004ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eaa:	f000 8086 	beq.w	8004fba <HAL_TIM_ConfigClockSource+0x176>
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb2:	d87f      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x170>
 8004eb4:	2b70      	cmp	r3, #112	; 0x70
 8004eb6:	d01a      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0xaa>
 8004eb8:	2b70      	cmp	r3, #112	; 0x70
 8004eba:	d87b      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x170>
 8004ebc:	2b60      	cmp	r3, #96	; 0x60
 8004ebe:	d050      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x11e>
 8004ec0:	2b60      	cmp	r3, #96	; 0x60
 8004ec2:	d877      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x170>
 8004ec4:	2b50      	cmp	r3, #80	; 0x50
 8004ec6:	d03c      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0xfe>
 8004ec8:	2b50      	cmp	r3, #80	; 0x50
 8004eca:	d873      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x170>
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	d058      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x13e>
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d86f      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x170>
 8004ed4:	2b30      	cmp	r3, #48	; 0x30
 8004ed6:	d064      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ed8:	2b30      	cmp	r3, #48	; 0x30
 8004eda:	d86b      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x170>
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d060      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d867      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x170>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d05c      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d05a      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8004eec:	e062      	b.n	8004fb4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6899      	ldr	r1, [r3, #8]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f000 fc89 	bl	8005814 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	609a      	str	r2, [r3, #8]
      break;
 8004f1a:	e04f      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	6899      	ldr	r1, [r3, #8]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f000 fc72 	bl	8005814 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f3e:	609a      	str	r2, [r3, #8]
      break;
 8004f40:	e03c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6859      	ldr	r1, [r3, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f000 fbe6 	bl	8005720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2150      	movs	r1, #80	; 0x50
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fc3f 	bl	80057de <TIM_ITRx_SetConfig>
      break;
 8004f60:	e02c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6859      	ldr	r1, [r3, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f000 fc05 	bl	800577e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2160      	movs	r1, #96	; 0x60
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fc2f 	bl	80057de <TIM_ITRx_SetConfig>
      break;
 8004f80:	e01c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6859      	ldr	r1, [r3, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f000 fbc6 	bl	8005720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2140      	movs	r1, #64	; 0x40
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fc1f 	bl	80057de <TIM_ITRx_SetConfig>
      break;
 8004fa0:	e00c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4619      	mov	r1, r3
 8004fac:	4610      	mov	r0, r2
 8004fae:	f000 fc16 	bl	80057de <TIM_ITRx_SetConfig>
      break;
 8004fb2:	e003      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb8:	e000      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004fba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a42      	ldr	r2, [pc, #264]	; (80050f4 <TIM_Base_SetConfig+0x11c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d013      	beq.n	8005018 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff6:	d00f      	beq.n	8005018 <TIM_Base_SetConfig+0x40>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a3f      	ldr	r2, [pc, #252]	; (80050f8 <TIM_Base_SetConfig+0x120>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <TIM_Base_SetConfig+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a3e      	ldr	r2, [pc, #248]	; (80050fc <TIM_Base_SetConfig+0x124>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d007      	beq.n	8005018 <TIM_Base_SetConfig+0x40>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a3d      	ldr	r2, [pc, #244]	; (8005100 <TIM_Base_SetConfig+0x128>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_Base_SetConfig+0x40>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a3c      	ldr	r2, [pc, #240]	; (8005104 <TIM_Base_SetConfig+0x12c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d108      	bne.n	800502a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a31      	ldr	r2, [pc, #196]	; (80050f4 <TIM_Base_SetConfig+0x11c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d01f      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005038:	d01b      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2e      	ldr	r2, [pc, #184]	; (80050f8 <TIM_Base_SetConfig+0x120>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d017      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a2d      	ldr	r2, [pc, #180]	; (80050fc <TIM_Base_SetConfig+0x124>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a2c      	ldr	r2, [pc, #176]	; (8005100 <TIM_Base_SetConfig+0x128>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00f      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a2c      	ldr	r2, [pc, #176]	; (8005108 <TIM_Base_SetConfig+0x130>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00b      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a2b      	ldr	r2, [pc, #172]	; (800510c <TIM_Base_SetConfig+0x134>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a2a      	ldr	r2, [pc, #168]	; (8005110 <TIM_Base_SetConfig+0x138>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d003      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a25      	ldr	r2, [pc, #148]	; (8005104 <TIM_Base_SetConfig+0x12c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d108      	bne.n	8005084 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a12      	ldr	r2, [pc, #72]	; (80050f4 <TIM_Base_SetConfig+0x11c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d013      	beq.n	80050d8 <TIM_Base_SetConfig+0x100>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a13      	ldr	r2, [pc, #76]	; (8005100 <TIM_Base_SetConfig+0x128>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00f      	beq.n	80050d8 <TIM_Base_SetConfig+0x100>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a13      	ldr	r2, [pc, #76]	; (8005108 <TIM_Base_SetConfig+0x130>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <TIM_Base_SetConfig+0x100>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a12      	ldr	r2, [pc, #72]	; (800510c <TIM_Base_SetConfig+0x134>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_Base_SetConfig+0x100>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a11      	ldr	r2, [pc, #68]	; (8005110 <TIM_Base_SetConfig+0x138>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_Base_SetConfig+0x100>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a0c      	ldr	r2, [pc, #48]	; (8005104 <TIM_Base_SetConfig+0x12c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d103      	bne.n	80050e0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	615a      	str	r2, [r3, #20]
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40013400 	.word	0x40013400
 8005104:	40015000 	.word	0x40015000
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800

08005114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f023 0201 	bic.w	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0303 	bic.w	r3, r3, #3
 800514e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f023 0302 	bic.w	r3, r3, #2
 8005160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a30      	ldr	r2, [pc, #192]	; (8005230 <TIM_OC1_SetConfig+0x11c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d013      	beq.n	800519c <TIM_OC1_SetConfig+0x88>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a2f      	ldr	r2, [pc, #188]	; (8005234 <TIM_OC1_SetConfig+0x120>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00f      	beq.n	800519c <TIM_OC1_SetConfig+0x88>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a2e      	ldr	r2, [pc, #184]	; (8005238 <TIM_OC1_SetConfig+0x124>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00b      	beq.n	800519c <TIM_OC1_SetConfig+0x88>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a2d      	ldr	r2, [pc, #180]	; (800523c <TIM_OC1_SetConfig+0x128>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d007      	beq.n	800519c <TIM_OC1_SetConfig+0x88>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a2c      	ldr	r2, [pc, #176]	; (8005240 <TIM_OC1_SetConfig+0x12c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d003      	beq.n	800519c <TIM_OC1_SetConfig+0x88>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a2b      	ldr	r2, [pc, #172]	; (8005244 <TIM_OC1_SetConfig+0x130>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d10c      	bne.n	80051b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f023 0308 	bic.w	r3, r3, #8
 80051a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f023 0304 	bic.w	r3, r3, #4
 80051b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a1d      	ldr	r2, [pc, #116]	; (8005230 <TIM_OC1_SetConfig+0x11c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <TIM_OC1_SetConfig+0xd2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <TIM_OC1_SetConfig+0x120>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00f      	beq.n	80051e6 <TIM_OC1_SetConfig+0xd2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <TIM_OC1_SetConfig+0x124>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00b      	beq.n	80051e6 <TIM_OC1_SetConfig+0xd2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1a      	ldr	r2, [pc, #104]	; (800523c <TIM_OC1_SetConfig+0x128>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d007      	beq.n	80051e6 <TIM_OC1_SetConfig+0xd2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a19      	ldr	r2, [pc, #100]	; (8005240 <TIM_OC1_SetConfig+0x12c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_OC1_SetConfig+0xd2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a18      	ldr	r2, [pc, #96]	; (8005244 <TIM_OC1_SetConfig+0x130>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d111      	bne.n	800520a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	621a      	str	r2, [r3, #32]
}
 8005224:	bf00      	nop
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40013400 	.word	0x40013400
 8005238:	40014000 	.word	0x40014000
 800523c:	40014400 	.word	0x40014400
 8005240:	40014800 	.word	0x40014800
 8005244:	40015000 	.word	0x40015000

08005248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0210 	bic.w	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0320 	bic.w	r3, r3, #32
 8005296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a2c      	ldr	r2, [pc, #176]	; (8005358 <TIM_OC2_SetConfig+0x110>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <TIM_OC2_SetConfig+0x74>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a2b      	ldr	r2, [pc, #172]	; (800535c <TIM_OC2_SetConfig+0x114>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_OC2_SetConfig+0x74>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <TIM_OC2_SetConfig+0x118>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10d      	bne.n	80052d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <TIM_OC2_SetConfig+0x110>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <TIM_OC2_SetConfig+0xc0>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a1e      	ldr	r2, [pc, #120]	; (800535c <TIM_OC2_SetConfig+0x114>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00f      	beq.n	8005308 <TIM_OC2_SetConfig+0xc0>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a1e      	ldr	r2, [pc, #120]	; (8005364 <TIM_OC2_SetConfig+0x11c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00b      	beq.n	8005308 <TIM_OC2_SetConfig+0xc0>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <TIM_OC2_SetConfig+0x120>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d007      	beq.n	8005308 <TIM_OC2_SetConfig+0xc0>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a1c      	ldr	r2, [pc, #112]	; (800536c <TIM_OC2_SetConfig+0x124>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_OC2_SetConfig+0xc0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a17      	ldr	r2, [pc, #92]	; (8005360 <TIM_OC2_SetConfig+0x118>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d113      	bne.n	8005330 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800530e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005316:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40013400 	.word	0x40013400
 8005360:	40015000 	.word	0x40015000
 8005364:	40014000 	.word	0x40014000
 8005368:	40014400 	.word	0x40014400
 800536c:	40014800 	.word	0x40014800

08005370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2b      	ldr	r2, [pc, #172]	; (800547c <TIM_OC3_SetConfig+0x10c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d007      	beq.n	80053e2 <TIM_OC3_SetConfig+0x72>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2a      	ldr	r2, [pc, #168]	; (8005480 <TIM_OC3_SetConfig+0x110>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d003      	beq.n	80053e2 <TIM_OC3_SetConfig+0x72>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a29      	ldr	r2, [pc, #164]	; (8005484 <TIM_OC3_SetConfig+0x114>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d10d      	bne.n	80053fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053fc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a1e      	ldr	r2, [pc, #120]	; (800547c <TIM_OC3_SetConfig+0x10c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <TIM_OC3_SetConfig+0xbe>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <TIM_OC3_SetConfig+0x110>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00f      	beq.n	800542e <TIM_OC3_SetConfig+0xbe>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a1d      	ldr	r2, [pc, #116]	; (8005488 <TIM_OC3_SetConfig+0x118>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00b      	beq.n	800542e <TIM_OC3_SetConfig+0xbe>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a1c      	ldr	r2, [pc, #112]	; (800548c <TIM_OC3_SetConfig+0x11c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d007      	beq.n	800542e <TIM_OC3_SetConfig+0xbe>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a1b      	ldr	r2, [pc, #108]	; (8005490 <TIM_OC3_SetConfig+0x120>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_OC3_SetConfig+0xbe>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a16      	ldr	r2, [pc, #88]	; (8005484 <TIM_OC3_SetConfig+0x114>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d113      	bne.n	8005456 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800543c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	621a      	str	r2, [r3, #32]
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40013400 	.word	0x40013400
 8005484:	40015000 	.word	0x40015000
 8005488:	40014000 	.word	0x40014000
 800548c:	40014400 	.word	0x40014400
 8005490:	40014800 	.word	0x40014800

08005494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	031b      	lsls	r3, r3, #12
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a1a      	ldr	r2, [pc, #104]	; (800555c <TIM_OC4_SetConfig+0xc8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <TIM_OC4_SetConfig+0x8c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a19      	ldr	r2, [pc, #100]	; (8005560 <TIM_OC4_SetConfig+0xcc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00f      	beq.n	8005520 <TIM_OC4_SetConfig+0x8c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a18      	ldr	r2, [pc, #96]	; (8005564 <TIM_OC4_SetConfig+0xd0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00b      	beq.n	8005520 <TIM_OC4_SetConfig+0x8c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <TIM_OC4_SetConfig+0xd4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d007      	beq.n	8005520 <TIM_OC4_SetConfig+0x8c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a16      	ldr	r2, [pc, #88]	; (800556c <TIM_OC4_SetConfig+0xd8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_OC4_SetConfig+0x8c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <TIM_OC4_SetConfig+0xdc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d109      	bne.n	8005534 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	019b      	lsls	r3, r3, #6
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40013400 	.word	0x40013400
 8005564:	40014000 	.word	0x40014000
 8005568:	40014400 	.word	0x40014400
 800556c:	40014800 	.word	0x40014800
 8005570:	40015000 	.word	0x40015000

08005574 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	041b      	lsls	r3, r3, #16
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a19      	ldr	r2, [pc, #100]	; (8005630 <TIM_OC5_SetConfig+0xbc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d013      	beq.n	80055f6 <TIM_OC5_SetConfig+0x82>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a18      	ldr	r2, [pc, #96]	; (8005634 <TIM_OC5_SetConfig+0xc0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00f      	beq.n	80055f6 <TIM_OC5_SetConfig+0x82>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a17      	ldr	r2, [pc, #92]	; (8005638 <TIM_OC5_SetConfig+0xc4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00b      	beq.n	80055f6 <TIM_OC5_SetConfig+0x82>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a16      	ldr	r2, [pc, #88]	; (800563c <TIM_OC5_SetConfig+0xc8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d007      	beq.n	80055f6 <TIM_OC5_SetConfig+0x82>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a15      	ldr	r2, [pc, #84]	; (8005640 <TIM_OC5_SetConfig+0xcc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_OC5_SetConfig+0x82>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a14      	ldr	r2, [pc, #80]	; (8005644 <TIM_OC5_SetConfig+0xd0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d109      	bne.n	800560a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	621a      	str	r2, [r3, #32]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	40012c00 	.word	0x40012c00
 8005634:	40013400 	.word	0x40013400
 8005638:	40014000 	.word	0x40014000
 800563c:	40014400 	.word	0x40014400
 8005640:	40014800 	.word	0x40014800
 8005644:	40015000 	.word	0x40015000

08005648 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800568e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	051b      	lsls	r3, r3, #20
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a1a      	ldr	r2, [pc, #104]	; (8005708 <TIM_OC6_SetConfig+0xc0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <TIM_OC6_SetConfig+0x84>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a19      	ldr	r2, [pc, #100]	; (800570c <TIM_OC6_SetConfig+0xc4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00f      	beq.n	80056cc <TIM_OC6_SetConfig+0x84>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a18      	ldr	r2, [pc, #96]	; (8005710 <TIM_OC6_SetConfig+0xc8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00b      	beq.n	80056cc <TIM_OC6_SetConfig+0x84>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a17      	ldr	r2, [pc, #92]	; (8005714 <TIM_OC6_SetConfig+0xcc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_OC6_SetConfig+0x84>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a16      	ldr	r2, [pc, #88]	; (8005718 <TIM_OC6_SetConfig+0xd0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC6_SetConfig+0x84>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a15      	ldr	r2, [pc, #84]	; (800571c <TIM_OC6_SetConfig+0xd4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	029b      	lsls	r3, r3, #10
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40013400 	.word	0x40013400
 8005710:	40014000 	.word	0x40014000
 8005714:	40014400 	.word	0x40014400
 8005718:	40014800 	.word	0x40014800
 800571c:	40015000 	.word	0x40015000

08005720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 0201 	bic.w	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800574a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f023 030a 	bic.w	r3, r3, #10
 800575c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800577e:	b480      	push	{r7}
 8005780:	b087      	sub	sp, #28
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	f023 0210 	bic.w	r2, r3, #16
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	031b      	lsls	r3, r3, #12
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057de:	b480      	push	{r7}
 80057e0:	b085      	sub	sp, #20
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f043 0307 	orr.w	r3, r3, #7
 8005800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	609a      	str	r2, [r3, #8]
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	021a      	lsls	r2, r3, #8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	431a      	orrs	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005868:	2302      	movs	r3, #2
 800586a:	e06d      	b.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a30      	ldr	r2, [pc, #192]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d009      	beq.n	80058aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2f      	ldr	r2, [pc, #188]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d004      	beq.n	80058aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a2d      	ldr	r2, [pc, #180]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d108      	bne.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1e      	ldr	r2, [pc, #120]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d01d      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e8:	d018      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1a      	ldr	r2, [pc, #104]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a15      	ldr	r2, [pc, #84]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a16      	ldr	r2, [pc, #88]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a11      	ldr	r2, [pc, #68]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10c      	bne.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005922:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40012c00 	.word	0x40012c00
 8005958:	40013400 	.word	0x40013400
 800595c:	40015000 	.word	0x40015000
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800
 8005968:	40014000 	.word	0x40014000

0800596c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e040      	b.n	8005a00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fb febc 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2224      	movs	r2, #36	; 0x24
 8005998:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f82c 	bl	8005a08 <UART_SetConfig>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e022      	b.n	8005a00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f9f6 	bl	8005db4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fa7d 	bl	8005ef8 <UART_CheckIdleState>
 80059fe:	4603      	mov	r3, r0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	4b92      	ldr	r3, [pc, #584]	; (8005c7c <UART_SetConfig+0x274>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	6979      	ldr	r1, [r7, #20]
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a80      	ldr	r2, [pc, #512]	; (8005c80 <UART_SetConfig+0x278>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d120      	bne.n	8005ac6 <UART_SetConfig+0xbe>
 8005a84:	4b7f      	ldr	r3, [pc, #508]	; (8005c84 <UART_SetConfig+0x27c>)
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d817      	bhi.n	8005ac0 <UART_SetConfig+0xb8>
 8005a90:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <UART_SetConfig+0x90>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005aa9 	.word	0x08005aa9
 8005a9c:	08005ab5 	.word	0x08005ab5
 8005aa0:	08005abb 	.word	0x08005abb
 8005aa4:	08005aaf 	.word	0x08005aaf
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	77fb      	strb	r3, [r7, #31]
 8005aac:	e0b5      	b.n	8005c1a <UART_SetConfig+0x212>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	77fb      	strb	r3, [r7, #31]
 8005ab2:	e0b2      	b.n	8005c1a <UART_SetConfig+0x212>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e0af      	b.n	8005c1a <UART_SetConfig+0x212>
 8005aba:	2308      	movs	r3, #8
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e0ac      	b.n	8005c1a <UART_SetConfig+0x212>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e0a9      	b.n	8005c1a <UART_SetConfig+0x212>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a6f      	ldr	r2, [pc, #444]	; (8005c88 <UART_SetConfig+0x280>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d124      	bne.n	8005b1a <UART_SetConfig+0x112>
 8005ad0:	4b6c      	ldr	r3, [pc, #432]	; (8005c84 <UART_SetConfig+0x27c>)
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ad8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005adc:	d011      	beq.n	8005b02 <UART_SetConfig+0xfa>
 8005ade:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ae2:	d817      	bhi.n	8005b14 <UART_SetConfig+0x10c>
 8005ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ae8:	d011      	beq.n	8005b0e <UART_SetConfig+0x106>
 8005aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aee:	d811      	bhi.n	8005b14 <UART_SetConfig+0x10c>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <UART_SetConfig+0xf4>
 8005af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af8:	d006      	beq.n	8005b08 <UART_SetConfig+0x100>
 8005afa:	e00b      	b.n	8005b14 <UART_SetConfig+0x10c>
 8005afc:	2300      	movs	r3, #0
 8005afe:	77fb      	strb	r3, [r7, #31]
 8005b00:	e08b      	b.n	8005c1a <UART_SetConfig+0x212>
 8005b02:	2302      	movs	r3, #2
 8005b04:	77fb      	strb	r3, [r7, #31]
 8005b06:	e088      	b.n	8005c1a <UART_SetConfig+0x212>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e085      	b.n	8005c1a <UART_SetConfig+0x212>
 8005b0e:	2308      	movs	r3, #8
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e082      	b.n	8005c1a <UART_SetConfig+0x212>
 8005b14:	2310      	movs	r3, #16
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e07f      	b.n	8005c1a <UART_SetConfig+0x212>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a5b      	ldr	r2, [pc, #364]	; (8005c8c <UART_SetConfig+0x284>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d124      	bne.n	8005b6e <UART_SetConfig+0x166>
 8005b24:	4b57      	ldr	r3, [pc, #348]	; (8005c84 <UART_SetConfig+0x27c>)
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b30:	d011      	beq.n	8005b56 <UART_SetConfig+0x14e>
 8005b32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b36:	d817      	bhi.n	8005b68 <UART_SetConfig+0x160>
 8005b38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b3c:	d011      	beq.n	8005b62 <UART_SetConfig+0x15a>
 8005b3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b42:	d811      	bhi.n	8005b68 <UART_SetConfig+0x160>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <UART_SetConfig+0x148>
 8005b48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b4c:	d006      	beq.n	8005b5c <UART_SetConfig+0x154>
 8005b4e:	e00b      	b.n	8005b68 <UART_SetConfig+0x160>
 8005b50:	2300      	movs	r3, #0
 8005b52:	77fb      	strb	r3, [r7, #31]
 8005b54:	e061      	b.n	8005c1a <UART_SetConfig+0x212>
 8005b56:	2302      	movs	r3, #2
 8005b58:	77fb      	strb	r3, [r7, #31]
 8005b5a:	e05e      	b.n	8005c1a <UART_SetConfig+0x212>
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e05b      	b.n	8005c1a <UART_SetConfig+0x212>
 8005b62:	2308      	movs	r3, #8
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e058      	b.n	8005c1a <UART_SetConfig+0x212>
 8005b68:	2310      	movs	r3, #16
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e055      	b.n	8005c1a <UART_SetConfig+0x212>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a47      	ldr	r2, [pc, #284]	; (8005c90 <UART_SetConfig+0x288>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d124      	bne.n	8005bc2 <UART_SetConfig+0x1ba>
 8005b78:	4b42      	ldr	r3, [pc, #264]	; (8005c84 <UART_SetConfig+0x27c>)
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005b80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b84:	d011      	beq.n	8005baa <UART_SetConfig+0x1a2>
 8005b86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b8a:	d817      	bhi.n	8005bbc <UART_SetConfig+0x1b4>
 8005b8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b90:	d011      	beq.n	8005bb6 <UART_SetConfig+0x1ae>
 8005b92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b96:	d811      	bhi.n	8005bbc <UART_SetConfig+0x1b4>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <UART_SetConfig+0x19c>
 8005b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba0:	d006      	beq.n	8005bb0 <UART_SetConfig+0x1a8>
 8005ba2:	e00b      	b.n	8005bbc <UART_SetConfig+0x1b4>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e037      	b.n	8005c1a <UART_SetConfig+0x212>
 8005baa:	2302      	movs	r3, #2
 8005bac:	77fb      	strb	r3, [r7, #31]
 8005bae:	e034      	b.n	8005c1a <UART_SetConfig+0x212>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e031      	b.n	8005c1a <UART_SetConfig+0x212>
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e02e      	b.n	8005c1a <UART_SetConfig+0x212>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e02b      	b.n	8005c1a <UART_SetConfig+0x212>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a33      	ldr	r2, [pc, #204]	; (8005c94 <UART_SetConfig+0x28c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d124      	bne.n	8005c16 <UART_SetConfig+0x20e>
 8005bcc:	4b2d      	ldr	r3, [pc, #180]	; (8005c84 <UART_SetConfig+0x27c>)
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005bd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bd8:	d011      	beq.n	8005bfe <UART_SetConfig+0x1f6>
 8005bda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bde:	d817      	bhi.n	8005c10 <UART_SetConfig+0x208>
 8005be0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005be4:	d011      	beq.n	8005c0a <UART_SetConfig+0x202>
 8005be6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bea:	d811      	bhi.n	8005c10 <UART_SetConfig+0x208>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <UART_SetConfig+0x1f0>
 8005bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bf4:	d006      	beq.n	8005c04 <UART_SetConfig+0x1fc>
 8005bf6:	e00b      	b.n	8005c10 <UART_SetConfig+0x208>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	77fb      	strb	r3, [r7, #31]
 8005bfc:	e00d      	b.n	8005c1a <UART_SetConfig+0x212>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	77fb      	strb	r3, [r7, #31]
 8005c02:	e00a      	b.n	8005c1a <UART_SetConfig+0x212>
 8005c04:	2304      	movs	r3, #4
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e007      	b.n	8005c1a <UART_SetConfig+0x212>
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e004      	b.n	8005c1a <UART_SetConfig+0x212>
 8005c10:	2310      	movs	r3, #16
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e001      	b.n	8005c1a <UART_SetConfig+0x212>
 8005c16:	2310      	movs	r3, #16
 8005c18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c22:	d16c      	bne.n	8005cfe <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8005c24:	7ffb      	ldrb	r3, [r7, #31]
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d838      	bhi.n	8005c9c <UART_SetConfig+0x294>
 8005c2a:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <UART_SetConfig+0x228>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005c55 	.word	0x08005c55
 8005c34:	08005c5d 	.word	0x08005c5d
 8005c38:	08005c65 	.word	0x08005c65
 8005c3c:	08005c9d 	.word	0x08005c9d
 8005c40:	08005c6b 	.word	0x08005c6b
 8005c44:	08005c9d 	.word	0x08005c9d
 8005c48:	08005c9d 	.word	0x08005c9d
 8005c4c:	08005c9d 	.word	0x08005c9d
 8005c50:	08005c73 	.word	0x08005c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c54:	f7fe fcc8 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8005c58:	61b8      	str	r0, [r7, #24]
        break;
 8005c5a:	e024      	b.n	8005ca6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c5c:	f7fe fce6 	bl	800462c <HAL_RCC_GetPCLK2Freq>
 8005c60:	61b8      	str	r0, [r7, #24]
        break;
 8005c62:	e020      	b.n	8005ca6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c64:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <UART_SetConfig+0x290>)
 8005c66:	61bb      	str	r3, [r7, #24]
        break;
 8005c68:	e01d      	b.n	8005ca6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c6a:	f7fe fc47 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 8005c6e:	61b8      	str	r0, [r7, #24]
        break;
 8005c70:	e019      	b.n	8005ca6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c76:	61bb      	str	r3, [r7, #24]
        break;
 8005c78:	e015      	b.n	8005ca6 <UART_SetConfig+0x29e>
 8005c7a:	bf00      	nop
 8005c7c:	efff69f3 	.word	0xefff69f3
 8005c80:	40013800 	.word	0x40013800
 8005c84:	40021000 	.word	0x40021000
 8005c88:	40004400 	.word	0x40004400
 8005c8c:	40004800 	.word	0x40004800
 8005c90:	40004c00 	.word	0x40004c00
 8005c94:	40005000 	.word	0x40005000
 8005c98:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	77bb      	strb	r3, [r7, #30]
        break;
 8005ca4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d075      	beq.n	8005d98 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	005a      	lsls	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	441a      	add	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	2b0f      	cmp	r3, #15
 8005cc8:	d916      	bls.n	8005cf8 <UART_SetConfig+0x2f0>
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd0:	d212      	bcs.n	8005cf8 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f023 030f 	bic.w	r3, r3, #15
 8005cda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	89fb      	ldrh	r3, [r7, #14]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	89fa      	ldrh	r2, [r7, #14]
 8005cf4:	60da      	str	r2, [r3, #12]
 8005cf6:	e04f      	b.n	8005d98 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	77bb      	strb	r3, [r7, #30]
 8005cfc:	e04c      	b.n	8005d98 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cfe:	7ffb      	ldrb	r3, [r7, #31]
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d828      	bhi.n	8005d56 <UART_SetConfig+0x34e>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <UART_SetConfig+0x304>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d39 	.word	0x08005d39
 8005d14:	08005d41 	.word	0x08005d41
 8005d18:	08005d57 	.word	0x08005d57
 8005d1c:	08005d47 	.word	0x08005d47
 8005d20:	08005d57 	.word	0x08005d57
 8005d24:	08005d57 	.word	0x08005d57
 8005d28:	08005d57 	.word	0x08005d57
 8005d2c:	08005d4f 	.word	0x08005d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7fe fc5a 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8005d34:	61b8      	str	r0, [r7, #24]
        break;
 8005d36:	e013      	b.n	8005d60 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d38:	f7fe fc78 	bl	800462c <HAL_RCC_GetPCLK2Freq>
 8005d3c:	61b8      	str	r0, [r7, #24]
        break;
 8005d3e:	e00f      	b.n	8005d60 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d40:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <UART_SetConfig+0x3a8>)
 8005d42:	61bb      	str	r3, [r7, #24]
        break;
 8005d44:	e00c      	b.n	8005d60 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d46:	f7fe fbd9 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 8005d4a:	61b8      	str	r0, [r7, #24]
        break;
 8005d4c:	e008      	b.n	8005d60 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d52:	61bb      	str	r3, [r7, #24]
        break;
 8005d54:	e004      	b.n	8005d60 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d5e:	bf00      	nop
    }

    if (pclk != 0U)
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d018      	beq.n	8005d98 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	085a      	lsrs	r2, r3, #1
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	441a      	add	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	d908      	bls.n	8005d94 <UART_SetConfig+0x38c>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d88:	d204      	bcs.n	8005d94 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	e001      	b.n	8005d98 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005da4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	007a1200 	.word	0x007a1200

08005db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01a      	beq.n	8005eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb2:	d10a      	bne.n	8005eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]
  }
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f08:	f7fb fdde 	bl	8001ac8 <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d10e      	bne.n	8005f3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f82d 	bl	8005f8a <UART_WaitOnFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e023      	b.n	8005f82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d10e      	bne.n	8005f66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f817 	bl	8005f8a <UART_WaitOnFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e00d      	b.n	8005f82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b09c      	sub	sp, #112	; 0x70
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	4613      	mov	r3, r2
 8005f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f9a:	e0a5      	b.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa2:	f000 80a1 	beq.w	80060e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa6:	f7fb fd8f 	bl	8001ac8 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d302      	bcc.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x32>
 8005fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d13e      	bne.n	800603a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fe0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e6      	bne.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	f023 0301 	bic.w	r3, r3, #1
 8006004:	663b      	str	r3, [r7, #96]	; 0x60
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3308      	adds	r3, #8
 800600c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800600e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006010:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800601c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e5      	bne.n	8005fee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e067      	b.n	800610a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d04f      	beq.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006056:	d147      	bne.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006060:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006076:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006080:	637b      	str	r3, [r7, #52]	; 0x34
 8006082:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e6      	bne.n	8006062 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3308      	adds	r3, #8
 800609a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	613b      	str	r3, [r7, #16]
   return(result);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3308      	adds	r3, #8
 80060b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060b4:	623a      	str	r2, [r7, #32]
 80060b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	69f9      	ldr	r1, [r7, #28]
 80060ba:	6a3a      	ldr	r2, [r7, #32]
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e5      	bne.n	8006094 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e010      	b.n	800610a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69da      	ldr	r2, [r3, #28]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	4013      	ands	r3, r2
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	bf0c      	ite	eq
 80060f8:	2301      	moveq	r3, #1
 80060fa:	2300      	movne	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	429a      	cmp	r2, r3
 8006104:	f43f af4a 	beq.w	8005f9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3770      	adds	r7, #112	; 0x70
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <__errno>:
 8006114:	4b01      	ldr	r3, [pc, #4]	; (800611c <__errno+0x8>)
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	2000000c 	.word	0x2000000c

08006120 <__libc_init_array>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	4d0d      	ldr	r5, [pc, #52]	; (8006158 <__libc_init_array+0x38>)
 8006124:	4c0d      	ldr	r4, [pc, #52]	; (800615c <__libc_init_array+0x3c>)
 8006126:	1b64      	subs	r4, r4, r5
 8006128:	10a4      	asrs	r4, r4, #2
 800612a:	2600      	movs	r6, #0
 800612c:	42a6      	cmp	r6, r4
 800612e:	d109      	bne.n	8006144 <__libc_init_array+0x24>
 8006130:	4d0b      	ldr	r5, [pc, #44]	; (8006160 <__libc_init_array+0x40>)
 8006132:	4c0c      	ldr	r4, [pc, #48]	; (8006164 <__libc_init_array+0x44>)
 8006134:	f004 fc8c 	bl	800aa50 <_init>
 8006138:	1b64      	subs	r4, r4, r5
 800613a:	10a4      	asrs	r4, r4, #2
 800613c:	2600      	movs	r6, #0
 800613e:	42a6      	cmp	r6, r4
 8006140:	d105      	bne.n	800614e <__libc_init_array+0x2e>
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	f855 3b04 	ldr.w	r3, [r5], #4
 8006148:	4798      	blx	r3
 800614a:	3601      	adds	r6, #1
 800614c:	e7ee      	b.n	800612c <__libc_init_array+0xc>
 800614e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006152:	4798      	blx	r3
 8006154:	3601      	adds	r6, #1
 8006156:	e7f2      	b.n	800613e <__libc_init_array+0x1e>
 8006158:	0800af44 	.word	0x0800af44
 800615c:	0800af44 	.word	0x0800af44
 8006160:	0800af44 	.word	0x0800af44
 8006164:	0800af48 	.word	0x0800af48

08006168 <malloc>:
 8006168:	4b02      	ldr	r3, [pc, #8]	; (8006174 <malloc+0xc>)
 800616a:	4601      	mov	r1, r0
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	f000 b877 	b.w	8006260 <_malloc_r>
 8006172:	bf00      	nop
 8006174:	2000000c 	.word	0x2000000c

08006178 <memset>:
 8006178:	4402      	add	r2, r0
 800617a:	4603      	mov	r3, r0
 800617c:	4293      	cmp	r3, r2
 800617e:	d100      	bne.n	8006182 <memset+0xa>
 8006180:	4770      	bx	lr
 8006182:	f803 1b01 	strb.w	r1, [r3], #1
 8006186:	e7f9      	b.n	800617c <memset+0x4>

08006188 <_free_r>:
 8006188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800618a:	2900      	cmp	r1, #0
 800618c:	d044      	beq.n	8006218 <_free_r+0x90>
 800618e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006192:	9001      	str	r0, [sp, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f1a1 0404 	sub.w	r4, r1, #4
 800619a:	bfb8      	it	lt
 800619c:	18e4      	addlt	r4, r4, r3
 800619e:	f003 f83d 	bl	800921c <__malloc_lock>
 80061a2:	4a1e      	ldr	r2, [pc, #120]	; (800621c <_free_r+0x94>)
 80061a4:	9801      	ldr	r0, [sp, #4]
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	b933      	cbnz	r3, 80061b8 <_free_r+0x30>
 80061aa:	6063      	str	r3, [r4, #4]
 80061ac:	6014      	str	r4, [r2, #0]
 80061ae:	b003      	add	sp, #12
 80061b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061b4:	f003 b838 	b.w	8009228 <__malloc_unlock>
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	d908      	bls.n	80061ce <_free_r+0x46>
 80061bc:	6825      	ldr	r5, [r4, #0]
 80061be:	1961      	adds	r1, r4, r5
 80061c0:	428b      	cmp	r3, r1
 80061c2:	bf01      	itttt	eq
 80061c4:	6819      	ldreq	r1, [r3, #0]
 80061c6:	685b      	ldreq	r3, [r3, #4]
 80061c8:	1949      	addeq	r1, r1, r5
 80061ca:	6021      	streq	r1, [r4, #0]
 80061cc:	e7ed      	b.n	80061aa <_free_r+0x22>
 80061ce:	461a      	mov	r2, r3
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	b10b      	cbz	r3, 80061d8 <_free_r+0x50>
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	d9fa      	bls.n	80061ce <_free_r+0x46>
 80061d8:	6811      	ldr	r1, [r2, #0]
 80061da:	1855      	adds	r5, r2, r1
 80061dc:	42a5      	cmp	r5, r4
 80061de:	d10b      	bne.n	80061f8 <_free_r+0x70>
 80061e0:	6824      	ldr	r4, [r4, #0]
 80061e2:	4421      	add	r1, r4
 80061e4:	1854      	adds	r4, r2, r1
 80061e6:	42a3      	cmp	r3, r4
 80061e8:	6011      	str	r1, [r2, #0]
 80061ea:	d1e0      	bne.n	80061ae <_free_r+0x26>
 80061ec:	681c      	ldr	r4, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	6053      	str	r3, [r2, #4]
 80061f2:	4421      	add	r1, r4
 80061f4:	6011      	str	r1, [r2, #0]
 80061f6:	e7da      	b.n	80061ae <_free_r+0x26>
 80061f8:	d902      	bls.n	8006200 <_free_r+0x78>
 80061fa:	230c      	movs	r3, #12
 80061fc:	6003      	str	r3, [r0, #0]
 80061fe:	e7d6      	b.n	80061ae <_free_r+0x26>
 8006200:	6825      	ldr	r5, [r4, #0]
 8006202:	1961      	adds	r1, r4, r5
 8006204:	428b      	cmp	r3, r1
 8006206:	bf04      	itt	eq
 8006208:	6819      	ldreq	r1, [r3, #0]
 800620a:	685b      	ldreq	r3, [r3, #4]
 800620c:	6063      	str	r3, [r4, #4]
 800620e:	bf04      	itt	eq
 8006210:	1949      	addeq	r1, r1, r5
 8006212:	6021      	streq	r1, [r4, #0]
 8006214:	6054      	str	r4, [r2, #4]
 8006216:	e7ca      	b.n	80061ae <_free_r+0x26>
 8006218:	b003      	add	sp, #12
 800621a:	bd30      	pop	{r4, r5, pc}
 800621c:	2000044c 	.word	0x2000044c

08006220 <sbrk_aligned>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	4e0e      	ldr	r6, [pc, #56]	; (800625c <sbrk_aligned+0x3c>)
 8006224:	460c      	mov	r4, r1
 8006226:	6831      	ldr	r1, [r6, #0]
 8006228:	4605      	mov	r5, r0
 800622a:	b911      	cbnz	r1, 8006232 <sbrk_aligned+0x12>
 800622c:	f000 ff06 	bl	800703c <_sbrk_r>
 8006230:	6030      	str	r0, [r6, #0]
 8006232:	4621      	mov	r1, r4
 8006234:	4628      	mov	r0, r5
 8006236:	f000 ff01 	bl	800703c <_sbrk_r>
 800623a:	1c43      	adds	r3, r0, #1
 800623c:	d00a      	beq.n	8006254 <sbrk_aligned+0x34>
 800623e:	1cc4      	adds	r4, r0, #3
 8006240:	f024 0403 	bic.w	r4, r4, #3
 8006244:	42a0      	cmp	r0, r4
 8006246:	d007      	beq.n	8006258 <sbrk_aligned+0x38>
 8006248:	1a21      	subs	r1, r4, r0
 800624a:	4628      	mov	r0, r5
 800624c:	f000 fef6 	bl	800703c <_sbrk_r>
 8006250:	3001      	adds	r0, #1
 8006252:	d101      	bne.n	8006258 <sbrk_aligned+0x38>
 8006254:	f04f 34ff 	mov.w	r4, #4294967295
 8006258:	4620      	mov	r0, r4
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	20000450 	.word	0x20000450

08006260 <_malloc_r>:
 8006260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006264:	1ccd      	adds	r5, r1, #3
 8006266:	f025 0503 	bic.w	r5, r5, #3
 800626a:	3508      	adds	r5, #8
 800626c:	2d0c      	cmp	r5, #12
 800626e:	bf38      	it	cc
 8006270:	250c      	movcc	r5, #12
 8006272:	2d00      	cmp	r5, #0
 8006274:	4607      	mov	r7, r0
 8006276:	db01      	blt.n	800627c <_malloc_r+0x1c>
 8006278:	42a9      	cmp	r1, r5
 800627a:	d905      	bls.n	8006288 <_malloc_r+0x28>
 800627c:	230c      	movs	r3, #12
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	2600      	movs	r6, #0
 8006282:	4630      	mov	r0, r6
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	4e2e      	ldr	r6, [pc, #184]	; (8006344 <_malloc_r+0xe4>)
 800628a:	f002 ffc7 	bl	800921c <__malloc_lock>
 800628e:	6833      	ldr	r3, [r6, #0]
 8006290:	461c      	mov	r4, r3
 8006292:	bb34      	cbnz	r4, 80062e2 <_malloc_r+0x82>
 8006294:	4629      	mov	r1, r5
 8006296:	4638      	mov	r0, r7
 8006298:	f7ff ffc2 	bl	8006220 <sbrk_aligned>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	4604      	mov	r4, r0
 80062a0:	d14d      	bne.n	800633e <_malloc_r+0xde>
 80062a2:	6834      	ldr	r4, [r6, #0]
 80062a4:	4626      	mov	r6, r4
 80062a6:	2e00      	cmp	r6, #0
 80062a8:	d140      	bne.n	800632c <_malloc_r+0xcc>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	4631      	mov	r1, r6
 80062ae:	4638      	mov	r0, r7
 80062b0:	eb04 0803 	add.w	r8, r4, r3
 80062b4:	f000 fec2 	bl	800703c <_sbrk_r>
 80062b8:	4580      	cmp	r8, r0
 80062ba:	d13a      	bne.n	8006332 <_malloc_r+0xd2>
 80062bc:	6821      	ldr	r1, [r4, #0]
 80062be:	3503      	adds	r5, #3
 80062c0:	1a6d      	subs	r5, r5, r1
 80062c2:	f025 0503 	bic.w	r5, r5, #3
 80062c6:	3508      	adds	r5, #8
 80062c8:	2d0c      	cmp	r5, #12
 80062ca:	bf38      	it	cc
 80062cc:	250c      	movcc	r5, #12
 80062ce:	4629      	mov	r1, r5
 80062d0:	4638      	mov	r0, r7
 80062d2:	f7ff ffa5 	bl	8006220 <sbrk_aligned>
 80062d6:	3001      	adds	r0, #1
 80062d8:	d02b      	beq.n	8006332 <_malloc_r+0xd2>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	442b      	add	r3, r5
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	e00e      	b.n	8006300 <_malloc_r+0xa0>
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	1b52      	subs	r2, r2, r5
 80062e6:	d41e      	bmi.n	8006326 <_malloc_r+0xc6>
 80062e8:	2a0b      	cmp	r2, #11
 80062ea:	d916      	bls.n	800631a <_malloc_r+0xba>
 80062ec:	1961      	adds	r1, r4, r5
 80062ee:	42a3      	cmp	r3, r4
 80062f0:	6025      	str	r5, [r4, #0]
 80062f2:	bf18      	it	ne
 80062f4:	6059      	strne	r1, [r3, #4]
 80062f6:	6863      	ldr	r3, [r4, #4]
 80062f8:	bf08      	it	eq
 80062fa:	6031      	streq	r1, [r6, #0]
 80062fc:	5162      	str	r2, [r4, r5]
 80062fe:	604b      	str	r3, [r1, #4]
 8006300:	4638      	mov	r0, r7
 8006302:	f104 060b 	add.w	r6, r4, #11
 8006306:	f002 ff8f 	bl	8009228 <__malloc_unlock>
 800630a:	f026 0607 	bic.w	r6, r6, #7
 800630e:	1d23      	adds	r3, r4, #4
 8006310:	1af2      	subs	r2, r6, r3
 8006312:	d0b6      	beq.n	8006282 <_malloc_r+0x22>
 8006314:	1b9b      	subs	r3, r3, r6
 8006316:	50a3      	str	r3, [r4, r2]
 8006318:	e7b3      	b.n	8006282 <_malloc_r+0x22>
 800631a:	6862      	ldr	r2, [r4, #4]
 800631c:	42a3      	cmp	r3, r4
 800631e:	bf0c      	ite	eq
 8006320:	6032      	streq	r2, [r6, #0]
 8006322:	605a      	strne	r2, [r3, #4]
 8006324:	e7ec      	b.n	8006300 <_malloc_r+0xa0>
 8006326:	4623      	mov	r3, r4
 8006328:	6864      	ldr	r4, [r4, #4]
 800632a:	e7b2      	b.n	8006292 <_malloc_r+0x32>
 800632c:	4634      	mov	r4, r6
 800632e:	6876      	ldr	r6, [r6, #4]
 8006330:	e7b9      	b.n	80062a6 <_malloc_r+0x46>
 8006332:	230c      	movs	r3, #12
 8006334:	603b      	str	r3, [r7, #0]
 8006336:	4638      	mov	r0, r7
 8006338:	f002 ff76 	bl	8009228 <__malloc_unlock>
 800633c:	e7a1      	b.n	8006282 <_malloc_r+0x22>
 800633e:	6025      	str	r5, [r4, #0]
 8006340:	e7de      	b.n	8006300 <_malloc_r+0xa0>
 8006342:	bf00      	nop
 8006344:	2000044c 	.word	0x2000044c

08006348 <__cvt>:
 8006348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	ec55 4b10 	vmov	r4, r5, d0
 8006350:	2d00      	cmp	r5, #0
 8006352:	460e      	mov	r6, r1
 8006354:	4619      	mov	r1, r3
 8006356:	462b      	mov	r3, r5
 8006358:	bfbb      	ittet	lt
 800635a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800635e:	461d      	movlt	r5, r3
 8006360:	2300      	movge	r3, #0
 8006362:	232d      	movlt	r3, #45	; 0x2d
 8006364:	700b      	strb	r3, [r1, #0]
 8006366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006368:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800636c:	4691      	mov	r9, r2
 800636e:	f023 0820 	bic.w	r8, r3, #32
 8006372:	bfbc      	itt	lt
 8006374:	4622      	movlt	r2, r4
 8006376:	4614      	movlt	r4, r2
 8006378:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800637c:	d005      	beq.n	800638a <__cvt+0x42>
 800637e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006382:	d100      	bne.n	8006386 <__cvt+0x3e>
 8006384:	3601      	adds	r6, #1
 8006386:	2102      	movs	r1, #2
 8006388:	e000      	b.n	800638c <__cvt+0x44>
 800638a:	2103      	movs	r1, #3
 800638c:	ab03      	add	r3, sp, #12
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	ab02      	add	r3, sp, #8
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	ec45 4b10 	vmov	d0, r4, r5
 8006398:	4653      	mov	r3, sl
 800639a:	4632      	mov	r2, r6
 800639c:	f001 fdbc 	bl	8007f18 <_dtoa_r>
 80063a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063a4:	4607      	mov	r7, r0
 80063a6:	d102      	bne.n	80063ae <__cvt+0x66>
 80063a8:	f019 0f01 	tst.w	r9, #1
 80063ac:	d022      	beq.n	80063f4 <__cvt+0xac>
 80063ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063b2:	eb07 0906 	add.w	r9, r7, r6
 80063b6:	d110      	bne.n	80063da <__cvt+0x92>
 80063b8:	783b      	ldrb	r3, [r7, #0]
 80063ba:	2b30      	cmp	r3, #48	; 0x30
 80063bc:	d10a      	bne.n	80063d4 <__cvt+0x8c>
 80063be:	2200      	movs	r2, #0
 80063c0:	2300      	movs	r3, #0
 80063c2:	4620      	mov	r0, r4
 80063c4:	4629      	mov	r1, r5
 80063c6:	f7fa fb87 	bl	8000ad8 <__aeabi_dcmpeq>
 80063ca:	b918      	cbnz	r0, 80063d4 <__cvt+0x8c>
 80063cc:	f1c6 0601 	rsb	r6, r6, #1
 80063d0:	f8ca 6000 	str.w	r6, [sl]
 80063d4:	f8da 3000 	ldr.w	r3, [sl]
 80063d8:	4499      	add	r9, r3
 80063da:	2200      	movs	r2, #0
 80063dc:	2300      	movs	r3, #0
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7fa fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 80063e6:	b108      	cbz	r0, 80063ec <__cvt+0xa4>
 80063e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80063ec:	2230      	movs	r2, #48	; 0x30
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	454b      	cmp	r3, r9
 80063f2:	d307      	bcc.n	8006404 <__cvt+0xbc>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063f8:	1bdb      	subs	r3, r3, r7
 80063fa:	4638      	mov	r0, r7
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	b004      	add	sp, #16
 8006400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006404:	1c59      	adds	r1, r3, #1
 8006406:	9103      	str	r1, [sp, #12]
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	e7f0      	b.n	80063ee <__cvt+0xa6>

0800640c <__exponent>:
 800640c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800640e:	4603      	mov	r3, r0
 8006410:	2900      	cmp	r1, #0
 8006412:	bfb8      	it	lt
 8006414:	4249      	neglt	r1, r1
 8006416:	f803 2b02 	strb.w	r2, [r3], #2
 800641a:	bfb4      	ite	lt
 800641c:	222d      	movlt	r2, #45	; 0x2d
 800641e:	222b      	movge	r2, #43	; 0x2b
 8006420:	2909      	cmp	r1, #9
 8006422:	7042      	strb	r2, [r0, #1]
 8006424:	dd2a      	ble.n	800647c <__exponent+0x70>
 8006426:	f10d 0407 	add.w	r4, sp, #7
 800642a:	46a4      	mov	ip, r4
 800642c:	270a      	movs	r7, #10
 800642e:	46a6      	mov	lr, r4
 8006430:	460a      	mov	r2, r1
 8006432:	fb91 f6f7 	sdiv	r6, r1, r7
 8006436:	fb07 1516 	mls	r5, r7, r6, r1
 800643a:	3530      	adds	r5, #48	; 0x30
 800643c:	2a63      	cmp	r2, #99	; 0x63
 800643e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006442:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006446:	4631      	mov	r1, r6
 8006448:	dcf1      	bgt.n	800642e <__exponent+0x22>
 800644a:	3130      	adds	r1, #48	; 0x30
 800644c:	f1ae 0502 	sub.w	r5, lr, #2
 8006450:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006454:	1c44      	adds	r4, r0, #1
 8006456:	4629      	mov	r1, r5
 8006458:	4561      	cmp	r1, ip
 800645a:	d30a      	bcc.n	8006472 <__exponent+0x66>
 800645c:	f10d 0209 	add.w	r2, sp, #9
 8006460:	eba2 020e 	sub.w	r2, r2, lr
 8006464:	4565      	cmp	r5, ip
 8006466:	bf88      	it	hi
 8006468:	2200      	movhi	r2, #0
 800646a:	4413      	add	r3, r2
 800646c:	1a18      	subs	r0, r3, r0
 800646e:	b003      	add	sp, #12
 8006470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006476:	f804 2f01 	strb.w	r2, [r4, #1]!
 800647a:	e7ed      	b.n	8006458 <__exponent+0x4c>
 800647c:	2330      	movs	r3, #48	; 0x30
 800647e:	3130      	adds	r1, #48	; 0x30
 8006480:	7083      	strb	r3, [r0, #2]
 8006482:	70c1      	strb	r1, [r0, #3]
 8006484:	1d03      	adds	r3, r0, #4
 8006486:	e7f1      	b.n	800646c <__exponent+0x60>

08006488 <_printf_float>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	ed2d 8b02 	vpush	{d8}
 8006490:	b08d      	sub	sp, #52	; 0x34
 8006492:	460c      	mov	r4, r1
 8006494:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006498:	4616      	mov	r6, r2
 800649a:	461f      	mov	r7, r3
 800649c:	4605      	mov	r5, r0
 800649e:	f002 fe99 	bl	80091d4 <_localeconv_r>
 80064a2:	f8d0 a000 	ldr.w	sl, [r0]
 80064a6:	4650      	mov	r0, sl
 80064a8:	f7f9 fe9a 	bl	80001e0 <strlen>
 80064ac:	2300      	movs	r3, #0
 80064ae:	930a      	str	r3, [sp, #40]	; 0x28
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	9305      	str	r3, [sp, #20]
 80064b4:	f8d8 3000 	ldr.w	r3, [r8]
 80064b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064bc:	3307      	adds	r3, #7
 80064be:	f023 0307 	bic.w	r3, r3, #7
 80064c2:	f103 0208 	add.w	r2, r3, #8
 80064c6:	f8c8 2000 	str.w	r2, [r8]
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80064d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064da:	9307      	str	r3, [sp, #28]
 80064dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80064e0:	ee08 0a10 	vmov	s16, r0
 80064e4:	4b9f      	ldr	r3, [pc, #636]	; (8006764 <_printf_float+0x2dc>)
 80064e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064ea:	f04f 32ff 	mov.w	r2, #4294967295
 80064ee:	f7fa fb25 	bl	8000b3c <__aeabi_dcmpun>
 80064f2:	bb88      	cbnz	r0, 8006558 <_printf_float+0xd0>
 80064f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064f8:	4b9a      	ldr	r3, [pc, #616]	; (8006764 <_printf_float+0x2dc>)
 80064fa:	f04f 32ff 	mov.w	r2, #4294967295
 80064fe:	f7fa faff 	bl	8000b00 <__aeabi_dcmple>
 8006502:	bb48      	cbnz	r0, 8006558 <_printf_float+0xd0>
 8006504:	2200      	movs	r2, #0
 8006506:	2300      	movs	r3, #0
 8006508:	4640      	mov	r0, r8
 800650a:	4649      	mov	r1, r9
 800650c:	f7fa faee 	bl	8000aec <__aeabi_dcmplt>
 8006510:	b110      	cbz	r0, 8006518 <_printf_float+0x90>
 8006512:	232d      	movs	r3, #45	; 0x2d
 8006514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006518:	4b93      	ldr	r3, [pc, #588]	; (8006768 <_printf_float+0x2e0>)
 800651a:	4894      	ldr	r0, [pc, #592]	; (800676c <_printf_float+0x2e4>)
 800651c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006520:	bf94      	ite	ls
 8006522:	4698      	movls	r8, r3
 8006524:	4680      	movhi	r8, r0
 8006526:	2303      	movs	r3, #3
 8006528:	6123      	str	r3, [r4, #16]
 800652a:	9b05      	ldr	r3, [sp, #20]
 800652c:	f023 0204 	bic.w	r2, r3, #4
 8006530:	6022      	str	r2, [r4, #0]
 8006532:	f04f 0900 	mov.w	r9, #0
 8006536:	9700      	str	r7, [sp, #0]
 8006538:	4633      	mov	r3, r6
 800653a:	aa0b      	add	r2, sp, #44	; 0x2c
 800653c:	4621      	mov	r1, r4
 800653e:	4628      	mov	r0, r5
 8006540:	f000 f9d8 	bl	80068f4 <_printf_common>
 8006544:	3001      	adds	r0, #1
 8006546:	f040 8090 	bne.w	800666a <_printf_float+0x1e2>
 800654a:	f04f 30ff 	mov.w	r0, #4294967295
 800654e:	b00d      	add	sp, #52	; 0x34
 8006550:	ecbd 8b02 	vpop	{d8}
 8006554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006558:	4642      	mov	r2, r8
 800655a:	464b      	mov	r3, r9
 800655c:	4640      	mov	r0, r8
 800655e:	4649      	mov	r1, r9
 8006560:	f7fa faec 	bl	8000b3c <__aeabi_dcmpun>
 8006564:	b140      	cbz	r0, 8006578 <_printf_float+0xf0>
 8006566:	464b      	mov	r3, r9
 8006568:	2b00      	cmp	r3, #0
 800656a:	bfbc      	itt	lt
 800656c:	232d      	movlt	r3, #45	; 0x2d
 800656e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006572:	487f      	ldr	r0, [pc, #508]	; (8006770 <_printf_float+0x2e8>)
 8006574:	4b7f      	ldr	r3, [pc, #508]	; (8006774 <_printf_float+0x2ec>)
 8006576:	e7d1      	b.n	800651c <_printf_float+0x94>
 8006578:	6863      	ldr	r3, [r4, #4]
 800657a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800657e:	9206      	str	r2, [sp, #24]
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	d13f      	bne.n	8006604 <_printf_float+0x17c>
 8006584:	2306      	movs	r3, #6
 8006586:	6063      	str	r3, [r4, #4]
 8006588:	9b05      	ldr	r3, [sp, #20]
 800658a:	6861      	ldr	r1, [r4, #4]
 800658c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006590:	2300      	movs	r3, #0
 8006592:	9303      	str	r3, [sp, #12]
 8006594:	ab0a      	add	r3, sp, #40	; 0x28
 8006596:	e9cd b301 	strd	fp, r3, [sp, #4]
 800659a:	ab09      	add	r3, sp, #36	; 0x24
 800659c:	ec49 8b10 	vmov	d0, r8, r9
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	6022      	str	r2, [r4, #0]
 80065a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065a8:	4628      	mov	r0, r5
 80065aa:	f7ff fecd 	bl	8006348 <__cvt>
 80065ae:	9b06      	ldr	r3, [sp, #24]
 80065b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065b2:	2b47      	cmp	r3, #71	; 0x47
 80065b4:	4680      	mov	r8, r0
 80065b6:	d108      	bne.n	80065ca <_printf_float+0x142>
 80065b8:	1cc8      	adds	r0, r1, #3
 80065ba:	db02      	blt.n	80065c2 <_printf_float+0x13a>
 80065bc:	6863      	ldr	r3, [r4, #4]
 80065be:	4299      	cmp	r1, r3
 80065c0:	dd41      	ble.n	8006646 <_printf_float+0x1be>
 80065c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80065c6:	fa5f fb8b 	uxtb.w	fp, fp
 80065ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065ce:	d820      	bhi.n	8006612 <_printf_float+0x18a>
 80065d0:	3901      	subs	r1, #1
 80065d2:	465a      	mov	r2, fp
 80065d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065d8:	9109      	str	r1, [sp, #36]	; 0x24
 80065da:	f7ff ff17 	bl	800640c <__exponent>
 80065de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065e0:	1813      	adds	r3, r2, r0
 80065e2:	2a01      	cmp	r2, #1
 80065e4:	4681      	mov	r9, r0
 80065e6:	6123      	str	r3, [r4, #16]
 80065e8:	dc02      	bgt.n	80065f0 <_printf_float+0x168>
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	07d2      	lsls	r2, r2, #31
 80065ee:	d501      	bpl.n	80065f4 <_printf_float+0x16c>
 80065f0:	3301      	adds	r3, #1
 80065f2:	6123      	str	r3, [r4, #16]
 80065f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d09c      	beq.n	8006536 <_printf_float+0xae>
 80065fc:	232d      	movs	r3, #45	; 0x2d
 80065fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006602:	e798      	b.n	8006536 <_printf_float+0xae>
 8006604:	9a06      	ldr	r2, [sp, #24]
 8006606:	2a47      	cmp	r2, #71	; 0x47
 8006608:	d1be      	bne.n	8006588 <_printf_float+0x100>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1bc      	bne.n	8006588 <_printf_float+0x100>
 800660e:	2301      	movs	r3, #1
 8006610:	e7b9      	b.n	8006586 <_printf_float+0xfe>
 8006612:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006616:	d118      	bne.n	800664a <_printf_float+0x1c2>
 8006618:	2900      	cmp	r1, #0
 800661a:	6863      	ldr	r3, [r4, #4]
 800661c:	dd0b      	ble.n	8006636 <_printf_float+0x1ae>
 800661e:	6121      	str	r1, [r4, #16]
 8006620:	b913      	cbnz	r3, 8006628 <_printf_float+0x1a0>
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	07d0      	lsls	r0, r2, #31
 8006626:	d502      	bpl.n	800662e <_printf_float+0x1a6>
 8006628:	3301      	adds	r3, #1
 800662a:	440b      	add	r3, r1
 800662c:	6123      	str	r3, [r4, #16]
 800662e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006630:	f04f 0900 	mov.w	r9, #0
 8006634:	e7de      	b.n	80065f4 <_printf_float+0x16c>
 8006636:	b913      	cbnz	r3, 800663e <_printf_float+0x1b6>
 8006638:	6822      	ldr	r2, [r4, #0]
 800663a:	07d2      	lsls	r2, r2, #31
 800663c:	d501      	bpl.n	8006642 <_printf_float+0x1ba>
 800663e:	3302      	adds	r3, #2
 8006640:	e7f4      	b.n	800662c <_printf_float+0x1a4>
 8006642:	2301      	movs	r3, #1
 8006644:	e7f2      	b.n	800662c <_printf_float+0x1a4>
 8006646:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800664a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800664c:	4299      	cmp	r1, r3
 800664e:	db05      	blt.n	800665c <_printf_float+0x1d4>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	6121      	str	r1, [r4, #16]
 8006654:	07d8      	lsls	r0, r3, #31
 8006656:	d5ea      	bpl.n	800662e <_printf_float+0x1a6>
 8006658:	1c4b      	adds	r3, r1, #1
 800665a:	e7e7      	b.n	800662c <_printf_float+0x1a4>
 800665c:	2900      	cmp	r1, #0
 800665e:	bfd4      	ite	le
 8006660:	f1c1 0202 	rsble	r2, r1, #2
 8006664:	2201      	movgt	r2, #1
 8006666:	4413      	add	r3, r2
 8006668:	e7e0      	b.n	800662c <_printf_float+0x1a4>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	055a      	lsls	r2, r3, #21
 800666e:	d407      	bmi.n	8006680 <_printf_float+0x1f8>
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	4642      	mov	r2, r8
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	d12c      	bne.n	80066d8 <_printf_float+0x250>
 800667e:	e764      	b.n	800654a <_printf_float+0xc2>
 8006680:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006684:	f240 80e0 	bls.w	8006848 <_printf_float+0x3c0>
 8006688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800668c:	2200      	movs	r2, #0
 800668e:	2300      	movs	r3, #0
 8006690:	f7fa fa22 	bl	8000ad8 <__aeabi_dcmpeq>
 8006694:	2800      	cmp	r0, #0
 8006696:	d034      	beq.n	8006702 <_printf_float+0x27a>
 8006698:	4a37      	ldr	r2, [pc, #220]	; (8006778 <_printf_float+0x2f0>)
 800669a:	2301      	movs	r3, #1
 800669c:	4631      	mov	r1, r6
 800669e:	4628      	mov	r0, r5
 80066a0:	47b8      	blx	r7
 80066a2:	3001      	adds	r0, #1
 80066a4:	f43f af51 	beq.w	800654a <_printf_float+0xc2>
 80066a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066ac:	429a      	cmp	r2, r3
 80066ae:	db02      	blt.n	80066b6 <_printf_float+0x22e>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	07d8      	lsls	r0, r3, #31
 80066b4:	d510      	bpl.n	80066d8 <_printf_float+0x250>
 80066b6:	ee18 3a10 	vmov	r3, s16
 80066ba:	4652      	mov	r2, sl
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	f43f af41 	beq.w	800654a <_printf_float+0xc2>
 80066c8:	f04f 0800 	mov.w	r8, #0
 80066cc:	f104 091a 	add.w	r9, r4, #26
 80066d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d2:	3b01      	subs	r3, #1
 80066d4:	4543      	cmp	r3, r8
 80066d6:	dc09      	bgt.n	80066ec <_printf_float+0x264>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	079b      	lsls	r3, r3, #30
 80066dc:	f100 8105 	bmi.w	80068ea <_printf_float+0x462>
 80066e0:	68e0      	ldr	r0, [r4, #12]
 80066e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066e4:	4298      	cmp	r0, r3
 80066e6:	bfb8      	it	lt
 80066e8:	4618      	movlt	r0, r3
 80066ea:	e730      	b.n	800654e <_printf_float+0xc6>
 80066ec:	2301      	movs	r3, #1
 80066ee:	464a      	mov	r2, r9
 80066f0:	4631      	mov	r1, r6
 80066f2:	4628      	mov	r0, r5
 80066f4:	47b8      	blx	r7
 80066f6:	3001      	adds	r0, #1
 80066f8:	f43f af27 	beq.w	800654a <_printf_float+0xc2>
 80066fc:	f108 0801 	add.w	r8, r8, #1
 8006700:	e7e6      	b.n	80066d0 <_printf_float+0x248>
 8006702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006704:	2b00      	cmp	r3, #0
 8006706:	dc39      	bgt.n	800677c <_printf_float+0x2f4>
 8006708:	4a1b      	ldr	r2, [pc, #108]	; (8006778 <_printf_float+0x2f0>)
 800670a:	2301      	movs	r3, #1
 800670c:	4631      	mov	r1, r6
 800670e:	4628      	mov	r0, r5
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	f43f af19 	beq.w	800654a <_printf_float+0xc2>
 8006718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800671c:	4313      	orrs	r3, r2
 800671e:	d102      	bne.n	8006726 <_printf_float+0x29e>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	07d9      	lsls	r1, r3, #31
 8006724:	d5d8      	bpl.n	80066d8 <_printf_float+0x250>
 8006726:	ee18 3a10 	vmov	r3, s16
 800672a:	4652      	mov	r2, sl
 800672c:	4631      	mov	r1, r6
 800672e:	4628      	mov	r0, r5
 8006730:	47b8      	blx	r7
 8006732:	3001      	adds	r0, #1
 8006734:	f43f af09 	beq.w	800654a <_printf_float+0xc2>
 8006738:	f04f 0900 	mov.w	r9, #0
 800673c:	f104 0a1a 	add.w	sl, r4, #26
 8006740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006742:	425b      	negs	r3, r3
 8006744:	454b      	cmp	r3, r9
 8006746:	dc01      	bgt.n	800674c <_printf_float+0x2c4>
 8006748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674a:	e792      	b.n	8006672 <_printf_float+0x1ea>
 800674c:	2301      	movs	r3, #1
 800674e:	4652      	mov	r2, sl
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	f43f aef7 	beq.w	800654a <_printf_float+0xc2>
 800675c:	f109 0901 	add.w	r9, r9, #1
 8006760:	e7ee      	b.n	8006740 <_printf_float+0x2b8>
 8006762:	bf00      	nop
 8006764:	7fefffff 	.word	0x7fefffff
 8006768:	0800aaa4 	.word	0x0800aaa4
 800676c:	0800aaa8 	.word	0x0800aaa8
 8006770:	0800aab0 	.word	0x0800aab0
 8006774:	0800aaac 	.word	0x0800aaac
 8006778:	0800aab4 	.word	0x0800aab4
 800677c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800677e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006780:	429a      	cmp	r2, r3
 8006782:	bfa8      	it	ge
 8006784:	461a      	movge	r2, r3
 8006786:	2a00      	cmp	r2, #0
 8006788:	4691      	mov	r9, r2
 800678a:	dc37      	bgt.n	80067fc <_printf_float+0x374>
 800678c:	f04f 0b00 	mov.w	fp, #0
 8006790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006794:	f104 021a 	add.w	r2, r4, #26
 8006798:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	eba3 0309 	sub.w	r3, r3, r9
 80067a0:	455b      	cmp	r3, fp
 80067a2:	dc33      	bgt.n	800680c <_printf_float+0x384>
 80067a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067a8:	429a      	cmp	r2, r3
 80067aa:	db3b      	blt.n	8006824 <_printf_float+0x39c>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	07da      	lsls	r2, r3, #31
 80067b0:	d438      	bmi.n	8006824 <_printf_float+0x39c>
 80067b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b4:	9a05      	ldr	r2, [sp, #20]
 80067b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067b8:	1a9a      	subs	r2, r3, r2
 80067ba:	eba3 0901 	sub.w	r9, r3, r1
 80067be:	4591      	cmp	r9, r2
 80067c0:	bfa8      	it	ge
 80067c2:	4691      	movge	r9, r2
 80067c4:	f1b9 0f00 	cmp.w	r9, #0
 80067c8:	dc35      	bgt.n	8006836 <_printf_float+0x3ae>
 80067ca:	f04f 0800 	mov.w	r8, #0
 80067ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067d2:	f104 0a1a 	add.w	sl, r4, #26
 80067d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	eba3 0309 	sub.w	r3, r3, r9
 80067e0:	4543      	cmp	r3, r8
 80067e2:	f77f af79 	ble.w	80066d8 <_printf_float+0x250>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4652      	mov	r2, sl
 80067ea:	4631      	mov	r1, r6
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	f43f aeaa 	beq.w	800654a <_printf_float+0xc2>
 80067f6:	f108 0801 	add.w	r8, r8, #1
 80067fa:	e7ec      	b.n	80067d6 <_printf_float+0x34e>
 80067fc:	4613      	mov	r3, r2
 80067fe:	4631      	mov	r1, r6
 8006800:	4642      	mov	r2, r8
 8006802:	4628      	mov	r0, r5
 8006804:	47b8      	blx	r7
 8006806:	3001      	adds	r0, #1
 8006808:	d1c0      	bne.n	800678c <_printf_float+0x304>
 800680a:	e69e      	b.n	800654a <_printf_float+0xc2>
 800680c:	2301      	movs	r3, #1
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	9205      	str	r2, [sp, #20]
 8006814:	47b8      	blx	r7
 8006816:	3001      	adds	r0, #1
 8006818:	f43f ae97 	beq.w	800654a <_printf_float+0xc2>
 800681c:	9a05      	ldr	r2, [sp, #20]
 800681e:	f10b 0b01 	add.w	fp, fp, #1
 8006822:	e7b9      	b.n	8006798 <_printf_float+0x310>
 8006824:	ee18 3a10 	vmov	r3, s16
 8006828:	4652      	mov	r2, sl
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	47b8      	blx	r7
 8006830:	3001      	adds	r0, #1
 8006832:	d1be      	bne.n	80067b2 <_printf_float+0x32a>
 8006834:	e689      	b.n	800654a <_printf_float+0xc2>
 8006836:	9a05      	ldr	r2, [sp, #20]
 8006838:	464b      	mov	r3, r9
 800683a:	4442      	add	r2, r8
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	d1c1      	bne.n	80067ca <_printf_float+0x342>
 8006846:	e680      	b.n	800654a <_printf_float+0xc2>
 8006848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800684a:	2a01      	cmp	r2, #1
 800684c:	dc01      	bgt.n	8006852 <_printf_float+0x3ca>
 800684e:	07db      	lsls	r3, r3, #31
 8006850:	d538      	bpl.n	80068c4 <_printf_float+0x43c>
 8006852:	2301      	movs	r3, #1
 8006854:	4642      	mov	r2, r8
 8006856:	4631      	mov	r1, r6
 8006858:	4628      	mov	r0, r5
 800685a:	47b8      	blx	r7
 800685c:	3001      	adds	r0, #1
 800685e:	f43f ae74 	beq.w	800654a <_printf_float+0xc2>
 8006862:	ee18 3a10 	vmov	r3, s16
 8006866:	4652      	mov	r2, sl
 8006868:	4631      	mov	r1, r6
 800686a:	4628      	mov	r0, r5
 800686c:	47b8      	blx	r7
 800686e:	3001      	adds	r0, #1
 8006870:	f43f ae6b 	beq.w	800654a <_printf_float+0xc2>
 8006874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006878:	2200      	movs	r2, #0
 800687a:	2300      	movs	r3, #0
 800687c:	f7fa f92c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006880:	b9d8      	cbnz	r0, 80068ba <_printf_float+0x432>
 8006882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006884:	f108 0201 	add.w	r2, r8, #1
 8006888:	3b01      	subs	r3, #1
 800688a:	4631      	mov	r1, r6
 800688c:	4628      	mov	r0, r5
 800688e:	47b8      	blx	r7
 8006890:	3001      	adds	r0, #1
 8006892:	d10e      	bne.n	80068b2 <_printf_float+0x42a>
 8006894:	e659      	b.n	800654a <_printf_float+0xc2>
 8006896:	2301      	movs	r3, #1
 8006898:	4652      	mov	r2, sl
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	f43f ae52 	beq.w	800654a <_printf_float+0xc2>
 80068a6:	f108 0801 	add.w	r8, r8, #1
 80068aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ac:	3b01      	subs	r3, #1
 80068ae:	4543      	cmp	r3, r8
 80068b0:	dcf1      	bgt.n	8006896 <_printf_float+0x40e>
 80068b2:	464b      	mov	r3, r9
 80068b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068b8:	e6dc      	b.n	8006674 <_printf_float+0x1ec>
 80068ba:	f04f 0800 	mov.w	r8, #0
 80068be:	f104 0a1a 	add.w	sl, r4, #26
 80068c2:	e7f2      	b.n	80068aa <_printf_float+0x422>
 80068c4:	2301      	movs	r3, #1
 80068c6:	4642      	mov	r2, r8
 80068c8:	e7df      	b.n	800688a <_printf_float+0x402>
 80068ca:	2301      	movs	r3, #1
 80068cc:	464a      	mov	r2, r9
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	f43f ae38 	beq.w	800654a <_printf_float+0xc2>
 80068da:	f108 0801 	add.w	r8, r8, #1
 80068de:	68e3      	ldr	r3, [r4, #12]
 80068e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068e2:	1a5b      	subs	r3, r3, r1
 80068e4:	4543      	cmp	r3, r8
 80068e6:	dcf0      	bgt.n	80068ca <_printf_float+0x442>
 80068e8:	e6fa      	b.n	80066e0 <_printf_float+0x258>
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	f104 0919 	add.w	r9, r4, #25
 80068f2:	e7f4      	b.n	80068de <_printf_float+0x456>

080068f4 <_printf_common>:
 80068f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	4616      	mov	r6, r2
 80068fa:	4699      	mov	r9, r3
 80068fc:	688a      	ldr	r2, [r1, #8]
 80068fe:	690b      	ldr	r3, [r1, #16]
 8006900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006904:	4293      	cmp	r3, r2
 8006906:	bfb8      	it	lt
 8006908:	4613      	movlt	r3, r2
 800690a:	6033      	str	r3, [r6, #0]
 800690c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006910:	4607      	mov	r7, r0
 8006912:	460c      	mov	r4, r1
 8006914:	b10a      	cbz	r2, 800691a <_printf_common+0x26>
 8006916:	3301      	adds	r3, #1
 8006918:	6033      	str	r3, [r6, #0]
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	0699      	lsls	r1, r3, #26
 800691e:	bf42      	ittt	mi
 8006920:	6833      	ldrmi	r3, [r6, #0]
 8006922:	3302      	addmi	r3, #2
 8006924:	6033      	strmi	r3, [r6, #0]
 8006926:	6825      	ldr	r5, [r4, #0]
 8006928:	f015 0506 	ands.w	r5, r5, #6
 800692c:	d106      	bne.n	800693c <_printf_common+0x48>
 800692e:	f104 0a19 	add.w	sl, r4, #25
 8006932:	68e3      	ldr	r3, [r4, #12]
 8006934:	6832      	ldr	r2, [r6, #0]
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	42ab      	cmp	r3, r5
 800693a:	dc26      	bgt.n	800698a <_printf_common+0x96>
 800693c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006940:	1e13      	subs	r3, r2, #0
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	bf18      	it	ne
 8006946:	2301      	movne	r3, #1
 8006948:	0692      	lsls	r2, r2, #26
 800694a:	d42b      	bmi.n	80069a4 <_printf_common+0xb0>
 800694c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006950:	4649      	mov	r1, r9
 8006952:	4638      	mov	r0, r7
 8006954:	47c0      	blx	r8
 8006956:	3001      	adds	r0, #1
 8006958:	d01e      	beq.n	8006998 <_printf_common+0xa4>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	68e5      	ldr	r5, [r4, #12]
 800695e:	6832      	ldr	r2, [r6, #0]
 8006960:	f003 0306 	and.w	r3, r3, #6
 8006964:	2b04      	cmp	r3, #4
 8006966:	bf08      	it	eq
 8006968:	1aad      	subeq	r5, r5, r2
 800696a:	68a3      	ldr	r3, [r4, #8]
 800696c:	6922      	ldr	r2, [r4, #16]
 800696e:	bf0c      	ite	eq
 8006970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006974:	2500      	movne	r5, #0
 8006976:	4293      	cmp	r3, r2
 8006978:	bfc4      	itt	gt
 800697a:	1a9b      	subgt	r3, r3, r2
 800697c:	18ed      	addgt	r5, r5, r3
 800697e:	2600      	movs	r6, #0
 8006980:	341a      	adds	r4, #26
 8006982:	42b5      	cmp	r5, r6
 8006984:	d11a      	bne.n	80069bc <_printf_common+0xc8>
 8006986:	2000      	movs	r0, #0
 8006988:	e008      	b.n	800699c <_printf_common+0xa8>
 800698a:	2301      	movs	r3, #1
 800698c:	4652      	mov	r2, sl
 800698e:	4649      	mov	r1, r9
 8006990:	4638      	mov	r0, r7
 8006992:	47c0      	blx	r8
 8006994:	3001      	adds	r0, #1
 8006996:	d103      	bne.n	80069a0 <_printf_common+0xac>
 8006998:	f04f 30ff 	mov.w	r0, #4294967295
 800699c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a0:	3501      	adds	r5, #1
 80069a2:	e7c6      	b.n	8006932 <_printf_common+0x3e>
 80069a4:	18e1      	adds	r1, r4, r3
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	2030      	movs	r0, #48	; 0x30
 80069aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069ae:	4422      	add	r2, r4
 80069b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069b8:	3302      	adds	r3, #2
 80069ba:	e7c7      	b.n	800694c <_printf_common+0x58>
 80069bc:	2301      	movs	r3, #1
 80069be:	4622      	mov	r2, r4
 80069c0:	4649      	mov	r1, r9
 80069c2:	4638      	mov	r0, r7
 80069c4:	47c0      	blx	r8
 80069c6:	3001      	adds	r0, #1
 80069c8:	d0e6      	beq.n	8006998 <_printf_common+0xa4>
 80069ca:	3601      	adds	r6, #1
 80069cc:	e7d9      	b.n	8006982 <_printf_common+0x8e>
	...

080069d0 <_printf_i>:
 80069d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	7e0f      	ldrb	r7, [r1, #24]
 80069d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069d8:	2f78      	cmp	r7, #120	; 0x78
 80069da:	4691      	mov	r9, r2
 80069dc:	4680      	mov	r8, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	469a      	mov	sl, r3
 80069e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069e6:	d807      	bhi.n	80069f8 <_printf_i+0x28>
 80069e8:	2f62      	cmp	r7, #98	; 0x62
 80069ea:	d80a      	bhi.n	8006a02 <_printf_i+0x32>
 80069ec:	2f00      	cmp	r7, #0
 80069ee:	f000 80d8 	beq.w	8006ba2 <_printf_i+0x1d2>
 80069f2:	2f58      	cmp	r7, #88	; 0x58
 80069f4:	f000 80a3 	beq.w	8006b3e <_printf_i+0x16e>
 80069f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a00:	e03a      	b.n	8006a78 <_printf_i+0xa8>
 8006a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a06:	2b15      	cmp	r3, #21
 8006a08:	d8f6      	bhi.n	80069f8 <_printf_i+0x28>
 8006a0a:	a101      	add	r1, pc, #4	; (adr r1, 8006a10 <_printf_i+0x40>)
 8006a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a10:	08006a69 	.word	0x08006a69
 8006a14:	08006a7d 	.word	0x08006a7d
 8006a18:	080069f9 	.word	0x080069f9
 8006a1c:	080069f9 	.word	0x080069f9
 8006a20:	080069f9 	.word	0x080069f9
 8006a24:	080069f9 	.word	0x080069f9
 8006a28:	08006a7d 	.word	0x08006a7d
 8006a2c:	080069f9 	.word	0x080069f9
 8006a30:	080069f9 	.word	0x080069f9
 8006a34:	080069f9 	.word	0x080069f9
 8006a38:	080069f9 	.word	0x080069f9
 8006a3c:	08006b89 	.word	0x08006b89
 8006a40:	08006aad 	.word	0x08006aad
 8006a44:	08006b6b 	.word	0x08006b6b
 8006a48:	080069f9 	.word	0x080069f9
 8006a4c:	080069f9 	.word	0x080069f9
 8006a50:	08006bab 	.word	0x08006bab
 8006a54:	080069f9 	.word	0x080069f9
 8006a58:	08006aad 	.word	0x08006aad
 8006a5c:	080069f9 	.word	0x080069f9
 8006a60:	080069f9 	.word	0x080069f9
 8006a64:	08006b73 	.word	0x08006b73
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	1d1a      	adds	r2, r3, #4
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	602a      	str	r2, [r5, #0]
 8006a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e0a3      	b.n	8006bc4 <_printf_i+0x1f4>
 8006a7c:	6820      	ldr	r0, [r4, #0]
 8006a7e:	6829      	ldr	r1, [r5, #0]
 8006a80:	0606      	lsls	r6, r0, #24
 8006a82:	f101 0304 	add.w	r3, r1, #4
 8006a86:	d50a      	bpl.n	8006a9e <_printf_i+0xce>
 8006a88:	680e      	ldr	r6, [r1, #0]
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	2e00      	cmp	r6, #0
 8006a8e:	da03      	bge.n	8006a98 <_printf_i+0xc8>
 8006a90:	232d      	movs	r3, #45	; 0x2d
 8006a92:	4276      	negs	r6, r6
 8006a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a98:	485e      	ldr	r0, [pc, #376]	; (8006c14 <_printf_i+0x244>)
 8006a9a:	230a      	movs	r3, #10
 8006a9c:	e019      	b.n	8006ad2 <_printf_i+0x102>
 8006a9e:	680e      	ldr	r6, [r1, #0]
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006aa6:	bf18      	it	ne
 8006aa8:	b236      	sxthne	r6, r6
 8006aaa:	e7ef      	b.n	8006a8c <_printf_i+0xbc>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	6820      	ldr	r0, [r4, #0]
 8006ab0:	1d19      	adds	r1, r3, #4
 8006ab2:	6029      	str	r1, [r5, #0]
 8006ab4:	0601      	lsls	r1, r0, #24
 8006ab6:	d501      	bpl.n	8006abc <_printf_i+0xec>
 8006ab8:	681e      	ldr	r6, [r3, #0]
 8006aba:	e002      	b.n	8006ac2 <_printf_i+0xf2>
 8006abc:	0646      	lsls	r6, r0, #25
 8006abe:	d5fb      	bpl.n	8006ab8 <_printf_i+0xe8>
 8006ac0:	881e      	ldrh	r6, [r3, #0]
 8006ac2:	4854      	ldr	r0, [pc, #336]	; (8006c14 <_printf_i+0x244>)
 8006ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ac6:	bf0c      	ite	eq
 8006ac8:	2308      	moveq	r3, #8
 8006aca:	230a      	movne	r3, #10
 8006acc:	2100      	movs	r1, #0
 8006ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ad2:	6865      	ldr	r5, [r4, #4]
 8006ad4:	60a5      	str	r5, [r4, #8]
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	bfa2      	ittt	ge
 8006ada:	6821      	ldrge	r1, [r4, #0]
 8006adc:	f021 0104 	bicge.w	r1, r1, #4
 8006ae0:	6021      	strge	r1, [r4, #0]
 8006ae2:	b90e      	cbnz	r6, 8006ae8 <_printf_i+0x118>
 8006ae4:	2d00      	cmp	r5, #0
 8006ae6:	d04d      	beq.n	8006b84 <_printf_i+0x1b4>
 8006ae8:	4615      	mov	r5, r2
 8006aea:	fbb6 f1f3 	udiv	r1, r6, r3
 8006aee:	fb03 6711 	mls	r7, r3, r1, r6
 8006af2:	5dc7      	ldrb	r7, [r0, r7]
 8006af4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006af8:	4637      	mov	r7, r6
 8006afa:	42bb      	cmp	r3, r7
 8006afc:	460e      	mov	r6, r1
 8006afe:	d9f4      	bls.n	8006aea <_printf_i+0x11a>
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d10b      	bne.n	8006b1c <_printf_i+0x14c>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	07de      	lsls	r6, r3, #31
 8006b08:	d508      	bpl.n	8006b1c <_printf_i+0x14c>
 8006b0a:	6923      	ldr	r3, [r4, #16]
 8006b0c:	6861      	ldr	r1, [r4, #4]
 8006b0e:	4299      	cmp	r1, r3
 8006b10:	bfde      	ittt	le
 8006b12:	2330      	movle	r3, #48	; 0x30
 8006b14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b1c:	1b52      	subs	r2, r2, r5
 8006b1e:	6122      	str	r2, [r4, #16]
 8006b20:	f8cd a000 	str.w	sl, [sp]
 8006b24:	464b      	mov	r3, r9
 8006b26:	aa03      	add	r2, sp, #12
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	f7ff fee2 	bl	80068f4 <_printf_common>
 8006b30:	3001      	adds	r0, #1
 8006b32:	d14c      	bne.n	8006bce <_printf_i+0x1fe>
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	b004      	add	sp, #16
 8006b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b3e:	4835      	ldr	r0, [pc, #212]	; (8006c14 <_printf_i+0x244>)
 8006b40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b44:	6829      	ldr	r1, [r5, #0]
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b4c:	6029      	str	r1, [r5, #0]
 8006b4e:	061d      	lsls	r5, r3, #24
 8006b50:	d514      	bpl.n	8006b7c <_printf_i+0x1ac>
 8006b52:	07df      	lsls	r7, r3, #31
 8006b54:	bf44      	itt	mi
 8006b56:	f043 0320 	orrmi.w	r3, r3, #32
 8006b5a:	6023      	strmi	r3, [r4, #0]
 8006b5c:	b91e      	cbnz	r6, 8006b66 <_printf_i+0x196>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	f023 0320 	bic.w	r3, r3, #32
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	2310      	movs	r3, #16
 8006b68:	e7b0      	b.n	8006acc <_printf_i+0xfc>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	f043 0320 	orr.w	r3, r3, #32
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	2378      	movs	r3, #120	; 0x78
 8006b74:	4828      	ldr	r0, [pc, #160]	; (8006c18 <_printf_i+0x248>)
 8006b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b7a:	e7e3      	b.n	8006b44 <_printf_i+0x174>
 8006b7c:	0659      	lsls	r1, r3, #25
 8006b7e:	bf48      	it	mi
 8006b80:	b2b6      	uxthmi	r6, r6
 8006b82:	e7e6      	b.n	8006b52 <_printf_i+0x182>
 8006b84:	4615      	mov	r5, r2
 8006b86:	e7bb      	b.n	8006b00 <_printf_i+0x130>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	6826      	ldr	r6, [r4, #0]
 8006b8c:	6961      	ldr	r1, [r4, #20]
 8006b8e:	1d18      	adds	r0, r3, #4
 8006b90:	6028      	str	r0, [r5, #0]
 8006b92:	0635      	lsls	r5, r6, #24
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	d501      	bpl.n	8006b9c <_printf_i+0x1cc>
 8006b98:	6019      	str	r1, [r3, #0]
 8006b9a:	e002      	b.n	8006ba2 <_printf_i+0x1d2>
 8006b9c:	0670      	lsls	r0, r6, #25
 8006b9e:	d5fb      	bpl.n	8006b98 <_printf_i+0x1c8>
 8006ba0:	8019      	strh	r1, [r3, #0]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6123      	str	r3, [r4, #16]
 8006ba6:	4615      	mov	r5, r2
 8006ba8:	e7ba      	b.n	8006b20 <_printf_i+0x150>
 8006baa:	682b      	ldr	r3, [r5, #0]
 8006bac:	1d1a      	adds	r2, r3, #4
 8006bae:	602a      	str	r2, [r5, #0]
 8006bb0:	681d      	ldr	r5, [r3, #0]
 8006bb2:	6862      	ldr	r2, [r4, #4]
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f7f9 fb1a 	bl	80001f0 <memchr>
 8006bbc:	b108      	cbz	r0, 8006bc2 <_printf_i+0x1f2>
 8006bbe:	1b40      	subs	r0, r0, r5
 8006bc0:	6060      	str	r0, [r4, #4]
 8006bc2:	6863      	ldr	r3, [r4, #4]
 8006bc4:	6123      	str	r3, [r4, #16]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bcc:	e7a8      	b.n	8006b20 <_printf_i+0x150>
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	462a      	mov	r2, r5
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	47d0      	blx	sl
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d0ab      	beq.n	8006b34 <_printf_i+0x164>
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	079b      	lsls	r3, r3, #30
 8006be0:	d413      	bmi.n	8006c0a <_printf_i+0x23a>
 8006be2:	68e0      	ldr	r0, [r4, #12]
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	4298      	cmp	r0, r3
 8006be8:	bfb8      	it	lt
 8006bea:	4618      	movlt	r0, r3
 8006bec:	e7a4      	b.n	8006b38 <_printf_i+0x168>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4632      	mov	r2, r6
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	47d0      	blx	sl
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d09b      	beq.n	8006b34 <_printf_i+0x164>
 8006bfc:	3501      	adds	r5, #1
 8006bfe:	68e3      	ldr	r3, [r4, #12]
 8006c00:	9903      	ldr	r1, [sp, #12]
 8006c02:	1a5b      	subs	r3, r3, r1
 8006c04:	42ab      	cmp	r3, r5
 8006c06:	dcf2      	bgt.n	8006bee <_printf_i+0x21e>
 8006c08:	e7eb      	b.n	8006be2 <_printf_i+0x212>
 8006c0a:	2500      	movs	r5, #0
 8006c0c:	f104 0619 	add.w	r6, r4, #25
 8006c10:	e7f5      	b.n	8006bfe <_printf_i+0x22e>
 8006c12:	bf00      	nop
 8006c14:	0800aab6 	.word	0x0800aab6
 8006c18:	0800aac7 	.word	0x0800aac7

08006c1c <_scanf_float>:
 8006c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	b087      	sub	sp, #28
 8006c22:	4617      	mov	r7, r2
 8006c24:	9303      	str	r3, [sp, #12]
 8006c26:	688b      	ldr	r3, [r1, #8]
 8006c28:	1e5a      	subs	r2, r3, #1
 8006c2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c2e:	bf83      	ittte	hi
 8006c30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006c34:	195b      	addhi	r3, r3, r5
 8006c36:	9302      	strhi	r3, [sp, #8]
 8006c38:	2300      	movls	r3, #0
 8006c3a:	bf86      	itte	hi
 8006c3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c40:	608b      	strhi	r3, [r1, #8]
 8006c42:	9302      	strls	r3, [sp, #8]
 8006c44:	680b      	ldr	r3, [r1, #0]
 8006c46:	468b      	mov	fp, r1
 8006c48:	2500      	movs	r5, #0
 8006c4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c4e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006c52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c56:	4680      	mov	r8, r0
 8006c58:	460c      	mov	r4, r1
 8006c5a:	465e      	mov	r6, fp
 8006c5c:	46aa      	mov	sl, r5
 8006c5e:	46a9      	mov	r9, r5
 8006c60:	9501      	str	r5, [sp, #4]
 8006c62:	68a2      	ldr	r2, [r4, #8]
 8006c64:	b152      	cbz	r2, 8006c7c <_scanf_float+0x60>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b4e      	cmp	r3, #78	; 0x4e
 8006c6c:	d864      	bhi.n	8006d38 <_scanf_float+0x11c>
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	d83c      	bhi.n	8006cec <_scanf_float+0xd0>
 8006c72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006c76:	b2c8      	uxtb	r0, r1
 8006c78:	280e      	cmp	r0, #14
 8006c7a:	d93a      	bls.n	8006cf2 <_scanf_float+0xd6>
 8006c7c:	f1b9 0f00 	cmp.w	r9, #0
 8006c80:	d003      	beq.n	8006c8a <_scanf_float+0x6e>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c8e:	f1ba 0f01 	cmp.w	sl, #1
 8006c92:	f200 8113 	bhi.w	8006ebc <_scanf_float+0x2a0>
 8006c96:	455e      	cmp	r6, fp
 8006c98:	f200 8105 	bhi.w	8006ea6 <_scanf_float+0x28a>
 8006c9c:	2501      	movs	r5, #1
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	b007      	add	sp, #28
 8006ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006caa:	2a0d      	cmp	r2, #13
 8006cac:	d8e6      	bhi.n	8006c7c <_scanf_float+0x60>
 8006cae:	a101      	add	r1, pc, #4	; (adr r1, 8006cb4 <_scanf_float+0x98>)
 8006cb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cb4:	08006df3 	.word	0x08006df3
 8006cb8:	08006c7d 	.word	0x08006c7d
 8006cbc:	08006c7d 	.word	0x08006c7d
 8006cc0:	08006c7d 	.word	0x08006c7d
 8006cc4:	08006e53 	.word	0x08006e53
 8006cc8:	08006e2b 	.word	0x08006e2b
 8006ccc:	08006c7d 	.word	0x08006c7d
 8006cd0:	08006c7d 	.word	0x08006c7d
 8006cd4:	08006e01 	.word	0x08006e01
 8006cd8:	08006c7d 	.word	0x08006c7d
 8006cdc:	08006c7d 	.word	0x08006c7d
 8006ce0:	08006c7d 	.word	0x08006c7d
 8006ce4:	08006c7d 	.word	0x08006c7d
 8006ce8:	08006db9 	.word	0x08006db9
 8006cec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006cf0:	e7db      	b.n	8006caa <_scanf_float+0x8e>
 8006cf2:	290e      	cmp	r1, #14
 8006cf4:	d8c2      	bhi.n	8006c7c <_scanf_float+0x60>
 8006cf6:	a001      	add	r0, pc, #4	; (adr r0, 8006cfc <_scanf_float+0xe0>)
 8006cf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006cfc:	08006dab 	.word	0x08006dab
 8006d00:	08006c7d 	.word	0x08006c7d
 8006d04:	08006dab 	.word	0x08006dab
 8006d08:	08006e3f 	.word	0x08006e3f
 8006d0c:	08006c7d 	.word	0x08006c7d
 8006d10:	08006d59 	.word	0x08006d59
 8006d14:	08006d95 	.word	0x08006d95
 8006d18:	08006d95 	.word	0x08006d95
 8006d1c:	08006d95 	.word	0x08006d95
 8006d20:	08006d95 	.word	0x08006d95
 8006d24:	08006d95 	.word	0x08006d95
 8006d28:	08006d95 	.word	0x08006d95
 8006d2c:	08006d95 	.word	0x08006d95
 8006d30:	08006d95 	.word	0x08006d95
 8006d34:	08006d95 	.word	0x08006d95
 8006d38:	2b6e      	cmp	r3, #110	; 0x6e
 8006d3a:	d809      	bhi.n	8006d50 <_scanf_float+0x134>
 8006d3c:	2b60      	cmp	r3, #96	; 0x60
 8006d3e:	d8b2      	bhi.n	8006ca6 <_scanf_float+0x8a>
 8006d40:	2b54      	cmp	r3, #84	; 0x54
 8006d42:	d077      	beq.n	8006e34 <_scanf_float+0x218>
 8006d44:	2b59      	cmp	r3, #89	; 0x59
 8006d46:	d199      	bne.n	8006c7c <_scanf_float+0x60>
 8006d48:	2d07      	cmp	r5, #7
 8006d4a:	d197      	bne.n	8006c7c <_scanf_float+0x60>
 8006d4c:	2508      	movs	r5, #8
 8006d4e:	e029      	b.n	8006da4 <_scanf_float+0x188>
 8006d50:	2b74      	cmp	r3, #116	; 0x74
 8006d52:	d06f      	beq.n	8006e34 <_scanf_float+0x218>
 8006d54:	2b79      	cmp	r3, #121	; 0x79
 8006d56:	e7f6      	b.n	8006d46 <_scanf_float+0x12a>
 8006d58:	6821      	ldr	r1, [r4, #0]
 8006d5a:	05c8      	lsls	r0, r1, #23
 8006d5c:	d51a      	bpl.n	8006d94 <_scanf_float+0x178>
 8006d5e:	9b02      	ldr	r3, [sp, #8]
 8006d60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d64:	6021      	str	r1, [r4, #0]
 8006d66:	f109 0901 	add.w	r9, r9, #1
 8006d6a:	b11b      	cbz	r3, 8006d74 <_scanf_float+0x158>
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	3201      	adds	r2, #1
 8006d70:	9302      	str	r3, [sp, #8]
 8006d72:	60a2      	str	r2, [r4, #8]
 8006d74:	68a3      	ldr	r3, [r4, #8]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	60a3      	str	r3, [r4, #8]
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	6123      	str	r3, [r4, #16]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	607b      	str	r3, [r7, #4]
 8006d88:	f340 8084 	ble.w	8006e94 <_scanf_float+0x278>
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	e766      	b.n	8006c62 <_scanf_float+0x46>
 8006d94:	eb1a 0f05 	cmn.w	sl, r5
 8006d98:	f47f af70 	bne.w	8006c7c <_scanf_float+0x60>
 8006d9c:	6822      	ldr	r2, [r4, #0]
 8006d9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006da2:	6022      	str	r2, [r4, #0]
 8006da4:	f806 3b01 	strb.w	r3, [r6], #1
 8006da8:	e7e4      	b.n	8006d74 <_scanf_float+0x158>
 8006daa:	6822      	ldr	r2, [r4, #0]
 8006dac:	0610      	lsls	r0, r2, #24
 8006dae:	f57f af65 	bpl.w	8006c7c <_scanf_float+0x60>
 8006db2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006db6:	e7f4      	b.n	8006da2 <_scanf_float+0x186>
 8006db8:	f1ba 0f00 	cmp.w	sl, #0
 8006dbc:	d10e      	bne.n	8006ddc <_scanf_float+0x1c0>
 8006dbe:	f1b9 0f00 	cmp.w	r9, #0
 8006dc2:	d10e      	bne.n	8006de2 <_scanf_float+0x1c6>
 8006dc4:	6822      	ldr	r2, [r4, #0]
 8006dc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006dca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006dce:	d108      	bne.n	8006de2 <_scanf_float+0x1c6>
 8006dd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006dd4:	6022      	str	r2, [r4, #0]
 8006dd6:	f04f 0a01 	mov.w	sl, #1
 8006dda:	e7e3      	b.n	8006da4 <_scanf_float+0x188>
 8006ddc:	f1ba 0f02 	cmp.w	sl, #2
 8006de0:	d055      	beq.n	8006e8e <_scanf_float+0x272>
 8006de2:	2d01      	cmp	r5, #1
 8006de4:	d002      	beq.n	8006dec <_scanf_float+0x1d0>
 8006de6:	2d04      	cmp	r5, #4
 8006de8:	f47f af48 	bne.w	8006c7c <_scanf_float+0x60>
 8006dec:	3501      	adds	r5, #1
 8006dee:	b2ed      	uxtb	r5, r5
 8006df0:	e7d8      	b.n	8006da4 <_scanf_float+0x188>
 8006df2:	f1ba 0f01 	cmp.w	sl, #1
 8006df6:	f47f af41 	bne.w	8006c7c <_scanf_float+0x60>
 8006dfa:	f04f 0a02 	mov.w	sl, #2
 8006dfe:	e7d1      	b.n	8006da4 <_scanf_float+0x188>
 8006e00:	b97d      	cbnz	r5, 8006e22 <_scanf_float+0x206>
 8006e02:	f1b9 0f00 	cmp.w	r9, #0
 8006e06:	f47f af3c 	bne.w	8006c82 <_scanf_float+0x66>
 8006e0a:	6822      	ldr	r2, [r4, #0]
 8006e0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e14:	f47f af39 	bne.w	8006c8a <_scanf_float+0x6e>
 8006e18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e1c:	6022      	str	r2, [r4, #0]
 8006e1e:	2501      	movs	r5, #1
 8006e20:	e7c0      	b.n	8006da4 <_scanf_float+0x188>
 8006e22:	2d03      	cmp	r5, #3
 8006e24:	d0e2      	beq.n	8006dec <_scanf_float+0x1d0>
 8006e26:	2d05      	cmp	r5, #5
 8006e28:	e7de      	b.n	8006de8 <_scanf_float+0x1cc>
 8006e2a:	2d02      	cmp	r5, #2
 8006e2c:	f47f af26 	bne.w	8006c7c <_scanf_float+0x60>
 8006e30:	2503      	movs	r5, #3
 8006e32:	e7b7      	b.n	8006da4 <_scanf_float+0x188>
 8006e34:	2d06      	cmp	r5, #6
 8006e36:	f47f af21 	bne.w	8006c7c <_scanf_float+0x60>
 8006e3a:	2507      	movs	r5, #7
 8006e3c:	e7b2      	b.n	8006da4 <_scanf_float+0x188>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	0591      	lsls	r1, r2, #22
 8006e42:	f57f af1b 	bpl.w	8006c7c <_scanf_float+0x60>
 8006e46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006e4a:	6022      	str	r2, [r4, #0]
 8006e4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e50:	e7a8      	b.n	8006da4 <_scanf_float+0x188>
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006e58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006e5c:	d006      	beq.n	8006e6c <_scanf_float+0x250>
 8006e5e:	0550      	lsls	r0, r2, #21
 8006e60:	f57f af0c 	bpl.w	8006c7c <_scanf_float+0x60>
 8006e64:	f1b9 0f00 	cmp.w	r9, #0
 8006e68:	f43f af0f 	beq.w	8006c8a <_scanf_float+0x6e>
 8006e6c:	0591      	lsls	r1, r2, #22
 8006e6e:	bf58      	it	pl
 8006e70:	9901      	ldrpl	r1, [sp, #4]
 8006e72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e76:	bf58      	it	pl
 8006e78:	eba9 0101 	subpl.w	r1, r9, r1
 8006e7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006e80:	bf58      	it	pl
 8006e82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e86:	6022      	str	r2, [r4, #0]
 8006e88:	f04f 0900 	mov.w	r9, #0
 8006e8c:	e78a      	b.n	8006da4 <_scanf_float+0x188>
 8006e8e:	f04f 0a03 	mov.w	sl, #3
 8006e92:	e787      	b.n	8006da4 <_scanf_float+0x188>
 8006e94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e98:	4639      	mov	r1, r7
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	4798      	blx	r3
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f43f aedf 	beq.w	8006c62 <_scanf_float+0x46>
 8006ea4:	e6ea      	b.n	8006c7c <_scanf_float+0x60>
 8006ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eae:	463a      	mov	r2, r7
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	4798      	blx	r3
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	6123      	str	r3, [r4, #16]
 8006eba:	e6ec      	b.n	8006c96 <_scanf_float+0x7a>
 8006ebc:	1e6b      	subs	r3, r5, #1
 8006ebe:	2b06      	cmp	r3, #6
 8006ec0:	d825      	bhi.n	8006f0e <_scanf_float+0x2f2>
 8006ec2:	2d02      	cmp	r5, #2
 8006ec4:	d836      	bhi.n	8006f34 <_scanf_float+0x318>
 8006ec6:	455e      	cmp	r6, fp
 8006ec8:	f67f aee8 	bls.w	8006c9c <_scanf_float+0x80>
 8006ecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ed0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ed4:	463a      	mov	r2, r7
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	4798      	blx	r3
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	6123      	str	r3, [r4, #16]
 8006ee0:	e7f1      	b.n	8006ec6 <_scanf_float+0x2aa>
 8006ee2:	9802      	ldr	r0, [sp, #8]
 8006ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ee8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006eec:	9002      	str	r0, [sp, #8]
 8006eee:	463a      	mov	r2, r7
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4798      	blx	r3
 8006ef4:	6923      	ldr	r3, [r4, #16]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	6123      	str	r3, [r4, #16]
 8006efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006efe:	fa5f fa8a 	uxtb.w	sl, sl
 8006f02:	f1ba 0f02 	cmp.w	sl, #2
 8006f06:	d1ec      	bne.n	8006ee2 <_scanf_float+0x2c6>
 8006f08:	3d03      	subs	r5, #3
 8006f0a:	b2ed      	uxtb	r5, r5
 8006f0c:	1b76      	subs	r6, r6, r5
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	05da      	lsls	r2, r3, #23
 8006f12:	d52f      	bpl.n	8006f74 <_scanf_float+0x358>
 8006f14:	055b      	lsls	r3, r3, #21
 8006f16:	d510      	bpl.n	8006f3a <_scanf_float+0x31e>
 8006f18:	455e      	cmp	r6, fp
 8006f1a:	f67f aebf 	bls.w	8006c9c <_scanf_float+0x80>
 8006f1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f26:	463a      	mov	r2, r7
 8006f28:	4640      	mov	r0, r8
 8006f2a:	4798      	blx	r3
 8006f2c:	6923      	ldr	r3, [r4, #16]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	6123      	str	r3, [r4, #16]
 8006f32:	e7f1      	b.n	8006f18 <_scanf_float+0x2fc>
 8006f34:	46aa      	mov	sl, r5
 8006f36:	9602      	str	r6, [sp, #8]
 8006f38:	e7df      	b.n	8006efa <_scanf_float+0x2de>
 8006f3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	2965      	cmp	r1, #101	; 0x65
 8006f42:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f46:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f4a:	6123      	str	r3, [r4, #16]
 8006f4c:	d00c      	beq.n	8006f68 <_scanf_float+0x34c>
 8006f4e:	2945      	cmp	r1, #69	; 0x45
 8006f50:	d00a      	beq.n	8006f68 <_scanf_float+0x34c>
 8006f52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f56:	463a      	mov	r2, r7
 8006f58:	4640      	mov	r0, r8
 8006f5a:	4798      	blx	r3
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	1eb5      	subs	r5, r6, #2
 8006f66:	6123      	str	r3, [r4, #16]
 8006f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f6c:	463a      	mov	r2, r7
 8006f6e:	4640      	mov	r0, r8
 8006f70:	4798      	blx	r3
 8006f72:	462e      	mov	r6, r5
 8006f74:	6825      	ldr	r5, [r4, #0]
 8006f76:	f015 0510 	ands.w	r5, r5, #16
 8006f7a:	d159      	bne.n	8007030 <_scanf_float+0x414>
 8006f7c:	7035      	strb	r5, [r6, #0]
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f88:	d11b      	bne.n	8006fc2 <_scanf_float+0x3a6>
 8006f8a:	9b01      	ldr	r3, [sp, #4]
 8006f8c:	454b      	cmp	r3, r9
 8006f8e:	eba3 0209 	sub.w	r2, r3, r9
 8006f92:	d123      	bne.n	8006fdc <_scanf_float+0x3c0>
 8006f94:	2200      	movs	r2, #0
 8006f96:	4659      	mov	r1, fp
 8006f98:	4640      	mov	r0, r8
 8006f9a:	f000 fea7 	bl	8007cec <_strtod_r>
 8006f9e:	6822      	ldr	r2, [r4, #0]
 8006fa0:	9b03      	ldr	r3, [sp, #12]
 8006fa2:	f012 0f02 	tst.w	r2, #2
 8006fa6:	ec57 6b10 	vmov	r6, r7, d0
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	d021      	beq.n	8006ff2 <_scanf_float+0x3d6>
 8006fae:	9903      	ldr	r1, [sp, #12]
 8006fb0:	1d1a      	adds	r2, r3, #4
 8006fb2:	600a      	str	r2, [r1, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	e9c3 6700 	strd	r6, r7, [r3]
 8006fba:	68e3      	ldr	r3, [r4, #12]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	60e3      	str	r3, [r4, #12]
 8006fc0:	e66d      	b.n	8006c9e <_scanf_float+0x82>
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0e5      	beq.n	8006f94 <_scanf_float+0x378>
 8006fc8:	9905      	ldr	r1, [sp, #20]
 8006fca:	230a      	movs	r3, #10
 8006fcc:	462a      	mov	r2, r5
 8006fce:	3101      	adds	r1, #1
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	f000 ff13 	bl	8007dfc <_strtol_r>
 8006fd6:	9b04      	ldr	r3, [sp, #16]
 8006fd8:	9e05      	ldr	r6, [sp, #20]
 8006fda:	1ac2      	subs	r2, r0, r3
 8006fdc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006fe0:	429e      	cmp	r6, r3
 8006fe2:	bf28      	it	cs
 8006fe4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006fe8:	4912      	ldr	r1, [pc, #72]	; (8007034 <_scanf_float+0x418>)
 8006fea:	4630      	mov	r0, r6
 8006fec:	f000 f83c 	bl	8007068 <siprintf>
 8006ff0:	e7d0      	b.n	8006f94 <_scanf_float+0x378>
 8006ff2:	9903      	ldr	r1, [sp, #12]
 8006ff4:	f012 0f04 	tst.w	r2, #4
 8006ff8:	f103 0204 	add.w	r2, r3, #4
 8006ffc:	600a      	str	r2, [r1, #0]
 8006ffe:	d1d9      	bne.n	8006fb4 <_scanf_float+0x398>
 8007000:	f8d3 8000 	ldr.w	r8, [r3]
 8007004:	ee10 2a10 	vmov	r2, s0
 8007008:	ee10 0a10 	vmov	r0, s0
 800700c:	463b      	mov	r3, r7
 800700e:	4639      	mov	r1, r7
 8007010:	f7f9 fd94 	bl	8000b3c <__aeabi_dcmpun>
 8007014:	b128      	cbz	r0, 8007022 <_scanf_float+0x406>
 8007016:	4808      	ldr	r0, [pc, #32]	; (8007038 <_scanf_float+0x41c>)
 8007018:	f000 f820 	bl	800705c <nanf>
 800701c:	ed88 0a00 	vstr	s0, [r8]
 8007020:	e7cb      	b.n	8006fba <_scanf_float+0x39e>
 8007022:	4630      	mov	r0, r6
 8007024:	4639      	mov	r1, r7
 8007026:	f7f9 fde7 	bl	8000bf8 <__aeabi_d2f>
 800702a:	f8c8 0000 	str.w	r0, [r8]
 800702e:	e7c4      	b.n	8006fba <_scanf_float+0x39e>
 8007030:	2500      	movs	r5, #0
 8007032:	e634      	b.n	8006c9e <_scanf_float+0x82>
 8007034:	0800aad8 	.word	0x0800aad8
 8007038:	0800aee0 	.word	0x0800aee0

0800703c <_sbrk_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d06      	ldr	r5, [pc, #24]	; (8007058 <_sbrk_r+0x1c>)
 8007040:	2300      	movs	r3, #0
 8007042:	4604      	mov	r4, r0
 8007044:	4608      	mov	r0, r1
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	f7fa fc72 	bl	8001930 <_sbrk>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_sbrk_r+0x1a>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_sbrk_r+0x1a>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20000454 	.word	0x20000454

0800705c <nanf>:
 800705c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007064 <nanf+0x8>
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	7fc00000 	.word	0x7fc00000

08007068 <siprintf>:
 8007068:	b40e      	push	{r1, r2, r3}
 800706a:	b500      	push	{lr}
 800706c:	b09c      	sub	sp, #112	; 0x70
 800706e:	ab1d      	add	r3, sp, #116	; 0x74
 8007070:	9002      	str	r0, [sp, #8]
 8007072:	9006      	str	r0, [sp, #24]
 8007074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007078:	4809      	ldr	r0, [pc, #36]	; (80070a0 <siprintf+0x38>)
 800707a:	9107      	str	r1, [sp, #28]
 800707c:	9104      	str	r1, [sp, #16]
 800707e:	4909      	ldr	r1, [pc, #36]	; (80070a4 <siprintf+0x3c>)
 8007080:	f853 2b04 	ldr.w	r2, [r3], #4
 8007084:	9105      	str	r1, [sp, #20]
 8007086:	6800      	ldr	r0, [r0, #0]
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	a902      	add	r1, sp, #8
 800708c:	f002 fe04 	bl	8009c98 <_svfiprintf_r>
 8007090:	9b02      	ldr	r3, [sp, #8]
 8007092:	2200      	movs	r2, #0
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	b01c      	add	sp, #112	; 0x70
 8007098:	f85d eb04 	ldr.w	lr, [sp], #4
 800709c:	b003      	add	sp, #12
 800709e:	4770      	bx	lr
 80070a0:	2000000c 	.word	0x2000000c
 80070a4:	ffff0208 	.word	0xffff0208

080070a8 <sulp>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	4604      	mov	r4, r0
 80070ac:	460d      	mov	r5, r1
 80070ae:	ec45 4b10 	vmov	d0, r4, r5
 80070b2:	4616      	mov	r6, r2
 80070b4:	f002 fc30 	bl	8009918 <__ulp>
 80070b8:	ec51 0b10 	vmov	r0, r1, d0
 80070bc:	b17e      	cbz	r6, 80070de <sulp+0x36>
 80070be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dd09      	ble.n	80070de <sulp+0x36>
 80070ca:	051b      	lsls	r3, r3, #20
 80070cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070d0:	2400      	movs	r4, #0
 80070d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070d6:	4622      	mov	r2, r4
 80070d8:	462b      	mov	r3, r5
 80070da:	f7f9 fa95 	bl	8000608 <__aeabi_dmul>
 80070de:	bd70      	pop	{r4, r5, r6, pc}

080070e0 <_strtod_l>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	ed2d 8b02 	vpush	{d8}
 80070e8:	b09d      	sub	sp, #116	; 0x74
 80070ea:	461f      	mov	r7, r3
 80070ec:	2300      	movs	r3, #0
 80070ee:	9318      	str	r3, [sp, #96]	; 0x60
 80070f0:	4ba2      	ldr	r3, [pc, #648]	; (800737c <_strtod_l+0x29c>)
 80070f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	9305      	str	r3, [sp, #20]
 80070f8:	4604      	mov	r4, r0
 80070fa:	4618      	mov	r0, r3
 80070fc:	4688      	mov	r8, r1
 80070fe:	f7f9 f86f 	bl	80001e0 <strlen>
 8007102:	f04f 0a00 	mov.w	sl, #0
 8007106:	4605      	mov	r5, r0
 8007108:	f04f 0b00 	mov.w	fp, #0
 800710c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	2a2b      	cmp	r2, #43	; 0x2b
 8007116:	d04e      	beq.n	80071b6 <_strtod_l+0xd6>
 8007118:	d83b      	bhi.n	8007192 <_strtod_l+0xb2>
 800711a:	2a0d      	cmp	r2, #13
 800711c:	d834      	bhi.n	8007188 <_strtod_l+0xa8>
 800711e:	2a08      	cmp	r2, #8
 8007120:	d834      	bhi.n	800718c <_strtod_l+0xac>
 8007122:	2a00      	cmp	r2, #0
 8007124:	d03e      	beq.n	80071a4 <_strtod_l+0xc4>
 8007126:	2300      	movs	r3, #0
 8007128:	930a      	str	r3, [sp, #40]	; 0x28
 800712a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800712c:	7833      	ldrb	r3, [r6, #0]
 800712e:	2b30      	cmp	r3, #48	; 0x30
 8007130:	f040 80b0 	bne.w	8007294 <_strtod_l+0x1b4>
 8007134:	7873      	ldrb	r3, [r6, #1]
 8007136:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800713a:	2b58      	cmp	r3, #88	; 0x58
 800713c:	d168      	bne.n	8007210 <_strtod_l+0x130>
 800713e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	ab18      	add	r3, sp, #96	; 0x60
 8007144:	9702      	str	r7, [sp, #8]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	4a8d      	ldr	r2, [pc, #564]	; (8007380 <_strtod_l+0x2a0>)
 800714a:	ab19      	add	r3, sp, #100	; 0x64
 800714c:	a917      	add	r1, sp, #92	; 0x5c
 800714e:	4620      	mov	r0, r4
 8007150:	f001 fd38 	bl	8008bc4 <__gethex>
 8007154:	f010 0707 	ands.w	r7, r0, #7
 8007158:	4605      	mov	r5, r0
 800715a:	d005      	beq.n	8007168 <_strtod_l+0x88>
 800715c:	2f06      	cmp	r7, #6
 800715e:	d12c      	bne.n	80071ba <_strtod_l+0xda>
 8007160:	3601      	adds	r6, #1
 8007162:	2300      	movs	r3, #0
 8007164:	9617      	str	r6, [sp, #92]	; 0x5c
 8007166:	930a      	str	r3, [sp, #40]	; 0x28
 8007168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 8590 	bne.w	8007c90 <_strtod_l+0xbb0>
 8007170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007172:	b1eb      	cbz	r3, 80071b0 <_strtod_l+0xd0>
 8007174:	4652      	mov	r2, sl
 8007176:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800717a:	ec43 2b10 	vmov	d0, r2, r3
 800717e:	b01d      	add	sp, #116	; 0x74
 8007180:	ecbd 8b02 	vpop	{d8}
 8007184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007188:	2a20      	cmp	r2, #32
 800718a:	d1cc      	bne.n	8007126 <_strtod_l+0x46>
 800718c:	3301      	adds	r3, #1
 800718e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007190:	e7be      	b.n	8007110 <_strtod_l+0x30>
 8007192:	2a2d      	cmp	r2, #45	; 0x2d
 8007194:	d1c7      	bne.n	8007126 <_strtod_l+0x46>
 8007196:	2201      	movs	r2, #1
 8007198:	920a      	str	r2, [sp, #40]	; 0x28
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	9217      	str	r2, [sp, #92]	; 0x5c
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1c2      	bne.n	800712a <_strtod_l+0x4a>
 80071a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f040 856e 	bne.w	8007c8c <_strtod_l+0xbac>
 80071b0:	4652      	mov	r2, sl
 80071b2:	465b      	mov	r3, fp
 80071b4:	e7e1      	b.n	800717a <_strtod_l+0x9a>
 80071b6:	2200      	movs	r2, #0
 80071b8:	e7ee      	b.n	8007198 <_strtod_l+0xb8>
 80071ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071bc:	b13a      	cbz	r2, 80071ce <_strtod_l+0xee>
 80071be:	2135      	movs	r1, #53	; 0x35
 80071c0:	a81a      	add	r0, sp, #104	; 0x68
 80071c2:	f002 fcb4 	bl	8009b2e <__copybits>
 80071c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071c8:	4620      	mov	r0, r4
 80071ca:	f002 f873 	bl	80092b4 <_Bfree>
 80071ce:	3f01      	subs	r7, #1
 80071d0:	2f04      	cmp	r7, #4
 80071d2:	d806      	bhi.n	80071e2 <_strtod_l+0x102>
 80071d4:	e8df f007 	tbb	[pc, r7]
 80071d8:	1714030a 	.word	0x1714030a
 80071dc:	0a          	.byte	0x0a
 80071dd:	00          	.byte	0x00
 80071de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80071e2:	0728      	lsls	r0, r5, #28
 80071e4:	d5c0      	bpl.n	8007168 <_strtod_l+0x88>
 80071e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80071ea:	e7bd      	b.n	8007168 <_strtod_l+0x88>
 80071ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80071f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80071fe:	e7f0      	b.n	80071e2 <_strtod_l+0x102>
 8007200:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007384 <_strtod_l+0x2a4>
 8007204:	e7ed      	b.n	80071e2 <_strtod_l+0x102>
 8007206:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800720a:	f04f 3aff 	mov.w	sl, #4294967295
 800720e:	e7e8      	b.n	80071e2 <_strtod_l+0x102>
 8007210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	9217      	str	r2, [sp, #92]	; 0x5c
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b30      	cmp	r3, #48	; 0x30
 800721a:	d0f9      	beq.n	8007210 <_strtod_l+0x130>
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0a3      	beq.n	8007168 <_strtod_l+0x88>
 8007220:	2301      	movs	r3, #1
 8007222:	f04f 0900 	mov.w	r9, #0
 8007226:	9304      	str	r3, [sp, #16]
 8007228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800722a:	9308      	str	r3, [sp, #32]
 800722c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007230:	464f      	mov	r7, r9
 8007232:	220a      	movs	r2, #10
 8007234:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007236:	7806      	ldrb	r6, [r0, #0]
 8007238:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800723c:	b2d9      	uxtb	r1, r3
 800723e:	2909      	cmp	r1, #9
 8007240:	d92a      	bls.n	8007298 <_strtod_l+0x1b8>
 8007242:	9905      	ldr	r1, [sp, #20]
 8007244:	462a      	mov	r2, r5
 8007246:	f002 fe2f 	bl	8009ea8 <strncmp>
 800724a:	b398      	cbz	r0, 80072b4 <_strtod_l+0x1d4>
 800724c:	2000      	movs	r0, #0
 800724e:	4632      	mov	r2, r6
 8007250:	463d      	mov	r5, r7
 8007252:	9005      	str	r0, [sp, #20]
 8007254:	4603      	mov	r3, r0
 8007256:	2a65      	cmp	r2, #101	; 0x65
 8007258:	d001      	beq.n	800725e <_strtod_l+0x17e>
 800725a:	2a45      	cmp	r2, #69	; 0x45
 800725c:	d118      	bne.n	8007290 <_strtod_l+0x1b0>
 800725e:	b91d      	cbnz	r5, 8007268 <_strtod_l+0x188>
 8007260:	9a04      	ldr	r2, [sp, #16]
 8007262:	4302      	orrs	r2, r0
 8007264:	d09e      	beq.n	80071a4 <_strtod_l+0xc4>
 8007266:	2500      	movs	r5, #0
 8007268:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800726c:	f108 0201 	add.w	r2, r8, #1
 8007270:	9217      	str	r2, [sp, #92]	; 0x5c
 8007272:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007276:	2a2b      	cmp	r2, #43	; 0x2b
 8007278:	d075      	beq.n	8007366 <_strtod_l+0x286>
 800727a:	2a2d      	cmp	r2, #45	; 0x2d
 800727c:	d07b      	beq.n	8007376 <_strtod_l+0x296>
 800727e:	f04f 0c00 	mov.w	ip, #0
 8007282:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007286:	2909      	cmp	r1, #9
 8007288:	f240 8082 	bls.w	8007390 <_strtod_l+0x2b0>
 800728c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007290:	2600      	movs	r6, #0
 8007292:	e09d      	b.n	80073d0 <_strtod_l+0x2f0>
 8007294:	2300      	movs	r3, #0
 8007296:	e7c4      	b.n	8007222 <_strtod_l+0x142>
 8007298:	2f08      	cmp	r7, #8
 800729a:	bfd8      	it	le
 800729c:	9907      	ldrle	r1, [sp, #28]
 800729e:	f100 0001 	add.w	r0, r0, #1
 80072a2:	bfda      	itte	le
 80072a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80072a8:	9307      	strle	r3, [sp, #28]
 80072aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80072ae:	3701      	adds	r7, #1
 80072b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80072b2:	e7bf      	b.n	8007234 <_strtod_l+0x154>
 80072b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072b6:	195a      	adds	r2, r3, r5
 80072b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80072ba:	5d5a      	ldrb	r2, [r3, r5]
 80072bc:	2f00      	cmp	r7, #0
 80072be:	d037      	beq.n	8007330 <_strtod_l+0x250>
 80072c0:	9005      	str	r0, [sp, #20]
 80072c2:	463d      	mov	r5, r7
 80072c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80072c8:	2b09      	cmp	r3, #9
 80072ca:	d912      	bls.n	80072f2 <_strtod_l+0x212>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e7c2      	b.n	8007256 <_strtod_l+0x176>
 80072d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80072d6:	785a      	ldrb	r2, [r3, #1]
 80072d8:	3001      	adds	r0, #1
 80072da:	2a30      	cmp	r2, #48	; 0x30
 80072dc:	d0f8      	beq.n	80072d0 <_strtod_l+0x1f0>
 80072de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	f200 84d9 	bhi.w	8007c9a <_strtod_l+0xbba>
 80072e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ea:	9005      	str	r0, [sp, #20]
 80072ec:	2000      	movs	r0, #0
 80072ee:	9308      	str	r3, [sp, #32]
 80072f0:	4605      	mov	r5, r0
 80072f2:	3a30      	subs	r2, #48	; 0x30
 80072f4:	f100 0301 	add.w	r3, r0, #1
 80072f8:	d014      	beq.n	8007324 <_strtod_l+0x244>
 80072fa:	9905      	ldr	r1, [sp, #20]
 80072fc:	4419      	add	r1, r3
 80072fe:	9105      	str	r1, [sp, #20]
 8007300:	462b      	mov	r3, r5
 8007302:	eb00 0e05 	add.w	lr, r0, r5
 8007306:	210a      	movs	r1, #10
 8007308:	4573      	cmp	r3, lr
 800730a:	d113      	bne.n	8007334 <_strtod_l+0x254>
 800730c:	182b      	adds	r3, r5, r0
 800730e:	2b08      	cmp	r3, #8
 8007310:	f105 0501 	add.w	r5, r5, #1
 8007314:	4405      	add	r5, r0
 8007316:	dc1c      	bgt.n	8007352 <_strtod_l+0x272>
 8007318:	9907      	ldr	r1, [sp, #28]
 800731a:	230a      	movs	r3, #10
 800731c:	fb03 2301 	mla	r3, r3, r1, r2
 8007320:	9307      	str	r3, [sp, #28]
 8007322:	2300      	movs	r3, #0
 8007324:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007326:	1c51      	adds	r1, r2, #1
 8007328:	9117      	str	r1, [sp, #92]	; 0x5c
 800732a:	7852      	ldrb	r2, [r2, #1]
 800732c:	4618      	mov	r0, r3
 800732e:	e7c9      	b.n	80072c4 <_strtod_l+0x1e4>
 8007330:	4638      	mov	r0, r7
 8007332:	e7d2      	b.n	80072da <_strtod_l+0x1fa>
 8007334:	2b08      	cmp	r3, #8
 8007336:	dc04      	bgt.n	8007342 <_strtod_l+0x262>
 8007338:	9e07      	ldr	r6, [sp, #28]
 800733a:	434e      	muls	r6, r1
 800733c:	9607      	str	r6, [sp, #28]
 800733e:	3301      	adds	r3, #1
 8007340:	e7e2      	b.n	8007308 <_strtod_l+0x228>
 8007342:	f103 0c01 	add.w	ip, r3, #1
 8007346:	f1bc 0f10 	cmp.w	ip, #16
 800734a:	bfd8      	it	le
 800734c:	fb01 f909 	mulle.w	r9, r1, r9
 8007350:	e7f5      	b.n	800733e <_strtod_l+0x25e>
 8007352:	2d10      	cmp	r5, #16
 8007354:	bfdc      	itt	le
 8007356:	230a      	movle	r3, #10
 8007358:	fb03 2909 	mlale	r9, r3, r9, r2
 800735c:	e7e1      	b.n	8007322 <_strtod_l+0x242>
 800735e:	2300      	movs	r3, #0
 8007360:	9305      	str	r3, [sp, #20]
 8007362:	2301      	movs	r3, #1
 8007364:	e77c      	b.n	8007260 <_strtod_l+0x180>
 8007366:	f04f 0c00 	mov.w	ip, #0
 800736a:	f108 0202 	add.w	r2, r8, #2
 800736e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007370:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007374:	e785      	b.n	8007282 <_strtod_l+0x1a2>
 8007376:	f04f 0c01 	mov.w	ip, #1
 800737a:	e7f6      	b.n	800736a <_strtod_l+0x28a>
 800737c:	0800ad28 	.word	0x0800ad28
 8007380:	0800aae0 	.word	0x0800aae0
 8007384:	7ff00000 	.word	0x7ff00000
 8007388:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800738a:	1c51      	adds	r1, r2, #1
 800738c:	9117      	str	r1, [sp, #92]	; 0x5c
 800738e:	7852      	ldrb	r2, [r2, #1]
 8007390:	2a30      	cmp	r2, #48	; 0x30
 8007392:	d0f9      	beq.n	8007388 <_strtod_l+0x2a8>
 8007394:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007398:	2908      	cmp	r1, #8
 800739a:	f63f af79 	bhi.w	8007290 <_strtod_l+0x1b0>
 800739e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80073a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073a4:	9206      	str	r2, [sp, #24]
 80073a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073a8:	1c51      	adds	r1, r2, #1
 80073aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80073ac:	7852      	ldrb	r2, [r2, #1]
 80073ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80073b2:	2e09      	cmp	r6, #9
 80073b4:	d937      	bls.n	8007426 <_strtod_l+0x346>
 80073b6:	9e06      	ldr	r6, [sp, #24]
 80073b8:	1b89      	subs	r1, r1, r6
 80073ba:	2908      	cmp	r1, #8
 80073bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80073c0:	dc02      	bgt.n	80073c8 <_strtod_l+0x2e8>
 80073c2:	4576      	cmp	r6, lr
 80073c4:	bfa8      	it	ge
 80073c6:	4676      	movge	r6, lr
 80073c8:	f1bc 0f00 	cmp.w	ip, #0
 80073cc:	d000      	beq.n	80073d0 <_strtod_l+0x2f0>
 80073ce:	4276      	negs	r6, r6
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	d14d      	bne.n	8007470 <_strtod_l+0x390>
 80073d4:	9904      	ldr	r1, [sp, #16]
 80073d6:	4301      	orrs	r1, r0
 80073d8:	f47f aec6 	bne.w	8007168 <_strtod_l+0x88>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f47f aee1 	bne.w	80071a4 <_strtod_l+0xc4>
 80073e2:	2a69      	cmp	r2, #105	; 0x69
 80073e4:	d027      	beq.n	8007436 <_strtod_l+0x356>
 80073e6:	dc24      	bgt.n	8007432 <_strtod_l+0x352>
 80073e8:	2a49      	cmp	r2, #73	; 0x49
 80073ea:	d024      	beq.n	8007436 <_strtod_l+0x356>
 80073ec:	2a4e      	cmp	r2, #78	; 0x4e
 80073ee:	f47f aed9 	bne.w	80071a4 <_strtod_l+0xc4>
 80073f2:	499f      	ldr	r1, [pc, #636]	; (8007670 <_strtod_l+0x590>)
 80073f4:	a817      	add	r0, sp, #92	; 0x5c
 80073f6:	f001 fe3d 	bl	8009074 <__match>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	f43f aed2 	beq.w	80071a4 <_strtod_l+0xc4>
 8007400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b28      	cmp	r3, #40	; 0x28
 8007406:	d12d      	bne.n	8007464 <_strtod_l+0x384>
 8007408:	499a      	ldr	r1, [pc, #616]	; (8007674 <_strtod_l+0x594>)
 800740a:	aa1a      	add	r2, sp, #104	; 0x68
 800740c:	a817      	add	r0, sp, #92	; 0x5c
 800740e:	f001 fe45 	bl	800909c <__hexnan>
 8007412:	2805      	cmp	r0, #5
 8007414:	d126      	bne.n	8007464 <_strtod_l+0x384>
 8007416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007418:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800741c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007420:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007424:	e6a0      	b.n	8007168 <_strtod_l+0x88>
 8007426:	210a      	movs	r1, #10
 8007428:	fb01 2e0e 	mla	lr, r1, lr, r2
 800742c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007430:	e7b9      	b.n	80073a6 <_strtod_l+0x2c6>
 8007432:	2a6e      	cmp	r2, #110	; 0x6e
 8007434:	e7db      	b.n	80073ee <_strtod_l+0x30e>
 8007436:	4990      	ldr	r1, [pc, #576]	; (8007678 <_strtod_l+0x598>)
 8007438:	a817      	add	r0, sp, #92	; 0x5c
 800743a:	f001 fe1b 	bl	8009074 <__match>
 800743e:	2800      	cmp	r0, #0
 8007440:	f43f aeb0 	beq.w	80071a4 <_strtod_l+0xc4>
 8007444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007446:	498d      	ldr	r1, [pc, #564]	; (800767c <_strtod_l+0x59c>)
 8007448:	3b01      	subs	r3, #1
 800744a:	a817      	add	r0, sp, #92	; 0x5c
 800744c:	9317      	str	r3, [sp, #92]	; 0x5c
 800744e:	f001 fe11 	bl	8009074 <__match>
 8007452:	b910      	cbnz	r0, 800745a <_strtod_l+0x37a>
 8007454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007456:	3301      	adds	r3, #1
 8007458:	9317      	str	r3, [sp, #92]	; 0x5c
 800745a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800768c <_strtod_l+0x5ac>
 800745e:	f04f 0a00 	mov.w	sl, #0
 8007462:	e681      	b.n	8007168 <_strtod_l+0x88>
 8007464:	4886      	ldr	r0, [pc, #536]	; (8007680 <_strtod_l+0x5a0>)
 8007466:	f002 fd17 	bl	8009e98 <nan>
 800746a:	ec5b ab10 	vmov	sl, fp, d0
 800746e:	e67b      	b.n	8007168 <_strtod_l+0x88>
 8007470:	9b05      	ldr	r3, [sp, #20]
 8007472:	9807      	ldr	r0, [sp, #28]
 8007474:	1af3      	subs	r3, r6, r3
 8007476:	2f00      	cmp	r7, #0
 8007478:	bf08      	it	eq
 800747a:	462f      	moveq	r7, r5
 800747c:	2d10      	cmp	r5, #16
 800747e:	9306      	str	r3, [sp, #24]
 8007480:	46a8      	mov	r8, r5
 8007482:	bfa8      	it	ge
 8007484:	f04f 0810 	movge.w	r8, #16
 8007488:	f7f9 f844 	bl	8000514 <__aeabi_ui2d>
 800748c:	2d09      	cmp	r5, #9
 800748e:	4682      	mov	sl, r0
 8007490:	468b      	mov	fp, r1
 8007492:	dd13      	ble.n	80074bc <_strtod_l+0x3dc>
 8007494:	4b7b      	ldr	r3, [pc, #492]	; (8007684 <_strtod_l+0x5a4>)
 8007496:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800749a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800749e:	f7f9 f8b3 	bl	8000608 <__aeabi_dmul>
 80074a2:	4682      	mov	sl, r0
 80074a4:	4648      	mov	r0, r9
 80074a6:	468b      	mov	fp, r1
 80074a8:	f7f9 f834 	bl	8000514 <__aeabi_ui2d>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4650      	mov	r0, sl
 80074b2:	4659      	mov	r1, fp
 80074b4:	f7f8 fef2 	bl	800029c <__adddf3>
 80074b8:	4682      	mov	sl, r0
 80074ba:	468b      	mov	fp, r1
 80074bc:	2d0f      	cmp	r5, #15
 80074be:	dc38      	bgt.n	8007532 <_strtod_l+0x452>
 80074c0:	9b06      	ldr	r3, [sp, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f43f ae50 	beq.w	8007168 <_strtod_l+0x88>
 80074c8:	dd24      	ble.n	8007514 <_strtod_l+0x434>
 80074ca:	2b16      	cmp	r3, #22
 80074cc:	dc0b      	bgt.n	80074e6 <_strtod_l+0x406>
 80074ce:	496d      	ldr	r1, [pc, #436]	; (8007684 <_strtod_l+0x5a4>)
 80074d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d8:	4652      	mov	r2, sl
 80074da:	465b      	mov	r3, fp
 80074dc:	f7f9 f894 	bl	8000608 <__aeabi_dmul>
 80074e0:	4682      	mov	sl, r0
 80074e2:	468b      	mov	fp, r1
 80074e4:	e640      	b.n	8007168 <_strtod_l+0x88>
 80074e6:	9a06      	ldr	r2, [sp, #24]
 80074e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80074ec:	4293      	cmp	r3, r2
 80074ee:	db20      	blt.n	8007532 <_strtod_l+0x452>
 80074f0:	4c64      	ldr	r4, [pc, #400]	; (8007684 <_strtod_l+0x5a4>)
 80074f2:	f1c5 050f 	rsb	r5, r5, #15
 80074f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80074fa:	4652      	mov	r2, sl
 80074fc:	465b      	mov	r3, fp
 80074fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007502:	f7f9 f881 	bl	8000608 <__aeabi_dmul>
 8007506:	9b06      	ldr	r3, [sp, #24]
 8007508:	1b5d      	subs	r5, r3, r5
 800750a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800750e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007512:	e7e3      	b.n	80074dc <_strtod_l+0x3fc>
 8007514:	9b06      	ldr	r3, [sp, #24]
 8007516:	3316      	adds	r3, #22
 8007518:	db0b      	blt.n	8007532 <_strtod_l+0x452>
 800751a:	9b05      	ldr	r3, [sp, #20]
 800751c:	1b9e      	subs	r6, r3, r6
 800751e:	4b59      	ldr	r3, [pc, #356]	; (8007684 <_strtod_l+0x5a4>)
 8007520:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007524:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007528:	4650      	mov	r0, sl
 800752a:	4659      	mov	r1, fp
 800752c:	f7f9 f996 	bl	800085c <__aeabi_ddiv>
 8007530:	e7d6      	b.n	80074e0 <_strtod_l+0x400>
 8007532:	9b06      	ldr	r3, [sp, #24]
 8007534:	eba5 0808 	sub.w	r8, r5, r8
 8007538:	4498      	add	r8, r3
 800753a:	f1b8 0f00 	cmp.w	r8, #0
 800753e:	dd74      	ble.n	800762a <_strtod_l+0x54a>
 8007540:	f018 030f 	ands.w	r3, r8, #15
 8007544:	d00a      	beq.n	800755c <_strtod_l+0x47c>
 8007546:	494f      	ldr	r1, [pc, #316]	; (8007684 <_strtod_l+0x5a4>)
 8007548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800754c:	4652      	mov	r2, sl
 800754e:	465b      	mov	r3, fp
 8007550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007554:	f7f9 f858 	bl	8000608 <__aeabi_dmul>
 8007558:	4682      	mov	sl, r0
 800755a:	468b      	mov	fp, r1
 800755c:	f038 080f 	bics.w	r8, r8, #15
 8007560:	d04f      	beq.n	8007602 <_strtod_l+0x522>
 8007562:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007566:	dd22      	ble.n	80075ae <_strtod_l+0x4ce>
 8007568:	2500      	movs	r5, #0
 800756a:	462e      	mov	r6, r5
 800756c:	9507      	str	r5, [sp, #28]
 800756e:	9505      	str	r5, [sp, #20]
 8007570:	2322      	movs	r3, #34	; 0x22
 8007572:	f8df b118 	ldr.w	fp, [pc, #280]	; 800768c <_strtod_l+0x5ac>
 8007576:	6023      	str	r3, [r4, #0]
 8007578:	f04f 0a00 	mov.w	sl, #0
 800757c:	9b07      	ldr	r3, [sp, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f43f adf2 	beq.w	8007168 <_strtod_l+0x88>
 8007584:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007586:	4620      	mov	r0, r4
 8007588:	f001 fe94 	bl	80092b4 <_Bfree>
 800758c:	9905      	ldr	r1, [sp, #20]
 800758e:	4620      	mov	r0, r4
 8007590:	f001 fe90 	bl	80092b4 <_Bfree>
 8007594:	4631      	mov	r1, r6
 8007596:	4620      	mov	r0, r4
 8007598:	f001 fe8c 	bl	80092b4 <_Bfree>
 800759c:	9907      	ldr	r1, [sp, #28]
 800759e:	4620      	mov	r0, r4
 80075a0:	f001 fe88 	bl	80092b4 <_Bfree>
 80075a4:	4629      	mov	r1, r5
 80075a6:	4620      	mov	r0, r4
 80075a8:	f001 fe84 	bl	80092b4 <_Bfree>
 80075ac:	e5dc      	b.n	8007168 <_strtod_l+0x88>
 80075ae:	4b36      	ldr	r3, [pc, #216]	; (8007688 <_strtod_l+0x5a8>)
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	2300      	movs	r3, #0
 80075b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80075b8:	4650      	mov	r0, sl
 80075ba:	4659      	mov	r1, fp
 80075bc:	4699      	mov	r9, r3
 80075be:	f1b8 0f01 	cmp.w	r8, #1
 80075c2:	dc21      	bgt.n	8007608 <_strtod_l+0x528>
 80075c4:	b10b      	cbz	r3, 80075ca <_strtod_l+0x4ea>
 80075c6:	4682      	mov	sl, r0
 80075c8:	468b      	mov	fp, r1
 80075ca:	4b2f      	ldr	r3, [pc, #188]	; (8007688 <_strtod_l+0x5a8>)
 80075cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80075d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80075d4:	4652      	mov	r2, sl
 80075d6:	465b      	mov	r3, fp
 80075d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80075dc:	f7f9 f814 	bl	8000608 <__aeabi_dmul>
 80075e0:	4b2a      	ldr	r3, [pc, #168]	; (800768c <_strtod_l+0x5ac>)
 80075e2:	460a      	mov	r2, r1
 80075e4:	400b      	ands	r3, r1
 80075e6:	492a      	ldr	r1, [pc, #168]	; (8007690 <_strtod_l+0x5b0>)
 80075e8:	428b      	cmp	r3, r1
 80075ea:	4682      	mov	sl, r0
 80075ec:	d8bc      	bhi.n	8007568 <_strtod_l+0x488>
 80075ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80075f2:	428b      	cmp	r3, r1
 80075f4:	bf86      	itte	hi
 80075f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007694 <_strtod_l+0x5b4>
 80075fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80075fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007602:	2300      	movs	r3, #0
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	e084      	b.n	8007712 <_strtod_l+0x632>
 8007608:	f018 0f01 	tst.w	r8, #1
 800760c:	d005      	beq.n	800761a <_strtod_l+0x53a>
 800760e:	9b04      	ldr	r3, [sp, #16]
 8007610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007614:	f7f8 fff8 	bl	8000608 <__aeabi_dmul>
 8007618:	2301      	movs	r3, #1
 800761a:	9a04      	ldr	r2, [sp, #16]
 800761c:	3208      	adds	r2, #8
 800761e:	f109 0901 	add.w	r9, r9, #1
 8007622:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007626:	9204      	str	r2, [sp, #16]
 8007628:	e7c9      	b.n	80075be <_strtod_l+0x4de>
 800762a:	d0ea      	beq.n	8007602 <_strtod_l+0x522>
 800762c:	f1c8 0800 	rsb	r8, r8, #0
 8007630:	f018 020f 	ands.w	r2, r8, #15
 8007634:	d00a      	beq.n	800764c <_strtod_l+0x56c>
 8007636:	4b13      	ldr	r3, [pc, #76]	; (8007684 <_strtod_l+0x5a4>)
 8007638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800763c:	4650      	mov	r0, sl
 800763e:	4659      	mov	r1, fp
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f7f9 f90a 	bl	800085c <__aeabi_ddiv>
 8007648:	4682      	mov	sl, r0
 800764a:	468b      	mov	fp, r1
 800764c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007650:	d0d7      	beq.n	8007602 <_strtod_l+0x522>
 8007652:	f1b8 0f1f 	cmp.w	r8, #31
 8007656:	dd1f      	ble.n	8007698 <_strtod_l+0x5b8>
 8007658:	2500      	movs	r5, #0
 800765a:	462e      	mov	r6, r5
 800765c:	9507      	str	r5, [sp, #28]
 800765e:	9505      	str	r5, [sp, #20]
 8007660:	2322      	movs	r3, #34	; 0x22
 8007662:	f04f 0a00 	mov.w	sl, #0
 8007666:	f04f 0b00 	mov.w	fp, #0
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	e786      	b.n	800757c <_strtod_l+0x49c>
 800766e:	bf00      	nop
 8007670:	0800aab1 	.word	0x0800aab1
 8007674:	0800aaf4 	.word	0x0800aaf4
 8007678:	0800aaa9 	.word	0x0800aaa9
 800767c:	0800ac34 	.word	0x0800ac34
 8007680:	0800aee0 	.word	0x0800aee0
 8007684:	0800adc0 	.word	0x0800adc0
 8007688:	0800ad98 	.word	0x0800ad98
 800768c:	7ff00000 	.word	0x7ff00000
 8007690:	7ca00000 	.word	0x7ca00000
 8007694:	7fefffff 	.word	0x7fefffff
 8007698:	f018 0310 	ands.w	r3, r8, #16
 800769c:	bf18      	it	ne
 800769e:	236a      	movne	r3, #106	; 0x6a
 80076a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007a50 <_strtod_l+0x970>
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	4650      	mov	r0, sl
 80076a8:	4659      	mov	r1, fp
 80076aa:	2300      	movs	r3, #0
 80076ac:	f018 0f01 	tst.w	r8, #1
 80076b0:	d004      	beq.n	80076bc <_strtod_l+0x5dc>
 80076b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076b6:	f7f8 ffa7 	bl	8000608 <__aeabi_dmul>
 80076ba:	2301      	movs	r3, #1
 80076bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80076c0:	f109 0908 	add.w	r9, r9, #8
 80076c4:	d1f2      	bne.n	80076ac <_strtod_l+0x5cc>
 80076c6:	b10b      	cbz	r3, 80076cc <_strtod_l+0x5ec>
 80076c8:	4682      	mov	sl, r0
 80076ca:	468b      	mov	fp, r1
 80076cc:	9b04      	ldr	r3, [sp, #16]
 80076ce:	b1c3      	cbz	r3, 8007702 <_strtod_l+0x622>
 80076d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076d8:	2b00      	cmp	r3, #0
 80076da:	4659      	mov	r1, fp
 80076dc:	dd11      	ble.n	8007702 <_strtod_l+0x622>
 80076de:	2b1f      	cmp	r3, #31
 80076e0:	f340 8124 	ble.w	800792c <_strtod_l+0x84c>
 80076e4:	2b34      	cmp	r3, #52	; 0x34
 80076e6:	bfde      	ittt	le
 80076e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80076ec:	f04f 33ff 	movle.w	r3, #4294967295
 80076f0:	fa03 f202 	lslle.w	r2, r3, r2
 80076f4:	f04f 0a00 	mov.w	sl, #0
 80076f8:	bfcc      	ite	gt
 80076fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80076fe:	ea02 0b01 	andle.w	fp, r2, r1
 8007702:	2200      	movs	r2, #0
 8007704:	2300      	movs	r3, #0
 8007706:	4650      	mov	r0, sl
 8007708:	4659      	mov	r1, fp
 800770a:	f7f9 f9e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800770e:	2800      	cmp	r0, #0
 8007710:	d1a2      	bne.n	8007658 <_strtod_l+0x578>
 8007712:	9b07      	ldr	r3, [sp, #28]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	9908      	ldr	r1, [sp, #32]
 8007718:	462b      	mov	r3, r5
 800771a:	463a      	mov	r2, r7
 800771c:	4620      	mov	r0, r4
 800771e:	f001 fe31 	bl	8009384 <__s2b>
 8007722:	9007      	str	r0, [sp, #28]
 8007724:	2800      	cmp	r0, #0
 8007726:	f43f af1f 	beq.w	8007568 <_strtod_l+0x488>
 800772a:	9b05      	ldr	r3, [sp, #20]
 800772c:	1b9e      	subs	r6, r3, r6
 800772e:	9b06      	ldr	r3, [sp, #24]
 8007730:	2b00      	cmp	r3, #0
 8007732:	bfb4      	ite	lt
 8007734:	4633      	movlt	r3, r6
 8007736:	2300      	movge	r3, #0
 8007738:	930c      	str	r3, [sp, #48]	; 0x30
 800773a:	9b06      	ldr	r3, [sp, #24]
 800773c:	2500      	movs	r5, #0
 800773e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007742:	9312      	str	r3, [sp, #72]	; 0x48
 8007744:	462e      	mov	r6, r5
 8007746:	9b07      	ldr	r3, [sp, #28]
 8007748:	4620      	mov	r0, r4
 800774a:	6859      	ldr	r1, [r3, #4]
 800774c:	f001 fd72 	bl	8009234 <_Balloc>
 8007750:	9005      	str	r0, [sp, #20]
 8007752:	2800      	cmp	r0, #0
 8007754:	f43f af0c 	beq.w	8007570 <_strtod_l+0x490>
 8007758:	9b07      	ldr	r3, [sp, #28]
 800775a:	691a      	ldr	r2, [r3, #16]
 800775c:	3202      	adds	r2, #2
 800775e:	f103 010c 	add.w	r1, r3, #12
 8007762:	0092      	lsls	r2, r2, #2
 8007764:	300c      	adds	r0, #12
 8007766:	f001 fd4b 	bl	8009200 <memcpy>
 800776a:	ec4b ab10 	vmov	d0, sl, fp
 800776e:	aa1a      	add	r2, sp, #104	; 0x68
 8007770:	a919      	add	r1, sp, #100	; 0x64
 8007772:	4620      	mov	r0, r4
 8007774:	f002 f94c 	bl	8009a10 <__d2b>
 8007778:	ec4b ab18 	vmov	d8, sl, fp
 800777c:	9018      	str	r0, [sp, #96]	; 0x60
 800777e:	2800      	cmp	r0, #0
 8007780:	f43f aef6 	beq.w	8007570 <_strtod_l+0x490>
 8007784:	2101      	movs	r1, #1
 8007786:	4620      	mov	r0, r4
 8007788:	f001 fe96 	bl	80094b8 <__i2b>
 800778c:	4606      	mov	r6, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	f43f aeee 	beq.w	8007570 <_strtod_l+0x490>
 8007794:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007796:	9904      	ldr	r1, [sp, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	bfab      	itete	ge
 800779c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800779e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80077a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80077a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80077a6:	bfac      	ite	ge
 80077a8:	eb03 0902 	addge.w	r9, r3, r2
 80077ac:	1ad7      	sublt	r7, r2, r3
 80077ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077b0:	eba3 0801 	sub.w	r8, r3, r1
 80077b4:	4490      	add	r8, r2
 80077b6:	4ba1      	ldr	r3, [pc, #644]	; (8007a3c <_strtod_l+0x95c>)
 80077b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80077bc:	4598      	cmp	r8, r3
 80077be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077c2:	f280 80c7 	bge.w	8007954 <_strtod_l+0x874>
 80077c6:	eba3 0308 	sub.w	r3, r3, r8
 80077ca:	2b1f      	cmp	r3, #31
 80077cc:	eba2 0203 	sub.w	r2, r2, r3
 80077d0:	f04f 0101 	mov.w	r1, #1
 80077d4:	f300 80b1 	bgt.w	800793a <_strtod_l+0x85a>
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	930d      	str	r3, [sp, #52]	; 0x34
 80077de:	2300      	movs	r3, #0
 80077e0:	9308      	str	r3, [sp, #32]
 80077e2:	eb09 0802 	add.w	r8, r9, r2
 80077e6:	9b04      	ldr	r3, [sp, #16]
 80077e8:	45c1      	cmp	r9, r8
 80077ea:	4417      	add	r7, r2
 80077ec:	441f      	add	r7, r3
 80077ee:	464b      	mov	r3, r9
 80077f0:	bfa8      	it	ge
 80077f2:	4643      	movge	r3, r8
 80077f4:	42bb      	cmp	r3, r7
 80077f6:	bfa8      	it	ge
 80077f8:	463b      	movge	r3, r7
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bfc2      	ittt	gt
 80077fe:	eba8 0803 	subgt.w	r8, r8, r3
 8007802:	1aff      	subgt	r7, r7, r3
 8007804:	eba9 0903 	subgt.w	r9, r9, r3
 8007808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800780a:	2b00      	cmp	r3, #0
 800780c:	dd17      	ble.n	800783e <_strtod_l+0x75e>
 800780e:	4631      	mov	r1, r6
 8007810:	461a      	mov	r2, r3
 8007812:	4620      	mov	r0, r4
 8007814:	f001 ff10 	bl	8009638 <__pow5mult>
 8007818:	4606      	mov	r6, r0
 800781a:	2800      	cmp	r0, #0
 800781c:	f43f aea8 	beq.w	8007570 <_strtod_l+0x490>
 8007820:	4601      	mov	r1, r0
 8007822:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007824:	4620      	mov	r0, r4
 8007826:	f001 fe5d 	bl	80094e4 <__multiply>
 800782a:	900b      	str	r0, [sp, #44]	; 0x2c
 800782c:	2800      	cmp	r0, #0
 800782e:	f43f ae9f 	beq.w	8007570 <_strtod_l+0x490>
 8007832:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007834:	4620      	mov	r0, r4
 8007836:	f001 fd3d 	bl	80092b4 <_Bfree>
 800783a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800783c:	9318      	str	r3, [sp, #96]	; 0x60
 800783e:	f1b8 0f00 	cmp.w	r8, #0
 8007842:	f300 808c 	bgt.w	800795e <_strtod_l+0x87e>
 8007846:	9b06      	ldr	r3, [sp, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	dd08      	ble.n	800785e <_strtod_l+0x77e>
 800784c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800784e:	9905      	ldr	r1, [sp, #20]
 8007850:	4620      	mov	r0, r4
 8007852:	f001 fef1 	bl	8009638 <__pow5mult>
 8007856:	9005      	str	r0, [sp, #20]
 8007858:	2800      	cmp	r0, #0
 800785a:	f43f ae89 	beq.w	8007570 <_strtod_l+0x490>
 800785e:	2f00      	cmp	r7, #0
 8007860:	dd08      	ble.n	8007874 <_strtod_l+0x794>
 8007862:	9905      	ldr	r1, [sp, #20]
 8007864:	463a      	mov	r2, r7
 8007866:	4620      	mov	r0, r4
 8007868:	f001 ff40 	bl	80096ec <__lshift>
 800786c:	9005      	str	r0, [sp, #20]
 800786e:	2800      	cmp	r0, #0
 8007870:	f43f ae7e 	beq.w	8007570 <_strtod_l+0x490>
 8007874:	f1b9 0f00 	cmp.w	r9, #0
 8007878:	dd08      	ble.n	800788c <_strtod_l+0x7ac>
 800787a:	4631      	mov	r1, r6
 800787c:	464a      	mov	r2, r9
 800787e:	4620      	mov	r0, r4
 8007880:	f001 ff34 	bl	80096ec <__lshift>
 8007884:	4606      	mov	r6, r0
 8007886:	2800      	cmp	r0, #0
 8007888:	f43f ae72 	beq.w	8007570 <_strtod_l+0x490>
 800788c:	9a05      	ldr	r2, [sp, #20]
 800788e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007890:	4620      	mov	r0, r4
 8007892:	f001 ffb7 	bl	8009804 <__mdiff>
 8007896:	4605      	mov	r5, r0
 8007898:	2800      	cmp	r0, #0
 800789a:	f43f ae69 	beq.w	8007570 <_strtod_l+0x490>
 800789e:	68c3      	ldr	r3, [r0, #12]
 80078a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a2:	2300      	movs	r3, #0
 80078a4:	60c3      	str	r3, [r0, #12]
 80078a6:	4631      	mov	r1, r6
 80078a8:	f001 ff90 	bl	80097cc <__mcmp>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	da60      	bge.n	8007972 <_strtod_l+0x892>
 80078b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b2:	ea53 030a 	orrs.w	r3, r3, sl
 80078b6:	f040 8082 	bne.w	80079be <_strtod_l+0x8de>
 80078ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d17d      	bne.n	80079be <_strtod_l+0x8de>
 80078c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078c6:	0d1b      	lsrs	r3, r3, #20
 80078c8:	051b      	lsls	r3, r3, #20
 80078ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078ce:	d976      	bls.n	80079be <_strtod_l+0x8de>
 80078d0:	696b      	ldr	r3, [r5, #20]
 80078d2:	b913      	cbnz	r3, 80078da <_strtod_l+0x7fa>
 80078d4:	692b      	ldr	r3, [r5, #16]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	dd71      	ble.n	80079be <_strtod_l+0x8de>
 80078da:	4629      	mov	r1, r5
 80078dc:	2201      	movs	r2, #1
 80078de:	4620      	mov	r0, r4
 80078e0:	f001 ff04 	bl	80096ec <__lshift>
 80078e4:	4631      	mov	r1, r6
 80078e6:	4605      	mov	r5, r0
 80078e8:	f001 ff70 	bl	80097cc <__mcmp>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	dd66      	ble.n	80079be <_strtod_l+0x8de>
 80078f0:	9904      	ldr	r1, [sp, #16]
 80078f2:	4a53      	ldr	r2, [pc, #332]	; (8007a40 <_strtod_l+0x960>)
 80078f4:	465b      	mov	r3, fp
 80078f6:	2900      	cmp	r1, #0
 80078f8:	f000 8081 	beq.w	80079fe <_strtod_l+0x91e>
 80078fc:	ea02 010b 	and.w	r1, r2, fp
 8007900:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007904:	dc7b      	bgt.n	80079fe <_strtod_l+0x91e>
 8007906:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800790a:	f77f aea9 	ble.w	8007660 <_strtod_l+0x580>
 800790e:	4b4d      	ldr	r3, [pc, #308]	; (8007a44 <_strtod_l+0x964>)
 8007910:	4650      	mov	r0, sl
 8007912:	4659      	mov	r1, fp
 8007914:	2200      	movs	r2, #0
 8007916:	f7f8 fe77 	bl	8000608 <__aeabi_dmul>
 800791a:	460b      	mov	r3, r1
 800791c:	4303      	orrs	r3, r0
 800791e:	bf08      	it	eq
 8007920:	2322      	moveq	r3, #34	; 0x22
 8007922:	4682      	mov	sl, r0
 8007924:	468b      	mov	fp, r1
 8007926:	bf08      	it	eq
 8007928:	6023      	streq	r3, [r4, #0]
 800792a:	e62b      	b.n	8007584 <_strtod_l+0x4a4>
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	ea03 0a0a 	and.w	sl, r3, sl
 8007938:	e6e3      	b.n	8007702 <_strtod_l+0x622>
 800793a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800793e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007942:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007946:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800794a:	fa01 f308 	lsl.w	r3, r1, r8
 800794e:	9308      	str	r3, [sp, #32]
 8007950:	910d      	str	r1, [sp, #52]	; 0x34
 8007952:	e746      	b.n	80077e2 <_strtod_l+0x702>
 8007954:	2300      	movs	r3, #0
 8007956:	9308      	str	r3, [sp, #32]
 8007958:	2301      	movs	r3, #1
 800795a:	930d      	str	r3, [sp, #52]	; 0x34
 800795c:	e741      	b.n	80077e2 <_strtod_l+0x702>
 800795e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007960:	4642      	mov	r2, r8
 8007962:	4620      	mov	r0, r4
 8007964:	f001 fec2 	bl	80096ec <__lshift>
 8007968:	9018      	str	r0, [sp, #96]	; 0x60
 800796a:	2800      	cmp	r0, #0
 800796c:	f47f af6b 	bne.w	8007846 <_strtod_l+0x766>
 8007970:	e5fe      	b.n	8007570 <_strtod_l+0x490>
 8007972:	465f      	mov	r7, fp
 8007974:	d16e      	bne.n	8007a54 <_strtod_l+0x974>
 8007976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007978:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800797c:	b342      	cbz	r2, 80079d0 <_strtod_l+0x8f0>
 800797e:	4a32      	ldr	r2, [pc, #200]	; (8007a48 <_strtod_l+0x968>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d128      	bne.n	80079d6 <_strtod_l+0x8f6>
 8007984:	9b04      	ldr	r3, [sp, #16]
 8007986:	4651      	mov	r1, sl
 8007988:	b1eb      	cbz	r3, 80079c6 <_strtod_l+0x8e6>
 800798a:	4b2d      	ldr	r3, [pc, #180]	; (8007a40 <_strtod_l+0x960>)
 800798c:	403b      	ands	r3, r7
 800798e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007992:	f04f 32ff 	mov.w	r2, #4294967295
 8007996:	d819      	bhi.n	80079cc <_strtod_l+0x8ec>
 8007998:	0d1b      	lsrs	r3, r3, #20
 800799a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	4299      	cmp	r1, r3
 80079a4:	d117      	bne.n	80079d6 <_strtod_l+0x8f6>
 80079a6:	4b29      	ldr	r3, [pc, #164]	; (8007a4c <_strtod_l+0x96c>)
 80079a8:	429f      	cmp	r7, r3
 80079aa:	d102      	bne.n	80079b2 <_strtod_l+0x8d2>
 80079ac:	3101      	adds	r1, #1
 80079ae:	f43f addf 	beq.w	8007570 <_strtod_l+0x490>
 80079b2:	4b23      	ldr	r3, [pc, #140]	; (8007a40 <_strtod_l+0x960>)
 80079b4:	403b      	ands	r3, r7
 80079b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80079ba:	f04f 0a00 	mov.w	sl, #0
 80079be:	9b04      	ldr	r3, [sp, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1a4      	bne.n	800790e <_strtod_l+0x82e>
 80079c4:	e5de      	b.n	8007584 <_strtod_l+0x4a4>
 80079c6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ca:	e7ea      	b.n	80079a2 <_strtod_l+0x8c2>
 80079cc:	4613      	mov	r3, r2
 80079ce:	e7e8      	b.n	80079a2 <_strtod_l+0x8c2>
 80079d0:	ea53 030a 	orrs.w	r3, r3, sl
 80079d4:	d08c      	beq.n	80078f0 <_strtod_l+0x810>
 80079d6:	9b08      	ldr	r3, [sp, #32]
 80079d8:	b1db      	cbz	r3, 8007a12 <_strtod_l+0x932>
 80079da:	423b      	tst	r3, r7
 80079dc:	d0ef      	beq.n	80079be <_strtod_l+0x8de>
 80079de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079e0:	9a04      	ldr	r2, [sp, #16]
 80079e2:	4650      	mov	r0, sl
 80079e4:	4659      	mov	r1, fp
 80079e6:	b1c3      	cbz	r3, 8007a1a <_strtod_l+0x93a>
 80079e8:	f7ff fb5e 	bl	80070a8 <sulp>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	ec51 0b18 	vmov	r0, r1, d8
 80079f4:	f7f8 fc52 	bl	800029c <__adddf3>
 80079f8:	4682      	mov	sl, r0
 80079fa:	468b      	mov	fp, r1
 80079fc:	e7df      	b.n	80079be <_strtod_l+0x8de>
 80079fe:	4013      	ands	r3, r2
 8007a00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007a10:	e7d5      	b.n	80079be <_strtod_l+0x8de>
 8007a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a14:	ea13 0f0a 	tst.w	r3, sl
 8007a18:	e7e0      	b.n	80079dc <_strtod_l+0x8fc>
 8007a1a:	f7ff fb45 	bl	80070a8 <sulp>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	ec51 0b18 	vmov	r0, r1, d8
 8007a26:	f7f8 fc37 	bl	8000298 <__aeabi_dsub>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4682      	mov	sl, r0
 8007a30:	468b      	mov	fp, r1
 8007a32:	f7f9 f851 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d0c1      	beq.n	80079be <_strtod_l+0x8de>
 8007a3a:	e611      	b.n	8007660 <_strtod_l+0x580>
 8007a3c:	fffffc02 	.word	0xfffffc02
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	39500000 	.word	0x39500000
 8007a48:	000fffff 	.word	0x000fffff
 8007a4c:	7fefffff 	.word	0x7fefffff
 8007a50:	0800ab08 	.word	0x0800ab08
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	f002 f836 	bl	8009ac8 <__ratio>
 8007a5c:	ec59 8b10 	vmov	r8, r9, d0
 8007a60:	ee10 0a10 	vmov	r0, s0
 8007a64:	2200      	movs	r2, #0
 8007a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	f7f9 f848 	bl	8000b00 <__aeabi_dcmple>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d07a      	beq.n	8007b6a <_strtod_l+0xa8a>
 8007a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d04a      	beq.n	8007b10 <_strtod_l+0xa30>
 8007a7a:	4b95      	ldr	r3, [pc, #596]	; (8007cd0 <_strtod_l+0xbf0>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007cd0 <_strtod_l+0xbf0>
 8007a86:	f04f 0800 	mov.w	r8, #0
 8007a8a:	4b92      	ldr	r3, [pc, #584]	; (8007cd4 <_strtod_l+0xbf4>)
 8007a8c:	403b      	ands	r3, r7
 8007a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a92:	4b91      	ldr	r3, [pc, #580]	; (8007cd8 <_strtod_l+0xbf8>)
 8007a94:	429a      	cmp	r2, r3
 8007a96:	f040 80b0 	bne.w	8007bfa <_strtod_l+0xb1a>
 8007a9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007aa2:	ec4b ab10 	vmov	d0, sl, fp
 8007aa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007aaa:	f001 ff35 	bl	8009918 <__ulp>
 8007aae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ab2:	ec53 2b10 	vmov	r2, r3, d0
 8007ab6:	f7f8 fda7 	bl	8000608 <__aeabi_dmul>
 8007aba:	4652      	mov	r2, sl
 8007abc:	465b      	mov	r3, fp
 8007abe:	f7f8 fbed 	bl	800029c <__adddf3>
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4983      	ldr	r1, [pc, #524]	; (8007cd4 <_strtod_l+0xbf4>)
 8007ac6:	4a85      	ldr	r2, [pc, #532]	; (8007cdc <_strtod_l+0xbfc>)
 8007ac8:	4019      	ands	r1, r3
 8007aca:	4291      	cmp	r1, r2
 8007acc:	4682      	mov	sl, r0
 8007ace:	d960      	bls.n	8007b92 <_strtod_l+0xab2>
 8007ad0:	ee18 3a90 	vmov	r3, s17
 8007ad4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d104      	bne.n	8007ae6 <_strtod_l+0xa06>
 8007adc:	ee18 3a10 	vmov	r3, s16
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	f43f ad45 	beq.w	8007570 <_strtod_l+0x490>
 8007ae6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007ce8 <_strtod_l+0xc08>
 8007aea:	f04f 3aff 	mov.w	sl, #4294967295
 8007aee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007af0:	4620      	mov	r0, r4
 8007af2:	f001 fbdf 	bl	80092b4 <_Bfree>
 8007af6:	9905      	ldr	r1, [sp, #20]
 8007af8:	4620      	mov	r0, r4
 8007afa:	f001 fbdb 	bl	80092b4 <_Bfree>
 8007afe:	4631      	mov	r1, r6
 8007b00:	4620      	mov	r0, r4
 8007b02:	f001 fbd7 	bl	80092b4 <_Bfree>
 8007b06:	4629      	mov	r1, r5
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f001 fbd3 	bl	80092b4 <_Bfree>
 8007b0e:	e61a      	b.n	8007746 <_strtod_l+0x666>
 8007b10:	f1ba 0f00 	cmp.w	sl, #0
 8007b14:	d11b      	bne.n	8007b4e <_strtod_l+0xa6e>
 8007b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b1a:	b9f3      	cbnz	r3, 8007b5a <_strtod_l+0xa7a>
 8007b1c:	4b6c      	ldr	r3, [pc, #432]	; (8007cd0 <_strtod_l+0xbf0>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4640      	mov	r0, r8
 8007b22:	4649      	mov	r1, r9
 8007b24:	f7f8 ffe2 	bl	8000aec <__aeabi_dcmplt>
 8007b28:	b9d0      	cbnz	r0, 8007b60 <_strtod_l+0xa80>
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	4b6c      	ldr	r3, [pc, #432]	; (8007ce0 <_strtod_l+0xc00>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	f7f8 fd69 	bl	8000608 <__aeabi_dmul>
 8007b36:	4680      	mov	r8, r0
 8007b38:	4689      	mov	r9, r1
 8007b3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007b42:	9315      	str	r3, [sp, #84]	; 0x54
 8007b44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b4c:	e79d      	b.n	8007a8a <_strtod_l+0x9aa>
 8007b4e:	f1ba 0f01 	cmp.w	sl, #1
 8007b52:	d102      	bne.n	8007b5a <_strtod_l+0xa7a>
 8007b54:	2f00      	cmp	r7, #0
 8007b56:	f43f ad83 	beq.w	8007660 <_strtod_l+0x580>
 8007b5a:	4b62      	ldr	r3, [pc, #392]	; (8007ce4 <_strtod_l+0xc04>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	e78e      	b.n	8007a7e <_strtod_l+0x99e>
 8007b60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007ce0 <_strtod_l+0xc00>
 8007b64:	f04f 0800 	mov.w	r8, #0
 8007b68:	e7e7      	b.n	8007b3a <_strtod_l+0xa5a>
 8007b6a:	4b5d      	ldr	r3, [pc, #372]	; (8007ce0 <_strtod_l+0xc00>)
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4649      	mov	r1, r9
 8007b70:	2200      	movs	r2, #0
 8007b72:	f7f8 fd49 	bl	8000608 <__aeabi_dmul>
 8007b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4689      	mov	r9, r1
 8007b7c:	b933      	cbnz	r3, 8007b8c <_strtod_l+0xaac>
 8007b7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b82:	900e      	str	r0, [sp, #56]	; 0x38
 8007b84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007b8a:	e7dd      	b.n	8007b48 <_strtod_l+0xa68>
 8007b8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007b90:	e7f9      	b.n	8007b86 <_strtod_l+0xaa6>
 8007b92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1a8      	bne.n	8007aee <_strtod_l+0xa0e>
 8007b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ba2:	0d1b      	lsrs	r3, r3, #20
 8007ba4:	051b      	lsls	r3, r3, #20
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d1a1      	bne.n	8007aee <_strtod_l+0xa0e>
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	f7f9 f873 	bl	8000c98 <__aeabi_d2lz>
 8007bb2:	f7f8 fcfb 	bl	80005ac <__aeabi_l2d>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fb6b 	bl	8000298 <__aeabi_dsub>
 8007bc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bc8:	ea43 030a 	orr.w	r3, r3, sl
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	4680      	mov	r8, r0
 8007bd0:	4689      	mov	r9, r1
 8007bd2:	d055      	beq.n	8007c80 <_strtod_l+0xba0>
 8007bd4:	a336      	add	r3, pc, #216	; (adr r3, 8007cb0 <_strtod_l+0xbd0>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	f7f8 ff87 	bl	8000aec <__aeabi_dcmplt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f47f acd0 	bne.w	8007584 <_strtod_l+0x4a4>
 8007be4:	a334      	add	r3, pc, #208	; (adr r3, 8007cb8 <_strtod_l+0xbd8>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	4640      	mov	r0, r8
 8007bec:	4649      	mov	r1, r9
 8007bee:	f7f8 ff9b 	bl	8000b28 <__aeabi_dcmpgt>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f43f af7b 	beq.w	8007aee <_strtod_l+0xa0e>
 8007bf8:	e4c4      	b.n	8007584 <_strtod_l+0x4a4>
 8007bfa:	9b04      	ldr	r3, [sp, #16]
 8007bfc:	b333      	cbz	r3, 8007c4c <_strtod_l+0xb6c>
 8007bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c04:	d822      	bhi.n	8007c4c <_strtod_l+0xb6c>
 8007c06:	a32e      	add	r3, pc, #184	; (adr r3, 8007cc0 <_strtod_l+0xbe0>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	4649      	mov	r1, r9
 8007c10:	f7f8 ff76 	bl	8000b00 <__aeabi_dcmple>
 8007c14:	b1a0      	cbz	r0, 8007c40 <_strtod_l+0xb60>
 8007c16:	4649      	mov	r1, r9
 8007c18:	4640      	mov	r0, r8
 8007c1a:	f7f8 ffcd 	bl	8000bb8 <__aeabi_d2uiz>
 8007c1e:	2801      	cmp	r0, #1
 8007c20:	bf38      	it	cc
 8007c22:	2001      	movcc	r0, #1
 8007c24:	f7f8 fc76 	bl	8000514 <__aeabi_ui2d>
 8007c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c2a:	4680      	mov	r8, r0
 8007c2c:	4689      	mov	r9, r1
 8007c2e:	bb23      	cbnz	r3, 8007c7a <_strtod_l+0xb9a>
 8007c30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c34:	9010      	str	r0, [sp, #64]	; 0x40
 8007c36:	9311      	str	r3, [sp, #68]	; 0x44
 8007c38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c48:	1a9b      	subs	r3, r3, r2
 8007c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c50:	eeb0 0a48 	vmov.f32	s0, s16
 8007c54:	eef0 0a68 	vmov.f32	s1, s17
 8007c58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c5c:	f001 fe5c 	bl	8009918 <__ulp>
 8007c60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c64:	ec53 2b10 	vmov	r2, r3, d0
 8007c68:	f7f8 fcce 	bl	8000608 <__aeabi_dmul>
 8007c6c:	ec53 2b18 	vmov	r2, r3, d8
 8007c70:	f7f8 fb14 	bl	800029c <__adddf3>
 8007c74:	4682      	mov	sl, r0
 8007c76:	468b      	mov	fp, r1
 8007c78:	e78d      	b.n	8007b96 <_strtod_l+0xab6>
 8007c7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007c7e:	e7db      	b.n	8007c38 <_strtod_l+0xb58>
 8007c80:	a311      	add	r3, pc, #68	; (adr r3, 8007cc8 <_strtod_l+0xbe8>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 ff31 	bl	8000aec <__aeabi_dcmplt>
 8007c8a:	e7b2      	b.n	8007bf2 <_strtod_l+0xb12>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	f7ff ba6b 	b.w	8007170 <_strtod_l+0x90>
 8007c9a:	2a65      	cmp	r2, #101	; 0x65
 8007c9c:	f43f ab5f 	beq.w	800735e <_strtod_l+0x27e>
 8007ca0:	2a45      	cmp	r2, #69	; 0x45
 8007ca2:	f43f ab5c 	beq.w	800735e <_strtod_l+0x27e>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f7ff bb94 	b.w	80073d4 <_strtod_l+0x2f4>
 8007cac:	f3af 8000 	nop.w
 8007cb0:	94a03595 	.word	0x94a03595
 8007cb4:	3fdfffff 	.word	0x3fdfffff
 8007cb8:	35afe535 	.word	0x35afe535
 8007cbc:	3fe00000 	.word	0x3fe00000
 8007cc0:	ffc00000 	.word	0xffc00000
 8007cc4:	41dfffff 	.word	0x41dfffff
 8007cc8:	94a03595 	.word	0x94a03595
 8007ccc:	3fcfffff 	.word	0x3fcfffff
 8007cd0:	3ff00000 	.word	0x3ff00000
 8007cd4:	7ff00000 	.word	0x7ff00000
 8007cd8:	7fe00000 	.word	0x7fe00000
 8007cdc:	7c9fffff 	.word	0x7c9fffff
 8007ce0:	3fe00000 	.word	0x3fe00000
 8007ce4:	bff00000 	.word	0xbff00000
 8007ce8:	7fefffff 	.word	0x7fefffff

08007cec <_strtod_r>:
 8007cec:	4b01      	ldr	r3, [pc, #4]	; (8007cf4 <_strtod_r+0x8>)
 8007cee:	f7ff b9f7 	b.w	80070e0 <_strtod_l>
 8007cf2:	bf00      	nop
 8007cf4:	20000074 	.word	0x20000074

08007cf8 <_strtol_l.constprop.0>:
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cfe:	d001      	beq.n	8007d04 <_strtol_l.constprop.0+0xc>
 8007d00:	2b24      	cmp	r3, #36	; 0x24
 8007d02:	d906      	bls.n	8007d12 <_strtol_l.constprop.0+0x1a>
 8007d04:	f7fe fa06 	bl	8006114 <__errno>
 8007d08:	2316      	movs	r3, #22
 8007d0a:	6003      	str	r3, [r0, #0]
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007df8 <_strtol_l.constprop.0+0x100>
 8007d16:	460d      	mov	r5, r1
 8007d18:	462e      	mov	r6, r5
 8007d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d22:	f017 0708 	ands.w	r7, r7, #8
 8007d26:	d1f7      	bne.n	8007d18 <_strtol_l.constprop.0+0x20>
 8007d28:	2c2d      	cmp	r4, #45	; 0x2d
 8007d2a:	d132      	bne.n	8007d92 <_strtol_l.constprop.0+0x9a>
 8007d2c:	782c      	ldrb	r4, [r5, #0]
 8007d2e:	2701      	movs	r7, #1
 8007d30:	1cb5      	adds	r5, r6, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d05b      	beq.n	8007dee <_strtol_l.constprop.0+0xf6>
 8007d36:	2b10      	cmp	r3, #16
 8007d38:	d109      	bne.n	8007d4e <_strtol_l.constprop.0+0x56>
 8007d3a:	2c30      	cmp	r4, #48	; 0x30
 8007d3c:	d107      	bne.n	8007d4e <_strtol_l.constprop.0+0x56>
 8007d3e:	782c      	ldrb	r4, [r5, #0]
 8007d40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d44:	2c58      	cmp	r4, #88	; 0x58
 8007d46:	d14d      	bne.n	8007de4 <_strtol_l.constprop.0+0xec>
 8007d48:	786c      	ldrb	r4, [r5, #1]
 8007d4a:	2310      	movs	r3, #16
 8007d4c:	3502      	adds	r5, #2
 8007d4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d52:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d56:	f04f 0c00 	mov.w	ip, #0
 8007d5a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d5e:	4666      	mov	r6, ip
 8007d60:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007d68:	f1be 0f09 	cmp.w	lr, #9
 8007d6c:	d816      	bhi.n	8007d9c <_strtol_l.constprop.0+0xa4>
 8007d6e:	4674      	mov	r4, lr
 8007d70:	42a3      	cmp	r3, r4
 8007d72:	dd24      	ble.n	8007dbe <_strtol_l.constprop.0+0xc6>
 8007d74:	f1bc 0f00 	cmp.w	ip, #0
 8007d78:	db1e      	blt.n	8007db8 <_strtol_l.constprop.0+0xc0>
 8007d7a:	45b1      	cmp	r9, r6
 8007d7c:	d31c      	bcc.n	8007db8 <_strtol_l.constprop.0+0xc0>
 8007d7e:	d101      	bne.n	8007d84 <_strtol_l.constprop.0+0x8c>
 8007d80:	45a2      	cmp	sl, r4
 8007d82:	db19      	blt.n	8007db8 <_strtol_l.constprop.0+0xc0>
 8007d84:	fb06 4603 	mla	r6, r6, r3, r4
 8007d88:	f04f 0c01 	mov.w	ip, #1
 8007d8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d90:	e7e8      	b.n	8007d64 <_strtol_l.constprop.0+0x6c>
 8007d92:	2c2b      	cmp	r4, #43	; 0x2b
 8007d94:	bf04      	itt	eq
 8007d96:	782c      	ldrbeq	r4, [r5, #0]
 8007d98:	1cb5      	addeq	r5, r6, #2
 8007d9a:	e7ca      	b.n	8007d32 <_strtol_l.constprop.0+0x3a>
 8007d9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007da0:	f1be 0f19 	cmp.w	lr, #25
 8007da4:	d801      	bhi.n	8007daa <_strtol_l.constprop.0+0xb2>
 8007da6:	3c37      	subs	r4, #55	; 0x37
 8007da8:	e7e2      	b.n	8007d70 <_strtol_l.constprop.0+0x78>
 8007daa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007dae:	f1be 0f19 	cmp.w	lr, #25
 8007db2:	d804      	bhi.n	8007dbe <_strtol_l.constprop.0+0xc6>
 8007db4:	3c57      	subs	r4, #87	; 0x57
 8007db6:	e7db      	b.n	8007d70 <_strtol_l.constprop.0+0x78>
 8007db8:	f04f 3cff 	mov.w	ip, #4294967295
 8007dbc:	e7e6      	b.n	8007d8c <_strtol_l.constprop.0+0x94>
 8007dbe:	f1bc 0f00 	cmp.w	ip, #0
 8007dc2:	da05      	bge.n	8007dd0 <_strtol_l.constprop.0+0xd8>
 8007dc4:	2322      	movs	r3, #34	; 0x22
 8007dc6:	6003      	str	r3, [r0, #0]
 8007dc8:	4646      	mov	r6, r8
 8007dca:	b942      	cbnz	r2, 8007dde <_strtol_l.constprop.0+0xe6>
 8007dcc:	4630      	mov	r0, r6
 8007dce:	e79e      	b.n	8007d0e <_strtol_l.constprop.0+0x16>
 8007dd0:	b107      	cbz	r7, 8007dd4 <_strtol_l.constprop.0+0xdc>
 8007dd2:	4276      	negs	r6, r6
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	d0f9      	beq.n	8007dcc <_strtol_l.constprop.0+0xd4>
 8007dd8:	f1bc 0f00 	cmp.w	ip, #0
 8007ddc:	d000      	beq.n	8007de0 <_strtol_l.constprop.0+0xe8>
 8007dde:	1e69      	subs	r1, r5, #1
 8007de0:	6011      	str	r1, [r2, #0]
 8007de2:	e7f3      	b.n	8007dcc <_strtol_l.constprop.0+0xd4>
 8007de4:	2430      	movs	r4, #48	; 0x30
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1b1      	bne.n	8007d4e <_strtol_l.constprop.0+0x56>
 8007dea:	2308      	movs	r3, #8
 8007dec:	e7af      	b.n	8007d4e <_strtol_l.constprop.0+0x56>
 8007dee:	2c30      	cmp	r4, #48	; 0x30
 8007df0:	d0a5      	beq.n	8007d3e <_strtol_l.constprop.0+0x46>
 8007df2:	230a      	movs	r3, #10
 8007df4:	e7ab      	b.n	8007d4e <_strtol_l.constprop.0+0x56>
 8007df6:	bf00      	nop
 8007df8:	0800ab31 	.word	0x0800ab31

08007dfc <_strtol_r>:
 8007dfc:	f7ff bf7c 	b.w	8007cf8 <_strtol_l.constprop.0>

08007e00 <quorem>:
 8007e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	6903      	ldr	r3, [r0, #16]
 8007e06:	690c      	ldr	r4, [r1, #16]
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	f2c0 8081 	blt.w	8007f12 <quorem+0x112>
 8007e10:	3c01      	subs	r4, #1
 8007e12:	f101 0814 	add.w	r8, r1, #20
 8007e16:	f100 0514 	add.w	r5, r0, #20
 8007e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e34:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e38:	d331      	bcc.n	8007e9e <quorem+0x9e>
 8007e3a:	f04f 0e00 	mov.w	lr, #0
 8007e3e:	4640      	mov	r0, r8
 8007e40:	46ac      	mov	ip, r5
 8007e42:	46f2      	mov	sl, lr
 8007e44:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e48:	b293      	uxth	r3, r2
 8007e4a:	fb06 e303 	mla	r3, r6, r3, lr
 8007e4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	ebaa 0303 	sub.w	r3, sl, r3
 8007e58:	f8dc a000 	ldr.w	sl, [ip]
 8007e5c:	0c12      	lsrs	r2, r2, #16
 8007e5e:	fa13 f38a 	uxtah	r3, r3, sl
 8007e62:	fb06 e202 	mla	r2, r6, r2, lr
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	9b00      	ldr	r3, [sp, #0]
 8007e6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e6e:	b292      	uxth	r2, r2
 8007e70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e78:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e7c:	4581      	cmp	r9, r0
 8007e7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e82:	f84c 3b04 	str.w	r3, [ip], #4
 8007e86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e8a:	d2db      	bcs.n	8007e44 <quorem+0x44>
 8007e8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e90:	b92b      	cbnz	r3, 8007e9e <quorem+0x9e>
 8007e92:	9b01      	ldr	r3, [sp, #4]
 8007e94:	3b04      	subs	r3, #4
 8007e96:	429d      	cmp	r5, r3
 8007e98:	461a      	mov	r2, r3
 8007e9a:	d32e      	bcc.n	8007efa <quorem+0xfa>
 8007e9c:	613c      	str	r4, [r7, #16]
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f001 fc94 	bl	80097cc <__mcmp>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	db24      	blt.n	8007ef2 <quorem+0xf2>
 8007ea8:	3601      	adds	r6, #1
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f04f 0c00 	mov.w	ip, #0
 8007eb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007eb4:	f8d0 e000 	ldr.w	lr, [r0]
 8007eb8:	b293      	uxth	r3, r2
 8007eba:	ebac 0303 	sub.w	r3, ip, r3
 8007ebe:	0c12      	lsrs	r2, r2, #16
 8007ec0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ec4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ed2:	45c1      	cmp	r9, r8
 8007ed4:	f840 3b04 	str.w	r3, [r0], #4
 8007ed8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007edc:	d2e8      	bcs.n	8007eb0 <quorem+0xb0>
 8007ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ee6:	b922      	cbnz	r2, 8007ef2 <quorem+0xf2>
 8007ee8:	3b04      	subs	r3, #4
 8007eea:	429d      	cmp	r5, r3
 8007eec:	461a      	mov	r2, r3
 8007eee:	d30a      	bcc.n	8007f06 <quorem+0x106>
 8007ef0:	613c      	str	r4, [r7, #16]
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	b003      	add	sp, #12
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efa:	6812      	ldr	r2, [r2, #0]
 8007efc:	3b04      	subs	r3, #4
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	d1cc      	bne.n	8007e9c <quorem+0x9c>
 8007f02:	3c01      	subs	r4, #1
 8007f04:	e7c7      	b.n	8007e96 <quorem+0x96>
 8007f06:	6812      	ldr	r2, [r2, #0]
 8007f08:	3b04      	subs	r3, #4
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	d1f0      	bne.n	8007ef0 <quorem+0xf0>
 8007f0e:	3c01      	subs	r4, #1
 8007f10:	e7eb      	b.n	8007eea <quorem+0xea>
 8007f12:	2000      	movs	r0, #0
 8007f14:	e7ee      	b.n	8007ef4 <quorem+0xf4>
	...

08007f18 <_dtoa_r>:
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	ed2d 8b04 	vpush	{d8-d9}
 8007f20:	ec57 6b10 	vmov	r6, r7, d0
 8007f24:	b093      	sub	sp, #76	; 0x4c
 8007f26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f2c:	9106      	str	r1, [sp, #24]
 8007f2e:	ee10 aa10 	vmov	sl, s0
 8007f32:	4604      	mov	r4, r0
 8007f34:	9209      	str	r2, [sp, #36]	; 0x24
 8007f36:	930c      	str	r3, [sp, #48]	; 0x30
 8007f38:	46bb      	mov	fp, r7
 8007f3a:	b975      	cbnz	r5, 8007f5a <_dtoa_r+0x42>
 8007f3c:	2010      	movs	r0, #16
 8007f3e:	f7fe f913 	bl	8006168 <malloc>
 8007f42:	4602      	mov	r2, r0
 8007f44:	6260      	str	r0, [r4, #36]	; 0x24
 8007f46:	b920      	cbnz	r0, 8007f52 <_dtoa_r+0x3a>
 8007f48:	4ba7      	ldr	r3, [pc, #668]	; (80081e8 <_dtoa_r+0x2d0>)
 8007f4a:	21ea      	movs	r1, #234	; 0xea
 8007f4c:	48a7      	ldr	r0, [pc, #668]	; (80081ec <_dtoa_r+0x2d4>)
 8007f4e:	f001 ffcd 	bl	8009eec <__assert_func>
 8007f52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f56:	6005      	str	r5, [r0, #0]
 8007f58:	60c5      	str	r5, [r0, #12]
 8007f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f5c:	6819      	ldr	r1, [r3, #0]
 8007f5e:	b151      	cbz	r1, 8007f76 <_dtoa_r+0x5e>
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	604a      	str	r2, [r1, #4]
 8007f64:	2301      	movs	r3, #1
 8007f66:	4093      	lsls	r3, r2
 8007f68:	608b      	str	r3, [r1, #8]
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f001 f9a2 	bl	80092b4 <_Bfree>
 8007f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	1e3b      	subs	r3, r7, #0
 8007f78:	bfaa      	itet	ge
 8007f7a:	2300      	movge	r3, #0
 8007f7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007f80:	f8c8 3000 	strge.w	r3, [r8]
 8007f84:	4b9a      	ldr	r3, [pc, #616]	; (80081f0 <_dtoa_r+0x2d8>)
 8007f86:	bfbc      	itt	lt
 8007f88:	2201      	movlt	r2, #1
 8007f8a:	f8c8 2000 	strlt.w	r2, [r8]
 8007f8e:	ea33 030b 	bics.w	r3, r3, fp
 8007f92:	d11b      	bne.n	8007fcc <_dtoa_r+0xb4>
 8007f94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f96:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fa0:	4333      	orrs	r3, r6
 8007fa2:	f000 8592 	beq.w	8008aca <_dtoa_r+0xbb2>
 8007fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fa8:	b963      	cbnz	r3, 8007fc4 <_dtoa_r+0xac>
 8007faa:	4b92      	ldr	r3, [pc, #584]	; (80081f4 <_dtoa_r+0x2dc>)
 8007fac:	e022      	b.n	8007ff4 <_dtoa_r+0xdc>
 8007fae:	4b92      	ldr	r3, [pc, #584]	; (80081f8 <_dtoa_r+0x2e0>)
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	9801      	ldr	r0, [sp, #4]
 8007fba:	b013      	add	sp, #76	; 0x4c
 8007fbc:	ecbd 8b04 	vpop	{d8-d9}
 8007fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc4:	4b8b      	ldr	r3, [pc, #556]	; (80081f4 <_dtoa_r+0x2dc>)
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	3303      	adds	r3, #3
 8007fca:	e7f3      	b.n	8007fb4 <_dtoa_r+0x9c>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	4659      	mov	r1, fp
 8007fd4:	f7f8 fd80 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fd8:	ec4b ab19 	vmov	d9, sl, fp
 8007fdc:	4680      	mov	r8, r0
 8007fde:	b158      	cbz	r0, 8007ff8 <_dtoa_r+0xe0>
 8007fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 856b 	beq.w	8008ac4 <_dtoa_r+0xbac>
 8007fee:	4883      	ldr	r0, [pc, #524]	; (80081fc <_dtoa_r+0x2e4>)
 8007ff0:	6018      	str	r0, [r3, #0]
 8007ff2:	1e43      	subs	r3, r0, #1
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	e7df      	b.n	8007fb8 <_dtoa_r+0xa0>
 8007ff8:	ec4b ab10 	vmov	d0, sl, fp
 8007ffc:	aa10      	add	r2, sp, #64	; 0x40
 8007ffe:	a911      	add	r1, sp, #68	; 0x44
 8008000:	4620      	mov	r0, r4
 8008002:	f001 fd05 	bl	8009a10 <__d2b>
 8008006:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800800a:	ee08 0a10 	vmov	s16, r0
 800800e:	2d00      	cmp	r5, #0
 8008010:	f000 8084 	beq.w	800811c <_dtoa_r+0x204>
 8008014:	ee19 3a90 	vmov	r3, s19
 8008018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800801c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008020:	4656      	mov	r6, sl
 8008022:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800802a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800802e:	4b74      	ldr	r3, [pc, #464]	; (8008200 <_dtoa_r+0x2e8>)
 8008030:	2200      	movs	r2, #0
 8008032:	4630      	mov	r0, r6
 8008034:	4639      	mov	r1, r7
 8008036:	f7f8 f92f 	bl	8000298 <__aeabi_dsub>
 800803a:	a365      	add	r3, pc, #404	; (adr r3, 80081d0 <_dtoa_r+0x2b8>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f7f8 fae2 	bl	8000608 <__aeabi_dmul>
 8008044:	a364      	add	r3, pc, #400	; (adr r3, 80081d8 <_dtoa_r+0x2c0>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 f927 	bl	800029c <__adddf3>
 800804e:	4606      	mov	r6, r0
 8008050:	4628      	mov	r0, r5
 8008052:	460f      	mov	r7, r1
 8008054:	f7f8 fa6e 	bl	8000534 <__aeabi_i2d>
 8008058:	a361      	add	r3, pc, #388	; (adr r3, 80081e0 <_dtoa_r+0x2c8>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 fad3 	bl	8000608 <__aeabi_dmul>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 f917 	bl	800029c <__adddf3>
 800806e:	4606      	mov	r6, r0
 8008070:	460f      	mov	r7, r1
 8008072:	f7f8 fd79 	bl	8000b68 <__aeabi_d2iz>
 8008076:	2200      	movs	r2, #0
 8008078:	9000      	str	r0, [sp, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	4630      	mov	r0, r6
 800807e:	4639      	mov	r1, r7
 8008080:	f7f8 fd34 	bl	8000aec <__aeabi_dcmplt>
 8008084:	b150      	cbz	r0, 800809c <_dtoa_r+0x184>
 8008086:	9800      	ldr	r0, [sp, #0]
 8008088:	f7f8 fa54 	bl	8000534 <__aeabi_i2d>
 800808c:	4632      	mov	r2, r6
 800808e:	463b      	mov	r3, r7
 8008090:	f7f8 fd22 	bl	8000ad8 <__aeabi_dcmpeq>
 8008094:	b910      	cbnz	r0, 800809c <_dtoa_r+0x184>
 8008096:	9b00      	ldr	r3, [sp, #0]
 8008098:	3b01      	subs	r3, #1
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	9b00      	ldr	r3, [sp, #0]
 800809e:	2b16      	cmp	r3, #22
 80080a0:	d85a      	bhi.n	8008158 <_dtoa_r+0x240>
 80080a2:	9a00      	ldr	r2, [sp, #0]
 80080a4:	4b57      	ldr	r3, [pc, #348]	; (8008204 <_dtoa_r+0x2ec>)
 80080a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	ec51 0b19 	vmov	r0, r1, d9
 80080b2:	f7f8 fd1b 	bl	8000aec <__aeabi_dcmplt>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d050      	beq.n	800815c <_dtoa_r+0x244>
 80080ba:	9b00      	ldr	r3, [sp, #0]
 80080bc:	3b01      	subs	r3, #1
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	2300      	movs	r3, #0
 80080c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080c6:	1b5d      	subs	r5, r3, r5
 80080c8:	1e6b      	subs	r3, r5, #1
 80080ca:	9305      	str	r3, [sp, #20]
 80080cc:	bf45      	ittet	mi
 80080ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80080d2:	9304      	strmi	r3, [sp, #16]
 80080d4:	2300      	movpl	r3, #0
 80080d6:	2300      	movmi	r3, #0
 80080d8:	bf4c      	ite	mi
 80080da:	9305      	strmi	r3, [sp, #20]
 80080dc:	9304      	strpl	r3, [sp, #16]
 80080de:	9b00      	ldr	r3, [sp, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	db3d      	blt.n	8008160 <_dtoa_r+0x248>
 80080e4:	9b05      	ldr	r3, [sp, #20]
 80080e6:	9a00      	ldr	r2, [sp, #0]
 80080e8:	920a      	str	r2, [sp, #40]	; 0x28
 80080ea:	4413      	add	r3, r2
 80080ec:	9305      	str	r3, [sp, #20]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9307      	str	r3, [sp, #28]
 80080f2:	9b06      	ldr	r3, [sp, #24]
 80080f4:	2b09      	cmp	r3, #9
 80080f6:	f200 8089 	bhi.w	800820c <_dtoa_r+0x2f4>
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	bfc4      	itt	gt
 80080fe:	3b04      	subgt	r3, #4
 8008100:	9306      	strgt	r3, [sp, #24]
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	f1a3 0302 	sub.w	r3, r3, #2
 8008108:	bfcc      	ite	gt
 800810a:	2500      	movgt	r5, #0
 800810c:	2501      	movle	r5, #1
 800810e:	2b03      	cmp	r3, #3
 8008110:	f200 8087 	bhi.w	8008222 <_dtoa_r+0x30a>
 8008114:	e8df f003 	tbb	[pc, r3]
 8008118:	59383a2d 	.word	0x59383a2d
 800811c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008120:	441d      	add	r5, r3
 8008122:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008126:	2b20      	cmp	r3, #32
 8008128:	bfc1      	itttt	gt
 800812a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800812e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008132:	fa0b f303 	lslgt.w	r3, fp, r3
 8008136:	fa26 f000 	lsrgt.w	r0, r6, r0
 800813a:	bfda      	itte	le
 800813c:	f1c3 0320 	rsble	r3, r3, #32
 8008140:	fa06 f003 	lslle.w	r0, r6, r3
 8008144:	4318      	orrgt	r0, r3
 8008146:	f7f8 f9e5 	bl	8000514 <__aeabi_ui2d>
 800814a:	2301      	movs	r3, #1
 800814c:	4606      	mov	r6, r0
 800814e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008152:	3d01      	subs	r5, #1
 8008154:	930e      	str	r3, [sp, #56]	; 0x38
 8008156:	e76a      	b.n	800802e <_dtoa_r+0x116>
 8008158:	2301      	movs	r3, #1
 800815a:	e7b2      	b.n	80080c2 <_dtoa_r+0x1aa>
 800815c:	900b      	str	r0, [sp, #44]	; 0x2c
 800815e:	e7b1      	b.n	80080c4 <_dtoa_r+0x1ac>
 8008160:	9b04      	ldr	r3, [sp, #16]
 8008162:	9a00      	ldr	r2, [sp, #0]
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	4253      	negs	r3, r2
 800816a:	9307      	str	r3, [sp, #28]
 800816c:	2300      	movs	r3, #0
 800816e:	930a      	str	r3, [sp, #40]	; 0x28
 8008170:	e7bf      	b.n	80080f2 <_dtoa_r+0x1da>
 8008172:	2300      	movs	r3, #0
 8008174:	9308      	str	r3, [sp, #32]
 8008176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008178:	2b00      	cmp	r3, #0
 800817a:	dc55      	bgt.n	8008228 <_dtoa_r+0x310>
 800817c:	2301      	movs	r3, #1
 800817e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008182:	461a      	mov	r2, r3
 8008184:	9209      	str	r2, [sp, #36]	; 0x24
 8008186:	e00c      	b.n	80081a2 <_dtoa_r+0x28a>
 8008188:	2301      	movs	r3, #1
 800818a:	e7f3      	b.n	8008174 <_dtoa_r+0x25c>
 800818c:	2300      	movs	r3, #0
 800818e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008190:	9308      	str	r3, [sp, #32]
 8008192:	9b00      	ldr	r3, [sp, #0]
 8008194:	4413      	add	r3, r2
 8008196:	9302      	str	r3, [sp, #8]
 8008198:	3301      	adds	r3, #1
 800819a:	2b01      	cmp	r3, #1
 800819c:	9303      	str	r3, [sp, #12]
 800819e:	bfb8      	it	lt
 80081a0:	2301      	movlt	r3, #1
 80081a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081a4:	2200      	movs	r2, #0
 80081a6:	6042      	str	r2, [r0, #4]
 80081a8:	2204      	movs	r2, #4
 80081aa:	f102 0614 	add.w	r6, r2, #20
 80081ae:	429e      	cmp	r6, r3
 80081b0:	6841      	ldr	r1, [r0, #4]
 80081b2:	d93d      	bls.n	8008230 <_dtoa_r+0x318>
 80081b4:	4620      	mov	r0, r4
 80081b6:	f001 f83d 	bl	8009234 <_Balloc>
 80081ba:	9001      	str	r0, [sp, #4]
 80081bc:	2800      	cmp	r0, #0
 80081be:	d13b      	bne.n	8008238 <_dtoa_r+0x320>
 80081c0:	4b11      	ldr	r3, [pc, #68]	; (8008208 <_dtoa_r+0x2f0>)
 80081c2:	4602      	mov	r2, r0
 80081c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081c8:	e6c0      	b.n	8007f4c <_dtoa_r+0x34>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e7df      	b.n	800818e <_dtoa_r+0x276>
 80081ce:	bf00      	nop
 80081d0:	636f4361 	.word	0x636f4361
 80081d4:	3fd287a7 	.word	0x3fd287a7
 80081d8:	8b60c8b3 	.word	0x8b60c8b3
 80081dc:	3fc68a28 	.word	0x3fc68a28
 80081e0:	509f79fb 	.word	0x509f79fb
 80081e4:	3fd34413 	.word	0x3fd34413
 80081e8:	0800ac3e 	.word	0x0800ac3e
 80081ec:	0800ac55 	.word	0x0800ac55
 80081f0:	7ff00000 	.word	0x7ff00000
 80081f4:	0800ac3a 	.word	0x0800ac3a
 80081f8:	0800ac31 	.word	0x0800ac31
 80081fc:	0800aab5 	.word	0x0800aab5
 8008200:	3ff80000 	.word	0x3ff80000
 8008204:	0800adc0 	.word	0x0800adc0
 8008208:	0800acb0 	.word	0x0800acb0
 800820c:	2501      	movs	r5, #1
 800820e:	2300      	movs	r3, #0
 8008210:	9306      	str	r3, [sp, #24]
 8008212:	9508      	str	r5, [sp, #32]
 8008214:	f04f 33ff 	mov.w	r3, #4294967295
 8008218:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	2312      	movs	r3, #18
 8008220:	e7b0      	b.n	8008184 <_dtoa_r+0x26c>
 8008222:	2301      	movs	r3, #1
 8008224:	9308      	str	r3, [sp, #32]
 8008226:	e7f5      	b.n	8008214 <_dtoa_r+0x2fc>
 8008228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800822e:	e7b8      	b.n	80081a2 <_dtoa_r+0x28a>
 8008230:	3101      	adds	r1, #1
 8008232:	6041      	str	r1, [r0, #4]
 8008234:	0052      	lsls	r2, r2, #1
 8008236:	e7b8      	b.n	80081aa <_dtoa_r+0x292>
 8008238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	9b03      	ldr	r3, [sp, #12]
 8008240:	2b0e      	cmp	r3, #14
 8008242:	f200 809d 	bhi.w	8008380 <_dtoa_r+0x468>
 8008246:	2d00      	cmp	r5, #0
 8008248:	f000 809a 	beq.w	8008380 <_dtoa_r+0x468>
 800824c:	9b00      	ldr	r3, [sp, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	dd32      	ble.n	80082b8 <_dtoa_r+0x3a0>
 8008252:	4ab7      	ldr	r2, [pc, #732]	; (8008530 <_dtoa_r+0x618>)
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800825c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008260:	9b00      	ldr	r3, [sp, #0]
 8008262:	05d8      	lsls	r0, r3, #23
 8008264:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008268:	d516      	bpl.n	8008298 <_dtoa_r+0x380>
 800826a:	4bb2      	ldr	r3, [pc, #712]	; (8008534 <_dtoa_r+0x61c>)
 800826c:	ec51 0b19 	vmov	r0, r1, d9
 8008270:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008274:	f7f8 faf2 	bl	800085c <__aeabi_ddiv>
 8008278:	f007 070f 	and.w	r7, r7, #15
 800827c:	4682      	mov	sl, r0
 800827e:	468b      	mov	fp, r1
 8008280:	2503      	movs	r5, #3
 8008282:	4eac      	ldr	r6, [pc, #688]	; (8008534 <_dtoa_r+0x61c>)
 8008284:	b957      	cbnz	r7, 800829c <_dtoa_r+0x384>
 8008286:	4642      	mov	r2, r8
 8008288:	464b      	mov	r3, r9
 800828a:	4650      	mov	r0, sl
 800828c:	4659      	mov	r1, fp
 800828e:	f7f8 fae5 	bl	800085c <__aeabi_ddiv>
 8008292:	4682      	mov	sl, r0
 8008294:	468b      	mov	fp, r1
 8008296:	e028      	b.n	80082ea <_dtoa_r+0x3d2>
 8008298:	2502      	movs	r5, #2
 800829a:	e7f2      	b.n	8008282 <_dtoa_r+0x36a>
 800829c:	07f9      	lsls	r1, r7, #31
 800829e:	d508      	bpl.n	80082b2 <_dtoa_r+0x39a>
 80082a0:	4640      	mov	r0, r8
 80082a2:	4649      	mov	r1, r9
 80082a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082a8:	f7f8 f9ae 	bl	8000608 <__aeabi_dmul>
 80082ac:	3501      	adds	r5, #1
 80082ae:	4680      	mov	r8, r0
 80082b0:	4689      	mov	r9, r1
 80082b2:	107f      	asrs	r7, r7, #1
 80082b4:	3608      	adds	r6, #8
 80082b6:	e7e5      	b.n	8008284 <_dtoa_r+0x36c>
 80082b8:	f000 809b 	beq.w	80083f2 <_dtoa_r+0x4da>
 80082bc:	9b00      	ldr	r3, [sp, #0]
 80082be:	4f9d      	ldr	r7, [pc, #628]	; (8008534 <_dtoa_r+0x61c>)
 80082c0:	425e      	negs	r6, r3
 80082c2:	4b9b      	ldr	r3, [pc, #620]	; (8008530 <_dtoa_r+0x618>)
 80082c4:	f006 020f 	and.w	r2, r6, #15
 80082c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	ec51 0b19 	vmov	r0, r1, d9
 80082d4:	f7f8 f998 	bl	8000608 <__aeabi_dmul>
 80082d8:	1136      	asrs	r6, r6, #4
 80082da:	4682      	mov	sl, r0
 80082dc:	468b      	mov	fp, r1
 80082de:	2300      	movs	r3, #0
 80082e0:	2502      	movs	r5, #2
 80082e2:	2e00      	cmp	r6, #0
 80082e4:	d17a      	bne.n	80083dc <_dtoa_r+0x4c4>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1d3      	bne.n	8008292 <_dtoa_r+0x37a>
 80082ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8082 	beq.w	80083f6 <_dtoa_r+0x4de>
 80082f2:	4b91      	ldr	r3, [pc, #580]	; (8008538 <_dtoa_r+0x620>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	4650      	mov	r0, sl
 80082f8:	4659      	mov	r1, fp
 80082fa:	f7f8 fbf7 	bl	8000aec <__aeabi_dcmplt>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d079      	beq.n	80083f6 <_dtoa_r+0x4de>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d076      	beq.n	80083f6 <_dtoa_r+0x4de>
 8008308:	9b02      	ldr	r3, [sp, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	dd36      	ble.n	800837c <_dtoa_r+0x464>
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	4650      	mov	r0, sl
 8008312:	4659      	mov	r1, fp
 8008314:	1e5f      	subs	r7, r3, #1
 8008316:	2200      	movs	r2, #0
 8008318:	4b88      	ldr	r3, [pc, #544]	; (800853c <_dtoa_r+0x624>)
 800831a:	f7f8 f975 	bl	8000608 <__aeabi_dmul>
 800831e:	9e02      	ldr	r6, [sp, #8]
 8008320:	4682      	mov	sl, r0
 8008322:	468b      	mov	fp, r1
 8008324:	3501      	adds	r5, #1
 8008326:	4628      	mov	r0, r5
 8008328:	f7f8 f904 	bl	8000534 <__aeabi_i2d>
 800832c:	4652      	mov	r2, sl
 800832e:	465b      	mov	r3, fp
 8008330:	f7f8 f96a 	bl	8000608 <__aeabi_dmul>
 8008334:	4b82      	ldr	r3, [pc, #520]	; (8008540 <_dtoa_r+0x628>)
 8008336:	2200      	movs	r2, #0
 8008338:	f7f7 ffb0 	bl	800029c <__adddf3>
 800833c:	46d0      	mov	r8, sl
 800833e:	46d9      	mov	r9, fp
 8008340:	4682      	mov	sl, r0
 8008342:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008346:	2e00      	cmp	r6, #0
 8008348:	d158      	bne.n	80083fc <_dtoa_r+0x4e4>
 800834a:	4b7e      	ldr	r3, [pc, #504]	; (8008544 <_dtoa_r+0x62c>)
 800834c:	2200      	movs	r2, #0
 800834e:	4640      	mov	r0, r8
 8008350:	4649      	mov	r1, r9
 8008352:	f7f7 ffa1 	bl	8000298 <__aeabi_dsub>
 8008356:	4652      	mov	r2, sl
 8008358:	465b      	mov	r3, fp
 800835a:	4680      	mov	r8, r0
 800835c:	4689      	mov	r9, r1
 800835e:	f7f8 fbe3 	bl	8000b28 <__aeabi_dcmpgt>
 8008362:	2800      	cmp	r0, #0
 8008364:	f040 8295 	bne.w	8008892 <_dtoa_r+0x97a>
 8008368:	4652      	mov	r2, sl
 800836a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	f7f8 fbbb 	bl	8000aec <__aeabi_dcmplt>
 8008376:	2800      	cmp	r0, #0
 8008378:	f040 8289 	bne.w	800888e <_dtoa_r+0x976>
 800837c:	ec5b ab19 	vmov	sl, fp, d9
 8008380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008382:	2b00      	cmp	r3, #0
 8008384:	f2c0 8148 	blt.w	8008618 <_dtoa_r+0x700>
 8008388:	9a00      	ldr	r2, [sp, #0]
 800838a:	2a0e      	cmp	r2, #14
 800838c:	f300 8144 	bgt.w	8008618 <_dtoa_r+0x700>
 8008390:	4b67      	ldr	r3, [pc, #412]	; (8008530 <_dtoa_r+0x618>)
 8008392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008396:	e9d3 8900 	ldrd	r8, r9, [r3]
 800839a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839c:	2b00      	cmp	r3, #0
 800839e:	f280 80d5 	bge.w	800854c <_dtoa_r+0x634>
 80083a2:	9b03      	ldr	r3, [sp, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f300 80d1 	bgt.w	800854c <_dtoa_r+0x634>
 80083aa:	f040 826f 	bne.w	800888c <_dtoa_r+0x974>
 80083ae:	4b65      	ldr	r3, [pc, #404]	; (8008544 <_dtoa_r+0x62c>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	4640      	mov	r0, r8
 80083b4:	4649      	mov	r1, r9
 80083b6:	f7f8 f927 	bl	8000608 <__aeabi_dmul>
 80083ba:	4652      	mov	r2, sl
 80083bc:	465b      	mov	r3, fp
 80083be:	f7f8 fba9 	bl	8000b14 <__aeabi_dcmpge>
 80083c2:	9e03      	ldr	r6, [sp, #12]
 80083c4:	4637      	mov	r7, r6
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f040 8245 	bne.w	8008856 <_dtoa_r+0x93e>
 80083cc:	9d01      	ldr	r5, [sp, #4]
 80083ce:	2331      	movs	r3, #49	; 0x31
 80083d0:	f805 3b01 	strb.w	r3, [r5], #1
 80083d4:	9b00      	ldr	r3, [sp, #0]
 80083d6:	3301      	adds	r3, #1
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	e240      	b.n	800885e <_dtoa_r+0x946>
 80083dc:	07f2      	lsls	r2, r6, #31
 80083de:	d505      	bpl.n	80083ec <_dtoa_r+0x4d4>
 80083e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e4:	f7f8 f910 	bl	8000608 <__aeabi_dmul>
 80083e8:	3501      	adds	r5, #1
 80083ea:	2301      	movs	r3, #1
 80083ec:	1076      	asrs	r6, r6, #1
 80083ee:	3708      	adds	r7, #8
 80083f0:	e777      	b.n	80082e2 <_dtoa_r+0x3ca>
 80083f2:	2502      	movs	r5, #2
 80083f4:	e779      	b.n	80082ea <_dtoa_r+0x3d2>
 80083f6:	9f00      	ldr	r7, [sp, #0]
 80083f8:	9e03      	ldr	r6, [sp, #12]
 80083fa:	e794      	b.n	8008326 <_dtoa_r+0x40e>
 80083fc:	9901      	ldr	r1, [sp, #4]
 80083fe:	4b4c      	ldr	r3, [pc, #304]	; (8008530 <_dtoa_r+0x618>)
 8008400:	4431      	add	r1, r6
 8008402:	910d      	str	r1, [sp, #52]	; 0x34
 8008404:	9908      	ldr	r1, [sp, #32]
 8008406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800840a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800840e:	2900      	cmp	r1, #0
 8008410:	d043      	beq.n	800849a <_dtoa_r+0x582>
 8008412:	494d      	ldr	r1, [pc, #308]	; (8008548 <_dtoa_r+0x630>)
 8008414:	2000      	movs	r0, #0
 8008416:	f7f8 fa21 	bl	800085c <__aeabi_ddiv>
 800841a:	4652      	mov	r2, sl
 800841c:	465b      	mov	r3, fp
 800841e:	f7f7 ff3b 	bl	8000298 <__aeabi_dsub>
 8008422:	9d01      	ldr	r5, [sp, #4]
 8008424:	4682      	mov	sl, r0
 8008426:	468b      	mov	fp, r1
 8008428:	4649      	mov	r1, r9
 800842a:	4640      	mov	r0, r8
 800842c:	f7f8 fb9c 	bl	8000b68 <__aeabi_d2iz>
 8008430:	4606      	mov	r6, r0
 8008432:	f7f8 f87f 	bl	8000534 <__aeabi_i2d>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4640      	mov	r0, r8
 800843c:	4649      	mov	r1, r9
 800843e:	f7f7 ff2b 	bl	8000298 <__aeabi_dsub>
 8008442:	3630      	adds	r6, #48	; 0x30
 8008444:	f805 6b01 	strb.w	r6, [r5], #1
 8008448:	4652      	mov	r2, sl
 800844a:	465b      	mov	r3, fp
 800844c:	4680      	mov	r8, r0
 800844e:	4689      	mov	r9, r1
 8008450:	f7f8 fb4c 	bl	8000aec <__aeabi_dcmplt>
 8008454:	2800      	cmp	r0, #0
 8008456:	d163      	bne.n	8008520 <_dtoa_r+0x608>
 8008458:	4642      	mov	r2, r8
 800845a:	464b      	mov	r3, r9
 800845c:	4936      	ldr	r1, [pc, #216]	; (8008538 <_dtoa_r+0x620>)
 800845e:	2000      	movs	r0, #0
 8008460:	f7f7 ff1a 	bl	8000298 <__aeabi_dsub>
 8008464:	4652      	mov	r2, sl
 8008466:	465b      	mov	r3, fp
 8008468:	f7f8 fb40 	bl	8000aec <__aeabi_dcmplt>
 800846c:	2800      	cmp	r0, #0
 800846e:	f040 80b5 	bne.w	80085dc <_dtoa_r+0x6c4>
 8008472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008474:	429d      	cmp	r5, r3
 8008476:	d081      	beq.n	800837c <_dtoa_r+0x464>
 8008478:	4b30      	ldr	r3, [pc, #192]	; (800853c <_dtoa_r+0x624>)
 800847a:	2200      	movs	r2, #0
 800847c:	4650      	mov	r0, sl
 800847e:	4659      	mov	r1, fp
 8008480:	f7f8 f8c2 	bl	8000608 <__aeabi_dmul>
 8008484:	4b2d      	ldr	r3, [pc, #180]	; (800853c <_dtoa_r+0x624>)
 8008486:	4682      	mov	sl, r0
 8008488:	468b      	mov	fp, r1
 800848a:	4640      	mov	r0, r8
 800848c:	4649      	mov	r1, r9
 800848e:	2200      	movs	r2, #0
 8008490:	f7f8 f8ba 	bl	8000608 <__aeabi_dmul>
 8008494:	4680      	mov	r8, r0
 8008496:	4689      	mov	r9, r1
 8008498:	e7c6      	b.n	8008428 <_dtoa_r+0x510>
 800849a:	4650      	mov	r0, sl
 800849c:	4659      	mov	r1, fp
 800849e:	f7f8 f8b3 	bl	8000608 <__aeabi_dmul>
 80084a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a4:	9d01      	ldr	r5, [sp, #4]
 80084a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80084a8:	4682      	mov	sl, r0
 80084aa:	468b      	mov	fp, r1
 80084ac:	4649      	mov	r1, r9
 80084ae:	4640      	mov	r0, r8
 80084b0:	f7f8 fb5a 	bl	8000b68 <__aeabi_d2iz>
 80084b4:	4606      	mov	r6, r0
 80084b6:	f7f8 f83d 	bl	8000534 <__aeabi_i2d>
 80084ba:	3630      	adds	r6, #48	; 0x30
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4640      	mov	r0, r8
 80084c2:	4649      	mov	r1, r9
 80084c4:	f7f7 fee8 	bl	8000298 <__aeabi_dsub>
 80084c8:	f805 6b01 	strb.w	r6, [r5], #1
 80084cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ce:	429d      	cmp	r5, r3
 80084d0:	4680      	mov	r8, r0
 80084d2:	4689      	mov	r9, r1
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	d124      	bne.n	8008524 <_dtoa_r+0x60c>
 80084da:	4b1b      	ldr	r3, [pc, #108]	; (8008548 <_dtoa_r+0x630>)
 80084dc:	4650      	mov	r0, sl
 80084de:	4659      	mov	r1, fp
 80084e0:	f7f7 fedc 	bl	800029c <__adddf3>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4640      	mov	r0, r8
 80084ea:	4649      	mov	r1, r9
 80084ec:	f7f8 fb1c 	bl	8000b28 <__aeabi_dcmpgt>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d173      	bne.n	80085dc <_dtoa_r+0x6c4>
 80084f4:	4652      	mov	r2, sl
 80084f6:	465b      	mov	r3, fp
 80084f8:	4913      	ldr	r1, [pc, #76]	; (8008548 <_dtoa_r+0x630>)
 80084fa:	2000      	movs	r0, #0
 80084fc:	f7f7 fecc 	bl	8000298 <__aeabi_dsub>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4640      	mov	r0, r8
 8008506:	4649      	mov	r1, r9
 8008508:	f7f8 faf0 	bl	8000aec <__aeabi_dcmplt>
 800850c:	2800      	cmp	r0, #0
 800850e:	f43f af35 	beq.w	800837c <_dtoa_r+0x464>
 8008512:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008514:	1e6b      	subs	r3, r5, #1
 8008516:	930f      	str	r3, [sp, #60]	; 0x3c
 8008518:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800851c:	2b30      	cmp	r3, #48	; 0x30
 800851e:	d0f8      	beq.n	8008512 <_dtoa_r+0x5fa>
 8008520:	9700      	str	r7, [sp, #0]
 8008522:	e049      	b.n	80085b8 <_dtoa_r+0x6a0>
 8008524:	4b05      	ldr	r3, [pc, #20]	; (800853c <_dtoa_r+0x624>)
 8008526:	f7f8 f86f 	bl	8000608 <__aeabi_dmul>
 800852a:	4680      	mov	r8, r0
 800852c:	4689      	mov	r9, r1
 800852e:	e7bd      	b.n	80084ac <_dtoa_r+0x594>
 8008530:	0800adc0 	.word	0x0800adc0
 8008534:	0800ad98 	.word	0x0800ad98
 8008538:	3ff00000 	.word	0x3ff00000
 800853c:	40240000 	.word	0x40240000
 8008540:	401c0000 	.word	0x401c0000
 8008544:	40140000 	.word	0x40140000
 8008548:	3fe00000 	.word	0x3fe00000
 800854c:	9d01      	ldr	r5, [sp, #4]
 800854e:	4656      	mov	r6, sl
 8008550:	465f      	mov	r7, fp
 8008552:	4642      	mov	r2, r8
 8008554:	464b      	mov	r3, r9
 8008556:	4630      	mov	r0, r6
 8008558:	4639      	mov	r1, r7
 800855a:	f7f8 f97f 	bl	800085c <__aeabi_ddiv>
 800855e:	f7f8 fb03 	bl	8000b68 <__aeabi_d2iz>
 8008562:	4682      	mov	sl, r0
 8008564:	f7f7 ffe6 	bl	8000534 <__aeabi_i2d>
 8008568:	4642      	mov	r2, r8
 800856a:	464b      	mov	r3, r9
 800856c:	f7f8 f84c 	bl	8000608 <__aeabi_dmul>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4630      	mov	r0, r6
 8008576:	4639      	mov	r1, r7
 8008578:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800857c:	f7f7 fe8c 	bl	8000298 <__aeabi_dsub>
 8008580:	f805 6b01 	strb.w	r6, [r5], #1
 8008584:	9e01      	ldr	r6, [sp, #4]
 8008586:	9f03      	ldr	r7, [sp, #12]
 8008588:	1bae      	subs	r6, r5, r6
 800858a:	42b7      	cmp	r7, r6
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	d135      	bne.n	80085fe <_dtoa_r+0x6e6>
 8008592:	f7f7 fe83 	bl	800029c <__adddf3>
 8008596:	4642      	mov	r2, r8
 8008598:	464b      	mov	r3, r9
 800859a:	4606      	mov	r6, r0
 800859c:	460f      	mov	r7, r1
 800859e:	f7f8 fac3 	bl	8000b28 <__aeabi_dcmpgt>
 80085a2:	b9d0      	cbnz	r0, 80085da <_dtoa_r+0x6c2>
 80085a4:	4642      	mov	r2, r8
 80085a6:	464b      	mov	r3, r9
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	f7f8 fa94 	bl	8000ad8 <__aeabi_dcmpeq>
 80085b0:	b110      	cbz	r0, 80085b8 <_dtoa_r+0x6a0>
 80085b2:	f01a 0f01 	tst.w	sl, #1
 80085b6:	d110      	bne.n	80085da <_dtoa_r+0x6c2>
 80085b8:	4620      	mov	r0, r4
 80085ba:	ee18 1a10 	vmov	r1, s16
 80085be:	f000 fe79 	bl	80092b4 <_Bfree>
 80085c2:	2300      	movs	r3, #0
 80085c4:	9800      	ldr	r0, [sp, #0]
 80085c6:	702b      	strb	r3, [r5, #0]
 80085c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ca:	3001      	adds	r0, #1
 80085cc:	6018      	str	r0, [r3, #0]
 80085ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f43f acf1 	beq.w	8007fb8 <_dtoa_r+0xa0>
 80085d6:	601d      	str	r5, [r3, #0]
 80085d8:	e4ee      	b.n	8007fb8 <_dtoa_r+0xa0>
 80085da:	9f00      	ldr	r7, [sp, #0]
 80085dc:	462b      	mov	r3, r5
 80085de:	461d      	mov	r5, r3
 80085e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085e4:	2a39      	cmp	r2, #57	; 0x39
 80085e6:	d106      	bne.n	80085f6 <_dtoa_r+0x6de>
 80085e8:	9a01      	ldr	r2, [sp, #4]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d1f7      	bne.n	80085de <_dtoa_r+0x6c6>
 80085ee:	9901      	ldr	r1, [sp, #4]
 80085f0:	2230      	movs	r2, #48	; 0x30
 80085f2:	3701      	adds	r7, #1
 80085f4:	700a      	strb	r2, [r1, #0]
 80085f6:	781a      	ldrb	r2, [r3, #0]
 80085f8:	3201      	adds	r2, #1
 80085fa:	701a      	strb	r2, [r3, #0]
 80085fc:	e790      	b.n	8008520 <_dtoa_r+0x608>
 80085fe:	4ba6      	ldr	r3, [pc, #664]	; (8008898 <_dtoa_r+0x980>)
 8008600:	2200      	movs	r2, #0
 8008602:	f7f8 f801 	bl	8000608 <__aeabi_dmul>
 8008606:	2200      	movs	r2, #0
 8008608:	2300      	movs	r3, #0
 800860a:	4606      	mov	r6, r0
 800860c:	460f      	mov	r7, r1
 800860e:	f7f8 fa63 	bl	8000ad8 <__aeabi_dcmpeq>
 8008612:	2800      	cmp	r0, #0
 8008614:	d09d      	beq.n	8008552 <_dtoa_r+0x63a>
 8008616:	e7cf      	b.n	80085b8 <_dtoa_r+0x6a0>
 8008618:	9a08      	ldr	r2, [sp, #32]
 800861a:	2a00      	cmp	r2, #0
 800861c:	f000 80d7 	beq.w	80087ce <_dtoa_r+0x8b6>
 8008620:	9a06      	ldr	r2, [sp, #24]
 8008622:	2a01      	cmp	r2, #1
 8008624:	f300 80ba 	bgt.w	800879c <_dtoa_r+0x884>
 8008628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800862a:	2a00      	cmp	r2, #0
 800862c:	f000 80b2 	beq.w	8008794 <_dtoa_r+0x87c>
 8008630:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008634:	9e07      	ldr	r6, [sp, #28]
 8008636:	9d04      	ldr	r5, [sp, #16]
 8008638:	9a04      	ldr	r2, [sp, #16]
 800863a:	441a      	add	r2, r3
 800863c:	9204      	str	r2, [sp, #16]
 800863e:	9a05      	ldr	r2, [sp, #20]
 8008640:	2101      	movs	r1, #1
 8008642:	441a      	add	r2, r3
 8008644:	4620      	mov	r0, r4
 8008646:	9205      	str	r2, [sp, #20]
 8008648:	f000 ff36 	bl	80094b8 <__i2b>
 800864c:	4607      	mov	r7, r0
 800864e:	2d00      	cmp	r5, #0
 8008650:	dd0c      	ble.n	800866c <_dtoa_r+0x754>
 8008652:	9b05      	ldr	r3, [sp, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	dd09      	ble.n	800866c <_dtoa_r+0x754>
 8008658:	42ab      	cmp	r3, r5
 800865a:	9a04      	ldr	r2, [sp, #16]
 800865c:	bfa8      	it	ge
 800865e:	462b      	movge	r3, r5
 8008660:	1ad2      	subs	r2, r2, r3
 8008662:	9204      	str	r2, [sp, #16]
 8008664:	9a05      	ldr	r2, [sp, #20]
 8008666:	1aed      	subs	r5, r5, r3
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	9b07      	ldr	r3, [sp, #28]
 800866e:	b31b      	cbz	r3, 80086b8 <_dtoa_r+0x7a0>
 8008670:	9b08      	ldr	r3, [sp, #32]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 80af 	beq.w	80087d6 <_dtoa_r+0x8be>
 8008678:	2e00      	cmp	r6, #0
 800867a:	dd13      	ble.n	80086a4 <_dtoa_r+0x78c>
 800867c:	4639      	mov	r1, r7
 800867e:	4632      	mov	r2, r6
 8008680:	4620      	mov	r0, r4
 8008682:	f000 ffd9 	bl	8009638 <__pow5mult>
 8008686:	ee18 2a10 	vmov	r2, s16
 800868a:	4601      	mov	r1, r0
 800868c:	4607      	mov	r7, r0
 800868e:	4620      	mov	r0, r4
 8008690:	f000 ff28 	bl	80094e4 <__multiply>
 8008694:	ee18 1a10 	vmov	r1, s16
 8008698:	4680      	mov	r8, r0
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fe0a 	bl	80092b4 <_Bfree>
 80086a0:	ee08 8a10 	vmov	s16, r8
 80086a4:	9b07      	ldr	r3, [sp, #28]
 80086a6:	1b9a      	subs	r2, r3, r6
 80086a8:	d006      	beq.n	80086b8 <_dtoa_r+0x7a0>
 80086aa:	ee18 1a10 	vmov	r1, s16
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 ffc2 	bl	8009638 <__pow5mult>
 80086b4:	ee08 0a10 	vmov	s16, r0
 80086b8:	2101      	movs	r1, #1
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fefc 	bl	80094b8 <__i2b>
 80086c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	4606      	mov	r6, r0
 80086c6:	f340 8088 	ble.w	80087da <_dtoa_r+0x8c2>
 80086ca:	461a      	mov	r2, r3
 80086cc:	4601      	mov	r1, r0
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 ffb2 	bl	8009638 <__pow5mult>
 80086d4:	9b06      	ldr	r3, [sp, #24]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	4606      	mov	r6, r0
 80086da:	f340 8081 	ble.w	80087e0 <_dtoa_r+0x8c8>
 80086de:	f04f 0800 	mov.w	r8, #0
 80086e2:	6933      	ldr	r3, [r6, #16]
 80086e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086e8:	6918      	ldr	r0, [r3, #16]
 80086ea:	f000 fe95 	bl	8009418 <__hi0bits>
 80086ee:	f1c0 0020 	rsb	r0, r0, #32
 80086f2:	9b05      	ldr	r3, [sp, #20]
 80086f4:	4418      	add	r0, r3
 80086f6:	f010 001f 	ands.w	r0, r0, #31
 80086fa:	f000 8092 	beq.w	8008822 <_dtoa_r+0x90a>
 80086fe:	f1c0 0320 	rsb	r3, r0, #32
 8008702:	2b04      	cmp	r3, #4
 8008704:	f340 808a 	ble.w	800881c <_dtoa_r+0x904>
 8008708:	f1c0 001c 	rsb	r0, r0, #28
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	4403      	add	r3, r0
 8008710:	9304      	str	r3, [sp, #16]
 8008712:	9b05      	ldr	r3, [sp, #20]
 8008714:	4403      	add	r3, r0
 8008716:	4405      	add	r5, r0
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	dd07      	ble.n	8008730 <_dtoa_r+0x818>
 8008720:	ee18 1a10 	vmov	r1, s16
 8008724:	461a      	mov	r2, r3
 8008726:	4620      	mov	r0, r4
 8008728:	f000 ffe0 	bl	80096ec <__lshift>
 800872c:	ee08 0a10 	vmov	s16, r0
 8008730:	9b05      	ldr	r3, [sp, #20]
 8008732:	2b00      	cmp	r3, #0
 8008734:	dd05      	ble.n	8008742 <_dtoa_r+0x82a>
 8008736:	4631      	mov	r1, r6
 8008738:	461a      	mov	r2, r3
 800873a:	4620      	mov	r0, r4
 800873c:	f000 ffd6 	bl	80096ec <__lshift>
 8008740:	4606      	mov	r6, r0
 8008742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008744:	2b00      	cmp	r3, #0
 8008746:	d06e      	beq.n	8008826 <_dtoa_r+0x90e>
 8008748:	ee18 0a10 	vmov	r0, s16
 800874c:	4631      	mov	r1, r6
 800874e:	f001 f83d 	bl	80097cc <__mcmp>
 8008752:	2800      	cmp	r0, #0
 8008754:	da67      	bge.n	8008826 <_dtoa_r+0x90e>
 8008756:	9b00      	ldr	r3, [sp, #0]
 8008758:	3b01      	subs	r3, #1
 800875a:	ee18 1a10 	vmov	r1, s16
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	220a      	movs	r2, #10
 8008762:	2300      	movs	r3, #0
 8008764:	4620      	mov	r0, r4
 8008766:	f000 fdc7 	bl	80092f8 <__multadd>
 800876a:	9b08      	ldr	r3, [sp, #32]
 800876c:	ee08 0a10 	vmov	s16, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 81b1 	beq.w	8008ad8 <_dtoa_r+0xbc0>
 8008776:	2300      	movs	r3, #0
 8008778:	4639      	mov	r1, r7
 800877a:	220a      	movs	r2, #10
 800877c:	4620      	mov	r0, r4
 800877e:	f000 fdbb 	bl	80092f8 <__multadd>
 8008782:	9b02      	ldr	r3, [sp, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	4607      	mov	r7, r0
 8008788:	f300 808e 	bgt.w	80088a8 <_dtoa_r+0x990>
 800878c:	9b06      	ldr	r3, [sp, #24]
 800878e:	2b02      	cmp	r3, #2
 8008790:	dc51      	bgt.n	8008836 <_dtoa_r+0x91e>
 8008792:	e089      	b.n	80088a8 <_dtoa_r+0x990>
 8008794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008796:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800879a:	e74b      	b.n	8008634 <_dtoa_r+0x71c>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	1e5e      	subs	r6, r3, #1
 80087a0:	9b07      	ldr	r3, [sp, #28]
 80087a2:	42b3      	cmp	r3, r6
 80087a4:	bfbf      	itttt	lt
 80087a6:	9b07      	ldrlt	r3, [sp, #28]
 80087a8:	9607      	strlt	r6, [sp, #28]
 80087aa:	1af2      	sublt	r2, r6, r3
 80087ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80087ae:	bfb6      	itet	lt
 80087b0:	189b      	addlt	r3, r3, r2
 80087b2:	1b9e      	subge	r6, r3, r6
 80087b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	bfb8      	it	lt
 80087ba:	2600      	movlt	r6, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bfb7      	itett	lt
 80087c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80087c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80087c8:	1a9d      	sublt	r5, r3, r2
 80087ca:	2300      	movlt	r3, #0
 80087cc:	e734      	b.n	8008638 <_dtoa_r+0x720>
 80087ce:	9e07      	ldr	r6, [sp, #28]
 80087d0:	9d04      	ldr	r5, [sp, #16]
 80087d2:	9f08      	ldr	r7, [sp, #32]
 80087d4:	e73b      	b.n	800864e <_dtoa_r+0x736>
 80087d6:	9a07      	ldr	r2, [sp, #28]
 80087d8:	e767      	b.n	80086aa <_dtoa_r+0x792>
 80087da:	9b06      	ldr	r3, [sp, #24]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	dc18      	bgt.n	8008812 <_dtoa_r+0x8fa>
 80087e0:	f1ba 0f00 	cmp.w	sl, #0
 80087e4:	d115      	bne.n	8008812 <_dtoa_r+0x8fa>
 80087e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087ea:	b993      	cbnz	r3, 8008812 <_dtoa_r+0x8fa>
 80087ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087f0:	0d1b      	lsrs	r3, r3, #20
 80087f2:	051b      	lsls	r3, r3, #20
 80087f4:	b183      	cbz	r3, 8008818 <_dtoa_r+0x900>
 80087f6:	9b04      	ldr	r3, [sp, #16]
 80087f8:	3301      	adds	r3, #1
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	9b05      	ldr	r3, [sp, #20]
 80087fe:	3301      	adds	r3, #1
 8008800:	9305      	str	r3, [sp, #20]
 8008802:	f04f 0801 	mov.w	r8, #1
 8008806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008808:	2b00      	cmp	r3, #0
 800880a:	f47f af6a 	bne.w	80086e2 <_dtoa_r+0x7ca>
 800880e:	2001      	movs	r0, #1
 8008810:	e76f      	b.n	80086f2 <_dtoa_r+0x7da>
 8008812:	f04f 0800 	mov.w	r8, #0
 8008816:	e7f6      	b.n	8008806 <_dtoa_r+0x8ee>
 8008818:	4698      	mov	r8, r3
 800881a:	e7f4      	b.n	8008806 <_dtoa_r+0x8ee>
 800881c:	f43f af7d 	beq.w	800871a <_dtoa_r+0x802>
 8008820:	4618      	mov	r0, r3
 8008822:	301c      	adds	r0, #28
 8008824:	e772      	b.n	800870c <_dtoa_r+0x7f4>
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	dc37      	bgt.n	800889c <_dtoa_r+0x984>
 800882c:	9b06      	ldr	r3, [sp, #24]
 800882e:	2b02      	cmp	r3, #2
 8008830:	dd34      	ble.n	800889c <_dtoa_r+0x984>
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	9302      	str	r3, [sp, #8]
 8008836:	9b02      	ldr	r3, [sp, #8]
 8008838:	b96b      	cbnz	r3, 8008856 <_dtoa_r+0x93e>
 800883a:	4631      	mov	r1, r6
 800883c:	2205      	movs	r2, #5
 800883e:	4620      	mov	r0, r4
 8008840:	f000 fd5a 	bl	80092f8 <__multadd>
 8008844:	4601      	mov	r1, r0
 8008846:	4606      	mov	r6, r0
 8008848:	ee18 0a10 	vmov	r0, s16
 800884c:	f000 ffbe 	bl	80097cc <__mcmp>
 8008850:	2800      	cmp	r0, #0
 8008852:	f73f adbb 	bgt.w	80083cc <_dtoa_r+0x4b4>
 8008856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008858:	9d01      	ldr	r5, [sp, #4]
 800885a:	43db      	mvns	r3, r3
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	f04f 0800 	mov.w	r8, #0
 8008862:	4631      	mov	r1, r6
 8008864:	4620      	mov	r0, r4
 8008866:	f000 fd25 	bl	80092b4 <_Bfree>
 800886a:	2f00      	cmp	r7, #0
 800886c:	f43f aea4 	beq.w	80085b8 <_dtoa_r+0x6a0>
 8008870:	f1b8 0f00 	cmp.w	r8, #0
 8008874:	d005      	beq.n	8008882 <_dtoa_r+0x96a>
 8008876:	45b8      	cmp	r8, r7
 8008878:	d003      	beq.n	8008882 <_dtoa_r+0x96a>
 800887a:	4641      	mov	r1, r8
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fd19 	bl	80092b4 <_Bfree>
 8008882:	4639      	mov	r1, r7
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fd15 	bl	80092b4 <_Bfree>
 800888a:	e695      	b.n	80085b8 <_dtoa_r+0x6a0>
 800888c:	2600      	movs	r6, #0
 800888e:	4637      	mov	r7, r6
 8008890:	e7e1      	b.n	8008856 <_dtoa_r+0x93e>
 8008892:	9700      	str	r7, [sp, #0]
 8008894:	4637      	mov	r7, r6
 8008896:	e599      	b.n	80083cc <_dtoa_r+0x4b4>
 8008898:	40240000 	.word	0x40240000
 800889c:	9b08      	ldr	r3, [sp, #32]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 80ca 	beq.w	8008a38 <_dtoa_r+0xb20>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	9302      	str	r3, [sp, #8]
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	dd05      	ble.n	80088b8 <_dtoa_r+0x9a0>
 80088ac:	4639      	mov	r1, r7
 80088ae:	462a      	mov	r2, r5
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 ff1b 	bl	80096ec <__lshift>
 80088b6:	4607      	mov	r7, r0
 80088b8:	f1b8 0f00 	cmp.w	r8, #0
 80088bc:	d05b      	beq.n	8008976 <_dtoa_r+0xa5e>
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 fcb7 	bl	8009234 <_Balloc>
 80088c6:	4605      	mov	r5, r0
 80088c8:	b928      	cbnz	r0, 80088d6 <_dtoa_r+0x9be>
 80088ca:	4b87      	ldr	r3, [pc, #540]	; (8008ae8 <_dtoa_r+0xbd0>)
 80088cc:	4602      	mov	r2, r0
 80088ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088d2:	f7ff bb3b 	b.w	8007f4c <_dtoa_r+0x34>
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	3202      	adds	r2, #2
 80088da:	0092      	lsls	r2, r2, #2
 80088dc:	f107 010c 	add.w	r1, r7, #12
 80088e0:	300c      	adds	r0, #12
 80088e2:	f000 fc8d 	bl	8009200 <memcpy>
 80088e6:	2201      	movs	r2, #1
 80088e8:	4629      	mov	r1, r5
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 fefe 	bl	80096ec <__lshift>
 80088f0:	9b01      	ldr	r3, [sp, #4]
 80088f2:	f103 0901 	add.w	r9, r3, #1
 80088f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80088fa:	4413      	add	r3, r2
 80088fc:	9305      	str	r3, [sp, #20]
 80088fe:	f00a 0301 	and.w	r3, sl, #1
 8008902:	46b8      	mov	r8, r7
 8008904:	9304      	str	r3, [sp, #16]
 8008906:	4607      	mov	r7, r0
 8008908:	4631      	mov	r1, r6
 800890a:	ee18 0a10 	vmov	r0, s16
 800890e:	f7ff fa77 	bl	8007e00 <quorem>
 8008912:	4641      	mov	r1, r8
 8008914:	9002      	str	r0, [sp, #8]
 8008916:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800891a:	ee18 0a10 	vmov	r0, s16
 800891e:	f000 ff55 	bl	80097cc <__mcmp>
 8008922:	463a      	mov	r2, r7
 8008924:	9003      	str	r0, [sp, #12]
 8008926:	4631      	mov	r1, r6
 8008928:	4620      	mov	r0, r4
 800892a:	f000 ff6b 	bl	8009804 <__mdiff>
 800892e:	68c2      	ldr	r2, [r0, #12]
 8008930:	f109 3bff 	add.w	fp, r9, #4294967295
 8008934:	4605      	mov	r5, r0
 8008936:	bb02      	cbnz	r2, 800897a <_dtoa_r+0xa62>
 8008938:	4601      	mov	r1, r0
 800893a:	ee18 0a10 	vmov	r0, s16
 800893e:	f000 ff45 	bl	80097cc <__mcmp>
 8008942:	4602      	mov	r2, r0
 8008944:	4629      	mov	r1, r5
 8008946:	4620      	mov	r0, r4
 8008948:	9207      	str	r2, [sp, #28]
 800894a:	f000 fcb3 	bl	80092b4 <_Bfree>
 800894e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008952:	ea43 0102 	orr.w	r1, r3, r2
 8008956:	9b04      	ldr	r3, [sp, #16]
 8008958:	430b      	orrs	r3, r1
 800895a:	464d      	mov	r5, r9
 800895c:	d10f      	bne.n	800897e <_dtoa_r+0xa66>
 800895e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008962:	d02a      	beq.n	80089ba <_dtoa_r+0xaa2>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	dd02      	ble.n	8008970 <_dtoa_r+0xa58>
 800896a:	9b02      	ldr	r3, [sp, #8]
 800896c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008970:	f88b a000 	strb.w	sl, [fp]
 8008974:	e775      	b.n	8008862 <_dtoa_r+0x94a>
 8008976:	4638      	mov	r0, r7
 8008978:	e7ba      	b.n	80088f0 <_dtoa_r+0x9d8>
 800897a:	2201      	movs	r2, #1
 800897c:	e7e2      	b.n	8008944 <_dtoa_r+0xa2c>
 800897e:	9b03      	ldr	r3, [sp, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	db04      	blt.n	800898e <_dtoa_r+0xa76>
 8008984:	9906      	ldr	r1, [sp, #24]
 8008986:	430b      	orrs	r3, r1
 8008988:	9904      	ldr	r1, [sp, #16]
 800898a:	430b      	orrs	r3, r1
 800898c:	d122      	bne.n	80089d4 <_dtoa_r+0xabc>
 800898e:	2a00      	cmp	r2, #0
 8008990:	ddee      	ble.n	8008970 <_dtoa_r+0xa58>
 8008992:	ee18 1a10 	vmov	r1, s16
 8008996:	2201      	movs	r2, #1
 8008998:	4620      	mov	r0, r4
 800899a:	f000 fea7 	bl	80096ec <__lshift>
 800899e:	4631      	mov	r1, r6
 80089a0:	ee08 0a10 	vmov	s16, r0
 80089a4:	f000 ff12 	bl	80097cc <__mcmp>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	dc03      	bgt.n	80089b4 <_dtoa_r+0xa9c>
 80089ac:	d1e0      	bne.n	8008970 <_dtoa_r+0xa58>
 80089ae:	f01a 0f01 	tst.w	sl, #1
 80089b2:	d0dd      	beq.n	8008970 <_dtoa_r+0xa58>
 80089b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089b8:	d1d7      	bne.n	800896a <_dtoa_r+0xa52>
 80089ba:	2339      	movs	r3, #57	; 0x39
 80089bc:	f88b 3000 	strb.w	r3, [fp]
 80089c0:	462b      	mov	r3, r5
 80089c2:	461d      	mov	r5, r3
 80089c4:	3b01      	subs	r3, #1
 80089c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089ca:	2a39      	cmp	r2, #57	; 0x39
 80089cc:	d071      	beq.n	8008ab2 <_dtoa_r+0xb9a>
 80089ce:	3201      	adds	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	e746      	b.n	8008862 <_dtoa_r+0x94a>
 80089d4:	2a00      	cmp	r2, #0
 80089d6:	dd07      	ble.n	80089e8 <_dtoa_r+0xad0>
 80089d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089dc:	d0ed      	beq.n	80089ba <_dtoa_r+0xaa2>
 80089de:	f10a 0301 	add.w	r3, sl, #1
 80089e2:	f88b 3000 	strb.w	r3, [fp]
 80089e6:	e73c      	b.n	8008862 <_dtoa_r+0x94a>
 80089e8:	9b05      	ldr	r3, [sp, #20]
 80089ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80089ee:	4599      	cmp	r9, r3
 80089f0:	d047      	beq.n	8008a82 <_dtoa_r+0xb6a>
 80089f2:	ee18 1a10 	vmov	r1, s16
 80089f6:	2300      	movs	r3, #0
 80089f8:	220a      	movs	r2, #10
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 fc7c 	bl	80092f8 <__multadd>
 8008a00:	45b8      	cmp	r8, r7
 8008a02:	ee08 0a10 	vmov	s16, r0
 8008a06:	f04f 0300 	mov.w	r3, #0
 8008a0a:	f04f 020a 	mov.w	r2, #10
 8008a0e:	4641      	mov	r1, r8
 8008a10:	4620      	mov	r0, r4
 8008a12:	d106      	bne.n	8008a22 <_dtoa_r+0xb0a>
 8008a14:	f000 fc70 	bl	80092f8 <__multadd>
 8008a18:	4680      	mov	r8, r0
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	f109 0901 	add.w	r9, r9, #1
 8008a20:	e772      	b.n	8008908 <_dtoa_r+0x9f0>
 8008a22:	f000 fc69 	bl	80092f8 <__multadd>
 8008a26:	4639      	mov	r1, r7
 8008a28:	4680      	mov	r8, r0
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	220a      	movs	r2, #10
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 fc62 	bl	80092f8 <__multadd>
 8008a34:	4607      	mov	r7, r0
 8008a36:	e7f1      	b.n	8008a1c <_dtoa_r+0xb04>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	9302      	str	r3, [sp, #8]
 8008a3c:	9d01      	ldr	r5, [sp, #4]
 8008a3e:	ee18 0a10 	vmov	r0, s16
 8008a42:	4631      	mov	r1, r6
 8008a44:	f7ff f9dc 	bl	8007e00 <quorem>
 8008a48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a4c:	9b01      	ldr	r3, [sp, #4]
 8008a4e:	f805 ab01 	strb.w	sl, [r5], #1
 8008a52:	1aea      	subs	r2, r5, r3
 8008a54:	9b02      	ldr	r3, [sp, #8]
 8008a56:	4293      	cmp	r3, r2
 8008a58:	dd09      	ble.n	8008a6e <_dtoa_r+0xb56>
 8008a5a:	ee18 1a10 	vmov	r1, s16
 8008a5e:	2300      	movs	r3, #0
 8008a60:	220a      	movs	r2, #10
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 fc48 	bl	80092f8 <__multadd>
 8008a68:	ee08 0a10 	vmov	s16, r0
 8008a6c:	e7e7      	b.n	8008a3e <_dtoa_r+0xb26>
 8008a6e:	9b02      	ldr	r3, [sp, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bfc8      	it	gt
 8008a74:	461d      	movgt	r5, r3
 8008a76:	9b01      	ldr	r3, [sp, #4]
 8008a78:	bfd8      	it	le
 8008a7a:	2501      	movle	r5, #1
 8008a7c:	441d      	add	r5, r3
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	ee18 1a10 	vmov	r1, s16
 8008a86:	2201      	movs	r2, #1
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fe2f 	bl	80096ec <__lshift>
 8008a8e:	4631      	mov	r1, r6
 8008a90:	ee08 0a10 	vmov	s16, r0
 8008a94:	f000 fe9a 	bl	80097cc <__mcmp>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	dc91      	bgt.n	80089c0 <_dtoa_r+0xaa8>
 8008a9c:	d102      	bne.n	8008aa4 <_dtoa_r+0xb8c>
 8008a9e:	f01a 0f01 	tst.w	sl, #1
 8008aa2:	d18d      	bne.n	80089c0 <_dtoa_r+0xaa8>
 8008aa4:	462b      	mov	r3, r5
 8008aa6:	461d      	mov	r5, r3
 8008aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aac:	2a30      	cmp	r2, #48	; 0x30
 8008aae:	d0fa      	beq.n	8008aa6 <_dtoa_r+0xb8e>
 8008ab0:	e6d7      	b.n	8008862 <_dtoa_r+0x94a>
 8008ab2:	9a01      	ldr	r2, [sp, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d184      	bne.n	80089c2 <_dtoa_r+0xaaa>
 8008ab8:	9b00      	ldr	r3, [sp, #0]
 8008aba:	3301      	adds	r3, #1
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	2331      	movs	r3, #49	; 0x31
 8008ac0:	7013      	strb	r3, [r2, #0]
 8008ac2:	e6ce      	b.n	8008862 <_dtoa_r+0x94a>
 8008ac4:	4b09      	ldr	r3, [pc, #36]	; (8008aec <_dtoa_r+0xbd4>)
 8008ac6:	f7ff ba95 	b.w	8007ff4 <_dtoa_r+0xdc>
 8008aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f47f aa6e 	bne.w	8007fae <_dtoa_r+0x96>
 8008ad2:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <_dtoa_r+0xbd8>)
 8008ad4:	f7ff ba8e 	b.w	8007ff4 <_dtoa_r+0xdc>
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	dcae      	bgt.n	8008a3c <_dtoa_r+0xb24>
 8008ade:	9b06      	ldr	r3, [sp, #24]
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	f73f aea8 	bgt.w	8008836 <_dtoa_r+0x91e>
 8008ae6:	e7a9      	b.n	8008a3c <_dtoa_r+0xb24>
 8008ae8:	0800acb0 	.word	0x0800acb0
 8008aec:	0800aab4 	.word	0x0800aab4
 8008af0:	0800ac31 	.word	0x0800ac31

08008af4 <rshift>:
 8008af4:	6903      	ldr	r3, [r0, #16]
 8008af6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008afa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008afe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b02:	f100 0414 	add.w	r4, r0, #20
 8008b06:	dd45      	ble.n	8008b94 <rshift+0xa0>
 8008b08:	f011 011f 	ands.w	r1, r1, #31
 8008b0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b14:	d10c      	bne.n	8008b30 <rshift+0x3c>
 8008b16:	f100 0710 	add.w	r7, r0, #16
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	42b1      	cmp	r1, r6
 8008b1e:	d334      	bcc.n	8008b8a <rshift+0x96>
 8008b20:	1a9b      	subs	r3, r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	1eea      	subs	r2, r5, #3
 8008b26:	4296      	cmp	r6, r2
 8008b28:	bf38      	it	cc
 8008b2a:	2300      	movcc	r3, #0
 8008b2c:	4423      	add	r3, r4
 8008b2e:	e015      	b.n	8008b5c <rshift+0x68>
 8008b30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b34:	f1c1 0820 	rsb	r8, r1, #32
 8008b38:	40cf      	lsrs	r7, r1
 8008b3a:	f105 0e04 	add.w	lr, r5, #4
 8008b3e:	46a1      	mov	r9, r4
 8008b40:	4576      	cmp	r6, lr
 8008b42:	46f4      	mov	ip, lr
 8008b44:	d815      	bhi.n	8008b72 <rshift+0x7e>
 8008b46:	1a9a      	subs	r2, r3, r2
 8008b48:	0092      	lsls	r2, r2, #2
 8008b4a:	3a04      	subs	r2, #4
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	42ae      	cmp	r6, r5
 8008b50:	bf38      	it	cc
 8008b52:	2200      	movcc	r2, #0
 8008b54:	18a3      	adds	r3, r4, r2
 8008b56:	50a7      	str	r7, [r4, r2]
 8008b58:	b107      	cbz	r7, 8008b5c <rshift+0x68>
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	1b1a      	subs	r2, r3, r4
 8008b5e:	42a3      	cmp	r3, r4
 8008b60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b64:	bf08      	it	eq
 8008b66:	2300      	moveq	r3, #0
 8008b68:	6102      	str	r2, [r0, #16]
 8008b6a:	bf08      	it	eq
 8008b6c:	6143      	streq	r3, [r0, #20]
 8008b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b72:	f8dc c000 	ldr.w	ip, [ip]
 8008b76:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b7a:	ea4c 0707 	orr.w	r7, ip, r7
 8008b7e:	f849 7b04 	str.w	r7, [r9], #4
 8008b82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b86:	40cf      	lsrs	r7, r1
 8008b88:	e7da      	b.n	8008b40 <rshift+0x4c>
 8008b8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b92:	e7c3      	b.n	8008b1c <rshift+0x28>
 8008b94:	4623      	mov	r3, r4
 8008b96:	e7e1      	b.n	8008b5c <rshift+0x68>

08008b98 <__hexdig_fun>:
 8008b98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b9c:	2b09      	cmp	r3, #9
 8008b9e:	d802      	bhi.n	8008ba6 <__hexdig_fun+0xe>
 8008ba0:	3820      	subs	r0, #32
 8008ba2:	b2c0      	uxtb	r0, r0
 8008ba4:	4770      	bx	lr
 8008ba6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	d801      	bhi.n	8008bb2 <__hexdig_fun+0x1a>
 8008bae:	3847      	subs	r0, #71	; 0x47
 8008bb0:	e7f7      	b.n	8008ba2 <__hexdig_fun+0xa>
 8008bb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008bb6:	2b05      	cmp	r3, #5
 8008bb8:	d801      	bhi.n	8008bbe <__hexdig_fun+0x26>
 8008bba:	3827      	subs	r0, #39	; 0x27
 8008bbc:	e7f1      	b.n	8008ba2 <__hexdig_fun+0xa>
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	4770      	bx	lr
	...

08008bc4 <__gethex>:
 8008bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	ed2d 8b02 	vpush	{d8}
 8008bcc:	b089      	sub	sp, #36	; 0x24
 8008bce:	ee08 0a10 	vmov	s16, r0
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	4bb4      	ldr	r3, [pc, #720]	; (8008ea8 <__gethex+0x2e4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	468b      	mov	fp, r1
 8008bde:	4690      	mov	r8, r2
 8008be0:	f7f7 fafe 	bl	80001e0 <strlen>
 8008be4:	9b01      	ldr	r3, [sp, #4]
 8008be6:	f8db 2000 	ldr.w	r2, [fp]
 8008bea:	4403      	add	r3, r0
 8008bec:	4682      	mov	sl, r0
 8008bee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008bf2:	9305      	str	r3, [sp, #20]
 8008bf4:	1c93      	adds	r3, r2, #2
 8008bf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008bfa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008bfe:	32fe      	adds	r2, #254	; 0xfe
 8008c00:	18d1      	adds	r1, r2, r3
 8008c02:	461f      	mov	r7, r3
 8008c04:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c08:	9100      	str	r1, [sp, #0]
 8008c0a:	2830      	cmp	r0, #48	; 0x30
 8008c0c:	d0f8      	beq.n	8008c00 <__gethex+0x3c>
 8008c0e:	f7ff ffc3 	bl	8008b98 <__hexdig_fun>
 8008c12:	4604      	mov	r4, r0
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d13a      	bne.n	8008c8e <__gethex+0xca>
 8008c18:	9901      	ldr	r1, [sp, #4]
 8008c1a:	4652      	mov	r2, sl
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f001 f943 	bl	8009ea8 <strncmp>
 8008c22:	4605      	mov	r5, r0
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d168      	bne.n	8008cfa <__gethex+0x136>
 8008c28:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c2c:	eb07 060a 	add.w	r6, r7, sl
 8008c30:	f7ff ffb2 	bl	8008b98 <__hexdig_fun>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d062      	beq.n	8008cfe <__gethex+0x13a>
 8008c38:	4633      	mov	r3, r6
 8008c3a:	7818      	ldrb	r0, [r3, #0]
 8008c3c:	2830      	cmp	r0, #48	; 0x30
 8008c3e:	461f      	mov	r7, r3
 8008c40:	f103 0301 	add.w	r3, r3, #1
 8008c44:	d0f9      	beq.n	8008c3a <__gethex+0x76>
 8008c46:	f7ff ffa7 	bl	8008b98 <__hexdig_fun>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	fab0 f480 	clz	r4, r0
 8008c50:	0964      	lsrs	r4, r4, #5
 8008c52:	4635      	mov	r5, r6
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	463a      	mov	r2, r7
 8008c58:	4616      	mov	r6, r2
 8008c5a:	3201      	adds	r2, #1
 8008c5c:	7830      	ldrb	r0, [r6, #0]
 8008c5e:	f7ff ff9b 	bl	8008b98 <__hexdig_fun>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d1f8      	bne.n	8008c58 <__gethex+0x94>
 8008c66:	9901      	ldr	r1, [sp, #4]
 8008c68:	4652      	mov	r2, sl
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f001 f91c 	bl	8009ea8 <strncmp>
 8008c70:	b980      	cbnz	r0, 8008c94 <__gethex+0xd0>
 8008c72:	b94d      	cbnz	r5, 8008c88 <__gethex+0xc4>
 8008c74:	eb06 050a 	add.w	r5, r6, sl
 8008c78:	462a      	mov	r2, r5
 8008c7a:	4616      	mov	r6, r2
 8008c7c:	3201      	adds	r2, #1
 8008c7e:	7830      	ldrb	r0, [r6, #0]
 8008c80:	f7ff ff8a 	bl	8008b98 <__hexdig_fun>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d1f8      	bne.n	8008c7a <__gethex+0xb6>
 8008c88:	1bad      	subs	r5, r5, r6
 8008c8a:	00ad      	lsls	r5, r5, #2
 8008c8c:	e004      	b.n	8008c98 <__gethex+0xd4>
 8008c8e:	2400      	movs	r4, #0
 8008c90:	4625      	mov	r5, r4
 8008c92:	e7e0      	b.n	8008c56 <__gethex+0x92>
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	d1f7      	bne.n	8008c88 <__gethex+0xc4>
 8008c98:	7833      	ldrb	r3, [r6, #0]
 8008c9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c9e:	2b50      	cmp	r3, #80	; 0x50
 8008ca0:	d13b      	bne.n	8008d1a <__gethex+0x156>
 8008ca2:	7873      	ldrb	r3, [r6, #1]
 8008ca4:	2b2b      	cmp	r3, #43	; 0x2b
 8008ca6:	d02c      	beq.n	8008d02 <__gethex+0x13e>
 8008ca8:	2b2d      	cmp	r3, #45	; 0x2d
 8008caa:	d02e      	beq.n	8008d0a <__gethex+0x146>
 8008cac:	1c71      	adds	r1, r6, #1
 8008cae:	f04f 0900 	mov.w	r9, #0
 8008cb2:	7808      	ldrb	r0, [r1, #0]
 8008cb4:	f7ff ff70 	bl	8008b98 <__hexdig_fun>
 8008cb8:	1e43      	subs	r3, r0, #1
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b18      	cmp	r3, #24
 8008cbe:	d82c      	bhi.n	8008d1a <__gethex+0x156>
 8008cc0:	f1a0 0210 	sub.w	r2, r0, #16
 8008cc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008cc8:	f7ff ff66 	bl	8008b98 <__hexdig_fun>
 8008ccc:	1e43      	subs	r3, r0, #1
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b18      	cmp	r3, #24
 8008cd2:	d91d      	bls.n	8008d10 <__gethex+0x14c>
 8008cd4:	f1b9 0f00 	cmp.w	r9, #0
 8008cd8:	d000      	beq.n	8008cdc <__gethex+0x118>
 8008cda:	4252      	negs	r2, r2
 8008cdc:	4415      	add	r5, r2
 8008cde:	f8cb 1000 	str.w	r1, [fp]
 8008ce2:	b1e4      	cbz	r4, 8008d1e <__gethex+0x15a>
 8008ce4:	9b00      	ldr	r3, [sp, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bf14      	ite	ne
 8008cea:	2700      	movne	r7, #0
 8008cec:	2706      	moveq	r7, #6
 8008cee:	4638      	mov	r0, r7
 8008cf0:	b009      	add	sp, #36	; 0x24
 8008cf2:	ecbd 8b02 	vpop	{d8}
 8008cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfa:	463e      	mov	r6, r7
 8008cfc:	4625      	mov	r5, r4
 8008cfe:	2401      	movs	r4, #1
 8008d00:	e7ca      	b.n	8008c98 <__gethex+0xd4>
 8008d02:	f04f 0900 	mov.w	r9, #0
 8008d06:	1cb1      	adds	r1, r6, #2
 8008d08:	e7d3      	b.n	8008cb2 <__gethex+0xee>
 8008d0a:	f04f 0901 	mov.w	r9, #1
 8008d0e:	e7fa      	b.n	8008d06 <__gethex+0x142>
 8008d10:	230a      	movs	r3, #10
 8008d12:	fb03 0202 	mla	r2, r3, r2, r0
 8008d16:	3a10      	subs	r2, #16
 8008d18:	e7d4      	b.n	8008cc4 <__gethex+0x100>
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	e7df      	b.n	8008cde <__gethex+0x11a>
 8008d1e:	1bf3      	subs	r3, r6, r7
 8008d20:	3b01      	subs	r3, #1
 8008d22:	4621      	mov	r1, r4
 8008d24:	2b07      	cmp	r3, #7
 8008d26:	dc0b      	bgt.n	8008d40 <__gethex+0x17c>
 8008d28:	ee18 0a10 	vmov	r0, s16
 8008d2c:	f000 fa82 	bl	8009234 <_Balloc>
 8008d30:	4604      	mov	r4, r0
 8008d32:	b940      	cbnz	r0, 8008d46 <__gethex+0x182>
 8008d34:	4b5d      	ldr	r3, [pc, #372]	; (8008eac <__gethex+0x2e8>)
 8008d36:	4602      	mov	r2, r0
 8008d38:	21de      	movs	r1, #222	; 0xde
 8008d3a:	485d      	ldr	r0, [pc, #372]	; (8008eb0 <__gethex+0x2ec>)
 8008d3c:	f001 f8d6 	bl	8009eec <__assert_func>
 8008d40:	3101      	adds	r1, #1
 8008d42:	105b      	asrs	r3, r3, #1
 8008d44:	e7ee      	b.n	8008d24 <__gethex+0x160>
 8008d46:	f100 0914 	add.w	r9, r0, #20
 8008d4a:	f04f 0b00 	mov.w	fp, #0
 8008d4e:	f1ca 0301 	rsb	r3, sl, #1
 8008d52:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d56:	f8cd b000 	str.w	fp, [sp]
 8008d5a:	9306      	str	r3, [sp, #24]
 8008d5c:	42b7      	cmp	r7, r6
 8008d5e:	d340      	bcc.n	8008de2 <__gethex+0x21e>
 8008d60:	9802      	ldr	r0, [sp, #8]
 8008d62:	9b00      	ldr	r3, [sp, #0]
 8008d64:	f840 3b04 	str.w	r3, [r0], #4
 8008d68:	eba0 0009 	sub.w	r0, r0, r9
 8008d6c:	1080      	asrs	r0, r0, #2
 8008d6e:	0146      	lsls	r6, r0, #5
 8008d70:	6120      	str	r0, [r4, #16]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fb50 	bl	8009418 <__hi0bits>
 8008d78:	1a30      	subs	r0, r6, r0
 8008d7a:	f8d8 6000 	ldr.w	r6, [r8]
 8008d7e:	42b0      	cmp	r0, r6
 8008d80:	dd63      	ble.n	8008e4a <__gethex+0x286>
 8008d82:	1b87      	subs	r7, r0, r6
 8008d84:	4639      	mov	r1, r7
 8008d86:	4620      	mov	r0, r4
 8008d88:	f000 fef4 	bl	8009b74 <__any_on>
 8008d8c:	4682      	mov	sl, r0
 8008d8e:	b1a8      	cbz	r0, 8008dbc <__gethex+0x1f8>
 8008d90:	1e7b      	subs	r3, r7, #1
 8008d92:	1159      	asrs	r1, r3, #5
 8008d94:	f003 021f 	and.w	r2, r3, #31
 8008d98:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008d9c:	f04f 0a01 	mov.w	sl, #1
 8008da0:	fa0a f202 	lsl.w	r2, sl, r2
 8008da4:	420a      	tst	r2, r1
 8008da6:	d009      	beq.n	8008dbc <__gethex+0x1f8>
 8008da8:	4553      	cmp	r3, sl
 8008daa:	dd05      	ble.n	8008db8 <__gethex+0x1f4>
 8008dac:	1eb9      	subs	r1, r7, #2
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 fee0 	bl	8009b74 <__any_on>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d145      	bne.n	8008e44 <__gethex+0x280>
 8008db8:	f04f 0a02 	mov.w	sl, #2
 8008dbc:	4639      	mov	r1, r7
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f7ff fe98 	bl	8008af4 <rshift>
 8008dc4:	443d      	add	r5, r7
 8008dc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dca:	42ab      	cmp	r3, r5
 8008dcc:	da4c      	bge.n	8008e68 <__gethex+0x2a4>
 8008dce:	ee18 0a10 	vmov	r0, s16
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	f000 fa6e 	bl	80092b4 <_Bfree>
 8008dd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	27a3      	movs	r7, #163	; 0xa3
 8008de0:	e785      	b.n	8008cee <__gethex+0x12a>
 8008de2:	1e73      	subs	r3, r6, #1
 8008de4:	9a05      	ldr	r2, [sp, #20]
 8008de6:	9303      	str	r3, [sp, #12]
 8008de8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d019      	beq.n	8008e24 <__gethex+0x260>
 8008df0:	f1bb 0f20 	cmp.w	fp, #32
 8008df4:	d107      	bne.n	8008e06 <__gethex+0x242>
 8008df6:	9b02      	ldr	r3, [sp, #8]
 8008df8:	9a00      	ldr	r2, [sp, #0]
 8008dfa:	f843 2b04 	str.w	r2, [r3], #4
 8008dfe:	9302      	str	r3, [sp, #8]
 8008e00:	2300      	movs	r3, #0
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	469b      	mov	fp, r3
 8008e06:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e0a:	f7ff fec5 	bl	8008b98 <__hexdig_fun>
 8008e0e:	9b00      	ldr	r3, [sp, #0]
 8008e10:	f000 000f 	and.w	r0, r0, #15
 8008e14:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e18:	4303      	orrs	r3, r0
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	f10b 0b04 	add.w	fp, fp, #4
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	e00d      	b.n	8008e40 <__gethex+0x27c>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	9a06      	ldr	r2, [sp, #24]
 8008e28:	4413      	add	r3, r2
 8008e2a:	42bb      	cmp	r3, r7
 8008e2c:	d3e0      	bcc.n	8008df0 <__gethex+0x22c>
 8008e2e:	4618      	mov	r0, r3
 8008e30:	9901      	ldr	r1, [sp, #4]
 8008e32:	9307      	str	r3, [sp, #28]
 8008e34:	4652      	mov	r2, sl
 8008e36:	f001 f837 	bl	8009ea8 <strncmp>
 8008e3a:	9b07      	ldr	r3, [sp, #28]
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d1d7      	bne.n	8008df0 <__gethex+0x22c>
 8008e40:	461e      	mov	r6, r3
 8008e42:	e78b      	b.n	8008d5c <__gethex+0x198>
 8008e44:	f04f 0a03 	mov.w	sl, #3
 8008e48:	e7b8      	b.n	8008dbc <__gethex+0x1f8>
 8008e4a:	da0a      	bge.n	8008e62 <__gethex+0x29e>
 8008e4c:	1a37      	subs	r7, r6, r0
 8008e4e:	4621      	mov	r1, r4
 8008e50:	ee18 0a10 	vmov	r0, s16
 8008e54:	463a      	mov	r2, r7
 8008e56:	f000 fc49 	bl	80096ec <__lshift>
 8008e5a:	1bed      	subs	r5, r5, r7
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	f100 0914 	add.w	r9, r0, #20
 8008e62:	f04f 0a00 	mov.w	sl, #0
 8008e66:	e7ae      	b.n	8008dc6 <__gethex+0x202>
 8008e68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008e6c:	42a8      	cmp	r0, r5
 8008e6e:	dd72      	ble.n	8008f56 <__gethex+0x392>
 8008e70:	1b45      	subs	r5, r0, r5
 8008e72:	42ae      	cmp	r6, r5
 8008e74:	dc36      	bgt.n	8008ee4 <__gethex+0x320>
 8008e76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d02a      	beq.n	8008ed4 <__gethex+0x310>
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d02c      	beq.n	8008edc <__gethex+0x318>
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d11c      	bne.n	8008ec0 <__gethex+0x2fc>
 8008e86:	42ae      	cmp	r6, r5
 8008e88:	d11a      	bne.n	8008ec0 <__gethex+0x2fc>
 8008e8a:	2e01      	cmp	r6, #1
 8008e8c:	d112      	bne.n	8008eb4 <__gethex+0x2f0>
 8008e8e:	9a04      	ldr	r2, [sp, #16]
 8008e90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	2301      	movs	r3, #1
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	f8c9 3000 	str.w	r3, [r9]
 8008e9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ea0:	2762      	movs	r7, #98	; 0x62
 8008ea2:	601c      	str	r4, [r3, #0]
 8008ea4:	e723      	b.n	8008cee <__gethex+0x12a>
 8008ea6:	bf00      	nop
 8008ea8:	0800ad28 	.word	0x0800ad28
 8008eac:	0800acb0 	.word	0x0800acb0
 8008eb0:	0800acc1 	.word	0x0800acc1
 8008eb4:	1e71      	subs	r1, r6, #1
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f000 fe5c 	bl	8009b74 <__any_on>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d1e6      	bne.n	8008e8e <__gethex+0x2ca>
 8008ec0:	ee18 0a10 	vmov	r0, s16
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f000 f9f5 	bl	80092b4 <_Bfree>
 8008eca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ecc:	2300      	movs	r3, #0
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	2750      	movs	r7, #80	; 0x50
 8008ed2:	e70c      	b.n	8008cee <__gethex+0x12a>
 8008ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1f2      	bne.n	8008ec0 <__gethex+0x2fc>
 8008eda:	e7d8      	b.n	8008e8e <__gethex+0x2ca>
 8008edc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1d5      	bne.n	8008e8e <__gethex+0x2ca>
 8008ee2:	e7ed      	b.n	8008ec0 <__gethex+0x2fc>
 8008ee4:	1e6f      	subs	r7, r5, #1
 8008ee6:	f1ba 0f00 	cmp.w	sl, #0
 8008eea:	d131      	bne.n	8008f50 <__gethex+0x38c>
 8008eec:	b127      	cbz	r7, 8008ef8 <__gethex+0x334>
 8008eee:	4639      	mov	r1, r7
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fe3f 	bl	8009b74 <__any_on>
 8008ef6:	4682      	mov	sl, r0
 8008ef8:	117b      	asrs	r3, r7, #5
 8008efa:	2101      	movs	r1, #1
 8008efc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f00:	f007 071f 	and.w	r7, r7, #31
 8008f04:	fa01 f707 	lsl.w	r7, r1, r7
 8008f08:	421f      	tst	r7, r3
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	bf18      	it	ne
 8008f10:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f14:	1b76      	subs	r6, r6, r5
 8008f16:	f7ff fded 	bl	8008af4 <rshift>
 8008f1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f1e:	2702      	movs	r7, #2
 8008f20:	f1ba 0f00 	cmp.w	sl, #0
 8008f24:	d048      	beq.n	8008fb8 <__gethex+0x3f4>
 8008f26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d015      	beq.n	8008f5a <__gethex+0x396>
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d017      	beq.n	8008f62 <__gethex+0x39e>
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d109      	bne.n	8008f4a <__gethex+0x386>
 8008f36:	f01a 0f02 	tst.w	sl, #2
 8008f3a:	d006      	beq.n	8008f4a <__gethex+0x386>
 8008f3c:	f8d9 0000 	ldr.w	r0, [r9]
 8008f40:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f44:	f01a 0f01 	tst.w	sl, #1
 8008f48:	d10e      	bne.n	8008f68 <__gethex+0x3a4>
 8008f4a:	f047 0710 	orr.w	r7, r7, #16
 8008f4e:	e033      	b.n	8008fb8 <__gethex+0x3f4>
 8008f50:	f04f 0a01 	mov.w	sl, #1
 8008f54:	e7d0      	b.n	8008ef8 <__gethex+0x334>
 8008f56:	2701      	movs	r7, #1
 8008f58:	e7e2      	b.n	8008f20 <__gethex+0x35c>
 8008f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f5c:	f1c3 0301 	rsb	r3, r3, #1
 8008f60:	9315      	str	r3, [sp, #84]	; 0x54
 8008f62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0f0      	beq.n	8008f4a <__gethex+0x386>
 8008f68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f6c:	f104 0314 	add.w	r3, r4, #20
 8008f70:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008f74:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008f78:	f04f 0c00 	mov.w	ip, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f82:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008f86:	d01c      	beq.n	8008fc2 <__gethex+0x3fe>
 8008f88:	3201      	adds	r2, #1
 8008f8a:	6002      	str	r2, [r0, #0]
 8008f8c:	2f02      	cmp	r7, #2
 8008f8e:	f104 0314 	add.w	r3, r4, #20
 8008f92:	d13f      	bne.n	8009014 <__gethex+0x450>
 8008f94:	f8d8 2000 	ldr.w	r2, [r8]
 8008f98:	3a01      	subs	r2, #1
 8008f9a:	42b2      	cmp	r2, r6
 8008f9c:	d10a      	bne.n	8008fb4 <__gethex+0x3f0>
 8008f9e:	1171      	asrs	r1, r6, #5
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fa6:	f006 061f 	and.w	r6, r6, #31
 8008faa:	fa02 f606 	lsl.w	r6, r2, r6
 8008fae:	421e      	tst	r6, r3
 8008fb0:	bf18      	it	ne
 8008fb2:	4617      	movne	r7, r2
 8008fb4:	f047 0720 	orr.w	r7, r7, #32
 8008fb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fba:	601c      	str	r4, [r3, #0]
 8008fbc:	9b04      	ldr	r3, [sp, #16]
 8008fbe:	601d      	str	r5, [r3, #0]
 8008fc0:	e695      	b.n	8008cee <__gethex+0x12a>
 8008fc2:	4299      	cmp	r1, r3
 8008fc4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008fc8:	d8d8      	bhi.n	8008f7c <__gethex+0x3b8>
 8008fca:	68a3      	ldr	r3, [r4, #8]
 8008fcc:	459b      	cmp	fp, r3
 8008fce:	db19      	blt.n	8009004 <__gethex+0x440>
 8008fd0:	6861      	ldr	r1, [r4, #4]
 8008fd2:	ee18 0a10 	vmov	r0, s16
 8008fd6:	3101      	adds	r1, #1
 8008fd8:	f000 f92c 	bl	8009234 <_Balloc>
 8008fdc:	4681      	mov	r9, r0
 8008fde:	b918      	cbnz	r0, 8008fe8 <__gethex+0x424>
 8008fe0:	4b1a      	ldr	r3, [pc, #104]	; (800904c <__gethex+0x488>)
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	2184      	movs	r1, #132	; 0x84
 8008fe6:	e6a8      	b.n	8008d3a <__gethex+0x176>
 8008fe8:	6922      	ldr	r2, [r4, #16]
 8008fea:	3202      	adds	r2, #2
 8008fec:	f104 010c 	add.w	r1, r4, #12
 8008ff0:	0092      	lsls	r2, r2, #2
 8008ff2:	300c      	adds	r0, #12
 8008ff4:	f000 f904 	bl	8009200 <memcpy>
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	ee18 0a10 	vmov	r0, s16
 8008ffe:	f000 f959 	bl	80092b4 <_Bfree>
 8009002:	464c      	mov	r4, r9
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800900c:	6122      	str	r2, [r4, #16]
 800900e:	2201      	movs	r2, #1
 8009010:	615a      	str	r2, [r3, #20]
 8009012:	e7bb      	b.n	8008f8c <__gethex+0x3c8>
 8009014:	6922      	ldr	r2, [r4, #16]
 8009016:	455a      	cmp	r2, fp
 8009018:	dd0b      	ble.n	8009032 <__gethex+0x46e>
 800901a:	2101      	movs	r1, #1
 800901c:	4620      	mov	r0, r4
 800901e:	f7ff fd69 	bl	8008af4 <rshift>
 8009022:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009026:	3501      	adds	r5, #1
 8009028:	42ab      	cmp	r3, r5
 800902a:	f6ff aed0 	blt.w	8008dce <__gethex+0x20a>
 800902e:	2701      	movs	r7, #1
 8009030:	e7c0      	b.n	8008fb4 <__gethex+0x3f0>
 8009032:	f016 061f 	ands.w	r6, r6, #31
 8009036:	d0fa      	beq.n	800902e <__gethex+0x46a>
 8009038:	4453      	add	r3, sl
 800903a:	f1c6 0620 	rsb	r6, r6, #32
 800903e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009042:	f000 f9e9 	bl	8009418 <__hi0bits>
 8009046:	42b0      	cmp	r0, r6
 8009048:	dbe7      	blt.n	800901a <__gethex+0x456>
 800904a:	e7f0      	b.n	800902e <__gethex+0x46a>
 800904c:	0800acb0 	.word	0x0800acb0

08009050 <L_shift>:
 8009050:	f1c2 0208 	rsb	r2, r2, #8
 8009054:	0092      	lsls	r2, r2, #2
 8009056:	b570      	push	{r4, r5, r6, lr}
 8009058:	f1c2 0620 	rsb	r6, r2, #32
 800905c:	6843      	ldr	r3, [r0, #4]
 800905e:	6804      	ldr	r4, [r0, #0]
 8009060:	fa03 f506 	lsl.w	r5, r3, r6
 8009064:	432c      	orrs	r4, r5
 8009066:	40d3      	lsrs	r3, r2
 8009068:	6004      	str	r4, [r0, #0]
 800906a:	f840 3f04 	str.w	r3, [r0, #4]!
 800906e:	4288      	cmp	r0, r1
 8009070:	d3f4      	bcc.n	800905c <L_shift+0xc>
 8009072:	bd70      	pop	{r4, r5, r6, pc}

08009074 <__match>:
 8009074:	b530      	push	{r4, r5, lr}
 8009076:	6803      	ldr	r3, [r0, #0]
 8009078:	3301      	adds	r3, #1
 800907a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800907e:	b914      	cbnz	r4, 8009086 <__match+0x12>
 8009080:	6003      	str	r3, [r0, #0]
 8009082:	2001      	movs	r0, #1
 8009084:	bd30      	pop	{r4, r5, pc}
 8009086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800908a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800908e:	2d19      	cmp	r5, #25
 8009090:	bf98      	it	ls
 8009092:	3220      	addls	r2, #32
 8009094:	42a2      	cmp	r2, r4
 8009096:	d0f0      	beq.n	800907a <__match+0x6>
 8009098:	2000      	movs	r0, #0
 800909a:	e7f3      	b.n	8009084 <__match+0x10>

0800909c <__hexnan>:
 800909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a0:	680b      	ldr	r3, [r1, #0]
 80090a2:	115e      	asrs	r6, r3, #5
 80090a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80090a8:	f013 031f 	ands.w	r3, r3, #31
 80090ac:	b087      	sub	sp, #28
 80090ae:	bf18      	it	ne
 80090b0:	3604      	addne	r6, #4
 80090b2:	2500      	movs	r5, #0
 80090b4:	1f37      	subs	r7, r6, #4
 80090b6:	4690      	mov	r8, r2
 80090b8:	6802      	ldr	r2, [r0, #0]
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	4682      	mov	sl, r0
 80090be:	f846 5c04 	str.w	r5, [r6, #-4]
 80090c2:	46b9      	mov	r9, r7
 80090c4:	463c      	mov	r4, r7
 80090c6:	9502      	str	r5, [sp, #8]
 80090c8:	46ab      	mov	fp, r5
 80090ca:	7851      	ldrb	r1, [r2, #1]
 80090cc:	1c53      	adds	r3, r2, #1
 80090ce:	9303      	str	r3, [sp, #12]
 80090d0:	b341      	cbz	r1, 8009124 <__hexnan+0x88>
 80090d2:	4608      	mov	r0, r1
 80090d4:	9205      	str	r2, [sp, #20]
 80090d6:	9104      	str	r1, [sp, #16]
 80090d8:	f7ff fd5e 	bl	8008b98 <__hexdig_fun>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d14f      	bne.n	8009180 <__hexnan+0xe4>
 80090e0:	9904      	ldr	r1, [sp, #16]
 80090e2:	9a05      	ldr	r2, [sp, #20]
 80090e4:	2920      	cmp	r1, #32
 80090e6:	d818      	bhi.n	800911a <__hexnan+0x7e>
 80090e8:	9b02      	ldr	r3, [sp, #8]
 80090ea:	459b      	cmp	fp, r3
 80090ec:	dd13      	ble.n	8009116 <__hexnan+0x7a>
 80090ee:	454c      	cmp	r4, r9
 80090f0:	d206      	bcs.n	8009100 <__hexnan+0x64>
 80090f2:	2d07      	cmp	r5, #7
 80090f4:	dc04      	bgt.n	8009100 <__hexnan+0x64>
 80090f6:	462a      	mov	r2, r5
 80090f8:	4649      	mov	r1, r9
 80090fa:	4620      	mov	r0, r4
 80090fc:	f7ff ffa8 	bl	8009050 <L_shift>
 8009100:	4544      	cmp	r4, r8
 8009102:	d950      	bls.n	80091a6 <__hexnan+0x10a>
 8009104:	2300      	movs	r3, #0
 8009106:	f1a4 0904 	sub.w	r9, r4, #4
 800910a:	f844 3c04 	str.w	r3, [r4, #-4]
 800910e:	f8cd b008 	str.w	fp, [sp, #8]
 8009112:	464c      	mov	r4, r9
 8009114:	461d      	mov	r5, r3
 8009116:	9a03      	ldr	r2, [sp, #12]
 8009118:	e7d7      	b.n	80090ca <__hexnan+0x2e>
 800911a:	2929      	cmp	r1, #41	; 0x29
 800911c:	d156      	bne.n	80091cc <__hexnan+0x130>
 800911e:	3202      	adds	r2, #2
 8009120:	f8ca 2000 	str.w	r2, [sl]
 8009124:	f1bb 0f00 	cmp.w	fp, #0
 8009128:	d050      	beq.n	80091cc <__hexnan+0x130>
 800912a:	454c      	cmp	r4, r9
 800912c:	d206      	bcs.n	800913c <__hexnan+0xa0>
 800912e:	2d07      	cmp	r5, #7
 8009130:	dc04      	bgt.n	800913c <__hexnan+0xa0>
 8009132:	462a      	mov	r2, r5
 8009134:	4649      	mov	r1, r9
 8009136:	4620      	mov	r0, r4
 8009138:	f7ff ff8a 	bl	8009050 <L_shift>
 800913c:	4544      	cmp	r4, r8
 800913e:	d934      	bls.n	80091aa <__hexnan+0x10e>
 8009140:	f1a8 0204 	sub.w	r2, r8, #4
 8009144:	4623      	mov	r3, r4
 8009146:	f853 1b04 	ldr.w	r1, [r3], #4
 800914a:	f842 1f04 	str.w	r1, [r2, #4]!
 800914e:	429f      	cmp	r7, r3
 8009150:	d2f9      	bcs.n	8009146 <__hexnan+0xaa>
 8009152:	1b3b      	subs	r3, r7, r4
 8009154:	f023 0303 	bic.w	r3, r3, #3
 8009158:	3304      	adds	r3, #4
 800915a:	3401      	adds	r4, #1
 800915c:	3e03      	subs	r6, #3
 800915e:	42b4      	cmp	r4, r6
 8009160:	bf88      	it	hi
 8009162:	2304      	movhi	r3, #4
 8009164:	4443      	add	r3, r8
 8009166:	2200      	movs	r2, #0
 8009168:	f843 2b04 	str.w	r2, [r3], #4
 800916c:	429f      	cmp	r7, r3
 800916e:	d2fb      	bcs.n	8009168 <__hexnan+0xcc>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	b91b      	cbnz	r3, 800917c <__hexnan+0xe0>
 8009174:	4547      	cmp	r7, r8
 8009176:	d127      	bne.n	80091c8 <__hexnan+0x12c>
 8009178:	2301      	movs	r3, #1
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	2005      	movs	r0, #5
 800917e:	e026      	b.n	80091ce <__hexnan+0x132>
 8009180:	3501      	adds	r5, #1
 8009182:	2d08      	cmp	r5, #8
 8009184:	f10b 0b01 	add.w	fp, fp, #1
 8009188:	dd06      	ble.n	8009198 <__hexnan+0xfc>
 800918a:	4544      	cmp	r4, r8
 800918c:	d9c3      	bls.n	8009116 <__hexnan+0x7a>
 800918e:	2300      	movs	r3, #0
 8009190:	f844 3c04 	str.w	r3, [r4, #-4]
 8009194:	2501      	movs	r5, #1
 8009196:	3c04      	subs	r4, #4
 8009198:	6822      	ldr	r2, [r4, #0]
 800919a:	f000 000f 	and.w	r0, r0, #15
 800919e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80091a2:	6022      	str	r2, [r4, #0]
 80091a4:	e7b7      	b.n	8009116 <__hexnan+0x7a>
 80091a6:	2508      	movs	r5, #8
 80091a8:	e7b5      	b.n	8009116 <__hexnan+0x7a>
 80091aa:	9b01      	ldr	r3, [sp, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d0df      	beq.n	8009170 <__hexnan+0xd4>
 80091b0:	f04f 32ff 	mov.w	r2, #4294967295
 80091b4:	f1c3 0320 	rsb	r3, r3, #32
 80091b8:	fa22 f303 	lsr.w	r3, r2, r3
 80091bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80091c0:	401a      	ands	r2, r3
 80091c2:	f846 2c04 	str.w	r2, [r6, #-4]
 80091c6:	e7d3      	b.n	8009170 <__hexnan+0xd4>
 80091c8:	3f04      	subs	r7, #4
 80091ca:	e7d1      	b.n	8009170 <__hexnan+0xd4>
 80091cc:	2004      	movs	r0, #4
 80091ce:	b007      	add	sp, #28
 80091d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091d4 <_localeconv_r>:
 80091d4:	4800      	ldr	r0, [pc, #0]	; (80091d8 <_localeconv_r+0x4>)
 80091d6:	4770      	bx	lr
 80091d8:	20000164 	.word	0x20000164

080091dc <__ascii_mbtowc>:
 80091dc:	b082      	sub	sp, #8
 80091de:	b901      	cbnz	r1, 80091e2 <__ascii_mbtowc+0x6>
 80091e0:	a901      	add	r1, sp, #4
 80091e2:	b142      	cbz	r2, 80091f6 <__ascii_mbtowc+0x1a>
 80091e4:	b14b      	cbz	r3, 80091fa <__ascii_mbtowc+0x1e>
 80091e6:	7813      	ldrb	r3, [r2, #0]
 80091e8:	600b      	str	r3, [r1, #0]
 80091ea:	7812      	ldrb	r2, [r2, #0]
 80091ec:	1e10      	subs	r0, r2, #0
 80091ee:	bf18      	it	ne
 80091f0:	2001      	movne	r0, #1
 80091f2:	b002      	add	sp, #8
 80091f4:	4770      	bx	lr
 80091f6:	4610      	mov	r0, r2
 80091f8:	e7fb      	b.n	80091f2 <__ascii_mbtowc+0x16>
 80091fa:	f06f 0001 	mvn.w	r0, #1
 80091fe:	e7f8      	b.n	80091f2 <__ascii_mbtowc+0x16>

08009200 <memcpy>:
 8009200:	440a      	add	r2, r1
 8009202:	4291      	cmp	r1, r2
 8009204:	f100 33ff 	add.w	r3, r0, #4294967295
 8009208:	d100      	bne.n	800920c <memcpy+0xc>
 800920a:	4770      	bx	lr
 800920c:	b510      	push	{r4, lr}
 800920e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009216:	4291      	cmp	r1, r2
 8009218:	d1f9      	bne.n	800920e <memcpy+0xe>
 800921a:	bd10      	pop	{r4, pc}

0800921c <__malloc_lock>:
 800921c:	4801      	ldr	r0, [pc, #4]	; (8009224 <__malloc_lock+0x8>)
 800921e:	f000 be96 	b.w	8009f4e <__retarget_lock_acquire_recursive>
 8009222:	bf00      	nop
 8009224:	20000458 	.word	0x20000458

08009228 <__malloc_unlock>:
 8009228:	4801      	ldr	r0, [pc, #4]	; (8009230 <__malloc_unlock+0x8>)
 800922a:	f000 be91 	b.w	8009f50 <__retarget_lock_release_recursive>
 800922e:	bf00      	nop
 8009230:	20000458 	.word	0x20000458

08009234 <_Balloc>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009238:	4604      	mov	r4, r0
 800923a:	460d      	mov	r5, r1
 800923c:	b976      	cbnz	r6, 800925c <_Balloc+0x28>
 800923e:	2010      	movs	r0, #16
 8009240:	f7fc ff92 	bl	8006168 <malloc>
 8009244:	4602      	mov	r2, r0
 8009246:	6260      	str	r0, [r4, #36]	; 0x24
 8009248:	b920      	cbnz	r0, 8009254 <_Balloc+0x20>
 800924a:	4b18      	ldr	r3, [pc, #96]	; (80092ac <_Balloc+0x78>)
 800924c:	4818      	ldr	r0, [pc, #96]	; (80092b0 <_Balloc+0x7c>)
 800924e:	2166      	movs	r1, #102	; 0x66
 8009250:	f000 fe4c 	bl	8009eec <__assert_func>
 8009254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009258:	6006      	str	r6, [r0, #0]
 800925a:	60c6      	str	r6, [r0, #12]
 800925c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800925e:	68f3      	ldr	r3, [r6, #12]
 8009260:	b183      	cbz	r3, 8009284 <_Balloc+0x50>
 8009262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800926a:	b9b8      	cbnz	r0, 800929c <_Balloc+0x68>
 800926c:	2101      	movs	r1, #1
 800926e:	fa01 f605 	lsl.w	r6, r1, r5
 8009272:	1d72      	adds	r2, r6, #5
 8009274:	0092      	lsls	r2, r2, #2
 8009276:	4620      	mov	r0, r4
 8009278:	f000 fc9d 	bl	8009bb6 <_calloc_r>
 800927c:	b160      	cbz	r0, 8009298 <_Balloc+0x64>
 800927e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009282:	e00e      	b.n	80092a2 <_Balloc+0x6e>
 8009284:	2221      	movs	r2, #33	; 0x21
 8009286:	2104      	movs	r1, #4
 8009288:	4620      	mov	r0, r4
 800928a:	f000 fc94 	bl	8009bb6 <_calloc_r>
 800928e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009290:	60f0      	str	r0, [r6, #12]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e4      	bne.n	8009262 <_Balloc+0x2e>
 8009298:	2000      	movs	r0, #0
 800929a:	bd70      	pop	{r4, r5, r6, pc}
 800929c:	6802      	ldr	r2, [r0, #0]
 800929e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092a2:	2300      	movs	r3, #0
 80092a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092a8:	e7f7      	b.n	800929a <_Balloc+0x66>
 80092aa:	bf00      	nop
 80092ac:	0800ac3e 	.word	0x0800ac3e
 80092b0:	0800ad3c 	.word	0x0800ad3c

080092b4 <_Bfree>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092b8:	4605      	mov	r5, r0
 80092ba:	460c      	mov	r4, r1
 80092bc:	b976      	cbnz	r6, 80092dc <_Bfree+0x28>
 80092be:	2010      	movs	r0, #16
 80092c0:	f7fc ff52 	bl	8006168 <malloc>
 80092c4:	4602      	mov	r2, r0
 80092c6:	6268      	str	r0, [r5, #36]	; 0x24
 80092c8:	b920      	cbnz	r0, 80092d4 <_Bfree+0x20>
 80092ca:	4b09      	ldr	r3, [pc, #36]	; (80092f0 <_Bfree+0x3c>)
 80092cc:	4809      	ldr	r0, [pc, #36]	; (80092f4 <_Bfree+0x40>)
 80092ce:	218a      	movs	r1, #138	; 0x8a
 80092d0:	f000 fe0c 	bl	8009eec <__assert_func>
 80092d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092d8:	6006      	str	r6, [r0, #0]
 80092da:	60c6      	str	r6, [r0, #12]
 80092dc:	b13c      	cbz	r4, 80092ee <_Bfree+0x3a>
 80092de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092e0:	6862      	ldr	r2, [r4, #4]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092e8:	6021      	str	r1, [r4, #0]
 80092ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	0800ac3e 	.word	0x0800ac3e
 80092f4:	0800ad3c 	.word	0x0800ad3c

080092f8 <__multadd>:
 80092f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fc:	690d      	ldr	r5, [r1, #16]
 80092fe:	4607      	mov	r7, r0
 8009300:	460c      	mov	r4, r1
 8009302:	461e      	mov	r6, r3
 8009304:	f101 0c14 	add.w	ip, r1, #20
 8009308:	2000      	movs	r0, #0
 800930a:	f8dc 3000 	ldr.w	r3, [ip]
 800930e:	b299      	uxth	r1, r3
 8009310:	fb02 6101 	mla	r1, r2, r1, r6
 8009314:	0c1e      	lsrs	r6, r3, #16
 8009316:	0c0b      	lsrs	r3, r1, #16
 8009318:	fb02 3306 	mla	r3, r2, r6, r3
 800931c:	b289      	uxth	r1, r1
 800931e:	3001      	adds	r0, #1
 8009320:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009324:	4285      	cmp	r5, r0
 8009326:	f84c 1b04 	str.w	r1, [ip], #4
 800932a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800932e:	dcec      	bgt.n	800930a <__multadd+0x12>
 8009330:	b30e      	cbz	r6, 8009376 <__multadd+0x7e>
 8009332:	68a3      	ldr	r3, [r4, #8]
 8009334:	42ab      	cmp	r3, r5
 8009336:	dc19      	bgt.n	800936c <__multadd+0x74>
 8009338:	6861      	ldr	r1, [r4, #4]
 800933a:	4638      	mov	r0, r7
 800933c:	3101      	adds	r1, #1
 800933e:	f7ff ff79 	bl	8009234 <_Balloc>
 8009342:	4680      	mov	r8, r0
 8009344:	b928      	cbnz	r0, 8009352 <__multadd+0x5a>
 8009346:	4602      	mov	r2, r0
 8009348:	4b0c      	ldr	r3, [pc, #48]	; (800937c <__multadd+0x84>)
 800934a:	480d      	ldr	r0, [pc, #52]	; (8009380 <__multadd+0x88>)
 800934c:	21b5      	movs	r1, #181	; 0xb5
 800934e:	f000 fdcd 	bl	8009eec <__assert_func>
 8009352:	6922      	ldr	r2, [r4, #16]
 8009354:	3202      	adds	r2, #2
 8009356:	f104 010c 	add.w	r1, r4, #12
 800935a:	0092      	lsls	r2, r2, #2
 800935c:	300c      	adds	r0, #12
 800935e:	f7ff ff4f 	bl	8009200 <memcpy>
 8009362:	4621      	mov	r1, r4
 8009364:	4638      	mov	r0, r7
 8009366:	f7ff ffa5 	bl	80092b4 <_Bfree>
 800936a:	4644      	mov	r4, r8
 800936c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009370:	3501      	adds	r5, #1
 8009372:	615e      	str	r6, [r3, #20]
 8009374:	6125      	str	r5, [r4, #16]
 8009376:	4620      	mov	r0, r4
 8009378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800937c:	0800acb0 	.word	0x0800acb0
 8009380:	0800ad3c 	.word	0x0800ad3c

08009384 <__s2b>:
 8009384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009388:	460c      	mov	r4, r1
 800938a:	4615      	mov	r5, r2
 800938c:	461f      	mov	r7, r3
 800938e:	2209      	movs	r2, #9
 8009390:	3308      	adds	r3, #8
 8009392:	4606      	mov	r6, r0
 8009394:	fb93 f3f2 	sdiv	r3, r3, r2
 8009398:	2100      	movs	r1, #0
 800939a:	2201      	movs	r2, #1
 800939c:	429a      	cmp	r2, r3
 800939e:	db09      	blt.n	80093b4 <__s2b+0x30>
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7ff ff47 	bl	8009234 <_Balloc>
 80093a6:	b940      	cbnz	r0, 80093ba <__s2b+0x36>
 80093a8:	4602      	mov	r2, r0
 80093aa:	4b19      	ldr	r3, [pc, #100]	; (8009410 <__s2b+0x8c>)
 80093ac:	4819      	ldr	r0, [pc, #100]	; (8009414 <__s2b+0x90>)
 80093ae:	21ce      	movs	r1, #206	; 0xce
 80093b0:	f000 fd9c 	bl	8009eec <__assert_func>
 80093b4:	0052      	lsls	r2, r2, #1
 80093b6:	3101      	adds	r1, #1
 80093b8:	e7f0      	b.n	800939c <__s2b+0x18>
 80093ba:	9b08      	ldr	r3, [sp, #32]
 80093bc:	6143      	str	r3, [r0, #20]
 80093be:	2d09      	cmp	r5, #9
 80093c0:	f04f 0301 	mov.w	r3, #1
 80093c4:	6103      	str	r3, [r0, #16]
 80093c6:	dd16      	ble.n	80093f6 <__s2b+0x72>
 80093c8:	f104 0909 	add.w	r9, r4, #9
 80093cc:	46c8      	mov	r8, r9
 80093ce:	442c      	add	r4, r5
 80093d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093d4:	4601      	mov	r1, r0
 80093d6:	3b30      	subs	r3, #48	; 0x30
 80093d8:	220a      	movs	r2, #10
 80093da:	4630      	mov	r0, r6
 80093dc:	f7ff ff8c 	bl	80092f8 <__multadd>
 80093e0:	45a0      	cmp	r8, r4
 80093e2:	d1f5      	bne.n	80093d0 <__s2b+0x4c>
 80093e4:	f1a5 0408 	sub.w	r4, r5, #8
 80093e8:	444c      	add	r4, r9
 80093ea:	1b2d      	subs	r5, r5, r4
 80093ec:	1963      	adds	r3, r4, r5
 80093ee:	42bb      	cmp	r3, r7
 80093f0:	db04      	blt.n	80093fc <__s2b+0x78>
 80093f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093f6:	340a      	adds	r4, #10
 80093f8:	2509      	movs	r5, #9
 80093fa:	e7f6      	b.n	80093ea <__s2b+0x66>
 80093fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009400:	4601      	mov	r1, r0
 8009402:	3b30      	subs	r3, #48	; 0x30
 8009404:	220a      	movs	r2, #10
 8009406:	4630      	mov	r0, r6
 8009408:	f7ff ff76 	bl	80092f8 <__multadd>
 800940c:	e7ee      	b.n	80093ec <__s2b+0x68>
 800940e:	bf00      	nop
 8009410:	0800acb0 	.word	0x0800acb0
 8009414:	0800ad3c 	.word	0x0800ad3c

08009418 <__hi0bits>:
 8009418:	0c03      	lsrs	r3, r0, #16
 800941a:	041b      	lsls	r3, r3, #16
 800941c:	b9d3      	cbnz	r3, 8009454 <__hi0bits+0x3c>
 800941e:	0400      	lsls	r0, r0, #16
 8009420:	2310      	movs	r3, #16
 8009422:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009426:	bf04      	itt	eq
 8009428:	0200      	lsleq	r0, r0, #8
 800942a:	3308      	addeq	r3, #8
 800942c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009430:	bf04      	itt	eq
 8009432:	0100      	lsleq	r0, r0, #4
 8009434:	3304      	addeq	r3, #4
 8009436:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800943a:	bf04      	itt	eq
 800943c:	0080      	lsleq	r0, r0, #2
 800943e:	3302      	addeq	r3, #2
 8009440:	2800      	cmp	r0, #0
 8009442:	db05      	blt.n	8009450 <__hi0bits+0x38>
 8009444:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009448:	f103 0301 	add.w	r3, r3, #1
 800944c:	bf08      	it	eq
 800944e:	2320      	moveq	r3, #32
 8009450:	4618      	mov	r0, r3
 8009452:	4770      	bx	lr
 8009454:	2300      	movs	r3, #0
 8009456:	e7e4      	b.n	8009422 <__hi0bits+0xa>

08009458 <__lo0bits>:
 8009458:	6803      	ldr	r3, [r0, #0]
 800945a:	f013 0207 	ands.w	r2, r3, #7
 800945e:	4601      	mov	r1, r0
 8009460:	d00b      	beq.n	800947a <__lo0bits+0x22>
 8009462:	07da      	lsls	r2, r3, #31
 8009464:	d423      	bmi.n	80094ae <__lo0bits+0x56>
 8009466:	0798      	lsls	r0, r3, #30
 8009468:	bf49      	itett	mi
 800946a:	085b      	lsrmi	r3, r3, #1
 800946c:	089b      	lsrpl	r3, r3, #2
 800946e:	2001      	movmi	r0, #1
 8009470:	600b      	strmi	r3, [r1, #0]
 8009472:	bf5c      	itt	pl
 8009474:	600b      	strpl	r3, [r1, #0]
 8009476:	2002      	movpl	r0, #2
 8009478:	4770      	bx	lr
 800947a:	b298      	uxth	r0, r3
 800947c:	b9a8      	cbnz	r0, 80094aa <__lo0bits+0x52>
 800947e:	0c1b      	lsrs	r3, r3, #16
 8009480:	2010      	movs	r0, #16
 8009482:	b2da      	uxtb	r2, r3
 8009484:	b90a      	cbnz	r2, 800948a <__lo0bits+0x32>
 8009486:	3008      	adds	r0, #8
 8009488:	0a1b      	lsrs	r3, r3, #8
 800948a:	071a      	lsls	r2, r3, #28
 800948c:	bf04      	itt	eq
 800948e:	091b      	lsreq	r3, r3, #4
 8009490:	3004      	addeq	r0, #4
 8009492:	079a      	lsls	r2, r3, #30
 8009494:	bf04      	itt	eq
 8009496:	089b      	lsreq	r3, r3, #2
 8009498:	3002      	addeq	r0, #2
 800949a:	07da      	lsls	r2, r3, #31
 800949c:	d403      	bmi.n	80094a6 <__lo0bits+0x4e>
 800949e:	085b      	lsrs	r3, r3, #1
 80094a0:	f100 0001 	add.w	r0, r0, #1
 80094a4:	d005      	beq.n	80094b2 <__lo0bits+0x5a>
 80094a6:	600b      	str	r3, [r1, #0]
 80094a8:	4770      	bx	lr
 80094aa:	4610      	mov	r0, r2
 80094ac:	e7e9      	b.n	8009482 <__lo0bits+0x2a>
 80094ae:	2000      	movs	r0, #0
 80094b0:	4770      	bx	lr
 80094b2:	2020      	movs	r0, #32
 80094b4:	4770      	bx	lr
	...

080094b8 <__i2b>:
 80094b8:	b510      	push	{r4, lr}
 80094ba:	460c      	mov	r4, r1
 80094bc:	2101      	movs	r1, #1
 80094be:	f7ff feb9 	bl	8009234 <_Balloc>
 80094c2:	4602      	mov	r2, r0
 80094c4:	b928      	cbnz	r0, 80094d2 <__i2b+0x1a>
 80094c6:	4b05      	ldr	r3, [pc, #20]	; (80094dc <__i2b+0x24>)
 80094c8:	4805      	ldr	r0, [pc, #20]	; (80094e0 <__i2b+0x28>)
 80094ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094ce:	f000 fd0d 	bl	8009eec <__assert_func>
 80094d2:	2301      	movs	r3, #1
 80094d4:	6144      	str	r4, [r0, #20]
 80094d6:	6103      	str	r3, [r0, #16]
 80094d8:	bd10      	pop	{r4, pc}
 80094da:	bf00      	nop
 80094dc:	0800acb0 	.word	0x0800acb0
 80094e0:	0800ad3c 	.word	0x0800ad3c

080094e4 <__multiply>:
 80094e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	4691      	mov	r9, r2
 80094ea:	690a      	ldr	r2, [r1, #16]
 80094ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	bfb8      	it	lt
 80094f4:	460b      	movlt	r3, r1
 80094f6:	460c      	mov	r4, r1
 80094f8:	bfbc      	itt	lt
 80094fa:	464c      	movlt	r4, r9
 80094fc:	4699      	movlt	r9, r3
 80094fe:	6927      	ldr	r7, [r4, #16]
 8009500:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009504:	68a3      	ldr	r3, [r4, #8]
 8009506:	6861      	ldr	r1, [r4, #4]
 8009508:	eb07 060a 	add.w	r6, r7, sl
 800950c:	42b3      	cmp	r3, r6
 800950e:	b085      	sub	sp, #20
 8009510:	bfb8      	it	lt
 8009512:	3101      	addlt	r1, #1
 8009514:	f7ff fe8e 	bl	8009234 <_Balloc>
 8009518:	b930      	cbnz	r0, 8009528 <__multiply+0x44>
 800951a:	4602      	mov	r2, r0
 800951c:	4b44      	ldr	r3, [pc, #272]	; (8009630 <__multiply+0x14c>)
 800951e:	4845      	ldr	r0, [pc, #276]	; (8009634 <__multiply+0x150>)
 8009520:	f240 115d 	movw	r1, #349	; 0x15d
 8009524:	f000 fce2 	bl	8009eec <__assert_func>
 8009528:	f100 0514 	add.w	r5, r0, #20
 800952c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009530:	462b      	mov	r3, r5
 8009532:	2200      	movs	r2, #0
 8009534:	4543      	cmp	r3, r8
 8009536:	d321      	bcc.n	800957c <__multiply+0x98>
 8009538:	f104 0314 	add.w	r3, r4, #20
 800953c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009540:	f109 0314 	add.w	r3, r9, #20
 8009544:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009548:	9202      	str	r2, [sp, #8]
 800954a:	1b3a      	subs	r2, r7, r4
 800954c:	3a15      	subs	r2, #21
 800954e:	f022 0203 	bic.w	r2, r2, #3
 8009552:	3204      	adds	r2, #4
 8009554:	f104 0115 	add.w	r1, r4, #21
 8009558:	428f      	cmp	r7, r1
 800955a:	bf38      	it	cc
 800955c:	2204      	movcc	r2, #4
 800955e:	9201      	str	r2, [sp, #4]
 8009560:	9a02      	ldr	r2, [sp, #8]
 8009562:	9303      	str	r3, [sp, #12]
 8009564:	429a      	cmp	r2, r3
 8009566:	d80c      	bhi.n	8009582 <__multiply+0x9e>
 8009568:	2e00      	cmp	r6, #0
 800956a:	dd03      	ble.n	8009574 <__multiply+0x90>
 800956c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009570:	2b00      	cmp	r3, #0
 8009572:	d05a      	beq.n	800962a <__multiply+0x146>
 8009574:	6106      	str	r6, [r0, #16]
 8009576:	b005      	add	sp, #20
 8009578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957c:	f843 2b04 	str.w	r2, [r3], #4
 8009580:	e7d8      	b.n	8009534 <__multiply+0x50>
 8009582:	f8b3 a000 	ldrh.w	sl, [r3]
 8009586:	f1ba 0f00 	cmp.w	sl, #0
 800958a:	d024      	beq.n	80095d6 <__multiply+0xf2>
 800958c:	f104 0e14 	add.w	lr, r4, #20
 8009590:	46a9      	mov	r9, r5
 8009592:	f04f 0c00 	mov.w	ip, #0
 8009596:	f85e 2b04 	ldr.w	r2, [lr], #4
 800959a:	f8d9 1000 	ldr.w	r1, [r9]
 800959e:	fa1f fb82 	uxth.w	fp, r2
 80095a2:	b289      	uxth	r1, r1
 80095a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80095a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095ac:	f8d9 2000 	ldr.w	r2, [r9]
 80095b0:	4461      	add	r1, ip
 80095b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80095ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095be:	b289      	uxth	r1, r1
 80095c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095c4:	4577      	cmp	r7, lr
 80095c6:	f849 1b04 	str.w	r1, [r9], #4
 80095ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095ce:	d8e2      	bhi.n	8009596 <__multiply+0xb2>
 80095d0:	9a01      	ldr	r2, [sp, #4]
 80095d2:	f845 c002 	str.w	ip, [r5, r2]
 80095d6:	9a03      	ldr	r2, [sp, #12]
 80095d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095dc:	3304      	adds	r3, #4
 80095de:	f1b9 0f00 	cmp.w	r9, #0
 80095e2:	d020      	beq.n	8009626 <__multiply+0x142>
 80095e4:	6829      	ldr	r1, [r5, #0]
 80095e6:	f104 0c14 	add.w	ip, r4, #20
 80095ea:	46ae      	mov	lr, r5
 80095ec:	f04f 0a00 	mov.w	sl, #0
 80095f0:	f8bc b000 	ldrh.w	fp, [ip]
 80095f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095f8:	fb09 220b 	mla	r2, r9, fp, r2
 80095fc:	4492      	add	sl, r2
 80095fe:	b289      	uxth	r1, r1
 8009600:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009604:	f84e 1b04 	str.w	r1, [lr], #4
 8009608:	f85c 2b04 	ldr.w	r2, [ip], #4
 800960c:	f8be 1000 	ldrh.w	r1, [lr]
 8009610:	0c12      	lsrs	r2, r2, #16
 8009612:	fb09 1102 	mla	r1, r9, r2, r1
 8009616:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800961a:	4567      	cmp	r7, ip
 800961c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009620:	d8e6      	bhi.n	80095f0 <__multiply+0x10c>
 8009622:	9a01      	ldr	r2, [sp, #4]
 8009624:	50a9      	str	r1, [r5, r2]
 8009626:	3504      	adds	r5, #4
 8009628:	e79a      	b.n	8009560 <__multiply+0x7c>
 800962a:	3e01      	subs	r6, #1
 800962c:	e79c      	b.n	8009568 <__multiply+0x84>
 800962e:	bf00      	nop
 8009630:	0800acb0 	.word	0x0800acb0
 8009634:	0800ad3c 	.word	0x0800ad3c

08009638 <__pow5mult>:
 8009638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800963c:	4615      	mov	r5, r2
 800963e:	f012 0203 	ands.w	r2, r2, #3
 8009642:	4606      	mov	r6, r0
 8009644:	460f      	mov	r7, r1
 8009646:	d007      	beq.n	8009658 <__pow5mult+0x20>
 8009648:	4c25      	ldr	r4, [pc, #148]	; (80096e0 <__pow5mult+0xa8>)
 800964a:	3a01      	subs	r2, #1
 800964c:	2300      	movs	r3, #0
 800964e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009652:	f7ff fe51 	bl	80092f8 <__multadd>
 8009656:	4607      	mov	r7, r0
 8009658:	10ad      	asrs	r5, r5, #2
 800965a:	d03d      	beq.n	80096d8 <__pow5mult+0xa0>
 800965c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800965e:	b97c      	cbnz	r4, 8009680 <__pow5mult+0x48>
 8009660:	2010      	movs	r0, #16
 8009662:	f7fc fd81 	bl	8006168 <malloc>
 8009666:	4602      	mov	r2, r0
 8009668:	6270      	str	r0, [r6, #36]	; 0x24
 800966a:	b928      	cbnz	r0, 8009678 <__pow5mult+0x40>
 800966c:	4b1d      	ldr	r3, [pc, #116]	; (80096e4 <__pow5mult+0xac>)
 800966e:	481e      	ldr	r0, [pc, #120]	; (80096e8 <__pow5mult+0xb0>)
 8009670:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009674:	f000 fc3a 	bl	8009eec <__assert_func>
 8009678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800967c:	6004      	str	r4, [r0, #0]
 800967e:	60c4      	str	r4, [r0, #12]
 8009680:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009688:	b94c      	cbnz	r4, 800969e <__pow5mult+0x66>
 800968a:	f240 2171 	movw	r1, #625	; 0x271
 800968e:	4630      	mov	r0, r6
 8009690:	f7ff ff12 	bl	80094b8 <__i2b>
 8009694:	2300      	movs	r3, #0
 8009696:	f8c8 0008 	str.w	r0, [r8, #8]
 800969a:	4604      	mov	r4, r0
 800969c:	6003      	str	r3, [r0, #0]
 800969e:	f04f 0900 	mov.w	r9, #0
 80096a2:	07eb      	lsls	r3, r5, #31
 80096a4:	d50a      	bpl.n	80096bc <__pow5mult+0x84>
 80096a6:	4639      	mov	r1, r7
 80096a8:	4622      	mov	r2, r4
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7ff ff1a 	bl	80094e4 <__multiply>
 80096b0:	4639      	mov	r1, r7
 80096b2:	4680      	mov	r8, r0
 80096b4:	4630      	mov	r0, r6
 80096b6:	f7ff fdfd 	bl	80092b4 <_Bfree>
 80096ba:	4647      	mov	r7, r8
 80096bc:	106d      	asrs	r5, r5, #1
 80096be:	d00b      	beq.n	80096d8 <__pow5mult+0xa0>
 80096c0:	6820      	ldr	r0, [r4, #0]
 80096c2:	b938      	cbnz	r0, 80096d4 <__pow5mult+0x9c>
 80096c4:	4622      	mov	r2, r4
 80096c6:	4621      	mov	r1, r4
 80096c8:	4630      	mov	r0, r6
 80096ca:	f7ff ff0b 	bl	80094e4 <__multiply>
 80096ce:	6020      	str	r0, [r4, #0]
 80096d0:	f8c0 9000 	str.w	r9, [r0]
 80096d4:	4604      	mov	r4, r0
 80096d6:	e7e4      	b.n	80096a2 <__pow5mult+0x6a>
 80096d8:	4638      	mov	r0, r7
 80096da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096de:	bf00      	nop
 80096e0:	0800ae88 	.word	0x0800ae88
 80096e4:	0800ac3e 	.word	0x0800ac3e
 80096e8:	0800ad3c 	.word	0x0800ad3c

080096ec <__lshift>:
 80096ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f0:	460c      	mov	r4, r1
 80096f2:	6849      	ldr	r1, [r1, #4]
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096fa:	68a3      	ldr	r3, [r4, #8]
 80096fc:	4607      	mov	r7, r0
 80096fe:	4691      	mov	r9, r2
 8009700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009704:	f108 0601 	add.w	r6, r8, #1
 8009708:	42b3      	cmp	r3, r6
 800970a:	db0b      	blt.n	8009724 <__lshift+0x38>
 800970c:	4638      	mov	r0, r7
 800970e:	f7ff fd91 	bl	8009234 <_Balloc>
 8009712:	4605      	mov	r5, r0
 8009714:	b948      	cbnz	r0, 800972a <__lshift+0x3e>
 8009716:	4602      	mov	r2, r0
 8009718:	4b2a      	ldr	r3, [pc, #168]	; (80097c4 <__lshift+0xd8>)
 800971a:	482b      	ldr	r0, [pc, #172]	; (80097c8 <__lshift+0xdc>)
 800971c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009720:	f000 fbe4 	bl	8009eec <__assert_func>
 8009724:	3101      	adds	r1, #1
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	e7ee      	b.n	8009708 <__lshift+0x1c>
 800972a:	2300      	movs	r3, #0
 800972c:	f100 0114 	add.w	r1, r0, #20
 8009730:	f100 0210 	add.w	r2, r0, #16
 8009734:	4618      	mov	r0, r3
 8009736:	4553      	cmp	r3, sl
 8009738:	db37      	blt.n	80097aa <__lshift+0xbe>
 800973a:	6920      	ldr	r0, [r4, #16]
 800973c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009740:	f104 0314 	add.w	r3, r4, #20
 8009744:	f019 091f 	ands.w	r9, r9, #31
 8009748:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800974c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009750:	d02f      	beq.n	80097b2 <__lshift+0xc6>
 8009752:	f1c9 0e20 	rsb	lr, r9, #32
 8009756:	468a      	mov	sl, r1
 8009758:	f04f 0c00 	mov.w	ip, #0
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	fa02 f209 	lsl.w	r2, r2, r9
 8009762:	ea42 020c 	orr.w	r2, r2, ip
 8009766:	f84a 2b04 	str.w	r2, [sl], #4
 800976a:	f853 2b04 	ldr.w	r2, [r3], #4
 800976e:	4298      	cmp	r0, r3
 8009770:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009774:	d8f2      	bhi.n	800975c <__lshift+0x70>
 8009776:	1b03      	subs	r3, r0, r4
 8009778:	3b15      	subs	r3, #21
 800977a:	f023 0303 	bic.w	r3, r3, #3
 800977e:	3304      	adds	r3, #4
 8009780:	f104 0215 	add.w	r2, r4, #21
 8009784:	4290      	cmp	r0, r2
 8009786:	bf38      	it	cc
 8009788:	2304      	movcc	r3, #4
 800978a:	f841 c003 	str.w	ip, [r1, r3]
 800978e:	f1bc 0f00 	cmp.w	ip, #0
 8009792:	d001      	beq.n	8009798 <__lshift+0xac>
 8009794:	f108 0602 	add.w	r6, r8, #2
 8009798:	3e01      	subs	r6, #1
 800979a:	4638      	mov	r0, r7
 800979c:	612e      	str	r6, [r5, #16]
 800979e:	4621      	mov	r1, r4
 80097a0:	f7ff fd88 	bl	80092b4 <_Bfree>
 80097a4:	4628      	mov	r0, r5
 80097a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80097ae:	3301      	adds	r3, #1
 80097b0:	e7c1      	b.n	8009736 <__lshift+0x4a>
 80097b2:	3904      	subs	r1, #4
 80097b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80097bc:	4298      	cmp	r0, r3
 80097be:	d8f9      	bhi.n	80097b4 <__lshift+0xc8>
 80097c0:	e7ea      	b.n	8009798 <__lshift+0xac>
 80097c2:	bf00      	nop
 80097c4:	0800acb0 	.word	0x0800acb0
 80097c8:	0800ad3c 	.word	0x0800ad3c

080097cc <__mcmp>:
 80097cc:	b530      	push	{r4, r5, lr}
 80097ce:	6902      	ldr	r2, [r0, #16]
 80097d0:	690c      	ldr	r4, [r1, #16]
 80097d2:	1b12      	subs	r2, r2, r4
 80097d4:	d10e      	bne.n	80097f4 <__mcmp+0x28>
 80097d6:	f100 0314 	add.w	r3, r0, #20
 80097da:	3114      	adds	r1, #20
 80097dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097ec:	42a5      	cmp	r5, r4
 80097ee:	d003      	beq.n	80097f8 <__mcmp+0x2c>
 80097f0:	d305      	bcc.n	80097fe <__mcmp+0x32>
 80097f2:	2201      	movs	r2, #1
 80097f4:	4610      	mov	r0, r2
 80097f6:	bd30      	pop	{r4, r5, pc}
 80097f8:	4283      	cmp	r3, r0
 80097fa:	d3f3      	bcc.n	80097e4 <__mcmp+0x18>
 80097fc:	e7fa      	b.n	80097f4 <__mcmp+0x28>
 80097fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009802:	e7f7      	b.n	80097f4 <__mcmp+0x28>

08009804 <__mdiff>:
 8009804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	460c      	mov	r4, r1
 800980a:	4606      	mov	r6, r0
 800980c:	4611      	mov	r1, r2
 800980e:	4620      	mov	r0, r4
 8009810:	4690      	mov	r8, r2
 8009812:	f7ff ffdb 	bl	80097cc <__mcmp>
 8009816:	1e05      	subs	r5, r0, #0
 8009818:	d110      	bne.n	800983c <__mdiff+0x38>
 800981a:	4629      	mov	r1, r5
 800981c:	4630      	mov	r0, r6
 800981e:	f7ff fd09 	bl	8009234 <_Balloc>
 8009822:	b930      	cbnz	r0, 8009832 <__mdiff+0x2e>
 8009824:	4b3a      	ldr	r3, [pc, #232]	; (8009910 <__mdiff+0x10c>)
 8009826:	4602      	mov	r2, r0
 8009828:	f240 2132 	movw	r1, #562	; 0x232
 800982c:	4839      	ldr	r0, [pc, #228]	; (8009914 <__mdiff+0x110>)
 800982e:	f000 fb5d 	bl	8009eec <__assert_func>
 8009832:	2301      	movs	r3, #1
 8009834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983c:	bfa4      	itt	ge
 800983e:	4643      	movge	r3, r8
 8009840:	46a0      	movge	r8, r4
 8009842:	4630      	mov	r0, r6
 8009844:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009848:	bfa6      	itte	ge
 800984a:	461c      	movge	r4, r3
 800984c:	2500      	movge	r5, #0
 800984e:	2501      	movlt	r5, #1
 8009850:	f7ff fcf0 	bl	8009234 <_Balloc>
 8009854:	b920      	cbnz	r0, 8009860 <__mdiff+0x5c>
 8009856:	4b2e      	ldr	r3, [pc, #184]	; (8009910 <__mdiff+0x10c>)
 8009858:	4602      	mov	r2, r0
 800985a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800985e:	e7e5      	b.n	800982c <__mdiff+0x28>
 8009860:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009864:	6926      	ldr	r6, [r4, #16]
 8009866:	60c5      	str	r5, [r0, #12]
 8009868:	f104 0914 	add.w	r9, r4, #20
 800986c:	f108 0514 	add.w	r5, r8, #20
 8009870:	f100 0e14 	add.w	lr, r0, #20
 8009874:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009878:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800987c:	f108 0210 	add.w	r2, r8, #16
 8009880:	46f2      	mov	sl, lr
 8009882:	2100      	movs	r1, #0
 8009884:	f859 3b04 	ldr.w	r3, [r9], #4
 8009888:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800988c:	fa1f f883 	uxth.w	r8, r3
 8009890:	fa11 f18b 	uxtah	r1, r1, fp
 8009894:	0c1b      	lsrs	r3, r3, #16
 8009896:	eba1 0808 	sub.w	r8, r1, r8
 800989a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800989e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098a2:	fa1f f888 	uxth.w	r8, r8
 80098a6:	1419      	asrs	r1, r3, #16
 80098a8:	454e      	cmp	r6, r9
 80098aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098ae:	f84a 3b04 	str.w	r3, [sl], #4
 80098b2:	d8e7      	bhi.n	8009884 <__mdiff+0x80>
 80098b4:	1b33      	subs	r3, r6, r4
 80098b6:	3b15      	subs	r3, #21
 80098b8:	f023 0303 	bic.w	r3, r3, #3
 80098bc:	3304      	adds	r3, #4
 80098be:	3415      	adds	r4, #21
 80098c0:	42a6      	cmp	r6, r4
 80098c2:	bf38      	it	cc
 80098c4:	2304      	movcc	r3, #4
 80098c6:	441d      	add	r5, r3
 80098c8:	4473      	add	r3, lr
 80098ca:	469e      	mov	lr, r3
 80098cc:	462e      	mov	r6, r5
 80098ce:	4566      	cmp	r6, ip
 80098d0:	d30e      	bcc.n	80098f0 <__mdiff+0xec>
 80098d2:	f10c 0203 	add.w	r2, ip, #3
 80098d6:	1b52      	subs	r2, r2, r5
 80098d8:	f022 0203 	bic.w	r2, r2, #3
 80098dc:	3d03      	subs	r5, #3
 80098de:	45ac      	cmp	ip, r5
 80098e0:	bf38      	it	cc
 80098e2:	2200      	movcc	r2, #0
 80098e4:	441a      	add	r2, r3
 80098e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80098ea:	b17b      	cbz	r3, 800990c <__mdiff+0x108>
 80098ec:	6107      	str	r7, [r0, #16]
 80098ee:	e7a3      	b.n	8009838 <__mdiff+0x34>
 80098f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80098f4:	fa11 f288 	uxtah	r2, r1, r8
 80098f8:	1414      	asrs	r4, r2, #16
 80098fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098fe:	b292      	uxth	r2, r2
 8009900:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009904:	f84e 2b04 	str.w	r2, [lr], #4
 8009908:	1421      	asrs	r1, r4, #16
 800990a:	e7e0      	b.n	80098ce <__mdiff+0xca>
 800990c:	3f01      	subs	r7, #1
 800990e:	e7ea      	b.n	80098e6 <__mdiff+0xe2>
 8009910:	0800acb0 	.word	0x0800acb0
 8009914:	0800ad3c 	.word	0x0800ad3c

08009918 <__ulp>:
 8009918:	b082      	sub	sp, #8
 800991a:	ed8d 0b00 	vstr	d0, [sp]
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	4912      	ldr	r1, [pc, #72]	; (800996c <__ulp+0x54>)
 8009922:	4019      	ands	r1, r3
 8009924:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009928:	2900      	cmp	r1, #0
 800992a:	dd05      	ble.n	8009938 <__ulp+0x20>
 800992c:	2200      	movs	r2, #0
 800992e:	460b      	mov	r3, r1
 8009930:	ec43 2b10 	vmov	d0, r2, r3
 8009934:	b002      	add	sp, #8
 8009936:	4770      	bx	lr
 8009938:	4249      	negs	r1, r1
 800993a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800993e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009942:	f04f 0200 	mov.w	r2, #0
 8009946:	f04f 0300 	mov.w	r3, #0
 800994a:	da04      	bge.n	8009956 <__ulp+0x3e>
 800994c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009950:	fa41 f300 	asr.w	r3, r1, r0
 8009954:	e7ec      	b.n	8009930 <__ulp+0x18>
 8009956:	f1a0 0114 	sub.w	r1, r0, #20
 800995a:	291e      	cmp	r1, #30
 800995c:	bfda      	itte	le
 800995e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009962:	fa20 f101 	lsrle.w	r1, r0, r1
 8009966:	2101      	movgt	r1, #1
 8009968:	460a      	mov	r2, r1
 800996a:	e7e1      	b.n	8009930 <__ulp+0x18>
 800996c:	7ff00000 	.word	0x7ff00000

08009970 <__b2d>:
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	6905      	ldr	r5, [r0, #16]
 8009974:	f100 0714 	add.w	r7, r0, #20
 8009978:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800997c:	1f2e      	subs	r6, r5, #4
 800997e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009982:	4620      	mov	r0, r4
 8009984:	f7ff fd48 	bl	8009418 <__hi0bits>
 8009988:	f1c0 0320 	rsb	r3, r0, #32
 800998c:	280a      	cmp	r0, #10
 800998e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a0c <__b2d+0x9c>
 8009992:	600b      	str	r3, [r1, #0]
 8009994:	dc14      	bgt.n	80099c0 <__b2d+0x50>
 8009996:	f1c0 0e0b 	rsb	lr, r0, #11
 800999a:	fa24 f10e 	lsr.w	r1, r4, lr
 800999e:	42b7      	cmp	r7, r6
 80099a0:	ea41 030c 	orr.w	r3, r1, ip
 80099a4:	bf34      	ite	cc
 80099a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099aa:	2100      	movcs	r1, #0
 80099ac:	3015      	adds	r0, #21
 80099ae:	fa04 f000 	lsl.w	r0, r4, r0
 80099b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80099b6:	ea40 0201 	orr.w	r2, r0, r1
 80099ba:	ec43 2b10 	vmov	d0, r2, r3
 80099be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c0:	42b7      	cmp	r7, r6
 80099c2:	bf3a      	itte	cc
 80099c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80099cc:	2100      	movcs	r1, #0
 80099ce:	380b      	subs	r0, #11
 80099d0:	d017      	beq.n	8009a02 <__b2d+0x92>
 80099d2:	f1c0 0c20 	rsb	ip, r0, #32
 80099d6:	fa04 f500 	lsl.w	r5, r4, r0
 80099da:	42be      	cmp	r6, r7
 80099dc:	fa21 f40c 	lsr.w	r4, r1, ip
 80099e0:	ea45 0504 	orr.w	r5, r5, r4
 80099e4:	bf8c      	ite	hi
 80099e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80099ea:	2400      	movls	r4, #0
 80099ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80099f0:	fa01 f000 	lsl.w	r0, r1, r0
 80099f4:	fa24 f40c 	lsr.w	r4, r4, ip
 80099f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80099fc:	ea40 0204 	orr.w	r2, r0, r4
 8009a00:	e7db      	b.n	80099ba <__b2d+0x4a>
 8009a02:	ea44 030c 	orr.w	r3, r4, ip
 8009a06:	460a      	mov	r2, r1
 8009a08:	e7d7      	b.n	80099ba <__b2d+0x4a>
 8009a0a:	bf00      	nop
 8009a0c:	3ff00000 	.word	0x3ff00000

08009a10 <__d2b>:
 8009a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a14:	4689      	mov	r9, r1
 8009a16:	2101      	movs	r1, #1
 8009a18:	ec57 6b10 	vmov	r6, r7, d0
 8009a1c:	4690      	mov	r8, r2
 8009a1e:	f7ff fc09 	bl	8009234 <_Balloc>
 8009a22:	4604      	mov	r4, r0
 8009a24:	b930      	cbnz	r0, 8009a34 <__d2b+0x24>
 8009a26:	4602      	mov	r2, r0
 8009a28:	4b25      	ldr	r3, [pc, #148]	; (8009ac0 <__d2b+0xb0>)
 8009a2a:	4826      	ldr	r0, [pc, #152]	; (8009ac4 <__d2b+0xb4>)
 8009a2c:	f240 310a 	movw	r1, #778	; 0x30a
 8009a30:	f000 fa5c 	bl	8009eec <__assert_func>
 8009a34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a3c:	bb35      	cbnz	r5, 8009a8c <__d2b+0x7c>
 8009a3e:	2e00      	cmp	r6, #0
 8009a40:	9301      	str	r3, [sp, #4]
 8009a42:	d028      	beq.n	8009a96 <__d2b+0x86>
 8009a44:	4668      	mov	r0, sp
 8009a46:	9600      	str	r6, [sp, #0]
 8009a48:	f7ff fd06 	bl	8009458 <__lo0bits>
 8009a4c:	9900      	ldr	r1, [sp, #0]
 8009a4e:	b300      	cbz	r0, 8009a92 <__d2b+0x82>
 8009a50:	9a01      	ldr	r2, [sp, #4]
 8009a52:	f1c0 0320 	rsb	r3, r0, #32
 8009a56:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5a:	430b      	orrs	r3, r1
 8009a5c:	40c2      	lsrs	r2, r0
 8009a5e:	6163      	str	r3, [r4, #20]
 8009a60:	9201      	str	r2, [sp, #4]
 8009a62:	9b01      	ldr	r3, [sp, #4]
 8009a64:	61a3      	str	r3, [r4, #24]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	bf14      	ite	ne
 8009a6a:	2202      	movne	r2, #2
 8009a6c:	2201      	moveq	r2, #1
 8009a6e:	6122      	str	r2, [r4, #16]
 8009a70:	b1d5      	cbz	r5, 8009aa8 <__d2b+0x98>
 8009a72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a76:	4405      	add	r5, r0
 8009a78:	f8c9 5000 	str.w	r5, [r9]
 8009a7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a80:	f8c8 0000 	str.w	r0, [r8]
 8009a84:	4620      	mov	r0, r4
 8009a86:	b003      	add	sp, #12
 8009a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a90:	e7d5      	b.n	8009a3e <__d2b+0x2e>
 8009a92:	6161      	str	r1, [r4, #20]
 8009a94:	e7e5      	b.n	8009a62 <__d2b+0x52>
 8009a96:	a801      	add	r0, sp, #4
 8009a98:	f7ff fcde 	bl	8009458 <__lo0bits>
 8009a9c:	9b01      	ldr	r3, [sp, #4]
 8009a9e:	6163      	str	r3, [r4, #20]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	6122      	str	r2, [r4, #16]
 8009aa4:	3020      	adds	r0, #32
 8009aa6:	e7e3      	b.n	8009a70 <__d2b+0x60>
 8009aa8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009aac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ab0:	f8c9 0000 	str.w	r0, [r9]
 8009ab4:	6918      	ldr	r0, [r3, #16]
 8009ab6:	f7ff fcaf 	bl	8009418 <__hi0bits>
 8009aba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009abe:	e7df      	b.n	8009a80 <__d2b+0x70>
 8009ac0:	0800acb0 	.word	0x0800acb0
 8009ac4:	0800ad3c 	.word	0x0800ad3c

08009ac8 <__ratio>:
 8009ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009acc:	4688      	mov	r8, r1
 8009ace:	4669      	mov	r1, sp
 8009ad0:	4681      	mov	r9, r0
 8009ad2:	f7ff ff4d 	bl	8009970 <__b2d>
 8009ad6:	a901      	add	r1, sp, #4
 8009ad8:	4640      	mov	r0, r8
 8009ada:	ec55 4b10 	vmov	r4, r5, d0
 8009ade:	f7ff ff47 	bl	8009970 <__b2d>
 8009ae2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ae6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009aea:	eba3 0c02 	sub.w	ip, r3, r2
 8009aee:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009af8:	ec51 0b10 	vmov	r0, r1, d0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	bfd6      	itet	le
 8009b00:	460a      	movle	r2, r1
 8009b02:	462a      	movgt	r2, r5
 8009b04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b08:	468b      	mov	fp, r1
 8009b0a:	462f      	mov	r7, r5
 8009b0c:	bfd4      	ite	le
 8009b0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b16:	4620      	mov	r0, r4
 8009b18:	ee10 2a10 	vmov	r2, s0
 8009b1c:	465b      	mov	r3, fp
 8009b1e:	4639      	mov	r1, r7
 8009b20:	f7f6 fe9c 	bl	800085c <__aeabi_ddiv>
 8009b24:	ec41 0b10 	vmov	d0, r0, r1
 8009b28:	b003      	add	sp, #12
 8009b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b2e <__copybits>:
 8009b2e:	3901      	subs	r1, #1
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	1149      	asrs	r1, r1, #5
 8009b34:	6914      	ldr	r4, [r2, #16]
 8009b36:	3101      	adds	r1, #1
 8009b38:	f102 0314 	add.w	r3, r2, #20
 8009b3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b44:	1f05      	subs	r5, r0, #4
 8009b46:	42a3      	cmp	r3, r4
 8009b48:	d30c      	bcc.n	8009b64 <__copybits+0x36>
 8009b4a:	1aa3      	subs	r3, r4, r2
 8009b4c:	3b11      	subs	r3, #17
 8009b4e:	f023 0303 	bic.w	r3, r3, #3
 8009b52:	3211      	adds	r2, #17
 8009b54:	42a2      	cmp	r2, r4
 8009b56:	bf88      	it	hi
 8009b58:	2300      	movhi	r3, #0
 8009b5a:	4418      	add	r0, r3
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4288      	cmp	r0, r1
 8009b60:	d305      	bcc.n	8009b6e <__copybits+0x40>
 8009b62:	bd70      	pop	{r4, r5, r6, pc}
 8009b64:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b68:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b6c:	e7eb      	b.n	8009b46 <__copybits+0x18>
 8009b6e:	f840 3b04 	str.w	r3, [r0], #4
 8009b72:	e7f4      	b.n	8009b5e <__copybits+0x30>

08009b74 <__any_on>:
 8009b74:	f100 0214 	add.w	r2, r0, #20
 8009b78:	6900      	ldr	r0, [r0, #16]
 8009b7a:	114b      	asrs	r3, r1, #5
 8009b7c:	4298      	cmp	r0, r3
 8009b7e:	b510      	push	{r4, lr}
 8009b80:	db11      	blt.n	8009ba6 <__any_on+0x32>
 8009b82:	dd0a      	ble.n	8009b9a <__any_on+0x26>
 8009b84:	f011 011f 	ands.w	r1, r1, #31
 8009b88:	d007      	beq.n	8009b9a <__any_on+0x26>
 8009b8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b8e:	fa24 f001 	lsr.w	r0, r4, r1
 8009b92:	fa00 f101 	lsl.w	r1, r0, r1
 8009b96:	428c      	cmp	r4, r1
 8009b98:	d10b      	bne.n	8009bb2 <__any_on+0x3e>
 8009b9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d803      	bhi.n	8009baa <__any_on+0x36>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	bd10      	pop	{r4, pc}
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	e7f7      	b.n	8009b9a <__any_on+0x26>
 8009baa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bae:	2900      	cmp	r1, #0
 8009bb0:	d0f5      	beq.n	8009b9e <__any_on+0x2a>
 8009bb2:	2001      	movs	r0, #1
 8009bb4:	e7f6      	b.n	8009ba4 <__any_on+0x30>

08009bb6 <_calloc_r>:
 8009bb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bb8:	fba1 2402 	umull	r2, r4, r1, r2
 8009bbc:	b94c      	cbnz	r4, 8009bd2 <_calloc_r+0x1c>
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	9201      	str	r2, [sp, #4]
 8009bc2:	f7fc fb4d 	bl	8006260 <_malloc_r>
 8009bc6:	9a01      	ldr	r2, [sp, #4]
 8009bc8:	4605      	mov	r5, r0
 8009bca:	b930      	cbnz	r0, 8009bda <_calloc_r+0x24>
 8009bcc:	4628      	mov	r0, r5
 8009bce:	b003      	add	sp, #12
 8009bd0:	bd30      	pop	{r4, r5, pc}
 8009bd2:	220c      	movs	r2, #12
 8009bd4:	6002      	str	r2, [r0, #0]
 8009bd6:	2500      	movs	r5, #0
 8009bd8:	e7f8      	b.n	8009bcc <_calloc_r+0x16>
 8009bda:	4621      	mov	r1, r4
 8009bdc:	f7fc facc 	bl	8006178 <memset>
 8009be0:	e7f4      	b.n	8009bcc <_calloc_r+0x16>

08009be2 <__ssputs_r>:
 8009be2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be6:	688e      	ldr	r6, [r1, #8]
 8009be8:	429e      	cmp	r6, r3
 8009bea:	4682      	mov	sl, r0
 8009bec:	460c      	mov	r4, r1
 8009bee:	4690      	mov	r8, r2
 8009bf0:	461f      	mov	r7, r3
 8009bf2:	d838      	bhi.n	8009c66 <__ssputs_r+0x84>
 8009bf4:	898a      	ldrh	r2, [r1, #12]
 8009bf6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bfa:	d032      	beq.n	8009c62 <__ssputs_r+0x80>
 8009bfc:	6825      	ldr	r5, [r4, #0]
 8009bfe:	6909      	ldr	r1, [r1, #16]
 8009c00:	eba5 0901 	sub.w	r9, r5, r1
 8009c04:	6965      	ldr	r5, [r4, #20]
 8009c06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c0e:	3301      	adds	r3, #1
 8009c10:	444b      	add	r3, r9
 8009c12:	106d      	asrs	r5, r5, #1
 8009c14:	429d      	cmp	r5, r3
 8009c16:	bf38      	it	cc
 8009c18:	461d      	movcc	r5, r3
 8009c1a:	0553      	lsls	r3, r2, #21
 8009c1c:	d531      	bpl.n	8009c82 <__ssputs_r+0xa0>
 8009c1e:	4629      	mov	r1, r5
 8009c20:	f7fc fb1e 	bl	8006260 <_malloc_r>
 8009c24:	4606      	mov	r6, r0
 8009c26:	b950      	cbnz	r0, 8009c3e <__ssputs_r+0x5c>
 8009c28:	230c      	movs	r3, #12
 8009c2a:	f8ca 3000 	str.w	r3, [sl]
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3e:	6921      	ldr	r1, [r4, #16]
 8009c40:	464a      	mov	r2, r9
 8009c42:	f7ff fadd 	bl	8009200 <memcpy>
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c50:	81a3      	strh	r3, [r4, #12]
 8009c52:	6126      	str	r6, [r4, #16]
 8009c54:	6165      	str	r5, [r4, #20]
 8009c56:	444e      	add	r6, r9
 8009c58:	eba5 0509 	sub.w	r5, r5, r9
 8009c5c:	6026      	str	r6, [r4, #0]
 8009c5e:	60a5      	str	r5, [r4, #8]
 8009c60:	463e      	mov	r6, r7
 8009c62:	42be      	cmp	r6, r7
 8009c64:	d900      	bls.n	8009c68 <__ssputs_r+0x86>
 8009c66:	463e      	mov	r6, r7
 8009c68:	6820      	ldr	r0, [r4, #0]
 8009c6a:	4632      	mov	r2, r6
 8009c6c:	4641      	mov	r1, r8
 8009c6e:	f000 f970 	bl	8009f52 <memmove>
 8009c72:	68a3      	ldr	r3, [r4, #8]
 8009c74:	1b9b      	subs	r3, r3, r6
 8009c76:	60a3      	str	r3, [r4, #8]
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	4433      	add	r3, r6
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e7db      	b.n	8009c3a <__ssputs_r+0x58>
 8009c82:	462a      	mov	r2, r5
 8009c84:	f000 f97f 	bl	8009f86 <_realloc_r>
 8009c88:	4606      	mov	r6, r0
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d1e1      	bne.n	8009c52 <__ssputs_r+0x70>
 8009c8e:	6921      	ldr	r1, [r4, #16]
 8009c90:	4650      	mov	r0, sl
 8009c92:	f7fc fa79 	bl	8006188 <_free_r>
 8009c96:	e7c7      	b.n	8009c28 <__ssputs_r+0x46>

08009c98 <_svfiprintf_r>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	4698      	mov	r8, r3
 8009c9e:	898b      	ldrh	r3, [r1, #12]
 8009ca0:	061b      	lsls	r3, r3, #24
 8009ca2:	b09d      	sub	sp, #116	; 0x74
 8009ca4:	4607      	mov	r7, r0
 8009ca6:	460d      	mov	r5, r1
 8009ca8:	4614      	mov	r4, r2
 8009caa:	d50e      	bpl.n	8009cca <_svfiprintf_r+0x32>
 8009cac:	690b      	ldr	r3, [r1, #16]
 8009cae:	b963      	cbnz	r3, 8009cca <_svfiprintf_r+0x32>
 8009cb0:	2140      	movs	r1, #64	; 0x40
 8009cb2:	f7fc fad5 	bl	8006260 <_malloc_r>
 8009cb6:	6028      	str	r0, [r5, #0]
 8009cb8:	6128      	str	r0, [r5, #16]
 8009cba:	b920      	cbnz	r0, 8009cc6 <_svfiprintf_r+0x2e>
 8009cbc:	230c      	movs	r3, #12
 8009cbe:	603b      	str	r3, [r7, #0]
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc4:	e0d1      	b.n	8009e6a <_svfiprintf_r+0x1d2>
 8009cc6:	2340      	movs	r3, #64	; 0x40
 8009cc8:	616b      	str	r3, [r5, #20]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cce:	2320      	movs	r3, #32
 8009cd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cd8:	2330      	movs	r3, #48	; 0x30
 8009cda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e84 <_svfiprintf_r+0x1ec>
 8009cde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ce2:	f04f 0901 	mov.w	r9, #1
 8009ce6:	4623      	mov	r3, r4
 8009ce8:	469a      	mov	sl, r3
 8009cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cee:	b10a      	cbz	r2, 8009cf4 <_svfiprintf_r+0x5c>
 8009cf0:	2a25      	cmp	r2, #37	; 0x25
 8009cf2:	d1f9      	bne.n	8009ce8 <_svfiprintf_r+0x50>
 8009cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf8:	d00b      	beq.n	8009d12 <_svfiprintf_r+0x7a>
 8009cfa:	465b      	mov	r3, fp
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	4638      	mov	r0, r7
 8009d02:	f7ff ff6e 	bl	8009be2 <__ssputs_r>
 8009d06:	3001      	adds	r0, #1
 8009d08:	f000 80aa 	beq.w	8009e60 <_svfiprintf_r+0x1c8>
 8009d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d0e:	445a      	add	r2, fp
 8009d10:	9209      	str	r2, [sp, #36]	; 0x24
 8009d12:	f89a 3000 	ldrb.w	r3, [sl]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 80a2 	beq.w	8009e60 <_svfiprintf_r+0x1c8>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d26:	f10a 0a01 	add.w	sl, sl, #1
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	9307      	str	r3, [sp, #28]
 8009d2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d32:	931a      	str	r3, [sp, #104]	; 0x68
 8009d34:	4654      	mov	r4, sl
 8009d36:	2205      	movs	r2, #5
 8009d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d3c:	4851      	ldr	r0, [pc, #324]	; (8009e84 <_svfiprintf_r+0x1ec>)
 8009d3e:	f7f6 fa57 	bl	80001f0 <memchr>
 8009d42:	9a04      	ldr	r2, [sp, #16]
 8009d44:	b9d8      	cbnz	r0, 8009d7e <_svfiprintf_r+0xe6>
 8009d46:	06d0      	lsls	r0, r2, #27
 8009d48:	bf44      	itt	mi
 8009d4a:	2320      	movmi	r3, #32
 8009d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d50:	0711      	lsls	r1, r2, #28
 8009d52:	bf44      	itt	mi
 8009d54:	232b      	movmi	r3, #43	; 0x2b
 8009d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d60:	d015      	beq.n	8009d8e <_svfiprintf_r+0xf6>
 8009d62:	9a07      	ldr	r2, [sp, #28]
 8009d64:	4654      	mov	r4, sl
 8009d66:	2000      	movs	r0, #0
 8009d68:	f04f 0c0a 	mov.w	ip, #10
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d72:	3b30      	subs	r3, #48	; 0x30
 8009d74:	2b09      	cmp	r3, #9
 8009d76:	d94e      	bls.n	8009e16 <_svfiprintf_r+0x17e>
 8009d78:	b1b0      	cbz	r0, 8009da8 <_svfiprintf_r+0x110>
 8009d7a:	9207      	str	r2, [sp, #28]
 8009d7c:	e014      	b.n	8009da8 <_svfiprintf_r+0x110>
 8009d7e:	eba0 0308 	sub.w	r3, r0, r8
 8009d82:	fa09 f303 	lsl.w	r3, r9, r3
 8009d86:	4313      	orrs	r3, r2
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	46a2      	mov	sl, r4
 8009d8c:	e7d2      	b.n	8009d34 <_svfiprintf_r+0x9c>
 8009d8e:	9b03      	ldr	r3, [sp, #12]
 8009d90:	1d19      	adds	r1, r3, #4
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	9103      	str	r1, [sp, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	bfbb      	ittet	lt
 8009d9a:	425b      	neglt	r3, r3
 8009d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009da0:	9307      	strge	r3, [sp, #28]
 8009da2:	9307      	strlt	r3, [sp, #28]
 8009da4:	bfb8      	it	lt
 8009da6:	9204      	strlt	r2, [sp, #16]
 8009da8:	7823      	ldrb	r3, [r4, #0]
 8009daa:	2b2e      	cmp	r3, #46	; 0x2e
 8009dac:	d10c      	bne.n	8009dc8 <_svfiprintf_r+0x130>
 8009dae:	7863      	ldrb	r3, [r4, #1]
 8009db0:	2b2a      	cmp	r3, #42	; 0x2a
 8009db2:	d135      	bne.n	8009e20 <_svfiprintf_r+0x188>
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	1d1a      	adds	r2, r3, #4
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	9203      	str	r2, [sp, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	bfb8      	it	lt
 8009dc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dc4:	3402      	adds	r4, #2
 8009dc6:	9305      	str	r3, [sp, #20]
 8009dc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e94 <_svfiprintf_r+0x1fc>
 8009dcc:	7821      	ldrb	r1, [r4, #0]
 8009dce:	2203      	movs	r2, #3
 8009dd0:	4650      	mov	r0, sl
 8009dd2:	f7f6 fa0d 	bl	80001f0 <memchr>
 8009dd6:	b140      	cbz	r0, 8009dea <_svfiprintf_r+0x152>
 8009dd8:	2340      	movs	r3, #64	; 0x40
 8009dda:	eba0 000a 	sub.w	r0, r0, sl
 8009dde:	fa03 f000 	lsl.w	r0, r3, r0
 8009de2:	9b04      	ldr	r3, [sp, #16]
 8009de4:	4303      	orrs	r3, r0
 8009de6:	3401      	adds	r4, #1
 8009de8:	9304      	str	r3, [sp, #16]
 8009dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dee:	4826      	ldr	r0, [pc, #152]	; (8009e88 <_svfiprintf_r+0x1f0>)
 8009df0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009df4:	2206      	movs	r2, #6
 8009df6:	f7f6 f9fb 	bl	80001f0 <memchr>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d038      	beq.n	8009e70 <_svfiprintf_r+0x1d8>
 8009dfe:	4b23      	ldr	r3, [pc, #140]	; (8009e8c <_svfiprintf_r+0x1f4>)
 8009e00:	bb1b      	cbnz	r3, 8009e4a <_svfiprintf_r+0x1b2>
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	3307      	adds	r3, #7
 8009e06:	f023 0307 	bic.w	r3, r3, #7
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	9303      	str	r3, [sp, #12]
 8009e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e10:	4433      	add	r3, r6
 8009e12:	9309      	str	r3, [sp, #36]	; 0x24
 8009e14:	e767      	b.n	8009ce6 <_svfiprintf_r+0x4e>
 8009e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	e7a5      	b.n	8009d6c <_svfiprintf_r+0xd4>
 8009e20:	2300      	movs	r3, #0
 8009e22:	3401      	adds	r4, #1
 8009e24:	9305      	str	r3, [sp, #20]
 8009e26:	4619      	mov	r1, r3
 8009e28:	f04f 0c0a 	mov.w	ip, #10
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e32:	3a30      	subs	r2, #48	; 0x30
 8009e34:	2a09      	cmp	r2, #9
 8009e36:	d903      	bls.n	8009e40 <_svfiprintf_r+0x1a8>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0c5      	beq.n	8009dc8 <_svfiprintf_r+0x130>
 8009e3c:	9105      	str	r1, [sp, #20]
 8009e3e:	e7c3      	b.n	8009dc8 <_svfiprintf_r+0x130>
 8009e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e44:	4604      	mov	r4, r0
 8009e46:	2301      	movs	r3, #1
 8009e48:	e7f0      	b.n	8009e2c <_svfiprintf_r+0x194>
 8009e4a:	ab03      	add	r3, sp, #12
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4b0f      	ldr	r3, [pc, #60]	; (8009e90 <_svfiprintf_r+0x1f8>)
 8009e52:	a904      	add	r1, sp, #16
 8009e54:	4638      	mov	r0, r7
 8009e56:	f7fc fb17 	bl	8006488 <_printf_float>
 8009e5a:	1c42      	adds	r2, r0, #1
 8009e5c:	4606      	mov	r6, r0
 8009e5e:	d1d6      	bne.n	8009e0e <_svfiprintf_r+0x176>
 8009e60:	89ab      	ldrh	r3, [r5, #12]
 8009e62:	065b      	lsls	r3, r3, #25
 8009e64:	f53f af2c 	bmi.w	8009cc0 <_svfiprintf_r+0x28>
 8009e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e6a:	b01d      	add	sp, #116	; 0x74
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	ab03      	add	r3, sp, #12
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	462a      	mov	r2, r5
 8009e76:	4b06      	ldr	r3, [pc, #24]	; (8009e90 <_svfiprintf_r+0x1f8>)
 8009e78:	a904      	add	r1, sp, #16
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	f7fc fda8 	bl	80069d0 <_printf_i>
 8009e80:	e7eb      	b.n	8009e5a <_svfiprintf_r+0x1c2>
 8009e82:	bf00      	nop
 8009e84:	0800ae94 	.word	0x0800ae94
 8009e88:	0800ae9e 	.word	0x0800ae9e
 8009e8c:	08006489 	.word	0x08006489
 8009e90:	08009be3 	.word	0x08009be3
 8009e94:	0800ae9a 	.word	0x0800ae9a

08009e98 <nan>:
 8009e98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009ea0 <nan+0x8>
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	00000000 	.word	0x00000000
 8009ea4:	7ff80000 	.word	0x7ff80000

08009ea8 <strncmp>:
 8009ea8:	b510      	push	{r4, lr}
 8009eaa:	b17a      	cbz	r2, 8009ecc <strncmp+0x24>
 8009eac:	4603      	mov	r3, r0
 8009eae:	3901      	subs	r1, #1
 8009eb0:	1884      	adds	r4, r0, r2
 8009eb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009eb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009eba:	4290      	cmp	r0, r2
 8009ebc:	d101      	bne.n	8009ec2 <strncmp+0x1a>
 8009ebe:	42a3      	cmp	r3, r4
 8009ec0:	d101      	bne.n	8009ec6 <strncmp+0x1e>
 8009ec2:	1a80      	subs	r0, r0, r2
 8009ec4:	bd10      	pop	{r4, pc}
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d1f3      	bne.n	8009eb2 <strncmp+0xa>
 8009eca:	e7fa      	b.n	8009ec2 <strncmp+0x1a>
 8009ecc:	4610      	mov	r0, r2
 8009ece:	e7f9      	b.n	8009ec4 <strncmp+0x1c>

08009ed0 <__ascii_wctomb>:
 8009ed0:	b149      	cbz	r1, 8009ee6 <__ascii_wctomb+0x16>
 8009ed2:	2aff      	cmp	r2, #255	; 0xff
 8009ed4:	bf85      	ittet	hi
 8009ed6:	238a      	movhi	r3, #138	; 0x8a
 8009ed8:	6003      	strhi	r3, [r0, #0]
 8009eda:	700a      	strbls	r2, [r1, #0]
 8009edc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ee0:	bf98      	it	ls
 8009ee2:	2001      	movls	r0, #1
 8009ee4:	4770      	bx	lr
 8009ee6:	4608      	mov	r0, r1
 8009ee8:	4770      	bx	lr
	...

08009eec <__assert_func>:
 8009eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eee:	4614      	mov	r4, r2
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <__assert_func+0x2c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	68d8      	ldr	r0, [r3, #12]
 8009efa:	b14c      	cbz	r4, 8009f10 <__assert_func+0x24>
 8009efc:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <__assert_func+0x30>)
 8009efe:	9100      	str	r1, [sp, #0]
 8009f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f04:	4906      	ldr	r1, [pc, #24]	; (8009f20 <__assert_func+0x34>)
 8009f06:	462b      	mov	r3, r5
 8009f08:	f000 f80e 	bl	8009f28 <fiprintf>
 8009f0c:	f000 fa84 	bl	800a418 <abort>
 8009f10:	4b04      	ldr	r3, [pc, #16]	; (8009f24 <__assert_func+0x38>)
 8009f12:	461c      	mov	r4, r3
 8009f14:	e7f3      	b.n	8009efe <__assert_func+0x12>
 8009f16:	bf00      	nop
 8009f18:	2000000c 	.word	0x2000000c
 8009f1c:	0800aea5 	.word	0x0800aea5
 8009f20:	0800aeb2 	.word	0x0800aeb2
 8009f24:	0800aee0 	.word	0x0800aee0

08009f28 <fiprintf>:
 8009f28:	b40e      	push	{r1, r2, r3}
 8009f2a:	b503      	push	{r0, r1, lr}
 8009f2c:	4601      	mov	r1, r0
 8009f2e:	ab03      	add	r3, sp, #12
 8009f30:	4805      	ldr	r0, [pc, #20]	; (8009f48 <fiprintf+0x20>)
 8009f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f36:	6800      	ldr	r0, [r0, #0]
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	f000 f87d 	bl	800a038 <_vfiprintf_r>
 8009f3e:	b002      	add	sp, #8
 8009f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f44:	b003      	add	sp, #12
 8009f46:	4770      	bx	lr
 8009f48:	2000000c 	.word	0x2000000c

08009f4c <__retarget_lock_init_recursive>:
 8009f4c:	4770      	bx	lr

08009f4e <__retarget_lock_acquire_recursive>:
 8009f4e:	4770      	bx	lr

08009f50 <__retarget_lock_release_recursive>:
 8009f50:	4770      	bx	lr

08009f52 <memmove>:
 8009f52:	4288      	cmp	r0, r1
 8009f54:	b510      	push	{r4, lr}
 8009f56:	eb01 0402 	add.w	r4, r1, r2
 8009f5a:	d902      	bls.n	8009f62 <memmove+0x10>
 8009f5c:	4284      	cmp	r4, r0
 8009f5e:	4623      	mov	r3, r4
 8009f60:	d807      	bhi.n	8009f72 <memmove+0x20>
 8009f62:	1e43      	subs	r3, r0, #1
 8009f64:	42a1      	cmp	r1, r4
 8009f66:	d008      	beq.n	8009f7a <memmove+0x28>
 8009f68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f70:	e7f8      	b.n	8009f64 <memmove+0x12>
 8009f72:	4402      	add	r2, r0
 8009f74:	4601      	mov	r1, r0
 8009f76:	428a      	cmp	r2, r1
 8009f78:	d100      	bne.n	8009f7c <memmove+0x2a>
 8009f7a:	bd10      	pop	{r4, pc}
 8009f7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f80:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f84:	e7f7      	b.n	8009f76 <memmove+0x24>

08009f86 <_realloc_r>:
 8009f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8a:	4680      	mov	r8, r0
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	460e      	mov	r6, r1
 8009f90:	b921      	cbnz	r1, 8009f9c <_realloc_r+0x16>
 8009f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f96:	4611      	mov	r1, r2
 8009f98:	f7fc b962 	b.w	8006260 <_malloc_r>
 8009f9c:	b92a      	cbnz	r2, 8009faa <_realloc_r+0x24>
 8009f9e:	f7fc f8f3 	bl	8006188 <_free_r>
 8009fa2:	4625      	mov	r5, r4
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009faa:	f000 fc59 	bl	800a860 <_malloc_usable_size_r>
 8009fae:	4284      	cmp	r4, r0
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	d802      	bhi.n	8009fba <_realloc_r+0x34>
 8009fb4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009fb8:	d812      	bhi.n	8009fe0 <_realloc_r+0x5a>
 8009fba:	4621      	mov	r1, r4
 8009fbc:	4640      	mov	r0, r8
 8009fbe:	f7fc f94f 	bl	8006260 <_malloc_r>
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d0ed      	beq.n	8009fa4 <_realloc_r+0x1e>
 8009fc8:	42bc      	cmp	r4, r7
 8009fca:	4622      	mov	r2, r4
 8009fcc:	4631      	mov	r1, r6
 8009fce:	bf28      	it	cs
 8009fd0:	463a      	movcs	r2, r7
 8009fd2:	f7ff f915 	bl	8009200 <memcpy>
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4640      	mov	r0, r8
 8009fda:	f7fc f8d5 	bl	8006188 <_free_r>
 8009fde:	e7e1      	b.n	8009fa4 <_realloc_r+0x1e>
 8009fe0:	4635      	mov	r5, r6
 8009fe2:	e7df      	b.n	8009fa4 <_realloc_r+0x1e>

08009fe4 <__sfputc_r>:
 8009fe4:	6893      	ldr	r3, [r2, #8]
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	b410      	push	{r4}
 8009fec:	6093      	str	r3, [r2, #8]
 8009fee:	da08      	bge.n	800a002 <__sfputc_r+0x1e>
 8009ff0:	6994      	ldr	r4, [r2, #24]
 8009ff2:	42a3      	cmp	r3, r4
 8009ff4:	db01      	blt.n	8009ffa <__sfputc_r+0x16>
 8009ff6:	290a      	cmp	r1, #10
 8009ff8:	d103      	bne.n	800a002 <__sfputc_r+0x1e>
 8009ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ffe:	f000 b94b 	b.w	800a298 <__swbuf_r>
 800a002:	6813      	ldr	r3, [r2, #0]
 800a004:	1c58      	adds	r0, r3, #1
 800a006:	6010      	str	r0, [r2, #0]
 800a008:	7019      	strb	r1, [r3, #0]
 800a00a:	4608      	mov	r0, r1
 800a00c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <__sfputs_r>:
 800a012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a014:	4606      	mov	r6, r0
 800a016:	460f      	mov	r7, r1
 800a018:	4614      	mov	r4, r2
 800a01a:	18d5      	adds	r5, r2, r3
 800a01c:	42ac      	cmp	r4, r5
 800a01e:	d101      	bne.n	800a024 <__sfputs_r+0x12>
 800a020:	2000      	movs	r0, #0
 800a022:	e007      	b.n	800a034 <__sfputs_r+0x22>
 800a024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a028:	463a      	mov	r2, r7
 800a02a:	4630      	mov	r0, r6
 800a02c:	f7ff ffda 	bl	8009fe4 <__sfputc_r>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	d1f3      	bne.n	800a01c <__sfputs_r+0xa>
 800a034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a038 <_vfiprintf_r>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	460d      	mov	r5, r1
 800a03e:	b09d      	sub	sp, #116	; 0x74
 800a040:	4614      	mov	r4, r2
 800a042:	4698      	mov	r8, r3
 800a044:	4606      	mov	r6, r0
 800a046:	b118      	cbz	r0, 800a050 <_vfiprintf_r+0x18>
 800a048:	6983      	ldr	r3, [r0, #24]
 800a04a:	b90b      	cbnz	r3, 800a050 <_vfiprintf_r+0x18>
 800a04c:	f000 fb06 	bl	800a65c <__sinit>
 800a050:	4b89      	ldr	r3, [pc, #548]	; (800a278 <_vfiprintf_r+0x240>)
 800a052:	429d      	cmp	r5, r3
 800a054:	d11b      	bne.n	800a08e <_vfiprintf_r+0x56>
 800a056:	6875      	ldr	r5, [r6, #4]
 800a058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a05a:	07d9      	lsls	r1, r3, #31
 800a05c:	d405      	bmi.n	800a06a <_vfiprintf_r+0x32>
 800a05e:	89ab      	ldrh	r3, [r5, #12]
 800a060:	059a      	lsls	r2, r3, #22
 800a062:	d402      	bmi.n	800a06a <_vfiprintf_r+0x32>
 800a064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a066:	f7ff ff72 	bl	8009f4e <__retarget_lock_acquire_recursive>
 800a06a:	89ab      	ldrh	r3, [r5, #12]
 800a06c:	071b      	lsls	r3, r3, #28
 800a06e:	d501      	bpl.n	800a074 <_vfiprintf_r+0x3c>
 800a070:	692b      	ldr	r3, [r5, #16]
 800a072:	b9eb      	cbnz	r3, 800a0b0 <_vfiprintf_r+0x78>
 800a074:	4629      	mov	r1, r5
 800a076:	4630      	mov	r0, r6
 800a078:	f000 f960 	bl	800a33c <__swsetup_r>
 800a07c:	b1c0      	cbz	r0, 800a0b0 <_vfiprintf_r+0x78>
 800a07e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a080:	07dc      	lsls	r4, r3, #31
 800a082:	d50e      	bpl.n	800a0a2 <_vfiprintf_r+0x6a>
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	b01d      	add	sp, #116	; 0x74
 800a08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08e:	4b7b      	ldr	r3, [pc, #492]	; (800a27c <_vfiprintf_r+0x244>)
 800a090:	429d      	cmp	r5, r3
 800a092:	d101      	bne.n	800a098 <_vfiprintf_r+0x60>
 800a094:	68b5      	ldr	r5, [r6, #8]
 800a096:	e7df      	b.n	800a058 <_vfiprintf_r+0x20>
 800a098:	4b79      	ldr	r3, [pc, #484]	; (800a280 <_vfiprintf_r+0x248>)
 800a09a:	429d      	cmp	r5, r3
 800a09c:	bf08      	it	eq
 800a09e:	68f5      	ldreq	r5, [r6, #12]
 800a0a0:	e7da      	b.n	800a058 <_vfiprintf_r+0x20>
 800a0a2:	89ab      	ldrh	r3, [r5, #12]
 800a0a4:	0598      	lsls	r0, r3, #22
 800a0a6:	d4ed      	bmi.n	800a084 <_vfiprintf_r+0x4c>
 800a0a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0aa:	f7ff ff51 	bl	8009f50 <__retarget_lock_release_recursive>
 800a0ae:	e7e9      	b.n	800a084 <_vfiprintf_r+0x4c>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b4:	2320      	movs	r3, #32
 800a0b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0be:	2330      	movs	r3, #48	; 0x30
 800a0c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a284 <_vfiprintf_r+0x24c>
 800a0c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0c8:	f04f 0901 	mov.w	r9, #1
 800a0cc:	4623      	mov	r3, r4
 800a0ce:	469a      	mov	sl, r3
 800a0d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0d4:	b10a      	cbz	r2, 800a0da <_vfiprintf_r+0xa2>
 800a0d6:	2a25      	cmp	r2, #37	; 0x25
 800a0d8:	d1f9      	bne.n	800a0ce <_vfiprintf_r+0x96>
 800a0da:	ebba 0b04 	subs.w	fp, sl, r4
 800a0de:	d00b      	beq.n	800a0f8 <_vfiprintf_r+0xc0>
 800a0e0:	465b      	mov	r3, fp
 800a0e2:	4622      	mov	r2, r4
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f7ff ff93 	bl	800a012 <__sfputs_r>
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	f000 80aa 	beq.w	800a246 <_vfiprintf_r+0x20e>
 800a0f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0f4:	445a      	add	r2, fp
 800a0f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a0f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 80a2 	beq.w	800a246 <_vfiprintf_r+0x20e>
 800a102:	2300      	movs	r3, #0
 800a104:	f04f 32ff 	mov.w	r2, #4294967295
 800a108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a10c:	f10a 0a01 	add.w	sl, sl, #1
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	9307      	str	r3, [sp, #28]
 800a114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a118:	931a      	str	r3, [sp, #104]	; 0x68
 800a11a:	4654      	mov	r4, sl
 800a11c:	2205      	movs	r2, #5
 800a11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a122:	4858      	ldr	r0, [pc, #352]	; (800a284 <_vfiprintf_r+0x24c>)
 800a124:	f7f6 f864 	bl	80001f0 <memchr>
 800a128:	9a04      	ldr	r2, [sp, #16]
 800a12a:	b9d8      	cbnz	r0, 800a164 <_vfiprintf_r+0x12c>
 800a12c:	06d1      	lsls	r1, r2, #27
 800a12e:	bf44      	itt	mi
 800a130:	2320      	movmi	r3, #32
 800a132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a136:	0713      	lsls	r3, r2, #28
 800a138:	bf44      	itt	mi
 800a13a:	232b      	movmi	r3, #43	; 0x2b
 800a13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a140:	f89a 3000 	ldrb.w	r3, [sl]
 800a144:	2b2a      	cmp	r3, #42	; 0x2a
 800a146:	d015      	beq.n	800a174 <_vfiprintf_r+0x13c>
 800a148:	9a07      	ldr	r2, [sp, #28]
 800a14a:	4654      	mov	r4, sl
 800a14c:	2000      	movs	r0, #0
 800a14e:	f04f 0c0a 	mov.w	ip, #10
 800a152:	4621      	mov	r1, r4
 800a154:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a158:	3b30      	subs	r3, #48	; 0x30
 800a15a:	2b09      	cmp	r3, #9
 800a15c:	d94e      	bls.n	800a1fc <_vfiprintf_r+0x1c4>
 800a15e:	b1b0      	cbz	r0, 800a18e <_vfiprintf_r+0x156>
 800a160:	9207      	str	r2, [sp, #28]
 800a162:	e014      	b.n	800a18e <_vfiprintf_r+0x156>
 800a164:	eba0 0308 	sub.w	r3, r0, r8
 800a168:	fa09 f303 	lsl.w	r3, r9, r3
 800a16c:	4313      	orrs	r3, r2
 800a16e:	9304      	str	r3, [sp, #16]
 800a170:	46a2      	mov	sl, r4
 800a172:	e7d2      	b.n	800a11a <_vfiprintf_r+0xe2>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	1d19      	adds	r1, r3, #4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	9103      	str	r1, [sp, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	bfbb      	ittet	lt
 800a180:	425b      	neglt	r3, r3
 800a182:	f042 0202 	orrlt.w	r2, r2, #2
 800a186:	9307      	strge	r3, [sp, #28]
 800a188:	9307      	strlt	r3, [sp, #28]
 800a18a:	bfb8      	it	lt
 800a18c:	9204      	strlt	r2, [sp, #16]
 800a18e:	7823      	ldrb	r3, [r4, #0]
 800a190:	2b2e      	cmp	r3, #46	; 0x2e
 800a192:	d10c      	bne.n	800a1ae <_vfiprintf_r+0x176>
 800a194:	7863      	ldrb	r3, [r4, #1]
 800a196:	2b2a      	cmp	r3, #42	; 0x2a
 800a198:	d135      	bne.n	800a206 <_vfiprintf_r+0x1ce>
 800a19a:	9b03      	ldr	r3, [sp, #12]
 800a19c:	1d1a      	adds	r2, r3, #4
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	9203      	str	r2, [sp, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	bfb8      	it	lt
 800a1a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1aa:	3402      	adds	r4, #2
 800a1ac:	9305      	str	r3, [sp, #20]
 800a1ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a294 <_vfiprintf_r+0x25c>
 800a1b2:	7821      	ldrb	r1, [r4, #0]
 800a1b4:	2203      	movs	r2, #3
 800a1b6:	4650      	mov	r0, sl
 800a1b8:	f7f6 f81a 	bl	80001f0 <memchr>
 800a1bc:	b140      	cbz	r0, 800a1d0 <_vfiprintf_r+0x198>
 800a1be:	2340      	movs	r3, #64	; 0x40
 800a1c0:	eba0 000a 	sub.w	r0, r0, sl
 800a1c4:	fa03 f000 	lsl.w	r0, r3, r0
 800a1c8:	9b04      	ldr	r3, [sp, #16]
 800a1ca:	4303      	orrs	r3, r0
 800a1cc:	3401      	adds	r4, #1
 800a1ce:	9304      	str	r3, [sp, #16]
 800a1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d4:	482c      	ldr	r0, [pc, #176]	; (800a288 <_vfiprintf_r+0x250>)
 800a1d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1da:	2206      	movs	r2, #6
 800a1dc:	f7f6 f808 	bl	80001f0 <memchr>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d03f      	beq.n	800a264 <_vfiprintf_r+0x22c>
 800a1e4:	4b29      	ldr	r3, [pc, #164]	; (800a28c <_vfiprintf_r+0x254>)
 800a1e6:	bb1b      	cbnz	r3, 800a230 <_vfiprintf_r+0x1f8>
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	3307      	adds	r3, #7
 800a1ec:	f023 0307 	bic.w	r3, r3, #7
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	9303      	str	r3, [sp, #12]
 800a1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f6:	443b      	add	r3, r7
 800a1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1fa:	e767      	b.n	800a0cc <_vfiprintf_r+0x94>
 800a1fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a200:	460c      	mov	r4, r1
 800a202:	2001      	movs	r0, #1
 800a204:	e7a5      	b.n	800a152 <_vfiprintf_r+0x11a>
 800a206:	2300      	movs	r3, #0
 800a208:	3401      	adds	r4, #1
 800a20a:	9305      	str	r3, [sp, #20]
 800a20c:	4619      	mov	r1, r3
 800a20e:	f04f 0c0a 	mov.w	ip, #10
 800a212:	4620      	mov	r0, r4
 800a214:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a218:	3a30      	subs	r2, #48	; 0x30
 800a21a:	2a09      	cmp	r2, #9
 800a21c:	d903      	bls.n	800a226 <_vfiprintf_r+0x1ee>
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0c5      	beq.n	800a1ae <_vfiprintf_r+0x176>
 800a222:	9105      	str	r1, [sp, #20]
 800a224:	e7c3      	b.n	800a1ae <_vfiprintf_r+0x176>
 800a226:	fb0c 2101 	mla	r1, ip, r1, r2
 800a22a:	4604      	mov	r4, r0
 800a22c:	2301      	movs	r3, #1
 800a22e:	e7f0      	b.n	800a212 <_vfiprintf_r+0x1da>
 800a230:	ab03      	add	r3, sp, #12
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	462a      	mov	r2, r5
 800a236:	4b16      	ldr	r3, [pc, #88]	; (800a290 <_vfiprintf_r+0x258>)
 800a238:	a904      	add	r1, sp, #16
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7fc f924 	bl	8006488 <_printf_float>
 800a240:	4607      	mov	r7, r0
 800a242:	1c78      	adds	r0, r7, #1
 800a244:	d1d6      	bne.n	800a1f4 <_vfiprintf_r+0x1bc>
 800a246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a248:	07d9      	lsls	r1, r3, #31
 800a24a:	d405      	bmi.n	800a258 <_vfiprintf_r+0x220>
 800a24c:	89ab      	ldrh	r3, [r5, #12]
 800a24e:	059a      	lsls	r2, r3, #22
 800a250:	d402      	bmi.n	800a258 <_vfiprintf_r+0x220>
 800a252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a254:	f7ff fe7c 	bl	8009f50 <__retarget_lock_release_recursive>
 800a258:	89ab      	ldrh	r3, [r5, #12]
 800a25a:	065b      	lsls	r3, r3, #25
 800a25c:	f53f af12 	bmi.w	800a084 <_vfiprintf_r+0x4c>
 800a260:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a262:	e711      	b.n	800a088 <_vfiprintf_r+0x50>
 800a264:	ab03      	add	r3, sp, #12
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	462a      	mov	r2, r5
 800a26a:	4b09      	ldr	r3, [pc, #36]	; (800a290 <_vfiprintf_r+0x258>)
 800a26c:	a904      	add	r1, sp, #16
 800a26e:	4630      	mov	r0, r6
 800a270:	f7fc fbae 	bl	80069d0 <_printf_i>
 800a274:	e7e4      	b.n	800a240 <_vfiprintf_r+0x208>
 800a276:	bf00      	nop
 800a278:	0800af04 	.word	0x0800af04
 800a27c:	0800af24 	.word	0x0800af24
 800a280:	0800aee4 	.word	0x0800aee4
 800a284:	0800ae94 	.word	0x0800ae94
 800a288:	0800ae9e 	.word	0x0800ae9e
 800a28c:	08006489 	.word	0x08006489
 800a290:	0800a013 	.word	0x0800a013
 800a294:	0800ae9a 	.word	0x0800ae9a

0800a298 <__swbuf_r>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	460e      	mov	r6, r1
 800a29c:	4614      	mov	r4, r2
 800a29e:	4605      	mov	r5, r0
 800a2a0:	b118      	cbz	r0, 800a2aa <__swbuf_r+0x12>
 800a2a2:	6983      	ldr	r3, [r0, #24]
 800a2a4:	b90b      	cbnz	r3, 800a2aa <__swbuf_r+0x12>
 800a2a6:	f000 f9d9 	bl	800a65c <__sinit>
 800a2aa:	4b21      	ldr	r3, [pc, #132]	; (800a330 <__swbuf_r+0x98>)
 800a2ac:	429c      	cmp	r4, r3
 800a2ae:	d12b      	bne.n	800a308 <__swbuf_r+0x70>
 800a2b0:	686c      	ldr	r4, [r5, #4]
 800a2b2:	69a3      	ldr	r3, [r4, #24]
 800a2b4:	60a3      	str	r3, [r4, #8]
 800a2b6:	89a3      	ldrh	r3, [r4, #12]
 800a2b8:	071a      	lsls	r2, r3, #28
 800a2ba:	d52f      	bpl.n	800a31c <__swbuf_r+0x84>
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	b36b      	cbz	r3, 800a31c <__swbuf_r+0x84>
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	6820      	ldr	r0, [r4, #0]
 800a2c4:	1ac0      	subs	r0, r0, r3
 800a2c6:	6963      	ldr	r3, [r4, #20]
 800a2c8:	b2f6      	uxtb	r6, r6
 800a2ca:	4283      	cmp	r3, r0
 800a2cc:	4637      	mov	r7, r6
 800a2ce:	dc04      	bgt.n	800a2da <__swbuf_r+0x42>
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	f000 f92e 	bl	800a534 <_fflush_r>
 800a2d8:	bb30      	cbnz	r0, 800a328 <__swbuf_r+0x90>
 800a2da:	68a3      	ldr	r3, [r4, #8]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	60a3      	str	r3, [r4, #8]
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	6022      	str	r2, [r4, #0]
 800a2e6:	701e      	strb	r6, [r3, #0]
 800a2e8:	6963      	ldr	r3, [r4, #20]
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	4283      	cmp	r3, r0
 800a2ee:	d004      	beq.n	800a2fa <__swbuf_r+0x62>
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	07db      	lsls	r3, r3, #31
 800a2f4:	d506      	bpl.n	800a304 <__swbuf_r+0x6c>
 800a2f6:	2e0a      	cmp	r6, #10
 800a2f8:	d104      	bne.n	800a304 <__swbuf_r+0x6c>
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	f000 f919 	bl	800a534 <_fflush_r>
 800a302:	b988      	cbnz	r0, 800a328 <__swbuf_r+0x90>
 800a304:	4638      	mov	r0, r7
 800a306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a308:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <__swbuf_r+0x9c>)
 800a30a:	429c      	cmp	r4, r3
 800a30c:	d101      	bne.n	800a312 <__swbuf_r+0x7a>
 800a30e:	68ac      	ldr	r4, [r5, #8]
 800a310:	e7cf      	b.n	800a2b2 <__swbuf_r+0x1a>
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <__swbuf_r+0xa0>)
 800a314:	429c      	cmp	r4, r3
 800a316:	bf08      	it	eq
 800a318:	68ec      	ldreq	r4, [r5, #12]
 800a31a:	e7ca      	b.n	800a2b2 <__swbuf_r+0x1a>
 800a31c:	4621      	mov	r1, r4
 800a31e:	4628      	mov	r0, r5
 800a320:	f000 f80c 	bl	800a33c <__swsetup_r>
 800a324:	2800      	cmp	r0, #0
 800a326:	d0cb      	beq.n	800a2c0 <__swbuf_r+0x28>
 800a328:	f04f 37ff 	mov.w	r7, #4294967295
 800a32c:	e7ea      	b.n	800a304 <__swbuf_r+0x6c>
 800a32e:	bf00      	nop
 800a330:	0800af04 	.word	0x0800af04
 800a334:	0800af24 	.word	0x0800af24
 800a338:	0800aee4 	.word	0x0800aee4

0800a33c <__swsetup_r>:
 800a33c:	4b32      	ldr	r3, [pc, #200]	; (800a408 <__swsetup_r+0xcc>)
 800a33e:	b570      	push	{r4, r5, r6, lr}
 800a340:	681d      	ldr	r5, [r3, #0]
 800a342:	4606      	mov	r6, r0
 800a344:	460c      	mov	r4, r1
 800a346:	b125      	cbz	r5, 800a352 <__swsetup_r+0x16>
 800a348:	69ab      	ldr	r3, [r5, #24]
 800a34a:	b913      	cbnz	r3, 800a352 <__swsetup_r+0x16>
 800a34c:	4628      	mov	r0, r5
 800a34e:	f000 f985 	bl	800a65c <__sinit>
 800a352:	4b2e      	ldr	r3, [pc, #184]	; (800a40c <__swsetup_r+0xd0>)
 800a354:	429c      	cmp	r4, r3
 800a356:	d10f      	bne.n	800a378 <__swsetup_r+0x3c>
 800a358:	686c      	ldr	r4, [r5, #4]
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a360:	0719      	lsls	r1, r3, #28
 800a362:	d42c      	bmi.n	800a3be <__swsetup_r+0x82>
 800a364:	06dd      	lsls	r5, r3, #27
 800a366:	d411      	bmi.n	800a38c <__swsetup_r+0x50>
 800a368:	2309      	movs	r3, #9
 800a36a:	6033      	str	r3, [r6, #0]
 800a36c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a370:	81a3      	strh	r3, [r4, #12]
 800a372:	f04f 30ff 	mov.w	r0, #4294967295
 800a376:	e03e      	b.n	800a3f6 <__swsetup_r+0xba>
 800a378:	4b25      	ldr	r3, [pc, #148]	; (800a410 <__swsetup_r+0xd4>)
 800a37a:	429c      	cmp	r4, r3
 800a37c:	d101      	bne.n	800a382 <__swsetup_r+0x46>
 800a37e:	68ac      	ldr	r4, [r5, #8]
 800a380:	e7eb      	b.n	800a35a <__swsetup_r+0x1e>
 800a382:	4b24      	ldr	r3, [pc, #144]	; (800a414 <__swsetup_r+0xd8>)
 800a384:	429c      	cmp	r4, r3
 800a386:	bf08      	it	eq
 800a388:	68ec      	ldreq	r4, [r5, #12]
 800a38a:	e7e6      	b.n	800a35a <__swsetup_r+0x1e>
 800a38c:	0758      	lsls	r0, r3, #29
 800a38e:	d512      	bpl.n	800a3b6 <__swsetup_r+0x7a>
 800a390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a392:	b141      	cbz	r1, 800a3a6 <__swsetup_r+0x6a>
 800a394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a398:	4299      	cmp	r1, r3
 800a39a:	d002      	beq.n	800a3a2 <__swsetup_r+0x66>
 800a39c:	4630      	mov	r0, r6
 800a39e:	f7fb fef3 	bl	8006188 <_free_r>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	6063      	str	r3, [r4, #4]
 800a3b2:	6923      	ldr	r3, [r4, #16]
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	f043 0308 	orr.w	r3, r3, #8
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	6923      	ldr	r3, [r4, #16]
 800a3c0:	b94b      	cbnz	r3, 800a3d6 <__swsetup_r+0x9a>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3cc:	d003      	beq.n	800a3d6 <__swsetup_r+0x9a>
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f000 fa05 	bl	800a7e0 <__smakebuf_r>
 800a3d6:	89a0      	ldrh	r0, [r4, #12]
 800a3d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3dc:	f010 0301 	ands.w	r3, r0, #1
 800a3e0:	d00a      	beq.n	800a3f8 <__swsetup_r+0xbc>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60a3      	str	r3, [r4, #8]
 800a3e6:	6963      	ldr	r3, [r4, #20]
 800a3e8:	425b      	negs	r3, r3
 800a3ea:	61a3      	str	r3, [r4, #24]
 800a3ec:	6923      	ldr	r3, [r4, #16]
 800a3ee:	b943      	cbnz	r3, 800a402 <__swsetup_r+0xc6>
 800a3f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3f4:	d1ba      	bne.n	800a36c <__swsetup_r+0x30>
 800a3f6:	bd70      	pop	{r4, r5, r6, pc}
 800a3f8:	0781      	lsls	r1, r0, #30
 800a3fa:	bf58      	it	pl
 800a3fc:	6963      	ldrpl	r3, [r4, #20]
 800a3fe:	60a3      	str	r3, [r4, #8]
 800a400:	e7f4      	b.n	800a3ec <__swsetup_r+0xb0>
 800a402:	2000      	movs	r0, #0
 800a404:	e7f7      	b.n	800a3f6 <__swsetup_r+0xba>
 800a406:	bf00      	nop
 800a408:	2000000c 	.word	0x2000000c
 800a40c:	0800af04 	.word	0x0800af04
 800a410:	0800af24 	.word	0x0800af24
 800a414:	0800aee4 	.word	0x0800aee4

0800a418 <abort>:
 800a418:	b508      	push	{r3, lr}
 800a41a:	2006      	movs	r0, #6
 800a41c:	f000 fa50 	bl	800a8c0 <raise>
 800a420:	2001      	movs	r0, #1
 800a422:	f7f7 fa0d 	bl	8001840 <_exit>
	...

0800a428 <__sflush_r>:
 800a428:	898a      	ldrh	r2, [r1, #12]
 800a42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42e:	4605      	mov	r5, r0
 800a430:	0710      	lsls	r0, r2, #28
 800a432:	460c      	mov	r4, r1
 800a434:	d458      	bmi.n	800a4e8 <__sflush_r+0xc0>
 800a436:	684b      	ldr	r3, [r1, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	dc05      	bgt.n	800a448 <__sflush_r+0x20>
 800a43c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a43e:	2b00      	cmp	r3, #0
 800a440:	dc02      	bgt.n	800a448 <__sflush_r+0x20>
 800a442:	2000      	movs	r0, #0
 800a444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a44a:	2e00      	cmp	r6, #0
 800a44c:	d0f9      	beq.n	800a442 <__sflush_r+0x1a>
 800a44e:	2300      	movs	r3, #0
 800a450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a454:	682f      	ldr	r7, [r5, #0]
 800a456:	602b      	str	r3, [r5, #0]
 800a458:	d032      	beq.n	800a4c0 <__sflush_r+0x98>
 800a45a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	075a      	lsls	r2, r3, #29
 800a460:	d505      	bpl.n	800a46e <__sflush_r+0x46>
 800a462:	6863      	ldr	r3, [r4, #4]
 800a464:	1ac0      	subs	r0, r0, r3
 800a466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a468:	b10b      	cbz	r3, 800a46e <__sflush_r+0x46>
 800a46a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a46c:	1ac0      	subs	r0, r0, r3
 800a46e:	2300      	movs	r3, #0
 800a470:	4602      	mov	r2, r0
 800a472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a474:	6a21      	ldr	r1, [r4, #32]
 800a476:	4628      	mov	r0, r5
 800a478:	47b0      	blx	r6
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	d106      	bne.n	800a48e <__sflush_r+0x66>
 800a480:	6829      	ldr	r1, [r5, #0]
 800a482:	291d      	cmp	r1, #29
 800a484:	d82c      	bhi.n	800a4e0 <__sflush_r+0xb8>
 800a486:	4a2a      	ldr	r2, [pc, #168]	; (800a530 <__sflush_r+0x108>)
 800a488:	40ca      	lsrs	r2, r1
 800a48a:	07d6      	lsls	r6, r2, #31
 800a48c:	d528      	bpl.n	800a4e0 <__sflush_r+0xb8>
 800a48e:	2200      	movs	r2, #0
 800a490:	6062      	str	r2, [r4, #4]
 800a492:	04d9      	lsls	r1, r3, #19
 800a494:	6922      	ldr	r2, [r4, #16]
 800a496:	6022      	str	r2, [r4, #0]
 800a498:	d504      	bpl.n	800a4a4 <__sflush_r+0x7c>
 800a49a:	1c42      	adds	r2, r0, #1
 800a49c:	d101      	bne.n	800a4a2 <__sflush_r+0x7a>
 800a49e:	682b      	ldr	r3, [r5, #0]
 800a4a0:	b903      	cbnz	r3, 800a4a4 <__sflush_r+0x7c>
 800a4a2:	6560      	str	r0, [r4, #84]	; 0x54
 800a4a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a6:	602f      	str	r7, [r5, #0]
 800a4a8:	2900      	cmp	r1, #0
 800a4aa:	d0ca      	beq.n	800a442 <__sflush_r+0x1a>
 800a4ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4b0:	4299      	cmp	r1, r3
 800a4b2:	d002      	beq.n	800a4ba <__sflush_r+0x92>
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f7fb fe67 	bl	8006188 <_free_r>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a4be:	e7c1      	b.n	800a444 <__sflush_r+0x1c>
 800a4c0:	6a21      	ldr	r1, [r4, #32]
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	47b0      	blx	r6
 800a4c8:	1c41      	adds	r1, r0, #1
 800a4ca:	d1c7      	bne.n	800a45c <__sflush_r+0x34>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d0c4      	beq.n	800a45c <__sflush_r+0x34>
 800a4d2:	2b1d      	cmp	r3, #29
 800a4d4:	d001      	beq.n	800a4da <__sflush_r+0xb2>
 800a4d6:	2b16      	cmp	r3, #22
 800a4d8:	d101      	bne.n	800a4de <__sflush_r+0xb6>
 800a4da:	602f      	str	r7, [r5, #0]
 800a4dc:	e7b1      	b.n	800a442 <__sflush_r+0x1a>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e4:	81a3      	strh	r3, [r4, #12]
 800a4e6:	e7ad      	b.n	800a444 <__sflush_r+0x1c>
 800a4e8:	690f      	ldr	r7, [r1, #16]
 800a4ea:	2f00      	cmp	r7, #0
 800a4ec:	d0a9      	beq.n	800a442 <__sflush_r+0x1a>
 800a4ee:	0793      	lsls	r3, r2, #30
 800a4f0:	680e      	ldr	r6, [r1, #0]
 800a4f2:	bf08      	it	eq
 800a4f4:	694b      	ldreq	r3, [r1, #20]
 800a4f6:	600f      	str	r7, [r1, #0]
 800a4f8:	bf18      	it	ne
 800a4fa:	2300      	movne	r3, #0
 800a4fc:	eba6 0807 	sub.w	r8, r6, r7
 800a500:	608b      	str	r3, [r1, #8]
 800a502:	f1b8 0f00 	cmp.w	r8, #0
 800a506:	dd9c      	ble.n	800a442 <__sflush_r+0x1a>
 800a508:	6a21      	ldr	r1, [r4, #32]
 800a50a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a50c:	4643      	mov	r3, r8
 800a50e:	463a      	mov	r2, r7
 800a510:	4628      	mov	r0, r5
 800a512:	47b0      	blx	r6
 800a514:	2800      	cmp	r0, #0
 800a516:	dc06      	bgt.n	800a526 <__sflush_r+0xfe>
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	f04f 30ff 	mov.w	r0, #4294967295
 800a524:	e78e      	b.n	800a444 <__sflush_r+0x1c>
 800a526:	4407      	add	r7, r0
 800a528:	eba8 0800 	sub.w	r8, r8, r0
 800a52c:	e7e9      	b.n	800a502 <__sflush_r+0xda>
 800a52e:	bf00      	nop
 800a530:	20400001 	.word	0x20400001

0800a534 <_fflush_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	690b      	ldr	r3, [r1, #16]
 800a538:	4605      	mov	r5, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	b913      	cbnz	r3, 800a544 <_fflush_r+0x10>
 800a53e:	2500      	movs	r5, #0
 800a540:	4628      	mov	r0, r5
 800a542:	bd38      	pop	{r3, r4, r5, pc}
 800a544:	b118      	cbz	r0, 800a54e <_fflush_r+0x1a>
 800a546:	6983      	ldr	r3, [r0, #24]
 800a548:	b90b      	cbnz	r3, 800a54e <_fflush_r+0x1a>
 800a54a:	f000 f887 	bl	800a65c <__sinit>
 800a54e:	4b14      	ldr	r3, [pc, #80]	; (800a5a0 <_fflush_r+0x6c>)
 800a550:	429c      	cmp	r4, r3
 800a552:	d11b      	bne.n	800a58c <_fflush_r+0x58>
 800a554:	686c      	ldr	r4, [r5, #4]
 800a556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0ef      	beq.n	800a53e <_fflush_r+0xa>
 800a55e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a560:	07d0      	lsls	r0, r2, #31
 800a562:	d404      	bmi.n	800a56e <_fflush_r+0x3a>
 800a564:	0599      	lsls	r1, r3, #22
 800a566:	d402      	bmi.n	800a56e <_fflush_r+0x3a>
 800a568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a56a:	f7ff fcf0 	bl	8009f4e <__retarget_lock_acquire_recursive>
 800a56e:	4628      	mov	r0, r5
 800a570:	4621      	mov	r1, r4
 800a572:	f7ff ff59 	bl	800a428 <__sflush_r>
 800a576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a578:	07da      	lsls	r2, r3, #31
 800a57a:	4605      	mov	r5, r0
 800a57c:	d4e0      	bmi.n	800a540 <_fflush_r+0xc>
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	059b      	lsls	r3, r3, #22
 800a582:	d4dd      	bmi.n	800a540 <_fflush_r+0xc>
 800a584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a586:	f7ff fce3 	bl	8009f50 <__retarget_lock_release_recursive>
 800a58a:	e7d9      	b.n	800a540 <_fflush_r+0xc>
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <_fflush_r+0x70>)
 800a58e:	429c      	cmp	r4, r3
 800a590:	d101      	bne.n	800a596 <_fflush_r+0x62>
 800a592:	68ac      	ldr	r4, [r5, #8]
 800a594:	e7df      	b.n	800a556 <_fflush_r+0x22>
 800a596:	4b04      	ldr	r3, [pc, #16]	; (800a5a8 <_fflush_r+0x74>)
 800a598:	429c      	cmp	r4, r3
 800a59a:	bf08      	it	eq
 800a59c:	68ec      	ldreq	r4, [r5, #12]
 800a59e:	e7da      	b.n	800a556 <_fflush_r+0x22>
 800a5a0:	0800af04 	.word	0x0800af04
 800a5a4:	0800af24 	.word	0x0800af24
 800a5a8:	0800aee4 	.word	0x0800aee4

0800a5ac <std>:
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5ba:	6083      	str	r3, [r0, #8]
 800a5bc:	8181      	strh	r1, [r0, #12]
 800a5be:	6643      	str	r3, [r0, #100]	; 0x64
 800a5c0:	81c2      	strh	r2, [r0, #14]
 800a5c2:	6183      	str	r3, [r0, #24]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	2208      	movs	r2, #8
 800a5c8:	305c      	adds	r0, #92	; 0x5c
 800a5ca:	f7fb fdd5 	bl	8006178 <memset>
 800a5ce:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <std+0x38>)
 800a5d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5d2:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <std+0x3c>)
 800a5d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5d6:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <std+0x40>)
 800a5d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5da:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <std+0x44>)
 800a5dc:	6224      	str	r4, [r4, #32]
 800a5de:	6323      	str	r3, [r4, #48]	; 0x30
 800a5e0:	bd10      	pop	{r4, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0800a8f9 	.word	0x0800a8f9
 800a5e8:	0800a91b 	.word	0x0800a91b
 800a5ec:	0800a953 	.word	0x0800a953
 800a5f0:	0800a977 	.word	0x0800a977

0800a5f4 <_cleanup_r>:
 800a5f4:	4901      	ldr	r1, [pc, #4]	; (800a5fc <_cleanup_r+0x8>)
 800a5f6:	f000 b8af 	b.w	800a758 <_fwalk_reent>
 800a5fa:	bf00      	nop
 800a5fc:	0800a535 	.word	0x0800a535

0800a600 <__sfmoreglue>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	2268      	movs	r2, #104	; 0x68
 800a604:	1e4d      	subs	r5, r1, #1
 800a606:	4355      	muls	r5, r2
 800a608:	460e      	mov	r6, r1
 800a60a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a60e:	f7fb fe27 	bl	8006260 <_malloc_r>
 800a612:	4604      	mov	r4, r0
 800a614:	b140      	cbz	r0, 800a628 <__sfmoreglue+0x28>
 800a616:	2100      	movs	r1, #0
 800a618:	e9c0 1600 	strd	r1, r6, [r0]
 800a61c:	300c      	adds	r0, #12
 800a61e:	60a0      	str	r0, [r4, #8]
 800a620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a624:	f7fb fda8 	bl	8006178 <memset>
 800a628:	4620      	mov	r0, r4
 800a62a:	bd70      	pop	{r4, r5, r6, pc}

0800a62c <__sfp_lock_acquire>:
 800a62c:	4801      	ldr	r0, [pc, #4]	; (800a634 <__sfp_lock_acquire+0x8>)
 800a62e:	f7ff bc8e 	b.w	8009f4e <__retarget_lock_acquire_recursive>
 800a632:	bf00      	nop
 800a634:	20000459 	.word	0x20000459

0800a638 <__sfp_lock_release>:
 800a638:	4801      	ldr	r0, [pc, #4]	; (800a640 <__sfp_lock_release+0x8>)
 800a63a:	f7ff bc89 	b.w	8009f50 <__retarget_lock_release_recursive>
 800a63e:	bf00      	nop
 800a640:	20000459 	.word	0x20000459

0800a644 <__sinit_lock_acquire>:
 800a644:	4801      	ldr	r0, [pc, #4]	; (800a64c <__sinit_lock_acquire+0x8>)
 800a646:	f7ff bc82 	b.w	8009f4e <__retarget_lock_acquire_recursive>
 800a64a:	bf00      	nop
 800a64c:	2000045a 	.word	0x2000045a

0800a650 <__sinit_lock_release>:
 800a650:	4801      	ldr	r0, [pc, #4]	; (800a658 <__sinit_lock_release+0x8>)
 800a652:	f7ff bc7d 	b.w	8009f50 <__retarget_lock_release_recursive>
 800a656:	bf00      	nop
 800a658:	2000045a 	.word	0x2000045a

0800a65c <__sinit>:
 800a65c:	b510      	push	{r4, lr}
 800a65e:	4604      	mov	r4, r0
 800a660:	f7ff fff0 	bl	800a644 <__sinit_lock_acquire>
 800a664:	69a3      	ldr	r3, [r4, #24]
 800a666:	b11b      	cbz	r3, 800a670 <__sinit+0x14>
 800a668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a66c:	f7ff bff0 	b.w	800a650 <__sinit_lock_release>
 800a670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a674:	6523      	str	r3, [r4, #80]	; 0x50
 800a676:	4b13      	ldr	r3, [pc, #76]	; (800a6c4 <__sinit+0x68>)
 800a678:	4a13      	ldr	r2, [pc, #76]	; (800a6c8 <__sinit+0x6c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a67e:	42a3      	cmp	r3, r4
 800a680:	bf04      	itt	eq
 800a682:	2301      	moveq	r3, #1
 800a684:	61a3      	streq	r3, [r4, #24]
 800a686:	4620      	mov	r0, r4
 800a688:	f000 f820 	bl	800a6cc <__sfp>
 800a68c:	6060      	str	r0, [r4, #4]
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 f81c 	bl	800a6cc <__sfp>
 800a694:	60a0      	str	r0, [r4, #8]
 800a696:	4620      	mov	r0, r4
 800a698:	f000 f818 	bl	800a6cc <__sfp>
 800a69c:	2200      	movs	r2, #0
 800a69e:	60e0      	str	r0, [r4, #12]
 800a6a0:	2104      	movs	r1, #4
 800a6a2:	6860      	ldr	r0, [r4, #4]
 800a6a4:	f7ff ff82 	bl	800a5ac <std>
 800a6a8:	68a0      	ldr	r0, [r4, #8]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	2109      	movs	r1, #9
 800a6ae:	f7ff ff7d 	bl	800a5ac <std>
 800a6b2:	68e0      	ldr	r0, [r4, #12]
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	2112      	movs	r1, #18
 800a6b8:	f7ff ff78 	bl	800a5ac <std>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	61a3      	str	r3, [r4, #24]
 800a6c0:	e7d2      	b.n	800a668 <__sinit+0xc>
 800a6c2:	bf00      	nop
 800a6c4:	0800aaa0 	.word	0x0800aaa0
 800a6c8:	0800a5f5 	.word	0x0800a5f5

0800a6cc <__sfp>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	f7ff ffac 	bl	800a62c <__sfp_lock_acquire>
 800a6d4:	4b1e      	ldr	r3, [pc, #120]	; (800a750 <__sfp+0x84>)
 800a6d6:	681e      	ldr	r6, [r3, #0]
 800a6d8:	69b3      	ldr	r3, [r6, #24]
 800a6da:	b913      	cbnz	r3, 800a6e2 <__sfp+0x16>
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f7ff ffbd 	bl	800a65c <__sinit>
 800a6e2:	3648      	adds	r6, #72	; 0x48
 800a6e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	d503      	bpl.n	800a6f4 <__sfp+0x28>
 800a6ec:	6833      	ldr	r3, [r6, #0]
 800a6ee:	b30b      	cbz	r3, 800a734 <__sfp+0x68>
 800a6f0:	6836      	ldr	r6, [r6, #0]
 800a6f2:	e7f7      	b.n	800a6e4 <__sfp+0x18>
 800a6f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6f8:	b9d5      	cbnz	r5, 800a730 <__sfp+0x64>
 800a6fa:	4b16      	ldr	r3, [pc, #88]	; (800a754 <__sfp+0x88>)
 800a6fc:	60e3      	str	r3, [r4, #12]
 800a6fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a702:	6665      	str	r5, [r4, #100]	; 0x64
 800a704:	f7ff fc22 	bl	8009f4c <__retarget_lock_init_recursive>
 800a708:	f7ff ff96 	bl	800a638 <__sfp_lock_release>
 800a70c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a714:	6025      	str	r5, [r4, #0]
 800a716:	61a5      	str	r5, [r4, #24]
 800a718:	2208      	movs	r2, #8
 800a71a:	4629      	mov	r1, r5
 800a71c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a720:	f7fb fd2a 	bl	8006178 <memset>
 800a724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a72c:	4620      	mov	r0, r4
 800a72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a730:	3468      	adds	r4, #104	; 0x68
 800a732:	e7d9      	b.n	800a6e8 <__sfp+0x1c>
 800a734:	2104      	movs	r1, #4
 800a736:	4638      	mov	r0, r7
 800a738:	f7ff ff62 	bl	800a600 <__sfmoreglue>
 800a73c:	4604      	mov	r4, r0
 800a73e:	6030      	str	r0, [r6, #0]
 800a740:	2800      	cmp	r0, #0
 800a742:	d1d5      	bne.n	800a6f0 <__sfp+0x24>
 800a744:	f7ff ff78 	bl	800a638 <__sfp_lock_release>
 800a748:	230c      	movs	r3, #12
 800a74a:	603b      	str	r3, [r7, #0]
 800a74c:	e7ee      	b.n	800a72c <__sfp+0x60>
 800a74e:	bf00      	nop
 800a750:	0800aaa0 	.word	0x0800aaa0
 800a754:	ffff0001 	.word	0xffff0001

0800a758 <_fwalk_reent>:
 800a758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a75c:	4606      	mov	r6, r0
 800a75e:	4688      	mov	r8, r1
 800a760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a764:	2700      	movs	r7, #0
 800a766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a76a:	f1b9 0901 	subs.w	r9, r9, #1
 800a76e:	d505      	bpl.n	800a77c <_fwalk_reent+0x24>
 800a770:	6824      	ldr	r4, [r4, #0]
 800a772:	2c00      	cmp	r4, #0
 800a774:	d1f7      	bne.n	800a766 <_fwalk_reent+0xe>
 800a776:	4638      	mov	r0, r7
 800a778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a77c:	89ab      	ldrh	r3, [r5, #12]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d907      	bls.n	800a792 <_fwalk_reent+0x3a>
 800a782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a786:	3301      	adds	r3, #1
 800a788:	d003      	beq.n	800a792 <_fwalk_reent+0x3a>
 800a78a:	4629      	mov	r1, r5
 800a78c:	4630      	mov	r0, r6
 800a78e:	47c0      	blx	r8
 800a790:	4307      	orrs	r7, r0
 800a792:	3568      	adds	r5, #104	; 0x68
 800a794:	e7e9      	b.n	800a76a <_fwalk_reent+0x12>

0800a796 <__swhatbuf_r>:
 800a796:	b570      	push	{r4, r5, r6, lr}
 800a798:	460e      	mov	r6, r1
 800a79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79e:	2900      	cmp	r1, #0
 800a7a0:	b096      	sub	sp, #88	; 0x58
 800a7a2:	4614      	mov	r4, r2
 800a7a4:	461d      	mov	r5, r3
 800a7a6:	da08      	bge.n	800a7ba <__swhatbuf_r+0x24>
 800a7a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	602a      	str	r2, [r5, #0]
 800a7b0:	061a      	lsls	r2, r3, #24
 800a7b2:	d410      	bmi.n	800a7d6 <__swhatbuf_r+0x40>
 800a7b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7b8:	e00e      	b.n	800a7d8 <__swhatbuf_r+0x42>
 800a7ba:	466a      	mov	r2, sp
 800a7bc:	f000 f902 	bl	800a9c4 <_fstat_r>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	dbf1      	blt.n	800a7a8 <__swhatbuf_r+0x12>
 800a7c4:	9a01      	ldr	r2, [sp, #4]
 800a7c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7ce:	425a      	negs	r2, r3
 800a7d0:	415a      	adcs	r2, r3
 800a7d2:	602a      	str	r2, [r5, #0]
 800a7d4:	e7ee      	b.n	800a7b4 <__swhatbuf_r+0x1e>
 800a7d6:	2340      	movs	r3, #64	; 0x40
 800a7d8:	2000      	movs	r0, #0
 800a7da:	6023      	str	r3, [r4, #0]
 800a7dc:	b016      	add	sp, #88	; 0x58
 800a7de:	bd70      	pop	{r4, r5, r6, pc}

0800a7e0 <__smakebuf_r>:
 800a7e0:	898b      	ldrh	r3, [r1, #12]
 800a7e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7e4:	079d      	lsls	r5, r3, #30
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	d507      	bpl.n	800a7fc <__smakebuf_r+0x1c>
 800a7ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	6123      	str	r3, [r4, #16]
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	6163      	str	r3, [r4, #20]
 800a7f8:	b002      	add	sp, #8
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
 800a7fc:	ab01      	add	r3, sp, #4
 800a7fe:	466a      	mov	r2, sp
 800a800:	f7ff ffc9 	bl	800a796 <__swhatbuf_r>
 800a804:	9900      	ldr	r1, [sp, #0]
 800a806:	4605      	mov	r5, r0
 800a808:	4630      	mov	r0, r6
 800a80a:	f7fb fd29 	bl	8006260 <_malloc_r>
 800a80e:	b948      	cbnz	r0, 800a824 <__smakebuf_r+0x44>
 800a810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a814:	059a      	lsls	r2, r3, #22
 800a816:	d4ef      	bmi.n	800a7f8 <__smakebuf_r+0x18>
 800a818:	f023 0303 	bic.w	r3, r3, #3
 800a81c:	f043 0302 	orr.w	r3, r3, #2
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	e7e3      	b.n	800a7ec <__smakebuf_r+0xc>
 800a824:	4b0d      	ldr	r3, [pc, #52]	; (800a85c <__smakebuf_r+0x7c>)
 800a826:	62b3      	str	r3, [r6, #40]	; 0x28
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	6020      	str	r0, [r4, #0]
 800a82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a830:	81a3      	strh	r3, [r4, #12]
 800a832:	9b00      	ldr	r3, [sp, #0]
 800a834:	6163      	str	r3, [r4, #20]
 800a836:	9b01      	ldr	r3, [sp, #4]
 800a838:	6120      	str	r0, [r4, #16]
 800a83a:	b15b      	cbz	r3, 800a854 <__smakebuf_r+0x74>
 800a83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a840:	4630      	mov	r0, r6
 800a842:	f000 f8d1 	bl	800a9e8 <_isatty_r>
 800a846:	b128      	cbz	r0, 800a854 <__smakebuf_r+0x74>
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	f023 0303 	bic.w	r3, r3, #3
 800a84e:	f043 0301 	orr.w	r3, r3, #1
 800a852:	81a3      	strh	r3, [r4, #12]
 800a854:	89a0      	ldrh	r0, [r4, #12]
 800a856:	4305      	orrs	r5, r0
 800a858:	81a5      	strh	r5, [r4, #12]
 800a85a:	e7cd      	b.n	800a7f8 <__smakebuf_r+0x18>
 800a85c:	0800a5f5 	.word	0x0800a5f5

0800a860 <_malloc_usable_size_r>:
 800a860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a864:	1f18      	subs	r0, r3, #4
 800a866:	2b00      	cmp	r3, #0
 800a868:	bfbc      	itt	lt
 800a86a:	580b      	ldrlt	r3, [r1, r0]
 800a86c:	18c0      	addlt	r0, r0, r3
 800a86e:	4770      	bx	lr

0800a870 <_raise_r>:
 800a870:	291f      	cmp	r1, #31
 800a872:	b538      	push	{r3, r4, r5, lr}
 800a874:	4604      	mov	r4, r0
 800a876:	460d      	mov	r5, r1
 800a878:	d904      	bls.n	800a884 <_raise_r+0x14>
 800a87a:	2316      	movs	r3, #22
 800a87c:	6003      	str	r3, [r0, #0]
 800a87e:	f04f 30ff 	mov.w	r0, #4294967295
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a886:	b112      	cbz	r2, 800a88e <_raise_r+0x1e>
 800a888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a88c:	b94b      	cbnz	r3, 800a8a2 <_raise_r+0x32>
 800a88e:	4620      	mov	r0, r4
 800a890:	f000 f830 	bl	800a8f4 <_getpid_r>
 800a894:	462a      	mov	r2, r5
 800a896:	4601      	mov	r1, r0
 800a898:	4620      	mov	r0, r4
 800a89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a89e:	f000 b817 	b.w	800a8d0 <_kill_r>
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d00a      	beq.n	800a8bc <_raise_r+0x4c>
 800a8a6:	1c59      	adds	r1, r3, #1
 800a8a8:	d103      	bne.n	800a8b2 <_raise_r+0x42>
 800a8aa:	2316      	movs	r3, #22
 800a8ac:	6003      	str	r3, [r0, #0]
 800a8ae:	2001      	movs	r0, #1
 800a8b0:	e7e7      	b.n	800a882 <_raise_r+0x12>
 800a8b2:	2400      	movs	r4, #0
 800a8b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	4798      	blx	r3
 800a8bc:	2000      	movs	r0, #0
 800a8be:	e7e0      	b.n	800a882 <_raise_r+0x12>

0800a8c0 <raise>:
 800a8c0:	4b02      	ldr	r3, [pc, #8]	; (800a8cc <raise+0xc>)
 800a8c2:	4601      	mov	r1, r0
 800a8c4:	6818      	ldr	r0, [r3, #0]
 800a8c6:	f7ff bfd3 	b.w	800a870 <_raise_r>
 800a8ca:	bf00      	nop
 800a8cc:	2000000c 	.word	0x2000000c

0800a8d0 <_kill_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d07      	ldr	r5, [pc, #28]	; (800a8f0 <_kill_r+0x20>)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	4611      	mov	r1, r2
 800a8dc:	602b      	str	r3, [r5, #0]
 800a8de:	f7f6 ff9f 	bl	8001820 <_kill>
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	d102      	bne.n	800a8ec <_kill_r+0x1c>
 800a8e6:	682b      	ldr	r3, [r5, #0]
 800a8e8:	b103      	cbz	r3, 800a8ec <_kill_r+0x1c>
 800a8ea:	6023      	str	r3, [r4, #0]
 800a8ec:	bd38      	pop	{r3, r4, r5, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000454 	.word	0x20000454

0800a8f4 <_getpid_r>:
 800a8f4:	f7f6 bf8c 	b.w	8001810 <_getpid>

0800a8f8 <__sread>:
 800a8f8:	b510      	push	{r4, lr}
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a900:	f000 f894 	bl	800aa2c <_read_r>
 800a904:	2800      	cmp	r0, #0
 800a906:	bfab      	itete	ge
 800a908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a90a:	89a3      	ldrhlt	r3, [r4, #12]
 800a90c:	181b      	addge	r3, r3, r0
 800a90e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a912:	bfac      	ite	ge
 800a914:	6563      	strge	r3, [r4, #84]	; 0x54
 800a916:	81a3      	strhlt	r3, [r4, #12]
 800a918:	bd10      	pop	{r4, pc}

0800a91a <__swrite>:
 800a91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91e:	461f      	mov	r7, r3
 800a920:	898b      	ldrh	r3, [r1, #12]
 800a922:	05db      	lsls	r3, r3, #23
 800a924:	4605      	mov	r5, r0
 800a926:	460c      	mov	r4, r1
 800a928:	4616      	mov	r6, r2
 800a92a:	d505      	bpl.n	800a938 <__swrite+0x1e>
 800a92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a930:	2302      	movs	r3, #2
 800a932:	2200      	movs	r2, #0
 800a934:	f000 f868 	bl	800aa08 <_lseek_r>
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a93e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a942:	81a3      	strh	r3, [r4, #12]
 800a944:	4632      	mov	r2, r6
 800a946:	463b      	mov	r3, r7
 800a948:	4628      	mov	r0, r5
 800a94a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a94e:	f000 b817 	b.w	800a980 <_write_r>

0800a952 <__sseek>:
 800a952:	b510      	push	{r4, lr}
 800a954:	460c      	mov	r4, r1
 800a956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a95a:	f000 f855 	bl	800aa08 <_lseek_r>
 800a95e:	1c43      	adds	r3, r0, #1
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	bf15      	itete	ne
 800a964:	6560      	strne	r0, [r4, #84]	; 0x54
 800a966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a96a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a96e:	81a3      	strheq	r3, [r4, #12]
 800a970:	bf18      	it	ne
 800a972:	81a3      	strhne	r3, [r4, #12]
 800a974:	bd10      	pop	{r4, pc}

0800a976 <__sclose>:
 800a976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97a:	f000 b813 	b.w	800a9a4 <_close_r>
	...

0800a980 <_write_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	4d07      	ldr	r5, [pc, #28]	; (800a9a0 <_write_r+0x20>)
 800a984:	4604      	mov	r4, r0
 800a986:	4608      	mov	r0, r1
 800a988:	4611      	mov	r1, r2
 800a98a:	2200      	movs	r2, #0
 800a98c:	602a      	str	r2, [r5, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	f7f6 ff7d 	bl	800188e <_write>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_write_r+0x1e>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_write_r+0x1e>
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	20000454 	.word	0x20000454

0800a9a4 <_close_r>:
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	4d06      	ldr	r5, [pc, #24]	; (800a9c0 <_close_r+0x1c>)
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	4608      	mov	r0, r1
 800a9ae:	602b      	str	r3, [r5, #0]
 800a9b0:	f7f6 ff89 	bl	80018c6 <_close>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	d102      	bne.n	800a9be <_close_r+0x1a>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	b103      	cbz	r3, 800a9be <_close_r+0x1a>
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	20000454 	.word	0x20000454

0800a9c4 <_fstat_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4d07      	ldr	r5, [pc, #28]	; (800a9e4 <_fstat_r+0x20>)
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	602b      	str	r3, [r5, #0]
 800a9d2:	f7f6 ff84 	bl	80018de <_fstat>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	d102      	bne.n	800a9e0 <_fstat_r+0x1c>
 800a9da:	682b      	ldr	r3, [r5, #0]
 800a9dc:	b103      	cbz	r3, 800a9e0 <_fstat_r+0x1c>
 800a9de:	6023      	str	r3, [r4, #0]
 800a9e0:	bd38      	pop	{r3, r4, r5, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20000454 	.word	0x20000454

0800a9e8 <_isatty_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	4d06      	ldr	r5, [pc, #24]	; (800aa04 <_isatty_r+0x1c>)
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	4608      	mov	r0, r1
 800a9f2:	602b      	str	r3, [r5, #0]
 800a9f4:	f7f6 ff83 	bl	80018fe <_isatty>
 800a9f8:	1c43      	adds	r3, r0, #1
 800a9fa:	d102      	bne.n	800aa02 <_isatty_r+0x1a>
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	b103      	cbz	r3, 800aa02 <_isatty_r+0x1a>
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	bd38      	pop	{r3, r4, r5, pc}
 800aa04:	20000454 	.word	0x20000454

0800aa08 <_lseek_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4d07      	ldr	r5, [pc, #28]	; (800aa28 <_lseek_r+0x20>)
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	4608      	mov	r0, r1
 800aa10:	4611      	mov	r1, r2
 800aa12:	2200      	movs	r2, #0
 800aa14:	602a      	str	r2, [r5, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	f7f6 ff7c 	bl	8001914 <_lseek>
 800aa1c:	1c43      	adds	r3, r0, #1
 800aa1e:	d102      	bne.n	800aa26 <_lseek_r+0x1e>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	b103      	cbz	r3, 800aa26 <_lseek_r+0x1e>
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	bd38      	pop	{r3, r4, r5, pc}
 800aa28:	20000454 	.word	0x20000454

0800aa2c <_read_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4d07      	ldr	r5, [pc, #28]	; (800aa4c <_read_r+0x20>)
 800aa30:	4604      	mov	r4, r0
 800aa32:	4608      	mov	r0, r1
 800aa34:	4611      	mov	r1, r2
 800aa36:	2200      	movs	r2, #0
 800aa38:	602a      	str	r2, [r5, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	f7f6 ff0a 	bl	8001854 <_read>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	d102      	bne.n	800aa4a <_read_r+0x1e>
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	b103      	cbz	r3, 800aa4a <_read_r+0x1e>
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	20000454 	.word	0x20000454

0800aa50 <_init>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	bf00      	nop
 800aa54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa56:	bc08      	pop	{r3}
 800aa58:	469e      	mov	lr, r3
 800aa5a:	4770      	bx	lr

0800aa5c <_fini>:
 800aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5e:	bf00      	nop
 800aa60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa62:	bc08      	pop	{r3}
 800aa64:	469e      	mov	lr, r3
 800aa66:	4770      	bx	lr
