
motor_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007284  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007448  08007448  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007448  08007448  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007448  08007448  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007448  08007448  00017448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800744c  0800744c  0001744c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000074  080074c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080074c4  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012266  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b45  00000000  00000000  0003230a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00034e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00035d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dc1  00000000  00000000  00036b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148c2  00000000  00000000  00058911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7862  00000000  00000000  0006d1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134a35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fdc  00000000  00000000  00134a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007400 	.word	0x08007400

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08007400 	.word	0x08007400

080001d4 <new_closed_loop_control>:
#include "closed_loop_control.h"

ClosedLoopControl *new_closed_loop_control(float _kP, float _kI, float _kD, float _kF) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
 80001da:	ed87 0a03 	vstr	s0, [r7, #12]
 80001de:	edc7 0a02 	vstr	s1, [r7, #8]
 80001e2:	ed87 1a01 	vstr	s2, [r7, #4]
 80001e6:	edc7 1a00 	vstr	s3, [r7]
	ClosedLoopControl *control = (ClosedLoopControl *) malloc(sizeof(ClosedLoopControl));
 80001ea:	2020      	movs	r0, #32
 80001ec:	f007 f846 	bl	800727c <malloc>
 80001f0:	4603      	mov	r3, r0
 80001f2:	617b      	str	r3, [r7, #20]

    control->kP = _kP;
 80001f4:	697b      	ldr	r3, [r7, #20]
 80001f6:	68fa      	ldr	r2, [r7, #12]
 80001f8:	601a      	str	r2, [r3, #0]
    control->kI = _kI;
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	68ba      	ldr	r2, [r7, #8]
 80001fe:	605a      	str	r2, [r3, #4]
    control->kD = _kD;
 8000200:	697b      	ldr	r3, [r7, #20]
 8000202:	687a      	ldr	r2, [r7, #4]
 8000204:	609a      	str	r2, [r3, #8]
    control->kF = _kF;
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	683a      	ldr	r2, [r7, #0]
 800020a:	60da      	str	r2, [r3, #12]

    control->flag = 1;
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	2201      	movs	r2, #1
 8000210:	771a      	strb	r2, [r3, #28]
    control->last_error = 0.0;
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	f04f 0200 	mov.w	r2, #0
 8000218:	615a      	str	r2, [r3, #20]
    control->cum_integ = 0.0;
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	f04f 0200 	mov.w	r2, #0
 8000220:	619a      	str	r2, [r3, #24]

    return control;
 8000222:	697b      	ldr	r3, [r7, #20]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3718      	adds	r7, #24
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <calculate_pid>:

float calculate_pid(ClosedLoopControl *control, float target, float current) {
 800022c:	b580      	push	{r7, lr}
 800022e:	ed2d 8b02 	vpush	{d8}
 8000232:	b088      	sub	sp, #32
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	ed87 0a02 	vstr	s0, [r7, #8]
 800023c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (control->flag) {
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	7f1b      	ldrb	r3, [r3, #28]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d00b      	beq.n	8000260 <calculate_pid+0x34>
        control->last_error = target - current;
 8000248:	ed97 7a02 	vldr	s14, [r7, #8]
 800024c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	edc3 7a05 	vstr	s15, [r3, #20]
        control->flag = 0;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2200      	movs	r2, #0
 800025e:	771a      	strb	r2, [r3, #28]
    }

    float error = target - current;
 8000260:	ed97 7a02 	vldr	s14, [r7, #8]
 8000264:	edd7 7a01 	vldr	s15, [r7, #4]
 8000268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800026c:	edc7 7a07 	vstr	s15, [r7, #28]

    control->cum_integ += error * DT;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	ed93 7a06 	vldr	s14, [r3, #24]
 8000276:	edd7 7a07 	vldr	s15, [r7, #28]
 800027a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8000314 <calculate_pid+0xe8>
 800027e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	edc3 7a06 	vstr	s15, [r3, #24]
    float diff = (error - control->last_error) / DT;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000292:	ed97 7a07 	vldr	s14, [r7, #28]
 8000296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800029a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000314 <calculate_pid+0xe8>
 800029e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002a2:	edc7 7a06 	vstr	s15, [r7, #24]

    float output = control->kP * error + control->kI * control->cum_integ + control->kD * diff + signum(error) * control->kF;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	ed93 7a00 	vldr	s14, [r3]
 80002ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80002b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80002c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80002c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80002ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80002d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80002d6:	ee37 8a27 	vadd.f32	s16, s14, s15
 80002da:	ed97 0a07 	vldr	s0, [r7, #28]
 80002de:	f000 f81b 	bl	8000318 <signum>
 80002e2:	eeb0 7a40 	vmov.f32	s14, s0
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80002ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002f0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80002f4:	edc7 7a05 	vstr	s15, [r7, #20]

    control->last_error = error;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	69fa      	ldr	r2, [r7, #28]
 80002fc:	615a      	str	r2, [r3, #20]
    return output;
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	ee07 3a90 	vmov	s15, r3
}
 8000304:	eeb0 0a67 	vmov.f32	s0, s15
 8000308:	3720      	adds	r7, #32
 800030a:	46bd      	mov	sp, r7
 800030c:	ecbd 8b02 	vpop	{d8}
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	3a83126f 	.word	0x3a83126f

08000318 <signum>:

float signum(float num) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (num < 0) {
 8000322:	edd7 7a01 	vldr	s15, [r7, #4]
 8000326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032e:	d501      	bpl.n	8000334 <signum+0x1c>
        return -1.0;
 8000330:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <signum+0x48>)
 8000332:	e00b      	b.n	800034c <signum+0x34>
    }
    if (num > 0) {
 8000334:	edd7 7a01 	vldr	s15, [r7, #4]
 8000338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800033c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000340:	dd02      	ble.n	8000348 <signum+0x30>
        return 1.0;
 8000342:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000346:	e001      	b.n	800034c <signum+0x34>
    }
    return 0.0;
 8000348:	f04f 0300 	mov.w	r3, #0
}
 800034c:	ee07 3a90 	vmov	s15, r3
 8000350:	eeb0 0a67 	vmov.f32	s0, s15
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	bf800000 	.word	0xbf800000

08000364 <new_hbridge>:

#include "hbridge.h"


HBridge *new_hbridge(TIM_HandleTypeDef *_timer, uint32_t _channel, uint32_t *_out_register, uint32_t *_ARR, Pin *fwd,
                     Pin *bwd) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	603b      	str	r3, [r7, #0]
    HBridge *hbr = (HBridge *) malloc(sizeof(HBridge));
 8000372:	201c      	movs	r0, #28
 8000374:	f006 ff82 	bl	800727c <malloc>
 8000378:	4603      	mov	r3, r0
 800037a:	617b      	str	r3, [r7, #20]
    hbr->timer = _timer;
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	601a      	str	r2, [r3, #0]
    hbr->channel = _channel;
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	68ba      	ldr	r2, [r7, #8]
 8000386:	605a      	str	r2, [r3, #4]
    hbr->out_register = _out_register;
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	609a      	str	r2, [r3, #8]
    hbr->ARR = _ARR;
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	683a      	ldr	r2, [r7, #0]
 8000392:	60da      	str	r2, [r3, #12]
    hbr->forward_pin = fwd;
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	6a3a      	ldr	r2, [r7, #32]
 8000398:	611a      	str	r2, [r3, #16]
    hbr->backward_pin = bwd;
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800039e:	615a      	str	r2, [r3, #20]
    hbr->target_duty_cycle = 0;
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	2200      	movs	r2, #0
 80003a4:	619a      	str	r2, [r3, #24]

    return hbr;
 80003a6:	697b      	ldr	r3, [r7, #20]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <init_hbridge>:

void init_hbridge(HBridge *hbridge, float duty_cycle, bool direction_is_forward) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80003bc:	460b      	mov	r3, r1
 80003be:	71fb      	strb	r3, [r7, #7]
    HAL_TIM_PWM_Start(hbridge->timer, hbridge->channel);
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	4619      	mov	r1, r3
 80003ca:	4610      	mov	r0, r2
 80003cc:	f005 fc32 	bl	8005c34 <HAL_TIM_PWM_Start>
    change_hbridge_pwm(hbridge, duty_cycle);
 80003d0:	ed97 0a02 	vldr	s0, [r7, #8]
 80003d4:	68f8      	ldr	r0, [r7, #12]
 80003d6:	f000 f809 	bl	80003ec <change_hbridge_pwm>
    change_hbridge_dir_val(hbridge, direction_is_forward);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4619      	mov	r1, r3
 80003de:	68f8      	ldr	r0, [r7, #12]
 80003e0:	f000 f83e 	bl	8000460 <change_hbridge_dir_val>
}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <change_hbridge_pwm>:

void change_hbridge_pwm(HBridge *hbridge, float duty_cycle) {
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	ed87 0a00 	vstr	s0, [r7]

    // validate input duty cycle
    if (duty_cycle < 0.0) {
 80003f8:	edd7 7a00 	vldr	s15, [r7]
 80003fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000404:	d503      	bpl.n	800040e <change_hbridge_pwm+0x22>
        duty_cycle = 0.0;
 8000406:	f04f 0300 	mov.w	r3, #0
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	e00b      	b.n	8000426 <change_hbridge_pwm+0x3a>
    } else if (duty_cycle > 1.0) {
 800040e:	edd7 7a00 	vldr	s15, [r7]
 8000412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041e:	dd02      	ble.n	8000426 <change_hbridge_pwm+0x3a>
        duty_cycle = 1.0;
 8000420:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000424:	603b      	str	r3, [r7, #0]
    }

    hbridge->target_duty_cycle = duty_cycle * (float) (*hbridge->ARR+1);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	ee07 3a90 	vmov	s15, r3
 8000432:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000436:	edd7 7a00 	vldr	s15, [r7]
 800043a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800043e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000442:	ee17 2a90 	vmov	r2, s15
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	619a      	str	r2, [r3, #24]

    *(hbridge->out_register) = hbridge->target_duty_cycle;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	6992      	ldr	r2, [r2, #24]
 8000452:	601a      	str	r2, [r3, #0]

}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <change_hbridge_dir_val>:

void change_hbridge_dir_val(HBridge *hbridge, bool val) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	460b      	mov	r3, r1
 800046a:	70fb      	strb	r3, [r7, #3]
    if (val) {
 800046c:	78fb      	ldrb	r3, [r7, #3]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d00c      	beq.n	800048c <change_hbridge_dir_val+0x2c>
		write_pin_value(hbridge->backward_pin, 0);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	2100      	movs	r1, #0
 8000478:	4618      	mov	r0, r3
 800047a:	f001 fb34 	bl	8001ae6 <write_pin_value>
    	write_pin_value(hbridge->forward_pin, 1);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	691b      	ldr	r3, [r3, #16]
 8000482:	2101      	movs	r1, #1
 8000484:	4618      	mov	r0, r3
 8000486:	f001 fb2e 	bl	8001ae6 <write_pin_value>
    } else {
    	write_pin_value(hbridge->forward_pin, 0);
    	write_pin_value(hbridge->backward_pin, 1);
    }

}
 800048a:	e00b      	b.n	80004a4 <change_hbridge_dir_val+0x44>
    	write_pin_value(hbridge->forward_pin, 0);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fb27 	bl	8001ae6 <write_pin_value>
    	write_pin_value(hbridge->backward_pin, 1);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	2101      	movs	r1, #1
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 fb21 	bl	8001ae6 <write_pin_value>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <new_i2c_bus>:
};

// timeout ~half a second, prime number to avoid hitting unit testing reset bug again
int WATCHDOG_TIMEOUT = 443;

I2CBus *new_i2c_bus(I2C_HandleTypeDef *_i2c_bus_handle) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
    I2CBus *bus = (I2CBus *) malloc(sizeof(I2CBus));
 80004b4:	2028      	movs	r0, #40	; 0x28
 80004b6:	f006 fee1 	bl	800727c <malloc>
 80004ba:	4603      	mov	r3, r0
 80004bc:	60fb      	str	r3, [r7, #12]
    bus->i2c_bus_handle = _i2c_bus_handle;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	625a      	str	r2, [r3, #36]	; 0x24
    return bus;
 80004c4:	68fb      	ldr	r3, [r7, #12]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <CH_num_receive>:

uint8_t CH_num_receive(I2CBus *i2c_bus) {
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    switch (i2c_bus->operation) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2bff      	cmp	r3, #255	; 0xff
 80004de:	f000 80d2 	beq.w	8000686 <CH_num_receive+0x1b6>
 80004e2:	2bff      	cmp	r3, #255	; 0xff
 80004e4:	f300 80d1 	bgt.w	800068a <CH_num_receive+0x1ba>
 80004e8:	2b7f      	cmp	r3, #127	; 0x7f
 80004ea:	f000 80ca 	beq.w	8000682 <CH_num_receive+0x1b2>
 80004ee:	2b7f      	cmp	r3, #127	; 0x7f
 80004f0:	f300 80cb 	bgt.w	800068a <CH_num_receive+0x1ba>
 80004f4:	2b6f      	cmp	r3, #111	; 0x6f
 80004f6:	f000 80c2 	beq.w	800067e <CH_num_receive+0x1ae>
 80004fa:	2b6f      	cmp	r3, #111	; 0x6f
 80004fc:	f300 80c5 	bgt.w	800068a <CH_num_receive+0x1ba>
 8000500:	2b50      	cmp	r3, #80	; 0x50
 8000502:	f300 80ab 	bgt.w	800065c <CH_num_receive+0x18c>
 8000506:	2b00      	cmp	r3, #0
 8000508:	f2c0 80bf 	blt.w	800068a <CH_num_receive+0x1ba>
 800050c:	2b50      	cmp	r3, #80	; 0x50
 800050e:	f200 80bc 	bhi.w	800068a <CH_num_receive+0x1ba>
 8000512:	a201      	add	r2, pc, #4	; (adr r2, 8000518 <CH_num_receive+0x48>)
 8000514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000518:	08000663 	.word	0x08000663
 800051c:	0800068b 	.word	0x0800068b
 8000520:	0800068b 	.word	0x0800068b
 8000524:	0800068b 	.word	0x0800068b
 8000528:	0800068b 	.word	0x0800068b
 800052c:	0800068b 	.word	0x0800068b
 8000530:	0800068b 	.word	0x0800068b
 8000534:	0800068b 	.word	0x0800068b
 8000538:	0800068b 	.word	0x0800068b
 800053c:	0800068b 	.word	0x0800068b
 8000540:	0800068b 	.word	0x0800068b
 8000544:	0800068b 	.word	0x0800068b
 8000548:	0800068b 	.word	0x0800068b
 800054c:	0800068b 	.word	0x0800068b
 8000550:	0800068b 	.word	0x0800068b
 8000554:	08000663 	.word	0x08000663
 8000558:	08000667 	.word	0x08000667
 800055c:	0800068b 	.word	0x0800068b
 8000560:	0800068b 	.word	0x0800068b
 8000564:	0800068b 	.word	0x0800068b
 8000568:	0800068b 	.word	0x0800068b
 800056c:	0800068b 	.word	0x0800068b
 8000570:	0800068b 	.word	0x0800068b
 8000574:	0800068b 	.word	0x0800068b
 8000578:	0800068b 	.word	0x0800068b
 800057c:	0800068b 	.word	0x0800068b
 8000580:	0800068b 	.word	0x0800068b
 8000584:	0800068b 	.word	0x0800068b
 8000588:	0800068b 	.word	0x0800068b
 800058c:	0800068b 	.word	0x0800068b
 8000590:	0800068b 	.word	0x0800068b
 8000594:	08000667 	.word	0x08000667
 8000598:	0800066b 	.word	0x0800066b
 800059c:	0800068b 	.word	0x0800068b
 80005a0:	0800068b 	.word	0x0800068b
 80005a4:	0800068b 	.word	0x0800068b
 80005a8:	0800068b 	.word	0x0800068b
 80005ac:	0800068b 	.word	0x0800068b
 80005b0:	0800068b 	.word	0x0800068b
 80005b4:	0800068b 	.word	0x0800068b
 80005b8:	0800068b 	.word	0x0800068b
 80005bc:	0800068b 	.word	0x0800068b
 80005c0:	0800068b 	.word	0x0800068b
 80005c4:	0800068b 	.word	0x0800068b
 80005c8:	0800068b 	.word	0x0800068b
 80005cc:	0800068b 	.word	0x0800068b
 80005d0:	0800068b 	.word	0x0800068b
 80005d4:	0800066b 	.word	0x0800066b
 80005d8:	0800066f 	.word	0x0800066f
 80005dc:	0800068b 	.word	0x0800068b
 80005e0:	0800068b 	.word	0x0800068b
 80005e4:	0800068b 	.word	0x0800068b
 80005e8:	0800068b 	.word	0x0800068b
 80005ec:	0800068b 	.word	0x0800068b
 80005f0:	0800068b 	.word	0x0800068b
 80005f4:	0800068b 	.word	0x0800068b
 80005f8:	0800068b 	.word	0x0800068b
 80005fc:	0800068b 	.word	0x0800068b
 8000600:	0800068b 	.word	0x0800068b
 8000604:	0800068b 	.word	0x0800068b
 8000608:	0800068b 	.word	0x0800068b
 800060c:	0800068b 	.word	0x0800068b
 8000610:	0800068b 	.word	0x0800068b
 8000614:	08000673 	.word	0x08000673
 8000618:	08000677 	.word	0x08000677
 800061c:	0800068b 	.word	0x0800068b
 8000620:	0800068b 	.word	0x0800068b
 8000624:	0800068b 	.word	0x0800068b
 8000628:	0800068b 	.word	0x0800068b
 800062c:	0800068b 	.word	0x0800068b
 8000630:	0800068b 	.word	0x0800068b
 8000634:	0800068b 	.word	0x0800068b
 8000638:	0800068b 	.word	0x0800068b
 800063c:	0800068b 	.word	0x0800068b
 8000640:	0800068b 	.word	0x0800068b
 8000644:	0800068b 	.word	0x0800068b
 8000648:	0800068b 	.word	0x0800068b
 800064c:	0800068b 	.word	0x0800068b
 8000650:	0800068b 	.word	0x0800068b
 8000654:	0800067b 	.word	0x0800067b
 8000658:	0800067f 	.word	0x0800067f
 800065c:	2b60      	cmp	r3, #96	; 0x60
 800065e:	d00e      	beq.n	800067e <CH_num_receive+0x1ae>
 8000660:	e013      	b.n	800068a <CH_num_receive+0x1ba>
        case OFF:
        case ON:
            return 0;
 8000662:	2300      	movs	r3, #0
 8000664:	e012      	b.n	800068c <CH_num_receive+0x1bc>
        case OPEN:
        case OPEN_PLUS:
            return 4;
 8000666:	2304      	movs	r3, #4
 8000668:	e010      	b.n	800068c <CH_num_receive+0x1bc>
        case CLOSED:
        case CLOSED_PLUS:
            return 8;
 800066a:	2308      	movs	r3, #8
 800066c:	e00e      	b.n	800068c <CH_num_receive+0x1bc>
        case CONFIG_PWM:
            return 2;
 800066e:	2302      	movs	r3, #2
 8000670:	e00c      	b.n	800068c <CH_num_receive+0x1bc>
        case CONFIG_K:
            return 12;
 8000672:	230c      	movs	r3, #12
 8000674:	e00a      	b.n	800068c <CH_num_receive+0x1bc>
        case QUAD_ENC:
            return 0;
 8000676:	2300      	movs	r3, #0
 8000678:	e008      	b.n	800068c <CH_num_receive+0x1bc>
        case ADJUST:
            return 4;
 800067a:	2304      	movs	r3, #4
 800067c:	e006      	b.n	800068c <CH_num_receive+0x1bc>
        case ABS_ENC:
        case LIMIT:
        case CALIBRATED:
            return 0;
 800067e:	2300      	movs	r3, #0
 8000680:	e004      	b.n	800068c <CH_num_receive+0x1bc>
        case LIMIT_ON:
            return 1;
 8000682:	2301      	movs	r3, #1
 8000684:	e002      	b.n	800068c <CH_num_receive+0x1bc>
        case UNKNOWN:
            return 0;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <CH_num_receive+0x1bc>
    }
    return 0;
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <CH_num_send>:

uint8_t CH_num_send(I2CBus *i2c_bus) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    switch (i2c_bus->operation) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2bff      	cmp	r3, #255	; 0xff
 80006a6:	f000 80d2 	beq.w	800084e <CH_num_send+0x1b6>
 80006aa:	2bff      	cmp	r3, #255	; 0xff
 80006ac:	f300 80d1 	bgt.w	8000852 <CH_num_send+0x1ba>
 80006b0:	2b7f      	cmp	r3, #127	; 0x7f
 80006b2:	f000 80cc 	beq.w	800084e <CH_num_send+0x1b6>
 80006b6:	2b7f      	cmp	r3, #127	; 0x7f
 80006b8:	f300 80cb 	bgt.w	8000852 <CH_num_send+0x1ba>
 80006bc:	2b6f      	cmp	r3, #111	; 0x6f
 80006be:	f000 80c4 	beq.w	800084a <CH_num_send+0x1b2>
 80006c2:	2b6f      	cmp	r3, #111	; 0x6f
 80006c4:	f300 80c5 	bgt.w	8000852 <CH_num_send+0x1ba>
 80006c8:	2b50      	cmp	r3, #80	; 0x50
 80006ca:	f300 80ab 	bgt.w	8000824 <CH_num_send+0x18c>
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f2c0 80bf 	blt.w	8000852 <CH_num_send+0x1ba>
 80006d4:	2b50      	cmp	r3, #80	; 0x50
 80006d6:	f200 80bc 	bhi.w	8000852 <CH_num_send+0x1ba>
 80006da:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <CH_num_send+0x48>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	0800082b 	.word	0x0800082b
 80006e4:	08000853 	.word	0x08000853
 80006e8:	08000853 	.word	0x08000853
 80006ec:	08000853 	.word	0x08000853
 80006f0:	08000853 	.word	0x08000853
 80006f4:	08000853 	.word	0x08000853
 80006f8:	08000853 	.word	0x08000853
 80006fc:	08000853 	.word	0x08000853
 8000700:	08000853 	.word	0x08000853
 8000704:	08000853 	.word	0x08000853
 8000708:	08000853 	.word	0x08000853
 800070c:	08000853 	.word	0x08000853
 8000710:	08000853 	.word	0x08000853
 8000714:	08000853 	.word	0x08000853
 8000718:	08000853 	.word	0x08000853
 800071c:	0800082b 	.word	0x0800082b
 8000720:	0800082b 	.word	0x0800082b
 8000724:	08000853 	.word	0x08000853
 8000728:	08000853 	.word	0x08000853
 800072c:	08000853 	.word	0x08000853
 8000730:	08000853 	.word	0x08000853
 8000734:	08000853 	.word	0x08000853
 8000738:	08000853 	.word	0x08000853
 800073c:	08000853 	.word	0x08000853
 8000740:	08000853 	.word	0x08000853
 8000744:	08000853 	.word	0x08000853
 8000748:	08000853 	.word	0x08000853
 800074c:	08000853 	.word	0x08000853
 8000750:	08000853 	.word	0x08000853
 8000754:	08000853 	.word	0x08000853
 8000758:	08000853 	.word	0x08000853
 800075c:	0800082f 	.word	0x0800082f
 8000760:	08000833 	.word	0x08000833
 8000764:	08000853 	.word	0x08000853
 8000768:	08000853 	.word	0x08000853
 800076c:	08000853 	.word	0x08000853
 8000770:	08000853 	.word	0x08000853
 8000774:	08000853 	.word	0x08000853
 8000778:	08000853 	.word	0x08000853
 800077c:	08000853 	.word	0x08000853
 8000780:	08000853 	.word	0x08000853
 8000784:	08000853 	.word	0x08000853
 8000788:	08000853 	.word	0x08000853
 800078c:	08000853 	.word	0x08000853
 8000790:	08000853 	.word	0x08000853
 8000794:	08000853 	.word	0x08000853
 8000798:	08000853 	.word	0x08000853
 800079c:	08000837 	.word	0x08000837
 80007a0:	0800083b 	.word	0x0800083b
 80007a4:	08000853 	.word	0x08000853
 80007a8:	08000853 	.word	0x08000853
 80007ac:	08000853 	.word	0x08000853
 80007b0:	08000853 	.word	0x08000853
 80007b4:	08000853 	.word	0x08000853
 80007b8:	08000853 	.word	0x08000853
 80007bc:	08000853 	.word	0x08000853
 80007c0:	08000853 	.word	0x08000853
 80007c4:	08000853 	.word	0x08000853
 80007c8:	08000853 	.word	0x08000853
 80007cc:	08000853 	.word	0x08000853
 80007d0:	08000853 	.word	0x08000853
 80007d4:	08000853 	.word	0x08000853
 80007d8:	08000853 	.word	0x08000853
 80007dc:	0800083b 	.word	0x0800083b
 80007e0:	0800083f 	.word	0x0800083f
 80007e4:	08000853 	.word	0x08000853
 80007e8:	08000853 	.word	0x08000853
 80007ec:	08000853 	.word	0x08000853
 80007f0:	08000853 	.word	0x08000853
 80007f4:	08000853 	.word	0x08000853
 80007f8:	08000853 	.word	0x08000853
 80007fc:	08000853 	.word	0x08000853
 8000800:	08000853 	.word	0x08000853
 8000804:	08000853 	.word	0x08000853
 8000808:	08000853 	.word	0x08000853
 800080c:	08000853 	.word	0x08000853
 8000810:	08000853 	.word	0x08000853
 8000814:	08000853 	.word	0x08000853
 8000818:	08000853 	.word	0x08000853
 800081c:	08000843 	.word	0x08000843
 8000820:	08000847 	.word	0x08000847
 8000824:	2b60      	cmp	r3, #96	; 0x60
 8000826:	d010      	beq.n	800084a <CH_num_send+0x1b2>
 8000828:	e013      	b.n	8000852 <CH_num_send+0x1ba>
        case OFF:
        case ON:
        case OPEN:
            return 0;
 800082a:	2300      	movs	r3, #0
 800082c:	e012      	b.n	8000854 <CH_num_send+0x1bc>
        case OPEN_PLUS:
            return 4;
 800082e:	2304      	movs	r3, #4
 8000830:	e010      	b.n	8000854 <CH_num_send+0x1bc>
        case CLOSED:
            return 0;
 8000832:	2300      	movs	r3, #0
 8000834:	e00e      	b.n	8000854 <CH_num_send+0x1bc>
        case CLOSED_PLUS:
            return 4;
 8000836:	2304      	movs	r3, #4
 8000838:	e00c      	b.n	8000854 <CH_num_send+0x1bc>
        case CONFIG_PWM:
        case CONFIG_K:
            return 0;
 800083a:	2300      	movs	r3, #0
 800083c:	e00a      	b.n	8000854 <CH_num_send+0x1bc>
        case QUAD_ENC:
            return 4;
 800083e:	2304      	movs	r3, #4
 8000840:	e008      	b.n	8000854 <CH_num_send+0x1bc>
        case ADJUST:
            return 0;
 8000842:	2300      	movs	r3, #0
 8000844:	e006      	b.n	8000854 <CH_num_send+0x1bc>
        case ABS_ENC:
            return 4;
 8000846:	2304      	movs	r3, #4
 8000848:	e004      	b.n	8000854 <CH_num_send+0x1bc>
        case LIMIT:
        case CALIBRATED:
            return 1;
 800084a:	2301      	movs	r3, #1
 800084c:	e002      	b.n	8000854 <CH_num_send+0x1bc>
        case LIMIT_ON:
        case UNKNOWN:
            return 0;
 800084e:	2300      	movs	r3, #0
 8000850:	e000      	b.n	8000854 <CH_num_send+0x1bc>
    }
    return 0;
 8000852:	2300      	movs	r3, #0
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <CH_process_received>:


void CH_process_received(I2CBus *i2c_bus, Motor *motor) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
    switch (i2c_bus->operation) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2bff      	cmp	r3, #255	; 0xff
 8000870:	f000 811c 	beq.w	8000aac <CH_process_received+0x24c>
 8000874:	2bff      	cmp	r3, #255	; 0xff
 8000876:	f300 811c 	bgt.w	8000ab2 <CH_process_received+0x252>
 800087a:	2b7f      	cmp	r3, #127	; 0x7f
 800087c:	f000 8110 	beq.w	8000aa0 <CH_process_received+0x240>
 8000880:	2b7f      	cmp	r3, #127	; 0x7f
 8000882:	f300 8116 	bgt.w	8000ab2 <CH_process_received+0x252>
 8000886:	2b6f      	cmp	r3, #111	; 0x6f
 8000888:	f000 8112 	beq.w	8000ab0 <CH_process_received+0x250>
 800088c:	2b6f      	cmp	r3, #111	; 0x6f
 800088e:	f300 8110 	bgt.w	8000ab2 <CH_process_received+0x252>
 8000892:	2b50      	cmp	r3, #80	; 0x50
 8000894:	f300 80ac 	bgt.w	80009f0 <CH_process_received+0x190>
 8000898:	2b00      	cmp	r3, #0
 800089a:	f2c0 810a 	blt.w	8000ab2 <CH_process_received+0x252>
 800089e:	2b50      	cmp	r3, #80	; 0x50
 80008a0:	f200 8107 	bhi.w	8000ab2 <CH_process_received+0x252>
 80008a4:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <CH_process_received+0x4c>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080009f5 	.word	0x080009f5
 80008b0:	08000ab3 	.word	0x08000ab3
 80008b4:	08000ab3 	.word	0x08000ab3
 80008b8:	08000ab3 	.word	0x08000ab3
 80008bc:	08000ab3 	.word	0x08000ab3
 80008c0:	08000ab3 	.word	0x08000ab3
 80008c4:	08000ab3 	.word	0x08000ab3
 80008c8:	08000ab3 	.word	0x08000ab3
 80008cc:	08000ab3 	.word	0x08000ab3
 80008d0:	08000ab3 	.word	0x08000ab3
 80008d4:	08000ab3 	.word	0x08000ab3
 80008d8:	08000ab3 	.word	0x08000ab3
 80008dc:	08000ab3 	.word	0x08000ab3
 80008e0:	08000ab3 	.word	0x08000ab3
 80008e4:	08000ab3 	.word	0x08000ab3
 80008e8:	08000ab3 	.word	0x08000ab3
 80008ec:	08000a01 	.word	0x08000a01
 80008f0:	08000ab3 	.word	0x08000ab3
 80008f4:	08000ab3 	.word	0x08000ab3
 80008f8:	08000ab3 	.word	0x08000ab3
 80008fc:	08000ab3 	.word	0x08000ab3
 8000900:	08000ab3 	.word	0x08000ab3
 8000904:	08000ab3 	.word	0x08000ab3
 8000908:	08000ab3 	.word	0x08000ab3
 800090c:	08000ab3 	.word	0x08000ab3
 8000910:	08000ab3 	.word	0x08000ab3
 8000914:	08000ab3 	.word	0x08000ab3
 8000918:	08000ab3 	.word	0x08000ab3
 800091c:	08000ab3 	.word	0x08000ab3
 8000920:	08000ab3 	.word	0x08000ab3
 8000924:	08000ab3 	.word	0x08000ab3
 8000928:	08000a01 	.word	0x08000a01
 800092c:	08000a15 	.word	0x08000a15
 8000930:	08000ab3 	.word	0x08000ab3
 8000934:	08000ab3 	.word	0x08000ab3
 8000938:	08000ab3 	.word	0x08000ab3
 800093c:	08000ab3 	.word	0x08000ab3
 8000940:	08000ab3 	.word	0x08000ab3
 8000944:	08000ab3 	.word	0x08000ab3
 8000948:	08000ab3 	.word	0x08000ab3
 800094c:	08000ab3 	.word	0x08000ab3
 8000950:	08000ab3 	.word	0x08000ab3
 8000954:	08000ab3 	.word	0x08000ab3
 8000958:	08000ab3 	.word	0x08000ab3
 800095c:	08000ab3 	.word	0x08000ab3
 8000960:	08000ab3 	.word	0x08000ab3
 8000964:	08000ab3 	.word	0x08000ab3
 8000968:	08000a15 	.word	0x08000a15
 800096c:	08000a39 	.word	0x08000a39
 8000970:	08000ab3 	.word	0x08000ab3
 8000974:	08000ab3 	.word	0x08000ab3
 8000978:	08000ab3 	.word	0x08000ab3
 800097c:	08000ab3 	.word	0x08000ab3
 8000980:	08000ab3 	.word	0x08000ab3
 8000984:	08000ab3 	.word	0x08000ab3
 8000988:	08000ab3 	.word	0x08000ab3
 800098c:	08000ab3 	.word	0x08000ab3
 8000990:	08000ab3 	.word	0x08000ab3
 8000994:	08000ab3 	.word	0x08000ab3
 8000998:	08000ab3 	.word	0x08000ab3
 800099c:	08000ab3 	.word	0x08000ab3
 80009a0:	08000ab3 	.word	0x08000ab3
 80009a4:	08000ab3 	.word	0x08000ab3
 80009a8:	08000a61 	.word	0x08000a61
 80009ac:	08000ab3 	.word	0x08000ab3
 80009b0:	08000ab3 	.word	0x08000ab3
 80009b4:	08000ab3 	.word	0x08000ab3
 80009b8:	08000ab3 	.word	0x08000ab3
 80009bc:	08000ab3 	.word	0x08000ab3
 80009c0:	08000ab3 	.word	0x08000ab3
 80009c4:	08000ab3 	.word	0x08000ab3
 80009c8:	08000ab3 	.word	0x08000ab3
 80009cc:	08000ab3 	.word	0x08000ab3
 80009d0:	08000ab3 	.word	0x08000ab3
 80009d4:	08000ab3 	.word	0x08000ab3
 80009d8:	08000ab3 	.word	0x08000ab3
 80009dc:	08000ab3 	.word	0x08000ab3
 80009e0:	08000ab3 	.word	0x08000ab3
 80009e4:	08000ab3 	.word	0x08000ab3
 80009e8:	08000a91 	.word	0x08000a91
 80009ec:	08000ab3 	.word	0x08000ab3
 80009f0:	2b60      	cmp	r3, #96	; 0x60
            memcpy(&(motor->encoder->counts), i2c_bus->buffer, 4);
            return;
        case ABS_ENC:
        case LIMIT:
        case CALIBRATED:
            return;
 80009f2:	e05d      	b.n	8000ab0 <CH_process_received+0x250>
            set_motor_speed(motor, 0.0f);
 80009f4:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8000ab8 <CH_process_received+0x258>
 80009f8:	6838      	ldr	r0, [r7, #0]
 80009fa:	f000 ff99 	bl	8001930 <set_motor_speed>
            return;
 80009fe:	e058      	b.n	8000ab2 <CH_process_received+0x252>
            motor->using_open_loop_control = 1;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	2201      	movs	r2, #1
 8000a04:	751a      	strb	r2, [r3, #20]
            memcpy(&(motor->desired_speed), i2c_bus->buffer, 4);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	3320      	adds	r3, #32
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	3202      	adds	r2, #2
 8000a0e:	6812      	ldr	r2, [r2, #0]
 8000a10:	601a      	str	r2, [r3, #0]
            return;
 8000a12:	e04e      	b.n	8000ab2 <CH_process_received+0x252>
            motor->using_open_loop_control = 0;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2200      	movs	r2, #0
 8000a18:	751a      	strb	r2, [r3, #20]
            memcpy(&(motor->control->kF), i2c_bus->buffer, 4);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	691b      	ldr	r3, [r3, #16]
 8000a1e:	330c      	adds	r3, #12
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	3202      	adds	r2, #2
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	601a      	str	r2, [r3, #0]
            memcpy(&(motor->desired_counts), i2c_bus->buffer + 4, 4);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	3324      	adds	r3, #36	; 0x24
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	3202      	adds	r2, #2
 8000a30:	3204      	adds	r2, #4
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	601a      	str	r2, [r3, #0]
            return;
 8000a36:	e03c      	b.n	8000ab2 <CH_process_received+0x252>
            int max = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
            memcpy(&(max), i2c_bus->buffer, 2);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	81bb      	strh	r3, [r7, #12]
            motor->max_pwm = ((float) max) / 100.0f;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	ee07 3a90 	vmov	s15, r3
 8000a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a50:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000abc <CH_process_received+0x25c>
 8000a54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	edc3 7a07 	vstr	s15, [r3, #28]
            return; // UPDATED
 8000a5e:	e028      	b.n	8000ab2 <CH_process_received+0x252>
            memcpy(&(motor->control->kP), i2c_bus->buffer, 4);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	461a      	mov	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3302      	adds	r3, #2
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6013      	str	r3, [r2, #0]
            memcpy(&(motor->control->kI), i2c_bus->buffer + 4, 4);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	3304      	adds	r3, #4
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	3202      	adds	r2, #2
 8000a78:	3204      	adds	r2, #4
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	601a      	str	r2, [r3, #0]
            memcpy(&(motor->control->kD), i2c_bus->buffer + 8, 4);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	3308      	adds	r3, #8
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	3202      	adds	r2, #2
 8000a88:	3208      	adds	r2, #8
 8000a8a:	6812      	ldr	r2, [r2, #0]
 8000a8c:	601a      	str	r2, [r3, #0]
            return;
 8000a8e:	e010      	b.n	8000ab2 <CH_process_received+0x252>
            memcpy(&(motor->encoder->counts), i2c_bus->buffer, 4);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	3308      	adds	r3, #8
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	3202      	adds	r2, #2
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	601a      	str	r2, [r3, #0]
            return;
 8000a9e:	e008      	b.n	8000ab2 <CH_process_received+0x252>
        case LIMIT_ON:
            memcpy(&(motor->limit_enabled), i2c_bus->buffer, 1);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	3328      	adds	r3, #40	; 0x28
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	3202      	adds	r2, #2
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	701a      	strb	r2, [r3, #0]
        case UNKNOWN:
            return;
 8000aac:	bf00      	nop
 8000aae:	e000      	b.n	8000ab2 <CH_process_received+0x252>
            return;
 8000ab0:	bf00      	nop
    }
}
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	00000000 	.word	0x00000000
 8000abc:	42c80000 	.word	0x42c80000

08000ac0 <CH_prepare_send>:

void CH_prepare_send(I2CBus *i2c_bus, Motor *motor) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
    switch (i2c_bus->operation) {
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2bff      	cmp	r3, #255	; 0xff
 8000ad0:	f000 80e8 	beq.w	8000ca4 <CH_prepare_send+0x1e4>
 8000ad4:	2bff      	cmp	r3, #255	; 0xff
 8000ad6:	f300 80e6 	bgt.w	8000ca6 <CH_prepare_send+0x1e6>
 8000ada:	2b7f      	cmp	r3, #127	; 0x7f
 8000adc:	f000 80e2 	beq.w	8000ca4 <CH_prepare_send+0x1e4>
 8000ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae2:	f300 80e0 	bgt.w	8000ca6 <CH_prepare_send+0x1e6>
 8000ae6:	2b6f      	cmp	r3, #111	; 0x6f
 8000ae8:	f000 80d5 	beq.w	8000c96 <CH_prepare_send+0x1d6>
 8000aec:	2b6f      	cmp	r3, #111	; 0x6f
 8000aee:	f300 80da 	bgt.w	8000ca6 <CH_prepare_send+0x1e6>
 8000af2:	2b50      	cmp	r3, #80	; 0x50
 8000af4:	f300 80ac 	bgt.w	8000c50 <CH_prepare_send+0x190>
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f2c0 80d4 	blt.w	8000ca6 <CH_prepare_send+0x1e6>
 8000afe:	2b50      	cmp	r3, #80	; 0x50
 8000b00:	f200 80d1 	bhi.w	8000ca6 <CH_prepare_send+0x1e6>
 8000b04:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <CH_prepare_send+0x4c>)
 8000b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0a:	bf00      	nop
 8000b0c:	08000ca7 	.word	0x08000ca7
 8000b10:	08000ca7 	.word	0x08000ca7
 8000b14:	08000ca7 	.word	0x08000ca7
 8000b18:	08000ca7 	.word	0x08000ca7
 8000b1c:	08000ca7 	.word	0x08000ca7
 8000b20:	08000ca7 	.word	0x08000ca7
 8000b24:	08000ca7 	.word	0x08000ca7
 8000b28:	08000ca7 	.word	0x08000ca7
 8000b2c:	08000ca7 	.word	0x08000ca7
 8000b30:	08000ca7 	.word	0x08000ca7
 8000b34:	08000ca7 	.word	0x08000ca7
 8000b38:	08000ca7 	.word	0x08000ca7
 8000b3c:	08000ca7 	.word	0x08000ca7
 8000b40:	08000ca7 	.word	0x08000ca7
 8000b44:	08000ca7 	.word	0x08000ca7
 8000b48:	08000ca7 	.word	0x08000ca7
 8000b4c:	08000ca7 	.word	0x08000ca7
 8000b50:	08000ca7 	.word	0x08000ca7
 8000b54:	08000ca7 	.word	0x08000ca7
 8000b58:	08000ca7 	.word	0x08000ca7
 8000b5c:	08000ca7 	.word	0x08000ca7
 8000b60:	08000ca7 	.word	0x08000ca7
 8000b64:	08000ca7 	.word	0x08000ca7
 8000b68:	08000ca7 	.word	0x08000ca7
 8000b6c:	08000ca7 	.word	0x08000ca7
 8000b70:	08000ca7 	.word	0x08000ca7
 8000b74:	08000ca7 	.word	0x08000ca7
 8000b78:	08000ca7 	.word	0x08000ca7
 8000b7c:	08000ca7 	.word	0x08000ca7
 8000b80:	08000ca7 	.word	0x08000ca7
 8000b84:	08000ca7 	.word	0x08000ca7
 8000b88:	08000c57 	.word	0x08000c57
 8000b8c:	08000ca7 	.word	0x08000ca7
 8000b90:	08000ca7 	.word	0x08000ca7
 8000b94:	08000ca7 	.word	0x08000ca7
 8000b98:	08000ca7 	.word	0x08000ca7
 8000b9c:	08000ca7 	.word	0x08000ca7
 8000ba0:	08000ca7 	.word	0x08000ca7
 8000ba4:	08000ca7 	.word	0x08000ca7
 8000ba8:	08000ca7 	.word	0x08000ca7
 8000bac:	08000ca7 	.word	0x08000ca7
 8000bb0:	08000ca7 	.word	0x08000ca7
 8000bb4:	08000ca7 	.word	0x08000ca7
 8000bb8:	08000ca7 	.word	0x08000ca7
 8000bbc:	08000ca7 	.word	0x08000ca7
 8000bc0:	08000ca7 	.word	0x08000ca7
 8000bc4:	08000ca7 	.word	0x08000ca7
 8000bc8:	08000c67 	.word	0x08000c67
 8000bcc:	08000ca7 	.word	0x08000ca7
 8000bd0:	08000ca7 	.word	0x08000ca7
 8000bd4:	08000ca7 	.word	0x08000ca7
 8000bd8:	08000ca7 	.word	0x08000ca7
 8000bdc:	08000ca7 	.word	0x08000ca7
 8000be0:	08000ca7 	.word	0x08000ca7
 8000be4:	08000ca7 	.word	0x08000ca7
 8000be8:	08000ca7 	.word	0x08000ca7
 8000bec:	08000ca7 	.word	0x08000ca7
 8000bf0:	08000ca7 	.word	0x08000ca7
 8000bf4:	08000ca7 	.word	0x08000ca7
 8000bf8:	08000ca7 	.word	0x08000ca7
 8000bfc:	08000ca7 	.word	0x08000ca7
 8000c00:	08000ca7 	.word	0x08000ca7
 8000c04:	08000ca7 	.word	0x08000ca7
 8000c08:	08000ca7 	.word	0x08000ca7
 8000c0c:	08000c77 	.word	0x08000c77
 8000c10:	08000ca7 	.word	0x08000ca7
 8000c14:	08000ca7 	.word	0x08000ca7
 8000c18:	08000ca7 	.word	0x08000ca7
 8000c1c:	08000ca7 	.word	0x08000ca7
 8000c20:	08000ca7 	.word	0x08000ca7
 8000c24:	08000ca7 	.word	0x08000ca7
 8000c28:	08000ca7 	.word	0x08000ca7
 8000c2c:	08000ca7 	.word	0x08000ca7
 8000c30:	08000ca7 	.word	0x08000ca7
 8000c34:	08000ca7 	.word	0x08000ca7
 8000c38:	08000ca7 	.word	0x08000ca7
 8000c3c:	08000ca7 	.word	0x08000ca7
 8000c40:	08000ca7 	.word	0x08000ca7
 8000c44:	08000ca7 	.word	0x08000ca7
 8000c48:	08000ca7 	.word	0x08000ca7
 8000c4c:	08000ca7 	.word	0x08000ca7
 8000c50:	2b60      	cmp	r3, #96	; 0x60
 8000c52:	d018      	beq.n	8000c86 <CH_prepare_send+0x1c6>
 8000c54:	e027      	b.n	8000ca6 <CH_prepare_send+0x1e6>
        case OFF:
        case ON:
        case OPEN:
            return;
        case OPEN_PLUS:
            memcpy(i2c_bus->buffer, &(motor->encoder->counts), 4);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3302      	adds	r3, #2
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	68d2      	ldr	r2, [r2, #12]
 8000c5e:	3208      	adds	r2, #8
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	601a      	str	r2, [r3, #0]
            return;
 8000c64:	e01f      	b.n	8000ca6 <CH_prepare_send+0x1e6>
        case CLOSED:
            return;
        case CLOSED_PLUS:
            memcpy(i2c_bus->buffer, &(motor->encoder->counts), 4);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3302      	adds	r3, #2
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	68d2      	ldr	r2, [r2, #12]
 8000c6e:	3208      	adds	r2, #8
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	601a      	str	r2, [r3, #0]
            return;
 8000c74:	e017      	b.n	8000ca6 <CH_prepare_send+0x1e6>
        case CONFIG_PWM:
        case CONFIG_K:
            return;
        case QUAD_ENC:
            memcpy(i2c_bus->buffer, &(motor->encoder->counts), 4);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3302      	adds	r3, #2
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	68d2      	ldr	r2, [r2, #12]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	601a      	str	r2, [r3, #0]
            return;
 8000c84:	e00f      	b.n	8000ca6 <CH_prepare_send+0x1e6>
            // case ABS_ENC: memcpy(i2c_bus->buffer, &(motor->abs_enc_value), 4); return;
        case ABS_ENC:
            return; // TODO add support for abs encoder
            // case LIMIT: memcpy(i2c_bus->buffer, &(motor->limit), 1); return;
        case LIMIT:
        	memcpy(i2c_bus->buffer, &(motor->forward_limit_switch->is_activated), 1);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3302      	adds	r3, #2
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	6852      	ldr	r2, [r2, #4]
 8000c8e:	3204      	adds	r2, #4
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	701a      	strb	r2, [r3, #0]
            return; // TODO add cases for reverse limits
 8000c94:	e007      	b.n	8000ca6 <CH_prepare_send+0x1e6>
        case CALIBRATED:
            memcpy(i2c_bus->buffer, &(motor->calibrated), 1);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	3229      	adds	r2, #41	; 0x29
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	701a      	strb	r2, [r3, #0]
            return;
 8000ca2:	e000      	b.n	8000ca6 <CH_prepare_send+0x1e6>
        case LIMIT_ON:
        case UNKNOWN:
            return;
 8000ca4:	bf00      	nop
    }
}
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <CH_reset>:

void CH_reset(I2CBus *i2c_bus, Motor *motors[], uint8_t num_motors) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_DeInit(i2c_bus->i2c_bus_handle);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 ff05 	bl	8002ad2 <HAL_I2C_DeInit>
    i2c_bus->operation = UNKNOWN;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	22ff      	movs	r2, #255	; 0xff
 8000ccc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < num_motors; ++i) {
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	e011      	b.n	8000cf8 <CH_reset+0x48>
        motors[i]->desired_speed = 0; // open loop setpoint
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	4413      	add	r3, r2
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
        motors[i]->using_open_loop_control = 1;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	68ba      	ldr	r2, [r7, #8]
 8000cea:	4413      	add	r3, r2
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	751a      	strb	r2, [r3, #20]
    for (int i = 0; i < num_motors; ++i) {
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbe9      	blt.n	8000cd4 <CH_reset+0x24>
    }
    HAL_I2C_Init(i2c_bus->i2c_bus_handle);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fe55 	bl	80029b4 <HAL_I2C_Init>
    HAL_I2C_EnableListen_IT(i2c_bus->i2c_bus_handle);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 f856 	bl	8002dc0 <HAL_I2C_EnableListen_IT>
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <new_limit_switch>:
#include "limit_switch.h"


LimitSwitch *new_limit_switch(Pin *_pin) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	LimitSwitch *limit_switch = (LimitSwitch *) malloc(sizeof(LimitSwitch));
 8000d24:	2008      	movs	r0, #8
 8000d26:	f006 faa9 	bl	800727c <malloc>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	60fb      	str	r3, [r7, #12]
	limit_switch->pin = _pin;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	601a      	str	r2, [r3, #0]
	limit_switch->is_activated = false;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2200      	movs	r2, #0
 8000d38:	711a      	strb	r2, [r3, #4]
	return limit_switch;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <update_limit_switch>:

void update_limit_switch(LimitSwitch *limit_switch) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	limit_switch->is_activated = read_pin_value(limit_switch->pin);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 feb2 	bl	8001aba <read_pin_value>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	711a      	strb	r2, [r3, #4]
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    static float prev_speed = -1;
    if (htim == &htim6) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a2d      	ldr	r2, [pc, #180]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d152      	bne.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0xb6>
        for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	e04c      	b.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0xb0>
            if (quad_encoders[i]) {
 8000d7e:	4a2b      	ldr	r2, [pc, #172]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d006      	beq.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x30>
                update_quad_encoder(quad_encoders[i]);
 8000d8a:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fee3 	bl	8001b5e <update_quad_encoder>
            }
            if (forward_limit_switches[i]) {
 8000d98:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x4a>
                update_limit_switch(forward_limit_switches[i]);
 8000da4:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ffc9 	bl	8000d44 <update_limit_switch>
            }
            if (backward_limit_switches[i]) {
 8000db2:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <HAL_TIM_PeriodElapsedCallback+0x64>
                update_limit_switch(backward_limit_switches[i]);
 8000dbe:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ffbc 	bl	8000d44 <update_limit_switch>
            }
            if (motors[i]->desired_speed != prev_speed) {
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd4:	ed93 7a08 	vldr	s14, [r3, #32]
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000dda:	edd3 7a00 	vldr	s15, [r3]
 8000dde:	eeb4 7a67 	vcmp.f32	s14, s15
 8000de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de6:	d014      	beq.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0xaa>
                prev_speed = motors[i]->desired_speed;
 8000de8:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000df4:	6013      	str	r3, [r2, #0]
                update_motor_target(motors[i]);
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fd7e 	bl	8001900 <update_motor_target>
                update_motor_speed(motors[i]);
 8000e04:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fda5 	bl	800195c <update_motor_speed>
        for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3301      	adds	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0af      	beq.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x16>
            }
        }
    }
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200001c0 	.word	0x200001c0
 8000e2c:	20000274 	.word	0x20000274
 8000e30:	2000026c 	.word	0x2000026c
 8000e34:	20000270 	.word	0x20000270
 8000e38:	2000027c 	.word	0x2000027c
 8000e3c:	20000000 	.word	0x20000000

08000e40 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	803b      	strh	r3, [r7, #0]
    i2c_bus->motor_id = (0x000F & (AddrMatchCode >> 1));
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	085b      	lsrs	r3, r3, #1
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <HAL_I2C_AddrCallback+0xac>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f002 020f 	and.w	r2, r2, #15
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	705a      	strb	r2, [r3, #1]
    if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10f      	bne.n	8000e8a <HAL_I2C_AddrCallback+0x4a>
        HAL_I2C_Slave_Seq_Receive_IT(i2c_bus->i2c_bus_handle, i2c_bus->buffer, 1, I2C_LAST_FRAME);
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_I2C_AddrCallback+0xac>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_I2C_AddrCallback+0xac>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	1c99      	adds	r1, r3, #2
 8000e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f001 fefc 	bl	8002c78 <HAL_I2C_Slave_Seq_Receive_IT>
        i2c_bus->operation = UNKNOWN;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_I2C_AddrCallback+0xac>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	22ff      	movs	r2, #255	; 0xff
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	e027      	b.n	8000eda <HAL_I2C_AddrCallback+0x9a>
    } else {
        if (i2c_bus->motor_id < NUM_MOTORS) {
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_I2C_AddrCallback+0xac>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10c      	bne.n	8000eae <HAL_I2C_AddrCallback+0x6e>
            CH_prepare_send(i2c_bus, motors[i2c_bus->motor_id]);
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_I2C_AddrCallback+0xac>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_I2C_AddrCallback+0xac>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_I2C_AddrCallback+0xb0>)
 8000ea2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	f7ff fe09 	bl	8000ac0 <CH_prepare_send>
        }
        uint8_t bytes_to_send = CH_num_send(i2c_bus);
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_I2C_AddrCallback+0xac>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fbf0 	bl	8000698 <CH_num_send>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]
        if (bytes_to_send != 0) {
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00b      	beq.n	8000eda <HAL_I2C_AddrCallback+0x9a>
            HAL_I2C_Slave_Seq_Transmit_IT(i2c_bus->i2c_bus_handle, i2c_bus->buffer, bytes_to_send, I2C_LAST_FRAME);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_I2C_AddrCallback+0xac>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_I2C_AddrCallback+0xac>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	1c99      	adds	r1, r3, #2
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ed6:	f001 fe2b 	bl	8002b30 <HAL_I2C_Slave_Seq_Transmit_IT>
        }
    }
    //HAL_IWDG_Refresh(watch_dog_handle);
    i2c_bus->tick = 0;
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HAL_I2C_AddrCallback+0xac>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000280 	.word	0x20000280
 8000ef0:	2000027c 	.word	0x2000027c

08000ef4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    if (i2c_bus->operation == UNKNOWN) {
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2bff      	cmp	r3, #255	; 0xff
 8000f04:	d12f      	bne.n	8000f66 <HAL_I2C_SlaveRxCpltCallback+0x72>
        i2c_bus->operation = i2c_bus->buffer[0];
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	7892      	ldrb	r2, [r2, #2]
 8000f10:	701a      	strb	r2, [r3, #0]
        uint8_t bytes_to_recieve = CH_num_receive(i2c_bus);
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fada 	bl	80004d0 <CH_num_receive>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]
        if (bytes_to_recieve != 0) {
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00c      	beq.n	8000f40 <HAL_I2C_SlaveRxCpltCallback+0x4c>
            HAL_I2C_Slave_Seq_Receive_IT(i2c_bus->i2c_bus_handle, i2c_bus->buffer, bytes_to_recieve, I2C_LAST_FRAME);
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	1c99      	adds	r1, r3, #2
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f3a:	f001 fe9d 	bl	8002c78 <HAL_I2C_Slave_Seq_Receive_IT>
    } else {
        if (i2c_bus->motor_id < NUM_MOTORS) {
            CH_process_received(i2c_bus, motors[i2c_bus->motor_id]);
        }
    }
}
 8000f3e:	e024      	b.n	8000f8a <HAL_I2C_SlaveRxCpltCallback+0x96>
            if (i2c_bus->motor_id < NUM_MOTORS) {
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	785b      	ldrb	r3, [r3, #1]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d11f      	bne.n	8000f8a <HAL_I2C_SlaveRxCpltCallback+0x96>
                CH_process_received(i2c_bus, motors[i2c_bus->motor_id]);
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 8000f58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f7ff fc7e 	bl	8000860 <CH_process_received>
}
 8000f64:	e011      	b.n	8000f8a <HAL_I2C_SlaveRxCpltCallback+0x96>
        if (i2c_bus->motor_id < NUM_MOTORS) {
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10c      	bne.n	8000f8a <HAL_I2C_SlaveRxCpltCallback+0x96>
            CH_process_received(i2c_bus, motors[i2c_bus->motor_id]);
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	785b      	ldrb	r3, [r3, #1]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 8000f7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f82:	4619      	mov	r1, r3
 8000f84:	4610      	mov	r0, r2
 8000f86:	f7ff fc6b 	bl	8000860 <CH_process_received>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000280 	.word	0x20000280
 8000f98:	2000027c 	.word	0x2000027c

08000f9c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    CH_reset(i2c_bus, motors, NUM_MOTORS);
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_I2C_ErrorCallback+0x20>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4905      	ldr	r1, [pc, #20]	; (8000fc0 <HAL_I2C_ErrorCallback+0x24>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fe7f 	bl	8000cb0 <CH_reset>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000280 	.word	0x20000280
 8000fc0:	2000027c 	.word	0x2000027c

08000fc4 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(i2c_bus->i2c_bus_handle);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_I2C_ListenCpltCallback+0x1c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fef4 	bl	8002dc0 <HAL_I2C_EnableListen_IT>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000280 	.word	0x20000280

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fea:	f001 f849 	bl	8002080 <HAL_Init>

  /* USER CODE BEGIN Init */

    hbridge_forward_pins[0] = new_pin(GPIOA, GPIO_PIN_10);
 8000fee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f000 fd4a 	bl	8001a8e <new_pin>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a7f      	ldr	r2, [pc, #508]	; (80011fc <main+0x218>)
 8000ffe:	6013      	str	r3, [r2, #0]
//	hbridge_forward_pins[2] = new_pin(GPIOX, GPIO_PIN_0);
//	hbridge_forward_pins[3] = new_pin(GPIOX, GPIO_PIN_0);
//	hbridge_forward_pins[4] = new_pin(GPIOX, GPIO_PIN_0);
//	hbridge_forward_pins[5] = new_pin(GPIOX, GPIO_PIN_0);

    hbridge_backward_pins[0] = new_pin(GPIOC, GPIO_PIN_10);
 8001000:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001004:	487e      	ldr	r0, [pc, #504]	; (8001200 <main+0x21c>)
 8001006:	f000 fd42 	bl	8001a8e <new_pin>
 800100a:	4603      	mov	r3, r0
 800100c:	4a7d      	ldr	r2, [pc, #500]	; (8001204 <main+0x220>)
 800100e:	6013      	str	r3, [r2, #0]
//	hbridge_backward_pins[2] = new_pin(GPIOX, GPIO_PIN_0);
//	hbridge_backward_pins[3] = new_pin(GPIOX, GPIO_PIN_0);
//	hbridge_backward_pins[4] = new_pin(GPIOX, GPIO_PIN_0);
//	hbridge_backward_pins[5] = new_pin(GPIOX, GPIO_PIN_0);

    hbridges[0] = new_hbridge(&htim1, TIM_CHANNEL_1, &(TIM1->CCR1), &(TIM1->ARR), hbridge_forward_pins[0],
 8001010:	4b7a      	ldr	r3, [pc, #488]	; (80011fc <main+0x218>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a7b      	ldr	r2, [pc, #492]	; (8001204 <main+0x220>)
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	9201      	str	r2, [sp, #4]
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4b7a      	ldr	r3, [pc, #488]	; (8001208 <main+0x224>)
 800101e:	4a7b      	ldr	r2, [pc, #492]	; (800120c <main+0x228>)
 8001020:	2100      	movs	r1, #0
 8001022:	487b      	ldr	r0, [pc, #492]	; (8001210 <main+0x22c>)
 8001024:	f7ff f99e 	bl	8000364 <new_hbridge>
 8001028:	4603      	mov	r3, r0
 800102a:	4a7a      	ldr	r2, [pc, #488]	; (8001214 <main+0x230>)
 800102c:	6013      	str	r3, [r2, #0]
//	hbridges[2] = new_hbridge(&htimX, TIM_CHANNEL_X, &(TIM1->CCRX), TIMX->ARR, hbridge_forward_pins[2], hbridge_backward_pins[2]);
//	hbridges[3] = new_hbridge(&htimX, TIM_CHANNEL_X, &(TIM1->CCRX), TIMX->ARR, hbridge_forward_pins[3], hbridge_backward_pins[3]);
//	hbridges[4] = new_hbridge(&htimX, TIM_CHANNEL_X, &(TIM1->CCRX), TIMX->ARR, hbridge_forward_pins[4], hbridge_backward_pins[4]);
//	hbridges[5] = new_hbridge(&htimX, TIM_CHANNEL_X, &(TIM1->CCRX), TIMX->ARR, hbridge_forward_pins[5], hbridge_backward_pins[5]);

    for (size_t i = 0; i < NUM_MOTORS; ++i) {
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e012      	b.n	800105a <main+0x76>
        if (hbridges[i]) {
 8001034:	4a77      	ldr	r2, [pc, #476]	; (8001214 <main+0x230>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d009      	beq.n	8001054 <main+0x70>
            init_hbridge(hbridges[i], 0.0f, true);
 8001040:	4a74      	ldr	r2, [pc, #464]	; (8001214 <main+0x230>)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	2101      	movs	r1, #1
 800104a:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8001218 <main+0x234>
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff f9ae 	bl	80003b0 <init_hbridge>
    for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0e9      	beq.n	8001034 <main+0x50>
        }
    }

    forward_limit_switch_pins[0] = new_pin(GPIOB, GPIO_PIN_10);
 8001060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001064:	486d      	ldr	r0, [pc, #436]	; (800121c <main+0x238>)
 8001066:	f000 fd12 	bl	8001a8e <new_pin>
 800106a:	4603      	mov	r3, r0
 800106c:	4a6c      	ldr	r2, [pc, #432]	; (8001220 <main+0x23c>)
 800106e:	6013      	str	r3, [r2, #0]
//	forward_limit_switch_pins[2] = new_pin(GPIOX, GPIO_PIN_0);
//	forward_limit_switch_pins[3] = new_pin(GPIOX, GPIO_PIN_0);
//	forward_limit_switch_pins[4] = new_pin(GPIOX, GPIO_PIN_0);
//	forward_limit_switch_pins[5] = new_pin(GPIOX, GPIO_PIN_0);

    backward_limit_switch_pins[0] = new_pin(GPIOB, GPIO_PIN_11);
 8001070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001074:	4869      	ldr	r0, [pc, #420]	; (800121c <main+0x238>)
 8001076:	f000 fd0a 	bl	8001a8e <new_pin>
 800107a:	4603      	mov	r3, r0
 800107c:	4a69      	ldr	r2, [pc, #420]	; (8001224 <main+0x240>)
 800107e:	6013      	str	r3, [r2, #0]
//	backward_limit_switch_pins[2] = new_pin(GPIOX, GPIO_PIN_0);
//	backward_limit_switch_pins[3] = new_pin(GPIOX, GPIO_PIN_0);
//	backward_limit_switch_pins[4] = new_pin(GPIOX, GPIO_PIN_0);
//	backward_limit_switch_pins[5] = new_pin(GPIOX, GPIO_PIN_0);

    for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	e026      	b.n	80010d4 <main+0xf0>
        if (forward_limit_switches[i]) {
 8001086:	4a68      	ldr	r2, [pc, #416]	; (8001228 <main+0x244>)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00b      	beq.n	80010aa <main+0xc6>
            forward_limit_switches[i] = new_limit_switch(forward_limit_switch_pins[i]);
 8001092:	4a63      	ldr	r2, [pc, #396]	; (8001220 <main+0x23c>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe3e 	bl	8000d1c <new_limit_switch>
 80010a0:	4602      	mov	r2, r0
 80010a2:	4961      	ldr	r1, [pc, #388]	; (8001228 <main+0x244>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
        if (backward_limit_switches[i]) {
 80010aa:	4a60      	ldr	r2, [pc, #384]	; (800122c <main+0x248>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <main+0xea>
            backward_limit_switches[i] = new_limit_switch(backward_limit_switch_pins[i]);
 80010b6:	4a5b      	ldr	r2, [pc, #364]	; (8001224 <main+0x240>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe2c 	bl	8000d1c <new_limit_switch>
 80010c4:	4602      	mov	r2, r0
 80010c6:	4959      	ldr	r1, [pc, #356]	; (800122c <main+0x248>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (size_t i = 0; i < NUM_MOTORS; ++i) {
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	3301      	adds	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0d5      	beq.n	8001086 <main+0xa2>
        }
    }

    quad_encoders[0] = new_quad_encoder(&htim2, TIM2);
 80010da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010de:	4854      	ldr	r0, [pc, #336]	; (8001230 <main+0x24c>)
 80010e0:	f000 fd13 	bl	8001b0a <new_quad_encoder>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a53      	ldr	r2, [pc, #332]	; (8001234 <main+0x250>)
 80010e8:	6013      	str	r3, [r2, #0]
//	quad_encoders[2] = new_quad_encoder(&htimX, TIMX);
//	quad_encoders[3] = new_quad_encoder(&htimX, TIMX);
//	quad_encoders[4] = new_quad_encoder(&htimX, TIMX);
//	quad_encoders[5] = new_quad_encoder(&htimX, TIMX);

    for (size_t i = 0; i < NUM_MOTORS; ++i) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e00f      	b.n	8001110 <main+0x12c>
        if (quad_encoders[i]) {
 80010f0:	4a50      	ldr	r2, [pc, #320]	; (8001234 <main+0x250>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <main+0x126>
            init_quad_encoder(quad_encoders[i]);
 80010fc:	4a4d      	ldr	r2, [pc, #308]	; (8001234 <main+0x250>)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fd1e 	bl	8001b46 <init_quad_encoder>
    for (size_t i = 0; i < NUM_MOTORS; ++i) {
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0ec      	beq.n	80010f0 <main+0x10c>
        }
    }

    for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	e011      	b.n	8001140 <main+0x15c>
        controls[i] = new_closed_loop_control(0.01f, 0.0f, 0.0f, 0.0f);
 800111c:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8001218 <main+0x234>
 8001120:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8001218 <main+0x234>
 8001124:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8001218 <main+0x234>
 8001128:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8001238 <main+0x254>
 800112c:	f7ff f852 	bl	80001d4 <new_closed_loop_control>
 8001130:	4602      	mov	r2, r0
 8001132:	4942      	ldr	r1, [pc, #264]	; (800123c <main+0x258>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (size_t i = 0; i < NUM_MOTORS; ++i) {
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3301      	adds	r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0ea      	beq.n	800111c <main+0x138>
    }

    for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	e028      	b.n	800119e <main+0x1ba>
        motors[i] = new_motor(
 800114c:	4a31      	ldr	r2, [pc, #196]	; (8001214 <main+0x230>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001154:	4a34      	ldr	r2, [pc, #208]	; (8001228 <main+0x244>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800115c:	4a33      	ldr	r2, [pc, #204]	; (800122c <main+0x248>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001164:	4c33      	ldr	r4, [pc, #204]	; (8001234 <main+0x250>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800116c:	4d33      	ldr	r5, [pc, #204]	; (800123c <main+0x258>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	4623      	mov	r3, r4
 8001178:	f000 fb6b 	bl	8001852 <new_motor>
 800117c:	4602      	mov	r2, r0
 800117e:	4930      	ldr	r1, [pc, #192]	; (8001240 <main+0x25c>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                hbridges[i],
                forward_limit_switches[i],
                backward_limit_switches[i],
                quad_encoders[i],
                controls[i]);
        init_motor(motors[i], 0.0f);
 8001186:	4a2e      	ldr	r2, [pc, #184]	; (8001240 <main+0x25c>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001218 <main+0x234>
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fb93 	bl	80018be <init_motor>
    for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3301      	adds	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0d3      	beq.n	800114c <main+0x168>
    }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f854 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a8:	f000 fada 	bl	8001760 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ac:	f000 f8ac 	bl	8001308 <MX_I2C1_Init>
  MX_TIM1_Init();
 80011b0:	f000 f8ea 	bl	8001388 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011b4:	f000 f9a0 	bl	80014f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011b8:	f000 f9f2 	bl	80015a0 <MX_TIM3_Init>
  MX_TIM8_Init();
 80011bc:	f000 fa7c 	bl	80016b8 <MX_TIM8_Init>
  MX_TIM6_Init();
 80011c0:	f000 fa44 	bl	800164c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

    i2c_bus = new_i2c_bus(&hi2c1);
 80011c4:	481f      	ldr	r0, [pc, #124]	; (8001244 <main+0x260>)
 80011c6:	f7ff f971 	bl	80004ac <new_i2c_bus>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <main+0x264>)
 80011ce:	6013      	str	r3, [r2, #0]

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011d0:	2100      	movs	r1, #0
 80011d2:	480f      	ldr	r0, [pc, #60]	; (8001210 <main+0x22c>)
 80011d4:	f004 fd2e 	bl	8005c34 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80011d8:	213c      	movs	r1, #60	; 0x3c
 80011da:	4815      	ldr	r0, [pc, #84]	; (8001230 <main+0x24c>)
 80011dc:	f004 fedc 	bl	8005f98 <HAL_TIM_Encoder_Start>
    HAL_TIM_Base_Start_IT(&htim6);
 80011e0:	481a      	ldr	r0, [pc, #104]	; (800124c <main+0x268>)
 80011e2:	f004 fc55 	bl	8005a90 <HAL_TIM_Base_Start_IT>
    HAL_I2C_EnableListen_IT(&hi2c1);
 80011e6:	4817      	ldr	r0, [pc, #92]	; (8001244 <main+0x260>)
 80011e8:	f001 fdea 	bl	8002dc0 <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    int counter = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	603b      	str	r3, [r7, #0]
    //motors[0]->control->kF = 0;
    motors[0]->using_open_loop_control = 1;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <main+0x25c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2201      	movs	r2, #1
 80011f6:	751a      	strb	r2, [r3, #20]
    while (1) {
 80011f8:	e7fe      	b.n	80011f8 <main+0x214>
 80011fa:	bf00      	nop
 80011fc:	20000258 	.word	0x20000258
 8001200:	48000800 	.word	0x48000800
 8001204:	2000025c 	.word	0x2000025c
 8001208:	40012c2c 	.word	0x40012c2c
 800120c:	40012c34 	.word	0x40012c34
 8001210:	200000dc 	.word	0x200000dc
 8001214:	20000260 	.word	0x20000260
 8001218:	00000000 	.word	0x00000000
 800121c:	48000400 	.word	0x48000400
 8001220:	20000264 	.word	0x20000264
 8001224:	20000268 	.word	0x20000268
 8001228:	2000026c 	.word	0x2000026c
 800122c:	20000270 	.word	0x20000270
 8001230:	20000128 	.word	0x20000128
 8001234:	20000274 	.word	0x20000274
 8001238:	3c23d70a 	.word	0x3c23d70a
 800123c:	20000278 	.word	0x20000278
 8001240:	2000027c 	.word	0x2000027c
 8001244:	20000090 	.word	0x20000090
 8001248:	20000280 	.word	0x20000280
 800124c:	200001c0 	.word	0x200001c0

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0a6      	sub	sp, #152	; 0x98
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800125a:	2228      	movs	r2, #40	; 0x28
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f006 f814 	bl	800728c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2258      	movs	r2, #88	; 0x58
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f006 f806 	bl	800728c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001280:	2302      	movs	r3, #2
 8001282:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001284:	2301      	movs	r3, #1
 8001286:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001288:	2310      	movs	r3, #16
 800128a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001298:	4618      	mov	r0, r3
 800129a:	f002 ff49 	bl	8004130 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012a4:	f000 face 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012ac:	2300      	movs	r3, #0
 80012ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 ff88 	bl	80051d8 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012ce:	f000 fab9 	bl	8001844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <SystemClock_Config+0xb4>)
 80012d4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80012da:	2300      	movs	r3, #0
 80012dc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80012de:	2300      	movs	r3, #0
 80012e0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 f959 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80012f8:	f000 faa4 	bl	8001844 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3798      	adds	r7, #152	; 0x98
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	00303020 	.word	0x00303020

08001308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <MX_I2C1_Init+0x78>)
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <MX_I2C1_Init+0x7c>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001312:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <MX_I2C1_Init+0x78>)
 8001314:	f240 220b 	movw	r2, #523	; 0x20b
 8001318:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 254;
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <MX_I2C1_Init+0x78>)
 800131c:	22fe      	movs	r2, #254	; 0xfe
 800131e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_I2C1_Init+0x78>)
 8001322:	2201      	movs	r2, #1
 8001324:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_I2C1_Init+0x78>)
 8001328:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800132c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 64;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_I2C1_Init+0x78>)
 8001330:	2240      	movs	r2, #64	; 0x40
 8001332:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_MASK04;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_I2C1_Init+0x78>)
 8001336:	2204      	movs	r2, #4
 8001338:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_I2C1_Init+0x78>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_I2C1_Init+0x78>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001346:	480e      	ldr	r0, [pc, #56]	; (8001380 <MX_I2C1_Init+0x78>)
 8001348:	f001 fb34 	bl	80029b4 <HAL_I2C_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001352:	f000 fa77 	bl	8001844 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4809      	ldr	r0, [pc, #36]	; (8001380 <MX_I2C1_Init+0x78>)
 800135a:	f002 fe51 	bl	8004000 <HAL_I2CEx_ConfigAnalogFilter>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8001364:	f000 fa6e 	bl	8001844 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_I2C1_Init+0x78>)
 800136c:	f002 fe93 	bl	8004096 <HAL_I2CEx_ConfigDigitalFilter>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8001376:	f000 fa65 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000090 	.word	0x20000090
 8001384:	40005400 	.word	0x40005400

08001388 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b09a      	sub	sp, #104	; 0x68
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	222c      	movs	r2, #44	; 0x2c
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 ff62 	bl	800728c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013c8:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <MX_TIM1_Init+0x168>)
 80013ca:	4a4a      	ldr	r2, [pc, #296]	; (80014f4 <MX_TIM1_Init+0x16c>)
 80013cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80013ce:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <MX_TIM1_Init+0x168>)
 80013d0:	2203      	movs	r2, #3
 80013d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <MX_TIM1_Init+0x168>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80013da:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <MX_TIM1_Init+0x168>)
 80013dc:	2264      	movs	r2, #100	; 0x64
 80013de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <MX_TIM1_Init+0x168>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013e6:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <MX_TIM1_Init+0x168>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <MX_TIM1_Init+0x168>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013f2:	483f      	ldr	r0, [pc, #252]	; (80014f0 <MX_TIM1_Init+0x168>)
 80013f4:	f004 faf4 	bl	80059e0 <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013fe:	f000 fa21 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800140c:	4619      	mov	r1, r3
 800140e:	4838      	ldr	r0, [pc, #224]	; (80014f0 <MX_TIM1_Init+0x168>)
 8001410:	f005 f884 	bl	800651c <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800141a:	f000 fa13 	bl	8001844 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800141e:	4834      	ldr	r0, [pc, #208]	; (80014f0 <MX_TIM1_Init+0x168>)
 8001420:	f004 fba6 	bl	8005b70 <HAL_TIM_PWM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800142a:	f000 fa0b 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800143a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800143e:	4619      	mov	r1, r3
 8001440:	482b      	ldr	r0, [pc, #172]	; (80014f0 <MX_TIM1_Init+0x168>)
 8001442:	f005 fdc1 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800144c:	f000 f9fa 	bl	8001844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001450:	2360      	movs	r3, #96	; 0x60
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001458:	2300      	movs	r3, #0
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800145c:	2300      	movs	r3, #0
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	481e      	ldr	r0, [pc, #120]	; (80014f0 <MX_TIM1_Init+0x168>)
 8001476:	f004 ff3d 	bl	80062f4 <HAL_TIM_PWM_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001480:	f000 f9e0 	bl	8001844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001488:	2204      	movs	r2, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <MX_TIM1_Init+0x168>)
 800148e:	f004 ff31 	bl	80062f4 <HAL_TIM_PWM_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001498:	f000 f9d4 	bl	8001844 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <MX_TIM1_Init+0x168>)
 80014d2:	f005 fe05 	bl	80070e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80014dc:	f000 f9b2 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <MX_TIM1_Init+0x168>)
 80014e2:	f000 fcdd 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 80014e6:	bf00      	nop
 80014e8:	3768      	adds	r7, #104	; 0x68
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200000dc 	.word	0x200000dc
 80014f4:	40012c00 	.word	0x40012c00

080014f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	2224      	movs	r2, #36	; 0x24
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f005 fec0 	bl	800728c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	463b      	mov	r3, r7
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_TIM2_Init+0xa4>)
 8001518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <MX_TIM2_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_TIM2_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_TIM2_Init+0xa4>)
 800152c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001530:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_TIM2_Init+0xa4>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_TIM2_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800153e:	2301      	movs	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001546:	2301      	movs	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = QUADRATURE_FILTER;
 800154e:	2308      	movs	r3, #8
 8001550:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001556:	2301      	movs	r3, #1
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = QUADRATURE_FILTER;
 800155e:	2308      	movs	r3, #8
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4619      	mov	r1, r3
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <MX_TIM2_Init+0xa4>)
 800156a:	f004 fc6f 	bl	8005e4c <HAL_TIM_Encoder_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001574:	f000 f966 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_TIM2_Init+0xa4>)
 8001586:	f005 fd1f 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001590:	f000 f958 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	3730      	adds	r7, #48	; 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000128 	.word	0x20000128

080015a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2224      	movs	r2, #36	; 0x24
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 fe6c 	bl	800728c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	463b      	mov	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_TIM3_Init+0xa4>)
 80015c0:	4a21      	ldr	r2, [pc, #132]	; (8001648 <MX_TIM3_Init+0xa8>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_TIM3_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_TIM3_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_TIM3_Init+0xa4>)
 80015d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_TIM3_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_TIM3_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ec:	2301      	movs	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = QUADRATURE_FILTER;
 80015f4:	2308      	movs	r3, #8
 80015f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015fc:	2301      	movs	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = QUADRATURE_FILTER;
 8001604:	2308      	movs	r3, #8
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4619      	mov	r1, r3
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_TIM3_Init+0xa4>)
 8001610:	f004 fc1c 	bl	8005e4c <HAL_TIM_Encoder_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800161a:	f000 f913 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_TIM3_Init+0xa4>)
 800162c:	f005 fccc 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001636:	f000 f905 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	3730      	adds	r7, #48	; 0x30
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000174 	.word	0x20000174
 8001648:	40000400 	.word	0x40000400

0800164c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_TIM6_Init+0x64>)
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <MX_TIM6_Init+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_TIM6_Init+0x64>)
 8001664:	2207      	movs	r2, #7
 8001666:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_TIM6_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = CONTROL_LOOP_PERIOD;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_TIM6_Init+0x64>)
 8001670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001674:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_TIM6_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <MX_TIM6_Init+0x64>)
 800167e:	f004 f9af 	bl	80059e0 <HAL_TIM_Base_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001688:	f000 f8dc 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_TIM6_Init+0x64>)
 800169a:	f005 fc95 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80016a4:	f000 f8ce 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200001c0 	.word	0x200001c0
 80016b4:	40001000 	.word	0x40001000

080016b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_TIM8_Init+0xa0>)
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <MX_TIM8_Init+0xa4>)
 80016da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_TIM8_Init+0xa0>)
 80016de:	2207      	movs	r2, #7
 80016e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_TIM8_Init+0xa0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_TIM8_Init+0xa0>)
 80016ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_TIM8_Init+0xa0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_TIM8_Init+0xa0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_TIM8_Init+0xa0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001702:	4815      	ldr	r0, [pc, #84]	; (8001758 <MX_TIM8_Init+0xa0>)
 8001704:	f004 f96c 	bl	80059e0 <HAL_TIM_Base_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800170e:	f000 f899 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	480e      	ldr	r0, [pc, #56]	; (8001758 <MX_TIM8_Init+0xa0>)
 8001720:	f004 fefc 	bl	800651c <HAL_TIM_ConfigClockSource>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800172a:	f000 f88b 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_TIM8_Init+0xa0>)
 8001740:	f005 fc42 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800174a:	f000 f87b 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3720      	adds	r7, #32
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000020c 	.word	0x2000020c
 800175c:	40013400 	.word	0x40013400

08001760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	4b30      	ldr	r3, [pc, #192]	; (8001838 <MX_GPIO_Init+0xd8>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <MX_GPIO_Init+0xd8>)
 800177c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001780:	6153      	str	r3, [r2, #20]
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <MX_GPIO_Init+0xd8>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <MX_GPIO_Init+0xd8>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a29      	ldr	r2, [pc, #164]	; (8001838 <MX_GPIO_Init+0xd8>)
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <MX_GPIO_Init+0xd8>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <MX_GPIO_Init+0xd8>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a23      	ldr	r2, [pc, #140]	; (8001838 <MX_GPIO_Init+0xd8>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <MX_GPIO_Init+0xd8>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M0_DIR_Pin|M1_DIR_Pin, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80017c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c8:	f001 f8dc 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M0_NDIR_Pin|M1_NDIR_Pin, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80017d2:	481a      	ldr	r0, [pc, #104]	; (800183c <MX_GPIO_Init+0xdc>)
 80017d4:	f001 f8d6 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M0_LIMIT_A_Pin M0_LIMIT_B_Pin M1_LIMIT_A_Pin M1_LIMIT_B_Pin */
  GPIO_InitStruct.Pin = M0_LIMIT_A_Pin|M0_LIMIT_B_Pin|M1_LIMIT_A_Pin|M1_LIMIT_B_Pin;
 80017d8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80017dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017e2:	2302      	movs	r3, #2
 80017e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4619      	mov	r1, r3
 80017ec:	4814      	ldr	r0, [pc, #80]	; (8001840 <MX_GPIO_Init+0xe0>)
 80017ee:	f000 fe3b 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_DIR_Pin M1_DIR_Pin */
  GPIO_InitStruct.Pin = M0_DIR_Pin|M1_DIR_Pin;
 80017f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180e:	f000 fe2b 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_NDIR_Pin M1_NDIR_Pin */
  GPIO_InitStruct.Pin = M0_NDIR_Pin|M1_NDIR_Pin;
 8001812:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	4804      	ldr	r0, [pc, #16]	; (800183c <MX_GPIO_Init+0xdc>)
 800182c:	f000 fe1c 	bl	8002468 <HAL_GPIO_Init>

}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	48000800 	.word	0x48000800
 8001840:	48000400 	.word	0x48000400

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <new_motor>:

#include "motor.h"

Motor *new_motor(HBridge *_hbridge, LimitSwitch *_fwd_lim, LimitSwitch *_bwd_lim, QuadEncoder *_encoder, ClosedLoopControl *_control) {
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
    Motor *motor = (Motor *) malloc(sizeof(Motor));
 8001860:	202c      	movs	r0, #44	; 0x2c
 8001862:	f005 fd0b 	bl	800727c <malloc>
 8001866:	4603      	mov	r3, r0
 8001868:	617b      	str	r3, [r7, #20]
    motor->hbridge = _hbridge;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	601a      	str	r2, [r3, #0]
    motor->forward_limit_switch = _fwd_lim;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	605a      	str	r2, [r3, #4]
    motor->backward_limit_switch = _bwd_lim;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	609a      	str	r2, [r3, #8]
    motor->encoder = _encoder;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	60da      	str	r2, [r3, #12]

    motor->control = _control;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	6a3a      	ldr	r2, [r7, #32]
 8001886:	611a      	str	r2, [r3, #16]
    motor->using_open_loop_control = true;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2201      	movs	r2, #1
 800188c:	751a      	strb	r2, [r3, #20]
    motor->output_pwm = 0;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
    motor->max_pwm = 1;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800189c:	61da      	str	r2, [r3, #28]
    motor->desired_speed = 0;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
    motor->desired_counts = 0;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
    motor->limit_enabled = false; // TODO this should be true... testing
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    return motor;
 80018b4:	697b      	ldr	r3, [r7, #20]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <init_motor>:

void init_motor(Motor *motor, float speed) {
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	ed87 0a00 	vstr	s0, [r7]
    init_hbridge(motor->hbridge, speed, speed);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	edd7 7a00 	vldr	s15, [r7]
 80018d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	bf14      	ite	ne
 80018dc:	2201      	movne	r2, #1
 80018de:	2200      	moveq	r2, #0
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	4611      	mov	r1, r2
 80018e4:	ed97 0a00 	vldr	s0, [r7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fd61 	bl	80003b0 <init_hbridge>
    set_motor_speed(motor, speed);
 80018ee:	ed97 0a00 	vldr	s0, [r7]
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f81c 	bl	8001930 <set_motor_speed>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <update_motor_target>:

void update_motor_target(Motor *motor) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	if (motor->using_open_loop_control) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7d1b      	ldrb	r3, [r3, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <update_motor_target+0x22>
		set_motor_speed(motor, motor->desired_speed);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	edd3 7a08 	vldr	s15, [r3, #32]
 8001916:	eeb0 0a67 	vmov.f32	s0, s15
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f808 	bl	8001930 <set_motor_speed>
	}
	else {
        move_motor_to_target(motor);
    }
}
 8001920:	e002      	b.n	8001928 <update_motor_target+0x28>
        move_motor_to_target(motor);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f88e 	bl	8001a44 <move_motor_to_target>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <set_motor_speed>:

// at_fwd_lim = 1 means lim switch activated
void set_motor_speed(Motor *motor, float speed) {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	ed87 0a00 	vstr	s0, [r7]
	motor->output_pwm = speed * motor->max_pwm;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001942:	edd7 7a00 	vldr	s15, [r7]
 8001946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <update_motor_speed>:

void update_motor_speed(Motor *motor) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
    // when speed is positive, motor goes from rev lim to fwd lim
	if (motor->limit_enabled) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800196a:	2b00      	cmp	r3, #0
 800196c:	d047      	beq.n	80019fe <update_motor_speed+0xa2>
		if (motor->forward_limit_switch->is_activated && (motor->desired_speed > 0)) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	791b      	ldrb	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00f      	beq.n	8001998 <update_motor_speed+0x3c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	edd3 7a08 	vldr	s15, [r3, #32]
 800197e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001986:	dd07      	ble.n	8001998 <update_motor_speed+0x3c>
			change_hbridge_pwm(motor->hbridge, 0);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001a40 <update_motor_speed+0xe4>
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fd2b 	bl	80003ec <change_hbridge_pwm>
 8001996:	e020      	b.n	80019da <update_motor_speed+0x7e>
		} else if (motor->backward_limit_switch->is_activated && (motor->desired_speed < 0)) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	791b      	ldrb	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00f      	beq.n	80019c2 <update_motor_speed+0x66>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80019a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	d507      	bpl.n	80019c2 <update_motor_speed+0x66>
			change_hbridge_pwm(motor->hbridge, 0);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001a40 <update_motor_speed+0xe4>
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fd16 	bl	80003ec <change_hbridge_pwm>
 80019c0:	e00b      	b.n	80019da <update_motor_speed+0x7e>
		} else {
			change_hbridge_pwm(motor->hbridge, fabsf(motor->desired_speed));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80019cc:	eef0 7ae7 	vabs.f32	s15, s15
 80019d0:	eeb0 0a67 	vmov.f32	s0, s15
 80019d4:	4610      	mov	r0, r2
 80019d6:	f7fe fd09 	bl	80003ec <change_hbridge_pwm>
		}
		change_hbridge_dir_val(motor->hbridge, motor->desired_speed > 0);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80019e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	bfcc      	ite	gt
 80019ee:	2301      	movgt	r3, #1
 80019f0:	2300      	movle	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4619      	mov	r1, r3
 80019f6:	4610      	mov	r0, r2
 80019f8:	f7fe fd32 	bl	8000460 <change_hbridge_dir_val>
	else {
		change_hbridge_pwm(motor->hbridge, fabsf(motor->desired_speed));
		change_hbridge_dir_val(motor->hbridge, motor->desired_speed > 0);
	}

}
 80019fc:	e01c      	b.n	8001a38 <update_motor_speed+0xdc>
		change_hbridge_pwm(motor->hbridge, fabsf(motor->desired_speed));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a08:	eef0 7ae7 	vabs.f32	s15, s15
 8001a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a10:	4610      	mov	r0, r2
 8001a12:	f7fe fceb 	bl	80003ec <change_hbridge_pwm>
		change_hbridge_dir_val(motor->hbridge, motor->desired_speed > 0);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	bfcc      	ite	gt
 8001a2a:	2301      	movgt	r3, #1
 8001a2c:	2300      	movle	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4619      	mov	r1, r3
 8001a32:	4610      	mov	r0, r2
 8001a34:	f7fe fd14 	bl	8000460 <change_hbridge_dir_val>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	00000000 	.word	0x00000000

08001a44 <move_motor_to_target>:

void move_motor_to_target(Motor *motor) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    // TODO need to test this blind implementation, may be some problems wrapping across counts boundaries
    float speed = calculate_pid(motor->control, motor->desired_counts, motor->encoder->counts);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	ee07 3a10 	vmov	s14, r3
 8001a66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a6a:	eef0 0a47 	vmov.f32	s1, s14
 8001a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a72:	4610      	mov	r0, r2
 8001a74:	f7fe fbda 	bl	800022c <calculate_pid>
 8001a78:	ed87 0a03 	vstr	s0, [r7, #12]
    set_motor_speed(motor, speed);
 8001a7c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff55 	bl	8001930 <set_motor_speed>
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <new_pin>:
#include "pin.h"

Pin *new_pin(GPIO_TypeDef *_port, uint16_t _pin) {
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	807b      	strh	r3, [r7, #2]
    Pin *pin = (Pin *) malloc(sizeof(Pin));
 8001a9a:	2008      	movs	r0, #8
 8001a9c:	f005 fbee 	bl	800727c <malloc>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]
    pin->port = _port;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	601a      	str	r2, [r3, #0]
    pin->pin = _pin;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	887a      	ldrh	r2, [r7, #2]
 8001aae:	809a      	strh	r2, [r3, #4]

    return pin;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <read_pin_value>:

bool read_pin_value(Pin* pin) {
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(pin->port, pin->pin);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	889b      	ldrh	r3, [r3, #4]
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f000 ff41 	bl	8002954 <HAL_GPIO_ReadPin>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2301      	movne	r3, #1
 8001ada:	2300      	moveq	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <write_pin_value>:

void write_pin_value(Pin* pin, bool val) {
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(pin->port, pin->pin, val);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	889b      	ldrh	r3, [r3, #4]
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f000 ff41 	bl	8002984 <HAL_GPIO_WritePin>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <new_quad_encoder>:
#include "quad_encoder.h"

QuadEncoder *new_quad_encoder(TIM_HandleTypeDef *_htim, TIM_TypeDef *_tim) {
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
    QuadEncoder *quad_encoder = (QuadEncoder *) malloc(sizeof(QuadEncoder));
 8001b14:	2010      	movs	r0, #16
 8001b16:	f005 fbb1 	bl	800727c <malloc>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	60fb      	str	r3, [r7, #12]
    quad_encoder->tim = _tim;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	605a      	str	r2, [r3, #4]
    quad_encoder->htim = _htim;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
    quad_encoder->counts = 0;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
    quad_encoder->counts_raw_prev = 0;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	819a      	strh	r2, [r3, #12]
    quad_encoder->counts_raw_now = 0;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	81da      	strh	r2, [r3, #14]
    return quad_encoder;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <init_quad_encoder>:

void init_quad_encoder(QuadEncoder* quad_encoder) {
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
	set_encoder_counts(quad_encoder, 0);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f829 	bl	8001ba8 <set_encoder_counts>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <update_quad_encoder>:

void update_quad_encoder(QuadEncoder* quad_encoder) {
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	quad_encoder->counts_raw_now = quad_encoder->tim->CNT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	81da      	strh	r2, [r3, #14]
    quad_encoder->counts += (int16_t)(quad_encoder->counts_raw_now - quad_encoder->counts_raw_prev);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001b7c:	b291      	uxth	r1, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001b84:	b292      	uxth	r2, r2
 8001b86:	1a8a      	subs	r2, r1, r2
 8001b88:	b292      	uxth	r2, r2
 8001b8a:	b212      	sxth	r2, r2
 8001b8c:	441a      	add	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	609a      	str	r2, [r3, #8]
    quad_encoder->counts_raw_prev = quad_encoder->counts_raw_now;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	819a      	strh	r2, [r3, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <set_encoder_counts>:

void set_encoder_counts(QuadEncoder *quad_encoder, int32_t counts) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
	quad_encoder->counts = 0;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
	quad_encoder->counts_raw_prev = quad_encoder->tim->CNT;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	819a      	strh	r2, [r3, #12]
	quad_encoder->counts_raw_now = quad_encoder->tim->CNT;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	81da      	strh	r2, [r3, #14]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_MspInit+0x44>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <HAL_MspInit+0x44>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6193      	str	r3, [r2, #24]
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_MspInit+0x44>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_MspInit+0x44>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_MspInit+0x44>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_MspInit+0x44>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_I2C_MspInit+0x9c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d138      	bne.n	8001cb8 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_I2C_MspInit+0xa0>)
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <HAL_I2C_MspInit+0xa0>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6153      	str	r3, [r2, #20]
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_I2C_MspInit+0xa0>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = J_I2C_SCL_Pin|J_I2C_SDA_Pin;
 8001c5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c64:	2312      	movs	r3, #18
 8001c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c70:	2304      	movs	r3, #4
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <HAL_I2C_MspInit+0xa4>)
 8001c7c:	f000 fbf4 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_I2C_MspInit+0xa0>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_I2C_MspInit+0xa0>)
 8001c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c8a:	61d3      	str	r3, [r2, #28]
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_I2C_MspInit+0xa0>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	201f      	movs	r0, #31
 8001c9e:	f000 fb54 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ca2:	201f      	movs	r0, #31
 8001ca4:	f000 fb6d 	bl	8002382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2020      	movs	r0, #32
 8001cae:	f000 fb4c 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cb2:	2020      	movs	r0, #32
 8001cb4:	f000 fb65 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40005400 	.word	0x40005400
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	48000400 	.word	0x48000400

08001ccc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <HAL_I2C_MspDeInit+0x48>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d115      	bne.n	8001d0a <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_I2C_MspDeInit+0x4c>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <HAL_I2C_MspDeInit+0x4c>)
 8001ce4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ce8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(J_I2C_SCL_GPIO_Port, J_I2C_SCL_Pin);
 8001cea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cee:	480b      	ldr	r0, [pc, #44]	; (8001d1c <HAL_I2C_MspDeInit+0x50>)
 8001cf0:	f000 fd44 	bl	800277c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(J_I2C_SDA_GPIO_Port, J_I2C_SDA_Pin);
 8001cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cf8:	4808      	ldr	r0, [pc, #32]	; (8001d1c <HAL_I2C_MspDeInit+0x50>)
 8001cfa:	f000 fd3f 	bl	800277c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001cfe:	201f      	movs	r0, #31
 8001d00:	f000 fb4d 	bl	800239e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001d04:	2020      	movs	r0, #32
 8001d06:	f000 fb4a 	bl	800239e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40005400 	.word	0x40005400
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	48000400 	.word	0x48000400

08001d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <HAL_TIM_Base_MspInit+0x8c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10c      	bne.n	8001d4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <HAL_TIM_Base_MspInit+0x90>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <HAL_TIM_Base_MspInit+0x90>)
 8001d38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d3c:	6193      	str	r3, [r2, #24]
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_TIM_Base_MspInit+0x90>)
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d4a:	e02a      	b.n	8001da2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <HAL_TIM_Base_MspInit+0x94>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d114      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_TIM_Base_MspInit+0x90>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <HAL_TIM_Base_MspInit+0x90>)
 8001d5c:	f043 0310 	orr.w	r3, r3, #16
 8001d60:	61d3      	str	r3, [r2, #28]
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_TIM_Base_MspInit+0x90>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2101      	movs	r1, #1
 8001d72:	2036      	movs	r0, #54	; 0x36
 8001d74:	f000 fae9 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d78:	2036      	movs	r0, #54	; 0x36
 8001d7a:	f000 fb02 	bl	8002382 <HAL_NVIC_EnableIRQ>
}
 8001d7e:	e010      	b.n	8001da2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <HAL_TIM_Base_MspInit+0x98>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10b      	bne.n	8001da2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_TIM_Base_MspInit+0x90>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <HAL_TIM_Base_MspInit+0x90>)
 8001d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d94:	6193      	str	r3, [r2, #24]
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_TIM_Base_MspInit+0x90>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40012c00 	.word	0x40012c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40001000 	.word	0x40001000
 8001db8:	40013400 	.word	0x40013400

08001dbc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ddc:	d129      	bne.n	8001e32 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dde:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a2d      	ldr	r2, [pc, #180]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	4a27      	ldr	r2, [pc, #156]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e00:	6153      	str	r3, [r2, #20]
 8001e02:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M0_QUAD_A_Pin|M0_QUAD_B_Pin;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	4619      	mov	r1, r3
 8001e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2c:	f000 fb1c 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e30:	e02d      	b.n	8001e8e <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM3)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d128      	bne.n	8001e8e <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	61d3      	str	r3, [r2, #28]
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5e:	6153      	str	r3, [r2, #20]
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_QUAD_B_Pin|M1_QUAD_A_Pin;
 8001e6c:	2350      	movs	r3, #80	; 0x50
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4619      	mov	r1, r3
 8001e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8a:	f000 faed 	bl	8002468 <HAL_GPIO_Init>
}
 8001e8e:	bf00      	nop
 8001e90:	3730      	adds	r7, #48	; 0x30
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40000400 	.word	0x40000400

08001ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_TIM_MspPostInit+0x64>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d11b      	bne.n	8001efa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_TIM_MspPostInit+0x68>)
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_TIM_MspPostInit+0x68>)
 8001ec8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ecc:	6153      	str	r3, [r2, #20]
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_TIM_MspPostInit+0x68>)
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M0_PWM_Pin|M1_PWM_Pin;
 8001eda:	2303      	movs	r3, #3
 8001edc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	; (8001f0c <HAL_TIM_MspPostInit+0x6c>)
 8001ef6:	f000 fab7 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001efa:	bf00      	nop
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	48000800 	.word	0x48000800

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f64:	f000 f8d2 	bl	800210c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <I2C1_EV_IRQHandler+0x10>)
 8001f72:	f000 ff45 	bl	8002e00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000090 	.word	0x20000090

08001f80 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <I2C1_ER_IRQHandler+0x10>)
 8001f86:	f000 ff55 	bl	8002e34 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000090 	.word	0x20000090

08001f94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <TIM6_DAC_IRQHandler+0x10>)
 8001f9a:	f004 f88b 	bl	80060b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200001c0 	.word	0x200001c0

08001fa8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <_sbrk+0x50>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <_sbrk+0x16>
		heap_end = &end;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <_sbrk+0x50>)
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <_sbrk+0x54>)
 8001fbc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <_sbrk+0x50>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <_sbrk+0x50>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	466a      	mov	r2, sp
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d907      	bls.n	8001fe2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001fd2:	f005 f929 	bl	8007228 <__errno>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	220c      	movs	r2, #12
 8001fda:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe0:	e006      	b.n	8001ff0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <_sbrk+0x50>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <_sbrk+0x50>)
 8001fec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000284 	.word	0x20000284
 8001ffc:	200002a0 	.word	0x200002a0

08002000 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <SystemInit+0x28>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	4a07      	ldr	r2, [pc, #28]	; (8002028 <SystemInit+0x28>)
 800200c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SystemInit+0x28>)
 8002016:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800201a:	609a      	str	r2, [r3, #8]
#endif
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800202c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002064 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002030:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002032:	e003      	b.n	800203c <LoopCopyDataInit>

08002034 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002036:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002038:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800203a:	3104      	adds	r1, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800203c:	480b      	ldr	r0, [pc, #44]	; (800206c <LoopForever+0xa>)
	ldr	r3, =_edata
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002040:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002042:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002044:	d3f6      	bcc.n	8002034 <CopyDataInit>
	ldr	r2, =_sbss
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002048:	e002      	b.n	8002050 <LoopFillZerobss>

0800204a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800204a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800204c:	f842 3b04 	str.w	r3, [r2], #4

08002050 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <LoopForever+0x16>)
	cmp	r2, r3
 8002052:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002054:	d3f9      	bcc.n	800204a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002056:	f7ff ffd3 	bl	8002000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800205a:	f005 f8eb 	bl	8007234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800205e:	f7fe ffc1 	bl	8000fe4 <main>

08002062 <LoopForever>:

LoopForever:
    b LoopForever
 8002062:	e7fe      	b.n	8002062 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002064:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002068:	08007450 	.word	0x08007450
	ldr	r0, =_sdata
 800206c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002070:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8002074:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8002078:	2000029c 	.word	0x2000029c

0800207c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800207c:	e7fe      	b.n	800207c <ADC1_2_IRQHandler>
	...

08002080 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_Init+0x28>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_Init+0x28>)
 800208a:	f043 0310 	orr.w	r3, r3, #16
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 f94f 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002096:	2000      	movs	r0, #0
 8002098:	f000 f808 	bl	80020ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209c:	f7ff fd9e 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40022000 	.word	0x40022000

080020ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x54>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_InitTick+0x58>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f975 	bl	80023ba <HAL_SYSTICK_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00e      	b.n	80020f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b0f      	cmp	r3, #15
 80020de:	d80a      	bhi.n	80020f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e0:	2200      	movs	r2, #0
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f000 f92f 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <HAL_InitTick+0x5c>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000004 	.word	0x20000004
 8002104:	2000000c 	.word	0x2000000c
 8002108:	20000008 	.word	0x20000008

0800210c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x20>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_IncTick+0x24>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_IncTick+0x24>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	2000000c 	.word	0x2000000c
 8002130:	20000288 	.word	0x20000288

08002134 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;  
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_GetTick+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000288 	.word	0x20000288

0800214c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4907      	ldr	r1, [pc, #28]	; (80021e8 <__NVIC_EnableIRQ+0x38>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db12      	blt.n	8002224 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	490a      	ldr	r1, [pc, #40]	; (8002230 <__NVIC_DisableIRQ+0x44>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	3320      	adds	r3, #32
 8002214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002218:	f3bf 8f4f 	dsb	sy
}
 800221c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800221e:	f3bf 8f6f 	isb	sy
}
 8002222:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff05 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff1a 	bl	8002194 <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff0d 	bl	80021b0 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff1d 	bl	80021ec <__NVIC_DisableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff94 	bl	80022f0 <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d005      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2204      	movs	r2, #4
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	e027      	b.n	8002444 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 020e 	bic.w	r2, r2, #14
 8002402:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f202 	lsl.w	r2, r1, r2
 8002422:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
    } 
  }
  return status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002476:	e160      	b.n	800273a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8152 	beq.w	8002734 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d005      	beq.n	80024a8 <HAL_GPIO_Init+0x40>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d130      	bne.n	800250a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024de:	2201      	movs	r2, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 0201 	and.w	r2, r3, #1
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b03      	cmp	r3, #3
 8002514:	d017      	beq.n	8002546 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d123      	bne.n	800259a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	6939      	ldr	r1, [r7, #16]
 8002596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0203 	and.w	r2, r3, #3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80ac 	beq.w	8002734 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025dc:	4b5e      	ldr	r3, [pc, #376]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a5d      	ldr	r2, [pc, #372]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b5b      	ldr	r3, [pc, #364]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025f4:	4a59      	ldr	r2, [pc, #356]	; (800275c <HAL_GPIO_Init+0x2f4>)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	3302      	adds	r3, #2
 80025fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800261e:	d025      	beq.n	800266c <HAL_GPIO_Init+0x204>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a4f      	ldr	r2, [pc, #316]	; (8002760 <HAL_GPIO_Init+0x2f8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d01f      	beq.n	8002668 <HAL_GPIO_Init+0x200>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a4e      	ldr	r2, [pc, #312]	; (8002764 <HAL_GPIO_Init+0x2fc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d019      	beq.n	8002664 <HAL_GPIO_Init+0x1fc>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a4d      	ldr	r2, [pc, #308]	; (8002768 <HAL_GPIO_Init+0x300>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_GPIO_Init+0x1f8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a4c      	ldr	r2, [pc, #304]	; (800276c <HAL_GPIO_Init+0x304>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00d      	beq.n	800265c <HAL_GPIO_Init+0x1f4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a4b      	ldr	r2, [pc, #300]	; (8002770 <HAL_GPIO_Init+0x308>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <HAL_GPIO_Init+0x1f0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a4a      	ldr	r2, [pc, #296]	; (8002774 <HAL_GPIO_Init+0x30c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d101      	bne.n	8002654 <HAL_GPIO_Init+0x1ec>
 8002650:	2306      	movs	r3, #6
 8002652:	e00c      	b.n	800266e <HAL_GPIO_Init+0x206>
 8002654:	2307      	movs	r3, #7
 8002656:	e00a      	b.n	800266e <HAL_GPIO_Init+0x206>
 8002658:	2305      	movs	r3, #5
 800265a:	e008      	b.n	800266e <HAL_GPIO_Init+0x206>
 800265c:	2304      	movs	r3, #4
 800265e:	e006      	b.n	800266e <HAL_GPIO_Init+0x206>
 8002660:	2303      	movs	r3, #3
 8002662:	e004      	b.n	800266e <HAL_GPIO_Init+0x206>
 8002664:	2302      	movs	r3, #2
 8002666:	e002      	b.n	800266e <HAL_GPIO_Init+0x206>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_GPIO_Init+0x206>
 800266c:	2300      	movs	r3, #0
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	f002 0203 	and.w	r2, r2, #3
 8002674:	0092      	lsls	r2, r2, #2
 8002676:	4093      	lsls	r3, r2
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800267e:	4937      	ldr	r1, [pc, #220]	; (800275c <HAL_GPIO_Init+0x2f4>)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800268c:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <HAL_GPIO_Init+0x310>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026b0:	4a31      	ldr	r2, [pc, #196]	; (8002778 <HAL_GPIO_Init+0x310>)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026b6:	4b30      	ldr	r3, [pc, #192]	; (8002778 <HAL_GPIO_Init+0x310>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026da:	4a27      	ldr	r2, [pc, #156]	; (8002778 <HAL_GPIO_Init+0x310>)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_GPIO_Init+0x310>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002704:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <HAL_GPIO_Init+0x310>)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_GPIO_Init+0x310>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <HAL_GPIO_Init+0x310>)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	f47f ae97 	bne.w	8002478 <HAL_GPIO_Init+0x10>
  }
}
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000
 8002760:	48000400 	.word	0x48000400
 8002764:	48000800 	.word	0x48000800
 8002768:	48000c00 	.word	0x48000c00
 800276c:	48001000 	.word	0x48001000
 8002770:	48001400 	.word	0x48001400
 8002774:	48001800 	.word	0x48001800
 8002778:	40010400 	.word	0x40010400

0800277c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800278a:	e0c4      	b.n	8002916 <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800278c:	2201      	movs	r2, #1
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80b7 	beq.w	8002910 <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027a2:	4a64      	ldr	r2, [pc, #400]	; (8002934 <HAL_GPIO_DeInit+0x1b8>)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ca:	d025      	beq.n	8002818 <HAL_GPIO_DeInit+0x9c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a5a      	ldr	r2, [pc, #360]	; (8002938 <HAL_GPIO_DeInit+0x1bc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d01f      	beq.n	8002814 <HAL_GPIO_DeInit+0x98>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a59      	ldr	r2, [pc, #356]	; (800293c <HAL_GPIO_DeInit+0x1c0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d019      	beq.n	8002810 <HAL_GPIO_DeInit+0x94>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a58      	ldr	r2, [pc, #352]	; (8002940 <HAL_GPIO_DeInit+0x1c4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_GPIO_DeInit+0x90>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a57      	ldr	r2, [pc, #348]	; (8002944 <HAL_GPIO_DeInit+0x1c8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00d      	beq.n	8002808 <HAL_GPIO_DeInit+0x8c>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a56      	ldr	r2, [pc, #344]	; (8002948 <HAL_GPIO_DeInit+0x1cc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <HAL_GPIO_DeInit+0x88>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a55      	ldr	r2, [pc, #340]	; (800294c <HAL_GPIO_DeInit+0x1d0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_GPIO_DeInit+0x84>
 80027fc:	2306      	movs	r3, #6
 80027fe:	e00c      	b.n	800281a <HAL_GPIO_DeInit+0x9e>
 8002800:	2307      	movs	r3, #7
 8002802:	e00a      	b.n	800281a <HAL_GPIO_DeInit+0x9e>
 8002804:	2305      	movs	r3, #5
 8002806:	e008      	b.n	800281a <HAL_GPIO_DeInit+0x9e>
 8002808:	2304      	movs	r3, #4
 800280a:	e006      	b.n	800281a <HAL_GPIO_DeInit+0x9e>
 800280c:	2303      	movs	r3, #3
 800280e:	e004      	b.n	800281a <HAL_GPIO_DeInit+0x9e>
 8002810:	2302      	movs	r3, #2
 8002812:	e002      	b.n	800281a <HAL_GPIO_DeInit+0x9e>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_GPIO_DeInit+0x9e>
 8002818:	2300      	movs	r3, #0
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	f002 0203 	and.w	r2, r2, #3
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	4093      	lsls	r3, r2
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	429a      	cmp	r2, r3
 8002828:	d132      	bne.n	8002890 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800282a:	4b49      	ldr	r3, [pc, #292]	; (8002950 <HAL_GPIO_DeInit+0x1d4>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	4947      	ldr	r1, [pc, #284]	; (8002950 <HAL_GPIO_DeInit+0x1d4>)
 8002834:	4013      	ands	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002838:	4b45      	ldr	r3, [pc, #276]	; (8002950 <HAL_GPIO_DeInit+0x1d4>)
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	4943      	ldr	r1, [pc, #268]	; (8002950 <HAL_GPIO_DeInit+0x1d4>)
 8002842:	4013      	ands	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002846:	4b42      	ldr	r3, [pc, #264]	; (8002950 <HAL_GPIO_DeInit+0x1d4>)
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	4940      	ldr	r1, [pc, #256]	; (8002950 <HAL_GPIO_DeInit+0x1d4>)
 8002850:	4013      	ands	r3, r2
 8002852:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002854:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <HAL_GPIO_DeInit+0x1d4>)
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	493c      	ldr	r1, [pc, #240]	; (8002950 <HAL_GPIO_DeInit+0x1d4>)
 800285e:	4013      	ands	r3, r2
 8002860:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002872:	4a30      	ldr	r2, [pc, #192]	; (8002934 <HAL_GPIO_DeInit+0x1b8>)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	43da      	mvns	r2, r3
 8002882:	482c      	ldr	r0, [pc, #176]	; (8002934 <HAL_GPIO_DeInit+0x1b8>)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	400a      	ands	r2, r1
 800288a:	3302      	adds	r3, #2
 800288c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2103      	movs	r1, #3
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	401a      	ands	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	08da      	lsrs	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3208      	adds	r2, #8
 80028ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	08d2      	lsrs	r2, r2, #3
 80028c6:	4019      	ands	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2103      	movs	r1, #3
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	401a      	ands	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	2101      	movs	r1, #1
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	401a      	ands	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2103      	movs	r1, #3
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	401a      	ands	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3301      	adds	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	f47f af34 	bne.w	800278c <HAL_GPIO_DeInit+0x10>
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	48000400 	.word	0x48000400
 800293c:	48000800 	.word	0x48000800
 8002940:	48000c00 	.word	0x48000c00
 8002944:	48001000 	.word	0x48001000
 8002948:	48001400 	.word	0x48001400
 800294c:	48001800 	.word	0x48001800
 8002950:	40010400 	.word	0x40010400

08002954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	e001      	b.n	8002976 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	4613      	mov	r3, r2
 8002992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029a0:	e002      	b.n	80029a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e081      	b.n	8002aca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff f922 	bl	8001c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2224      	movs	r2, #36	; 0x24
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	e006      	b.n	8002a3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d104      	bne.n	8002a4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69d9      	ldr	r1, [r3, #28]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1a      	ldr	r2, [r3, #32]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e021      	b.n	8002b28 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	; 0x24
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff f8e5 	bl	8001ccc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b4c:	2b28      	cmp	r3, #40	; 0x28
 8002b4e:	f040 808a 	bne.w	8002c66 <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07e      	b.n	8002c68 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002b6a:	f248 0101 	movw	r1, #32769	; 0x8001
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f001 f9e8 	bl	8003f44 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e072      	b.n	8002c68 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b2a      	cmp	r3, #42	; 0x2a
 8002b94:	d12a      	bne.n	8002bec <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b96:	2102      	movs	r1, #2
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f001 f9d3 	bl	8003f44 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bac:	d11e      	bne.n	8002bec <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bbc:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d012      	beq.n	8002bec <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fbfd 	bl	80023d2 <HAL_DMA_Abort_IT>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002be8:	4610      	mov	r0, r2
 8002bea:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2229      	movs	r2, #41	; 0x29
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c10:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 8002c32:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	0c1b      	lsrs	r3, r3, #16
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d103      	bne.n	8002c50 <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002c58:	f248 0101 	movw	r1, #32769	; 0x8001
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f001 f90d 	bl	8003e7c <I2C_Enable_IRQ>

    return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
  }
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	08003de3 	.word	0x08003de3
 8002c74:	08002f6f 	.word	0x08002f6f

08002c78 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c94:	2b28      	cmp	r3, #40	; 0x28
 8002c96:	f040 808a 	bne.w	8002dae <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07e      	b.n	8002db0 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002cb2:	f248 0102 	movw	r1, #32770	; 0x8002
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f001 f944 	bl	8003f44 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e072      	b.n	8002db0 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b29      	cmp	r3, #41	; 0x29
 8002cdc:	d12a      	bne.n	8002d34 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cde:	2101      	movs	r1, #1
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f001 f92f 	bl	8003f44 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf4:	d11e      	bne.n	8002d34 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d04:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d012      	beq.n	8002d34 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 8002d14:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fb59 	bl	80023d2 <HAL_DMA_Abort_IT>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d006      	beq.n	8002d34 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d30:	4610      	mov	r0, r2
 8002d32:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	222a      	movs	r2, #42	; 0x2a
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d58:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	88fa      	ldrh	r2, [r7, #6]
 8002d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 8002d7a:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d103      	bne.n	8002d98 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2208      	movs	r2, #8
 8002d96:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002da0:	f248 0102 	movw	r1, #32770	; 0x8002
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f001 f869 	bl	8003e7c <I2C_Enable_IRQ>

    return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
  }
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	08003de3 	.word	0x08003de3
 8002dbc:	08002f6f 	.word	0x08002f6f

08002dc0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d10d      	bne.n	8002df0 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2228      	movs	r2, #40	; 0x28
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <HAL_I2C_EnableListen_IT+0x3c>)
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002de2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f001 f848 	bl	8003e7c <I2C_Enable_IRQ>

    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e000      	b.n	8002df2 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
  }
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	08002f6f 	.word	0x08002f6f

08002e00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	68f9      	ldr	r1, [r7, #12]
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	09db      	lsrs	r3, r3, #7
 8002e5c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e78:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	0a9b      	lsrs	r3, r3, #10
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	09db      	lsrs	r3, r3, #7
 8002e8a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f043 0208 	orr.w	r2, r3, #8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	0a5b      	lsrs	r3, r3, #9
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	09db      	lsrs	r3, r3, #7
 8002eb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	f043 0202 	orr.w	r2, r3, #2
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 030b 	and.w	r3, r3, #11
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fe5f 	bl	8003bac <I2C_ITError>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <I2C_Slave_ISR_IT+0x24>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e0ec      	b.n	800316c <I2C_Slave_ISR_IT+0x1fe>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002fb2:	6939      	ldr	r1, [r7, #16]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fc99 	bl	80038ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d04d      	beq.n	8003062 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d047      	beq.n	8003062 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d128      	bne.n	800302e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b28      	cmp	r3, #40	; 0x28
 8002fe6:	d108      	bne.n	8002ffa <I2C_Slave_ISR_IT+0x8c>
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fee:	d104      	bne.n	8002ffa <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ff0:	6939      	ldr	r1, [r7, #16]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fd84 	bl	8003b00 <I2C_ITListenCplt>
 8002ff8:	e032      	b.n	8003060 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b29      	cmp	r3, #41	; 0x29
 8003004:	d10e      	bne.n	8003024 <I2C_Slave_ISR_IT+0xb6>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800300c:	d00a      	beq.n	8003024 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2210      	movs	r2, #16
 8003014:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 febf 	bl	8003d9a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fb3d 	bl	800369c <I2C_ITSlaveSeqCplt>
 8003022:	e01d      	b.n	8003060 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2210      	movs	r2, #16
 800302a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800302c:	e096      	b.n	800315c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2210      	movs	r2, #16
 8003034:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f043 0204 	orr.w	r2, r3, #4
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <I2C_Slave_ISR_IT+0xe4>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304e:	f040 8085 	bne.w	800315c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	4619      	mov	r1, r3
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fda7 	bl	8003bac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800305e:	e07d      	b.n	800315c <I2C_Slave_ISR_IT+0x1ee>
 8003060:	e07c      	b.n	800315c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d030      	beq.n	80030d0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	089b      	lsrs	r3, r3, #2
 8003072:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003076:	2b00      	cmp	r3, #0
 8003078:	d02a      	beq.n	80030d0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d018      	beq.n	80030b6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d14f      	bne.n	8003160 <I2C_Slave_ISR_IT+0x1f2>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030c6:	d04b      	beq.n	8003160 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fae7 	bl	800369c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80030ce:	e047      	b.n	8003160 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	08db      	lsrs	r3, r3, #3
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	08db      	lsrs	r3, r3, #3
 80030e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80030e8:	6939      	ldr	r1, [r7, #16]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fa15 	bl	800351a <I2C_ITAddrCplt>
 80030f0:	e037      	b.n	8003162 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d031      	beq.n	8003162 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	085b      	lsrs	r3, r3, #1
 8003102:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003106:	2b00      	cmp	r3, #0
 8003108:	d02b      	beq.n	8003162 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d018      	beq.n	8003146 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
 8003144:	e00d      	b.n	8003162 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800314c:	d002      	beq.n	8003154 <I2C_Slave_ISR_IT+0x1e6>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 faa1 	bl	800369c <I2C_ITSlaveSeqCplt>
 800315a:	e002      	b.n	8003162 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003160:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <I2C_Master_ISR_DMA+0x1a>
 800318a:	2302      	movs	r3, #2
 800318c:	e0e1      	b.n	8003352 <I2C_Master_ISR_DMA+0x1de>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d017      	beq.n	80031d2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d011      	beq.n	80031d2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2210      	movs	r2, #16
 80031b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f043 0204 	orr.w	r2, r3, #4
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80031c2:	2120      	movs	r1, #32
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fe59 	bl	8003e7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 fde5 	bl	8003d9a <I2C_Flush_TXDR>
 80031d0:	e0ba      	b.n	8003348 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	09db      	lsrs	r3, r3, #7
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d072      	beq.n	80032c4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d06c      	beq.n	80032c4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d04e      	beq.n	80032a2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	b29b      	uxth	r3, r3
 800320c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003210:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2bff      	cmp	r3, #255	; 0xff
 800321a:	d906      	bls.n	800322a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	22ff      	movs	r2, #255	; 0xff
 8003220:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003222:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	e010      	b.n	800324c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800323c:	d003      	beq.n	8003246 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	e002      	b.n	800324c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800324a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	b2da      	uxtb	r2, r3
 8003252:	8a79      	ldrh	r1, [r7, #18]
 8003254:	2300      	movs	r3, #0
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fde0 	bl	8003e20 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b22      	cmp	r3, #34	; 0x22
 800327c:	d108      	bne.n	8003290 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800328c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800328e:	e05b      	b.n	8003348 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800329e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80032a0:	e052      	b.n	8003348 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032b0:	d003      	beq.n	80032ba <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f9b5 	bl	8003622 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80032b8:	e046      	b.n	8003348 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80032ba:	2140      	movs	r1, #64	; 0x40
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fc75 	bl	8003bac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80032c2:	e041      	b.n	8003348 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	099b      	lsrs	r3, r3, #6
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d029      	beq.n	8003324 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	099b      	lsrs	r3, r3, #6
 80032d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d023      	beq.n	8003324 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d119      	bne.n	800331a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032f4:	d027      	beq.n	8003346 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032fe:	d108      	bne.n	8003312 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800330e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003310:	e019      	b.n	8003346 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f985 	bl	8003622 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003318:	e015      	b.n	8003346 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800331a:	2140      	movs	r1, #64	; 0x40
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 fc45 	bl	8003bac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003322:	e010      	b.n	8003346 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00b      	beq.n	8003348 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fa0a 	bl	8003758 <I2C_ITMasterCplt>
 8003344:	e000      	b.n	8003348 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003346:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b088      	sub	sp, #32
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <I2C_Slave_ISR_DMA+0x24>
 800337a:	2302      	movs	r3, #2
 800337c:	e0c9      	b.n	8003512 <I2C_Slave_ISR_DMA+0x1b8>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 faa3 	bl	80038ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 809a 	beq.w	80034e8 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8093 	beq.w	80034e8 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0b9b      	lsrs	r3, r3, #14
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0bdb      	lsrs	r3, r3, #15
 80033d2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d07f      	beq.n	80034da <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0bdb      	lsrs	r3, r3, #15
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00d      	beq.n	8003422 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0b9b      	lsrs	r3, r3, #14
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800341e:	2301      	movs	r3, #1
 8003420:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d128      	bne.n	800347a <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b28      	cmp	r3, #40	; 0x28
 8003432:	d108      	bne.n	8003446 <I2C_Slave_ISR_DMA+0xec>
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800343a:	d104      	bne.n	8003446 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fb5e 	bl	8003b00 <I2C_ITListenCplt>
 8003444:	e048      	b.n	80034d8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b29      	cmp	r3, #41	; 0x29
 8003450:	d10e      	bne.n	8003470 <I2C_Slave_ISR_DMA+0x116>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003458:	d00a      	beq.n	8003470 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2210      	movs	r2, #16
 8003460:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fc99 	bl	8003d9a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f917 	bl	800369c <I2C_ITSlaveSeqCplt>
 800346e:	e033      	b.n	80034d8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2210      	movs	r2, #16
 8003476:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003478:	e034      	b.n	80034e4 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2210      	movs	r2, #16
 8003480:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f043 0204 	orr.w	r2, r3, #4
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003494:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <I2C_Slave_ISR_DMA+0x14a>
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a2:	d11f      	bne.n	80034e4 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b21      	cmp	r3, #33	; 0x21
 80034a8:	d002      	beq.n	80034b0 <I2C_Slave_ISR_DMA+0x156>
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b29      	cmp	r3, #41	; 0x29
 80034ae:	d103      	bne.n	80034b8 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2221      	movs	r2, #33	; 0x21
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
 80034b6:	e008      	b.n	80034ca <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	2b22      	cmp	r3, #34	; 0x22
 80034bc:	d002      	beq.n	80034c4 <I2C_Slave_ISR_DMA+0x16a>
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b2a      	cmp	r3, #42	; 0x2a
 80034c2:	d102      	bne.n	80034ca <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2222      	movs	r2, #34	; 0x22
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	4619      	mov	r1, r3
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fb6b 	bl	8003bac <I2C_ITError>
      if (treatdmanack == 1U)
 80034d6:	e005      	b.n	80034e4 <I2C_Slave_ISR_DMA+0x18a>
 80034d8:	e004      	b.n	80034e4 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2210      	movs	r2, #16
 80034e0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034e2:	e011      	b.n	8003508 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80034e4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034e6:	e00f      	b.n	8003508 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	08db      	lsrs	r3, r3, #3
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	08db      	lsrs	r3, r3, #3
 80034f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f809 	bl	800351a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003530:	2b28      	cmp	r3, #40	; 0x28
 8003532:	d16a      	bne.n	800360a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	0c1b      	lsrs	r3, r3, #16
 800354c:	b29b      	uxth	r3, r3
 800354e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003552:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	b29b      	uxth	r3, r3
 800355c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003560:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800356e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d138      	bne.n	80035ea <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003578:	897b      	ldrh	r3, [r7, #10]
 800357a:	09db      	lsrs	r3, r3, #7
 800357c:	b29a      	uxth	r2, r3
 800357e:	89bb      	ldrh	r3, [r7, #12]
 8003580:	4053      	eors	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	f003 0306 	and.w	r3, r3, #6
 8003588:	2b00      	cmp	r3, #0
 800358a:	d11c      	bne.n	80035c6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800358c:	897b      	ldrh	r3, [r7, #10]
 800358e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d13b      	bne.n	800361a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2208      	movs	r2, #8
 80035ae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035b8:	89ba      	ldrh	r2, [r7, #12]
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fc3e 	bl	8000e40 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035c4:	e029      	b.n	800361a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80035c6:	893b      	ldrh	r3, [r7, #8]
 80035c8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fcb8 	bl	8003f44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035dc:	89ba      	ldrh	r2, [r7, #12]
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fc2c 	bl	8000e40 <HAL_I2C_AddrCallback>
}
 80035e8:	e017      	b.n	800361a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fca8 	bl	8003f44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035fc:	89ba      	ldrh	r2, [r7, #12]
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fd fc1c 	bl	8000e40 <HAL_I2C_AddrCallback>
}
 8003608:	e007      	b.n	800361a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2208      	movs	r2, #8
 8003610:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b21      	cmp	r3, #33	; 0x21
 800363c:	d115      	bne.n	800366a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2211      	movs	r2, #17
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003652:	2101      	movs	r1, #1
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fc75 	bl	8003f44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fc47 	bl	8002ef6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003668:	e014      	b.n	8003694 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2212      	movs	r2, #18
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800367e:	2102      	movs	r1, #2
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fc5f 	bl	8003f44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fc3b 	bl	8002f0a <HAL_I2C_MasterRxCpltCallback>
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	0b9b      	lsrs	r3, r3, #14
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e00d      	b.n	80036ee <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	0bdb      	lsrs	r3, r3, #15
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b29      	cmp	r3, #41	; 0x29
 80036f8:	d112      	bne.n	8003720 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2228      	movs	r2, #40	; 0x28
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2221      	movs	r2, #33	; 0x21
 8003706:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003708:	2101      	movs	r1, #1
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fc1a 	bl	8003f44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fc00 	bl	8002f1e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800371e:	e017      	b.n	8003750 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b2a      	cmp	r3, #42	; 0x2a
 800372a:	d111      	bne.n	8003750 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2228      	movs	r2, #40	; 0x28
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2222      	movs	r2, #34	; 0x22
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800373a:	2102      	movs	r1, #2
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fc01 	bl	8003f44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd fbd2 	bl	8000ef4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2220      	movs	r2, #32
 800376c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b21      	cmp	r3, #33	; 0x21
 8003778:	d107      	bne.n	800378a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800377a:	2101      	movs	r1, #1
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fbe1 	bl	8003f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2211      	movs	r2, #17
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
 8003788:	e00c      	b.n	80037a4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b22      	cmp	r3, #34	; 0x22
 8003794:	d106      	bne.n	80037a4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003796:	2102      	movs	r1, #2
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fbd3 	bl	8003f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2212      	movs	r2, #18
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b4d      	ldr	r3, [pc, #308]	; (80038e4 <I2C_ITMasterCplt+0x18c>)
 80037b0:	400b      	ands	r3, r1
 80037b2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a4a      	ldr	r2, [pc, #296]	; (80038e8 <I2C_ITMasterCplt+0x190>)
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d009      	beq.n	80037e0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2210      	movs	r2, #16
 80037d2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	f043 0204 	orr.w	r2, r3, #4
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b60      	cmp	r3, #96	; 0x60
 80037ea:	d10b      	bne.n	8003804 <I2C_ITMasterCplt+0xac>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003802:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fac8 	bl	8003d9a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b60      	cmp	r3, #96	; 0x60
 800381a:	d002      	beq.n	8003822 <I2C_ITMasterCplt+0xca>
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f9bf 	bl	8003bac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800382e:	e054      	b.n	80038da <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b21      	cmp	r3, #33	; 0x21
 800383a:	d124      	bne.n	8003886 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d10b      	bne.n	800386e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff fb63 	bl	8002f32 <HAL_I2C_MemTxCpltCallback>
}
 800386c:	e035      	b.n	80038da <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fb39 	bl	8002ef6 <HAL_I2C_MasterTxCpltCallback>
}
 8003884:	e029      	b.n	80038da <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b22      	cmp	r3, #34	; 0x22
 8003890:	d123      	bne.n	80038da <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d10b      	bne.n	80038c4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fb42 	bl	8002f46 <HAL_I2C_MemRxCpltCallback>
}
 80038c2:	e00a      	b.n	80038da <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff fb18 	bl	8002f0a <HAL_I2C_MasterRxCpltCallback>
}
 80038da:	bf00      	nop
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	fe00e800 	.word	0xfe00e800
 80038e8:	ffff0000 	.word	0xffff0000

080038ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003908:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2220      	movs	r2, #32
 8003910:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b21      	cmp	r3, #33	; 0x21
 8003916:	d002      	beq.n	800391e <I2C_ITSlaveCplt+0x32>
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b29      	cmp	r3, #41	; 0x29
 800391c:	d108      	bne.n	8003930 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800391e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fb0e 	bl	8003f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2221      	movs	r2, #33	; 0x21
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
 800392e:	e00d      	b.n	800394c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b22      	cmp	r3, #34	; 0x22
 8003934:	d002      	beq.n	800393c <I2C_ITSlaveCplt+0x50>
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	2b2a      	cmp	r3, #42	; 0x2a
 800393a:	d107      	bne.n	800394c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800393c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 faff 	bl	8003f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2222      	movs	r2, #34	; 0x22
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800395a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6859      	ldr	r1, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b64      	ldr	r3, [pc, #400]	; (8003af8 <I2C_ITSlaveCplt+0x20c>)
 8003968:	400b      	ands	r3, r1
 800396a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fa14 	bl	8003d9a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	0b9b      	lsrs	r3, r3, #14
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d013      	beq.n	80039a6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800398c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	2b00      	cmp	r3, #0
 8003994:	d020      	beq.n	80039d8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039a4:	e018      	b.n	80039d8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	0bdb      	lsrs	r3, r3, #15
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d012      	beq.n	80039d8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0304 	bic.w	r3, r3, #4
 80039ea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00c      	beq.n	8003a26 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	f043 0204 	orr.w	r2, r3, #4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d010      	beq.n	8003a74 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	4619      	mov	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f8a7 	bl	8003bac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b28      	cmp	r3, #40	; 0x28
 8003a68:	d141      	bne.n	8003aee <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a6a:	6979      	ldr	r1, [r7, #20]
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f847 	bl	8003b00 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a72:	e03c      	b.n	8003aee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a7c:	d014      	beq.n	8003aa8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fe0c 	bl	800369c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <I2C_ITSlaveCplt+0x210>)
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7fd fa8f 	bl	8000fc4 <HAL_I2C_ListenCpltCallback>
}
 8003aa6:	e022      	b.n	8003aee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b22      	cmp	r3, #34	; 0x22
 8003ab2:	d10e      	bne.n	8003ad2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd fa12 	bl	8000ef4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ad0:	e00d      	b.n	8003aee <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff fa18 	bl	8002f1e <HAL_I2C_SlaveTxCpltCallback>
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	fe00e800 	.word	0xfe00e800
 8003afc:	ffff0000 	.word	0xffff0000

08003b00 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a26      	ldr	r2, [pc, #152]	; (8003ba8 <I2C_ITListenCplt+0xa8>)
 8003b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d022      	beq.n	8003b7e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f043 0204 	orr.w	r2, r3, #4
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b7e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9de 	bl	8003f44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fd fa13 	bl	8000fc4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	ffff0000 	.word	0xffff0000

08003bac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a5d      	ldr	r2, [pc, #372]	; (8003d40 <I2C_ITError+0x194>)
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b28      	cmp	r3, #40	; 0x28
 8003be2:	d005      	beq.n	8003bf0 <I2C_ITError+0x44>
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b29      	cmp	r3, #41	; 0x29
 8003be8:	d002      	beq.n	8003bf0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	2b2a      	cmp	r3, #42	; 0x2a
 8003bee:	d10b      	bne.n	8003c08 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bf0:	2103      	movs	r1, #3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9a6 	bl	8003f44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2228      	movs	r2, #40	; 0x28
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a50      	ldr	r2, [pc, #320]	; (8003d44 <I2C_ITError+0x198>)
 8003c04:	635a      	str	r2, [r3, #52]	; 0x34
 8003c06:	e011      	b.n	8003c2c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c08:	f248 0103 	movw	r1, #32771	; 0x8003
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f999 	bl	8003f44 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b60      	cmp	r3, #96	; 0x60
 8003c1c:	d003      	beq.n	8003c26 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d039      	beq.n	8003cae <I2C_ITError+0x102>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b11      	cmp	r3, #17
 8003c3e:	d002      	beq.n	8003c46 <I2C_ITError+0x9a>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b21      	cmp	r3, #33	; 0x21
 8003c44:	d133      	bne.n	8003cae <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c54:	d107      	bne.n	8003c66 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c64:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe fbef 	bl	800244e <HAL_DMA_GetState>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d017      	beq.n	8003ca6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	4a33      	ldr	r2, [pc, #204]	; (8003d48 <I2C_ITError+0x19c>)
 8003c7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fba1 	bl	80023d2 <HAL_DMA_Abort_IT>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d04d      	beq.n	8003d32 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ca4:	e045      	b.n	8003d32 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f850 	bl	8003d4c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cac:	e041      	b.n	8003d32 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d039      	beq.n	8003d2a <I2C_ITError+0x17e>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b12      	cmp	r3, #18
 8003cba:	d002      	beq.n	8003cc2 <I2C_ITError+0x116>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b22      	cmp	r3, #34	; 0x22
 8003cc0:	d133      	bne.n	8003d2a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd0:	d107      	bne.n	8003ce2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ce0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe fbb1 	bl	800244e <HAL_DMA_GetState>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d017      	beq.n	8003d22 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <I2C_ITError+0x19c>)
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fb63 	bl	80023d2 <HAL_DMA_Abort_IT>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d011      	beq.n	8003d36 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d20:	e009      	b.n	8003d36 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f812 	bl	8003d4c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d28:	e005      	b.n	8003d36 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f80e 	bl	8003d4c <I2C_TreatErrorCallback>
  }
}
 8003d30:	e002      	b.n	8003d38 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d36:	bf00      	nop
}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	ffff0000 	.word	0xffff0000
 8003d44:	08002f6f 	.word	0x08002f6f
 8003d48:	08003de3 	.word	0x08003de3

08003d4c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b60      	cmp	r3, #96	; 0x60
 8003d5e:	d10e      	bne.n	8003d7e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff f8ef 	bl	8002f5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d7c:	e009      	b.n	8003d92 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fd f905 	bl	8000f9c <HAL_I2C_ErrorCallback>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d103      	bne.n	8003db8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2200      	movs	r2, #0
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d007      	beq.n	8003dd6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	619a      	str	r2, [r3, #24]
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff ff9b 	bl	8003d4c <I2C_TreatErrorCallback>
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	607b      	str	r3, [r7, #4]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	817b      	strh	r3, [r7, #10]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	0d5b      	lsrs	r3, r3, #21
 8003e3c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e40:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <I2C_TransferConfig+0x58>)
 8003e42:	430b      	orrs	r3, r1
 8003e44:	43db      	mvns	r3, r3
 8003e46:	ea02 0103 	and.w	r1, r2, r3
 8003e4a:	897b      	ldrh	r3, [r7, #10]
 8003e4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e50:	7a7b      	ldrb	r3, [r7, #9]
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	03ff63ff 	.word	0x03ff63ff

08003e7c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <I2C_Enable_IRQ+0xc0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003e9a:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <I2C_Enable_IRQ+0xc4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d11d      	bne.n	8003edc <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ea0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da03      	bge.n	8003eb0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003eae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003eb0:	887b      	ldrh	r3, [r7, #2]
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d103      	bne.n	8003ebe <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003ebc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d103      	bne.n	8003ecc <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003eca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ecc:	887b      	ldrh	r3, [r7, #2]
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d125      	bne.n	8003f1e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003eda:	e020      	b.n	8003f1e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003edc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da03      	bge.n	8003eec <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003eea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003eec:	887b      	ldrh	r3, [r7, #2]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003efc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003efe:	887b      	ldrh	r3, [r7, #2]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003f0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f10:	887b      	ldrh	r3, [r7, #2]
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d103      	bne.n	8003f1e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f043 0320 	orr.w	r3, r3, #32
 8003f1c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	08003175 	.word	0x08003175
 8003f40:	0800335b 	.word	0x0800335b

08003f44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003f54:	887b      	ldrh	r3, [r7, #2]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00f      	beq.n	8003f7e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003f64:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f72:	2b28      	cmp	r3, #40	; 0x28
 8003f74:	d003      	beq.n	8003f7e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00f      	beq.n	8003fa8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003f8e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f9c:	2b28      	cmp	r3, #40	; 0x28
 8003f9e:	d003      	beq.n	8003fa8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003fa6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003fa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da03      	bge.n	8003fb8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003fb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003fb8:	887b      	ldrh	r3, [r7, #2]
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d103      	bne.n	8003fc6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003fc6:	887b      	ldrh	r3, [r7, #2]
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d103      	bne.n	8003fd4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f043 0320 	orr.w	r3, r3, #32
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003fd4:	887b      	ldrh	r3, [r7, #2]
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d103      	bne.n	8003fe2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6819      	ldr	r1, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43da      	mvns	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b20      	cmp	r3, #32
 8004014:	d138      	bne.n	8004088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004020:	2302      	movs	r3, #2
 8004022:	e032      	b.n	800408a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	; 0x24
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	e000      	b.n	800408a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004088:	2302      	movs	r3, #2
  }
}
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d139      	bne.n	8004120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e033      	b.n	8004122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2224      	movs	r2, #36	; 0x24
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004136:	af00      	add	r7, sp, #0
 8004138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800413c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004140:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004146:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f001 b83a 	b.w	80051ca <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800415a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 816f 	beq.w	800444a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800416c:	4bb5      	ldr	r3, [pc, #724]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b04      	cmp	r3, #4
 8004176:	d00c      	beq.n	8004192 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004178:	4bb2      	ldr	r3, [pc, #712]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d15c      	bne.n	800423e <HAL_RCC_OscConfig+0x10e>
 8004184:	4baf      	ldr	r3, [pc, #700]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004190:	d155      	bne.n	800423e <HAL_RCC_OscConfig+0x10e>
 8004192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004196:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d102      	bne.n	80041c4 <HAL_RCC_OscConfig+0x94>
 80041be:	4ba1      	ldr	r3, [pc, #644]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	e015      	b.n	80041f0 <HAL_RCC_OscConfig+0xc0>
 80041c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80041d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80041e0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80041e4:	fa93 f3a3 	rbit	r3, r3
 80041e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80041ec:	4b95      	ldr	r3, [pc, #596]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041f4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80041f8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80041fc:	fa92 f2a2 	rbit	r2, r2
 8004200:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004204:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004208:	fab2 f282 	clz	r2, r2
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	f042 0220 	orr.w	r2, r2, #32
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	f002 021f 	and.w	r2, r2, #31
 8004218:	2101      	movs	r1, #1
 800421a:	fa01 f202 	lsl.w	r2, r1, r2
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8111 	beq.w	8004448 <HAL_RCC_OscConfig+0x318>
 8004226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800422a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f040 8108 	bne.w	8004448 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f000 bfc6 	b.w	80051ca <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004242:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424e:	d106      	bne.n	800425e <HAL_RCC_OscConfig+0x12e>
 8004250:	4b7c      	ldr	r3, [pc, #496]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a7b      	ldr	r2, [pc, #492]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 8004256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	e036      	b.n	80042cc <HAL_RCC_OscConfig+0x19c>
 800425e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004262:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0x158>
 800426e:	4b75      	ldr	r3, [pc, #468]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a74      	ldr	r2, [pc, #464]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 8004274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b72      	ldr	r3, [pc, #456]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a71      	ldr	r2, [pc, #452]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 8004280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e021      	b.n	80042cc <HAL_RCC_OscConfig+0x19c>
 8004288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800428c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x184>
 800429a:	4b6a      	ldr	r3, [pc, #424]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a69      	ldr	r2, [pc, #420]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 80042a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4b67      	ldr	r3, [pc, #412]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a66      	ldr	r2, [pc, #408]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e00b      	b.n	80042cc <HAL_RCC_OscConfig+0x19c>
 80042b4:	4b63      	ldr	r3, [pc, #396]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a62      	ldr	r2, [pc, #392]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 80042ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	4b60      	ldr	r3, [pc, #384]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a5f      	ldr	r2, [pc, #380]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 80042c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ca:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d059      	beq.n	8004390 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fd ff2a 	bl	8002134 <HAL_GetTick>
 80042e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e6:	f7fd ff25 	bl	8002134 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d902      	bls.n	80042fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	f000 bf67 	b.w	80051ca <HAL_RCC_OscConfig+0x109a>
 80042fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004300:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004308:	fa93 f3a3 	rbit	r3, r3
 800430c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004310:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004314:	fab3 f383 	clz	r3, r3
 8004318:	b2db      	uxtb	r3, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d102      	bne.n	800432e <HAL_RCC_OscConfig+0x1fe>
 8004328:	4b46      	ldr	r3, [pc, #280]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	e015      	b.n	800435a <HAL_RCC_OscConfig+0x22a>
 800432e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004332:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004346:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800434a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004356:	4b3b      	ldr	r3, [pc, #236]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800435e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004362:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004366:	fa92 f2a2 	rbit	r2, r2
 800436a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800436e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004372:	fab2 f282 	clz	r2, r2
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	f042 0220 	orr.w	r2, r2, #32
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	f002 021f 	and.w	r2, r2, #31
 8004382:	2101      	movs	r1, #1
 8004384:	fa01 f202 	lsl.w	r2, r1, r2
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0ab      	beq.n	80042e6 <HAL_RCC_OscConfig+0x1b6>
 800438e:	e05c      	b.n	800444a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fd fed0 	bl	8002134 <HAL_GetTick>
 8004394:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004398:	e00a      	b.n	80043b0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800439a:	f7fd fecb 	bl	8002134 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	; 0x64
 80043a8:	d902      	bls.n	80043b0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	f000 bf0d 	b.w	80051ca <HAL_RCC_OscConfig+0x109a>
 80043b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80043bc:	fa93 f3a3 	rbit	r3, r3
 80043c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80043c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c8:	fab3 f383 	clz	r3, r3
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d102      	bne.n	80043e2 <HAL_RCC_OscConfig+0x2b2>
 80043dc:	4b19      	ldr	r3, [pc, #100]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	e015      	b.n	800440e <HAL_RCC_OscConfig+0x2de>
 80043e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80043ee:	fa93 f3a3 	rbit	r3, r3
 80043f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80043f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80043fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004402:	fa93 f3a3 	rbit	r3, r3
 8004406:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <HAL_RCC_OscConfig+0x314>)
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004412:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004416:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800441a:	fa92 f2a2 	rbit	r2, r2
 800441e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004422:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004426:	fab2 f282 	clz	r2, r2
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	f042 0220 	orr.w	r2, r2, #32
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	f002 021f 	and.w	r2, r2, #31
 8004436:	2101      	movs	r1, #1
 8004438:	fa01 f202 	lsl.w	r2, r1, r2
 800443c:	4013      	ands	r3, r2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ab      	bne.n	800439a <HAL_RCC_OscConfig+0x26a>
 8004442:	e002      	b.n	800444a <HAL_RCC_OscConfig+0x31a>
 8004444:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800444e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 817f 	beq.w	800475e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004460:	4ba7      	ldr	r3, [pc, #668]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 030c 	and.w	r3, r3, #12
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00c      	beq.n	8004486 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800446c:	4ba4      	ldr	r3, [pc, #656]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	2b08      	cmp	r3, #8
 8004476:	d173      	bne.n	8004560 <HAL_RCC_OscConfig+0x430>
 8004478:	4ba1      	ldr	r3, [pc, #644]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004484:	d16c      	bne.n	8004560 <HAL_RCC_OscConfig+0x430>
 8004486:	2302      	movs	r3, #2
 8004488:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004490:	fa93 f3a3 	rbit	r3, r3
 8004494:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004498:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449c:	fab3 f383 	clz	r3, r3
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d102      	bne.n	80044b6 <HAL_RCC_OscConfig+0x386>
 80044b0:	4b93      	ldr	r3, [pc, #588]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	e013      	b.n	80044de <HAL_RCC_OscConfig+0x3ae>
 80044b6:	2302      	movs	r3, #2
 80044b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80044c0:	fa93 f3a3 	rbit	r3, r3
 80044c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80044c8:	2302      	movs	r3, #2
 80044ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80044ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80044da:	4b89      	ldr	r3, [pc, #548]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2202      	movs	r2, #2
 80044e0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80044e4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80044e8:	fa92 f2a2 	rbit	r2, r2
 80044ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80044f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80044f4:	fab2 f282 	clz	r2, r2
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	f042 0220 	orr.w	r2, r2, #32
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f002 021f 	and.w	r2, r2, #31
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f202 	lsl.w	r2, r1, r2
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCC_OscConfig+0x3f6>
 8004510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004514:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d002      	beq.n	8004526 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f000 be52 	b.w	80051ca <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004526:	4b76      	ldr	r3, [pc, #472]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800452e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004532:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	21f8      	movs	r1, #248	; 0xf8
 800453c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004540:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004544:	fa91 f1a1 	rbit	r1, r1
 8004548:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800454c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004550:	fab1 f181 	clz	r1, r1
 8004554:	b2c9      	uxtb	r1, r1
 8004556:	408b      	lsls	r3, r1
 8004558:	4969      	ldr	r1, [pc, #420]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455e:	e0fe      	b.n	800475e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004564:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8088 	beq.w	8004682 <HAL_RCC_OscConfig+0x552>
 8004572:	2301      	movs	r3, #1
 8004574:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004578:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800457c:	fa93 f3a3 	rbit	r3, r3
 8004580:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004584:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004588:	fab3 f383 	clz	r3, r3
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004592:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	461a      	mov	r2, r3
 800459a:	2301      	movs	r3, #1
 800459c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459e:	f7fd fdc9 	bl	8002134 <HAL_GetTick>
 80045a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a6:	e00a      	b.n	80045be <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a8:	f7fd fdc4 	bl	8002134 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d902      	bls.n	80045be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	f000 be06 	b.w	80051ca <HAL_RCC_OscConfig+0x109a>
 80045be:	2302      	movs	r3, #2
 80045c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80045d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d4:	fab3 f383 	clz	r3, r3
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d102      	bne.n	80045ee <HAL_RCC_OscConfig+0x4be>
 80045e8:	4b45      	ldr	r3, [pc, #276]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	e013      	b.n	8004616 <HAL_RCC_OscConfig+0x4e6>
 80045ee:	2302      	movs	r3, #2
 80045f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80045f8:	fa93 f3a3 	rbit	r3, r3
 80045fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004600:	2302      	movs	r3, #2
 8004602:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004606:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004612:	4b3b      	ldr	r3, [pc, #236]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	2202      	movs	r2, #2
 8004618:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800461c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004620:	fa92 f2a2 	rbit	r2, r2
 8004624:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004628:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800462c:	fab2 f282 	clz	r2, r2
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	f042 0220 	orr.w	r2, r2, #32
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	f002 021f 	and.w	r2, r2, #31
 800463c:	2101      	movs	r1, #1
 800463e:	fa01 f202 	lsl.w	r2, r1, r2
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0af      	beq.n	80045a8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004648:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004654:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	21f8      	movs	r1, #248	; 0xf8
 800465e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004666:	fa91 f1a1 	rbit	r1, r1
 800466a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800466e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004672:	fab1 f181 	clz	r1, r1
 8004676:	b2c9      	uxtb	r1, r1
 8004678:	408b      	lsls	r3, r1
 800467a:	4921      	ldr	r1, [pc, #132]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
 8004680:	e06d      	b.n	800475e <HAL_RCC_OscConfig+0x62e>
 8004682:	2301      	movs	r3, #1
 8004684:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004694:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	461a      	mov	r2, r3
 80046aa:	2300      	movs	r3, #0
 80046ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ae:	f7fd fd41 	bl	8002134 <HAL_GetTick>
 80046b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b8:	f7fd fd3c 	bl	8002134 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d902      	bls.n	80046ce <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	f000 bd7e 	b.w	80051ca <HAL_RCC_OscConfig+0x109a>
 80046ce:	2302      	movs	r3, #2
 80046d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80046d8:	fa93 f3a3 	rbit	r3, r3
 80046dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80046e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e4:	fab3 f383 	clz	r3, r3
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d105      	bne.n	8004704 <HAL_RCC_OscConfig+0x5d4>
 80046f8:	4b01      	ldr	r3, [pc, #4]	; (8004700 <HAL_RCC_OscConfig+0x5d0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	e016      	b.n	800472c <HAL_RCC_OscConfig+0x5fc>
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	2302      	movs	r3, #2
 8004706:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004716:	2302      	movs	r3, #2
 8004718:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800471c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004720:	fa93 f3a3 	rbit	r3, r3
 8004724:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004728:	4bbf      	ldr	r3, [pc, #764]	; (8004a28 <HAL_RCC_OscConfig+0x8f8>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2202      	movs	r2, #2
 800472e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004732:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004736:	fa92 f2a2 	rbit	r2, r2
 800473a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800473e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004742:	fab2 f282 	clz	r2, r2
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	f042 0220 	orr.w	r2, r2, #32
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	f002 021f 	and.w	r2, r2, #31
 8004752:	2101      	movs	r1, #1
 8004754:	fa01 f202 	lsl.w	r2, r1, r2
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1ac      	bne.n	80046b8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004762:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8113 	beq.w	800499a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004778:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d07c      	beq.n	800487e <HAL_RCC_OscConfig+0x74e>
 8004784:	2301      	movs	r3, #1
 8004786:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004796:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	4ba2      	ldr	r3, [pc, #648]	; (8004a2c <HAL_RCC_OscConfig+0x8fc>)
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	461a      	mov	r2, r3
 80047aa:	2301      	movs	r3, #1
 80047ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ae:	f7fd fcc1 	bl	8002134 <HAL_GetTick>
 80047b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047b8:	f7fd fcbc 	bl	8002134 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d902      	bls.n	80047ce <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	f000 bcfe 	b.w	80051ca <HAL_RCC_OscConfig+0x109a>
 80047ce:	2302      	movs	r3, #2
 80047d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d8:	fa93 f2a3 	rbit	r2, r3
 80047dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047ee:	2202      	movs	r2, #2
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	fa93 f2a3 	rbit	r2, r3
 8004800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800480e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004812:	2202      	movs	r2, #2
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800481a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	fa93 f2a3 	rbit	r2, r3
 8004824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004828:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800482c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482e:	4b7e      	ldr	r3, [pc, #504]	; (8004a28 <HAL_RCC_OscConfig+0x8f8>)
 8004830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004836:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800483a:	2102      	movs	r1, #2
 800483c:	6019      	str	r1, [r3, #0]
 800483e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004842:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	fa93 f1a3 	rbit	r1, r3
 800484c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004850:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004854:	6019      	str	r1, [r3, #0]
  return result;
 8004856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800485a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	fab3 f383 	clz	r3, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	2101      	movs	r1, #1
 8004872:	fa01 f303 	lsl.w	r3, r1, r3
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d09d      	beq.n	80047b8 <HAL_RCC_OscConfig+0x688>
 800487c:	e08d      	b.n	800499a <HAL_RCC_OscConfig+0x86a>
 800487e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004882:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800488e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	fa93 f2a3 	rbit	r2, r3
 8004898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800489c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048a0:	601a      	str	r2, [r3, #0]
  return result;
 80048a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	4b5d      	ldr	r3, [pc, #372]	; (8004a2c <HAL_RCC_OscConfig+0x8fc>)
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	461a      	mov	r2, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c0:	f7fd fc38 	bl	8002134 <HAL_GetTick>
 80048c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c8:	e00a      	b.n	80048e0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ca:	f7fd fc33 	bl	8002134 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d902      	bls.n	80048e0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	f000 bc75 	b.w	80051ca <HAL_RCC_OscConfig+0x109a>
 80048e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048e8:	2202      	movs	r2, #2
 80048ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	fa93 f2a3 	rbit	r2, r3
 80048fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800490c:	2202      	movs	r2, #2
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	fa93 f2a3 	rbit	r2, r3
 800491e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800492c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004930:	2202      	movs	r2, #2
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004938:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	fa93 f2a3 	rbit	r2, r3
 8004942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004946:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800494a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494c:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <HAL_RCC_OscConfig+0x8f8>)
 800494e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004954:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004958:	2102      	movs	r1, #2
 800495a:	6019      	str	r1, [r3, #0]
 800495c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004960:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	fa93 f1a3 	rbit	r1, r3
 800496a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800496e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004972:	6019      	str	r1, [r3, #0]
  return result;
 8004974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004978:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	fab3 f383 	clz	r3, r3
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2101      	movs	r1, #1
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	4013      	ands	r3, r2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d197      	bne.n	80048ca <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800499a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800499e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 81a5 	beq.w	8004cfa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b6:	4b1c      	ldr	r3, [pc, #112]	; (8004a28 <HAL_RCC_OscConfig+0x8f8>)
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d116      	bne.n	80049f0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c2:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_RCC_OscConfig+0x8f8>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <HAL_RCC_OscConfig+0x8f8>)
 80049c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049cc:	61d3      	str	r3, [r2, #28]
 80049ce:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <HAL_RCC_OscConfig+0x8f8>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80049d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049e8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <HAL_RCC_OscConfig+0x900>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d121      	bne.n	8004a40 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_RCC_OscConfig+0x900>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <HAL_RCC_OscConfig+0x900>)
 8004a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a06:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a08:	f7fd fb94 	bl	8002134 <HAL_GetTick>
 8004a0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	e010      	b.n	8004a34 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a12:	f7fd fb8f 	bl	8002134 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	; 0x64
 8004a20:	d908      	bls.n	8004a34 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e3d1      	b.n	80051ca <HAL_RCC_OscConfig+0x109a>
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	10908120 	.word	0x10908120
 8004a30:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a34:	4b8d      	ldr	r3, [pc, #564]	; (8004c6c <HAL_RCC_OscConfig+0xb3c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0e8      	beq.n	8004a12 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCC_OscConfig+0x92e>
 8004a50:	4b87      	ldr	r3, [pc, #540]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	4a86      	ldr	r2, [pc, #536]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	6213      	str	r3, [r2, #32]
 8004a5c:	e035      	b.n	8004aca <HAL_RCC_OscConfig+0x99a>
 8004a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x958>
 8004a6e:	4b80      	ldr	r3, [pc, #512]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	4a7f      	ldr	r2, [pc, #508]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	6213      	str	r3, [r2, #32]
 8004a7a:	4b7d      	ldr	r3, [pc, #500]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	4a7c      	ldr	r2, [pc, #496]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004a80:	f023 0304 	bic.w	r3, r3, #4
 8004a84:	6213      	str	r3, [r2, #32]
 8004a86:	e020      	b.n	8004aca <HAL_RCC_OscConfig+0x99a>
 8004a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x982>
 8004a98:	4b75      	ldr	r3, [pc, #468]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	4a74      	ldr	r2, [pc, #464]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	6213      	str	r3, [r2, #32]
 8004aa4:	4b72      	ldr	r3, [pc, #456]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	4a71      	ldr	r2, [pc, #452]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6213      	str	r3, [r2, #32]
 8004ab0:	e00b      	b.n	8004aca <HAL_RCC_OscConfig+0x99a>
 8004ab2:	4b6f      	ldr	r3, [pc, #444]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	4a6e      	ldr	r2, [pc, #440]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6213      	str	r3, [r2, #32]
 8004abe:	4b6c      	ldr	r3, [pc, #432]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	4a6b      	ldr	r2, [pc, #428]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004ac4:	f023 0304 	bic.w	r3, r3, #4
 8004ac8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ace:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8081 	beq.w	8004bde <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004adc:	f7fd fb2a 	bl	8002134 <HAL_GetTick>
 8004ae0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae4:	e00b      	b.n	8004afe <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae6:	f7fd fb25 	bl	8002134 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e365      	b.n	80051ca <HAL_RCC_OscConfig+0x109a>
 8004afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004b06:	2202      	movs	r2, #2
 8004b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b0e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	fa93 f2a3 	rbit	r2, r3
 8004b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b32:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	fa93 f2a3 	rbit	r2, r3
 8004b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004b44:	601a      	str	r2, [r3, #0]
  return result;
 8004b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b4a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004b4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b50:	fab3 f383 	clz	r3, r3
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f043 0302 	orr.w	r3, r3, #2
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d102      	bne.n	8004b6a <HAL_RCC_OscConfig+0xa3a>
 8004b64:	4b42      	ldr	r3, [pc, #264]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	e013      	b.n	8004b92 <HAL_RCC_OscConfig+0xa62>
 8004b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004b72:	2202      	movs	r2, #2
 8004b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b7a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	fa93 f2a3 	rbit	r2, r3
 8004b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b88:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	4b38      	ldr	r3, [pc, #224]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b96:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b9a:	2102      	movs	r1, #2
 8004b9c:	6011      	str	r1, [r2, #0]
 8004b9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ba2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	fa92 f1a2 	rbit	r1, r2
 8004bac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bb0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004bb4:	6011      	str	r1, [r2, #0]
  return result;
 8004bb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bba:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	fab2 f282 	clz	r2, r2
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	f002 021f 	and.w	r2, r2, #31
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d084      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x9b6>
 8004bdc:	e083      	b.n	8004ce6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bde:	f7fd faa9 	bl	8002134 <HAL_GetTick>
 8004be2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be6:	e00b      	b.n	8004c00 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fd faa4 	bl	8002134 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e2e4      	b.n	80051ca <HAL_RCC_OscConfig+0x109a>
 8004c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004c08:	2202      	movs	r2, #2
 8004c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c10:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	fa93 f2a3 	rbit	r2, r3
 8004c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	fa93 f2a3 	rbit	r2, r3
 8004c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004c46:	601a      	str	r2, [r3, #0]
  return result;
 8004c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c4c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004c50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c52:	fab3 f383 	clz	r3, r3
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f043 0302 	orr.w	r3, r3, #2
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d106      	bne.n	8004c74 <HAL_RCC_OscConfig+0xb44>
 8004c66:	4b02      	ldr	r3, [pc, #8]	; (8004c70 <HAL_RCC_OscConfig+0xb40>)
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	e017      	b.n	8004c9c <HAL_RCC_OscConfig+0xb6c>
 8004c6c:	40007000 	.word	0x40007000
 8004c70:	40021000 	.word	0x40021000
 8004c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c84:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	fa93 f2a3 	rbit	r2, r3
 8004c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c92:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	4bb3      	ldr	r3, [pc, #716]	; (8004f68 <HAL_RCC_OscConfig+0xe38>)
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ca0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004ca4:	2102      	movs	r1, #2
 8004ca6:	6011      	str	r1, [r2, #0]
 8004ca8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	fa92 f1a2 	rbit	r1, r2
 8004cb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cba:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004cbe:	6011      	str	r1, [r2, #0]
  return result;
 8004cc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cc4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	fab2 f282 	clz	r2, r2
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	f002 021f 	and.w	r2, r2, #31
 8004cda:	2101      	movs	r1, #1
 8004cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d180      	bne.n	8004be8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ce6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d105      	bne.n	8004cfa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cee:	4b9e      	ldr	r3, [pc, #632]	; (8004f68 <HAL_RCC_OscConfig+0xe38>)
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	4a9d      	ldr	r2, [pc, #628]	; (8004f68 <HAL_RCC_OscConfig+0xe38>)
 8004cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 825e 	beq.w	80051c8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d0c:	4b96      	ldr	r3, [pc, #600]	; (8004f68 <HAL_RCC_OscConfig+0xe38>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 030c 	and.w	r3, r3, #12
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	f000 821f 	beq.w	8005158 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	f040 8170 	bne.w	800500c <HAL_RCC_OscConfig+0xedc>
 8004d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004d34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d3e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	fa93 f2a3 	rbit	r2, r3
 8004d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d50:	601a      	str	r2, [r3, #0]
  return result;
 8004d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d56:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d5a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d72:	f7fd f9df 	bl	8002134 <HAL_GetTick>
 8004d76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d7a:	e009      	b.n	8004d90 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fd f9da 	bl	8002134 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e21c      	b.n	80051ca <HAL_RCC_OscConfig+0x109a>
 8004d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d94:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004da2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	fa93 f2a3 	rbit	r2, r3
 8004dac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004db0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004db4:	601a      	str	r2, [r3, #0]
  return result;
 8004db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004dbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc0:	fab3 f383 	clz	r3, r3
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d102      	bne.n	8004dda <HAL_RCC_OscConfig+0xcaa>
 8004dd4:	4b64      	ldr	r3, [pc, #400]	; (8004f68 <HAL_RCC_OscConfig+0xe38>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	e027      	b.n	8004e2a <HAL_RCC_OscConfig+0xcfa>
 8004dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dde:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dec:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	fa93 f2a3 	rbit	r2, r3
 8004df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dfa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e04:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e12:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	fa93 f2a3 	rbit	r2, r3
 8004e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e20:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	4b50      	ldr	r3, [pc, #320]	; (8004f68 <HAL_RCC_OscConfig+0xe38>)
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e2e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004e32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e36:	6011      	str	r1, [r2, #0]
 8004e38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e3c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	fa92 f1a2 	rbit	r1, r2
 8004e46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e4a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004e4e:	6011      	str	r1, [r2, #0]
  return result;
 8004e50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e54:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	fab2 f282 	clz	r2, r2
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	f042 0220 	orr.w	r2, r2, #32
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	f002 021f 	and.w	r2, r2, #31
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d182      	bne.n	8004d7c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e76:	4b3c      	ldr	r3, [pc, #240]	; (8004f68 <HAL_RCC_OscConfig+0xe38>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	f023 020f 	bic.w	r2, r3, #15
 8004e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	4937      	ldr	r1, [pc, #220]	; (8004f68 <HAL_RCC_OscConfig+0xe38>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004e90:	4b35      	ldr	r3, [pc, #212]	; (8004f68 <HAL_RCC_OscConfig+0xe38>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a19      	ldr	r1, [r3, #32]
 8004ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ea8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	492d      	ldr	r1, [pc, #180]	; (8004f68 <HAL_RCC_OscConfig+0xe38>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
 8004eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ebc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004ec0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	fa93 f2a3 	rbit	r2, r3
 8004ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ed8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004edc:	601a      	str	r2, [r3, #0]
  return result;
 8004ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004ee6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ef2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2301      	movs	r3, #1
 8004efc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efe:	f7fd f919 	bl	8002134 <HAL_GetTick>
 8004f02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f06:	e009      	b.n	8004f1c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f08:	f7fd f914 	bl	8002134 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e156      	b.n	80051ca <HAL_RCC_OscConfig+0x109a>
 8004f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f20:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f2e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	fa93 f2a3 	rbit	r2, r3
 8004f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004f40:	601a      	str	r2, [r3, #0]
  return result;
 8004f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004f4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f4c:	fab3 f383 	clz	r3, r3
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCC_OscConfig+0xe3c>
 8004f60:	4b01      	ldr	r3, [pc, #4]	; (8004f68 <HAL_RCC_OscConfig+0xe38>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	e02a      	b.n	8004fbc <HAL_RCC_OscConfig+0xe8c>
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f70:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004f74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f7e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	fa93 f2a3 	rbit	r2, r3
 8004f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f8c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f96:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fa4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	fa93 f2a3 	rbit	r2, r3
 8004fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fb2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	4b86      	ldr	r3, [pc, #536]	; (80051d4 <HAL_RCC_OscConfig+0x10a4>)
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004fc0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004fc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004fc8:	6011      	str	r1, [r2, #0]
 8004fca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004fce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	fa92 f1a2 	rbit	r1, r2
 8004fd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004fdc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004fe0:	6011      	str	r1, [r2, #0]
  return result;
 8004fe2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004fe6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	fab2 f282 	clz	r2, r2
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	f042 0220 	orr.w	r2, r2, #32
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	f002 021f 	and.w	r2, r2, #31
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8005002:	4013      	ands	r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	f43f af7f 	beq.w	8004f08 <HAL_RCC_OscConfig+0xdd8>
 800500a:	e0dd      	b.n	80051c8 <HAL_RCC_OscConfig+0x1098>
 800500c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005010:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005014:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800501e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	fa93 f2a3 	rbit	r2, r3
 8005028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800502c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005030:	601a      	str	r2, [r3, #0]
  return result;
 8005032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005036:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800503a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503c:	fab3 f383 	clz	r3, r3
 8005040:	b2db      	uxtb	r3, r3
 8005042:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005046:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	461a      	mov	r2, r3
 800504e:	2300      	movs	r3, #0
 8005050:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005052:	f7fd f86f 	bl	8002134 <HAL_GetTick>
 8005056:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800505a:	e009      	b.n	8005070 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800505c:	f7fd f86a 	bl	8002134 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e0ac      	b.n	80051ca <HAL_RCC_OscConfig+0x109a>
 8005070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005074:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800507c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005082:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	fa93 f2a3 	rbit	r2, r3
 800508c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005090:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005094:	601a      	str	r2, [r3, #0]
  return result;
 8005096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800509a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800509e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a0:	fab3 f383 	clz	r3, r3
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f043 0301 	orr.w	r3, r3, #1
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d102      	bne.n	80050ba <HAL_RCC_OscConfig+0xf8a>
 80050b4:	4b47      	ldr	r3, [pc, #284]	; (80051d4 <HAL_RCC_OscConfig+0x10a4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	e027      	b.n	800510a <HAL_RCC_OscConfig+0xfda>
 80050ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050be:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80050c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	fa93 f2a3 	rbit	r2, r3
 80050d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050da:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050e4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80050e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	fa93 f2a3 	rbit	r2, r3
 80050fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005100:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	4b33      	ldr	r3, [pc, #204]	; (80051d4 <HAL_RCC_OscConfig+0x10a4>)
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800510e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005112:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005116:	6011      	str	r1, [r2, #0]
 8005118:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800511c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	fa92 f1a2 	rbit	r1, r2
 8005126:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800512a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800512e:	6011      	str	r1, [r2, #0]
  return result;
 8005130:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005134:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	fab2 f282 	clz	r2, r2
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	f042 0220 	orr.w	r2, r2, #32
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	f002 021f 	and.w	r2, r2, #31
 800514a:	2101      	movs	r1, #1
 800514c:	fa01 f202 	lsl.w	r2, r1, r2
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d182      	bne.n	800505c <HAL_RCC_OscConfig+0xf2c>
 8005156:	e037      	b.n	80051c8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800515c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e02e      	b.n	80051ca <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800516c:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <HAL_RCC_OscConfig+0x10a4>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005174:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <HAL_RCC_OscConfig+0x10a4>)
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800517c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005180:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005188:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	429a      	cmp	r2, r3
 8005192:	d117      	bne.n	80051c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005194:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005198:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800519c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d10b      	bne.n	80051c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80051ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40021000 	.word	0x40021000

080051d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b09e      	sub	sp, #120	; 0x78
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e162      	b.n	80054b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051f0:	4b90      	ldr	r3, [pc, #576]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d910      	bls.n	8005220 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fe:	4b8d      	ldr	r3, [pc, #564]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f023 0207 	bic.w	r2, r3, #7
 8005206:	498b      	ldr	r1, [pc, #556]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	4313      	orrs	r3, r2
 800520c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800520e:	4b89      	ldr	r3, [pc, #548]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e14a      	b.n	80054b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800522c:	4b82      	ldr	r3, [pc, #520]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	497f      	ldr	r1, [pc, #508]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800523a:	4313      	orrs	r3, r2
 800523c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 80dc 	beq.w	8005404 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d13c      	bne.n	80052ce <HAL_RCC_ClockConfig+0xf6>
 8005254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005258:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800525c:	fa93 f3a3 	rbit	r3, r3
 8005260:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005264:	fab3 f383 	clz	r3, r3
 8005268:	b2db      	uxtb	r3, r3
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	d102      	bne.n	800527e <HAL_RCC_ClockConfig+0xa6>
 8005278:	4b6f      	ldr	r3, [pc, #444]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	e00f      	b.n	800529e <HAL_RCC_ClockConfig+0xc6>
 800527e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005282:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005286:	fa93 f3a3 	rbit	r3, r3
 800528a:	667b      	str	r3, [r7, #100]	; 0x64
 800528c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005290:	663b      	str	r3, [r7, #96]	; 0x60
 8005292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005294:	fa93 f3a3 	rbit	r3, r3
 8005298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800529a:	4b67      	ldr	r3, [pc, #412]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80052a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052a6:	fa92 f2a2 	rbit	r2, r2
 80052aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80052ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052ae:	fab2 f282 	clz	r2, r2
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	f042 0220 	orr.w	r2, r2, #32
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	f002 021f 	and.w	r2, r2, #31
 80052be:	2101      	movs	r1, #1
 80052c0:	fa01 f202 	lsl.w	r2, r1, r2
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d17b      	bne.n	80053c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0f3      	b.n	80054b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d13c      	bne.n	8005350 <HAL_RCC_ClockConfig+0x178>
 80052d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052de:	fa93 f3a3 	rbit	r3, r3
 80052e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80052e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e6:	fab3 f383 	clz	r3, r3
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d102      	bne.n	8005300 <HAL_RCC_ClockConfig+0x128>
 80052fa:	4b4f      	ldr	r3, [pc, #316]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	e00f      	b.n	8005320 <HAL_RCC_ClockConfig+0x148>
 8005300:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005304:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005308:	fa93 f3a3 	rbit	r3, r3
 800530c:	647b      	str	r3, [r7, #68]	; 0x44
 800530e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005312:	643b      	str	r3, [r7, #64]	; 0x40
 8005314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005316:	fa93 f3a3 	rbit	r3, r3
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800531c:	4b46      	ldr	r3, [pc, #280]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005324:	63ba      	str	r2, [r7, #56]	; 0x38
 8005326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005328:	fa92 f2a2 	rbit	r2, r2
 800532c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800532e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005330:	fab2 f282 	clz	r2, r2
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	f042 0220 	orr.w	r2, r2, #32
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	f002 021f 	and.w	r2, r2, #31
 8005340:	2101      	movs	r1, #1
 8005342:	fa01 f202 	lsl.w	r2, r1, r2
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d13a      	bne.n	80053c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0b2      	b.n	80054b6 <HAL_RCC_ClockConfig+0x2de>
 8005350:	2302      	movs	r3, #2
 8005352:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	fa93 f3a3 	rbit	r3, r3
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535e:	fab3 f383 	clz	r3, r3
 8005362:	b2db      	uxtb	r3, r3
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b01      	cmp	r3, #1
 8005370:	d102      	bne.n	8005378 <HAL_RCC_ClockConfig+0x1a0>
 8005372:	4b31      	ldr	r3, [pc, #196]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	e00d      	b.n	8005394 <HAL_RCC_ClockConfig+0x1bc>
 8005378:	2302      	movs	r3, #2
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	fa93 f3a3 	rbit	r3, r3
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
 8005384:	2302      	movs	r3, #2
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	fa93 f3a3 	rbit	r3, r3
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	4b29      	ldr	r3, [pc, #164]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	2202      	movs	r2, #2
 8005396:	61ba      	str	r2, [r7, #24]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	fa92 f2a2 	rbit	r2, r2
 800539e:	617a      	str	r2, [r7, #20]
  return result;
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	fab2 f282 	clz	r2, r2
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	f042 0220 	orr.w	r2, r2, #32
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	f002 021f 	and.w	r2, r2, #31
 80053b2:	2101      	movs	r1, #1
 80053b4:	fa01 f202 	lsl.w	r2, r1, r2
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e079      	b.n	80054b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f023 0203 	bic.w	r2, r3, #3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	491a      	ldr	r1, [pc, #104]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053d4:	f7fc feae 	bl	8002134 <HAL_GetTick>
 80053d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053da:	e00a      	b.n	80053f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053dc:	f7fc feaa 	bl	8002134 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e061      	b.n	80054b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f2:	4b11      	ldr	r3, [pc, #68]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 020c 	and.w	r2, r3, #12
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	429a      	cmp	r2, r3
 8005402:	d1eb      	bne.n	80053dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d214      	bcs.n	800543c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005412:	4b08      	ldr	r3, [pc, #32]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 0207 	bic.w	r2, r3, #7
 800541a:	4906      	ldr	r1, [pc, #24]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	4313      	orrs	r3, r2
 8005420:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005422:	4b04      	ldr	r3, [pc, #16]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d005      	beq.n	800543c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e040      	b.n	80054b6 <HAL_RCC_ClockConfig+0x2de>
 8005434:	40022000 	.word	0x40022000
 8005438:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005448:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <HAL_RCC_ClockConfig+0x2e8>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	491a      	ldr	r1, [pc, #104]	; (80054c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005456:	4313      	orrs	r3, r2
 8005458:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005466:	4b16      	ldr	r3, [pc, #88]	; (80054c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4912      	ldr	r1, [pc, #72]	; (80054c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800547a:	f000 f829 	bl	80054d0 <HAL_RCC_GetSysClockFreq>
 800547e:	4601      	mov	r1, r0
 8005480:	4b0f      	ldr	r3, [pc, #60]	; (80054c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005488:	22f0      	movs	r2, #240	; 0xf0
 800548a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	fa92 f2a2 	rbit	r2, r2
 8005492:	60fa      	str	r2, [r7, #12]
  return result;
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	fab2 f282 	clz	r2, r2
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	40d3      	lsrs	r3, r2
 800549e:	4a09      	ldr	r2, [pc, #36]	; (80054c4 <HAL_RCC_ClockConfig+0x2ec>)
 80054a0:	5cd3      	ldrb	r3, [r2, r3]
 80054a2:	fa21 f303 	lsr.w	r3, r1, r3
 80054a6:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <HAL_RCC_ClockConfig+0x2f0>)
 80054a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80054aa:	4b08      	ldr	r3, [pc, #32]	; (80054cc <HAL_RCC_ClockConfig+0x2f4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fc fdfc 	bl	80020ac <HAL_InitTick>
  
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3778      	adds	r7, #120	; 0x78
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40021000 	.word	0x40021000
 80054c4:	08007418 	.word	0x08007418
 80054c8:	20000004 	.word	0x20000004
 80054cc:	20000008 	.word	0x20000008

080054d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b08b      	sub	sp, #44	; 0x2c
 80054d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
 80054da:	2300      	movs	r3, #0
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	2300      	movs	r3, #0
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80054ea:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <HAL_RCC_GetSysClockFreq+0xc4>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f003 030c 	and.w	r3, r3, #12
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d002      	beq.n	8005500 <HAL_RCC_GetSysClockFreq+0x30>
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d003      	beq.n	8005506 <HAL_RCC_GetSysClockFreq+0x36>
 80054fe:	e03f      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005500:	4b25      	ldr	r3, [pc, #148]	; (8005598 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005502:	623b      	str	r3, [r7, #32]
      break;
 8005504:	e03f      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800550c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005510:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	fa92 f2a2 	rbit	r2, r2
 8005518:	607a      	str	r2, [r7, #4]
  return result;
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	fab2 f282 	clz	r2, r2
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	40d3      	lsrs	r3, r2
 8005524:	4a1d      	ldr	r2, [pc, #116]	; (800559c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005526:	5cd3      	ldrb	r3, [r2, r3]
 8005528:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800552a:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <HAL_RCC_GetSysClockFreq+0xc4>)
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	220f      	movs	r2, #15
 8005534:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	fa92 f2a2 	rbit	r2, r2
 800553c:	60fa      	str	r2, [r7, #12]
  return result;
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	fab2 f282 	clz	r2, r2
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	40d3      	lsrs	r3, r2
 8005548:	4a15      	ldr	r2, [pc, #84]	; (80055a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800554a:	5cd3      	ldrb	r3, [r2, r3]
 800554c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d008      	beq.n	800556a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005558:	4a0f      	ldr	r2, [pc, #60]	; (8005598 <HAL_RCC_GetSysClockFreq+0xc8>)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
 8005568:	e007      	b.n	800557a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800556a:	4a0b      	ldr	r2, [pc, #44]	; (8005598 <HAL_RCC_GetSysClockFreq+0xc8>)
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	fb02 f303 	mul.w	r3, r2, r3
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	623b      	str	r3, [r7, #32]
      break;
 800557e:	e002      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005582:	623b      	str	r3, [r7, #32]
      break;
 8005584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005586:	6a3b      	ldr	r3, [r7, #32]
}
 8005588:	4618      	mov	r0, r3
 800558a:	372c      	adds	r7, #44	; 0x2c
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40021000 	.word	0x40021000
 8005598:	007a1200 	.word	0x007a1200
 800559c:	08007428 	.word	0x08007428
 80055a0:	08007438 	.word	0x08007438

080055a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b092      	sub	sp, #72	; 0x48
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 80d4 	beq.w	8005770 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c8:	4b4e      	ldr	r3, [pc, #312]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10e      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d4:	4b4b      	ldr	r3, [pc, #300]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	4a4a      	ldr	r2, [pc, #296]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055de:	61d3      	str	r3, [r2, #28]
 80055e0:	4b48      	ldr	r3, [pc, #288]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ec:	2301      	movs	r3, #1
 80055ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f2:	4b45      	ldr	r3, [pc, #276]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d118      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055fe:	4b42      	ldr	r3, [pc, #264]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a41      	ldr	r2, [pc, #260]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005608:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800560a:	f7fc fd93 	bl	8002134 <HAL_GetTick>
 800560e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005610:	e008      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005612:	f7fc fd8f 	bl	8002134 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b64      	cmp	r3, #100	; 0x64
 800561e:	d901      	bls.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e1d6      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005624:	4b38      	ldr	r3, [pc, #224]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0f0      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005630:	4b34      	ldr	r3, [pc, #208]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005638:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800563a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8084 	beq.w	800574a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800564c:	429a      	cmp	r2, r3
 800564e:	d07c      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005650:	4b2c      	ldr	r3, [pc, #176]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800565a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800565e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	fa93 f3a3 	rbit	r3, r3
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	b2db      	uxtb	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	4b26      	ldr	r3, [pc, #152]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	461a      	mov	r2, r3
 800567a:	2301      	movs	r3, #1
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005682:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005686:	fa93 f3a3 	rbit	r3, r3
 800568a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800568c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800568e:	fab3 f383 	clz	r3, r3
 8005692:	b2db      	uxtb	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	4b1d      	ldr	r3, [pc, #116]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	461a      	mov	r2, r3
 800569e:	2300      	movs	r3, #0
 80056a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056a2:	4a18      	ldr	r2, [pc, #96]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d04b      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b2:	f7fc fd3f 	bl	8002134 <HAL_GetTick>
 80056b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b8:	e00a      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ba:	f7fc fd3b 	bl	8002134 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e180      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80056d0:	2302      	movs	r3, #2
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	fa93 f3a3 	rbit	r3, r3
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
 80056dc:	2302      	movs	r3, #2
 80056de:	623b      	str	r3, [r7, #32]
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	fa93 f3a3 	rbit	r3, r3
 80056e6:	61fb      	str	r3, [r7, #28]
  return result;
 80056e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ea:	fab3 f383 	clz	r3, r3
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f043 0302 	orr.w	r3, r3, #2
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d108      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80056fe:	4b01      	ldr	r3, [pc, #4]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	e00d      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005704:	40021000 	.word	0x40021000
 8005708:	40007000 	.word	0x40007000
 800570c:	10908100 	.word	0x10908100
 8005710:	2302      	movs	r3, #2
 8005712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	fa93 f3a3 	rbit	r3, r3
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	4b9a      	ldr	r3, [pc, #616]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2202      	movs	r2, #2
 8005722:	613a      	str	r2, [r7, #16]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	fa92 f2a2 	rbit	r2, r2
 800572a:	60fa      	str	r2, [r7, #12]
  return result;
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	fab2 f282 	clz	r2, r2
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	f002 021f 	and.w	r2, r2, #31
 800573e:	2101      	movs	r1, #1
 8005740:	fa01 f202 	lsl.w	r2, r1, r2
 8005744:	4013      	ands	r3, r2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0b7      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800574a:	4b8f      	ldr	r3, [pc, #572]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	498c      	ldr	r1, [pc, #560]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005758:	4313      	orrs	r3, r2
 800575a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800575c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005760:	2b01      	cmp	r3, #1
 8005762:	d105      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005764:	4b88      	ldr	r3, [pc, #544]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	4a87      	ldr	r2, [pc, #540]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800576a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800577c:	4b82      	ldr	r3, [pc, #520]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	f023 0203 	bic.w	r2, r3, #3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	497f      	ldr	r1, [pc, #508]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800578a:	4313      	orrs	r3, r2
 800578c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800579a:	4b7b      	ldr	r3, [pc, #492]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	4978      	ldr	r1, [pc, #480]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057b8:	4b73      	ldr	r3, [pc, #460]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	4970      	ldr	r1, [pc, #448]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d008      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057d6:	4b6c      	ldr	r3, [pc, #432]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	f023 0210 	bic.w	r2, r3, #16
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	4969      	ldr	r1, [pc, #420]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80057f4:	4b64      	ldr	r3, [pc, #400]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005800:	4961      	ldr	r1, [pc, #388]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005802:	4313      	orrs	r3, r2
 8005804:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d008      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005812:	4b5d      	ldr	r3, [pc, #372]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005816:	f023 0220 	bic.w	r2, r3, #32
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	495a      	ldr	r1, [pc, #360]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005820:	4313      	orrs	r3, r2
 8005822:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005830:	4b55      	ldr	r3, [pc, #340]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	4952      	ldr	r1, [pc, #328]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800583e:	4313      	orrs	r3, r2
 8005840:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800584e:	4b4e      	ldr	r3, [pc, #312]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	494b      	ldr	r1, [pc, #300]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800585c:	4313      	orrs	r3, r2
 800585e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800586c:	4b46      	ldr	r3, [pc, #280]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005870:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	4943      	ldr	r1, [pc, #268]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800587a:	4313      	orrs	r3, r2
 800587c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800588a:	4b3f      	ldr	r3, [pc, #252]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	493c      	ldr	r1, [pc, #240]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005898:	4313      	orrs	r3, r2
 800589a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058a8:	4b37      	ldr	r3, [pc, #220]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	4934      	ldr	r1, [pc, #208]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80058c6:	4b30      	ldr	r3, [pc, #192]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	492d      	ldr	r1, [pc, #180]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80058e4:	4b28      	ldr	r3, [pc, #160]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f0:	4925      	ldr	r1, [pc, #148]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005902:	4b21      	ldr	r3, [pc, #132]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	491e      	ldr	r1, [pc, #120]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005910:	4313      	orrs	r3, r2
 8005912:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005920:	4b19      	ldr	r3, [pc, #100]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	4916      	ldr	r1, [pc, #88]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800592e:	4313      	orrs	r3, r2
 8005930:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d008      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800593e:	4b12      	ldr	r3, [pc, #72]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	490f      	ldr	r1, [pc, #60]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800594c:	4313      	orrs	r3, r2
 800594e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800595c:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005968:	4907      	ldr	r1, [pc, #28]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800596a:	4313      	orrs	r3, r2
 800596c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00c      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800597a:	4b03      	ldr	r3, [pc, #12]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	e002      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005986:	bf00      	nop
 8005988:	40021000 	.word	0x40021000
 800598c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598e:	4913      	ldr	r1, [pc, #76]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005990:	4313      	orrs	r3, r2
 8005992:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80059a0:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ac:	490b      	ldr	r1, [pc, #44]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d008      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80059be:	4b07      	ldr	r3, [pc, #28]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ca:	4904      	ldr	r1, [pc, #16]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3748      	adds	r7, #72	; 0x48
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40021000 	.word	0x40021000

080059e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e049      	b.n	8005a86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fc f98a 	bl	8001d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f000 fe6e 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d001      	beq.n	8005aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e04f      	b.n	8005b48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a23      	ldr	r2, [pc, #140]	; (8005b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01d      	beq.n	8005b06 <HAL_TIM_Base_Start_IT+0x76>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad2:	d018      	beq.n	8005b06 <HAL_TIM_Base_Start_IT+0x76>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <HAL_TIM_Base_Start_IT+0x76>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00e      	beq.n	8005b06 <HAL_TIM_Base_Start_IT+0x76>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1c      	ldr	r2, [pc, #112]	; (8005b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d009      	beq.n	8005b06 <HAL_TIM_Base_Start_IT+0x76>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_TIM_Base_Start_IT+0x76>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d115      	bne.n	8005b32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	4b17      	ldr	r3, [pc, #92]	; (8005b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b06      	cmp	r3, #6
 8005b16:	d015      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0xb4>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1e:	d011      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b30:	e008      	b.n	8005b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0201 	orr.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	e000      	b.n	8005b46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40000400 	.word	0x40000400
 8005b5c:	40000800 	.word	0x40000800
 8005b60:	40013400 	.word	0x40013400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40015000 	.word	0x40015000
 8005b6c:	00010007 	.word	0x00010007

08005b70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e049      	b.n	8005c16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f841 	bl	8005c1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f000 fda6 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <HAL_TIM_PWM_Start+0x24>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	bf14      	ite	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2300      	moveq	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	e03c      	b.n	8005cd2 <HAL_TIM_PWM_Start+0x9e>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d109      	bne.n	8005c72 <HAL_TIM_PWM_Start+0x3e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	bf14      	ite	ne
 8005c6a:	2301      	movne	r3, #1
 8005c6c:	2300      	moveq	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	e02f      	b.n	8005cd2 <HAL_TIM_PWM_Start+0x9e>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d109      	bne.n	8005c8c <HAL_TIM_PWM_Start+0x58>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	bf14      	ite	ne
 8005c84:	2301      	movne	r3, #1
 8005c86:	2300      	moveq	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	e022      	b.n	8005cd2 <HAL_TIM_PWM_Start+0x9e>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b0c      	cmp	r3, #12
 8005c90:	d109      	bne.n	8005ca6 <HAL_TIM_PWM_Start+0x72>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	bf14      	ite	ne
 8005c9e:	2301      	movne	r3, #1
 8005ca0:	2300      	moveq	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	e015      	b.n	8005cd2 <HAL_TIM_PWM_Start+0x9e>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d109      	bne.n	8005cc0 <HAL_TIM_PWM_Start+0x8c>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	bf14      	ite	ne
 8005cb8:	2301      	movne	r3, #1
 8005cba:	2300      	moveq	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	e008      	b.n	8005cd2 <HAL_TIM_PWM_Start+0x9e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	bf14      	ite	ne
 8005ccc:	2301      	movne	r3, #1
 8005cce:	2300      	moveq	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e0a1      	b.n	8005e1e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d104      	bne.n	8005cea <HAL_TIM_PWM_Start+0xb6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce8:	e023      	b.n	8005d32 <HAL_TIM_PWM_Start+0xfe>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d104      	bne.n	8005cfa <HAL_TIM_PWM_Start+0xc6>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf8:	e01b      	b.n	8005d32 <HAL_TIM_PWM_Start+0xfe>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d104      	bne.n	8005d0a <HAL_TIM_PWM_Start+0xd6>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d08:	e013      	b.n	8005d32 <HAL_TIM_PWM_Start+0xfe>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b0c      	cmp	r3, #12
 8005d0e:	d104      	bne.n	8005d1a <HAL_TIM_PWM_Start+0xe6>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d18:	e00b      	b.n	8005d32 <HAL_TIM_PWM_Start+0xfe>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d104      	bne.n	8005d2a <HAL_TIM_PWM_Start+0xf6>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d28:	e003      	b.n	8005d32 <HAL_TIM_PWM_Start+0xfe>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 f91e 	bl	8006f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a38      	ldr	r2, [pc, #224]	; (8005e28 <HAL_TIM_PWM_Start+0x1f4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d018      	beq.n	8005d7c <HAL_TIM_PWM_Start+0x148>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a37      	ldr	r2, [pc, #220]	; (8005e2c <HAL_TIM_PWM_Start+0x1f8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d013      	beq.n	8005d7c <HAL_TIM_PWM_Start+0x148>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a35      	ldr	r2, [pc, #212]	; (8005e30 <HAL_TIM_PWM_Start+0x1fc>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00e      	beq.n	8005d7c <HAL_TIM_PWM_Start+0x148>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a34      	ldr	r2, [pc, #208]	; (8005e34 <HAL_TIM_PWM_Start+0x200>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d009      	beq.n	8005d7c <HAL_TIM_PWM_Start+0x148>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a32      	ldr	r2, [pc, #200]	; (8005e38 <HAL_TIM_PWM_Start+0x204>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d004      	beq.n	8005d7c <HAL_TIM_PWM_Start+0x148>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a31      	ldr	r2, [pc, #196]	; (8005e3c <HAL_TIM_PWM_Start+0x208>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d101      	bne.n	8005d80 <HAL_TIM_PWM_Start+0x14c>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <HAL_TIM_PWM_Start+0x14e>
 8005d80:	2300      	movs	r3, #0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a23      	ldr	r2, [pc, #140]	; (8005e28 <HAL_TIM_PWM_Start+0x1f4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d01d      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x1a8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da8:	d018      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x1a8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a24      	ldr	r2, [pc, #144]	; (8005e40 <HAL_TIM_PWM_Start+0x20c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x1a8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a22      	ldr	r2, [pc, #136]	; (8005e44 <HAL_TIM_PWM_Start+0x210>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x1a8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1a      	ldr	r2, [pc, #104]	; (8005e2c <HAL_TIM_PWM_Start+0x1f8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x1a8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <HAL_TIM_PWM_Start+0x1fc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x1a8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <HAL_TIM_PWM_Start+0x208>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d115      	bne.n	8005e08 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <HAL_TIM_PWM_Start+0x214>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b06      	cmp	r3, #6
 8005dec:	d015      	beq.n	8005e1a <HAL_TIM_PWM_Start+0x1e6>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df4:	d011      	beq.n	8005e1a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 0201 	orr.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e06:	e008      	b.n	8005e1a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	e000      	b.n	8005e1c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40013400 	.word	0x40013400
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800
 8005e3c:	40015000 	.word	0x40015000
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	00010007 	.word	0x00010007

08005e4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e097      	b.n	8005f90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7fb ffa1 	bl	8001dbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005e90:	f023 0307 	bic.w	r3, r3, #7
 8005e94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	f000 fc2d 	bl	8006700 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ece:	f023 0303 	bic.w	r3, r3, #3
 8005ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005eec:	f023 030c 	bic.w	r3, r3, #12
 8005ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	011a      	lsls	r2, r3, #4
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	031b      	lsls	r3, r3, #12
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fa8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d110      	bne.n	8005fea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d102      	bne.n	8005fd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fce:	7b7b      	ldrb	r3, [r7, #13]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d001      	beq.n	8005fd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e069      	b.n	80060ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe8:	e031      	b.n	800604e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d110      	bne.n	8006012 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d102      	bne.n	8005ffc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ff6:	7b3b      	ldrb	r3, [r7, #12]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d001      	beq.n	8006000 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e055      	b.n	80060ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006010:	e01d      	b.n	800604e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d108      	bne.n	800602a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d105      	bne.n	800602a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800601e:	7b7b      	ldrb	r3, [r7, #13]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d102      	bne.n	800602a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006024:	7b3b      	ldrb	r3, [r7, #12]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d001      	beq.n	800602e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e03e      	b.n	80060ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2202      	movs	r2, #2
 8006032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2202      	movs	r2, #2
 800604a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_TIM_Encoder_Start+0xc4>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b04      	cmp	r3, #4
 8006058:	d008      	beq.n	800606c <HAL_TIM_Encoder_Start+0xd4>
 800605a:	e00f      	b.n	800607c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2201      	movs	r2, #1
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f000 ff89 	bl	8006f7c <TIM_CCxChannelCmd>
      break;
 800606a:	e016      	b.n	800609a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2201      	movs	r2, #1
 8006072:	2104      	movs	r1, #4
 8006074:	4618      	mov	r0, r3
 8006076:	f000 ff81 	bl	8006f7c <TIM_CCxChannelCmd>
      break;
 800607a:	e00e      	b.n	800609a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2201      	movs	r2, #1
 8006082:	2100      	movs	r1, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f000 ff79 	bl	8006f7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2201      	movs	r2, #1
 8006090:	2104      	movs	r1, #4
 8006092:	4618      	mov	r0, r3
 8006094:	f000 ff72 	bl	8006f7c <TIM_CCxChannelCmd>
      break;
 8006098:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0201 	orr.w	r2, r2, #1
 80060a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d122      	bne.n	8006110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d11b      	bne.n	8006110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0202 	mvn.w	r2, #2
 80060e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fae3 	bl	80066c2 <HAL_TIM_IC_CaptureCallback>
 80060fc:	e005      	b.n	800610a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fad5 	bl	80066ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fae6 	bl	80066d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b04      	cmp	r3, #4
 800611c:	d122      	bne.n	8006164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b04      	cmp	r3, #4
 800612a:	d11b      	bne.n	8006164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0204 	mvn.w	r2, #4
 8006134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fab9 	bl	80066c2 <HAL_TIM_IC_CaptureCallback>
 8006150:	e005      	b.n	800615e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 faab 	bl	80066ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fabc 	bl	80066d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b08      	cmp	r3, #8
 8006170:	d122      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0308 	and.w	r3, r3, #8
 800617c:	2b08      	cmp	r3, #8
 800617e:	d11b      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0208 	mvn.w	r2, #8
 8006188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2204      	movs	r2, #4
 800618e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fa8f 	bl	80066c2 <HAL_TIM_IC_CaptureCallback>
 80061a4:	e005      	b.n	80061b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fa81 	bl	80066ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fa92 	bl	80066d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d122      	bne.n	800620c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d11b      	bne.n	800620c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0210 	mvn.w	r2, #16
 80061dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2208      	movs	r2, #8
 80061e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa65 	bl	80066c2 <HAL_TIM_IC_CaptureCallback>
 80061f8:	e005      	b.n	8006206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa57 	bl	80066ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fa68 	bl	80066d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b01      	cmp	r3, #1
 8006218:	d10e      	bne.n	8006238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b01      	cmp	r3, #1
 8006226:	d107      	bne.n	8006238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0201 	mvn.w	r2, #1
 8006230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fa fd98 	bl	8000d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006242:	2b80      	cmp	r3, #128	; 0x80
 8006244:	d10e      	bne.n	8006264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006250:	2b80      	cmp	r3, #128	; 0x80
 8006252:	d107      	bne.n	8006264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800625c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 ffce 	bl	8007200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006272:	d10e      	bne.n	8006292 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627e:	2b80      	cmp	r3, #128	; 0x80
 8006280:	d107      	bne.n	8006292 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800628a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 ffc1 	bl	8007214 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b40      	cmp	r3, #64	; 0x40
 800629e:	d10e      	bne.n	80062be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	d107      	bne.n	80062be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fa16 	bl	80066ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d10e      	bne.n	80062ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d107      	bne.n	80062ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f06f 0220 	mvn.w	r2, #32
 80062e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 ff81 	bl	80071ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800630e:	2302      	movs	r3, #2
 8006310:	e0ff      	b.n	8006512 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b14      	cmp	r3, #20
 800631e:	f200 80f0 	bhi.w	8006502 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006322:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006328:	0800637d 	.word	0x0800637d
 800632c:	08006503 	.word	0x08006503
 8006330:	08006503 	.word	0x08006503
 8006334:	08006503 	.word	0x08006503
 8006338:	080063bd 	.word	0x080063bd
 800633c:	08006503 	.word	0x08006503
 8006340:	08006503 	.word	0x08006503
 8006344:	08006503 	.word	0x08006503
 8006348:	080063ff 	.word	0x080063ff
 800634c:	08006503 	.word	0x08006503
 8006350:	08006503 	.word	0x08006503
 8006354:	08006503 	.word	0x08006503
 8006358:	0800643f 	.word	0x0800643f
 800635c:	08006503 	.word	0x08006503
 8006360:	08006503 	.word	0x08006503
 8006364:	08006503 	.word	0x08006503
 8006368:	08006481 	.word	0x08006481
 800636c:	08006503 	.word	0x08006503
 8006370:	08006503 	.word	0x08006503
 8006374:	08006503 	.word	0x08006503
 8006378:	080064c1 	.word	0x080064c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fa5a 	bl	800683c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0208 	orr.w	r2, r2, #8
 8006396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0204 	bic.w	r2, r2, #4
 80063a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6999      	ldr	r1, [r3, #24]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	691a      	ldr	r2, [r3, #16]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	619a      	str	r2, [r3, #24]
      break;
 80063ba:	e0a5      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fad4 	bl	8006970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6999      	ldr	r1, [r3, #24]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	021a      	lsls	r2, r3, #8
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	619a      	str	r2, [r3, #24]
      break;
 80063fc:	e084      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68b9      	ldr	r1, [r7, #8]
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fb47 	bl	8006a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69da      	ldr	r2, [r3, #28]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0208 	orr.w	r2, r2, #8
 8006418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0204 	bic.w	r2, r2, #4
 8006428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69d9      	ldr	r1, [r3, #28]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	61da      	str	r2, [r3, #28]
      break;
 800643c:	e064      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fbb9 	bl	8006bbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69d9      	ldr	r1, [r3, #28]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	021a      	lsls	r2, r3, #8
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	61da      	str	r2, [r3, #28]
      break;
 800647e:	e043      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fc08 	bl	8006c9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0208 	orr.w	r2, r2, #8
 800649a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0204 	bic.w	r2, r2, #4
 80064aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691a      	ldr	r2, [r3, #16]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064be:	e023      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fc52 	bl	8006d70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	021a      	lsls	r2, r3, #8
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006500:	e002      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	75fb      	strb	r3, [r7, #23]
      break;
 8006506:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006510:	7dfb      	ldrb	r3, [r7, #23]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop

0800651c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_TIM_ConfigClockSource+0x1c>
 8006534:	2302      	movs	r3, #2
 8006536:	e0b6      	b.n	80066a6 <HAL_TIM_ConfigClockSource+0x18a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800655a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006574:	d03e      	beq.n	80065f4 <HAL_TIM_ConfigClockSource+0xd8>
 8006576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657a:	f200 8087 	bhi.w	800668c <HAL_TIM_ConfigClockSource+0x170>
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006582:	f000 8086 	beq.w	8006692 <HAL_TIM_ConfigClockSource+0x176>
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658a:	d87f      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 800658c:	2b70      	cmp	r3, #112	; 0x70
 800658e:	d01a      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0xaa>
 8006590:	2b70      	cmp	r3, #112	; 0x70
 8006592:	d87b      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 8006594:	2b60      	cmp	r3, #96	; 0x60
 8006596:	d050      	beq.n	800663a <HAL_TIM_ConfigClockSource+0x11e>
 8006598:	2b60      	cmp	r3, #96	; 0x60
 800659a:	d877      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 800659c:	2b50      	cmp	r3, #80	; 0x50
 800659e:	d03c      	beq.n	800661a <HAL_TIM_ConfigClockSource+0xfe>
 80065a0:	2b50      	cmp	r3, #80	; 0x50
 80065a2:	d873      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d058      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x13e>
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d86f      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 80065ac:	2b30      	cmp	r3, #48	; 0x30
 80065ae:	d064      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15e>
 80065b0:	2b30      	cmp	r3, #48	; 0x30
 80065b2:	d86b      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d060      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15e>
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d867      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d05c      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15e>
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d05a      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15e>
 80065c4:	e062      	b.n	800668c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6899      	ldr	r1, [r3, #8]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f000 fcb1 	bl	8006f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	609a      	str	r2, [r3, #8]
      break;
 80065f2:	e04f      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	6899      	ldr	r1, [r3, #8]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f000 fc9a 	bl	8006f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006616:	609a      	str	r2, [r3, #8]
      break;
 8006618:	e03c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6859      	ldr	r1, [r3, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	461a      	mov	r2, r3
 8006628:	f000 fc0e 	bl	8006e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2150      	movs	r1, #80	; 0x50
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fc67 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 8006638:	e02c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6859      	ldr	r1, [r3, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	461a      	mov	r2, r3
 8006648:	f000 fc2d 	bl	8006ea6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2160      	movs	r1, #96	; 0x60
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fc57 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 8006658:	e01c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	461a      	mov	r2, r3
 8006668:	f000 fbee 	bl	8006e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2140      	movs	r1, #64	; 0x40
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fc47 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 8006678:	e00c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f000 fc3e 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 800668a:	e003      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	73fb      	strb	r3, [r7, #15]
      break;
 8006690:	e000      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
	...

08006700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a42      	ldr	r2, [pc, #264]	; (800681c <TIM_Base_SetConfig+0x11c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d013      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671e:	d00f      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a3f      	ldr	r2, [pc, #252]	; (8006820 <TIM_Base_SetConfig+0x120>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3e      	ldr	r2, [pc, #248]	; (8006824 <TIM_Base_SetConfig+0x124>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3d      	ldr	r2, [pc, #244]	; (8006828 <TIM_Base_SetConfig+0x128>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a3c      	ldr	r2, [pc, #240]	; (800682c <TIM_Base_SetConfig+0x12c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d108      	bne.n	8006752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a31      	ldr	r2, [pc, #196]	; (800681c <TIM_Base_SetConfig+0x11c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01f      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006760:	d01b      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2e      	ldr	r2, [pc, #184]	; (8006820 <TIM_Base_SetConfig+0x120>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d017      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2d      	ldr	r2, [pc, #180]	; (8006824 <TIM_Base_SetConfig+0x124>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2c      	ldr	r2, [pc, #176]	; (8006828 <TIM_Base_SetConfig+0x128>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2c      	ldr	r2, [pc, #176]	; (8006830 <TIM_Base_SetConfig+0x130>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00b      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2b      	ldr	r2, [pc, #172]	; (8006834 <TIM_Base_SetConfig+0x134>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2a      	ldr	r2, [pc, #168]	; (8006838 <TIM_Base_SetConfig+0x138>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a25      	ldr	r2, [pc, #148]	; (800682c <TIM_Base_SetConfig+0x12c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d108      	bne.n	80067ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a12      	ldr	r2, [pc, #72]	; (800681c <TIM_Base_SetConfig+0x11c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d013      	beq.n	8006800 <TIM_Base_SetConfig+0x100>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a13      	ldr	r2, [pc, #76]	; (8006828 <TIM_Base_SetConfig+0x128>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_Base_SetConfig+0x100>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a13      	ldr	r2, [pc, #76]	; (8006830 <TIM_Base_SetConfig+0x130>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_Base_SetConfig+0x100>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a12      	ldr	r2, [pc, #72]	; (8006834 <TIM_Base_SetConfig+0x134>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_Base_SetConfig+0x100>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a11      	ldr	r2, [pc, #68]	; (8006838 <TIM_Base_SetConfig+0x138>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0x100>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0c      	ldr	r2, [pc, #48]	; (800682c <TIM_Base_SetConfig+0x12c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d103      	bne.n	8006808 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	615a      	str	r2, [r3, #20]
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40013400 	.word	0x40013400
 800682c:	40015000 	.word	0x40015000
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800

0800683c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f023 0201 	bic.w	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800686a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0303 	bic.w	r3, r3, #3
 8006876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f023 0302 	bic.w	r3, r3, #2
 8006888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a30      	ldr	r2, [pc, #192]	; (8006958 <TIM_OC1_SetConfig+0x11c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d013      	beq.n	80068c4 <TIM_OC1_SetConfig+0x88>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a2f      	ldr	r2, [pc, #188]	; (800695c <TIM_OC1_SetConfig+0x120>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00f      	beq.n	80068c4 <TIM_OC1_SetConfig+0x88>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a2e      	ldr	r2, [pc, #184]	; (8006960 <TIM_OC1_SetConfig+0x124>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00b      	beq.n	80068c4 <TIM_OC1_SetConfig+0x88>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a2d      	ldr	r2, [pc, #180]	; (8006964 <TIM_OC1_SetConfig+0x128>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d007      	beq.n	80068c4 <TIM_OC1_SetConfig+0x88>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a2c      	ldr	r2, [pc, #176]	; (8006968 <TIM_OC1_SetConfig+0x12c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_OC1_SetConfig+0x88>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a2b      	ldr	r2, [pc, #172]	; (800696c <TIM_OC1_SetConfig+0x130>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d10c      	bne.n	80068de <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0308 	bic.w	r3, r3, #8
 80068ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f023 0304 	bic.w	r3, r3, #4
 80068dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a1d      	ldr	r2, [pc, #116]	; (8006958 <TIM_OC1_SetConfig+0x11c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d013      	beq.n	800690e <TIM_OC1_SetConfig+0xd2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a1c      	ldr	r2, [pc, #112]	; (800695c <TIM_OC1_SetConfig+0x120>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00f      	beq.n	800690e <TIM_OC1_SetConfig+0xd2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a1b      	ldr	r2, [pc, #108]	; (8006960 <TIM_OC1_SetConfig+0x124>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00b      	beq.n	800690e <TIM_OC1_SetConfig+0xd2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a1a      	ldr	r2, [pc, #104]	; (8006964 <TIM_OC1_SetConfig+0x128>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d007      	beq.n	800690e <TIM_OC1_SetConfig+0xd2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a19      	ldr	r2, [pc, #100]	; (8006968 <TIM_OC1_SetConfig+0x12c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d003      	beq.n	800690e <TIM_OC1_SetConfig+0xd2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a18      	ldr	r2, [pc, #96]	; (800696c <TIM_OC1_SetConfig+0x130>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d111      	bne.n	8006932 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800691c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	621a      	str	r2, [r3, #32]
}
 800694c:	bf00      	nop
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	40012c00 	.word	0x40012c00
 800695c:	40013400 	.word	0x40013400
 8006960:	40014000 	.word	0x40014000
 8006964:	40014400 	.word	0x40014400
 8006968:	40014800 	.word	0x40014800
 800696c:	40015000 	.word	0x40015000

08006970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f023 0210 	bic.w	r2, r3, #16
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f023 0320 	bic.w	r3, r3, #32
 80069be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a2c      	ldr	r2, [pc, #176]	; (8006a80 <TIM_OC2_SetConfig+0x110>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d007      	beq.n	80069e4 <TIM_OC2_SetConfig+0x74>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a2b      	ldr	r2, [pc, #172]	; (8006a84 <TIM_OC2_SetConfig+0x114>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_OC2_SetConfig+0x74>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a2a      	ldr	r2, [pc, #168]	; (8006a88 <TIM_OC2_SetConfig+0x118>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d10d      	bne.n	8006a00 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a1f      	ldr	r2, [pc, #124]	; (8006a80 <TIM_OC2_SetConfig+0x110>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <TIM_OC2_SetConfig+0xc0>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <TIM_OC2_SetConfig+0x114>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00f      	beq.n	8006a30 <TIM_OC2_SetConfig+0xc0>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a1e      	ldr	r2, [pc, #120]	; (8006a8c <TIM_OC2_SetConfig+0x11c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00b      	beq.n	8006a30 <TIM_OC2_SetConfig+0xc0>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a1d      	ldr	r2, [pc, #116]	; (8006a90 <TIM_OC2_SetConfig+0x120>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_OC2_SetConfig+0xc0>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a1c      	ldr	r2, [pc, #112]	; (8006a94 <TIM_OC2_SetConfig+0x124>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC2_SetConfig+0xc0>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <TIM_OC2_SetConfig+0x118>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d113      	bne.n	8006a58 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a36:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a3e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40013400 	.word	0x40013400
 8006a88:	40015000 	.word	0x40015000
 8006a8c:	40014000 	.word	0x40014000
 8006a90:	40014400 	.word	0x40014400
 8006a94:	40014800 	.word	0x40014800

08006a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0303 	bic.w	r3, r3, #3
 8006ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2b      	ldr	r2, [pc, #172]	; (8006ba4 <TIM_OC3_SetConfig+0x10c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d007      	beq.n	8006b0a <TIM_OC3_SetConfig+0x72>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <TIM_OC3_SetConfig+0x110>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d003      	beq.n	8006b0a <TIM_OC3_SetConfig+0x72>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a29      	ldr	r2, [pc, #164]	; (8006bac <TIM_OC3_SetConfig+0x114>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d10d      	bne.n	8006b26 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	021b      	lsls	r3, r3, #8
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b24:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a1e      	ldr	r2, [pc, #120]	; (8006ba4 <TIM_OC3_SetConfig+0x10c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <TIM_OC3_SetConfig+0xbe>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <TIM_OC3_SetConfig+0x110>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00f      	beq.n	8006b56 <TIM_OC3_SetConfig+0xbe>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a1d      	ldr	r2, [pc, #116]	; (8006bb0 <TIM_OC3_SetConfig+0x118>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00b      	beq.n	8006b56 <TIM_OC3_SetConfig+0xbe>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a1c      	ldr	r2, [pc, #112]	; (8006bb4 <TIM_OC3_SetConfig+0x11c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d007      	beq.n	8006b56 <TIM_OC3_SetConfig+0xbe>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a1b      	ldr	r2, [pc, #108]	; (8006bb8 <TIM_OC3_SetConfig+0x120>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d003      	beq.n	8006b56 <TIM_OC3_SetConfig+0xbe>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a16      	ldr	r2, [pc, #88]	; (8006bac <TIM_OC3_SetConfig+0x114>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d113      	bne.n	8006b7e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	621a      	str	r2, [r3, #32]
}
 8006b98:	bf00      	nop
 8006b9a:	371c      	adds	r7, #28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	40013400 	.word	0x40013400
 8006bac:	40015000 	.word	0x40015000
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40014400 	.word	0x40014400
 8006bb8:	40014800 	.word	0x40014800

08006bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	031b      	lsls	r3, r3, #12
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a1a      	ldr	r2, [pc, #104]	; (8006c84 <TIM_OC4_SetConfig+0xc8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d013      	beq.n	8006c48 <TIM_OC4_SetConfig+0x8c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a19      	ldr	r2, [pc, #100]	; (8006c88 <TIM_OC4_SetConfig+0xcc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00f      	beq.n	8006c48 <TIM_OC4_SetConfig+0x8c>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a18      	ldr	r2, [pc, #96]	; (8006c8c <TIM_OC4_SetConfig+0xd0>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d00b      	beq.n	8006c48 <TIM_OC4_SetConfig+0x8c>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a17      	ldr	r2, [pc, #92]	; (8006c90 <TIM_OC4_SetConfig+0xd4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d007      	beq.n	8006c48 <TIM_OC4_SetConfig+0x8c>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a16      	ldr	r2, [pc, #88]	; (8006c94 <TIM_OC4_SetConfig+0xd8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d003      	beq.n	8006c48 <TIM_OC4_SetConfig+0x8c>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a15      	ldr	r2, [pc, #84]	; (8006c98 <TIM_OC4_SetConfig+0xdc>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d109      	bne.n	8006c5c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	019b      	lsls	r3, r3, #6
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40012c00 	.word	0x40012c00
 8006c88:	40013400 	.word	0x40013400
 8006c8c:	40014000 	.word	0x40014000
 8006c90:	40014400 	.word	0x40014400
 8006c94:	40014800 	.word	0x40014800
 8006c98:	40015000 	.word	0x40015000

08006c9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ce0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	041b      	lsls	r3, r3, #16
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a19      	ldr	r2, [pc, #100]	; (8006d58 <TIM_OC5_SetConfig+0xbc>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d013      	beq.n	8006d1e <TIM_OC5_SetConfig+0x82>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a18      	ldr	r2, [pc, #96]	; (8006d5c <TIM_OC5_SetConfig+0xc0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00f      	beq.n	8006d1e <TIM_OC5_SetConfig+0x82>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a17      	ldr	r2, [pc, #92]	; (8006d60 <TIM_OC5_SetConfig+0xc4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00b      	beq.n	8006d1e <TIM_OC5_SetConfig+0x82>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a16      	ldr	r2, [pc, #88]	; (8006d64 <TIM_OC5_SetConfig+0xc8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d007      	beq.n	8006d1e <TIM_OC5_SetConfig+0x82>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <TIM_OC5_SetConfig+0xcc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d003      	beq.n	8006d1e <TIM_OC5_SetConfig+0x82>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a14      	ldr	r2, [pc, #80]	; (8006d6c <TIM_OC5_SetConfig+0xd0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d109      	bne.n	8006d32 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	621a      	str	r2, [r3, #32]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	40012c00 	.word	0x40012c00
 8006d5c:	40013400 	.word	0x40013400
 8006d60:	40014000 	.word	0x40014000
 8006d64:	40014400 	.word	0x40014400
 8006d68:	40014800 	.word	0x40014800
 8006d6c:	40015000 	.word	0x40015000

08006d70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	051b      	lsls	r3, r3, #20
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a1a      	ldr	r2, [pc, #104]	; (8006e30 <TIM_OC6_SetConfig+0xc0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d013      	beq.n	8006df4 <TIM_OC6_SetConfig+0x84>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a19      	ldr	r2, [pc, #100]	; (8006e34 <TIM_OC6_SetConfig+0xc4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00f      	beq.n	8006df4 <TIM_OC6_SetConfig+0x84>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a18      	ldr	r2, [pc, #96]	; (8006e38 <TIM_OC6_SetConfig+0xc8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00b      	beq.n	8006df4 <TIM_OC6_SetConfig+0x84>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <TIM_OC6_SetConfig+0xcc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d007      	beq.n	8006df4 <TIM_OC6_SetConfig+0x84>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <TIM_OC6_SetConfig+0xd0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_OC6_SetConfig+0x84>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <TIM_OC6_SetConfig+0xd4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d109      	bne.n	8006e08 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	029b      	lsls	r3, r3, #10
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	621a      	str	r2, [r3, #32]
}
 8006e22:	bf00      	nop
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40012c00 	.word	0x40012c00
 8006e34:	40013400 	.word	0x40013400
 8006e38:	40014000 	.word	0x40014000
 8006e3c:	40014400 	.word	0x40014400
 8006e40:	40014800 	.word	0x40014800
 8006e44:	40015000 	.word	0x40015000

08006e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f023 0201 	bic.w	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f023 030a 	bic.w	r3, r3, #10
 8006e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b087      	sub	sp, #28
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f023 0210 	bic.w	r2, r3, #16
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	031b      	lsls	r3, r3, #12
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f043 0307 	orr.w	r3, r3, #7
 8006f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	609a      	str	r2, [r3, #8]
}
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	021a      	lsls	r2, r3, #8
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	609a      	str	r2, [r3, #8]
}
 8006f70:	bf00      	nop
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	2201      	movs	r2, #1
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1a      	ldr	r2, [r3, #32]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	401a      	ands	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a1a      	ldr	r2, [r3, #32]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 031f 	and.w	r3, r3, #31
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	621a      	str	r2, [r3, #32]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
	...

08006fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e06d      	b.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a30      	ldr	r2, [pc, #192]	; (80070c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a2f      	ldr	r2, [pc, #188]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a2d      	ldr	r2, [pc, #180]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d108      	bne.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007024:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a1e      	ldr	r2, [pc, #120]	; (80070c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d01d      	beq.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705c:	d018      	beq.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1c      	ldr	r2, [pc, #112]	; (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d013      	beq.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a1a      	ldr	r2, [pc, #104]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00e      	beq.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a15      	ldr	r2, [pc, #84]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d009      	beq.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a16      	ldr	r2, [pc, #88]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a11      	ldr	r2, [pc, #68]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d10c      	bne.n	80070aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007096:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	40012c00 	.word	0x40012c00
 80070cc:	40013400 	.word	0x40013400
 80070d0:	40015000 	.word	0x40015000
 80070d4:	40000400 	.word	0x40000400
 80070d8:	40000800 	.word	0x40000800
 80070dc:	40014000 	.word	0x40014000

080070e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e06a      	b.n	80071d2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	041b      	lsls	r3, r3, #16
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a19      	ldr	r2, [pc, #100]	; (80071e0 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d009      	beq.n	8007194 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a17      	ldr	r2, [pc, #92]	; (80071e4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a16      	ldr	r2, [pc, #88]	; (80071e8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d115      	bne.n	80071c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	051b      	lsls	r3, r3, #20
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40012c00 	.word	0x40012c00
 80071e4:	40013400 	.word	0x40013400
 80071e8:	40015000 	.word	0x40015000

080071ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <__errno>:
 8007228:	4b01      	ldr	r3, [pc, #4]	; (8007230 <__errno+0x8>)
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000010 	.word	0x20000010

08007234 <__libc_init_array>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	4d0d      	ldr	r5, [pc, #52]	; (800726c <__libc_init_array+0x38>)
 8007238:	4c0d      	ldr	r4, [pc, #52]	; (8007270 <__libc_init_array+0x3c>)
 800723a:	1b64      	subs	r4, r4, r5
 800723c:	10a4      	asrs	r4, r4, #2
 800723e:	2600      	movs	r6, #0
 8007240:	42a6      	cmp	r6, r4
 8007242:	d109      	bne.n	8007258 <__libc_init_array+0x24>
 8007244:	4d0b      	ldr	r5, [pc, #44]	; (8007274 <__libc_init_array+0x40>)
 8007246:	4c0c      	ldr	r4, [pc, #48]	; (8007278 <__libc_init_array+0x44>)
 8007248:	f000 f8da 	bl	8007400 <_init>
 800724c:	1b64      	subs	r4, r4, r5
 800724e:	10a4      	asrs	r4, r4, #2
 8007250:	2600      	movs	r6, #0
 8007252:	42a6      	cmp	r6, r4
 8007254:	d105      	bne.n	8007262 <__libc_init_array+0x2e>
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	f855 3b04 	ldr.w	r3, [r5], #4
 800725c:	4798      	blx	r3
 800725e:	3601      	adds	r6, #1
 8007260:	e7ee      	b.n	8007240 <__libc_init_array+0xc>
 8007262:	f855 3b04 	ldr.w	r3, [r5], #4
 8007266:	4798      	blx	r3
 8007268:	3601      	adds	r6, #1
 800726a:	e7f2      	b.n	8007252 <__libc_init_array+0x1e>
 800726c:	08007448 	.word	0x08007448
 8007270:	08007448 	.word	0x08007448
 8007274:	08007448 	.word	0x08007448
 8007278:	0800744c 	.word	0x0800744c

0800727c <malloc>:
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <malloc+0xc>)
 800727e:	4601      	mov	r1, r0
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	f000 b82b 	b.w	80072dc <_malloc_r>
 8007286:	bf00      	nop
 8007288:	20000010 	.word	0x20000010

0800728c <memset>:
 800728c:	4402      	add	r2, r0
 800728e:	4603      	mov	r3, r0
 8007290:	4293      	cmp	r3, r2
 8007292:	d100      	bne.n	8007296 <memset+0xa>
 8007294:	4770      	bx	lr
 8007296:	f803 1b01 	strb.w	r1, [r3], #1
 800729a:	e7f9      	b.n	8007290 <memset+0x4>

0800729c <sbrk_aligned>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	4e0e      	ldr	r6, [pc, #56]	; (80072d8 <sbrk_aligned+0x3c>)
 80072a0:	460c      	mov	r4, r1
 80072a2:	6831      	ldr	r1, [r6, #0]
 80072a4:	4605      	mov	r5, r0
 80072a6:	b911      	cbnz	r1, 80072ae <sbrk_aligned+0x12>
 80072a8:	f000 f88c 	bl	80073c4 <_sbrk_r>
 80072ac:	6030      	str	r0, [r6, #0]
 80072ae:	4621      	mov	r1, r4
 80072b0:	4628      	mov	r0, r5
 80072b2:	f000 f887 	bl	80073c4 <_sbrk_r>
 80072b6:	1c43      	adds	r3, r0, #1
 80072b8:	d00a      	beq.n	80072d0 <sbrk_aligned+0x34>
 80072ba:	1cc4      	adds	r4, r0, #3
 80072bc:	f024 0403 	bic.w	r4, r4, #3
 80072c0:	42a0      	cmp	r0, r4
 80072c2:	d007      	beq.n	80072d4 <sbrk_aligned+0x38>
 80072c4:	1a21      	subs	r1, r4, r0
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 f87c 	bl	80073c4 <_sbrk_r>
 80072cc:	3001      	adds	r0, #1
 80072ce:	d101      	bne.n	80072d4 <sbrk_aligned+0x38>
 80072d0:	f04f 34ff 	mov.w	r4, #4294967295
 80072d4:	4620      	mov	r0, r4
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
 80072d8:	20000290 	.word	0x20000290

080072dc <_malloc_r>:
 80072dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e0:	1ccd      	adds	r5, r1, #3
 80072e2:	f025 0503 	bic.w	r5, r5, #3
 80072e6:	3508      	adds	r5, #8
 80072e8:	2d0c      	cmp	r5, #12
 80072ea:	bf38      	it	cc
 80072ec:	250c      	movcc	r5, #12
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	4607      	mov	r7, r0
 80072f2:	db01      	blt.n	80072f8 <_malloc_r+0x1c>
 80072f4:	42a9      	cmp	r1, r5
 80072f6:	d905      	bls.n	8007304 <_malloc_r+0x28>
 80072f8:	230c      	movs	r3, #12
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	2600      	movs	r6, #0
 80072fe:	4630      	mov	r0, r6
 8007300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007304:	4e2e      	ldr	r6, [pc, #184]	; (80073c0 <_malloc_r+0xe4>)
 8007306:	f000 f86d 	bl	80073e4 <__malloc_lock>
 800730a:	6833      	ldr	r3, [r6, #0]
 800730c:	461c      	mov	r4, r3
 800730e:	bb34      	cbnz	r4, 800735e <_malloc_r+0x82>
 8007310:	4629      	mov	r1, r5
 8007312:	4638      	mov	r0, r7
 8007314:	f7ff ffc2 	bl	800729c <sbrk_aligned>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	4604      	mov	r4, r0
 800731c:	d14d      	bne.n	80073ba <_malloc_r+0xde>
 800731e:	6834      	ldr	r4, [r6, #0]
 8007320:	4626      	mov	r6, r4
 8007322:	2e00      	cmp	r6, #0
 8007324:	d140      	bne.n	80073a8 <_malloc_r+0xcc>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	4631      	mov	r1, r6
 800732a:	4638      	mov	r0, r7
 800732c:	eb04 0803 	add.w	r8, r4, r3
 8007330:	f000 f848 	bl	80073c4 <_sbrk_r>
 8007334:	4580      	cmp	r8, r0
 8007336:	d13a      	bne.n	80073ae <_malloc_r+0xd2>
 8007338:	6821      	ldr	r1, [r4, #0]
 800733a:	3503      	adds	r5, #3
 800733c:	1a6d      	subs	r5, r5, r1
 800733e:	f025 0503 	bic.w	r5, r5, #3
 8007342:	3508      	adds	r5, #8
 8007344:	2d0c      	cmp	r5, #12
 8007346:	bf38      	it	cc
 8007348:	250c      	movcc	r5, #12
 800734a:	4629      	mov	r1, r5
 800734c:	4638      	mov	r0, r7
 800734e:	f7ff ffa5 	bl	800729c <sbrk_aligned>
 8007352:	3001      	adds	r0, #1
 8007354:	d02b      	beq.n	80073ae <_malloc_r+0xd2>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	442b      	add	r3, r5
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	e00e      	b.n	800737c <_malloc_r+0xa0>
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	1b52      	subs	r2, r2, r5
 8007362:	d41e      	bmi.n	80073a2 <_malloc_r+0xc6>
 8007364:	2a0b      	cmp	r2, #11
 8007366:	d916      	bls.n	8007396 <_malloc_r+0xba>
 8007368:	1961      	adds	r1, r4, r5
 800736a:	42a3      	cmp	r3, r4
 800736c:	6025      	str	r5, [r4, #0]
 800736e:	bf18      	it	ne
 8007370:	6059      	strne	r1, [r3, #4]
 8007372:	6863      	ldr	r3, [r4, #4]
 8007374:	bf08      	it	eq
 8007376:	6031      	streq	r1, [r6, #0]
 8007378:	5162      	str	r2, [r4, r5]
 800737a:	604b      	str	r3, [r1, #4]
 800737c:	4638      	mov	r0, r7
 800737e:	f104 060b 	add.w	r6, r4, #11
 8007382:	f000 f835 	bl	80073f0 <__malloc_unlock>
 8007386:	f026 0607 	bic.w	r6, r6, #7
 800738a:	1d23      	adds	r3, r4, #4
 800738c:	1af2      	subs	r2, r6, r3
 800738e:	d0b6      	beq.n	80072fe <_malloc_r+0x22>
 8007390:	1b9b      	subs	r3, r3, r6
 8007392:	50a3      	str	r3, [r4, r2]
 8007394:	e7b3      	b.n	80072fe <_malloc_r+0x22>
 8007396:	6862      	ldr	r2, [r4, #4]
 8007398:	42a3      	cmp	r3, r4
 800739a:	bf0c      	ite	eq
 800739c:	6032      	streq	r2, [r6, #0]
 800739e:	605a      	strne	r2, [r3, #4]
 80073a0:	e7ec      	b.n	800737c <_malloc_r+0xa0>
 80073a2:	4623      	mov	r3, r4
 80073a4:	6864      	ldr	r4, [r4, #4]
 80073a6:	e7b2      	b.n	800730e <_malloc_r+0x32>
 80073a8:	4634      	mov	r4, r6
 80073aa:	6876      	ldr	r6, [r6, #4]
 80073ac:	e7b9      	b.n	8007322 <_malloc_r+0x46>
 80073ae:	230c      	movs	r3, #12
 80073b0:	603b      	str	r3, [r7, #0]
 80073b2:	4638      	mov	r0, r7
 80073b4:	f000 f81c 	bl	80073f0 <__malloc_unlock>
 80073b8:	e7a1      	b.n	80072fe <_malloc_r+0x22>
 80073ba:	6025      	str	r5, [r4, #0]
 80073bc:	e7de      	b.n	800737c <_malloc_r+0xa0>
 80073be:	bf00      	nop
 80073c0:	2000028c 	.word	0x2000028c

080073c4 <_sbrk_r>:
 80073c4:	b538      	push	{r3, r4, r5, lr}
 80073c6:	4d06      	ldr	r5, [pc, #24]	; (80073e0 <_sbrk_r+0x1c>)
 80073c8:	2300      	movs	r3, #0
 80073ca:	4604      	mov	r4, r0
 80073cc:	4608      	mov	r0, r1
 80073ce:	602b      	str	r3, [r5, #0]
 80073d0:	f7fa fdea 	bl	8001fa8 <_sbrk>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d102      	bne.n	80073de <_sbrk_r+0x1a>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	b103      	cbz	r3, 80073de <_sbrk_r+0x1a>
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	20000294 	.word	0x20000294

080073e4 <__malloc_lock>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__malloc_lock+0x8>)
 80073e6:	f000 b809 	b.w	80073fc <__retarget_lock_acquire_recursive>
 80073ea:	bf00      	nop
 80073ec:	20000298 	.word	0x20000298

080073f0 <__malloc_unlock>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__malloc_unlock+0x8>)
 80073f2:	f000 b804 	b.w	80073fe <__retarget_lock_release_recursive>
 80073f6:	bf00      	nop
 80073f8:	20000298 	.word	0x20000298

080073fc <__retarget_lock_acquire_recursive>:
 80073fc:	4770      	bx	lr

080073fe <__retarget_lock_release_recursive>:
 80073fe:	4770      	bx	lr

08007400 <_init>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	bf00      	nop
 8007404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007406:	bc08      	pop	{r3}
 8007408:	469e      	mov	lr, r3
 800740a:	4770      	bx	lr

0800740c <_fini>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	bf00      	nop
 8007410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007412:	bc08      	pop	{r3}
 8007414:	469e      	mov	lr, r3
 8007416:	4770      	bx	lr
